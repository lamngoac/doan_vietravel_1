using idn.Skycic.Inventory.BizService.Services;
using idn.Skycic.Inventory.Common.Models;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Diagnostics;
//using System.Xml.Linq;

using CmUtils = CommonUtils;
using TConst = idn.Skycic.Inventory.Constants;
using TDAL = EzDAL.MyDB;
using TDALUtils = EzDAL.Utils;
using TError = idn.Skycic.Inventory.Errors;
using TJson = Newtonsoft.Json;
using TUtils = idn.Skycic.Inventory.Utils;

// //

namespace idn.Skycic.Inventory.Biz
{
    public partial class BizidNInventory
    {
        #region // Invoice_Invoice:    
        public DataSet WAS_Invoice_Invoice_Change(
           ref ArrayList alParamsCoupleError
           , RQ_Invoice_Invoice objRQ_Invoice_Invoice
           ////
           , out RT_Invoice_Invoice objRT_Invoice_Invoice
           )
        {
            #region // Temp:
            string strTid = objRQ_Invoice_Invoice.Tid;
            objRT_Invoice_Invoice = new RT_Invoice_Invoice();
            DataSet mdsResult = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            DateTime dtimeSys = DateTime.UtcNow;
            //DataSet mdsExec = null;
            //DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(objRQ_Invoice_Invoice.Tid);
            //int nTidSeq = 0;
            //bool bNeedTransaction = true;
            string strFunctionName = "WAS_Invoice_Invoice_Change";
            string strErrorCodeDefault = TError.ErridnInventory.WAS_Invoice_Invoice_Change;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
                });
            #endregion

            try
            {
                #region // Init:
                #endregion

                #region // Refine and Check Input:
                //List<Invoice_Invoice> lst_Invoice_Invoice = new List<Invoice_Invoice>();
                //DataSet dsData = new DataSet();
                //{
                //    ////
                //    DataTable dt_Transaction_KeKhaiThue = TUtils.DataTableCmUtils.ToDataTable<Transaction_KeKhaiThue>(objRQ_Mst_NNT.Lst_Transaction_KeKhaiThue, "Transaction_KeKhaiThue");
                //    dsData.Tables.Add(dt_Transaction_KeKhaiThue);
                //}
                #endregion

                #region // Invoice_Invoice_Change:
                mdsResult = Invoice_Invoice_Change(
                    objRQ_Invoice_Invoice.Tid // strTid
                    , objRQ_Invoice_Invoice.GwUserCode // strGwUserCode
                    , objRQ_Invoice_Invoice.GwPassword // strGwPassword
                    , objRQ_Invoice_Invoice.WAUserCode // strUserCode
                    , objRQ_Invoice_Invoice.WAUserPassword // strUserPassword
                    , ref alParamsCoupleError // alParamsCoupleError
                    ////
                    , objRQ_Invoice_Invoice.Invoice_Invoice.InvoiceCode // objInvoiceCode
                    , objRQ_Invoice_Invoice.Invoice_Invoice.Remark // objRemark
                    );
                #endregion

                // Return Good:
                return mdsResult;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsResult
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Write ReturnLog:
                //_cf.ProcessBizReturn(
                //	ref mdsResult // mdsFinal
                //	, strTid // strTid
                //	, strFunctionName // strFunctionName
                //	);
                #endregion
            }
        }

        public DataSet Invoice_Invoice_Change(
           string strTid
           , string strGwUserCode
           , string strGwPassword
           , string strWAUserCode
           , string strWAUserPassword
           , ref ArrayList alParamsCoupleError
            ////
            , object objInvoiceCode
            , object objRemark
           )
        {
            #region // Temp:
            DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            //int nTidSeq = 0;
            DateTime dtimeSys = DateTime.UtcNow;
            string strFunctionName = "Invoice_Invoice_Change";
            string strErrorCodeDefault = TError.ErridnInventory.Invoice_Invoice_Change;
            alParamsCoupleError.AddRange(new object[]{
                    "strFunctionName", strFunctionName
                    , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
			        ////
					, "objInvoiceCode", objInvoiceCode
                    , "objRemark", objRemark
                    });
            #endregion

            try
            {
                #region // Init:
                //_cf.db.LogUserId = _cf.sinf.strUserCode;
                _cf.db.BeginTransaction();

                // Write RequestLog:
                _cf.ProcessBizReq_OutSide(
                    strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    , alParamsCoupleError // alParamsCoupleError
                    );

                // Sys_User_CheckAuthentication:
                //Sys_User_CheckAuthentication(
                //    ref alParamsCoupleError
                //    , strWAUserCode
                //    , strWAUserPassword
                //    );

                // Check Access/Deny:
                Sys_Access_CheckDenyV30(
                    ref alParamsCoupleError
                    , strWAUserCode
                    , strFunctionName
                    );
                #endregion

                #region // Invoice_Invoice_ChangeX:
                //DataSet dsGetData = null;
                {
                    Invoice_Invoice_ChangeX(
                        strTid // strTid
                        , strGwUserCode // strGwUserCode
                        , strGwPassword // strGwPassword
                        , strWAUserCode // strWAUserCode
                        , strWAUserPassword // strWAUserPassword
                        , ref alParamsCoupleError // alParamsCoupleError
                        , dtimeSys // dtimeSys
                        ////
                        , objInvoiceCode // objInvoiceCode
                        , objRemark // objRemark
                        );
                }
                ////
                //CmUtils.DataUtils.MoveDataTable(ref mdsFinal, ref dsGetData);
                #endregion

                // Return Good:
                TDALUtils.DBUtils.CommitSafety(_cf.db);
                mdsFinal.AcceptChanges();
                return mdsFinal;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Rollback:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);

                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsFinal
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Rollback and Release resources:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);
                TDALUtils.DBUtils.ReleaseAllSemaphore(_cf.db_Sys, true);

                // Write ReturnLog:
                _cf.ProcessBizReturn_OutSide(
                    ref mdsFinal // mdsFinal
                    , strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    );
                #endregion
            }
        }

        private void Invoice_Invoice_ChangeX(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            , DateTime dtimeSys
            //// 
            , object objInvoiceCode
            , object objRemark
           )
        {
            #region // Temp:
            //int nTidSeq = 0;
            //bool bMyDebugSql = false;
            string strFunctionName = "Invoice_Invoice_ChangeX";
            //string strErrorCodeDefault = TError.ErrHTCNM.Invoice_Invoice_ChangeX;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
				, "objInvoiceCode", objInvoiceCode
                , "objRemark", objRemark
                });
            //ArrayList alPCErrEx = new ArrayList();
            ////
            Hashtable htParamsSql = new Hashtable();
            #endregion

            #region // Convert Input:
            //alParamsCoupleError.AddRange(new object[]{
            //    "Check.dsData", TJson.JsonConvert.SerializeObject(dsData)
            //    });
            #endregion

            #region // Refine and Check Input Invoice_Invoice:
            ////
            string strInvoiceCode = TUtils.CUtils.StdParam(objInvoiceCode);
            string strRemark = string.Format("{0}", objRemark).Trim();
            ////
            DataTable dtDB_Invoice_Invoice = null;
            {
                Invoice_Invoice_CheckDB(
                    ref alParamsCoupleError // alParamsCoupleError
                    , strInvoiceCode // objInvoiceCode
                    , TConst.Flag.Yes // strFlagExistToCheck
                    , TConst.InvoiceStatus.Issued // strInvoiceStatusListToCheck
                    , out dtDB_Invoice_Invoice // dtDB_Invoice_Invoice
                    );

                //// 
                string strFlagChange = dtDB_Invoice_Invoice.Rows[0]["FlagChange"].ToString();
                if (!CmUtils.StringUtils.StringEqualIgnoreCase(strFlagChange, TConst.Flag.Active))
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.InvoiceCode", strInvoiceCode
                        , "Check.DB.FlagChange", strFlagChange
                        , "Check.FlagChange.Expected", TConst.Flag.Active
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Invoice_Invoice_Change_InvalidFlagChange
                        , null
                        , alParamsCoupleError.ToArray()
                        );
                }
                ////
            }
            #endregion

            #region // SaveTemp Invoice_Invoice:
            {
                ////
                TUtils.CUtils.MyBuildDBDT_Common(
                    _cf.db
                    , "#input_Invoice_Invoice"
                    , TConst.BizMix.Default_DBColType // strDefaultType
                    , new object[]{
                        "InvoiceCode"
                        , "Remark"
                        , "FlagChange"
                        , "ChangeDTimeUTC"
                        , "ChangeBy"
                        , "LogLUDTimeUTC"
                        , "LogLUBy"
                        }
                    , new object[]{
                            new object[]{
                                strInvoiceCode, // InvoiceCode
								strRemark, // Remark
								TConst.Flag.Inactive, // FlagChange
                                dtimeSys.ToString("yyyy-MM-dd HH:mm:ss"), // ChangeDTimeUTC
                                strWAUserCode, // ChangeBy
                                dtimeSys.ToString("yyyy-MM-dd HH:mm:ss"), // LogLUDTimeUTC
                                strWAUserCode, // LogLUBy
								}
                        }
                    );

            }
            #endregion

            #region // SaveDB:
            {
                ////
                string zzB_Update_Invoice_Invoice_ClauseSet_zzE = @"
						t.LogLUDTimeUTC = f.LogLUDTimeUTC
						, t.LogLUBy = f.LogLUBy
						, t.ChangeDTimeUTC = f.ChangeDTimeUTC
						, t.ChangeBy = f.ChangeBy
						, t.FlagChange = f.FlagChange
						, t.Remark = f.Remark
						";
                ////
                string zzB_Update_Invoice_Invoice_zzE = CmUtils.StringUtils.Replace(@"
						---- Invoice_Invoice:
						update t
						set 
							zzB_Update_Invoice_Invoice_ClauseSet_zzE
						from Invoice_Invoice t --//[mylock]
							inner join #input_Invoice_Invoice f --//[mylock]
								on t.InvoiceCode = f.InvoiceCode
						where (1=1)
						;
					"
                    , "zzB_Update_Invoice_Invoice_ClauseSet_zzE", zzB_Update_Invoice_Invoice_ClauseSet_zzE
                    );
                ////
                string strSql_SaveOnDB = CmUtils.StringUtils.Replace(@"
						----
						zzB_Update_Invoice_Invoice_zzE
                        ----
					"
                    , "zzB_Update_Invoice_Invoice_zzE", zzB_Update_Invoice_Invoice_zzE
                    );

                DataSet dsDB_Check = _cf.db.ExecQuery(
                    strSql_SaveOnDB
                    );
            }
            #endregion

            #region //// Clear For Debug:
            {
                ////
                string strSqlClearForDebug = CmUtils.StringUtils.Replace(@"
						---- Clear for Debug:
						drop table #input_Invoice_Invoice; 
					");

                _cf.db.ExecQuery(
                    strSqlClearForDebug
                    );
                ////
            }
            #endregion

        }

        public DataSet WAS_Invoice_Invoice_Cancel_New20190705(
           ref ArrayList alParamsCoupleError
           , RQ_Invoice_Invoice objRQ_Invoice_Invoice
           ////
           , out RT_Invoice_Invoice objRT_Invoice_Invoice
           )
        {
            #region // Temp:
            string strTid = objRQ_Invoice_Invoice.Tid;
            objRT_Invoice_Invoice = new RT_Invoice_Invoice();
            DataSet mdsResult = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            DateTime dtimeSys = DateTime.UtcNow;
            //DataSet mdsExec = null;
            //DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(objRQ_Invoice_Invoice.Tid);
            //int nTidSeq = 0;
            //bool bNeedTransaction = true;
            string strFunctionName = "WAS_Invoice_Invoice_Cancel";
            string strErrorCodeDefault = TError.ErridnInventory.WAS_Invoice_Invoice_Cancel;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
                });
            #endregion

            try
            {
                #region // Init:
                #endregion

                #region // Refine and Check Input:
                //List<Invoice_Invoice> lst_Invoice_Invoice = new List<Invoice_Invoice>();
                //DataSet dsData = new DataSet();
                //{
                //    ////
                //    DataTable dt_Transaction_KeKhaiThue = TUtils.DataTableCmUtils.ToDataTable<Transaction_KeKhaiThue>(objRQ_Mst_NNT.Lst_Transaction_KeKhaiThue, "Transaction_KeKhaiThue");
                //    dsData.Tables.Add(dt_Transaction_KeKhaiThue);
                //}
                #endregion

                #region // Invoice_Invoice_Cancel:
                mdsResult = Invoice_Invoice_Cancel(
                    objRQ_Invoice_Invoice.Tid // strTid
                    , objRQ_Invoice_Invoice.GwUserCode // strGwUserCode
                    , objRQ_Invoice_Invoice.GwPassword // strGwPassword
                    , objRQ_Invoice_Invoice.WAUserCode // strUserCode
                    , objRQ_Invoice_Invoice.WAUserPassword // strUserPassword
                    , ref alParamsCoupleError // alParamsCoupleError
                                              ////
                    , objRQ_Invoice_Invoice.Invoice_Invoice.InvoiceCode // objInvoiceCode
                    , objRQ_Invoice_Invoice.Invoice_Invoice.Remark // objRemark
                    );
                #endregion

                // Return Good:
                return mdsResult;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsResult
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Write ReturnLog:
                //_cf.ProcessBizReturn(
                //	ref mdsResult // mdsFinal
                //	, strTid // strTid
                //	, strFunctionName // strFunctionName
                //	);
                #endregion
            }
        }
        private void Invoice_Invoice_CancelX_New20190705(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            , DateTime dtimeSys
            //// 
            , object objInvoiceCode
            , object objRemark
           )
        {
            #region // Temp:
            //int nTidSeq = 0;
            //bool bMyDebugSql = false;
            string strFunctionName = "Invoice_Invoice_CancelX";
            //string strErrorCodeDefault = TError.ErrHTCNM.Invoice_Invoice_CancelX;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
				, "objInvoiceCode", objInvoiceCode
                , "objRemark", objRemark
                });
            //ArrayList alPCErrEx = new ArrayList();
            ////
            Hashtable htParamsSql = new Hashtable();
            #endregion

            #region // Convert Input:
            //alParamsCoupleError.AddRange(new object[]{
            //    "Check.dsData", TJson.JsonConvert.SerializeObject(dsData)
            //    });

            // drAbilityOfUser:
            DataRow drAbilityOfUser = Sys_User_GetAbilityViewOfUser(strWAUserCode);
            zzzzClauseSelect_Mst_NNT_ViewAbility_Get(
                drAbilityOfUser // drAbilityOfUser
                , ref alParamsCoupleError // alParamsCoupleError
                );
            #endregion

            #region // Refine and Check Input Invoice_Invoice:
            ////
            string strInvoiceCode = TUtils.CUtils.StdParam(objInvoiceCode);
            string strRemark = string.Format("{0}", objRemark).Trim();
            ////
            DataTable dtDB_Invoice_Invoice = null;
            {
                Invoice_Invoice_CheckDB(
                    ref alParamsCoupleError // alParamsCoupleError
                    , strInvoiceCode // objInvoiceCode
                    , TConst.Flag.Yes // strFlagExistToCheck
                    , "PENDING, APPROVED" // strInvoiceStatusListToCheck
                    , out dtDB_Invoice_Invoice // dtDB_Invoice_Invoice
                    );

                string strInvoiceStatus = dtDB_Invoice_Invoice.Rows[0]["InvoiceStatus"].ToString();
                string strInvoiceNo = dtDB_Invoice_Invoice.Rows[0]["InvoiceNo"].ToString();
                ////
                if (CmUtils.StringUtils.StringEqualIgnoreCase(strInvoiceStatus, TConst.InvoiceStatus.Pending))
                {
                    if (string.IsNullOrEmpty(strInvoiceNo))
                    {
                        alParamsCoupleError.AddRange(new object[]{
                            "Check.InvoiceCode", strInvoiceCode
                            , "Check.InvoiceNo", strInvoiceNo
                            , "Check.InvoiceStatus", strInvoiceNo
                            });
                        throw CmUtils.CMyException.Raise(
                            TError.ErridnInventory.Invoice_Invoice_Cancel_InvoiceNoIsNotNull
                            , null
                            , alParamsCoupleError.ToArray()
                            );
                    }
                }
                ////
                //           string strSqlCheck_Invoice_InvoiceDtl = CmUtils.StringUtils.Replace(@"
                //	select top 1
                //		t.*
                //	from Invoice_InvoiceDtl t --//[mylock]
                //	where (1=1)
                //		and t.InvoiceCode = '@strInvoiceCode'
                //	;
                //"
                //               , "@strInvoiceCode", strInvoiceCode
                //               );

                //           DataTable dtDB_Check_Invoice_InvoiceDtl = _cf.db.ExecQuery(strSqlCheck_Invoice_InvoiceDtl).Tables[0];
                //           ////
                //           if (dtDB_Check_Invoice_InvoiceDtl.Rows.Count < 1)
                //           {
                //               alParamsCoupleError.AddRange(new object[]{
                //                   "Check.strInvoiceCode", strInvoiceCode
                //                   });
                //               throw CmUtils.CMyException.Raise(
                //                   TError.ErridnInventory.Invoice_Invoice_Cancel_InvoiceDtlNotFound
                //                   , null
                //                   , alParamsCoupleError.ToArray()
                //                   );
                //           }
                //           ////
                string strMST = TUtils.CUtils.StdParam(dtDB_Invoice_Invoice.Rows[0]["MST"]);
                if (!CmUtils.StringUtils.StringEqualIgnoreCase(drAbilityOfUser["MST"], strMST)
                    && !CmUtils.StringUtils.StringEqualIgnoreCase(drAbilityOfUser["FlagBG"], TConst.Flag.Active))
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.DB.NNT.MST", drAbilityOfUser["MST"]
                        , "Check.strMST", strMST
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Invoice_Invoice_Cancel_InvalidMST
                        , null
                        , alParamsCoupleError.ToArray()
                        );

                }
            }
            #endregion

            #region // SaveTemp Invoice_Invoice:
            {
                ////
                TUtils.CUtils.MyBuildDBDT_Common(
                    _cf.db
                    , "#input_Invoice_Invoice"
                    , TConst.BizMix.Default_DBColType // strDefaultType
                    , new object[]{
                        "InvoiceCode"
                        , "Remark"
                        , "InvoiceStatus"
                        , "CancelDTimeUTC"
                        , "CancelBy"
                        , "LogLUDTimeUTC"
                        , "LogLUBy"
                        }
                    , new object[]{
                            new object[]{
                                strInvoiceCode, // InvoiceCode
								strRemark, // Remark
								TConst.InvoiceStatus.Canceled, // InvoiceStatus
                                dtimeSys.ToString("yyyy-MM-dd HH:mm:ss"), // CancelDTimeUTC
                                strWAUserCode, // CancelBy
                                dtimeSys.ToString("yyyy-MM-dd HH:mm:ss"), // LogLUDTimeUTC
                                strWAUserCode, // LogLUBy
								}
                        }
                    );

            }
            #endregion

            #region // SaveDB:
            {
                ////
                string zzB_Update_Invoice_Invoice_ClauseSet_zzE = @"
						t.LogLUDTimeUTC = f.LogLUDTimeUTC
						, t.LogLUBy = f.LogLUBy
						, t.CancelDTimeUTC = f.CancelDTimeUTC
						, t.CancelBy = f.CancelBy
						, t.InvoiceStatus = f.InvoiceStatus
						, t.Remark = f.Remark
						";
                ////
                string zzB_Update_Invoice_InvoiceDtl_ClauseSet_zzE = @"
						t.LogLUDTimeUTC = f.LogLUDTimeUTC
						, t.LogLUBy = f.LogLUBy
						, t.InvoiceDtlStatus = f.InvoiceStatus
						";
                ////
                //string zzB_Update_Invoice_InvoicePrd_ClauseSet_zzE = @"
						//t.LogLUDTimeUTC = f.LogLUDTimeUTC
						//, t.LogLUBy = f.LogLUBy
						//, t.InvoicePrdStatus = f.InvoiceStatus
						//";
                ////
                string zzB_Update_Invoice_Invoice_zzE = CmUtils.StringUtils.Replace(@"
						---- Invoice_Invoice:
						update t
						set 
							zzB_Update_Invoice_Invoice_ClauseSet_zzE
						from Invoice_Invoice t --//[mylock]
							inner join #input_Invoice_Invoice f --//[mylock]
								on t.InvoiceCode = f.InvoiceCode
						where (1=1)
						;
					"
                    , "zzB_Update_Invoice_Invoice_ClauseSet_zzE", zzB_Update_Invoice_Invoice_ClauseSet_zzE
                    );
                ////
                string zzB_Update_Invoice_InvoiceDtl_zzE = CmUtils.StringUtils.Replace(@"
                            ---- #tbl_Invoice_InvoiceDtl_Temp: 
                            select 
                                t.InvoiceCode
                                , t.Idx
                                , f.InvoiceStatus
                                , f.LogLUDTimeUTC
                                , f.LogLUBy
                            into #tbl_Invoice_InvoiceDtl_Temp
							from Invoice_InvoiceDtl t --//[mylock]
							    inner join #input_Invoice_Invoice f --//[mylock]
								    on t.InvoiceCode = f.InvoiceCode
							where (1=1)
							;

                            ---- Update:
							update t
							set 
								zzB_Update_Invoice_InvoiceDtl_ClauseSet_zzE
							from Invoice_InvoiceDtl t --//[mylock]
							    inner join #tbl_Invoice_InvoiceDtl_Temp f --//[mylock]
								    on t.InvoiceCode = f.InvoiceCode
								        and t.Idx = f.Idx
							where (1=1)
							;
						"
                        , "zzB_Update_Invoice_InvoiceDtl_ClauseSet_zzE", zzB_Update_Invoice_InvoiceDtl_ClauseSet_zzE
                        );
                ////
     //           string zzB_Update_Invoice_InvoicePrd_zzE = CmUtils.StringUtils.Replace(@"
     //                   ---- #tbl_Invoice_InvoicePrd_Temp: 
     //                   select 
     //                       t.InvoiceCode
     //                       , t.ProductID
     //                       , t.SpecCode
     //                       , f.InvoiceStatus
     //                       , f.LogLUDTimeUTC
     //                       , f.LogLUBy
     //                   into #tbl_Invoice_InvoicePrd_Temp
					//	from Invoice_InvoicePrd t --//[mylock]
					//		inner join #input_Invoice_Invoice f --//[mylock]
					//			on t.InvoiceCode = f.InvoiceCode
					//	where (1=1)
					//	;

     //                   ---- Update:
					//	update t
					//	set 
					//		zzB_Update_Invoice_InvoicePrd_ClauseSet_zzE
					//	from Invoice_InvoicePrd t --//[mylock]
					//		inner join #tbl_Invoice_InvoicePrd_Temp f --//[mylock]
					//			on t.InvoiceCode = f.InvoiceCode
					//			    and t.ProductID = f.ProductID
					//			    and t.SpecCode = f.SpecCode
					//	where (1=1)
					//	;
					//"
     //               , "zzB_Update_Invoice_InvoicePrd_ClauseSet_zzE", zzB_Update_Invoice_InvoicePrd_ClauseSet_zzE
     //               );
                ////
                string strSql_SaveOnDB = CmUtils.StringUtils.Replace(@"
						----
						zzB_Update_Invoice_Invoice_zzE
                        ----
						zzB_Update_Invoice_InvoiceDtl_zzE
                        ----
					"
                    , "zzB_Update_Invoice_Invoice_zzE", zzB_Update_Invoice_Invoice_zzE
                    , "zzB_Update_Invoice_InvoiceDtl_zzE", zzB_Update_Invoice_InvoiceDtl_zzE
                    //, "zzB_Update_Invoice_InvoicePrd_zzE", zzB_Update_Invoice_InvoicePrd_zzE
                    );

                DataSet dsDB_Check = _cf.db.ExecQuery(
                    strSql_SaveOnDB
                    );
            }
            #endregion

            #region //// Clear For Debug:
            {
                ////
                string strSqlClearForDebug = CmUtils.StringUtils.Replace(@"
						---- Clear for Debug:
						drop table #input_Invoice_Invoice; 
						drop table #tbl_Invoice_InvoiceDtl_Temp;
					");

                _cf.db.ExecQuery(
                    strSqlClearForDebug
                    );
                ////
            }
            #endregion

        }

        public DataSet WAS_Invoice_Invoice_Approved_New20190705(
           ref ArrayList alParamsCoupleError
           , RQ_Invoice_Invoice objRQ_Invoice_Invoice
           ////
           , out RT_Invoice_Invoice objRT_Invoice_Invoice
           )
        {
            #region // Temp:
            string strTid = objRQ_Invoice_Invoice.Tid;
            objRT_Invoice_Invoice = new RT_Invoice_Invoice();
            DataSet mdsResult = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            DateTime dtimeSys = DateTime.UtcNow;
            //DataSet mdsExec = null;
            //DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(objRQ_Invoice_Invoice.Tid);
            //int nTidSeq = 0;
            //bool bNeedTransaction = true;
            string strFunctionName = "WAS_Invoice_Invoice_Approved";
            string strErrorCodeDefault = TError.ErridnInventory.WAS_Invoice_Invoice_Approved;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
                });
            #endregion

            try
            {
                #region // Init:
                #endregion

                #region // Refine and Check Input:
                //List<Invoice_Invoice> lst_Invoice_Invoice = new List<Invoice_Invoice>();
                //DataSet dsData = new DataSet();
                //{
                //    ////
                //    DataTable dt_Transaction_KeKhaiThue = TUtils.DataTableCmUtils.ToDataTable<Transaction_KeKhaiThue>(objRQ_Mst_NNT.Lst_Transaction_KeKhaiThue, "Transaction_KeKhaiThue");
                //    dsData.Tables.Add(dt_Transaction_KeKhaiThue);
                //}
                #endregion

                #region // Invoice_Invoice_Approved:
                mdsResult = Invoice_Invoice_Approved(
                    objRQ_Invoice_Invoice.Tid // strTid
                    , objRQ_Invoice_Invoice.GwUserCode // strGwUserCode
                    , objRQ_Invoice_Invoice.GwPassword // strGwPassword
                    , objRQ_Invoice_Invoice.WAUserCode // strUserCode
                    , objRQ_Invoice_Invoice.WAUserPassword // strUserPassword
                    , ref alParamsCoupleError // alParamsCoupleError
                                              ////
                    , objRQ_Invoice_Invoice.Invoice_Invoice.InvoiceCode // objInvoiceCode
                                                                        //, objRQ_Invoice_Invoice.Invoice_Invoice.InvoiceFileSpec // objInvoiceFileSpec
                    , objRQ_Invoice_Invoice.Invoice_Invoice.InvoiceFilePath // objInvoiceFilePath
                    , objRQ_Invoice_Invoice.Invoice_Invoice.InvoicePDFFilePath // objInvoicePDFFilePath
                    , objRQ_Invoice_Invoice.Invoice_Invoice.Remark // objRemark
                    );
                #endregion

                // Return Good:
                return mdsResult;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsResult
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Write ReturnLog:
                //_cf.ProcessBizReturn(
                //	ref mdsResult // mdsFinal
                //	, strTid // strTid
                //	, strFunctionName // strFunctionName
                //	);
                #endregion
            }
        }

        public DataSet WAS_Invoice_Invoice_ApprovedMulti(
           ref ArrayList alParamsCoupleError
           , RQ_Invoice_Invoice objRQ_Invoice_Invoice
           ////
           , out RT_Invoice_Invoice objRT_Invoice_Invoice
           )
        {
            #region // Temp:
            string strTid = objRQ_Invoice_Invoice.Tid;
            objRT_Invoice_Invoice = new RT_Invoice_Invoice();
            DataSet mdsResult = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            DateTime dtimeSys = DateTime.UtcNow;
            //DataSet mdsExec = null;
            //DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(objRQ_Invoice_Invoice.Tid);
            //int nTidSeq = 0;
            //bool bNeedTransaction = true;
            string strFunctionName = "WAS_Invoice_Invoice_ApprovedMulti";
            string strErrorCodeDefault = TError.ErridnInventory.WAS_Invoice_Invoice_Approved;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
                });
            #endregion

            try
            {
                #region // Init:
                #endregion

                #region // Refine and Check Input:
                List<Invoice_Invoice> lst_Invoice_Invoice = new List<Invoice_Invoice>();
                DataSet dsData = new DataSet();
                {
                    ////
                    DataTable dt_Invoice_Invoice = TUtils.DataTableCmUtils.ToDataTable<Invoice_Invoice>(objRQ_Invoice_Invoice.Lst_Invoice_Invoice, "Invoice_Invoice");
                    dsData.Tables.Add(dt_Invoice_Invoice);
                }
                #endregion

                #region // Invoice_Invoice_Approved:
                mdsResult = Invoice_Invoice_ApprovedMulti(
                    objRQ_Invoice_Invoice.Tid // strTid
                    , objRQ_Invoice_Invoice.GwUserCode // strGwUserCode
                    , objRQ_Invoice_Invoice.GwPassword // strGwPassword
                    , objRQ_Invoice_Invoice.WAUserCode // strUserCode
                    , objRQ_Invoice_Invoice.WAUserPassword // strUserPassword
                    , ref alParamsCoupleError // alParamsCoupleError
                                              ////
                    , dsData // dsData
                    );
                #endregion

                // Return Good:
                return mdsResult;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsResult
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Write ReturnLog:
                //_cf.ProcessBizReturn(
                //	ref mdsResult // mdsFinal
                //	, strTid // strTid
                //	, strFunctionName // strFunctionName
                //	);
                #endregion
            }
        }

        public DataSet Invoice_Invoice_ApprovedMulti(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            ////
            , DataSet dsData
            )
        {
            #region // Temp:
            DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            //int nTidSeq = 0;
            DateTime dtimeSys = DateTime.UtcNow;
            string strFunctionName = "Invoice_Invoice_Approved";
            string strErrorCodeDefault = TError.ErridnInventory.Invoice_Invoice_Approved;
            alParamsCoupleError.AddRange(new object[]{
                    "strFunctionName", strFunctionName
                    , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
			        ////
					, dsData // dsData
                    });
            #endregion

            try
            {
                #region // Init:
                //_cf.db.LogUserId = _cf.sinf.strUserCode;
                _cf.db.BeginTransaction();

                // Write RequestLog:
                _cf.ProcessBizReq_OutSide(
                    strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    , alParamsCoupleError // alParamsCoupleError
                    );

                // Sys_User_CheckAuthentication:
                //Sys_User_CheckAuthentication(
                //    ref alParamsCoupleError
                //    , strWAUserCode
                //    , strWAUserPassword
                //    );

                // Check Access/Deny:
                Sys_Access_CheckDenyV30(
                    ref alParamsCoupleError
                    , strWAUserCode
                    , strFunctionName
                    );
                #endregion

                #region // Invoice_Invoice_ApprovedMultiX:
                //DataSet dsGetData = null;
                {
                    Invoice_Invoice_ApprovedMultiX(
                        strTid // strTid
                        , strGwUserCode // strGwUserCode
                        , strGwPassword // strGwPassword
                        , strWAUserCode // strWAUserCode
                        , strWAUserPassword // strWAUserPassword
                        , ref alParamsCoupleError // alParamsCoupleError
                        , dtimeSys // dtimeSys
                                   ////
                        , dsData // dsData
                        );
                }
                ////
                //CmUtils.DataUtils.MoveDataTable(ref mdsFinal, ref dsGetData);
                #endregion

                // Return Good:
                TDALUtils.DBUtils.CommitSafety(_cf.db);
                mdsFinal.AcceptChanges();
                return mdsFinal;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Rollback:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);

                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsFinal
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Rollback and Release resources:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);
                TDALUtils.DBUtils.ReleaseAllSemaphore(_cf.db_Sys, true);

                // Write ReturnLog:
                _cf.ProcessBizReturn_OutSide(
                    ref mdsFinal // mdsFinal
                    , strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    );
                #endregion
            }
        }
        private void Invoice_Invoice_ApprovedX_New20190705(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            , DateTime dtimeSys
            //// 
            , object objInvoiceCode
            //, object objInvoiceFileSpec
            , object objInvoiceFilePath
            , object objInvoicePDFFilePath
            , object objRemark
           )
        {
            #region // Temp:
            //int nTidSeq = 0;
            //bool bMyDebugSql = false;
            string strFunctionName = "Invoice_Invoice_ApprovedX";
            //string strErrorCodeDefault = TError.ErrHTCNM.Invoice_Invoice_ApprovedX;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
				, "objInvoiceCode", objInvoiceCode
                , "objRemark", objRemark
                });
            //ArrayList alPCErrEx = new ArrayList();
            ////
            Hashtable htParamsSql = new Hashtable();
            #endregion

            #region // Convert Input: 
            // drAbilityOfUser:
            DataRow drAbilityOfUser = Sys_User_GetAbilityViewOfUser(strWAUserCode);
            zzzzClauseSelect_Mst_NNT_ViewAbility_Get(
                drAbilityOfUser // drAbilityOfUser
                , ref alParamsCoupleError // alParamsCoupleError
                );
            #endregion

            #region // Refine and Check Input Invoice_Invoice:
            ////
            string strInvoiceCode = TUtils.CUtils.StdParam(objInvoiceCode);
            string strInvoiceFilePath = string.Format("{0}", objInvoiceFilePath).Trim();
            string strInvoicePDFFilePath = string.Format("{0}", objInvoicePDFFilePath).Trim();
            string strRemark = string.Format("{0}", objRemark).Trim();
            ////
            DataTable dtDB_Invoice_Invoice = null;
            {
                Invoice_Invoice_CheckDB(
                    ref alParamsCoupleError // alParamsCoupleError
                    , strInvoiceCode // objInvoiceCode
                    , TConst.Flag.Yes // strFlagExistToCheck
                    , TConst.InvoiceStatus.Pending // strInvoiceStatusListToCheck
                    , out dtDB_Invoice_Invoice // dtDB_Invoice_Invoice
                    );

                //string strInvoiceStatus = dtDB_Invoice_Invoice.Rows[0]["InvoiceStatus"].ToString();
                string strInvoiceNo = dtDB_Invoice_Invoice.Rows[0]["InvoiceNo"].ToString();
                ////
                if (string.IsNullOrEmpty(strInvoiceNo))
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.InvoiceCode", strInvoiceCode
                        , "Check.InvoiceNo", strInvoiceNo
                        //, "Check.InvoiceStatus", strInvoiceStatus
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Invoice_Invoice_Approved_InvoiceNoIsNotNull
                        , null
                        , alParamsCoupleError.ToArray()
                        );
                }
                /////
                string strMST = TUtils.CUtils.StdParam(dtDB_Invoice_Invoice.Rows[0]["MST"]);
                if (!CmUtils.StringUtils.StringEqualIgnoreCase(drAbilityOfUser["MST"], strMST)
                    && !CmUtils.StringUtils.StringEqualIgnoreCase(drAbilityOfUser["FlagBG"], TConst.Flag.Active))
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.DB.NNT.MST", drAbilityOfUser["MST"]
                        , "Check.strMST", strMST
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Invoice_Invoice_Approved_InvalidMST
                        , null
                        , alParamsCoupleError.ToArray()
                        );

                }
            }
            #endregion

            #region // SaveTemp Invoice_Invoice:
            {
                ////
                TUtils.CUtils.MyBuildDBDT_Common(
                    _cf.db
                    , "#input_Invoice_Invoice"
                    , TConst.BizMix.Default_DBColType // strDefaultType
                    , new object[]{
                        "InvoiceCode"
                        , "InvoiceFileSpec"
                        , "InvoiceFilePath"
                        , "InvoicePDFFilePath"
                        , "Remark"
                        , "InvoiceStatus"
                        , "ApprDTimeUTC"
                        , "ApprBy"
                        , "LogLUDTimeUTC"
                        , "LogLUBy"
                        }
                    , new object[]{
                            new object[]{
                                strInvoiceCode, // InvoiceCode
                                null, //objInvoiceFileSpec, // InvoiceFileSpec
                                strInvoiceFilePath, // InvoiceFilePath
                                strInvoicePDFFilePath, // InvoicePDFFilePath
								strRemark, // Remark
								TConst.InvoiceStatus.Approved, // InvoiceStatus
                                dtimeSys.ToString("yyyy-MM-dd HH:mm:ss"), // ApprDTimeUTC
                                strWAUserCode, // ApprBy
                                dtimeSys.ToString("yyyy-MM-dd HH:mm:ss"), // LogLUDTimeUTC
                                strWAUserCode, // LogLUBy
								}
                        }
                    );

            }
            #endregion

            #region // SaveDB:
            {
                ////
                string zzB_Update_Invoice_Invoice_ClauseSet_zzE = @"
						t.LogLUDTimeUTC = f.LogLUDTimeUTC
						, t.LogLUBy = f.LogLUBy
						, t.ApprDTimeUTC = f.ApprDTimeUTC
						, t.ApprBy = f.ApprBy
						, t.InvoiceStatus = f.InvoiceStatus
						, t.InvoiceFileSpec = f.InvoiceFileSpec
						, t.InvoiceFilePath = f.InvoiceFilePath
						, t.InvoicePDFFilePath = f.InvoicePDFFilePath
						, t.Remark = f.Remark
						";
                ////
                string zzB_Update_Invoice_InvoiceDtl_ClauseSet_zzE = @"
						t.LogLUDTimeUTC = f.LogLUDTimeUTC
						, t.LogLUBy = f.LogLUBy
						, t.InvoiceDtlStatus = f.InvoiceStatus
						";
                ////
      //          string zzB_Update_Invoice_InvoicePrd_ClauseSet_zzE = @"
						//t.LogLUDTimeUTC = f.LogLUDTimeUTC
						//, t.LogLUBy = f.LogLUBy
						//, t.InvoicePrdStatus = f.InvoiceStatus
						//";
                ////
                string zzB_Update_Invoice_Invoice_zzE = CmUtils.StringUtils.Replace(@"
						---- Invoice_Invoice:
						update t
						set 
							zzB_Update_Invoice_Invoice_ClauseSet_zzE
						from Invoice_Invoice t --//[mylock]
							inner join #input_Invoice_Invoice f --//[mylock]
								on t.InvoiceCode = f.InvoiceCode
						where (1=1)
						;
					"
                    , "zzB_Update_Invoice_Invoice_ClauseSet_zzE", zzB_Update_Invoice_Invoice_ClauseSet_zzE
                    );
                ////
                string zzB_Update_Invoice_InvoiceDtl_zzE = CmUtils.StringUtils.Replace(@"
                    ---- #tbl_Invoice_InvoiceDtl_Temp: 
                    select 
                        t.InvoiceCode
                        , t.Idx
                        , f.InvoiceStatus
                        , f.LogLUDTimeUTC
                        , f.LogLUBy
                    into #tbl_Invoice_InvoiceDtl_Temp
					from Invoice_InvoiceDtl t --//[mylock]
						inner join #input_Invoice_Invoice f --//[mylock]
							on t.InvoiceCode = f.InvoiceCode
					where (1=1)
					;

                    ---- Update:
					update t
					set 
						zzB_Update_Invoice_InvoiceDtl_ClauseSet_zzE
					from Invoice_InvoiceDtl t --//[mylock]
						inner join #tbl_Invoice_InvoiceDtl_Temp f --//[mylock]
							on t.InvoiceCode = f.InvoiceCode
								and t.Idx = f.Idx
					where (1=1)
					;
				"
                , "zzB_Update_Invoice_InvoiceDtl_ClauseSet_zzE", zzB_Update_Invoice_InvoiceDtl_ClauseSet_zzE
                );
     //           ////
     //           string zzB_Update_Invoice_InvoicePrd_zzE = CmUtils.StringUtils.Replace(@"
     //                   ---- #tbl_Invoice_InvoicePrd_Temp: 
     //                   select 
     //                       t.InvoiceCode
     //                       , t.ProductID
     //                       , t.SpecCode
     //                       , f.InvoiceStatus
     //                       , f.LogLUDTimeUTC
     //                       , f.LogLUBy
     //                   into #tbl_Invoice_InvoicePrd_Temp
					//	from Invoice_InvoicePrd t --//[mylock]
					//		inner join #input_Invoice_Invoice f --//[mylock]
					//			on t.InvoiceCode = f.InvoiceCode
					//	where (1=1)
					//	;

     //                   ---- Update:
					//	update t
					//	set 
					//		zzB_Update_Invoice_InvoicePrd_ClauseSet_zzE
					//	from Invoice_InvoicePrd t --//[mylock]
					//		inner join #tbl_Invoice_InvoicePrd_Temp f --//[mylock]
					//			on t.InvoiceCode = f.InvoiceCode
					//			    and t.ProductID = f.ProductID
					//			    and t.SpecCode = f.SpecCode
					//	where (1=1)
					//	;
					//"
     //               , "zzB_Update_Invoice_InvoicePrd_ClauseSet_zzE", zzB_Update_Invoice_InvoicePrd_ClauseSet_zzE
     //               );
                ////
                string strSql_SaveOnDB = CmUtils.StringUtils.Replace(@"
						----
						zzB_Update_Invoice_Invoice_zzE
                        ----
						zzB_Update_Invoice_InvoiceDtl_zzE
                        ----
					"
                    , "zzB_Update_Invoice_Invoice_zzE", zzB_Update_Invoice_Invoice_zzE
                    , "zzB_Update_Invoice_InvoiceDtl_zzE", zzB_Update_Invoice_InvoiceDtl_zzE
                    //, "zzB_Update_Invoice_InvoicePrd_zzE", zzB_Update_Invoice_InvoicePrd_zzE
                   );

                DataSet dsDB_Check = _cf.db.ExecQuery(
                    strSql_SaveOnDB
                    );
            }
            #endregion

            #region //// Clear For Debug:
            {
                ////
                string strSqlClearForDebug = CmUtils.StringUtils.Replace(@"
						---- Clear for Debug:
						drop table #input_Invoice_Invoice; 
						drop table #tbl_Invoice_InvoiceDtl_Temp;
						drop table #tbl_Mst_NNT_ViewAbility;
					");

                _cf.db.ExecQuery(
                    strSqlClearForDebug
                    );
                ////
            }
            #endregion

        }

        public DataSet WAS_Invoice_Invoice_Issued_New20190705(
           ref ArrayList alParamsCoupleError
           , RQ_Invoice_Invoice objRQ_Invoice_Invoice
           ////
           , out RT_Invoice_Invoice objRT_Invoice_Invoice
           )
        {
            #region // Temp:
            string strTid = objRQ_Invoice_Invoice.Tid;
            objRT_Invoice_Invoice = new RT_Invoice_Invoice();
            DataSet mdsResult = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            DateTime dtimeSys = DateTime.UtcNow;
            //DataSet mdsExec = null;
            //DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(objRQ_Invoice_Invoice.Tid);
            //int nTidSeq = 0;
            //bool bNeedTransaction = true;
            string strFunctionName = "WAS_Invoice_Invoice_Issued";
            string strErrorCodeDefault = TError.ErridnInventory.WAS_Invoice_Invoice_Issued;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
				, "Lst_Email_BatchSendEmailTo", TJson.JsonConvert.SerializeObject(objRQ_Invoice_Invoice.Lst_Email_BatchSendEmailTo)
                , "Lst_Email_BatchSendEmailCC", TJson.JsonConvert.SerializeObject(objRQ_Invoice_Invoice.Lst_Email_BatchSendEmailCC)
                , "Lst_Email_BatchSendEmailBCC", TJson.JsonConvert.SerializeObject(objRQ_Invoice_Invoice.Lst_Email_BatchSendEmailBCC)
                , "Lst_Email_BatchSendEmailFileAttach", TJson.JsonConvert.SerializeObject(objRQ_Invoice_Invoice.Lst_Email_BatchSendEmailFileAttach)
                });
            #endregion

            try
            {
                #region // Init:
                #endregion

                #region // Refine and Check Input:
                //List<Invoice_Invoice> lst_Invoice_Invoice = new List<Invoice_Invoice>();
                DataSet dsData = new DataSet();
                {
                    ////
                    if (objRQ_Invoice_Invoice.Lst_Email_BatchSendEmailTo == null)
                        objRQ_Invoice_Invoice.Lst_Email_BatchSendEmailTo = new List<Email_BatchSendEmailTo>();
                    {
                        DataTable dt_Email_BatchSendEmailTo = TUtils.DataTableCmUtils.ToDataTable<Email_BatchSendEmailTo>(objRQ_Invoice_Invoice.Lst_Email_BatchSendEmailTo, "Email_BatchSendEmailTo");
                        dsData.Tables.Add(dt_Email_BatchSendEmailTo);
                    }
                    ////
                    if (objRQ_Invoice_Invoice.Lst_Email_BatchSendEmailCC == null)
                        objRQ_Invoice_Invoice.Lst_Email_BatchSendEmailCC = new List<Email_BatchSendEmailCC>();
                    {
                        DataTable dt_Email_BatchSendEmailCC = TUtils.DataTableCmUtils.ToDataTable<Email_BatchSendEmailCC>(objRQ_Invoice_Invoice.Lst_Email_BatchSendEmailCC, "Email_BatchSendEmailCC");
                        dsData.Tables.Add(dt_Email_BatchSendEmailCC);

                    }
                    ////
                    if (objRQ_Invoice_Invoice.Lst_Email_BatchSendEmailBCC == null)
                        objRQ_Invoice_Invoice.Lst_Email_BatchSendEmailBCC = new List<Email_BatchSendEmailBCC>();
                    {
                        DataTable dt_Email_BatchSendEmailBCC = TUtils.DataTableCmUtils.ToDataTable<Email_BatchSendEmailBCC>(objRQ_Invoice_Invoice.Lst_Email_BatchSendEmailBCC, "Email_BatchSendEmailBCC");
                        dsData.Tables.Add(dt_Email_BatchSendEmailBCC);

                    }
                    ////
                    if (objRQ_Invoice_Invoice.Lst_Email_BatchSendEmailFileAttach == null)
                        objRQ_Invoice_Invoice.Lst_Email_BatchSendEmailFileAttach = new List<Email_BatchSendEmailFileAttach>();
                    {
                        DataTable dt_Email_BatchSendEmailFileAttach = TUtils.DataTableCmUtils.ToDataTable<Email_BatchSendEmailFileAttach>(objRQ_Invoice_Invoice.Lst_Email_BatchSendEmailFileAttach, "Email_BatchSendEmailFileAttach");
                        dsData.Tables.Add(dt_Email_BatchSendEmailFileAttach);

                    }
                    ////
                    if (objRQ_Invoice_Invoice.Email_BatchSendEmail == null)
                        objRQ_Invoice_Invoice.Email_BatchSendEmail = new Email_BatchSendEmail();
                }
                #endregion

                #region // Invoice_Invoice_Issued:
                mdsResult = Invoice_Invoice_Issued(
                    objRQ_Invoice_Invoice.Tid // strTid
                    , objRQ_Invoice_Invoice.GwUserCode // strGwUserCode
                    , objRQ_Invoice_Invoice.GwPassword // strGwPassword
                    , objRQ_Invoice_Invoice.WAUserCode // strUserCode
                    , objRQ_Invoice_Invoice.WAUserPassword // strUserPassword
                    , ref alParamsCoupleError // alParamsCoupleError
                                              ////
                    , objRQ_Invoice_Invoice.Invoice_Invoice.InvoiceCode // objInvoiceCode
                    , objRQ_Invoice_Invoice.Invoice_Invoice.EmailSend // objEmailSend
                    , objRQ_Invoice_Invoice.Invoice_Invoice.Remark // objRemark
                                                                   ////
                    , objRQ_Invoice_Invoice.Email_BatchSendEmail.Subject // objSubject						 
                    , objRQ_Invoice_Invoice.Email_BatchSendEmail.BodyText // objBodyText
                    , objRQ_Invoice_Invoice.Email_BatchSendEmail.BodyHTML // objBodyHTML
                    , dsData // dsData
                    );
                #endregion

                // Return Good:
                return mdsResult;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsResult
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Write ReturnLog:
                //_cf.ProcessBizReturn(
                //	ref mdsResult // mdsFinal
                //	, strTid // strTid
                //	, strFunctionName // strFunctionName
                //	);
                #endregion
            }
        }

        private void Invoice_Invoice_IssuedX_New20190705(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            , DateTime dtimeSys
            //// 
            , object objInvoiceCode
            , object objEmailSend
            , object objRemark
           )
        {
            #region // Temp:
            //int nTidSeq = 0;
            //bool bMyDebugSql = false;
            string strFunctionName = "Invoice_Invoice_IssuedX";
            //string strErrorCodeDefault = TError.ErrHTCNM.Invoice_Invoice_IssuedX;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
                });
            //ArrayList alPCErrEx = new ArrayList();
            ////
            Hashtable htParamsSql = new Hashtable();
            #endregion

            #region // Convert Input:
            // drAbilityOfUser:
            DataRow drAbilityOfUser = Sys_User_GetAbilityViewOfUser(strWAUserCode);
            zzzzClauseSelect_Mst_NNT_ViewAbility_Get(
                drAbilityOfUser // drAbilityOfUser
                , ref alParamsCoupleError // alParamsCoupleError
                );

            #endregion

            #region // Refine and Check Input Invoice_Invoice:
            ////
            string strInvoiceCode = TUtils.CUtils.StdParam(objInvoiceCode);
            string strEmailSend = string.Format("{0}", objEmailSend).Trim();
            string strRemark = string.Format("{0}", objRemark).Trim();
            ////
            DataTable dtDB_Invoice_Invoice = null;
            {
                Invoice_Invoice_CheckDB(
                    ref alParamsCoupleError // alParamsCoupleError
                    , strInvoiceCode // objInvoiceCode
                    , TConst.Flag.Yes // strFlagExistToCheck
                    , TConst.InvoiceStatus.Approved // strInvoiceStatusListToCheck
                    , out dtDB_Invoice_Invoice // dtDB_Invoice_Invoice
                    );
                ////
                string strMST = TUtils.CUtils.StdParam(dtDB_Invoice_Invoice.Rows[0]["MST"]);
                if (!CmUtils.StringUtils.StringEqualIgnoreCase(drAbilityOfUser["MST"], strMST)
                    && !CmUtils.StringUtils.StringEqualIgnoreCase(drAbilityOfUser["FlagBG"], TConst.Flag.Active))
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.DB.NNT.MST", drAbilityOfUser["MST"]
                        , "Check.strMST", strMST
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Invoice_Invoice_Issued_InvalidMST
                        , null
                        , alParamsCoupleError.ToArray()
                        );

                }
                ////
                //           string strSqlCheck_Invoice_InvoiceDtl = CmUtils.StringUtils.Replace(@"
                //	select top 1
                //		t.*
                //	from Invoice_InvoiceDtl t --//[mylock]
                //	where (1=1)
                //		and t.InvoiceCode = '@strInvoiceCode'
                //	;
                //"
                //               , "@strInvoiceCode", strInvoiceCode
                //               );

                //           DataTable dtDB_Check_Invoice_InvoiceDtl = _cf.db.ExecQuery(strSqlCheck_Invoice_InvoiceDtl).Tables[0];
                //           ////
                //           if (dtDB_Check_Invoice_InvoiceDtl.Rows.Count < 1)
                //           {
                //               alParamsCoupleError.AddRange(new object[]{
                //                   "Check.strInvoiceCode", strInvoiceCode
                //                   });
                //               throw CmUtils.CMyException.Raise(
                //                   TError.ErridnInventory.Invoice_Invoice_Issued_InvoiceDtlNotFound
                //                   , null
                //                   , alParamsCoupleError.ToArray()
                //                   );
                //           }
            }
            #endregion

            #region // SaveTemp Invoice_Invoice:
            {
                ////
                TUtils.CUtils.MyBuildDBDT_Common(
                    _cf.db
                    , "#input_Invoice_Invoice"
                    , TConst.BizMix.Default_DBColType // strDefaultType
                    , new object[]{
                        "InvoiceCode"
                        , "EmailSend"
                        , "Remark"
                        , "InvoiceStatus"
                        , "SendEmailDTimeUTC"
                        , "SendEmailBy"
                        , "IssuedDTimeUTC"
                        , "IssuedBy"
                        , "LogLUDTimeUTC"
                        , "LogLUBy"
                        }
                    , new object[]{
                            new object[]{
                                strInvoiceCode, // InvoiceCode
								strEmailSend, // EmailSend
								strRemark, // Remark
								TConst.InvoiceStatus.Issued, // InvoiceStatus
                                dtimeSys.ToString("yyyy-MM-dd HH:mm:ss"), // SendEmailDTimeUTC
                                strWAUserCode, // SendEmailBy
                                dtimeSys.ToString("yyyy-MM-dd HH:mm:ss"), // IssuedDTimeUTC
                                strWAUserCode, // IssuedBy
                                dtimeSys.ToString("yyyy-MM-dd HH:mm:ss"), // LogLUDTimeUTC
                                strWAUserCode, // LogLUBy
								}
                        }
                    );

            }
            #endregion

            #region // SaveDB:
            {
                ////
                string zzB_Update_Invoice_Invoice_ClauseSet_zzE = @"
						t.LogLUDTimeUTC = f.LogLUDTimeUTC
						, t.LogLUBy = f.LogLUBy
						, t.IssuedDTimeUTC = f.IssuedDTimeUTC
						, t.IssuedBy = f.IssuedBy
						, t.SendEmailDTimeUTC = f.SendEmailDTimeUTC
						, t.SendEmailBy = f.SendEmailBy
						, t.InvoiceStatus = f.InvoiceStatus
						, t.EmailSend = f.EmailSend
						, t.Remark = f.Remark
						";
                ////
                string zzB_Update_Invoice_InvoiceDtl_ClauseSet_zzE = @"
						t.LogLUDTimeUTC = f.LogLUDTimeUTC
						, t.LogLUBy = f.LogLUBy
						, t.InvoiceDtlStatus = f.InvoiceStatus
						";
                ////
      //          string zzB_Update_Invoice_InvoicePrd_ClauseSet_zzE = @"
						//t.LogLUDTimeUTC = f.LogLUDTimeUTC
						//, t.LogLUBy = f.LogLUBy
						//, t.InvoicePrdStatus = f.InvoiceStatus
						//";
                ////
                string zzB_Update_Invoice_Invoice_zzE = CmUtils.StringUtils.Replace(@"
						---- Invoice_Invoice:
						update t
						set 
							zzB_Update_Invoice_Invoice_ClauseSet_zzE
						from Invoice_Invoice t --//[mylock]
							inner join #input_Invoice_Invoice f --//[mylock]
								on t.InvoiceCode = f.InvoiceCode
						where (1=1)
						;
					"
                    , "zzB_Update_Invoice_Invoice_ClauseSet_zzE", zzB_Update_Invoice_Invoice_ClauseSet_zzE
                    );
                ////
                string zzB_Update_Invoice_InvoiceDtl_zzE = CmUtils.StringUtils.Replace(@"
                            ---- #tbl_Invoice_InvoiceDtl_Temp: 
                            select 
                                t.InvoiceCode
                                , t.Idx
                                , t.SpecCode
                                , f.InvoiceStatus
                                , f.LogLUDTimeUTC
                                , f.LogLUBy
                            into #tbl_Invoice_InvoiceDtl_Temp
							from Invoice_InvoiceDtl t --//[mylock]
							    inner join #input_Invoice_Invoice f --//[mylock]
								    on t.InvoiceCode = f.InvoiceCode
							where (1=1)
							;

                            ---- Update:
							update t
							set 
								zzB_Update_Invoice_InvoiceDtl_ClauseSet_zzE
							from Invoice_InvoiceDtl t --//[mylock]
							    inner join #tbl_Invoice_InvoiceDtl_Temp f --//[mylock]
								    on t.InvoiceCode = f.InvoiceCode
								        and t.Idx = f.Idx
							where (1=1)
							;
						"
                        , "zzB_Update_Invoice_InvoiceDtl_ClauseSet_zzE", zzB_Update_Invoice_InvoiceDtl_ClauseSet_zzE
                        );
                ////				
     //           string zzB_Update_Invoice_InvoicePrd_zzE = CmUtils.StringUtils.Replace(@"
     //                   ---- #tbl_Invoice_InvoicePrd_Temp: 
     //                   select 
     //                       t.InvoiceCode
     //                       , t.ProductID
     //                       , t.SpecCode
     //                       , f.InvoiceStatus
     //                       , f.LogLUDTimeUTC
     //                       , f.LogLUBy
     //                   into #tbl_Invoice_InvoicePrd_Temp
					//	from Invoice_InvoicePrd t --//[mylock]
					//		inner join #input_Invoice_Invoice f --//[mylock]
					//			on t.InvoiceCode = f.InvoiceCode
					//	where (1=1)
					//	;

     //                   ---- Update:
					//	update t
					//	set 
					//		zzB_Update_Invoice_InvoicePrd_ClauseSet_zzE
					//	from Invoice_InvoicePrd t --//[mylock]
					//		inner join #tbl_Invoice_InvoicePrd_Temp f --//[mylock]
					//			on t.InvoiceCode = f.InvoiceCode
					//			    and t.ProductID = f.ProductID
					//			    and t.SpecCode = f.SpecCode
					//	where (1=1)
					//	;
					//"
     //               , "zzB_Update_Invoice_InvoicePrd_ClauseSet_zzE", zzB_Update_Invoice_InvoicePrd_ClauseSet_zzE
     //               );
                ////
                string strSql_SaveOnDB = CmUtils.StringUtils.Replace(@"
						----
						zzB_Update_Invoice_Invoice_zzE
                        ----
						zzB_Update_Invoice_InvoiceDtl_zzE
                        ----
					"
                    , "zzB_Update_Invoice_Invoice_zzE", zzB_Update_Invoice_Invoice_zzE
                    , "zzB_Update_Invoice_InvoiceDtl_zzE", zzB_Update_Invoice_InvoiceDtl_zzE
                    );

                DataSet dsDB_Check = _cf.db.ExecQuery(
                    strSql_SaveOnDB
                    );
            }
            #endregion

            #region // Call WS All Network phục vụ hóa đơn đầu vào:
            string strCustomerMST = TUtils.CUtils.StdParam(dtDB_Invoice_Invoice.Rows[0]["CustomerMST"]);
            {
                #region // Get Data:
                DataSet dataSet_GetInvoice = new DataSet();
                {
                    string strSql_SaveOnDB = CmUtils.StringUtils.Replace(@"
                            ---- Invoice_Invoice: 
                            select 
                                t.*
							from Invoice_Invoice t --//[mylock]
							    inner join #input_Invoice_Invoice f --//[mylock]
								    on t.InvoiceCode = f.InvoiceCode
							where (1=1)
							;

                            ---- Invoice_InvoiceDtl: 
                            select 
                                t.*
							from Invoice_InvoiceDtl t --//[mylock]
							    inner join #input_Invoice_Invoice f --//[mylock]
								    on t.InvoiceCode = f.InvoiceCode
							where (1=1)
							;
					    "
                        );

                    DataSet dsDB_Check = _cf.db.ExecQuery(
                        strSql_SaveOnDB
                        );
                    ////
                    DataTable dtData_Invoice_Invoice = new DataTable("Invoice_InvoiceInput");
                    dtData_Invoice_Invoice = dsDB_Check.Tables[0].Copy();
                    dataSet_GetInvoice.Tables.Add(dtData_Invoice_Invoice);
                    ////
                    DataTable dtData_Invoice_InvoiceDtl = new DataTable("Invoice_InvoiceInputDtl");
                    dtData_Invoice_InvoiceDtl = dsDB_Check.Tables[1].Copy();
                    dataSet_GetInvoice.Tables.Add(dtData_Invoice_InvoiceDtl);
                    ////
                    dataSet_GetInvoice.Tables[0].TableName = "Invoice_InvoiceInput";
                    dataSet_GetInvoice.Tables[1].TableName = "Invoice_InvoiceInputDtl";

                }
                #endregion

                #region // OS_TVAN_Invoice_InvoiceInput_CallIssuesd:
                {
                    OS_TVAN_Invoice_InvoiceInput_CallIssuesd(
                        strTid // strTid
                        , strGwUserCode // strGwUserCode
                        , strGwPassword // strGwPassword
                        , strWAUserCode // strWAUserCode
                        , strWAUserPassword // strWAUserPassword
                        , nNetworkID.ToString() // nNetworkID
                        , ref alParamsCoupleError // alParamsCoupleError
                                                  ////
                        , dtimeSys // dtimeSys
                        , strCustomerMST // strCustomerMST
                        , dataSet_GetInvoice // dataSet
                        );
                }
                #endregion
            }
            #endregion

            #region //// Clear For Debug:
            {
                ////
                string strSqlClearForDebug = CmUtils.StringUtils.Replace(@"
						---- Clear for Debug:
						drop table #input_Invoice_Invoice;
						drop table #tbl_Invoice_InvoiceDtl_Temp;
						drop table #tbl_Mst_NNT_ViewAbility;
					");

                _cf.db.ExecQuery(
                    strSqlClearForDebug
                    );
                ////
            }
            #endregion

        }


        private void Invoice_Invoice_IssuedX_New20190905(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            , DateTime dtimeSys
            //// 
            , object objInvoiceCode
            , object objEmailSend
            , object objRemark
           )
        {
            #region // Temp:
            //int nTidSeq = 0;
            //bool bMyDebugSql = false;
            string strFunctionName = "Invoice_Invoice_IssuedX";
            //string strErrorCodeDefault = TError.ErrHTCNM.Invoice_Invoice_IssuedX;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
                });
            //ArrayList alPCErrEx = new ArrayList();
            ////
            Hashtable htParamsSql = new Hashtable();
            #endregion

            #region // Convert Input:
            // drAbilityOfUser:
            DataRow drAbilityOfUser = Sys_User_GetAbilityViewOfUser(strWAUserCode);
            zzzzClauseSelect_Mst_NNT_ViewAbility_Get(
                drAbilityOfUser // drAbilityOfUser
                , ref alParamsCoupleError // alParamsCoupleError
                );

            #endregion

            #region // Refine and Check Input Invoice_Invoice:
            ////
            string strInvoiceCode = TUtils.CUtils.StdParam(objInvoiceCode);
            string strEmailSend = string.Format("{0}", objEmailSend).Trim();
            string strRemark = string.Format("{0}", objRemark).Trim();
            ////
            DataTable dtDB_Invoice_Invoice = null;
            string strInvoiceType2 = "";
            {
                Invoice_Invoice_CheckDB(
                    ref alParamsCoupleError // alParamsCoupleError
                    , strInvoiceCode // objInvoiceCode
                    , TConst.Flag.Yes // strFlagExistToCheck
                    , TConst.InvoiceStatus.Approved // strInvoiceStatusListToCheck
                    , out dtDB_Invoice_Invoice // dtDB_Invoice_Invoice
                    );
                ////
                string strMST = TUtils.CUtils.StdParam(dtDB_Invoice_Invoice.Rows[0]["MST"]);
                strInvoiceType2 = TUtils.CUtils.StdParam(dtDB_Invoice_Invoice.Rows[0]["InvoiceType2"]);
                if (!CmUtils.StringUtils.StringEqualIgnoreCase(drAbilityOfUser["MST"], strMST)
                    && !CmUtils.StringUtils.StringEqualIgnoreCase(drAbilityOfUser["FlagBG"], TConst.Flag.Active))
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.DB.NNT.MST", drAbilityOfUser["MST"]
                        , "Check.strMST", strMST
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Invoice_Invoice_Issued_InvalidMST
                        , null
                        , alParamsCoupleError.ToArray()
                        );

                }
                ////
                //           string strSqlCheck_Invoice_InvoiceDtl = CmUtils.StringUtils.Replace(@"
                //	select top 1
                //		t.*
                //	from Invoice_InvoiceDtl t --//[mylock]
                //	where (1=1)
                //		and t.InvoiceCode = '@strInvoiceCode'
                //	;
                //"
                //               , "@strInvoiceCode", strInvoiceCode
                //               );

                //           DataTable dtDB_Check_Invoice_InvoiceDtl = _cf.db.ExecQuery(strSqlCheck_Invoice_InvoiceDtl).Tables[0];
                //           ////
                //           if (dtDB_Check_Invoice_InvoiceDtl.Rows.Count < 1)
                //           {
                //               alParamsCoupleError.AddRange(new object[]{
                //                   "Check.strInvoiceCode", strInvoiceCode
                //                   });
                //               throw CmUtils.CMyException.Raise(
                //                   TError.ErridnInventory.Invoice_Invoice_Issued_InvoiceDtlNotFound
                //                   , null
                //                   , alParamsCoupleError.ToArray()
                //                   );
                //           }
            }
            #endregion

            #region // SaveTemp Invoice_Invoice:
            {
                ////
                TUtils.CUtils.MyBuildDBDT_Common(
                    _cf.db
                    , "#input_Invoice_Invoice"
                    , TConst.BizMix.Default_DBColType // strDefaultType
                    , new object[]{
                        "InvoiceCode"
                        , "EmailSend"
                        , "Remark"
                        , "InvoiceStatus"
                        , "SendEmailDTimeUTC"
                        , "SendEmailBy"
                        , "IssuedDTimeUTC"
                        , "IssuedBy"
                        , "LogLUDTimeUTC"
                        , "LogLUBy"
                        }
                    , new object[]{
                            new object[]{
                                strInvoiceCode, // InvoiceCode
								strEmailSend, // EmailSend
								strRemark, // Remark
								TConst.InvoiceStatus.Issued, // InvoiceStatus
                                dtimeSys.ToString("yyyy-MM-dd HH:mm:ss"), // SendEmailDTimeUTC
                                strWAUserCode, // SendEmailBy
                                dtimeSys.ToString("yyyy-MM-dd HH:mm:ss"), // IssuedDTimeUTC
                                strWAUserCode, // IssuedBy
                                dtimeSys.ToString("yyyy-MM-dd HH:mm:ss"), // LogLUDTimeUTC
                                strWAUserCode, // LogLUBy
								}
                        }
                    );

            }
            #endregion

            #region // SaveDB:
            {
                ////
                string zzB_Update_Invoice_Invoice_ClauseSet_zzE = @"
						t.LogLUDTimeUTC = f.LogLUDTimeUTC
						, t.LogLUBy = f.LogLUBy
						, t.IssuedDTimeUTC = f.IssuedDTimeUTC
						, t.IssuedBy = f.IssuedBy
						, t.SendEmailDTimeUTC = f.SendEmailDTimeUTC
						, t.SendEmailBy = f.SendEmailBy
						, t.InvoiceStatus = f.InvoiceStatus
						, t.EmailSend = f.EmailSend
						, t.Remark = f.Remark
						";
                ////
                string zzB_Update_Invoice_InvoiceDtl_ClauseSet_zzE = @"
						t.LogLUDTimeUTC = f.LogLUDTimeUTC
						, t.LogLUBy = f.LogLUBy
						, t.InvoiceDtlStatus = f.InvoiceStatus
						";
                ////
                //          string zzB_Update_Invoice_InvoicePrd_ClauseSet_zzE = @"
                //t.LogLUDTimeUTC = f.LogLUDTimeUTC
                //, t.LogLUBy = f.LogLUBy
                //, t.InvoicePrdStatus = f.InvoiceStatus
                //";
                ////
                string zzB_Update_Invoice_Invoice_zzE = CmUtils.StringUtils.Replace(@"
						---- Invoice_Invoice:
						update t
						set 
							zzB_Update_Invoice_Invoice_ClauseSet_zzE
						from Invoice_Invoice t --//[mylock]
							inner join #input_Invoice_Invoice f --//[mylock]
								on t.InvoiceCode = f.InvoiceCode
						where (1=1)
						;
					"
                    , "zzB_Update_Invoice_Invoice_ClauseSet_zzE", zzB_Update_Invoice_Invoice_ClauseSet_zzE
                    );
                ////
                string zzB_Update_Invoice_InvoiceDtl_zzE = CmUtils.StringUtils.Replace(@"
                            ---- #tbl_Invoice_InvoiceDtl_Temp: 
                            select 
                                t.InvoiceCode
                                , t.Idx
                                , t.SpecCode
                                , f.InvoiceStatus
                                , f.LogLUDTimeUTC
                                , f.LogLUBy
                            into #tbl_Invoice_InvoiceDtl_Temp
							from Invoice_InvoiceDtl t --//[mylock]
							    inner join #input_Invoice_Invoice f --//[mylock]
								    on t.InvoiceCode = f.InvoiceCode
							where (1=1)
							;

                            ---- Update:
							update t
							set 
								zzB_Update_Invoice_InvoiceDtl_ClauseSet_zzE
							from Invoice_InvoiceDtl t --//[mylock]
							    inner join #tbl_Invoice_InvoiceDtl_Temp f --//[mylock]
								    on t.InvoiceCode = f.InvoiceCode
								        and t.Idx = f.Idx
							where (1=1)
							;
						"
                        , "zzB_Update_Invoice_InvoiceDtl_ClauseSet_zzE", zzB_Update_Invoice_InvoiceDtl_ClauseSet_zzE
                        );
                ////				
                //           string zzB_Update_Invoice_InvoicePrd_zzE = CmUtils.StringUtils.Replace(@"
                //                   ---- #tbl_Invoice_InvoicePrd_Temp: 
                //                   select 
                //                       t.InvoiceCode
                //                       , t.ProductID
                //                       , t.SpecCode
                //                       , f.InvoiceStatus
                //                       , f.LogLUDTimeUTC
                //                       , f.LogLUBy
                //                   into #tbl_Invoice_InvoicePrd_Temp
                //	from Invoice_InvoicePrd t --//[mylock]
                //		inner join #input_Invoice_Invoice f --//[mylock]
                //			on t.InvoiceCode = f.InvoiceCode
                //	where (1=1)
                //	;

                //                   ---- Update:
                //	update t
                //	set 
                //		zzB_Update_Invoice_InvoicePrd_ClauseSet_zzE
                //	from Invoice_InvoicePrd t --//[mylock]
                //		inner join #tbl_Invoice_InvoicePrd_Temp f --//[mylock]
                //			on t.InvoiceCode = f.InvoiceCode
                //			    and t.ProductID = f.ProductID
                //			    and t.SpecCode = f.SpecCode
                //	where (1=1)
                //	;
                //"
                //               , "zzB_Update_Invoice_InvoicePrd_ClauseSet_zzE", zzB_Update_Invoice_InvoicePrd_ClauseSet_zzE
                //               );
                ////
                string strSql_SaveOnDB = CmUtils.StringUtils.Replace(@"
						----
						zzB_Update_Invoice_Invoice_zzE
                        ----
						zzB_Update_Invoice_InvoiceDtl_zzE
                        ----
					"
                    , "zzB_Update_Invoice_Invoice_zzE", zzB_Update_Invoice_Invoice_zzE
                    , "zzB_Update_Invoice_InvoiceDtl_zzE", zzB_Update_Invoice_InvoiceDtl_zzE
                    );

                DataSet dsDB_Check = _cf.db.ExecQuery(
                    strSql_SaveOnDB
                    );
            }
            #endregion

            #region // Call WS All Network phục vụ hóa đơn đầu vào:
            string strCustomerMST = TUtils.CUtils.StdParam(dtDB_Invoice_Invoice.Rows[0]["CustomerMST"]);
            {
                #region // Get Data:
                DataSet dataSet_GetInvoice = new DataSet();
                {
                    string strSql_SaveOnDB = CmUtils.StringUtils.Replace(@"
                            ---- Invoice_Invoice: 
                            select 
                                t.*
							from Invoice_Invoice t --//[mylock]
							    inner join #input_Invoice_Invoice f --//[mylock]
								    on t.InvoiceCode = f.InvoiceCode
							where (1=1)
							;

                            ---- Invoice_InvoiceDtl: 
                            select 
                                t.*
							from Invoice_InvoiceDtl t --//[mylock]
							    inner join #input_Invoice_Invoice f --//[mylock]
								    on t.InvoiceCode = f.InvoiceCode
							where (1=1)
							;
					    "
                        );

                    DataSet dsDB_Check = _cf.db.ExecQuery(
                        strSql_SaveOnDB
                        );
                    ////
                    DataTable dtData_Invoice_Invoice = new DataTable("Invoice_InvoiceInput");
                    dtData_Invoice_Invoice = dsDB_Check.Tables[0].Copy();
                    dataSet_GetInvoice.Tables.Add(dtData_Invoice_Invoice);
                    ////
                    DataTable dtData_Invoice_InvoiceDtl = new DataTable("Invoice_InvoiceInputDtl");
                    dtData_Invoice_InvoiceDtl = dsDB_Check.Tables[1].Copy();
                    dataSet_GetInvoice.Tables.Add(dtData_Invoice_InvoiceDtl);
                    ////
                    dataSet_GetInvoice.Tables[0].TableName = "Invoice_InvoiceInput";
                    dataSet_GetInvoice.Tables[1].TableName = "Invoice_InvoiceInputDtl";

                }
                #endregion

                #region // OS_TVAN_Invoice_InvoiceInput_CallIssuesd:
                {
                    OS_TVAN_Invoice_InvoiceInput_CallIssuesd(
                        strTid // strTid
                        , strGwUserCode // strGwUserCode
                        , strGwPassword // strGwPassword
                        , strWAUserCode // strWAUserCode
                        , strWAUserPassword // strWAUserPassword
                        , nNetworkID.ToString() // nNetworkID
                        , ref alParamsCoupleError // alParamsCoupleError
                                                  ////
                        , dtimeSys // dtimeSys
                        , strCustomerMST // strCustomerMST
                        , dataSet_GetInvoice // dataSet
                        );
                }
                #endregion
            }
            #endregion

            #region // Call DMS:
            if(CmUtils.StringUtils.StringEqualIgnoreCase(strInvoiceType2, "DMS"))
            {
                #region // dtDB_OS_Invoice_InvoiceTemp:
                DataTable dtDB_OS_Invoice_InvoiceTemp = null;

                OS_Invoice_InvoiceTemp_CheckDB(
                    ref alParamsCoupleError // alParamsCoupleError
                    , strInvoiceCode // objInvoiceCode
                    , "" // strFlagExistToCheck
                    , "" // strInvoiceStatusListToCheck
                    , out dtDB_OS_Invoice_InvoiceTemp // dtDB_OS_Invoice_InvoiceTemp
                    );
                #endregion

                #region // Call WS DMS:
                int nSeq = 0;
                WSHTC.WSHTC64 ws = new WSHTC.WSHTC64();
                if(dtDB_OS_Invoice_InvoiceTemp.Rows.Count > 0)
                {
                    /////
                    ws.Url = System.Configuration.ConfigurationManager.AppSettings["OS_DMSSales_HTC_WS"];
                    string _strConfig_DMS_UserName = System.Configuration.ConfigurationManager.AppSettings["OS_GwUserCode"];
                    string _strConfig_DMS_Password = System.Configuration.ConfigurationManager.AppSettings["OS_GwPassword"];
                    string _strConfig_SessionId_fix = System.Configuration.ConfigurationManager.AppSettings["SessionId_fix"];
                    string strMixInvoiceCode = dtDB_OS_Invoice_InvoiceTemp.Rows[0]["OS_DMS_RefNo"].ToString();
                    string strMixInvoiceNo = dtDB_Invoice_Invoice.Rows[0]["InvoiceNo"].ToString();
                    string strMixInvoiceDate = dtDB_Invoice_Invoice.Rows[0]["InvoiceDateUTC"].ToString();
                    string strInvoiceIDCode = dtDB_Invoice_Invoice.Rows[0]["Sign"].ToString();
                    string strOS_HDDT_InvoiceCode = dtDB_Invoice_Invoice.Rows[0]["InvoiceCode"].ToString();
                    string strOS_HDDT_RefNo = dtDB_Invoice_Invoice.Rows[0]["RefNo"].ToString();

                    string strCustomerNNTCode = dtDB_Invoice_Invoice.Rows[0]["CustomerNNTCode"].ToString();
                    string strstrPartnerUserCode = dtDB_OS_Invoice_InvoiceTemp.Rows[0]["IssuedBy"].ToString();
                    string strstrPartnerCode = "WSQInvoice";

                    /////
                    DataSet mdsFinal_OSDMS = new DataSet();
                    if (CmUtils.StringUtils.StringEqualIgnoreCase(strCustomerNNTCode, "HTC"))
                    {
                        mdsFinal_OSDMS = ws.OSTVAN_VAT_TCGInvoiceApprove(
                            _strConfig_DMS_UserName   //strGwUserCode,
                            , _strConfig_DMS_Password   //strGwPassword,
                            , string.Format("{0}.{1}", DateTime.Now.ToString("yyyyMMdd.HHmmss"), nSeq++) // strTid
                            , _strConfig_SessionId_fix  //strGwPassword,
                            , strstrPartnerCode // strstrPartnerCode
                            , strstrPartnerUserCode // strstrPartnerUserCode
                            , strMixInvoiceCode // strTCGInvoiceCode
                            , strMixInvoiceNo //strTCGInvoiceNo
                            , strMixInvoiceDate //strTCGInvoiceDate
                            , strInvoiceIDCode //strInvoiceIDCode
                            , strOS_HDDT_InvoiceCode //strOS_HDDT_InvoiceCode
                            , strOS_HDDT_RefNo //strOS_HDDT_RefNo
                            , TConst.Flag.No //strFlagUnapprove
                            );

                    }
                    else
                    {
                        mdsFinal_OSDMS = ws.OSTVAN_VAT_HTCInvoiceApprove(
                            _strConfig_DMS_UserName   //strGwUserCode,
                            , _strConfig_DMS_Password   //strGwPassword,
                            , string.Format("{0}.{1}", DateTime.Now.ToString("yyyyMMdd.HHmmss"), nSeq++) // strTid
                            , _strConfig_SessionId_fix  //strGwPassword,
                            , strstrPartnerCode // strstrPartnerCode
                            , strstrPartnerUserCode // strstrPartnerUserCode
                            , strMixInvoiceCode // strHTCInvoiceCode
                            , strMixInvoiceNo //strHTCInvoiceNo
                            , strMixInvoiceDate //strHTCInvoiceDate
                            , strInvoiceIDCode //strInvoiceIDCode
                            , strOS_HDDT_InvoiceCode //strOS_HDDT_InvoiceCode
                            , strOS_HDDT_RefNo //strOS_HDDT_RefNo
                            , TConst.Flag.No //strFlagUnapprove
                            );

                    }

                    mdsFinal_OSDMS = TUtils.CUtils.MyDSDecode(mdsFinal_OSDMS);
                    // Pause:
                    System.Threading.Thread.Sleep(10);
                    /////
                    if (CmUtils.CMyDataSet.HasError(mdsFinal_OSDMS))
                    {
                        TUtils.CUtils.AddParamServiceException(
                            ref alParamsCoupleError // alParamsCoupleError
                            , mdsFinal_OSDMS // mdsFinal
                            );

                        throw CmUtils.CMyException.Raise(
                            TError.ErridnInventory.CmSys_InvalidOutSite
                            , null
                            , alParamsCoupleError.ToArray()
                            );
                    }
                    ////
                }
                #endregion

            }
            #endregion

            #region //// Clear For Debug:
            {
                ////
                string strSqlClearForDebug = CmUtils.StringUtils.Replace(@"
						---- Clear for Debug:
						drop table #input_Invoice_Invoice;
						drop table #tbl_Invoice_InvoiceDtl_Temp;
						drop table #tbl_Mst_NNT_ViewAbility;
					");

                _cf.db.ExecQuery(
                    strSqlClearForDebug
                    );
                ////
            }
            #endregion

        }

        public DataSet WAS_Invoice_Invoice_Deleted_New20190705(
           ref ArrayList alParamsCoupleError
           , RQ_Invoice_Invoice objRQ_Invoice_Invoice
           ////
           , out RT_Invoice_Invoice objRT_Invoice_Invoice
           )
        {
            #region // Temp:
            string strTid = objRQ_Invoice_Invoice.Tid;
            objRT_Invoice_Invoice = new RT_Invoice_Invoice();
            DataSet mdsResult = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            DateTime dtimeSys = DateTime.UtcNow;
            //DataSet mdsExec = null;
            //DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(objRQ_Invoice_Invoice.Tid);
            //int nTidSeq = 0;
            //bool bNeedTransaction = true;
            string strFunctionName = "WAS_Invoice_Invoice_Deleted";
            string strErrorCodeDefault = TError.ErridnInventory.WAS_Invoice_Invoice_Deleted;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
                });
            #endregion

            try
            {
                #region // Init:
                #endregion

                #region // Refine and Check Input:
                //List<Invoice_Invoice> lst_Invoice_Invoice = new List<Invoice_Invoice>();
                //DataSet dsData = new DataSet();
                //{
                //    ////
                //    DataTable dt_Transaction_KeKhaiThue = TUtils.DataTableCmUtils.ToDataTable<Transaction_KeKhaiThue>(objRQ_Mst_NNT.Lst_Transaction_KeKhaiThue, "Transaction_KeKhaiThue");
                //    dsData.Tables.Add(dt_Transaction_KeKhaiThue);
                //}
                #endregion

                #region // Invoice_Invoice_Deleted:
                mdsResult = Invoice_Invoice_Deleted(
                    objRQ_Invoice_Invoice.Tid // strTid
                    , objRQ_Invoice_Invoice.GwUserCode // strGwUserCode
                    , objRQ_Invoice_Invoice.GwPassword // strGwPassword
                    , objRQ_Invoice_Invoice.WAUserCode // strUserCode
                    , objRQ_Invoice_Invoice.WAUserPassword // strUserPassword
                    , ref alParamsCoupleError // alParamsCoupleError
                                              ////
                    , objRQ_Invoice_Invoice.Invoice_Invoice.InvoiceCode // objInvoiceCode
                    , objRQ_Invoice_Invoice.Invoice_Invoice.InvoicePDFFilePath // objInvoicePDFFilePath
                    , objRQ_Invoice_Invoice.Invoice_Invoice.Remark // objRemark
                    );
                #endregion

                // Return Good:
                return mdsResult;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsResult
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Write ReturnLog:
                //_cf.ProcessBizReturn(
                //	ref mdsResult // mdsFinal
                //	, strTid // strTid
                //	, strFunctionName // strFunctionName
                //	);
                #endregion
            }
        }

        private void Invoice_Invoice_DeletedX_New20190705(
           string strTid
           , string strGwUserCode
           , string strGwPassword
           , string strWAUserCode
           , string strWAUserPassword
           , ref ArrayList alParamsCoupleError
           , DateTime dtimeSys
            //// 
            , object objInvoiceCode
            , object objInvoicePDFFilePath
            , object objRemark
          )
        {
            #region // Temp:
            //int nTidSeq = 0;
            //bool bMyDebugSql = false;
            string strFunctionName = "Invoice_Invoice_DeletedX";
            //string strErrorCodeDefault = TError.ErrHTCNM.Invoice_Invoice_DeletedX;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
                , "objInvoiceCode", objInvoiceCode
                , "objInvoicePDFFilePath", objInvoicePDFFilePath
                , "objRemark", objRemark
                });
            //ArrayList alPCErrEx = new ArrayList();
            ////
            Hashtable htParamsSql = new Hashtable();
            #endregion

            #region // Convert Input:
            // drAbilityOfUser:
            DataRow drAbilityOfUser = Sys_User_GetAbilityViewOfUser(strWAUserCode);
            zzzzClauseSelect_Mst_NNT_ViewAbility_Get(
                drAbilityOfUser // drAbilityOfUser
                , ref alParamsCoupleError // alParamsCoupleError
                );

            #endregion

            #region // Refine and Check Input Invoice_Invoice:
            ////
            string strInvoiceCode = TUtils.CUtils.StdParam(objInvoiceCode);
            string strInvoicePDFFilePath = string.Format("{0}", objInvoicePDFFilePath).Trim();
            string strRemark = string.Format("{0}", objRemark).Trim();
            ////
            DataTable dtDB_Invoice_Invoice = null;
            {
                Invoice_Invoice_CheckDB(
                    ref alParamsCoupleError // alParamsCoupleError
                    , strInvoiceCode // objInvoiceCode
                    , TConst.Flag.Yes // strFlagExistToCheck
                    , TConst.InvoiceStatus.Issued // strInvoiceStatusListToCheck
                    , out dtDB_Invoice_Invoice // dtDB_Invoice_Invoice
                    );

                ////
                string strMST = TUtils.CUtils.StdParam(dtDB_Invoice_Invoice.Rows[0]["MST"]);
                if (!CmUtils.StringUtils.StringEqualIgnoreCase(drAbilityOfUser["MST"], strMST))
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.DB.NNT.MST", drAbilityOfUser["MST"]
                        , "Check.strMST", strMST
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Invoice_Invoice_Deleted_InvalidMST
                        , null
                        , alParamsCoupleError.ToArray()
                        );

                }
                //           string strSqlCheck_Invoice_InvoiceDtl = CmUtils.StringUtils.Replace(@"
                //	select top 1
                //		t.*
                //	from Invoice_InvoiceDtl t --//[mylock]
                //	where (1=1)
                //		and t.InvoiceCode = '@strInvoiceCode'
                //	;
                //"
                //               , "@strInvoiceCode", strInvoiceCode
                //               );

                //           DataTable dtDB_Check_Invoice_InvoiceDtl = _cf.db.ExecQuery(strSqlCheck_Invoice_InvoiceDtl).Tables[0];
                //           ////
                //           if (dtDB_Check_Invoice_InvoiceDtl.Rows.Count < 1)
                //           {
                //               alParamsCoupleError.AddRange(new object[]{
                //                   "Check.strInvoiceCode", strInvoiceCode
                //                   });
                //               throw CmUtils.CMyException.Raise(
                //                   TError.ErridnInventory.Invoice_Invoice_Deleted_InvoiceDtlNotFound
                //                   , null
                //                   , alParamsCoupleError.ToArray()
                //                   );
                //           }
            }
            #endregion

            #region // SaveTemp Invoice_Invoice:
            {
                ////
                TUtils.CUtils.MyBuildDBDT_Common(
                    _cf.db
                    , "#input_Invoice_Invoice"
                    , TConst.BizMix.Default_DBColType // strDefaultType
                    , new object[]{
                        "InvoiceCode"
                        , "InvoicePDFFilePath"
                        , "Remark"
                        , "InvoiceStatus"
                        , "DeleteDTimeUTC"
                        , "DeleteBy"
                        , "LogLUDTimeUTC"
                        , "LogLUBy"
                        }
                    , new object[]{
                            new object[]{
                                strInvoiceCode, // InvoiceCode
                                strInvoicePDFFilePath, // InvoicePDFFilePath
								strRemark, // Remark
								TConst.InvoiceStatus.Deleted, // InvoiceStatus
                                dtimeSys.ToString("yyyy-MM-dd HH:mm:ss"), // DeleteDTimeUTC
                                strWAUserCode, // DeleteBy
                                dtimeSys.ToString("yyyy-MM-dd HH:mm:ss"), // LogLUDTimeUTC
                                strWAUserCode, // LogLUBy
								}
                        }
                    );

            }
            #endregion

            #region // SaveDB:
            {
                ////
                string zzB_Update_Invoice_Invoice_ClauseSet_zzE = @"
						t.LogLUDTimeUTC = f.LogLUDTimeUTC
						, t.LogLUBy = f.LogLUBy
						, t.DeleteDTimeUTC = f.DeleteDTimeUTC
						, t.DeleteBy = f.DeleteBy
						, t.InvoiceStatus = f.InvoiceStatus						
                        , t.InvoicePDFFilePath = f.InvoicePDFFilePath
						, t.Remark = f.Remark
						";
                ////
                string zzB_Update_Invoice_InvoiceDtl_ClauseSet_zzE = @"
						t.LogLUDTimeUTC = f.LogLUDTimeUTC
						, t.LogLUBy = f.LogLUBy
						, t.InvoiceDtlStatus = f.InvoiceStatus
						";
      //          ////
      //          string zzB_Update_Invoice_InvoicePrd_ClauseSet_zzE = @"
						//t.LogLUDTimeUTC = f.LogLUDTimeUTC
						//, t.LogLUBy = f.LogLUBy
						//, t.InvoicePrdStatus = f.InvoiceStatus
						//";
                ////
                string zzB_Update_Invoice_Invoice_zzE = CmUtils.StringUtils.Replace(@"
						---- Invoice_Invoice:
						update t
						set 
							zzB_Update_Invoice_Invoice_ClauseSet_zzE
						from Invoice_Invoice t --//[mylock]
							inner join #input_Invoice_Invoice f --//[mylock]
								on t.InvoiceCode = f.InvoiceCode
						where (1=1)
						;
					"
                    , "zzB_Update_Invoice_Invoice_ClauseSet_zzE", zzB_Update_Invoice_Invoice_ClauseSet_zzE
                    );
                ////
                string zzB_Update_Invoice_InvoiceDtl_zzE = CmUtils.StringUtils.Replace(@"
                        ---- #tbl_Invoice_InvoiceDtl_Temp: 
                        select 
                            t.InvoiceCode
                            , t.Idx
                            , f.InvoiceStatus
                            , f.LogLUDTimeUTC
                            , f.LogLUBy
                        into #tbl_Invoice_InvoiceDtl_Temp
						from Invoice_InvoiceDtl t --//[mylock]
							inner join #input_Invoice_Invoice f --//[mylock]
								on t.InvoiceCode = f.InvoiceCode
						where (1=1)
						;

                        ---- Update:
						update t
						set 
							zzB_Update_Invoice_InvoiceDtl_ClauseSet_zzE
						from Invoice_InvoiceDtl t --//[mylock]
							inner join #tbl_Invoice_InvoiceDtl_Temp f --//[mylock]
								on t.InvoiceCode = f.InvoiceCode
								    and t.Idx = f.Idx
						where (1=1)
						;
					"
                    , "zzB_Update_Invoice_InvoiceDtl_ClauseSet_zzE", zzB_Update_Invoice_InvoiceDtl_ClauseSet_zzE
                    );
     //           ////
     //           string zzB_Update_Invoice_InvoicePrd_zzE = CmUtils.StringUtils.Replace(@"
     //                   ---- #tbl_Invoice_InvoicePrd_Temp: 
     //                   select 
     //                       t.InvoiceCode
     //                       , t.ProductID
     //                       , t.SpecCode
     //                       , f.InvoiceStatus
     //                       , f.LogLUDTimeUTC
     //                       , f.LogLUBy
     //                   into #tbl_Invoice_InvoicePrd_Temp
					//	from Invoice_InvoicePrd t --//[mylock]
					//		inner join #input_Invoice_Invoice f --//[mylock]
					//			on t.InvoiceCode = f.InvoiceCode
					//	where (1=1)
					//	;

     //                   ---- Update:
					//	update t
					//	set 
					//		zzB_Update_Invoice_InvoicePrd_ClauseSet_zzE
					//	from Invoice_InvoicePrd t --//[mylock]
					//		inner join #tbl_Invoice_InvoicePrd_Temp f --//[mylock]
					//			on t.InvoiceCode = f.InvoiceCode
					//			    and t.ProductID = f.ProductID
					//			    and t.SpecCode = f.SpecCode
					//	where (1=1)
					//	;
					//"
     //               , "zzB_Update_Invoice_InvoicePrd_ClauseSet_zzE", zzB_Update_Invoice_InvoicePrd_ClauseSet_zzE
     //               );
                ////
                string strSql_SaveOnDB = CmUtils.StringUtils.Replace(@"
						----
						zzB_Update_Invoice_Invoice_zzE
                        ----
						zzB_Update_Invoice_InvoiceDtl_zzE
                        ----
					"
                    , "zzB_Update_Invoice_Invoice_zzE", zzB_Update_Invoice_Invoice_zzE
                    , "zzB_Update_Invoice_InvoiceDtl_zzE", zzB_Update_Invoice_InvoiceDtl_zzE
                    );

                DataSet dsDB_Check = _cf.db.ExecQuery(
                    strSql_SaveOnDB
                    );
            }
            #endregion

            #region // Call WS All Network phục vụ hóa đơn đầu vào:
            string strCustomerMST = TUtils.CUtils.StdParam(dtDB_Invoice_Invoice.Rows[0]["CustomerMST"]);
            {
                #region // Get Data:
                DataSet dataSet_GetInvoice = new DataSet();
                {
                    string strSql_SaveOnDB = CmUtils.StringUtils.Replace(@"
                            ---- Invoice_Invoice: 
                            select 
                                t.*
							from Invoice_Invoice t --//[mylock]
							    inner join #input_Invoice_Invoice f --//[mylock]
								    on t.InvoiceCode = f.InvoiceCode
							where (1=1)
							;
					    "
                        );

                    DataSet dsDB_Check = _cf.db.ExecQuery(
                        strSql_SaveOnDB
                        );
                    ////
                    DataTable dtData_Invoice_Invoice = new DataTable("Invoice_InvoiceInput");
                    dtData_Invoice_Invoice = dsDB_Check.Tables[0].Copy();
                    dataSet_GetInvoice.Tables.Add(dtData_Invoice_Invoice);
                    dataSet_GetInvoice.Tables[0].TableName = "Invoice_InvoiceInput";
                    ////

                }
                #endregion

                #region // OS_TVAN_Invoice_InvoiceInput_CallDeleted:
                {
                    OS_TVAN_Invoice_InvoiceInput_CallDeleted(
                        strTid // strTid
                        , strGwUserCode // strGwUserCode
                        , strGwPassword // strGwPassword
                        , strWAUserCode // strWAUserCode
                        , strWAUserPassword // strWAUserPassword
                        , nNetworkID.ToString() // nNetworkID
                        , ref alParamsCoupleError // alParamsCoupleError
                                                  ////
                        , dtimeSys // dtimeSys
                        , strCustomerMST // strCustomerMST
                        , dataSet_GetInvoice // dataSet
                        );
                }
                #endregion
            }
            #endregion

            #region //// Clear For Debug:
            {
                ////
                string strSqlClearForDebug = CmUtils.StringUtils.Replace(@"
						---- Clear for Debug:
						drop table #input_Invoice_Invoice;
						drop table #tbl_Invoice_InvoiceDtl_Temp;
					");

                _cf.db.ExecQuery(
                    strSqlClearForDebug
                    );
                ////
            }
            #endregion
        }

        private void Invoice_Invoice_SaveX_New20190715(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            , DateTime dtimeSys
            ////
            , object objFlagIsDelete
            ////
            , DataSet dsData
            )
        {
            #region // Temp:
            //int nTidSeq = 0;
            //bool bMyDebugSql = false;
            string strFunctionName = "Invoice_Invoice_SaveAllX";
            //string strErrorCodeDefault = TError.ErridnInventory.Invoice_Invoice_SaveAllX;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
                ////
                , "objFlagIsDelete",objFlagIsDelete
				////
                });
            //ArrayList alPCErrEx = new ArrayList();
            ////
            Hashtable htParamsSql = new Hashtable();
            #endregion

            #region // Convert Input:
            //DataSet dsData = TUtils.CUtils.StdDS(arrobjDSData);
            //if (dsData == null) dsData = new DataSet("dsData");
            //dsData.AcceptChanges();
            alParamsCoupleError.AddRange(new object[]{
                "Check.dsData", CmUtils.XmlUtils.DataSet2XmlSimple(dsData)
                });
            #endregion

            #region // Refine and Check Input:
            ////
            DataRow drAbilityOfUser = Sys_User_GetAbilityViewOfUser(strWAUserCode);
            ////
            bool bIsDelete = CmUtils.StringUtils.StringEqual(objFlagIsDelete, TConst.Flag.Yes);
            ////
            string strMST = TUtils.CUtils.StdParam(drAbilityOfUser["MNNTMST"]);
            #endregion

            #region // Refine and Check Input Invoice_Invoice:
            ////
            DataTable dtInput_Invoice_Invoice = null;
            {
                ////
                string strTableCheck = "Invoice_Invoice";
                ////
                if (!dsData.Tables.Contains(strTableCheck))
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.TableName", strTableCheck
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Invoice_Invoice_SaveX_Input_InvoiceTblNotFound
                        , null
                        , alParamsCoupleError.ToArray()
                        );
                }
                dtInput_Invoice_Invoice = dsData.Tables[strTableCheck];
                ////
                if (dtInput_Invoice_Invoice.Rows.Count < 1)
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.TableName", strTableCheck
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Invoice_Invoice_SaveX_Input_InvoiceTblInvalid
                        , null
                        , alParamsCoupleError.ToArray()
                        );
                }
                ////
                TUtils.CUtils.StdDataInTable(
                    dtInput_Invoice_Invoice // dtData
                    , "StdParam", "InvoiceCode" // arrstrCouple
                    , "StdParam", "MST" // arrstrCouple
                    , "StdParam", "NetworkID" // arrstrCouple
                    , "StdParam", "RefNo" // arrstrCouple
                    , "StdParam", "FormNo" // arrstrCouple
                    , "StdParam", "Sign" // arrstrCouple
                    , "StdParam", "SourceInvoiceCode" // arrstrCouple
                    , "StdParam", "InvoiceAdjType" // arrstrCouple
                    , "StdParam", "PaymentMethodCode" // arrstrCouple
                    , "StdParam", "InvoiceType2" // arrstrCouple
                    , "StdParam", "CustomerNNTCode" // arrstrCouple
                    , "StdParam", "CustomerNNTName" // arrstrCouple
                    , "StdParam", "CustomerNNTAddress" // arrstrCouple
                    , "StdParam", "CustomerNNTPhone" // arrstrCouple
                    , "StdParam", "CustomerNNTBankName" // arrstrCouple
                    , "StdParam", "CustomerNNTEmail" // arrstrCouple
                    , "StdParam", "CustomerNNTAccNo" // arrstrCouple
                    , "StdParam", "CustomerNNTBuyerName" // arrstrCouple
                    , "StdParam", "CustomerMST" // arrstrCouple
                    , "StdParam", "TInvoiceCode" // arrstrCouple
                    , "StdParam", "InvoiceNo" // arrstrCouple
                    , "StdParam", "InvoiceDateUTC" // arrstrCouple
                                                   //, "StdParam", "EmailSend" // arrstrCouple
                    , "StdParam", "InvoiceFileSpec" // arrstrCouple
                    , "StdParam", "InvoiceFilePath" // arrstrCouple
                    , "StdParam", "InvoicePDFFilePath" // arrstrCouple
                    , "float", "TotalValInvoice" // arrstrCouple
                    , "float", "TotalValVAT" // arrstrCouple
                    , "float", "TotalValPmt" // arrstrCouple
                    , "", "AttachedDelFilePath" // arrstrCouple
                    , "", "DeleteReason" // arrstrCouple
                    , "StdParam", "InvoiceVerifyCQTCode" // arrstrCouple
                    , "StdParam", "CurrencyCode" // arrstrCouple
                    , "float", "CurrencyRate" // arrstrCouple
                    , "float", "ValGoodsNotTaxable" // arrstrCouple
                    , "float", "ValGoodsNotChargeTax" // arrstrCouple
                    , "float", "ValGoodsVAT5" // arrstrCouple
                    , "float", "ValVAT5" // arrstrCouple
                    , "float", "ValGoodsVAT10" // arrstrCouple
                    , "float", "ValVAT10" // arrstrCouple
                    , "StdParam", "NNTFullName" // arrstrCouple
                    , "StdParam", "NNTFullAdress" // arrstrCouple
                    , "StdParam", "NNTPhone" // arrstrCouple
                    , "StdParam", "NNTFax" // arrstrCouple
                    , "StdParam", "NNTEmail" // arrstrCouple
                    , "StdParam", "NNTWebsite" // arrstrCouple
                    , "StdParam", "NNTAccNo" // arrstrCouple
                    , "StdParam", "NNTBankName" // arrstrCouple
                    , "StdParam", "Remark" // arrstrCouple
                    , "StdParam", "InvoiceCF1" // arrstrCouple
                    , "StdParam", "InvoiceCF2" // arrstrCouple
                    , "StdParam", "InvoiceCF3" // arrstrCouple
                    , "StdParam", "InvoiceCF4" // arrstrCouple
                    , "StdParam", "InvoiceCF5" // arrstrCouple
                    , "StdParam", "InvoiceCF6" // arrstrCouple
                    , "StdParam", "InvoiceCF7" // arrstrCouple
                    , "StdParam", "InvoiceCF8" // arrstrCouple
                    , "StdParam", "InvoiceCF9" // arrstrCouple
                    , "StdParam", "InvoiceCF10" // arrstrCouple
                    );
                ////
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_Invoice, "EmailSend", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_Invoice, "CreateDTimeUTC", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_Invoice, "CreateBy", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_Invoice, "InvoiceNoDTimeUTC", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_Invoice, "InvoiceNoBy", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_Invoice, "SignDTimeUTC", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_Invoice, "SignBy", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_Invoice, "ApprDTimeUTC", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_Invoice, "ApprBy", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_Invoice, "CancelDTimeUTC", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_Invoice, "CancelBy", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_Invoice, "SendEmailDTimeUTC", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_Invoice, "SendEmailBy", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_Invoice, "IssuedDTimeUTC", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_Invoice, "IssuedBy", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_Invoice, "DeleteDTimeUTC", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_Invoice, "DeleteBy", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_Invoice, "ChangeDTimeUTC", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_Invoice, "ChangeBy", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_Invoice, "LUDTimeUTC", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_Invoice, "LUBy", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_Invoice, "FlagChange", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_Invoice, "FlagPushOutSite", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_Invoice, "InvoiceStatus", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_Invoice, "LogLUDTimeUTC", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_Invoice, "LogLUBy", typeof(object));
            }
            #endregion

            #region //// SaveTemp Invoice_Invoice For Check:
            //if (!bIsDelete)
            { 
                // Upload:
                TUtils.CUtils.MyBuildDBDT_Common(
                    _cf.db // db
                    , "#input_Invoice_Invoice" // strTableName
                    , new object[] {
                            "InvoiceCode", TConst.BizMix.Default_DBColType
                            , "MST", TConst.BizMix.Default_DBColType
                            , "NetworkID", TConst.BizMix.Default_DBColType
                            , "RefNo", TConst.BizMix.Default_DBColType
                            , "FormNo", TConst.BizMix.Default_DBColType
                            , "Sign", TConst.BizMix.Default_DBColType
                            , "SourceInvoiceCode", TConst.BizMix.Default_DBColType
                            , "InvoiceAdjType", TConst.BizMix.Default_DBColType
                            , "PaymentMethodCode", TConst.BizMix.Default_DBColType
                            , "InvoiceType2", TConst.BizMix.Default_DBColType
                            , "CustomerNNTCode", TConst.BizMix.Default_DBColType
                            , "CustomerNNTName", TConst.BizMix.Default_DBColType
                            , "CustomerNNTAddress", TConst.BizMix.Default_DBColType
                            , "CustomerNNTPhone", TConst.BizMix.Default_DBColType
                            , "CustomerNNTBankName", TConst.BizMix.Default_DBColType
                            , "CustomerNNTEmail", TConst.BizMix.Default_DBColType
                            , "CustomerNNTAccNo", TConst.BizMix.Default_DBColType
                            , "CustomerNNTBuyerName", TConst.BizMix.Default_DBColType
                            , "CustomerMST", TConst.BizMix.Default_DBColType
                            , "TInvoiceCode", TConst.BizMix.Default_DBColType
                            , "InvoiceNo", TConst.BizMix.Default_DBColType
                            , "InvoiceDateUTC", TConst.BizMix.Default_DBColType
                            , "EmailSend", TConst.BizMix.Default_DBColType
                            , "InvoiceFileSpec", TConst.BizMix.Default_DBColType
                            , "InvoiceFilePath", TConst.BizMix.Default_DBColType
                            , "InvoicePDFFilePath", TConst.BizMix.Default_DBColType
                            , "TotalValInvoice", "float"
                            , "TotalValVAT", "float"
                            , "TotalValPmt", "float"
                            , "CreateDTimeUTC", TConst.BizMix.Default_DBColType
                            , "CreateBy", TConst.BizMix.Default_DBColType
                            , "InvoiceNoDTimeUTC", TConst.BizMix.Default_DBColType
                            , "InvoiceNoBy", TConst.BizMix.Default_DBColType
                            , "SignDTimeUTC", TConst.BizMix.Default_DBColType
                            , "SignBy", TConst.BizMix.Default_DBColType
                            , "ApprDTimeUTC", TConst.BizMix.Default_DBColType
                            , "ApprBy", TConst.BizMix.Default_DBColType
                            , "CancelDTimeUTC", TConst.BizMix.Default_DBColType
                            , "CancelBy", TConst.BizMix.Default_DBColType
                            , "SendEmailDTimeUTC", TConst.BizMix.Default_DBColType
                            , "SendEmailBy", TConst.BizMix.Default_DBColType
                            , "IssuedDTimeUTC", TConst.BizMix.Default_DBColType
                            , "IssuedBy", TConst.BizMix.Default_DBColType
                            , "AttachedDelFilePath", TConst.BizMix.Default_DBColType
                            , "DeleteReason", TConst.BizMix.Default_DBColType
                            , "DeleteDTimeUTC", TConst.BizMix.Default_DBColType
                            , "DeleteBy", TConst.BizMix.Default_DBColType
                            , "ChangeDTimeUTC", TConst.BizMix.Default_DBColType
                            , "ChangeBy", TConst.BizMix.Default_DBColType
                            , "InvoiceVerifyCQTCode", TConst.BizMix.Default_DBColType
                            , "CurrencyCode", TConst.BizMix.Default_DBColType
                            , "CurrencyRate", TConst.BizMix.Default_DBColType
                            , "ValGoodsNotTaxable", "float"
                            , "ValGoodsNotChargeTax", "float"
                            , "ValGoodsVAT5", "float"
                            , "ValVAT5", "float"
                            , "ValGoodsVAT10", "float"
                            , "ValVAT10", "float"
                            , "NNTFullName", TConst.BizMix.Default_DBColType
                            , "NNTFullAdress", TConst.BizMix.Default_DBColType
                            , "NNTPhone", TConst.BizMix.Default_DBColType
                            , "NNTFax", TConst.BizMix.Default_DBColType
                            , "NNTEmail", TConst.BizMix.Default_DBColType
                            , "NNTWebsite", TConst.BizMix.Default_DBColType
                            , "NNTAccNo", TConst.BizMix.Default_DBColType
                            , "NNTBankName", TConst.BizMix.Default_DBColType
                            , "LUDTimeUTC", TConst.BizMix.Default_DBColType
                            , "LUBy", TConst.BizMix.Default_DBColType
                            , "Remark", TConst.BizMix.Default_DBColType
                            , "InvoiceCF1", TConst.BizMix.Default_DBColType
                            , "InvoiceCF2", TConst.BizMix.Default_DBColType
                            , "InvoiceCF3", TConst.BizMix.Default_DBColType
                            , "InvoiceCF4", TConst.BizMix.Default_DBColType
                            , "InvoiceCF5", TConst.BizMix.Default_DBColType
                            , "InvoiceCF6", TConst.BizMix.Default_DBColType
                            , "InvoiceCF7", TConst.BizMix.Default_DBColType
                            , "InvoiceCF8", TConst.BizMix.Default_DBColType
                            , "InvoiceCF9", TConst.BizMix.Default_DBColType
                            , "InvoiceCF10", TConst.BizMix.Default_DBColType
                            , "FlagChange", TConst.BizMix.Default_DBColType
                            , "FlagPushOutSite", TConst.BizMix.Default_DBColType
                            , "FlagDeleteOutSite", TConst.BizMix.Default_DBColType
                            , "InvoiceStatus", TConst.BizMix.Default_DBColType
                            , "LogLUDTimeUTC", TConst.BizMix.Default_DBColType
                            , "LogLUBy", TConst.BizMix.Default_DBColType
                        } // arrSingleStructure
                    , dtInput_Invoice_Invoice // dtData
                );
            }
            #endregion

            #region /// Refine and check Input Invoice_Invoice:
            {
                #region ----// Check InvalidInvoiceCode:
                {
                    string strSql_CheckInvalidInvoiceCode = CmUtils.StringUtils.Replace(@"
                            --- Check:
                            select distinct 
                                t.InvoiceCode
                            from #input_Invoice_Invoice t --//[mylock]
                            where(1=1)
                                and (t.InvoiceCode is null or LTRIM(RTRIM(t.InvoiceCode)) = '')
                            ;
						");
                    DataTable dt_CheckInvalidInvoiceCode = _cf.db.ExecQuery(
                        strSql_CheckInvalidInvoiceCode
                        ).Tables[0];
                    /////
                    if (dt_CheckInvalidInvoiceCode.Rows.Count > 0)
                    {
                        alParamsCoupleError.AddRange(new object[]{
                            "Check.ErrConditionalRaise", "(t.InvoiceCode is null or LTRIM(RTRIM(t.InvoiceCode)) = '')"
                            , "Check.NumberRows", dt_CheckInvalidInvoiceCode.Rows.Count
                            });
                        throw CmUtils.CMyException.Raise(
                            TError.ErridnInventory.Invoice_Invoice_SaveX_InvalidInvoiceCode
                            , null
                            , alParamsCoupleError.ToArray()
                            );
                    }
                    ////
                }
                #endregion

                #region ----// Check InvalidInvoiceStatus:
                {
                    string strSql_CheckInvalidInvoiceCode = CmUtils.StringUtils.Replace(@"
                            --- #tbl_Invoice_Invoice_ForSTUFF:
                            select distinct 
                                t.InvoiceCode
                            into #tbl_Invoice_Invoice_ForSTUFF
                            from #input_Invoice_Invoice t --//[mylock]
                                inner join Invoice_Invoice f --//[mylock]
                                    on t.InvoiceCode = f.InvoiceCode
                            where(1=1)
                                and f.InvoiceStatus not in ('PENDING') 
                            ;

                            --- Return:					
                            select 
                                STUFF(( 
		                            SELECT ',' + f.InvoiceCode
		                            FROM #tbl_Invoice_Invoice_ForSTUFF f --//[mylock]
		                            WHERE(1=1)
		                            FOR
		                            XML PATH('')
		                            ), 1, 1, ''
                                ) AS ListInvoiceCode
                            where(1=1)
                            ;

                            --- Clear For Debug:
                            drop table #tbl_Invoice_Invoice_ForSTUFF;
						");
                    DataTable dt_CheckInvalidInvoiceCode = _cf.db.ExecQuery(
                        strSql_CheckInvalidInvoiceCode
                        ).Tables[0];
                    /////
                    if (dt_CheckInvalidInvoiceCode.Rows.Count > 0)
                    {
                        string strListInvoiceCode = TUtils.CUtils.StdParam(dt_CheckInvalidInvoiceCode.Rows[0]["ListInvoiceCode"]);
                        /////
                        if (!string.IsNullOrEmpty(strListInvoiceCode))
                        {
                            if (bIsDelete)
                            {
                                goto MyCodeLabel_Done; // Thành công
                            }
                            else // if (!string.IsNullOrEmpty(strListInvoiceCode))
                            {
                                alParamsCoupleError.AddRange(new object[]{
                                    "Check.ErrConditionalRaise", "f.InvoiceStatus not in ('PENDING')"
                                    , "Check.strListInvoiceCode", strListInvoiceCode
                                    });
                                throw CmUtils.CMyException.Raise(
                                    TError.ErridnInventory.Invoice_Invoice_SaveX_StatusNotMatched
                                    , null
                                    , alParamsCoupleError.ToArray()
                                    );

                            }
                        }
                        /////
                    }
                    ////
                }
                #endregion

                #region ----// Đã cấp số hóa đơn thì không được Xóa:
                if (bIsDelete)
                {
                    string strSql_CheckInvalidInvoiceCode = CmUtils.StringUtils.Replace(@"
                            --- #tbl_Invoice_Invoice_ForSTUFF:
                            select distinct 
                                t.InvoiceCode
                            into #tbl_Invoice_Invoice_ForSTUFF
                            from #input_Invoice_Invoice t --//[mylock]
                                inner join Invoice_Invoice f --//[mylock]
                                    on t.InvoiceCode = f.InvoiceCode
                            where(1=1)
                                and f.InvoiceNo is not null 
                            ;

                            --- Return:					
                            select 
                                STUFF(( 
		                            SELECT ',' + f.InvoiceCode
		                            FROM #tbl_Invoice_Invoice_ForSTUFF f --//[mylock]
		                            WHERE(1=1)
		                            FOR
		                            XML PATH('')
		                            ), 1, 1, ''
                                ) AS ListInvoiceCode
                            where(1=1)
                            ;

                            --- Clear For Debug:
                            drop table #tbl_Invoice_Invoice_ForSTUFF;
						");
                    DataTable dt_CheckInvalidInvoiceCode = _cf.db.ExecQuery(
                        strSql_CheckInvalidInvoiceCode
                        ).Tables[0];
                    /////
                    if (dt_CheckInvalidInvoiceCode.Rows.Count > 0)
                    {
                        /////
                        string strListInvoiceCode = TUtils.CUtils.StdParam(dt_CheckInvalidInvoiceCode.Rows[0]["ListInvoiceCode"]);
                        ////
                        if (!string.IsNullOrEmpty(strListInvoiceCode))
                        {
                            alParamsCoupleError.AddRange(new object[]{
                                "Check.ErrConditionalRaise", "f.InvoiceNo is not null "
                                , "Check.strListInvoiceCode", strListInvoiceCode
                                });
                            throw CmUtils.CMyException.Raise(
                                TError.ErridnInventory.Invoice_Invoice_SaveX_ExistInvoiceNo
                                , null
                                , alParamsCoupleError.ToArray()
                                );

                        }
                    }
                    ////
                }
                #endregion

                #region ----// Nếu là hóa đơn điều chỉnh thì RefNo không được Null:
                if (!bIsDelete)
                {
                    string strSql_CheckInvalidInvoiceCode = CmUtils.StringUtils.Replace(@"
                            --- #tbl_Invoice_Invoice_ForSTUFF:
                            select distinct 
                                t.InvoiceCode
                            into #tbl_Invoice_Invoice_ForSTUFF
                            from #input_Invoice_Invoice t --//[mylock]
                            where(1=1)
                                and t.RefNo is null
                                and t.InvoiceAdjType in ('@strADJINCREASE', '@strADJDESCREASE')
                            ;

                            --- Return:					
                            select 
                                STUFF(( 
		                            SELECT ',' + f.InvoiceCode
		                            FROM #tbl_Invoice_Invoice_ForSTUFF f --//[mylock]
		                            WHERE(1=1)
		                            FOR
		                            XML PATH('')
		                            ), 1, 1, ''
                                ) AS ListInvoiceCode
                            where(1=1)
                            ;

                            --- Clear For Debug:
                            drop table #tbl_Invoice_Invoice_ForSTUFF;
						"
                        , "@strADJINCREASE", TConst.InvoiceAdjType.AdjInCrease
                        , "@strADJINCREASE", TConst.InvoiceAdjType.AdjDescrease
                        );
                    DataTable dt_CheckInvalidInvoiceCode = _cf.db.ExecQuery(
                        strSql_CheckInvalidInvoiceCode
                        ).Tables[0];
                    /////
                    if (dt_CheckInvalidInvoiceCode.Rows.Count > 0)
                    {
                        string strListInvoiceCode = TUtils.CUtils.StdParam(dt_CheckInvalidInvoiceCode.Rows[0]["ListInvoiceCode"]);
                        /////
                        if (!string.IsNullOrEmpty(strListInvoiceCode))
                        {
                            alParamsCoupleError.AddRange(new object[]{
                                "Check.ErrConditionalRaise", "and t.InvoiceAdjType in ('@strADJINCREASE', '@strADJDESCREASE') and t.RefNo is null"
                                , "Check.strListInvoiceCode", strListInvoiceCode
                                });
                            throw CmUtils.CMyException.Raise(
                                TError.ErridnInventory.Invoice_Invoice_SaveX_InvoiceAdjTypeIsNotNull
                                , null
                                , alParamsCoupleError.ToArray()
                                );
                        }
                        /////
                    }
                    ////
                }
                #endregion

                #region ----// Nếu là hóa đơn thay thế:
                {
                    #region ----// Nếu là hóa đơn thay thế thì RefNo không được Null:
                    {
                        string strSql_CheckInvalidInvoiceCode = CmUtils.StringUtils.Replace(@"
                                --- #tbl_Invoice_Invoice_ForSTUFF:
                                select distinct 
                                    t.RefNo
                                into #tbl_Invoice_Invoice_ForSTUFF
                                from #input_Invoice_Invoice t --//[mylock]
                                where(1=1)
                                    and t.SourceInvoiceCode in ('@strInvoiceReplace') 
                                    and (t.RefNo is null or LTRIM(RTRIM(t.RefNo)) = '')
                                ;

                                --- Return:					
                                select 
                                    STUFF(( 
		                                SELECT ',' + f.RefNo
		                                FROM #tbl_Invoice_Invoice_ForSTUFF f --//[mylock]
		                                WHERE(1=1)
		                                FOR
		                                XML PATH('')
		                                ), 1, 1, ''
                                    ) AS ListRefNo
                                where(1=1)
                                ;

                                --- Clear For Debug:
                                drop table #tbl_Invoice_Invoice_ForSTUFF;
						    "
                            , "@strInvoiceReplace", TConst.SourceInvoiceCode.InvoiceReplace
                            );
                        DataTable dt_CheckInvalidInvoiceCode = _cf.db.ExecQuery(
                            strSql_CheckInvalidInvoiceCode
                            ).Tables[0];
                        /////
                        if (dt_CheckInvalidInvoiceCode.Rows.Count > 0)
                        {
                            /////
                            string strListRefNo = TUtils.CUtils.StdParam(dt_CheckInvalidInvoiceCode.Rows[0]["ListRefNo"]);
                            ////
                            if (!string.IsNullOrEmpty(strListRefNo))
                            {
                                alParamsCoupleError.AddRange(new object[]{
                                    "Check.ErrConditionalRaise", "and t.SourceInvoiceCode in ('@strInvoiceReplace') and (t.RefNo is null or LTRIM(RTRIM(t.RefNo)) = '')"
                                    , "Check.strListRefNo", strListRefNo
                                    });
                                throw CmUtils.CMyException.Raise(
                                    TError.ErridnInventory.Invoice_Invoice_SaveX_Input_Invoice_InvalidRefNo
                                    , null
                                    , alParamsCoupleError.ToArray()
                                    );

                            }
                        }
                        ////
                    }
                    #endregion

                    #region ----// RefNo ở trạng thái Deleted:
                    {
                        string strSql_CheckInvalidInvoiceCode = CmUtils.StringUtils.Replace(@"
                                --- #tbl_Invoice_Invoice_ForSTUFF:
                                select distinct 
                                    t.RefNo
                                into #tbl_Invoice_Invoice_ForSTUFF
                                from #input_Invoice_Invoice t --//[mylock]
                                    left join Invoice_Invoice f --//[mylock]
                                        on t.RefNo = f.InvoiceCode
                                where(1=1)
                                    and t.SourceInvoiceCode in ('@strInvoiceReplace') 
                                    and (f.InvoiceStatus not in ('DELETED', 'ISSUED')) 
                                ;

                                --- Return:					
                                select 
                                    STUFF(( 
		                                SELECT ',' + f.RefNo
		                                FROM #tbl_Invoice_Invoice_ForSTUFF f --//[mylock]
		                                WHERE(1=1)
		                                FOR
		                                XML PATH('')
		                                ), 1, 1, ''
                                    ) AS ListRefNo
                                where(1=1)
                                ;

                                --- Clear For Debug:
                                drop table #tbl_Invoice_Invoice_ForSTUFF;
						    "
                            , "@strInvoiceReplace", TConst.SourceInvoiceCode.InvoiceReplace
                            );
                        DataTable dt_CheckInvalidInvoiceCode = _cf.db.ExecQuery(
                            strSql_CheckInvalidInvoiceCode
                            ).Tables[0];
                        /////
                        if (dt_CheckInvalidInvoiceCode.Rows.Count > 0)
                        {
                            /////
                            string strListRefNo = TUtils.CUtils.StdParam(dt_CheckInvalidInvoiceCode.Rows[0]["ListRefNo"]);
                            ////
                            if (!string.IsNullOrEmpty(strListRefNo))
                            {
                                alParamsCoupleError.AddRange(new object[]{
                                    "Check.ErrConditionalRaise", "and t.SourceInvoiceCode in ('@strInvoiceReplace')  and (f.InvoiceStatus not in ('DELETED', 'ISSUED')) "
                                    , "Check.strListRefNo", strListRefNo
                                    });
                                throw CmUtils.CMyException.Raise(
                                    TError.ErridnInventory.Invoice_Invoice_SaveX_Input_Invoice_InvalidInvoiceStatusRefNo
                                    , null
                                    , alParamsCoupleError.ToArray()
                                    );

                            }
                        }
                        ////
                    }
                    #endregion

                    #region ----// Không cho phép xóa hóa đơn thay thế:
                    if (bIsDelete)
                    {
                        string strSql_CheckInvalidInvoiceCode = CmUtils.StringUtils.Replace(@"
                                --- #tbl_Invoice_Invoice_ForSTUFF:
                                select distinct 
                                    t.RefNo
                                into #tbl_Invoice_Invoice_ForSTUFF
                                from #input_Invoice_Invoice t --//[mylock]
                                where(1=1)
                                ;

                                --- Return:					
                                select 
                                    STUFF(( 
		                                SELECT ',' + f.RefNo
		                                FROM #tbl_Invoice_Invoice_ForSTUFF f --//[mylock]
		                                WHERE(1=1)
		                                FOR
		                                XML PATH('')
		                                ), 1, 1, ''
                                    ) AS ListRefNo
                                where(1=1)
                                ;

                                --- Clear For Debug:
                                drop table #tbl_Invoice_Invoice_ForSTUFF;
						    "
                            , "@strInvoiceReplace", TConst.SourceInvoiceCode.InvoiceReplace
                            );
                        DataTable dt_CheckInvalidInvoiceCode = _cf.db.ExecQuery(
                            strSql_CheckInvalidInvoiceCode
                            ).Tables[0];
                        /////
                        if (dt_CheckInvalidInvoiceCode.Rows.Count > 0)
                        {
                            /////
                            string strListRefNo = TUtils.CUtils.StdParam(dt_CheckInvalidInvoiceCode.Rows[0]["ListRefNo"]);
                            ////
                            if (!string.IsNullOrEmpty(strListRefNo))
                            {
                                alParamsCoupleError.AddRange(new object[]{
                                    "Check.strListRefNo", strListRefNo
                                    });
                                throw CmUtils.CMyException.Raise(
                                    TError.ErridnInventory.Invoice_Invoice_SaveX_NotDelete
                                    , null
                                    , alParamsCoupleError.ToArray()
                                    );

                            }
                        }
                        ////
                    }
                    #endregion
                }
                #endregion

                #region ----// Check Mst_NNT:
                {
                    string strSql_CheckMstNNT = CmUtils.StringUtils.Replace(@"
                            --- #tbl_Invoice_Invoice_ForSTUFF:
                            select distinct 
	                            t.MST
                            into #tbl_Invoice_Invoice_ForSTUFF_Exist
                            from #input_Invoice_Invoice t --//[mylock]
	                            left join Mst_NNT f --//[mylock]
		                            on t.MST = f.MST
                            where(1=1)
	                            and f.MST is null
                            ;

                            --- #tbl_Invoice_Invoice_ForSTUFF_Active:
                            select distinct 
	                            t.MST
                            into #tbl_Invoice_Invoice_ForSTUFF_Active
                            from #input_Invoice_Invoice t --//[mylock]
	                            left join Mst_NNT f --//[mylock]
		                            on t.MST = f.MST
                            where(1=1)
	                            and f.FlagActive = '0'
                            ;

                            --- Return:					
                            select 
                                STUFF(( 
		                            SELECT ',' + f.MST
		                            FROM #tbl_Invoice_Invoice_ForSTUFF_Exist f --//[mylock]
		                            WHERE(1=1)
		                            FOR
		                            XML PATH('')
		                            ), 1, 1, ''
                                ) AS ListMST
                            where(1=1)
                            ;

                            --- Return:					
                            select 
                                STUFF(( 
		                            SELECT ',' + f.MST
		                            FROM #tbl_Invoice_Invoice_ForSTUFF_Active f --//[mylock]
		                            WHERE(1=1)
		                            FOR
		                            XML PATH('')
		                            ), 1, 1, ''
                                ) AS ListMST
                            where(1=1)
                            ;

                            --- Clear For Debug:
                            drop table #tbl_Invoice_Invoice_ForSTUFF_Exist;
                            drop table #tbl_Invoice_Invoice_ForSTUFF_Active;
						");
                    DataSet ds_CheckMstNNT = _cf.db.ExecQuery(
                        strSql_CheckMstNNT
                        );
                    ////
                    DataTable dt_Invoice_Invoice_ForSTUFF_Exist = ds_CheckMstNNT.Tables[0];
                    DataTable dt_Invoice_Invoice_ForSTUFF_Active = ds_CheckMstNNT.Tables[1];
                    /////
                    if (dt_Invoice_Invoice_ForSTUFF_Exist.Rows.Count > 0)
                    {
                        string strListMST = TUtils.CUtils.StdParam(dt_Invoice_Invoice_ForSTUFF_Exist.Rows[0]["ListMST"]);
                        /////
                        if (!string.IsNullOrEmpty(strListMST))
                        {
                            alParamsCoupleError.AddRange(new object[]{
                                "Check.ErrConditionalRaise", "Mst_NNT.MST is null"
                                , "Check.strListMST", strListMST
                                });
                            throw CmUtils.CMyException.Raise(
                                TError.ErridnInventory.Invoice_Invoice_SaveX_Invalid_MstNNT_NotFound
                                , null
                                , alParamsCoupleError.ToArray()
                                );
                        }
                        /////
                    }
                    ////
                    if (dt_Invoice_Invoice_ForSTUFF_Active.Rows.Count > 0)
                    {
                        string strListMST = TUtils.CUtils.StdParam(dt_Invoice_Invoice_ForSTUFF_Active.Rows[0]["ListMST"]);
                        /////
                        if (!string.IsNullOrEmpty(strListMST))
                        {
                            alParamsCoupleError.AddRange(new object[]{
                                "Check.ErrConditionalRaise", "Mst_NNT.FlagActive = '0'"
                                , "Check.strListMST", strListMST
                                });
                            throw CmUtils.CMyException.Raise(
                                TError.ErridnInventory.Invoice_Invoice_SaveX_Invalid_MstNNT_FlagActive
                                , null
                                , alParamsCoupleError.ToArray()
                                );
                        }
                        /////
                    }
                    ////
                }
                #endregion

                #region ----// Check Mst_PaymentMethods:
                {
                    string strSql_CheckPaymentMethods = CmUtils.StringUtils.Replace(@"
                            --- #tbl_Invoice_Invoice_ForSTUFF:
                            select distinct 
	                            t.PaymentMethodCode
                            into #tbl_Invoice_Invoice_ForSTUFF_Exist
                            from #input_Invoice_Invoice t --//[mylock]
	                            left join Mst_PaymentMethods f --//[mylock]
		                            on t.PaymentMethodCode = f.PaymentMethodCode
                            where(1=1)
	                            and f.PaymentMethodCode is null
                            ;

                            --- #tbl_Invoice_Invoice_ForSTUFF_Active:
                            select distinct 
	                            t.PaymentMethodCode
                            into #tbl_Invoice_Invoice_ForSTUFF_Active
                            from #input_Invoice_Invoice t --//[mylock]
	                            left join Mst_PaymentMethods f --//[mylock]
		                            on t.PaymentMethodCode = f.PaymentMethodCode
                            where(1=1)
	                            and f.FlagActive = '0'
                            ;

                            --- Return:					
                            select 
                                STUFF(( 
		                            SELECT ',' + f.PaymentMethodCode
		                            FROM #tbl_Invoice_Invoice_ForSTUFF_Exist f --//[mylock]
		                            WHERE(1=1)
		                            FOR
		                            XML PATH('')
		                            ), 1, 1, ''
                                ) AS ListPaymentMethodCode
                            where(1=1)
                            ;

                            --- Return:					
                            select 
                                STUFF(( 
		                            SELECT ',' + f.PaymentMethodCode
		                            FROM #tbl_Invoice_Invoice_ForSTUFF_Active f --//[mylock]
		                            WHERE(1=1)
		                            FOR
		                            XML PATH('')
		                            ), 1, 1, ''
                                ) AS ListPaymentMethodCode
                            where(1=1)
                            ;

                            --- Clear For Debug:
                            drop table #tbl_Invoice_Invoice_ForSTUFF_Exist;
                            drop table #tbl_Invoice_Invoice_ForSTUFF_Active;
						");
                    DataSet ds_CheckMst_PaymentMethods = _cf.db.ExecQuery(
                        strSql_CheckPaymentMethods
                        );
                    ////
                    DataTable dt_Invoice_Invoice_ForSTUFF_Exist = ds_CheckMst_PaymentMethods.Tables[0];
                    DataTable dt_Invoice_Invoice_ForSTUFF_Active = ds_CheckMst_PaymentMethods.Tables[1];
                    /////
                    if (dt_Invoice_Invoice_ForSTUFF_Exist.Rows.Count > 0)
                    {
                        string strListPaymentMethodCode = TUtils.CUtils.StdParam(dt_Invoice_Invoice_ForSTUFF_Exist.Rows[0]["ListPaymentMethodCode"]);
                        /////
                        if (!string.IsNullOrEmpty(strListPaymentMethodCode))
                        {
                            alParamsCoupleError.AddRange(new object[]{
                                "Check.ErrConditionalRaise", "Mst_PaymentMethods.PaymentMethodCode is null"
                                , "Check.strListPaymentMethodCode", strListPaymentMethodCode
                                });
                            throw CmUtils.CMyException.Raise(
                                TError.ErridnInventory.Invoice_Invoice_SaveX_Invalid_PaymentMethods_NotFound
                                , null
                                , alParamsCoupleError.ToArray()
                                );
                        }
                        /////
                    }
                    ////
                    if (dt_Invoice_Invoice_ForSTUFF_Active.Rows.Count > 0)
                    {
                        string strListPaymentMethodCode = TUtils.CUtils.StdParam(dt_Invoice_Invoice_ForSTUFF_Active.Rows[0]["ListPaymentMethodCode"]);
                        /////
                        if (!string.IsNullOrEmpty(strListPaymentMethodCode))
                        {
                            alParamsCoupleError.AddRange(new object[]{
                                "Check.ErrConditionalRaise", "Mst_PaymentMethods.FlagActive = '0'"
                                , "Check.strListPaymentMethodCode", strListPaymentMethodCode
                                });
                            throw CmUtils.CMyException.Raise(
                                TError.ErridnInventory.Invoice_Invoice_SaveX_Invalid_PaymentMethods_FlagActive
                                , null
                                , alParamsCoupleError.ToArray()
                                );
                        }
                        /////
                    }
                    ////
                }
                #endregion

                #region ----// Check Mst_InvoiceType2:
                {
                    string strSql_CheckInvoiceType2 = CmUtils.StringUtils.Replace(@"
                            --- #tbl_Invoice_Invoice_ForSTUFF:
                            select distinct 
	                            t.InvoiceType2
                            into #tbl_Invoice_Invoice_ForSTUFF_Exist
                            from #input_Invoice_Invoice t --//[mylock]
	                            left join Mst_InvoiceType2 f --//[mylock]
		                            on t.InvoiceType2 = f.InvoiceType2
                            where(1=1)
	                            and f.InvoiceType2 is null
                            ;

                            --- #tbl_Invoice_Invoice_ForSTUFF_Active:
                            select distinct 
	                            t.InvoiceType2
                            into #tbl_Invoice_Invoice_ForSTUFF_Active
                            from #input_Invoice_Invoice t --//[mylock]
	                            left join Mst_InvoiceType2 f --//[mylock]
		                            on t.InvoiceType2 = f.InvoiceType2
                            where(1=1)
	                            and f.FlagActive = '0'
                            ;

                            --- Return:					
                            select 
                                STUFF(( 
		                            SELECT ',' + f.InvoiceType2
		                            FROM #tbl_Invoice_Invoice_ForSTUFF_Exist f --//[mylock]
		                            WHERE(1=1)
		                            FOR
		                            XML PATH('')
		                            ), 1, 1, ''
                                ) AS ListInvoiceType2
                            where(1=1)
                            ;

                            --- Return:					
                            select 
                                STUFF(( 
		                            SELECT ',' + f.InvoiceType2
		                            FROM #tbl_Invoice_Invoice_ForSTUFF_Active f --//[mylock]
		                            WHERE(1=1)
		                            FOR
		                            XML PATH('')
		                            ), 1, 1, ''
                                ) AS ListInvoiceType2
                            where(1=1)
                            ;

                            --- Clear For Debug:
                            drop table #tbl_Invoice_Invoice_ForSTUFF_Exist;
                            drop table #tbl_Invoice_Invoice_ForSTUFF_Active;
						");
                    DataSet ds_CheckMst_InvoiceType2 = _cf.db.ExecQuery(
                        strSql_CheckInvoiceType2
                        );
                    ////
                    DataTable dt_Invoice_Invoice_ForSTUFF_Exist = ds_CheckMst_InvoiceType2.Tables[0];
                    DataTable dt_Invoice_Invoice_ForSTUFF_Active = ds_CheckMst_InvoiceType2.Tables[1];
                    /////
                    if (dt_Invoice_Invoice_ForSTUFF_Exist.Rows.Count > 0)
                    {
                        string strListInvoiceType2 = TUtils.CUtils.StdParam(dt_Invoice_Invoice_ForSTUFF_Exist.Rows[0]["ListInvoiceType2"]);
                        /////
                        if (!string.IsNullOrEmpty(strListInvoiceType2))
                        {
                            alParamsCoupleError.AddRange(new object[]{
                                "Check.ErrConditionalRaise", "Mst_InvoiceType2.InvoiceType2 is null"
                                , "Check.strListInvoiceType2", strListInvoiceType2
                                });
                            throw CmUtils.CMyException.Raise(
                                TError.ErridnInventory.Invoice_Invoice_SaveX_Invalid_InvoiceType2_NotFound
                                , null
                                , alParamsCoupleError.ToArray()
                                );
                        }
                        /////
                    }
                    ////
                    if (dt_Invoice_Invoice_ForSTUFF_Active.Rows.Count > 0)
                    {
                        string strListInvoiceType2 = TUtils.CUtils.StdParam(dt_Invoice_Invoice_ForSTUFF_Active.Rows[0]["ListInvoiceType2"]);
                        /////
                        if (!string.IsNullOrEmpty(strListInvoiceType2))
                        {
                            alParamsCoupleError.AddRange(new object[]{
                                "Check.ErrConditionalRaise", "Mst_InvoiceType2.FlagActive = '0'"
                                , "Check.strListInvoiceType2", strListInvoiceType2
                                });
                            throw CmUtils.CMyException.Raise(
                                TError.ErridnInventory.Invoice_Invoice_SaveX_Invalid_InvoiceType2_FlagActive
                                , null
                                , alParamsCoupleError.ToArray()
                                );
                        }
                        /////
                    }
                    ////
                }
                #endregion

                #region ----// Check Mst_SourceInvoice:
                {
                    string strSql_CheckMst_SourceInvoice = CmUtils.StringUtils.Replace(@"
                            --- #tbl_Invoice_Invoice_ForSTUFF:
                            select distinct 
	                            t.SourceInvoiceCode
                            into #tbl_Invoice_Invoice_ForSTUFF_Exist
                            from #input_Invoice_Invoice t --//[mylock]
	                            left join Mst_SourceInvoice f --//[mylock]
		                            on t.SourceInvoiceCode = f.SourceInvoiceCode
                            where(1=1)
	                            and f.SourceInvoiceCode is null
                            ;

                            --- #tbl_Invoice_Invoice_ForSTUFF_Active:
                            select distinct 
	                            t.SourceInvoiceCode
                            into #tbl_Invoice_Invoice_ForSTUFF_Active
                            from #input_Invoice_Invoice t --//[mylock]
	                            left join Mst_SourceInvoice f --//[mylock]
		                            on t.SourceInvoiceCode = f.SourceInvoiceCode
                            where(1=1)
	                            and f.FlagActive = '0'
                            ;

                            --- Return:					
                            select 
                                STUFF(( 
		                            SELECT ',' + f.SourceInvoiceCode
		                            FROM #tbl_Invoice_Invoice_ForSTUFF_Exist f --//[mylock]
		                            WHERE(1=1)
		                            FOR
		                            XML PATH('')
		                            ), 1, 1, ''
                                ) AS ListSourceInvoiceCode
                            where(1=1)
                            ;

                            --- Return:					
                            select 
                                STUFF(( 
		                            SELECT ',' + f.SourceInvoiceCode
		                            FROM #tbl_Invoice_Invoice_ForSTUFF_Active f --//[mylock]
		                            WHERE(1=1)
		                            FOR
		                            XML PATH('')
		                            ), 1, 1, ''
                                ) AS ListSourceInvoiceCode
                            where(1=1)
                            ;

                            --- Clear For Debug:
                            drop table #tbl_Invoice_Invoice_ForSTUFF_Exist;
                            drop table #tbl_Invoice_Invoice_ForSTUFF_Active;
						");
                    DataSet ds_CheckMst_PaymentMethods = _cf.db.ExecQuery(
                        strSql_CheckMst_SourceInvoice
                        );
                    ////
                    DataTable dt_Invoice_Invoice_ForSTUFF_Exist = ds_CheckMst_PaymentMethods.Tables[0];
                    DataTable dt_Invoice_Invoice_ForSTUFF_Active = ds_CheckMst_PaymentMethods.Tables[1];
                    /////
                    if (dt_Invoice_Invoice_ForSTUFF_Exist.Rows.Count > 0)
                    {
                        string strListSourceInvoiceCode = TUtils.CUtils.StdParam(dt_Invoice_Invoice_ForSTUFF_Exist.Rows[0]["ListSourceInvoiceCode"]);
                        /////
                        if (!string.IsNullOrEmpty(strListSourceInvoiceCode))
                        {
                            alParamsCoupleError.AddRange(new object[]{
                                "Check.ErrConditionalRaise", "Mst_SourceInvoice.SourceInvoiceCode is null"
                                , "Check.strListSourceInvoiceCode", strListSourceInvoiceCode
                                });
                            throw CmUtils.CMyException.Raise(
                                TError.ErridnInventory.Invoice_Invoice_SaveX_Invalid_SourceInvoice_NotFound
                                , null
                                , alParamsCoupleError.ToArray()
                                );
                        }
                        /////
                    }
                    ////
                    if (dt_Invoice_Invoice_ForSTUFF_Active.Rows.Count > 0)
                    {
                        string strListSourceInvoiceCode = TUtils.CUtils.StdParam(dt_Invoice_Invoice_ForSTUFF_Active.Rows[0]["ListSourceInvoiceCode"]);
                        /////
                        if (!string.IsNullOrEmpty(strListSourceInvoiceCode))
                        {
                            alParamsCoupleError.AddRange(new object[]{
                                "Check.ErrConditionalRaise", "Mst_SourceInvoice.FlagActive = '0'"
                                , "Check.strListPaymentMethodCode", strListSourceInvoiceCode
                                });
                            throw CmUtils.CMyException.Raise(
                                TError.ErridnInventory.Invoice_Invoice_SaveX_Invalid_SourceInvoice_FlagActive
                                , null
                                , alParamsCoupleError.ToArray()
                                );
                        }
                        /////
                    }
                    ////
                }
                #endregion

                #region ----// Check Invoice_TempInvoice:
                {
                    string strSql_CheckInvoice_TempInvoice = CmUtils.StringUtils.Replace(@"
                            --- #tbl_Invoice_Invoice_ForSTUFF_Exist:
                            select distinct 
	                            t.TInvoiceCode
                            into #tbl_Invoice_Invoice_ForSTUFF_Exist
                            from #input_Invoice_Invoice t --//[mylock]
	                            left join Invoice_TempInvoice f --//[mylock]
		                            on t.TInvoiceCode = f.TInvoiceCode
                            where(1=1)
	                            and f.TInvoiceCode is null
                            ;

                            --- #tbl_Invoice_Invoice_ForSTUFF_Active:
                            select distinct 
	                            t.TInvoiceCode
                            into #tbl_Invoice_Invoice_ForSTUFF_Active
                            from #input_Invoice_Invoice t --//[mylock]
	                            left join Invoice_TempInvoice f --//[mylock]
		                            on t.TInvoiceCode = f.TInvoiceCode
                            where(1=1)
	                            and f.TInvoiceStatus not in ('ISSUED')
                            ;

                            --- Return:					
                            select 
                                STUFF(( 
		                            SELECT ',' + f.TInvoiceCode
		                            FROM #tbl_Invoice_Invoice_ForSTUFF_Exist f --//[mylock]
		                            WHERE(1=1)
		                            FOR
		                            XML PATH('')
		                            ), 1, 1, ''
                                ) AS ListTInvoiceCode
                            where(1=1)
                            ;

                            --- Return:					
                            select 
                                STUFF(( 
		                            SELECT ',' + f.TInvoiceCode
		                            FROM #tbl_Invoice_Invoice_ForSTUFF_Active f --//[mylock]
		                            WHERE(1=1)
		                            FOR
		                            XML PATH('')
		                            ), 1, 1, ''
                                ) AS ListTInvoiceCode
                            where(1=1)
                            ;

                            --- Clear For Debug:
                            drop table #tbl_Invoice_Invoice_ForSTUFF_Exist;
                            drop table #tbl_Invoice_Invoice_ForSTUFF_Active;
						");
                    DataSet ds_CheckInvoice_TempInvoice = _cf.db.ExecQuery(
                        strSql_CheckInvoice_TempInvoice
                        );
                    ////
                    DataTable dt_Invoice_Invoice_ForSTUFF_Exist = ds_CheckInvoice_TempInvoice.Tables[0];
                    DataTable dt_Invoice_Invoice_ForSTUFF_Active = ds_CheckInvoice_TempInvoice.Tables[1];
                    /////
                    if (dt_Invoice_Invoice_ForSTUFF_Exist.Rows.Count > 0)
                    {
                        string strListTInvoiceCode = TUtils.CUtils.StdParam(dt_Invoice_Invoice_ForSTUFF_Exist.Rows[0]["ListTInvoiceCode"]);
                        /////
                        if (!string.IsNullOrEmpty(strListTInvoiceCode))
                        {
                            alParamsCoupleError.AddRange(new object[]{
                                "Check.ErrConditionalRaise", "Invoice_TempInvoice.TInvoiceCode is null"
                                , "Check.strListTInvoiceCode", strListTInvoiceCode
                                });
                            throw CmUtils.CMyException.Raise(
                                TError.ErridnInventory.Invoice_Invoice_SaveX_Invalid_TempInvoice_NotFound
                                , null
                                , alParamsCoupleError.ToArray()
                                );
                        }
                        /////
                    }
                    ////
                    if (dt_Invoice_Invoice_ForSTUFF_Active.Rows.Count > 0)
                    {
                        string strListTInvoiceCode = TUtils.CUtils.StdParam(dt_Invoice_Invoice_ForSTUFF_Active.Rows[0]["ListTInvoiceCode"]);
                        /////
                        if (!string.IsNullOrEmpty(strListTInvoiceCode))
                        {
                            alParamsCoupleError.AddRange(new object[]{
                                "Check.ErrConditionalRaise", "Invoice_TempInvoice.TInvoiceStatus not in ('ISSUED')"
                                , "Check.strListTInvoiceCode", strListTInvoiceCode
                                });
                            throw CmUtils.CMyException.Raise(
                                TError.ErridnInventory.Invoice_Invoice_SaveX_Invalid_TempInvoice_StatusNotMatch
                                , null
                                , alParamsCoupleError.ToArray()
                                );
                        }
                        /////
                    }
                    ////
                }
                #endregion

                #region ----// Check SL hóa đơn sử dụng:
                {
                    string strSql_CheckInvoice_TempInvoice = CmUtils.StringUtils.Replace(@"
                            --- #tbl_Invoice_TempInvoice:
                            select distinct 
	                            t.TInvoiceCode
                            into #tbl_Invoice_TempInvoice
                            from #input_Invoice_Invoice t --//[mylock]
	                            inner join Invoice_TempInvoice f --//[mylock]
		                            on t.TInvoiceCode = t.TInvoiceCode
                            where(1=1)
                            ;

							---- Return:
							select 
								t.TInvoiceCode
								, f.EndInvoiceNo
								, f.StartInvoiceNo
								, f.QtyUsed
								, (f.EndInvoiceNo - f.StartInvoiceNo + 1 - f.QtyUsed) QtyRemain
							from #tbl_Invoice_TempInvoice t --//[mylock]
								inner join Invoice_TempInvoice f --//[mylock]
									on t.TInvoiceCode = f.TInvoiceCode
							where(1=1)
								and (f.EndInvoiceNo - f.StartInvoiceNo + 1 - f.QtyUsed) < 1
							;

                            --- Clear For Debug:
                            drop table #tbl_Invoice_TempInvoice;
						");
                    DataSet ds_Invoice_TempInvoice = _cf.db.ExecQuery(
                        strSql_CheckInvoice_TempInvoice
                        );
                    ////
                    DataTable dt_Invoice_TempInvoice = ds_Invoice_TempInvoice.Tables[0];
                    /////
                    if (dt_Invoice_TempInvoice.Rows.Count > 0)
                    {
                        alParamsCoupleError.AddRange(new object[]{
                            "Check.strTInvoiceCode", dt_Invoice_TempInvoice.Rows[0]["TInvoiceCode"]
                            , "Check.DB.StartInvoiceNo", dt_Invoice_TempInvoice.Rows[0]["StartInvoiceNo"]
                            , "Check.DB.EndInvoiceNo", dt_Invoice_TempInvoice.Rows[0]["EndInvoiceNo"]
                            , "Check.DB.QtyUsed",  dt_Invoice_TempInvoice.Rows[0]["QtyUsed"]
                            , "Check.ErrConditionRaise", "((nEndInvoiceNo - nStartInvoiceNo - nQtyUsed)< 1)"
                            });
                        throw CmUtils.CMyException.Raise(
                            TError.ErridnInventory.Invoice_Invoice_SaveX_Invalid_SourceInvoice_NotFound
                            , null
                            , alParamsCoupleError.ToArray()
                            );
                    }
                    ////
                }
                #endregion
            }
            #endregion

            #region // Build Invoice_Invoice:
            {
                string strSql_Build = CmUtils.StringUtils.Replace(@"
                        ----- #tbl_Invoice_Invoice_Build:
                        select 
	                        t.InvoiceCode
	                        , t.MST
	                        , t.NetworkID
	                        , t.RefNo
	                        , t.FormNo
	                        , t.Sign
	                        , t.SourceInvoiceCode
	                        , t.InvoiceAdjType
	                        , t.InvoiceType2
	                        , t.PaymentMethodCode
	                        , t.CustomerNNTCode
	                        , t.CustomerNNTName
	                        , t.CustomerNNTAddress
	                        , t.CustomerNNTPhone
	                        , t.CustomerNNTBankName
	                        , t.CustomerNNTEmail
	                        , t.CustomerNNTAccNo
	                        , t.CustomerNNTBuyerName
	                        , t.CustomerMST
	                        , t.TInvoiceCode
	                        , t.InvoiceNo
	                        , t.InvoiceDateUTC
	                        , t.EmailSend
	                        , t.InvoiceFileSpec
	                        , t.InvoiceFilePath
	                        , null InvoicePDFFilePath
	                        , t.TotalValInvoice
	                        , t.TotalValVAT
	                        , t.TotalValPmt
	                        , IsNull(f.CreateDTimeUTC, '@strLogLUDTimeUTC') CreateDTimeUTC --t.CreateDTimeUTC
	                        , IsNull(f.CreateBy, '@strLogLUBy') CreateBy --t.CreateBy
	                        , t.InvoiceNoDTimeUTC
	                        , t.InvoiceNoBy
	                        , t.SignDTimeUTC
	                        , t.SignBy
	                        , t.ApprDTimeUTC
	                        , t.ApprBy
	                        , t.CancelDTimeUTC
	                        , t.CancelBy
	                        , t.SendEmailDTimeUTC
	                        , t.SendEmailBy
	                        , t.IssuedDTimeUTC
	                        , t.IssuedBy
                            , null AttachedDelFilePath
                            , null DeleteReason
                            , t.DeleteDTimeUTC
	                        , t.DeleteBy
	                        , t.ChangeDTimeUTC
	                        , t.ChangeBy
	                        , t.InvoiceVerifyCQTCode
	                        , t.CurrencyCode
	                        , t.CurrencyRate
	                        , t.ValGoodsNotTaxable
	                        , t.ValGoodsNotChargeTax
	                        , t.ValGoodsVAT5
	                        , t.ValVAT5
	                        , t.ValGoodsVAT10
	                        , t.ValVAT10
	                        , t.NNTFullName
	                        , t.NNTFullAdress
	                        , t.NNTPhone
	                        , t.NNTFax
	                        , t.NNTEmail
	                        , t.NNTWebsite
	                        , t.NNTAccNo
	                        , t.NNTBankName
	                        , '@strLogLUDTimeUTC' LUDTimeUTC --t.LUDTimeUTC
	                        , '@strLogLUBy' LUBy --t.LUBy
	                        , t.Remark
	                        , t.InvoiceCF1
	                        , t.InvoiceCF2
	                        , t.InvoiceCF3
	                        , t.InvoiceCF4
	                        , t.InvoiceCF5
	                        , t.InvoiceCF6
	                        , t.InvoiceCF7
	                        , t.InvoiceCF8
	                        , t.InvoiceCF9
	                        , t.InvoiceCF10
	                        , '1' FlagChange --t.FlagChange
	                        , null FlagPushOutSite -- t.FlagPushOutSite
	                        , null FlagDeleteOutSite -- t.FlagDeleteOutSite
	                        , '@strInvoiceStatus' InvoiceStatus --t.InvoiceStatus
	                        , '@strLogLUDTimeUTC' LogLUDTimeUTC --t.LogLUDTimeUTC
	                        , '@strLogLUBy' LogLUBy --t.LogLUBy
                        into #tbl_Invoice_Invoice_Build
                        from #input_Invoice_Invoice t --//[mylock]
                            left join Invoice_Invoice f --//[mylock]
                                on t.InvoiceCode = f.InvoiceCode
                        where(1=1)
                        ;

                        select null tbl_Invoice_Invoice_Build, t.* from #tbl_Invoice_Invoice_Build t --//[mylock];
                    ;"
                    , "@strInvoiceStatus", TConst.InvoiceStatus.Pending
                    , "@strLogLUDTimeUTC", dtimeSys.ToString("yyyy-MM-dd hh:mm:ss")
                    , "@strLogLUBy", strWAUserCode
                    );
                DataTable dt_Build = _cf.db.ExecQuery(
                    strSql_Build
                    ).Tables[0];
                /////
            }
            #endregion

            #region //// Refine and Check Input Invoice_InvoiceDtl:
            ////
            DataTable dtInput_Invoice_InvoiceDtl = null;
            if (!bIsDelete)
            {
                ////
                string strTableCheck = "Invoice_InvoiceDtl";
                ////
                if (!dsData.Tables.Contains(strTableCheck))
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.TableName", strTableCheck
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Invoice_Invoice_SaveX_Input_InvoiceDtlTblNotFound
                        , null
                        , alParamsCoupleError.ToArray()
                        );
                }
                dtInput_Invoice_InvoiceDtl = dsData.Tables[strTableCheck];
                ////

                if (dtInput_Invoice_InvoiceDtl.Rows.Count < 1)
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.TableName", strTableCheck
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Invoice_Invoice_SaveX_Input_InvoiceDtlTblInvalid
                        , null
                        , alParamsCoupleError.ToArray()
                        );
                }
                ////
                TUtils.CUtils.StdDataInTable(
                    dtInput_Invoice_InvoiceDtl // dtData
                    , "StdParam", "InvoiceCode" // arrstrCouple
                    , "StdParam", "Idx" // arrstrCouple
                    , "StdParam", "NetworkID" // arrstrCouple
                    , "StdParam", "SpecCode" // arrstrCouple
                    , "", "SpecName" // arrstrCouple
                    , "StdParam", "ProductID" // arrstrCouple
                    , "", "ProductName" // arrstrCouple
                    , "StdParam", "VATRateCode" // arrstrCouple
                    , "float", "VATRate" // arrstrCouple
                    , "StdParam", "UnitCode" // arrstrCouple
                    , "", "UnitName" // arrstrCouple
                    , "StdParam", "UnitPrice" // arrstrCouple
                    , "float", "Qty" // arrstrCouple
                    , "float", "ValInvoice" // arrstrCouple
                    , "float", "ValTax" // arrstrCouple
                    , "StdParam", "InventoryCode" // arrstrCouple
                    , "float", "DiscountRate" // arrstrCouple
                    , "float", "ValDiscount" // arrstrCouple
                    , "", "Remark" // arrstrCouple
                    , "", "InvoiceDCF1" // arrstrCouple
                    , "", "InvoiceDCF2" // arrstrCouple
                    , "", "InvoiceDCF3" // arrstrCouple
                    , "", "InvoiceDCF4" // arrstrCouple
                    , "", "InvoiceDCF5" // arrstrCouple
                    );
                ////
                //TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_InvoiceDtl, "InvoiceCode", typeof(object));
                //TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_InvoiceDtl, "NetworkID", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_InvoiceDtl, "InvoiceDtlStatus", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_InvoiceDtl, "LogLUDTimeUTC", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_InvoiceDtl, "LogLUBy", typeof(object));
                ////////
            }
            #endregion

            #region //// SaveTemp Invoice_InvoiceDtl For Check:
            if (!bIsDelete)
            {
                // Upload:
                TUtils.CUtils.MyBuildDBDT_Common(
                    _cf.db // db
                    , "#input_Invoice_InvoiceDtl" // strTableName
                    , new object[] {
                            "InvoiceCode", TConst.BizMix.Default_DBColType
                            , "Idx", TConst.BizMix.Default_DBColType
                            , "NetworkID", TConst.BizMix.Default_DBColType
                            , "SpecCode", TConst.BizMix.Default_DBColType
                            , "SpecName", TConst.BizMix.Default_DBColType
                            , "ProductID", TConst.BizMix.Default_DBColType
                            , "ProductName", TConst.BizMix.Default_DBColType
                            , "VATRateCode", TConst.BizMix.Default_DBColType
                            , "VATRate", "float"
                            , "UnitCode", TConst.BizMix.Default_DBColType
                            , "UnitName", TConst.BizMix.Default_DBColType
                            , "UnitPrice", "float"
                            , "Qty", "float"
                            , "ValInvoice", "float"
                            , "ValTax", "float"
                            , "InventoryCode", TConst.BizMix.Default_DBColType
                            , "DiscountRate", "float"
                            , "ValDiscount", "float"
                            , "InvoiceDtlStatus", TConst.BizMix.Default_DBColType
                            , "Remark", TConst.BizMix.Default_DBColType
                            , "InvoiceDCF1", TConst.BizMix.Default_DBColType
                            , "InvoiceDCF2", TConst.BizMix.Default_DBColType
                            , "InvoiceDCF3", TConst.BizMix.Default_DBColType
                            , "InvoiceDCF4", TConst.BizMix.Default_DBColType
                            , "InvoiceDCF5", TConst.BizMix.Default_DBColType
                            , "LogLUDTimeUTC", TConst.BizMix.Default_DBColType
                            , "LogLUBy", TConst.BizMix.Default_DBColType
                        } // arrSingleStructure
                    , dtInput_Invoice_InvoiceDtl // dtData
                );
            }
            #endregion

            #region // Refine and Check Input Invoice_InvoiceDtl:
            if (!bIsDelete)
            {
                #region ----// Check ProductID + SpecCode là duy nhất:
                {
                    string strSql_CheckProducID = CmUtils.StringUtils.Replace(@"                            
                            ---- #tbl_Invoice_InvoiceDtl_TotalProductID:
                            select 
	                            t.InvoiceCode
	                            , t.SpecCode
	                            , t.ProductID
	                            , count(0) QtyProductID
                            into #tbl_Invoice_InvoiceDtl_TotalProductID
                            from #input_Invoice_InvoiceDtl t --//[mylock]
                            where(1=1)
	                            and t.ProductID is not null
                            group by 
	                            t.InvoiceCode
	                            , t.SpecCode
	                            , t.ProductID
                            ;

                            ---- Return:
                            select top 1
	                            t.InvoiceCode
	                            , t.ProductID
	                            , t.SpecCode
	                            , t.QtyProductID
                            from #tbl_Invoice_InvoiceDtl_TotalProductID t --//[mylock]
                            where(1=1)
	                            and t.QtyProductID > 1
                            ;

                            -- Clear For Debug:
                            drop table #tbl_Invoice_InvoiceDtl_TotalProductID;

						");
                    DataTable dt_CheckProductID = _cf.db.ExecQuery(
                        strSql_CheckProducID
                        ).Tables[0];
                    /////
                    if (dt_CheckProductID.Rows.Count > 0)
                    {
                        alParamsCoupleError.AddRange(new object[]{
                            "Check.ErrConditionalRaise", "t.QtyProductID > 1"
                            //, "Check.NumberRows", dt_CheckProductID.Rows.Count
                            , "Check.InvoiceCode", dt_CheckProductID.Rows[0]["InvoiceCode"]
                            , "Check.SpecCode", dt_CheckProductID.Rows[0]["SpecCode"]
                            , "Check.ProductID", dt_CheckProductID.Rows[0]["ProductID"]
                            , "Check.QtyProductID", dt_CheckProductID.Rows[0]["QtyProductID"]
                            });
                        throw CmUtils.CMyException.Raise(
                            TError.ErridnInventory.Invoice_Invoice_SaveX_Input_InvoiceDtl_ProductIDDuplicate
                            , null
                            , alParamsCoupleError.ToArray()
                            );
                    }
                    ////
                }
                #endregion

                #region ----// Check SpecCode là duy nhất:
                {
                    string strSql_CheckSpec = CmUtils.StringUtils.Replace(@"                         
                            ---- #tbl_Invoice_InvoiceDtl_TotalSpec:
                            select 
	                            t.InvoiceCode
	                            , t.SpecCode
	                            , count(0) QtySpecCode
                            into #tbl_Invoice_InvoiceDtl_TotalSpec
                            from #input_Invoice_InvoiceDtl t --//[mylock]
                            where(1=1)
	                            and t.ProductID is null
								and t.SpecCode is not null
                            group by 
	                            t.InvoiceCode
	                            , t.SpecCode
                            ;

                            ---- Return:
                            select top 1
	                            t.InvoiceCode
	                            , t.SpecCode
	                            , t.QtySpecCode
                            from #tbl_Invoice_InvoiceDtl_TotalSpec t --//[mylock]
                            where(1=1)
	                            and t.QtySpecCode > 1
                            ;

                            -- Clear For Debug:
                            drop table #tbl_Invoice_InvoiceDtl_TotalSpec;

						");
                    DataTable dt_CheckSpecCode = _cf.db.ExecQuery(
                        strSql_CheckSpec
                        ).Tables[0];
                    /////
                    if (dt_CheckSpecCode.Rows.Count > 0)
                    {
                        alParamsCoupleError.AddRange(new object[]{
                            "Check.ErrConditionalRaise", "t.QtyProductID > 1"
                            //, "Check.NumberRows", dt_CheckProductID.Rows.Count
                            , "Check.InvoiceCode", dt_CheckSpecCode.Rows[0]["InvoiceCode"]
                            , "Check.SpecCode", dt_CheckSpecCode.Rows[0]["SpecCode"]
                            , "Check.QtySpecCode", dt_CheckSpecCode.Rows[0]["QtySpecCode"]
                            });
                        throw CmUtils.CMyException.Raise(
                            TError.ErridnInventory.Invoice_Invoice_SaveX_Input_InvoiceDtl_SpecCodeDuplicate
                            , null
                            , alParamsCoupleError.ToArray()
                            );
                    }
                    ////
                }
                #endregion

            }
            #endregion

            #region // Build Invoice_InvoiceDtl:
            if (!bIsDelete)
            {
                string strSql_Build = CmUtils.StringUtils.Replace(@"
                        ----- #tbl_Invoice_InvoiceDtl_Build:
                        select 
	                        t.InvoiceCode
							, Row_Number() over( partition by t.InvoiceCode order by t.Idx asc) Idx 
							--, Row_Number() over (order by t.Idx desc) Idx 
	                        --, t.Idx
	                        , t.NetworkID
	                        , t.SpecCode
	                        , t.SpecName
	                        , t.ProductID
	                        , t.ProductName
	                        , t.VATRateCode
	                        , t.VATRate
	                        , t.UnitCode
	                        , t.UnitName
	                        , t.UnitPrice
	                        , t.Qty
	                        , t.ValInvoice
	                        , t.ValTax
	                        , t.InventoryCode
	                        , t.DiscountRate
	                        , t.ValDiscount
	                        , '@strInvoiceStatus' InvoiceDtlStatus --t.InvoiceDtlStatus
	                        , t.Remark
	                        , t.InvoiceDCF1
	                        , t.InvoiceDCF2
	                        , t.InvoiceDCF3
	                        , t.InvoiceDCF4
	                        , t.InvoiceDCF5
	                        , '@strLogLUDTimeUTC' LogLUDTimeUTC --t.LogLUDTimeUTC
	                        , '@strLogLUBy' LogLUBy --t.LogLUBy
                        into #tbl_Invoice_InvoiceDtl_Build
                        from #input_Invoice_InvoiceDtl t --//[mylock]

                        select null tbl_Invoice_InvoiceDtl_Build, t.* from #tbl_Invoice_InvoiceDtl_Build t --//[mylock];
                    ;"
                    , "@strInvoiceStatus", TConst.InvoiceStatus.Pending
                    , "@strLogLUDTimeUTC", dtimeSys.ToString("yyyy-MM-dd")
                    , "@strLogLUBy", strWAUserCode
                    );
                DataTable dt_Build = _cf.db.ExecQuery(
                    strSql_Build
                    ).Tables[0];
                /////
            }
            #endregion

            #region // SaveDB:
            {
                //// Clear All:
                {
                    string strSqlDelete = CmUtils.StringUtils.Replace(@"
                            ---- #tbl_Invoice_InvoiceDtl:
                            select 
                                t.InvoiceCode
                                , t.Idx
                            into #tbl_Invoice_InvoiceDtl
                            from Invoice_InvoiceDtl t --//[mylock]
	                            inner join #input_Invoice_Invoice f --//[mylock]
		                            on t.InvoiceCode = f.InvoiceCode
                            where (1=1)
                            ;

                            --- Delete:
                            ---- Invoice_InvoiceDtl:
                            delete t 
                            from Invoice_InvoiceDtl t --//[mylock]
	                            inner join #tbl_Invoice_InvoiceDtl f --//[mylock]
		                            on t.InvoiceCode = f.InvoiceCode
		                                and t.Idx = f.Idx
                            where (1=1)
                            ;

                            ---- Invoice_Invoice:
                            delete t
                            from Invoice_Invoice t --//[mylock]
	                            inner join #input_Invoice_Invoice f --//[mylock]
		                            on t.InvoiceCode = f.InvoiceCode
                            where (1=1)
                            ;

                            --- Clear For Debug:
                            drop table #tbl_Invoice_InvoiceDtl;
						");
                    DataSet dtDB = _cf.db.ExecQuery(
                        strSqlDelete
                        );
                }

                //// Insert All:
                if (!bIsDelete)
                {
                    #region // Insert:
                    {
                        ////
                        string zzzzClauseInsert_Invoice_Invoice_zSave = CmUtils.StringUtils.Replace(@"
                                ---- Invoice_Invoice:                                
                                insert into Invoice_Invoice(
	                                InvoiceCode
	                                , MST
	                                , NetworkID
	                                , RefNo
	                                , FormNo
	                                , Sign
	                                , SourceInvoiceCode
	                                , InvoiceAdjType
	                                , PaymentMethodCode
	                                , InvoiceType2
	                                , CustomerNNTCode
	                                , CustomerNNTName
	                                , CustomerNNTAddress
	                                , CustomerNNTPhone
	                                , CustomerNNTBankName
	                                , CustomerNNTEmail
	                                , CustomerNNTAccNo
	                                , CustomerNNTBuyerName
	                                , CustomerMST
	                                , TInvoiceCode
	                                , InvoiceNo
	                                , InvoiceDateUTC
	                                , EmailSend
	                                , InvoiceFileSpec
	                                , InvoiceFilePath
	                                , InvoicePDFFilePath
	                                , TotalValInvoice
	                                , TotalValVAT
	                                , TotalValPmt
	                                , CreateDTimeUTC
	                                , CreateBy
	                                , InvoiceNoDTimeUTC
	                                , InvoiceNoBy
	                                , SignDTimeUTC
	                                , SignBy
	                                , ApprDTimeUTC
	                                , ApprBy
	                                , CancelDTimeUTC
	                                , CancelBy
	                                , SendEmailDTimeUTC
	                                , SendEmailBy
	                                , IssuedDTimeUTC
	                                , IssuedBy
	                                , AttachedDelFilePath
	                                , DeleteReason
	                                , DeleteDTimeUTC
	                                , DeleteBy
	                                , ChangeDTimeUTC
	                                , ChangeBy
	                                , InvoiceVerifyCQTCode
	                                , CurrencyCode
	                                , CurrencyRate
	                                , ValGoodsNotTaxable
	                                , ValGoodsNotChargeTax
	                                , ValGoodsVAT5
	                                , ValVAT5
	                                , ValGoodsVAT10
	                                , ValVAT10
	                                , NNTFullName
	                                , NNTFullAdress
	                                , NNTPhone
	                                , NNTFax
	                                , NNTEmail
	                                , NNTWebsite
	                                , NNTAccNo
	                                , NNTBankName
	                                , LUDTimeUTC
	                                , LUBy
	                                , Remark
	                                , InvoiceCF1
	                                , InvoiceCF2
	                                , InvoiceCF3
	                                , InvoiceCF4
	                                , InvoiceCF5
	                                , InvoiceCF6
	                                , InvoiceCF7
	                                , InvoiceCF8
	                                , InvoiceCF9
	                                , InvoiceCF10
	                                , FlagChange
	                                , FlagPushOutSite
	                                , FlagDeleteOutSite
	                                , InvoiceStatus
	                                , LogLUDTimeUTC
	                                , LogLUBy
                                )
                                select 
	                                t.InvoiceCode
	                                , t.MST
	                                , t.NetworkID
	                                , t.RefNo
	                                , t.FormNo
	                                , t.Sign
	                                , t.SourceInvoiceCode
	                                , t.InvoiceAdjType
	                                , t.PaymentMethodCode
	                                , t.InvoiceType2
	                                , t.CustomerNNTCode
	                                , t.CustomerNNTName
	                                , t.CustomerNNTAddress
	                                , t.CustomerNNTPhone
	                                , t.CustomerNNTBankName
	                                , t.CustomerNNTEmail
	                                , t.CustomerNNTAccNo
	                                , t.CustomerNNTBuyerName
	                                , t.CustomerMST
	                                , t.TInvoiceCode
	                                , t.InvoiceNo
	                                , t.InvoiceDateUTC
	                                , t.EmailSend
	                                , t.InvoiceFileSpec
	                                , t.InvoiceFilePath
	                                , t.InvoicePDFFilePath
	                                , t.TotalValInvoice
	                                , t.TotalValVAT
	                                , t.TotalValPmt
	                                , t.CreateDTimeUTC
	                                , t.CreateBy
	                                , t.InvoiceNoDTimeUTC
	                                , t.InvoiceNoBy
	                                , t.SignDTimeUTC
	                                , t.SignBy
	                                , t.ApprDTimeUTC
	                                , t.ApprBy
	                                , t.CancelDTimeUTC
	                                , t.CancelBy
	                                , t.SendEmailDTimeUTC
	                                , t.SendEmailBy
	                                , t.IssuedDTimeUTC
	                                , t.IssuedBy
	                                , t.AttachedDelFilePath
	                                , t.DeleteReason
	                                , t.DeleteDTimeUTC
	                                , t.DeleteBy
	                                , t.ChangeDTimeUTC
	                                , t.ChangeBy
	                                , t.InvoiceVerifyCQTCode
	                                , t.CurrencyCode
	                                , t.CurrencyRate
	                                , t.ValGoodsNotTaxable
	                                , t.ValGoodsNotChargeTax
	                                , t.ValGoodsVAT5
	                                , t.ValVAT5
	                                , t.ValGoodsVAT10
	                                , t.ValVAT10
	                                , t.NNTFullName
	                                , t.NNTFullAdress
	                                , t.NNTPhone
	                                , t.NNTFax
	                                , t.NNTEmail
	                                , t.NNTWebsite
	                                , t.NNTAccNo
	                                , t.NNTBankName
	                                , t.LUDTimeUTC
	                                , t.LUBy
	                                , t.Remark
	                                , t.InvoiceCF1
	                                , t.InvoiceCF2
	                                , t.InvoiceCF3
	                                , t.InvoiceCF4
	                                , t.InvoiceCF5
	                                , t.InvoiceCF6
	                                , t.InvoiceCF7
	                                , t.InvoiceCF8
	                                , t.InvoiceCF9
	                                , t.InvoiceCF10
	                                , t.FlagChange
	                                , t.FlagPushOutSite
	                                , t.FlagDeleteOutSite
	                                , t.InvoiceStatus
	                                , t.LogLUDTimeUTC
	                                , t.LogLUBy
                                from #tbl_Invoice_Invoice_Build t --//[mylock]
                            ");
                        /////
                        string zzzzClauseInsert_Invoice_InvoiceDtl_zSave = CmUtils.StringUtils.Replace(@"
                                ---- Invoice_InvoiceDtl:  
                                insert into Invoice_InvoiceDtl(
	                                InvoiceCode
	                                , Idx
	                                , NetworkID
	                                , SpecCode
	                                , SpecName
	                                , ProductID
	                                , ProductName
	                                , VATRateCode
	                                , VATRate
	                                , UnitCode
	                                , UnitName
	                                , UnitPrice
	                                , Qty
	                                , ValInvoice
	                                , ValTax
	                                , InventoryCode
	                                , DiscountRate
	                                , ValDiscount
	                                , InvoiceDtlStatus
	                                , Remark
	                                , InvoiceDCF1
	                                , InvoiceDCF2
	                                , InvoiceDCF3
	                                , InvoiceDCF4
	                                , InvoiceDCF5
	                                , LogLUDTimeUTC
	                                , LogLUBy
                                )
                                select 
	                                t.InvoiceCode
	                                , t.Idx
	                                , t.NetworkID
	                                , t.SpecCode
	                                , t.SpecName
	                                , t.ProductID
	                                , t.ProductName
	                                , t.VATRateCode
	                                , t.VATRate
	                                , t.UnitCode
	                                , t.UnitName
	                                , t.UnitPrice
	                                , t.Qty
	                                , t.ValInvoice
	                                , t.ValTax
	                                , t.InventoryCode
	                                , t.DiscountRate
	                                , t.ValDiscount
	                                , t.InvoiceDtlStatus
	                                , t.Remark
	                                , t.InvoiceDCF1
	                                , t.InvoiceDCF2
	                                , t.InvoiceDCF3
	                                , t.InvoiceDCF4
	                                , t.InvoiceDCF5
	                                , t.LogLUDTimeUTC
	                                , t.LogLUBy
                                from #tbl_Invoice_InvoiceDtl_Build t
                            ");

                        /////
                        string strSqlExec = CmUtils.StringUtils.Replace(@"
								----
								zzzzClauseInsert_Invoice_Invoice_zSave			
								----
								zzzzClauseInsert_Invoice_InvoiceDtl_zSave			
								----
							"
                            , "zzzzClauseInsert_Invoice_Invoice_zSave", zzzzClauseInsert_Invoice_Invoice_zSave
                            , "zzzzClauseInsert_Invoice_InvoiceDtl_zSave", zzzzClauseInsert_Invoice_InvoiceDtl_zSave
                            );
                        ////
                        DataSet dsExec = _cf.db.ExecQuery(strSqlExec);
                        ////
                    }
                    #endregion
                }
            }
            #endregion

            #region // Check One RefNo:
            if (!bIsDelete)
            {
                myCheck_Invoice_Invoice_RefNo_New20190705(
                    ref alParamsCoupleError // alParamsCoupleError
                    , dtimeSys // dtimeSys
                    , "#tbl_Invoice_Invoice_Build"  //zzzz_tbl_Invoice_Invoice_RefNo
                    );
            }
            #endregion

            #region // myCheck_Invoice_Invoice_Total:
            if (!bIsDelete)
            {
                myCheck_Invoice_Invoice_Total_New20190705(
                    ref alParamsCoupleError // alParamsCoupleError
                    , dtimeSys // dtimeSys
                    , "#tbl_Invoice_Invoice_Build"  //zzzz_tbl_Invoice_Invoice_RefNo
                    );
                ////
                myCheck_Invoice_InvoiceDtl_Total(
                    ref alParamsCoupleError // alParamsCoupleError
                    , dtimeSys // dtimeSys
                    , "#tbl_Invoice_Invoice_Build"  //zzzz_tbl_Invoice_Invoice_RefNo
                    );
            }
            #endregion

            #region // myCheck_OS_Invoice_Invoice_CheckMasterPrd:
            if (!bIsDelete)
            {
                myCheck_OS_Invoice_Invoice_CheckMasterPrd(
                    ref alParamsCoupleError  //alParamsCoupleError
                    , dtimeSys  //dtimeSys
                    , strTid  //strTid
                    , "#tbl_Invoice_Invoice_Build"  //zzzz_tbl_Invoice_Invoice_RefNo
                    );
            }
            #endregion

            #region //// Clear For Debug:
            if (!bIsDelete)
            {
                ////
                string strSqlClearForDebug = CmUtils.StringUtils.Replace(@"
						---- Clear for Debug:
						drop table #input_Invoice_Invoice;
						drop table #input_Invoice_InvoiceDtl;
					");

                _cf.db.ExecQuery(
                    strSqlClearForDebug
                    );
                ////
            }
            else
            {
                ////
                string strSqlClearForDebug = CmUtils.StringUtils.Replace(@"
						---- Clear for Debug:
						drop table #input_Invoice_Invoice;
					");

                _cf.db.ExecQuery(
                    strSqlClearForDebug
                    );
                ////

            }
        #endregion

        // Return Good:
        MyCodeLabel_Done:
            return;
            //TDALUtils.DBUtils.CommitSafety(_cf.db);
            //mdsFinal.AcceptChanges();
            //return mdsFinal;		
        }

        private void Invoice_Invoice_SaveX_New20190802(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            , DateTime dtimeSys
            ////
            , object objFlagIsDelete
            ////
            , DataSet dsData
            )
        {
            #region // Temp:
            //int nTidSeq = 0;
            //bool bMyDebugSql = false;
            string strFunctionName = "Invoice_Invoice_SaveAllX";
            //string strErrorCodeDefault = TError.ErridnInventory.Invoice_Invoice_SaveAllX;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
                ////
                , "objFlagIsDelete",objFlagIsDelete
				////
                });
            //ArrayList alPCErrEx = new ArrayList();
            ////
            Hashtable htParamsSql = new Hashtable();
            #endregion

            #region // Convert Input:
            //DataSet dsData = TUtils.CUtils.StdDS(arrobjDSData);
            //if (dsData == null) dsData = new DataSet("dsData");
            //dsData.AcceptChanges();
            alParamsCoupleError.AddRange(new object[]{
                "Check.dsData", CmUtils.XmlUtils.DataSet2XmlSimple(dsData)
                });
            #endregion

            #region // Refine and Check Input:
            ////
            DataRow drAbilityOfUser = Sys_User_GetAbilityViewOfUser(strWAUserCode);
            ////
            bool bIsDelete = CmUtils.StringUtils.StringEqual(objFlagIsDelete, TConst.Flag.Yes);
            ////
            string strMST = TUtils.CUtils.StdParam(drAbilityOfUser["MNNTMST"]);
            #endregion

            #region // Refine and Check Input Invoice_Invoice:
            ////
            DataTable dtInput_Invoice_Invoice = null;
            {
                ////
                string strTableCheck = "Invoice_Invoice";
                ////
                if (!dsData.Tables.Contains(strTableCheck))
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.TableName", strTableCheck
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Invoice_Invoice_SaveX_Input_InvoiceTblNotFound
                        , null
                        , alParamsCoupleError.ToArray()
                        );
                }
                dtInput_Invoice_Invoice = dsData.Tables[strTableCheck];
                ////
                if (dtInput_Invoice_Invoice.Rows.Count < 1)
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.TableName", strTableCheck
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Invoice_Invoice_SaveX_Input_InvoiceTblInvalid
                        , null
                        , alParamsCoupleError.ToArray()
                        );
                }
                ////
                TUtils.CUtils.StdDataInTable(
                    dtInput_Invoice_Invoice // dtData
                    , "StdParam", "InvoiceCode" // arrstrCouple
                    , "StdParam", "MST" // arrstrCouple
                    , "StdParam", "NetworkID" // arrstrCouple
                    , "StdParam", "RefNo" // arrstrCouple
                    , "StdParam", "FormNo" // arrstrCouple
                    , "StdParam", "Sign" // arrstrCouple
                    , "StdParam", "SourceInvoiceCode" // arrstrCouple
                    , "StdParam", "InvoiceAdjType" // arrstrCouple
                    , "StdParam", "PaymentMethodCode" // arrstrCouple
                    , "StdParam", "InvoiceType2" // arrstrCouple
                    , "StdParam", "CustomerNNTCode" // arrstrCouple
                    , "", "CustomerNNTName" // arrstrCouple
                    , "", "CustomerNNTAddress" // arrstrCouple
                    , "", "CustomerNNTPhone" // arrstrCouple
                    , "", "CustomerNNTBankName" // arrstrCouple
                    , "", "CustomerNNTEmail" // arrstrCouple
                    , "", "CustomerNNTAccNo" // arrstrCouple
                    , "", "CustomerNNTBuyerName" // arrstrCouple
                    , "StdParam", "CustomerMST" // arrstrCouple
                    , "StdParam", "TInvoiceCode" // arrstrCouple
                    , "StdParam", "InvoiceNo" // arrstrCouple
                    , "", "InvoiceDateUTC" // arrstrCouple
                                           //, "StdParam", "EmailSend" // arrstrCouple
                    , "", "InvoiceFileSpec" // arrstrCouple
                    , "", "InvoiceFilePath" // arrstrCouple
                    , "", "InvoicePDFFilePath" // arrstrCouple
                    , "float", "TotalValInvoice" // arrstrCouple
                    , "float", "TotalValVAT" // arrstrCouple
                    , "float", "TotalValPmt" // arrstrCouple
                    , "", "AttachedDelFilePath" // arrstrCouple
                    , "", "DeleteReason" // arrstrCouple
                    , "StdParam", "InvoiceVerifyCQTCode" // arrstrCouple
                    , "StdParam", "CurrencyCode" // arrstrCouple
                    , "float", "CurrencyRate" // arrstrCouple
                    , "float", "ValGoodsNotTaxable" // arrstrCouple
                    , "float", "ValGoodsNotChargeTax" // arrstrCouple
                    , "float", "ValGoodsVAT5" // arrstrCouple
                    , "float", "ValVAT5" // arrstrCouple
                    , "float", "ValGoodsVAT10" // arrstrCouple
                    , "float", "ValVAT10" // arrstrCouple
                    , "", "NNTFullName" // arrstrCouple
                    , "", "NNTFullAdress" // arrstrCouple
                    , "", "NNTPhone" // arrstrCouple
                    , "", "NNTFax" // arrstrCouple
                    , "", "NNTEmail" // arrstrCouple
                    , "", "NNTWebsite" // arrstrCouple
                    , "", "NNTAccNo" // arrstrCouple
                    , "", "NNTBankName" // arrstrCouple
                    , "", "Remark" // arrstrCouple
                    , "", "InvoiceCF1" // arrstrCouple
                    , "", "InvoiceCF2" // arrstrCouple
                    , "", "InvoiceCF3" // arrstrCouple
                    , "", "InvoiceCF4" // arrstrCouple
                    , "", "InvoiceCF5" // arrstrCouple
                    , "", "InvoiceCF6" // arrstrCouple
                    , "", "InvoiceCF7" // arrstrCouple
                    , "", "InvoiceCF8" // arrstrCouple
                    , "", "InvoiceCF9" // arrstrCouple
                    , "", "InvoiceCF10" // arrstrCouple
                    , "", "FlagConfirm" // arrstrCouple
                    );
                ////
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_Invoice, "EmailSend", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_Invoice, "CreateDTimeUTC", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_Invoice, "CreateBy", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_Invoice, "InvoiceNoDTimeUTC", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_Invoice, "InvoiceNoBy", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_Invoice, "SignDTimeUTC", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_Invoice, "SignBy", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_Invoice, "ApprDTimeUTC", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_Invoice, "ApprBy", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_Invoice, "CancelDTimeUTC", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_Invoice, "CancelBy", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_Invoice, "SendEmailDTimeUTC", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_Invoice, "SendEmailBy", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_Invoice, "IssuedDTimeUTC", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_Invoice, "IssuedBy", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_Invoice, "DeleteDTimeUTC", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_Invoice, "DeleteBy", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_Invoice, "ChangeDTimeUTC", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_Invoice, "ChangeBy", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_Invoice, "LUDTimeUTC", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_Invoice, "LUBy", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_Invoice, "FlagChange", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_Invoice, "FlagPushOutSite", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_Invoice, "InvoiceStatus", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_Invoice, "LogLUDTimeUTC", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_Invoice, "LogLUBy", typeof(object));
            }
            #endregion

            #region //// SaveTemp Invoice_Invoice For Check:
            //if (!bIsDelete)
            {
                // Upload:
                TUtils.CUtils.MyBuildDBDT_Common(
                    _cf.db // db
                    , "#input_Invoice_Invoice" // strTableName
                    , new object[] {
                            "InvoiceCode", TConst.BizMix.Default_DBColType
                            , "MST", TConst.BizMix.Default_DBColType
                            , "NetworkID", TConst.BizMix.Default_DBColType
                            , "RefNo", TConst.BizMix.Default_DBColType
                            , "FormNo", TConst.BizMix.Default_DBColType
                            , "Sign", TConst.BizMix.Default_DBColType
                            , "SourceInvoiceCode", TConst.BizMix.Default_DBColType
                            , "InvoiceAdjType", TConst.BizMix.Default_DBColType
                            , "PaymentMethodCode", TConst.BizMix.Default_DBColType
                            , "InvoiceType2", TConst.BizMix.Default_DBColType
                            , "CustomerNNTCode", TConst.BizMix.Default_DBColType
                            , "CustomerNNTName", TConst.BizMix.Default_DBColType
                            , "CustomerNNTAddress", TConst.BizMix.Default_DBColType
                            , "CustomerNNTPhone", TConst.BizMix.Default_DBColType
                            , "CustomerNNTBankName", TConst.BizMix.Default_DBColType
                            , "CustomerNNTEmail", TConst.BizMix.Default_DBColType
                            , "CustomerNNTAccNo", TConst.BizMix.Default_DBColType
                            , "CustomerNNTBuyerName", TConst.BizMix.Default_DBColType
                            , "CustomerMST", TConst.BizMix.Default_DBColType
                            , "TInvoiceCode", TConst.BizMix.Default_DBColType
                            , "InvoiceNo", TConst.BizMix.Default_DBColType
                            , "InvoiceDateUTC", TConst.BizMix.Default_DBColType
                            , "EmailSend", TConst.BizMix.Default_DBColType
                            , "InvoiceFileSpec", TConst.BizMix.Default_DBColType
                            , "InvoiceFilePath", TConst.BizMix.Default_DBColType
                            , "InvoicePDFFilePath", TConst.BizMix.Default_DBColType
                            , "TotalValInvoice", "float"
                            , "TotalValVAT", "float"
                            , "TotalValPmt", "float"
                            , "CreateDTimeUTC", TConst.BizMix.Default_DBColType
                            , "CreateBy", TConst.BizMix.Default_DBColType
                            , "InvoiceNoDTimeUTC", TConst.BizMix.Default_DBColType
                            , "InvoiceNoBy", TConst.BizMix.Default_DBColType
                            , "SignDTimeUTC", TConst.BizMix.Default_DBColType
                            , "SignBy", TConst.BizMix.Default_DBColType
                            , "ApprDTimeUTC", TConst.BizMix.Default_DBColType
                            , "ApprBy", TConst.BizMix.Default_DBColType
                            , "CancelDTimeUTC", TConst.BizMix.Default_DBColType
                            , "CancelBy", TConst.BizMix.Default_DBColType
                            , "SendEmailDTimeUTC", TConst.BizMix.Default_DBColType
                            , "SendEmailBy", TConst.BizMix.Default_DBColType
                            , "IssuedDTimeUTC", TConst.BizMix.Default_DBColType
                            , "IssuedBy", TConst.BizMix.Default_DBColType
                            , "AttachedDelFilePath", TConst.BizMix.Default_DBColType
                            , "DeleteReason", TConst.BizMix.Default_DBColType
                            , "DeleteDTimeUTC", TConst.BizMix.Default_DBColType
                            , "DeleteBy", TConst.BizMix.Default_DBColType
                            , "ChangeDTimeUTC", TConst.BizMix.Default_DBColType
                            , "ChangeBy", TConst.BizMix.Default_DBColType
                            , "InvoiceVerifyCQTCode", TConst.BizMix.Default_DBColType
                            , "CurrencyCode", TConst.BizMix.Default_DBColType
                            , "CurrencyRate", TConst.BizMix.Default_DBColType
                            , "ValGoodsNotTaxable", "float"
                            , "ValGoodsNotChargeTax", "float"
                            , "ValGoodsVAT5", "float"
                            , "ValVAT5", "float"
                            , "ValGoodsVAT10", "float"
                            , "ValVAT10", "float"
                            , "NNTFullName", TConst.BizMix.Default_DBColType
                            , "NNTFullAdress", TConst.BizMix.Default_DBColType
                            , "NNTPhone", TConst.BizMix.Default_DBColType
                            , "NNTFax", TConst.BizMix.Default_DBColType
                            , "NNTEmail", TConst.BizMix.Default_DBColType
                            , "NNTWebsite", TConst.BizMix.Default_DBColType
                            , "NNTAccNo", TConst.BizMix.Default_DBColType
                            , "NNTBankName", TConst.BizMix.Default_DBColType
                            , "LUDTimeUTC", TConst.BizMix.Default_DBColType
                            , "LUBy", TConst.BizMix.Default_DBColType
                            , "Remark", TConst.BizMix.Default_DBColType
                            , "InvoiceCF1", TConst.BizMix.Default_DBColType
                            , "InvoiceCF2", TConst.BizMix.Default_DBColType
                            , "InvoiceCF3", TConst.BizMix.Default_DBColType
                            , "InvoiceCF4", TConst.BizMix.Default_DBColType
                            , "InvoiceCF5", TConst.BizMix.Default_DBColType
                            , "InvoiceCF6", TConst.BizMix.Default_DBColType
                            , "InvoiceCF7", TConst.BizMix.Default_DBColType
                            , "InvoiceCF8", TConst.BizMix.Default_DBColType
                            , "InvoiceCF9", TConst.BizMix.Default_DBColType
                            , "InvoiceCF10", TConst.BizMix.Default_DBColType
                            , "FlagConfirm", TConst.BizMix.Default_DBColType
                            , "FlagChange", TConst.BizMix.Default_DBColType
                            , "FlagPushOutSite", TConst.BizMix.Default_DBColType
                            , "FlagDeleteOutSite", TConst.BizMix.Default_DBColType
                            , "InvoiceStatus", TConst.BizMix.Default_DBColType
                            , "LogLUDTimeUTC", TConst.BizMix.Default_DBColType
                            , "LogLUBy", TConst.BizMix.Default_DBColType
                        } // arrSingleStructure
                    , dtInput_Invoice_Invoice // dtData
                );
            }
            #endregion

            #region /// Refine and check Input Invoice_Invoice:
            {
                #region ----// Check InvalidInvoiceCode:
                {
                    string strSql_CheckInvalidInvoiceCode = CmUtils.StringUtils.Replace(@"
                            --- Check:
                            select distinct 
                                t.InvoiceCode
                            from #input_Invoice_Invoice t --//[mylock]
                            where(1=1)
                                and (t.InvoiceCode is null or LTRIM(RTRIM(t.InvoiceCode)) = '')
                            ;
						");
                    DataTable dt_CheckInvalidInvoiceCode = _cf.db.ExecQuery(
                        strSql_CheckInvalidInvoiceCode
                        ).Tables[0];
                    /////
                    if (dt_CheckInvalidInvoiceCode.Rows.Count > 0)
                    {
                        alParamsCoupleError.AddRange(new object[]{
                            "Check.ErrConditionalRaise", "(t.InvoiceCode is null or LTRIM(RTRIM(t.InvoiceCode)) = '')"
                            , "Check.NumberRows", dt_CheckInvalidInvoiceCode.Rows.Count
                            });
                        throw CmUtils.CMyException.Raise(
                            TError.ErridnInventory.Invoice_Invoice_SaveX_InvalidInvoiceCode
                            , null
                            , alParamsCoupleError.ToArray()
                            );
                    }
                    ////
                }
                #endregion

                #region ----// Check InvalidInvoiceStatus:
                {
                    string strSql_CheckInvalidInvoiceCode = CmUtils.StringUtils.Replace(@"
                            --- #tbl_Invoice_Invoice_ForSTUFF:
                            select distinct 
                                t.InvoiceCode
                            into #tbl_Invoice_Invoice_ForSTUFF
                            from #input_Invoice_Invoice t --//[mylock]
                                inner join Invoice_Invoice f --//[mylock]
                                    on t.InvoiceCode = f.InvoiceCode
                            where(1=1)
                                and f.InvoiceStatus not in ('PENDING') 
                            ;

                            --- Return:					
                            select 
                                STUFF(( 
		                            SELECT ',' + f.InvoiceCode
		                            FROM #tbl_Invoice_Invoice_ForSTUFF f --//[mylock]
		                            WHERE(1=1)
		                            FOR
		                            XML PATH('')
		                            ), 1, 1, ''
                                ) AS ListInvoiceCode
                            where(1=1)
                            ;

                            --- Clear For Debug:
                            drop table #tbl_Invoice_Invoice_ForSTUFF;
						");
                    DataTable dt_CheckInvalidInvoiceCode = _cf.db.ExecQuery(
                        strSql_CheckInvalidInvoiceCode
                        ).Tables[0];
                    /////
                    if (dt_CheckInvalidInvoiceCode.Rows.Count > 0)
                    {
                        string strListInvoiceCode = TUtils.CUtils.StdParam(dt_CheckInvalidInvoiceCode.Rows[0]["ListInvoiceCode"]);
                        /////
                        if (!string.IsNullOrEmpty(strListInvoiceCode))
                        {
                            if (bIsDelete)
                            {
                                goto MyCodeLabel_Done; // Thành công
                            }
                            else // if (!string.IsNullOrEmpty(strListInvoiceCode))
                            {
                                alParamsCoupleError.AddRange(new object[]{
                                    "Check.ErrConditionalRaise", "f.InvoiceStatus not in ('PENDING')"
                                    , "Check.strListInvoiceCode", strListInvoiceCode
                                    });
                                throw CmUtils.CMyException.Raise(
                                    TError.ErridnInventory.Invoice_Invoice_SaveX_StatusNotMatched
                                    , null
                                    , alParamsCoupleError.ToArray()
                                    );

                            }
                        }
                        /////
                    }
                    ////
                }
                #endregion

                #region ----// Đã cấp số hóa đơn thì không được Xóa:
                if (bIsDelete)
                {
                    string strSql_CheckInvalidInvoiceCode = CmUtils.StringUtils.Replace(@"
                            --- #tbl_Invoice_Invoice_ForSTUFF:
                            select distinct 
                                t.InvoiceCode
                            into #tbl_Invoice_Invoice_ForSTUFF
                            from #input_Invoice_Invoice t --//[mylock]
                                inner join Invoice_Invoice f --//[mylock]
                                    on t.InvoiceCode = f.InvoiceCode
                            where(1=1)
                                and f.InvoiceNo is not null 
                            ;

                            --- Return:					
                            select 
                                STUFF(( 
		                            SELECT ',' + f.InvoiceCode
		                            FROM #tbl_Invoice_Invoice_ForSTUFF f --//[mylock]
		                            WHERE(1=1)
		                            FOR
		                            XML PATH('')
		                            ), 1, 1, ''
                                ) AS ListInvoiceCode
                            where(1=1)
                            ;

                            --- Clear For Debug:
                            drop table #tbl_Invoice_Invoice_ForSTUFF;
						");
                    DataTable dt_CheckInvalidInvoiceCode = _cf.db.ExecQuery(
                        strSql_CheckInvalidInvoiceCode
                        ).Tables[0];
                    /////
                    if (dt_CheckInvalidInvoiceCode.Rows.Count > 0)
                    {
                        /////
                        string strListInvoiceCode = TUtils.CUtils.StdParam(dt_CheckInvalidInvoiceCode.Rows[0]["ListInvoiceCode"]);
                        ////
                        if (!string.IsNullOrEmpty(strListInvoiceCode))
                        {
                            alParamsCoupleError.AddRange(new object[]{
                                "Check.ErrConditionalRaise", "f.InvoiceNo is not null "
                                , "Check.strListInvoiceCode", strListInvoiceCode
                                });
                            throw CmUtils.CMyException.Raise(
                                TError.ErridnInventory.Invoice_Invoice_SaveX_ExistInvoiceNo
                                , null
                                , alParamsCoupleError.ToArray()
                                );

                        }
                    }
                    ////
                }
                #endregion

                #region ----// Nếu là hóa đơn điều chỉnh thì RefNo không được Null:
                if (!bIsDelete)
                {
                    string strSql_CheckInvalidInvoiceCode = CmUtils.StringUtils.Replace(@"
                            --- #tbl_Invoice_Invoice_ForSTUFF:
                            select distinct 
                                t.InvoiceCode
                            into #tbl_Invoice_Invoice_ForSTUFF
                            from #input_Invoice_Invoice t --//[mylock]
                            where(1=1)
                                and t.RefNo is null
                                and t.InvoiceAdjType in ('@strADJINCREASE', '@strADJDESCREASE')
                            ;

                            --- Return:					
                            select 
                                STUFF(( 
		                            SELECT ',' + f.InvoiceCode
		                            FROM #tbl_Invoice_Invoice_ForSTUFF f --//[mylock]
		                            WHERE(1=1)
		                            FOR
		                            XML PATH('')
		                            ), 1, 1, ''
                                ) AS ListInvoiceCode
                            where(1=1)
                            ;

                            --- Clear For Debug:
                            drop table #tbl_Invoice_Invoice_ForSTUFF;
						"
                        , "@strADJINCREASE", TConst.InvoiceAdjType.AdjInCrease
                        , "@strADJINCREASE", TConst.InvoiceAdjType.AdjDescrease
                        );
                    DataTable dt_CheckInvalidInvoiceCode = _cf.db.ExecQuery(
                        strSql_CheckInvalidInvoiceCode
                        ).Tables[0];
                    /////
                    if (dt_CheckInvalidInvoiceCode.Rows.Count > 0)
                    {
                        string strListInvoiceCode = TUtils.CUtils.StdParam(dt_CheckInvalidInvoiceCode.Rows[0]["ListInvoiceCode"]);
                        /////
                        if (!string.IsNullOrEmpty(strListInvoiceCode))
                        {
                            alParamsCoupleError.AddRange(new object[]{
                                "Check.ErrConditionalRaise", "and t.InvoiceAdjType in ('@strADJINCREASE', '@strADJDESCREASE') and t.RefNo is null"
                                , "Check.strListInvoiceCode", strListInvoiceCode
                                });
                            throw CmUtils.CMyException.Raise(
                                TError.ErridnInventory.Invoice_Invoice_SaveX_InvoiceAdjTypeIsNotNull
                                , null
                                , alParamsCoupleError.ToArray()
                                );
                        }
                        /////
                    }
                    ////
                }
                #endregion

                #region ----// Nếu là hóa đơn thay thế:
                {
                    #region ----// Nếu là hóa đơn thay thế thì RefNo không được Null:
                    {
                        string strSql_CheckInvalidInvoiceCode = CmUtils.StringUtils.Replace(@"
                                --- #tbl_Invoice_Invoice_ForSTUFF:
                                select distinct 
                                    t.RefNo
                                into #tbl_Invoice_Invoice_ForSTUFF
                                from #input_Invoice_Invoice t --//[mylock]
                                where(1=1)
                                    and t.SourceInvoiceCode in ('@strInvoiceReplace') 
                                    and (t.RefNo is null or LTRIM(RTRIM(t.RefNo)) = '')
                                ;

                                --- Return:					
                                select 
                                    STUFF(( 
		                                SELECT ',' + f.RefNo
		                                FROM #tbl_Invoice_Invoice_ForSTUFF f --//[mylock]
		                                WHERE(1=1)
		                                FOR
		                                XML PATH('')
		                                ), 1, 1, ''
                                    ) AS ListRefNo
                                where(1=1)
                                ;

                                --- Clear For Debug:
                                drop table #tbl_Invoice_Invoice_ForSTUFF;
						    "
                            , "@strInvoiceReplace", TConst.SourceInvoiceCode.InvoiceReplace
                            );
                        DataTable dt_CheckInvalidInvoiceCode = _cf.db.ExecQuery(
                            strSql_CheckInvalidInvoiceCode
                            ).Tables[0];
                        /////
                        if (dt_CheckInvalidInvoiceCode.Rows.Count > 0)
                        {
                            /////
                            string strListRefNo = TUtils.CUtils.StdParam(dt_CheckInvalidInvoiceCode.Rows[0]["ListRefNo"]);
                            ////
                            if (!string.IsNullOrEmpty(strListRefNo))
                            {
                                alParamsCoupleError.AddRange(new object[]{
                                    "Check.ErrConditionalRaise", "and t.SourceInvoiceCode in ('@strInvoiceReplace') and (t.RefNo is null or LTRIM(RTRIM(t.RefNo)) = '')"
                                    , "Check.strListRefNo", strListRefNo
                                    });
                                throw CmUtils.CMyException.Raise(
                                    TError.ErridnInventory.Invoice_Invoice_SaveX_Input_Invoice_InvalidRefNo
                                    , null
                                    , alParamsCoupleError.ToArray()
                                    );

                            }
                        }
                        ////
                    }
                    #endregion

                    #region ----// RefNo ở trạng thái Deleted:
                    {
                        string strSql_CheckInvalidInvoiceCode = CmUtils.StringUtils.Replace(@"
                                --- #tbl_Invoice_Invoice_ForSTUFF:
                                select distinct 
                                    t.RefNo
                                into #tbl_Invoice_Invoice_ForSTUFF
                                from #input_Invoice_Invoice t --//[mylock]
                                    left join Invoice_Invoice f --//[mylock]
                                        on t.RefNo = f.InvoiceCode
                                where(1=1)
                                    and t.SourceInvoiceCode in ('@strInvoiceReplace') 
                                    and (f.InvoiceStatus not in ('DELETED', 'ISSUED')) 
                                ;

                                --- Return:					
                                select 
                                    STUFF(( 
		                                SELECT ',' + f.RefNo
		                                FROM #tbl_Invoice_Invoice_ForSTUFF f --//[mylock]
		                                WHERE(1=1)
		                                FOR
		                                XML PATH('')
		                                ), 1, 1, ''
                                    ) AS ListRefNo
                                where(1=1)
                                ;

                                --- Clear For Debug:
                                drop table #tbl_Invoice_Invoice_ForSTUFF;
						    "
                            , "@strInvoiceReplace", TConst.SourceInvoiceCode.InvoiceReplace
                            );
                        DataTable dt_CheckInvalidInvoiceCode = _cf.db.ExecQuery(
                            strSql_CheckInvalidInvoiceCode
                            ).Tables[0];
                        /////
                        if (dt_CheckInvalidInvoiceCode.Rows.Count > 0)
                        {
                            /////
                            string strListRefNo = TUtils.CUtils.StdParam(dt_CheckInvalidInvoiceCode.Rows[0]["ListRefNo"]);
                            ////
                            if (!string.IsNullOrEmpty(strListRefNo))
                            {
                                alParamsCoupleError.AddRange(new object[]{
                                    "Check.ErrConditionalRaise", "and t.SourceInvoiceCode in ('@strInvoiceReplace')  and (f.InvoiceStatus not in ('DELETED', 'ISSUED')) "
                                    , "Check.strListRefNo", strListRefNo
                                    });
                                throw CmUtils.CMyException.Raise(
                                    TError.ErridnInventory.Invoice_Invoice_SaveX_Input_Invoice_InvalidInvoiceStatusRefNo
                                    , null
                                    , alParamsCoupleError.ToArray()
                                    );

                            }
                        }
                        ////
                    }
                    #endregion

                    #region ----// Không cho phép xóa hóa đơn thay thế:
                    if (bIsDelete)
                    {
                        string strSql_CheckInvalidInvoiceCode = CmUtils.StringUtils.Replace(@"
                                --- #tbl_Invoice_Invoice_ForSTUFF:
                                select distinct 
                                    t.RefNo
                                into #tbl_Invoice_Invoice_ForSTUFF
                                from #input_Invoice_Invoice t --//[mylock]
                                where(1=1)
                                ;

                                --- Return:					
                                select 
                                    STUFF(( 
		                                SELECT ',' + f.RefNo
		                                FROM #tbl_Invoice_Invoice_ForSTUFF f --//[mylock]
		                                WHERE(1=1)
		                                FOR
		                                XML PATH('')
		                                ), 1, 1, ''
                                    ) AS ListRefNo
                                where(1=1)
                                ;

                                --- Clear For Debug:
                                drop table #tbl_Invoice_Invoice_ForSTUFF;
						    "
                            , "@strInvoiceReplace", TConst.SourceInvoiceCode.InvoiceReplace
                            );
                        DataTable dt_CheckInvalidInvoiceCode = _cf.db.ExecQuery(
                            strSql_CheckInvalidInvoiceCode
                            ).Tables[0];
                        /////
                        if (dt_CheckInvalidInvoiceCode.Rows.Count > 0)
                        {
                            /////
                            string strListRefNo = TUtils.CUtils.StdParam(dt_CheckInvalidInvoiceCode.Rows[0]["ListRefNo"]);
                            ////
                            if (!string.IsNullOrEmpty(strListRefNo))
                            {
                                alParamsCoupleError.AddRange(new object[]{
                                    "Check.strListRefNo", strListRefNo
                                    });
                                throw CmUtils.CMyException.Raise(
                                    TError.ErridnInventory.Invoice_Invoice_SaveX_NotDelete
                                    , null
                                    , alParamsCoupleError.ToArray()
                                    );

                            }
                        }
                        ////
                    }
                    #endregion
                }
                #endregion

                #region ----// Check Mst_NNT:
                {
                    string strSql_CheckMstNNT = CmUtils.StringUtils.Replace(@"
                            --- #tbl_Invoice_Invoice_ForSTUFF:
                            select distinct 
	                            t.MST
                            into #tbl_Invoice_Invoice_ForSTUFF_Exist
                            from #input_Invoice_Invoice t --//[mylock]
	                            left join Mst_NNT f --//[mylock]
		                            on t.MST = f.MST
                            where(1=1)
	                            and f.MST is null
                            ;

                            --- #tbl_Invoice_Invoice_ForSTUFF_Active:
                            select distinct 
	                            t.MST
                            into #tbl_Invoice_Invoice_ForSTUFF_Active
                            from #input_Invoice_Invoice t --//[mylock]
	                            left join Mst_NNT f --//[mylock]
		                            on t.MST = f.MST
                            where(1=1)
	                            and f.FlagActive = '0'
                            ;

                            --- Return:					
                            select 
                                STUFF(( 
		                            SELECT ',' + f.MST
		                            FROM #tbl_Invoice_Invoice_ForSTUFF_Exist f --//[mylock]
		                            WHERE(1=1)
		                            FOR
		                            XML PATH('')
		                            ), 1, 1, ''
                                ) AS ListMST
                            where(1=1)
                            ;

                            --- Return:					
                            select 
                                STUFF(( 
		                            SELECT ',' + f.MST
		                            FROM #tbl_Invoice_Invoice_ForSTUFF_Active f --//[mylock]
		                            WHERE(1=1)
		                            FOR
		                            XML PATH('')
		                            ), 1, 1, ''
                                ) AS ListMST
                            where(1=1)
                            ;

                            --- Clear For Debug:
                            drop table #tbl_Invoice_Invoice_ForSTUFF_Exist;
                            drop table #tbl_Invoice_Invoice_ForSTUFF_Active;
						");
                    DataSet ds_CheckMstNNT = _cf.db.ExecQuery(
                        strSql_CheckMstNNT
                        );
                    ////
                    DataTable dt_Invoice_Invoice_ForSTUFF_Exist = ds_CheckMstNNT.Tables[0];
                    DataTable dt_Invoice_Invoice_ForSTUFF_Active = ds_CheckMstNNT.Tables[1];
                    /////
                    if (dt_Invoice_Invoice_ForSTUFF_Exist.Rows.Count > 0)
                    {
                        string strListMST = TUtils.CUtils.StdParam(dt_Invoice_Invoice_ForSTUFF_Exist.Rows[0]["ListMST"]);
                        /////
                        if (!string.IsNullOrEmpty(strListMST))
                        {
                            alParamsCoupleError.AddRange(new object[]{
                                "Check.ErrConditionalRaise", "Mst_NNT.MST is null"
                                , "Check.strListMST", strListMST
                                });
                            throw CmUtils.CMyException.Raise(
                                TError.ErridnInventory.Invoice_Invoice_SaveX_Invalid_MstNNT_NotFound
                                , null
                                , alParamsCoupleError.ToArray()
                                );
                        }
                        /////
                    }
                    ////
                    if (dt_Invoice_Invoice_ForSTUFF_Active.Rows.Count > 0)
                    {
                        string strListMST = TUtils.CUtils.StdParam(dt_Invoice_Invoice_ForSTUFF_Active.Rows[0]["ListMST"]);
                        /////
                        if (!string.IsNullOrEmpty(strListMST))
                        {
                            alParamsCoupleError.AddRange(new object[]{
                                "Check.ErrConditionalRaise", "Mst_NNT.FlagActive = '0'"
                                , "Check.strListMST", strListMST
                                });
                            throw CmUtils.CMyException.Raise(
                                TError.ErridnInventory.Invoice_Invoice_SaveX_Invalid_MstNNT_FlagActive
                                , null
                                , alParamsCoupleError.ToArray()
                                );
                        }
                        /////
                    }
                    ////
                }
                #endregion

                #region ----// Check Mst_PaymentMethods:
                {
                    string strSql_CheckPaymentMethods = CmUtils.StringUtils.Replace(@"
                            --- #tbl_Invoice_Invoice_ForSTUFF:
                            select distinct 
	                            t.PaymentMethodCode
                            into #tbl_Invoice_Invoice_ForSTUFF_Exist
                            from #input_Invoice_Invoice t --//[mylock]
	                            left join Mst_PaymentMethods f --//[mylock]
		                            on t.PaymentMethodCode = f.PaymentMethodCode
                            where(1=1)
	                            and f.PaymentMethodCode is null
                            ;

                            --- #tbl_Invoice_Invoice_ForSTUFF_Active:
                            select distinct 
	                            t.PaymentMethodCode
                            into #tbl_Invoice_Invoice_ForSTUFF_Active
                            from #input_Invoice_Invoice t --//[mylock]
	                            left join Mst_PaymentMethods f --//[mylock]
		                            on t.PaymentMethodCode = f.PaymentMethodCode
                            where(1=1)
	                            and f.FlagActive = '0'
                            ;

                            --- Return:					
                            select 
                                STUFF(( 
		                            SELECT ',' + f.PaymentMethodCode
		                            FROM #tbl_Invoice_Invoice_ForSTUFF_Exist f --//[mylock]
		                            WHERE(1=1)
		                            FOR
		                            XML PATH('')
		                            ), 1, 1, ''
                                ) AS ListPaymentMethodCode
                            where(1=1)
                            ;

                            --- Return:					
                            select 
                                STUFF(( 
		                            SELECT ',' + f.PaymentMethodCode
		                            FROM #tbl_Invoice_Invoice_ForSTUFF_Active f --//[mylock]
		                            WHERE(1=1)
		                            FOR
		                            XML PATH('')
		                            ), 1, 1, ''
                                ) AS ListPaymentMethodCode
                            where(1=1)
                            ;

                            --- Clear For Debug:
                            drop table #tbl_Invoice_Invoice_ForSTUFF_Exist;
                            drop table #tbl_Invoice_Invoice_ForSTUFF_Active;
						");
                    DataSet ds_CheckMst_PaymentMethods = _cf.db.ExecQuery(
                        strSql_CheckPaymentMethods
                        );
                    ////
                    DataTable dt_Invoice_Invoice_ForSTUFF_Exist = ds_CheckMst_PaymentMethods.Tables[0];
                    DataTable dt_Invoice_Invoice_ForSTUFF_Active = ds_CheckMst_PaymentMethods.Tables[1];
                    /////
                    if (dt_Invoice_Invoice_ForSTUFF_Exist.Rows.Count > 0)
                    {
                        string strListPaymentMethodCode = TUtils.CUtils.StdParam(dt_Invoice_Invoice_ForSTUFF_Exist.Rows[0]["ListPaymentMethodCode"]);
                        /////
                        if (!string.IsNullOrEmpty(strListPaymentMethodCode))
                        {
                            alParamsCoupleError.AddRange(new object[]{
                                "Check.ErrConditionalRaise", "Mst_PaymentMethods.PaymentMethodCode is null"
                                , "Check.strListPaymentMethodCode", strListPaymentMethodCode
                                });
                            throw CmUtils.CMyException.Raise(
                                TError.ErridnInventory.Invoice_Invoice_SaveX_Invalid_PaymentMethods_NotFound
                                , null
                                , alParamsCoupleError.ToArray()
                                );
                        }
                        /////
                    }
                    ////
                    if (dt_Invoice_Invoice_ForSTUFF_Active.Rows.Count > 0)
                    {
                        string strListPaymentMethodCode = TUtils.CUtils.StdParam(dt_Invoice_Invoice_ForSTUFF_Active.Rows[0]["ListPaymentMethodCode"]);
                        /////
                        if (!string.IsNullOrEmpty(strListPaymentMethodCode))
                        {
                            alParamsCoupleError.AddRange(new object[]{
                                "Check.ErrConditionalRaise", "Mst_PaymentMethods.FlagActive = '0'"
                                , "Check.strListPaymentMethodCode", strListPaymentMethodCode
                                });
                            throw CmUtils.CMyException.Raise(
                                TError.ErridnInventory.Invoice_Invoice_SaveX_Invalid_PaymentMethods_FlagActive
                                , null
                                , alParamsCoupleError.ToArray()
                                );
                        }
                        /////
                    }
                    ////
                }
                #endregion

                #region ----// Check Mst_InvoiceType2:
                {
                    string strSql_CheckInvoiceType2 = CmUtils.StringUtils.Replace(@"
                            --- #tbl_Invoice_Invoice_ForSTUFF:
                            select distinct 
	                            t.InvoiceType2
                            into #tbl_Invoice_Invoice_ForSTUFF_Exist
                            from #input_Invoice_Invoice t --//[mylock]
	                            left join Mst_InvoiceType2 f --//[mylock]
		                            on t.InvoiceType2 = f.InvoiceType2
                            where(1=1)
	                            and f.InvoiceType2 is null
                            ;

                            --- #tbl_Invoice_Invoice_ForSTUFF_Active:
                            select distinct 
	                            t.InvoiceType2
                            into #tbl_Invoice_Invoice_ForSTUFF_Active
                            from #input_Invoice_Invoice t --//[mylock]
	                            left join Mst_InvoiceType2 f --//[mylock]
		                            on t.InvoiceType2 = f.InvoiceType2
                            where(1=1)
	                            and f.FlagActive = '0'
                            ;

                            --- Return:					
                            select 
                                STUFF(( 
		                            SELECT ',' + f.InvoiceType2
		                            FROM #tbl_Invoice_Invoice_ForSTUFF_Exist f --//[mylock]
		                            WHERE(1=1)
		                            FOR
		                            XML PATH('')
		                            ), 1, 1, ''
                                ) AS ListInvoiceType2
                            where(1=1)
                            ;

                            --- Return:					
                            select 
                                STUFF(( 
		                            SELECT ',' + f.InvoiceType2
		                            FROM #tbl_Invoice_Invoice_ForSTUFF_Active f --//[mylock]
		                            WHERE(1=1)
		                            FOR
		                            XML PATH('')
		                            ), 1, 1, ''
                                ) AS ListInvoiceType2
                            where(1=1)
                            ;

                            --- Clear For Debug:
                            drop table #tbl_Invoice_Invoice_ForSTUFF_Exist;
                            drop table #tbl_Invoice_Invoice_ForSTUFF_Active;
						");
                    DataSet ds_CheckMst_InvoiceType2 = _cf.db.ExecQuery(
                        strSql_CheckInvoiceType2
                        );
                    ////
                    DataTable dt_Invoice_Invoice_ForSTUFF_Exist = ds_CheckMst_InvoiceType2.Tables[0];
                    DataTable dt_Invoice_Invoice_ForSTUFF_Active = ds_CheckMst_InvoiceType2.Tables[1];
                    /////
                    if (dt_Invoice_Invoice_ForSTUFF_Exist.Rows.Count > 0)
                    {
                        string strListInvoiceType2 = TUtils.CUtils.StdParam(dt_Invoice_Invoice_ForSTUFF_Exist.Rows[0]["ListInvoiceType2"]);
                        /////
                        if (!string.IsNullOrEmpty(strListInvoiceType2))
                        {
                            alParamsCoupleError.AddRange(new object[]{
                                "Check.ErrConditionalRaise", "Mst_InvoiceType2.InvoiceType2 is null"
                                , "Check.strListInvoiceType2", strListInvoiceType2
                                });
                            throw CmUtils.CMyException.Raise(
                                TError.ErridnInventory.Invoice_Invoice_SaveX_Invalid_InvoiceType2_NotFound
                                , null
                                , alParamsCoupleError.ToArray()
                                );
                        }
                        /////
                    }
                    ////
                    if (dt_Invoice_Invoice_ForSTUFF_Active.Rows.Count > 0)
                    {
                        string strListInvoiceType2 = TUtils.CUtils.StdParam(dt_Invoice_Invoice_ForSTUFF_Active.Rows[0]["ListInvoiceType2"]);
                        /////
                        if (!string.IsNullOrEmpty(strListInvoiceType2))
                        {
                            alParamsCoupleError.AddRange(new object[]{
                                "Check.ErrConditionalRaise", "Mst_InvoiceType2.FlagActive = '0'"
                                , "Check.strListInvoiceType2", strListInvoiceType2
                                });
                            throw CmUtils.CMyException.Raise(
                                TError.ErridnInventory.Invoice_Invoice_SaveX_Invalid_InvoiceType2_FlagActive
                                , null
                                , alParamsCoupleError.ToArray()
                                );
                        }
                        /////
                    }
                    ////
                }
                #endregion

                #region ----// Check Mst_SourceInvoice:
                {
                    string strSql_CheckMst_SourceInvoice = CmUtils.StringUtils.Replace(@"
                            --- #tbl_Invoice_Invoice_ForSTUFF:
                            select distinct 
	                            t.SourceInvoiceCode
                            into #tbl_Invoice_Invoice_ForSTUFF_Exist
                            from #input_Invoice_Invoice t --//[mylock]
	                            left join Mst_SourceInvoice f --//[mylock]
		                            on t.SourceInvoiceCode = f.SourceInvoiceCode
                            where(1=1)
	                            and f.SourceInvoiceCode is null
                            ;

                            --- #tbl_Invoice_Invoice_ForSTUFF_Active:
                            select distinct 
	                            t.SourceInvoiceCode
                            into #tbl_Invoice_Invoice_ForSTUFF_Active
                            from #input_Invoice_Invoice t --//[mylock]
	                            left join Mst_SourceInvoice f --//[mylock]
		                            on t.SourceInvoiceCode = f.SourceInvoiceCode
                            where(1=1)
	                            and f.FlagActive = '0'
                            ;

                            --- Return:					
                            select 
                                STUFF(( 
		                            SELECT ',' + f.SourceInvoiceCode
		                            FROM #tbl_Invoice_Invoice_ForSTUFF_Exist f --//[mylock]
		                            WHERE(1=1)
		                            FOR
		                            XML PATH('')
		                            ), 1, 1, ''
                                ) AS ListSourceInvoiceCode
                            where(1=1)
                            ;

                            --- Return:					
                            select 
                                STUFF(( 
		                            SELECT ',' + f.SourceInvoiceCode
		                            FROM #tbl_Invoice_Invoice_ForSTUFF_Active f --//[mylock]
		                            WHERE(1=1)
		                            FOR
		                            XML PATH('')
		                            ), 1, 1, ''
                                ) AS ListSourceInvoiceCode
                            where(1=1)
                            ;

                            --- Clear For Debug:
                            drop table #tbl_Invoice_Invoice_ForSTUFF_Exist;
                            drop table #tbl_Invoice_Invoice_ForSTUFF_Active;
						");
                    DataSet ds_CheckMst_PaymentMethods = _cf.db.ExecQuery(
                        strSql_CheckMst_SourceInvoice
                        );
                    ////
                    DataTable dt_Invoice_Invoice_ForSTUFF_Exist = ds_CheckMst_PaymentMethods.Tables[0];
                    DataTable dt_Invoice_Invoice_ForSTUFF_Active = ds_CheckMst_PaymentMethods.Tables[1];
                    /////
                    if (dt_Invoice_Invoice_ForSTUFF_Exist.Rows.Count > 0)
                    {
                        string strListSourceInvoiceCode = TUtils.CUtils.StdParam(dt_Invoice_Invoice_ForSTUFF_Exist.Rows[0]["ListSourceInvoiceCode"]);
                        /////
                        if (!string.IsNullOrEmpty(strListSourceInvoiceCode))
                        {
                            alParamsCoupleError.AddRange(new object[]{
                                "Check.ErrConditionalRaise", "Mst_SourceInvoice.SourceInvoiceCode is null"
                                , "Check.strListSourceInvoiceCode", strListSourceInvoiceCode
                                });
                            throw CmUtils.CMyException.Raise(
                                TError.ErridnInventory.Invoice_Invoice_SaveX_Invalid_SourceInvoice_NotFound
                                , null
                                , alParamsCoupleError.ToArray()
                                );
                        }
                        /////
                    }
                    ////
                    if (dt_Invoice_Invoice_ForSTUFF_Active.Rows.Count > 0)
                    {
                        string strListSourceInvoiceCode = TUtils.CUtils.StdParam(dt_Invoice_Invoice_ForSTUFF_Active.Rows[0]["ListSourceInvoiceCode"]);
                        /////
                        if (!string.IsNullOrEmpty(strListSourceInvoiceCode))
                        {
                            alParamsCoupleError.AddRange(new object[]{
                                "Check.ErrConditionalRaise", "Mst_SourceInvoice.FlagActive = '0'"
                                , "Check.strListPaymentMethodCode", strListSourceInvoiceCode
                                });
                            throw CmUtils.CMyException.Raise(
                                TError.ErridnInventory.Invoice_Invoice_SaveX_Invalid_SourceInvoice_FlagActive
                                , null
                                , alParamsCoupleError.ToArray()
                                );
                        }
                        /////
                    }
                    ////
                }
                #endregion

                #region ----// Check Invoice_TempInvoice:
                {
                    string strSql_CheckInvoice_TempInvoice = CmUtils.StringUtils.Replace(@"
                            --- #tbl_Invoice_Invoice_ForSTUFF_Exist:
                            select distinct 
	                            t.TInvoiceCode
                            into #tbl_Invoice_Invoice_ForSTUFF_Exist
                            from #input_Invoice_Invoice t --//[mylock]
	                            left join Invoice_TempInvoice f --//[mylock]
		                            on t.TInvoiceCode = f.TInvoiceCode
                            where(1=1)
	                            and f.TInvoiceCode is null
                            ;

                            --- #tbl_Invoice_Invoice_ForSTUFF_Active:
                            select distinct 
	                            t.TInvoiceCode
                            into #tbl_Invoice_Invoice_ForSTUFF_Active
                            from #input_Invoice_Invoice t --//[mylock]
	                            left join Invoice_TempInvoice f --//[mylock]
		                            on t.TInvoiceCode = f.TInvoiceCode
                            where(1=1)
	                            and f.TInvoiceStatus not in ('ISSUED')
                            ;

                            --- Return:					
                            select 
                                STUFF(( 
		                            SELECT ',' + f.TInvoiceCode
		                            FROM #tbl_Invoice_Invoice_ForSTUFF_Exist f --//[mylock]
		                            WHERE(1=1)
		                            FOR
		                            XML PATH('')
		                            ), 1, 1, ''
                                ) AS ListTInvoiceCode
                            where(1=1)
                            ;

                            --- Return:					
                            select 
                                STUFF(( 
		                            SELECT ',' + f.TInvoiceCode
		                            FROM #tbl_Invoice_Invoice_ForSTUFF_Active f --//[mylock]
		                            WHERE(1=1)
		                            FOR
		                            XML PATH('')
		                            ), 1, 1, ''
                                ) AS ListTInvoiceCode
                            where(1=1)
                            ;

                            --- Clear For Debug:
                            drop table #tbl_Invoice_Invoice_ForSTUFF_Exist;
                            drop table #tbl_Invoice_Invoice_ForSTUFF_Active;
						");
                    DataSet ds_CheckInvoice_TempInvoice = _cf.db.ExecQuery(
                        strSql_CheckInvoice_TempInvoice
                        );
                    ////
                    DataTable dt_Invoice_Invoice_ForSTUFF_Exist = ds_CheckInvoice_TempInvoice.Tables[0];
                    DataTable dt_Invoice_Invoice_ForSTUFF_Active = ds_CheckInvoice_TempInvoice.Tables[1];
                    /////
                    if (dt_Invoice_Invoice_ForSTUFF_Exist.Rows.Count > 0)
                    {
                        string strListTInvoiceCode = TUtils.CUtils.StdParam(dt_Invoice_Invoice_ForSTUFF_Exist.Rows[0]["ListTInvoiceCode"]);
                        /////
                        if (!string.IsNullOrEmpty(strListTInvoiceCode))
                        {
                            alParamsCoupleError.AddRange(new object[]{
                                "Check.ErrConditionalRaise", "Invoice_TempInvoice.TInvoiceCode is null"
                                , "Check.strListTInvoiceCode", strListTInvoiceCode
                                });
                            throw CmUtils.CMyException.Raise(
                                TError.ErridnInventory.Invoice_Invoice_SaveX_Invalid_TempInvoice_NotFound
                                , null
                                , alParamsCoupleError.ToArray()
                                );
                        }
                        /////
                    }
                    ////
                    if (dt_Invoice_Invoice_ForSTUFF_Active.Rows.Count > 0)
                    {
                        string strListTInvoiceCode = TUtils.CUtils.StdParam(dt_Invoice_Invoice_ForSTUFF_Active.Rows[0]["ListTInvoiceCode"]);
                        /////
                        if (!string.IsNullOrEmpty(strListTInvoiceCode))
                        {
                            alParamsCoupleError.AddRange(new object[]{
                                "Check.ErrConditionalRaise", "Invoice_TempInvoice.TInvoiceStatus not in ('ISSUED')"
                                , "Check.strListTInvoiceCode", strListTInvoiceCode
                                });
                            throw CmUtils.CMyException.Raise(
                                TError.ErridnInventory.Invoice_Invoice_SaveX_Invalid_TempInvoice_StatusNotMatch
                                , null
                                , alParamsCoupleError.ToArray()
                                );
                        }
                        /////
                    }
                    ////
                }
                #endregion

                #region ----// Check SL hóa đơn sử dụng:
                {
                    string strSql_CheckInvoice_TempInvoice = CmUtils.StringUtils.Replace(@"
                            --- #tbl_Invoice_TempInvoice:
                            select distinct 
	                            t.TInvoiceCode
                            into #tbl_Invoice_TempInvoice
                            from #input_Invoice_Invoice t --//[mylock]
	                            inner join Invoice_TempInvoice f --//[mylock]
		                            on t.TInvoiceCode = t.TInvoiceCode
                            where(1=1)
                            ;

							---- Return:
							select 
								t.TInvoiceCode
								, f.EndInvoiceNo
								, f.StartInvoiceNo
								, f.QtyUsed
								, (f.EndInvoiceNo - f.StartInvoiceNo + 1 - f.QtyUsed) QtyRemain
							from #tbl_Invoice_TempInvoice t --//[mylock]
								inner join Invoice_TempInvoice f --//[mylock]
									on t.TInvoiceCode = f.TInvoiceCode
							where(1=1)
								and (f.EndInvoiceNo - f.StartInvoiceNo + 1 - f.QtyUsed) < 1
							;

                            --- Clear For Debug:
                            drop table #tbl_Invoice_TempInvoice;
						");
                    DataSet ds_Invoice_TempInvoice = _cf.db.ExecQuery(
                        strSql_CheckInvoice_TempInvoice
                        );
                    ////
                    DataTable dt_Invoice_TempInvoice = ds_Invoice_TempInvoice.Tables[0];
                    /////
                    if (dt_Invoice_TempInvoice.Rows.Count > 0)
                    {
                        alParamsCoupleError.AddRange(new object[]{
                            "Check.strTInvoiceCode", dt_Invoice_TempInvoice.Rows[0]["TInvoiceCode"]
                            , "Check.DB.StartInvoiceNo", dt_Invoice_TempInvoice.Rows[0]["StartInvoiceNo"]
                            , "Check.DB.EndInvoiceNo", dt_Invoice_TempInvoice.Rows[0]["EndInvoiceNo"]
                            , "Check.DB.QtyUsed",  dt_Invoice_TempInvoice.Rows[0]["QtyUsed"]
                            , "Check.ErrConditionRaise", "((nEndInvoiceNo - nStartInvoiceNo - nQtyUsed)< 1)"
                            });
                        throw CmUtils.CMyException.Raise(
                            TError.ErridnInventory.Invoice_Invoice_SaveX_Invalid_SourceInvoice_NotFound
                            , null
                            , alParamsCoupleError.ToArray()
                            );
                    }
                    ////
                }
                #endregion
            }
            #endregion

            #region // Build Invoice_Invoice:
            {
                string strSql_Build = CmUtils.StringUtils.Replace(@"
                        ----- #tbl_Invoice_Invoice_Build:
                        select 
	                        t.InvoiceCode
	                        , t.MST
	                        , t.NetworkID
	                        , t.RefNo
	                        , t.FormNo
	                        , t.Sign
	                        , t.SourceInvoiceCode
	                        , t.InvoiceAdjType
	                        , t.InvoiceType2
	                        , t.PaymentMethodCode
	                        , t.CustomerNNTCode
	                        , t.CustomerNNTName
	                        , t.CustomerNNTAddress
	                        , t.CustomerNNTPhone
	                        , t.CustomerNNTBankName
	                        , t.CustomerNNTEmail
	                        , t.CustomerNNTAccNo
	                        , t.CustomerNNTBuyerName
	                        , t.CustomerMST
	                        , t.TInvoiceCode
	                        , t.InvoiceNo
	                        , t.InvoiceDateUTC
	                        , t.EmailSend
	                        , t.InvoiceFileSpec
	                        , t.InvoiceFilePath
	                        , null InvoicePDFFilePath
	                        , t.TotalValInvoice
	                        , t.TotalValVAT
	                        , t.TotalValPmt
	                        , IsNull(f.CreateDTimeUTC, '@strLogLUDTimeUTC') CreateDTimeUTC --t.CreateDTimeUTC
	                        , IsNull(f.CreateBy, '@strLogLUBy') CreateBy --t.CreateBy
	                        , t.InvoiceNoDTimeUTC
	                        , t.InvoiceNoBy
	                        , t.SignDTimeUTC
	                        , t.SignBy
	                        , t.ApprDTimeUTC
	                        , t.ApprBy
	                        , t.CancelDTimeUTC
	                        , t.CancelBy
	                        , t.SendEmailDTimeUTC
	                        , t.SendEmailBy
	                        , t.IssuedDTimeUTC
	                        , t.IssuedBy
                            , null AttachedDelFilePath
                            , null DeleteReason
                            , t.DeleteDTimeUTC
	                        , t.DeleteBy
	                        , t.ChangeDTimeUTC
	                        , t.ChangeBy
	                        , t.InvoiceVerifyCQTCode
	                        , t.CurrencyCode
	                        , t.CurrencyRate
	                        , t.ValGoodsNotTaxable
	                        , t.ValGoodsNotChargeTax
	                        , t.ValGoodsVAT5
	                        , t.ValVAT5
	                        , t.ValGoodsVAT10
	                        , t.ValVAT10
	                        , t.NNTFullName
	                        , t.NNTFullAdress
	                        , t.NNTPhone
	                        , t.NNTFax
	                        , t.NNTEmail
	                        , t.NNTWebsite
	                        , t.NNTAccNo
	                        , t.NNTBankName
	                        , '@strLogLUDTimeUTC' LUDTimeUTC --t.LUDTimeUTC
	                        , '@strLogLUBy' LUBy --t.LUBy
	                        , t.Remark
	                        , t.InvoiceCF1
	                        , t.InvoiceCF2
	                        , t.InvoiceCF3
	                        , t.InvoiceCF4
	                        , t.InvoiceCF5
	                        , t.InvoiceCF6
	                        , t.InvoiceCF7
	                        , t.InvoiceCF8
	                        , t.InvoiceCF9
	                        , t.InvoiceCF10
	                        --, t.FlagConfirm
	                        , '1' FlagChange --t.FlagChange
	                        , null FlagPushOutSite -- t.FlagPushOutSite
	                        , null FlagDeleteOutSite -- t.FlagDeleteOutSite
	                        , '@strInvoiceStatus' InvoiceStatus --t.InvoiceStatus
	                        , '@strLogLUDTimeUTC' LogLUDTimeUTC --t.LogLUDTimeUTC
	                        , '@strLogLUBy' LogLUBy --t.LogLUBy
                        into #tbl_Invoice_Invoice_Build
                        from #input_Invoice_Invoice t --//[mylock]
                            left join Invoice_Invoice f --//[mylock]
                                on t.InvoiceCode = f.InvoiceCode
                        where(1=1)
                        ;

                        select null tbl_Invoice_Invoice_Build, t.* from #tbl_Invoice_Invoice_Build t --//[mylock];
                    ;"
                    , "@strInvoiceStatus", TConst.InvoiceStatus.Pending
                    , "@strLogLUDTimeUTC", dtimeSys.ToString("yyyy-MM-dd hh:mm:ss")
                    , "@strLogLUBy", strWAUserCode
                    );
                DataTable dt_Build = _cf.db.ExecQuery(
                    strSql_Build
                    ).Tables[0];
                /////
            }
            #endregion

            #region //// Refine and Check Input Invoice_InvoiceDtl:
            ////
            DataTable dtInput_Invoice_InvoiceDtl = null;
            if (!bIsDelete)
            {
                ////
                string strTableCheck = "Invoice_InvoiceDtl";
                ////
                if (!dsData.Tables.Contains(strTableCheck))
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.TableName", strTableCheck
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Invoice_Invoice_SaveX_Input_InvoiceDtlTblNotFound
                        , null
                        , alParamsCoupleError.ToArray()
                        );
                }
                dtInput_Invoice_InvoiceDtl = dsData.Tables[strTableCheck];
                ////

                if (dtInput_Invoice_InvoiceDtl.Rows.Count < 1)
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.TableName", strTableCheck
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Invoice_Invoice_SaveX_Input_InvoiceDtlTblInvalid
                        , null
                        , alParamsCoupleError.ToArray()
                        );
                }
                ////
                TUtils.CUtils.StdDataInTable(
                    dtInput_Invoice_InvoiceDtl // dtData
                    , "StdParam", "InvoiceCode" // arrstrCouple
                    , "StdParam", "Idx" // arrstrCouple
                    , "StdParam", "NetworkID" // arrstrCouple
                    , "StdParam", "SpecCode" // arrstrCouple
                    , "", "SpecName" // arrstrCouple
                    , "StdParam", "ProductID" // arrstrCouple
                    , "", "ProductName" // arrstrCouple
                    , "StdParam", "VATRateCode" // arrstrCouple
                    , "float", "VATRate" // arrstrCouple
                    , "StdParam", "UnitCode" // arrstrCouple
                    , "", "UnitName" // arrstrCouple
                    , "float", "UnitPrice" // arrstrCouple
                    , "float", "Qty" // arrstrCouple
                    , "float", "ValInvoice" // arrstrCouple
                    , "float", "ValTax" // arrstrCouple
                    , "StdParam", "InventoryCode" // arrstrCouple
                    , "float", "DiscountRate" // arrstrCouple
                    , "float", "ValDiscount" // arrstrCouple
                    , "", "Remark" // arrstrCouple
                    , "", "InvoiceDCF1" // arrstrCouple
                    , "", "InvoiceDCF2" // arrstrCouple
                    , "", "InvoiceDCF3" // arrstrCouple
                    , "", "InvoiceDCF4" // arrstrCouple
                    , "", "InvoiceDCF5" // arrstrCouple
                    );
                ////
                //TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_InvoiceDtl, "InvoiceCode", typeof(object));
                //TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_InvoiceDtl, "NetworkID", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_InvoiceDtl, "InvoiceDtlStatus", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_InvoiceDtl, "LogLUDTimeUTC", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_InvoiceDtl, "LogLUBy", typeof(object));
                ////////
            }
            #endregion

            #region //// SaveTemp Invoice_InvoiceDtl For Check:
            if (!bIsDelete)
            {
                // Upload:
                TUtils.CUtils.MyBuildDBDT_Common(
                    _cf.db // db
                    , "#input_Invoice_InvoiceDtl" // strTableName
                    , new object[] {
                            "InvoiceCode", TConst.BizMix.Default_DBColType
                            , "Idx", TConst.BizMix.Default_DBColType
                            , "NetworkID", TConst.BizMix.Default_DBColType
                            , "SpecCode", TConst.BizMix.Default_DBColType
                            , "SpecName", TConst.BizMix.Default_DBColType
                            , "ProductID", TConst.BizMix.Default_DBColType
                            , "ProductName", TConst.BizMix.Default_DBColType
                            , "VATRateCode", TConst.BizMix.Default_DBColType
                            , "VATRate", "float"
                            , "UnitCode", TConst.BizMix.Default_DBColType
                            , "UnitName", TConst.BizMix.Default_DBColType
                            , "UnitPrice", "float"
                            , "Qty", "float"
                            , "ValInvoice", "float"
                            , "ValTax", "float"
                            , "InventoryCode", TConst.BizMix.Default_DBColType
                            , "DiscountRate", "float"
                            , "ValDiscount", "float"
                            , "InvoiceDtlStatus", TConst.BizMix.Default_DBColType
                            , "Remark", TConst.BizMix.Default_DBColType
                            , "InvoiceDCF1", TConst.BizMix.Default_DBColType
                            , "InvoiceDCF2", TConst.BizMix.Default_DBColType
                            , "InvoiceDCF3", TConst.BizMix.Default_DBColType
                            , "InvoiceDCF4", TConst.BizMix.Default_DBColType
                            , "InvoiceDCF5", TConst.BizMix.Default_DBColType
                            , "LogLUDTimeUTC", TConst.BizMix.Default_DBColType
                            , "LogLUBy", TConst.BizMix.Default_DBColType
                        } // arrSingleStructure
                    , dtInput_Invoice_InvoiceDtl // dtData
                );
            }
            #endregion

            #region // Refine and Check Input Invoice_InvoiceDtl:
            if (!bIsDelete)
            {
                #region ----// Check ProductID + SpecCode là duy nhất:
                {
                    string strSql_CheckProducID = CmUtils.StringUtils.Replace(@"                            
                            ---- #tbl_Invoice_InvoiceDtl_TotalProductID:
                            select 
	                            t.InvoiceCode
	                            , t.SpecCode
	                            , t.ProductID
	                            , count(0) QtyProductID
                            into #tbl_Invoice_InvoiceDtl_TotalProductID
                            from #input_Invoice_InvoiceDtl t --//[mylock]
                            where(1=1)
	                            and t.ProductID is not null
                            group by 
	                            t.InvoiceCode
	                            , t.SpecCode
	                            , t.ProductID
                            ;

                            ---- Return:
                            select top 1
	                            t.InvoiceCode
	                            , t.ProductID
	                            , t.SpecCode
	                            , t.QtyProductID
                            from #tbl_Invoice_InvoiceDtl_TotalProductID t --//[mylock]
                            where(1=1)
	                            and t.QtyProductID > 1
                            ;

                            -- Clear For Debug:
                            drop table #tbl_Invoice_InvoiceDtl_TotalProductID;

						");
                    DataTable dt_CheckProductID = _cf.db.ExecQuery(
                        strSql_CheckProducID
                        ).Tables[0];
                    /////
                    if (dt_CheckProductID.Rows.Count > 0)
                    {
                        alParamsCoupleError.AddRange(new object[]{
                            "Check.ErrConditionalRaise", "t.QtyProductID > 1"
                            //, "Check.NumberRows", dt_CheckProductID.Rows.Count
                            , "Check.InvoiceCode", dt_CheckProductID.Rows[0]["InvoiceCode"]
                            , "Check.SpecCode", dt_CheckProductID.Rows[0]["SpecCode"]
                            , "Check.ProductID", dt_CheckProductID.Rows[0]["ProductID"]
                            , "Check.QtyProductID", dt_CheckProductID.Rows[0]["QtyProductID"]
                            });
                        throw CmUtils.CMyException.Raise(
                            TError.ErridnInventory.Invoice_Invoice_SaveX_Input_InvoiceDtl_ProductIDDuplicate
                            , null
                            , alParamsCoupleError.ToArray()
                            );
                    }
                    ////
                }
                #endregion

                #region ----// Check SpecCode là duy nhất:
                {
                    string strSql_CheckSpec = CmUtils.StringUtils.Replace(@"                         
                            ---- #tbl_Invoice_InvoiceDtl_TotalSpec:
                            select 
	                            t.InvoiceCode
	                            , t.SpecCode
	                            , count(0) QtySpecCode
                            into #tbl_Invoice_InvoiceDtl_TotalSpec
                            from #input_Invoice_InvoiceDtl t --//[mylock]
                            where(1=1)
	                            and t.ProductID is null
								and t.SpecCode is not null
                            group by 
	                            t.InvoiceCode
	                            , t.SpecCode
                            ;

                            ---- Return:
                            select top 1
	                            t.InvoiceCode
	                            , t.SpecCode
	                            , t.QtySpecCode
                            from #tbl_Invoice_InvoiceDtl_TotalSpec t --//[mylock]
                            where(1=1)
	                            and t.QtySpecCode > 1
                            ;

                            -- Clear For Debug:
                            drop table #tbl_Invoice_InvoiceDtl_TotalSpec;

						");
                    DataTable dt_CheckSpecCode = _cf.db.ExecQuery(
                        strSql_CheckSpec
                        ).Tables[0];
                    /////
                    if (dt_CheckSpecCode.Rows.Count > 0)
                    {
                        alParamsCoupleError.AddRange(new object[]{
                            "Check.ErrConditionalRaise", "t.QtyProductID > 1"
                            //, "Check.NumberRows", dt_CheckProductID.Rows.Count
                            , "Check.InvoiceCode", dt_CheckSpecCode.Rows[0]["InvoiceCode"]
                            , "Check.SpecCode", dt_CheckSpecCode.Rows[0]["SpecCode"]
                            , "Check.QtySpecCode", dt_CheckSpecCode.Rows[0]["QtySpecCode"]
                            });
                        throw CmUtils.CMyException.Raise(
                            TError.ErridnInventory.Invoice_Invoice_SaveX_Input_InvoiceDtl_SpecCodeDuplicate
                            , null
                            , alParamsCoupleError.ToArray()
                            );
                    }
                    ////
                }
                #endregion

            }
            #endregion

            #region // Build Invoice_InvoiceDtl:
            if (!bIsDelete)
            {
                string strSql_Build = CmUtils.StringUtils.Replace(@"
                        ----- #tbl_Invoice_InvoiceDtl_Build:
                        select 
	                        t.InvoiceCode
							, Row_Number() over( partition by t.InvoiceCode order by t.Idx asc) Idx 
							--, Row_Number() over (order by t.Idx desc) Idx 
	                        --, t.Idx
	                        , t.NetworkID
	                        , t.SpecCode
	                        , t.SpecName
	                        , t.ProductID
	                        , t.ProductName
	                        , t.VATRateCode
	                        , t.VATRate
	                        , t.UnitCode
	                        , t.UnitName
	                        , t.UnitPrice
	                        , t.Qty
	                        , t.ValInvoice
	                        , t.ValTax
	                        , t.InventoryCode
	                        , t.DiscountRate
	                        , t.ValDiscount
	                        , '@strInvoiceStatus' InvoiceDtlStatus --t.InvoiceDtlStatus
	                        , t.Remark
	                        , t.InvoiceDCF1
	                        , t.InvoiceDCF2
	                        , t.InvoiceDCF3
	                        , t.InvoiceDCF4
	                        , t.InvoiceDCF5
	                        , '@strLogLUDTimeUTC' LogLUDTimeUTC --t.LogLUDTimeUTC
	                        , '@strLogLUBy' LogLUBy --t.LogLUBy
                        into #tbl_Invoice_InvoiceDtl_Build
                        from #input_Invoice_InvoiceDtl t --//[mylock]

                        select null tbl_Invoice_InvoiceDtl_Build, t.* from #tbl_Invoice_InvoiceDtl_Build t --//[mylock];
                    ;"
                    , "@strInvoiceStatus", TConst.InvoiceStatus.Pending
                    , "@strLogLUDTimeUTC", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
                    , "@strLogLUBy", strWAUserCode
                    );
                DataTable dt_Build = _cf.db.ExecQuery(
                    strSql_Build
                    ).Tables[0];
                /////
            }
            #endregion

            #region // SaveDB:
            {
                //// Clear All:
                {
                    string strSqlDelete = CmUtils.StringUtils.Replace(@"
                            ---- #tbl_Invoice_InvoiceDtl:
                            select 
                                t.InvoiceCode
                                , t.Idx
                            into #tbl_Invoice_InvoiceDtl
                            from Invoice_InvoiceDtl t --//[mylock]
	                            inner join #input_Invoice_Invoice f --//[mylock]
		                            on t.InvoiceCode = f.InvoiceCode
                            where (1=1)
                            ;

                            --- Delete:
                            ---- Invoice_InvoiceDtl:
                            delete t 
                            from Invoice_InvoiceDtl t --//[mylock]
	                            inner join #tbl_Invoice_InvoiceDtl f --//[mylock]
		                            on t.InvoiceCode = f.InvoiceCode
		                                and t.Idx = f.Idx
                            where (1=1)
                            ;

                            ---- Invoice_Invoice:
                            delete t
                            from Invoice_Invoice t --//[mylock]
	                            inner join #input_Invoice_Invoice f --//[mylock]
		                            on t.InvoiceCode = f.InvoiceCode
                            where (1=1)
                            ;

                            --- Clear For Debug:
                            drop table #tbl_Invoice_InvoiceDtl;
						");
                    DataSet dtDB = _cf.db.ExecQuery(
                        strSqlDelete
                        );
                }

                //// Insert All:
                if (!bIsDelete)
                {
                    #region // Insert:
                    {
                        ////
                        string zzzzClauseInsert_Invoice_Invoice_zSave = CmUtils.StringUtils.Replace(@"
                                ---- Invoice_Invoice:                                
                                insert into Invoice_Invoice(
	                                InvoiceCode
	                                , MST
	                                , NetworkID
	                                , RefNo
	                                , FormNo
	                                , Sign
	                                , SourceInvoiceCode
	                                , InvoiceAdjType
	                                , PaymentMethodCode
	                                , InvoiceType2
	                                , CustomerNNTCode
	                                , CustomerNNTName
	                                , CustomerNNTAddress
	                                , CustomerNNTPhone
	                                , CustomerNNTBankName
	                                , CustomerNNTEmail
	                                , CustomerNNTAccNo
	                                , CustomerNNTBuyerName
	                                , CustomerMST
	                                , TInvoiceCode
	                                , InvoiceNo
	                                , InvoiceDateUTC
	                                , EmailSend
	                                , InvoiceFileSpec
	                                , InvoiceFilePath
	                                , InvoicePDFFilePath
	                                , TotalValInvoice
	                                , TotalValVAT
	                                , TotalValPmt
	                                , CreateDTimeUTC
	                                , CreateBy
	                                , InvoiceNoDTimeUTC
	                                , InvoiceNoBy
	                                , SignDTimeUTC
	                                , SignBy
	                                , ApprDTimeUTC
	                                , ApprBy
	                                , CancelDTimeUTC
	                                , CancelBy
	                                , SendEmailDTimeUTC
	                                , SendEmailBy
	                                , IssuedDTimeUTC
	                                , IssuedBy
	                                , AttachedDelFilePath
	                                , DeleteReason
	                                , DeleteDTimeUTC
	                                , DeleteBy
	                                , ChangeDTimeUTC
	                                , ChangeBy
	                                , InvoiceVerifyCQTCode
	                                , CurrencyCode
	                                , CurrencyRate
	                                , ValGoodsNotTaxable
	                                , ValGoodsNotChargeTax
	                                , ValGoodsVAT5
	                                , ValVAT5
	                                , ValGoodsVAT10
	                                , ValVAT10
	                                , NNTFullName
	                                , NNTFullAdress
	                                , NNTPhone
	                                , NNTFax
	                                , NNTEmail
	                                , NNTWebsite
	                                , NNTAccNo
	                                , NNTBankName
	                                , LUDTimeUTC
	                                , LUBy
	                                , Remark
	                                , InvoiceCF1
	                                , InvoiceCF2
	                                , InvoiceCF3
	                                , InvoiceCF4
	                                , InvoiceCF5
	                                , InvoiceCF6
	                                , InvoiceCF7
	                                , InvoiceCF8
	                                , InvoiceCF9
	                                , InvoiceCF10
	                                , FlagChange
	                                , FlagPushOutSite
	                                , FlagDeleteOutSite
	                                , InvoiceStatus
	                                , LogLUDTimeUTC
	                                , LogLUBy
                                )
                                select 
	                                t.InvoiceCode
	                                , t.MST
	                                , t.NetworkID
	                                , t.RefNo
	                                , t.FormNo
	                                , t.Sign
	                                , t.SourceInvoiceCode
	                                , t.InvoiceAdjType
	                                , t.PaymentMethodCode
	                                , t.InvoiceType2
	                                , t.CustomerNNTCode
	                                , t.CustomerNNTName
	                                , t.CustomerNNTAddress
	                                , t.CustomerNNTPhone
	                                , t.CustomerNNTBankName
	                                , t.CustomerNNTEmail
	                                , t.CustomerNNTAccNo
	                                , t.CustomerNNTBuyerName
	                                , t.CustomerMST
	                                , t.TInvoiceCode
	                                , t.InvoiceNo
	                                , t.InvoiceDateUTC
	                                , t.EmailSend
	                                , t.InvoiceFileSpec
	                                , t.InvoiceFilePath
	                                , t.InvoicePDFFilePath
	                                , t.TotalValInvoice
	                                , t.TotalValVAT
	                                , t.TotalValPmt
	                                , t.CreateDTimeUTC
	                                , t.CreateBy
	                                , t.InvoiceNoDTimeUTC
	                                , t.InvoiceNoBy
	                                , t.SignDTimeUTC
	                                , t.SignBy
	                                , t.ApprDTimeUTC
	                                , t.ApprBy
	                                , t.CancelDTimeUTC
	                                , t.CancelBy
	                                , t.SendEmailDTimeUTC
	                                , t.SendEmailBy
	                                , t.IssuedDTimeUTC
	                                , t.IssuedBy
	                                , t.AttachedDelFilePath
	                                , t.DeleteReason
	                                , t.DeleteDTimeUTC
	                                , t.DeleteBy
	                                , t.ChangeDTimeUTC
	                                , t.ChangeBy
	                                , t.InvoiceVerifyCQTCode
	                                , t.CurrencyCode
	                                , t.CurrencyRate
	                                , t.ValGoodsNotTaxable
	                                , t.ValGoodsNotChargeTax
	                                , t.ValGoodsVAT5
	                                , t.ValVAT5
	                                , t.ValGoodsVAT10
	                                , t.ValVAT10
	                                , t.NNTFullName
	                                , t.NNTFullAdress
	                                , t.NNTPhone
	                                , t.NNTFax
	                                , t.NNTEmail
	                                , t.NNTWebsite
	                                , t.NNTAccNo
	                                , t.NNTBankName
	                                , t.LUDTimeUTC
	                                , t.LUBy
	                                , t.Remark
	                                , t.InvoiceCF1
	                                , t.InvoiceCF2
	                                , t.InvoiceCF3
	                                , t.InvoiceCF4
	                                , t.InvoiceCF5
	                                , t.InvoiceCF6
	                                , t.InvoiceCF7
	                                , t.InvoiceCF8
	                                , t.InvoiceCF9
	                                , t.InvoiceCF10
	                                , t.FlagChange
	                                , t.FlagPushOutSite
	                                , t.FlagDeleteOutSite
	                                , t.InvoiceStatus
	                                , t.LogLUDTimeUTC
	                                , t.LogLUBy
                                from #tbl_Invoice_Invoice_Build t --//[mylock]
                            ");
                        /////
                        string zzzzClauseInsert_Invoice_InvoiceDtl_zSave = CmUtils.StringUtils.Replace(@"
                                ---- Invoice_InvoiceDtl:  
                                insert into Invoice_InvoiceDtl(
	                                InvoiceCode
	                                , Idx
	                                , NetworkID
	                                , SpecCode
	                                , SpecName
	                                , ProductID
	                                , ProductName
	                                , VATRateCode
	                                , VATRate
	                                , UnitCode
	                                , UnitName
	                                , UnitPrice
	                                , Qty
	                                , ValInvoice
	                                , ValTax
	                                , InventoryCode
	                                , DiscountRate
	                                , ValDiscount
	                                , InvoiceDtlStatus
	                                , Remark
	                                , InvoiceDCF1
	                                , InvoiceDCF2
	                                , InvoiceDCF3
	                                , InvoiceDCF4
	                                , InvoiceDCF5
	                                , LogLUDTimeUTC
	                                , LogLUBy
                                )
                                select 
	                                t.InvoiceCode
	                                , t.Idx
	                                , t.NetworkID
	                                , t.SpecCode
	                                , t.SpecName
	                                , t.ProductID
	                                , t.ProductName
	                                , t.VATRateCode
	                                , t.VATRate
	                                , t.UnitCode
	                                , t.UnitName
	                                , t.UnitPrice
	                                , t.Qty
	                                , t.ValInvoice
	                                , t.ValTax
	                                , t.InventoryCode
	                                , t.DiscountRate
	                                , t.ValDiscount
	                                , t.InvoiceDtlStatus
	                                , t.Remark
	                                , t.InvoiceDCF1
	                                , t.InvoiceDCF2
	                                , t.InvoiceDCF3
	                                , t.InvoiceDCF4
	                                , t.InvoiceDCF5
	                                , t.LogLUDTimeUTC
	                                , t.LogLUBy
                                from #tbl_Invoice_InvoiceDtl_Build t
                            ");

                        /////
                        string strSqlExec = CmUtils.StringUtils.Replace(@"
								----
								zzzzClauseInsert_Invoice_Invoice_zSave			
								----
								zzzzClauseInsert_Invoice_InvoiceDtl_zSave			
								----
							"
                            , "zzzzClauseInsert_Invoice_Invoice_zSave", zzzzClauseInsert_Invoice_Invoice_zSave
                            , "zzzzClauseInsert_Invoice_InvoiceDtl_zSave", zzzzClauseInsert_Invoice_InvoiceDtl_zSave
                            );
                        ////
                        DataSet dsExec = _cf.db.ExecQuery(strSqlExec);
                        ////
                    }
                    #endregion
                }
            }
            #endregion

            #region // Check One RefNo:
            if (!bIsDelete)
            {
                myCheck_Invoice_Invoice_RefNo_New20190705(
                    ref alParamsCoupleError // alParamsCoupleError
                    , dtimeSys // dtimeSys
                    , "#tbl_Invoice_Invoice_Build"  //zzzz_tbl_Invoice_Invoice_RefNo
                    );
            }
            #endregion

            #region // myCheck_Invoice_Invoice_Total:
            if (!bIsDelete)
            {
                myCheck_Invoice_Invoice_Total_New20190905(
                    ref alParamsCoupleError // alParamsCoupleError
                    , dtimeSys // dtimeSys
                    , "#tbl_Invoice_Invoice_Build"  //zzzz_tbl_Invoice_Invoice_RefNo
                    );
                ////
                myCheck_Invoice_InvoiceDtl_Total_New20190905(
                    ref alParamsCoupleError // alParamsCoupleError
                    , dtimeSys // dtimeSys
                    , "#tbl_Invoice_Invoice_Build"  //zzzz_tbl_Invoice_Invoice_RefNo
                    );
            }
            #endregion

            #region // myCheck_OS_Invoice_Invoice_CheckMasterPrd:


            if (!bIsDelete)
            {
                /*Ngày 2019-08-02:
                * A @HuongNV chốt: Client truyền thêm 1 cờ xác nhận (FlagConfirm) check hàng hóa:
                    + Cờ FlagConfirm chỉ truyền vào không lưu trong DB.
                    + Nếu FlagConfirm = 1 => Không thay đổi luật check hiện tại tính đến trước ngày 2019-08-02.
                    + Nếu FlagConfirm = 0 => Bỏ luật check các FK hàng hóa trừ SpecCode.
                */
                ////
                string strFlagConfirm = dtInput_Invoice_Invoice.Rows[0]["FlagConfirm"].ToString();

                if (CmUtils.StringUtils.StringEqual(strFlagConfirm, TConst.Flag.Active))
                {
                    myCheck_OS_Invoice_Invoice_CheckMasterPrd(
                    ref alParamsCoupleError  //alParamsCoupleError
                    , dtimeSys  //dtimeSys
                    , strTid  //strTid
                    , "#tbl_Invoice_Invoice_Build"  //zzzz_tbl_Invoice_Invoice_RefNo
                    );
                }
                else
                {
                    myCheck_OS_Invoice_Invoice_CheckMasterPrd_NotConfirm(
                    ref alParamsCoupleError  //alParamsCoupleError
                    , dtimeSys  //dtimeSys
                    , strTid  //strTid
                    , "#tbl_Invoice_Invoice_Build"  //zzzz_tbl_Invoice_Invoice_RefNo
                    );
                }
            }
            #endregion

            #region //// Clear For Debug:
            if (!bIsDelete)
            {
                ////
                string strSqlClearForDebug = CmUtils.StringUtils.Replace(@"
						---- Clear for Debug:
						drop table #input_Invoice_Invoice;
						drop table #input_Invoice_InvoiceDtl;
					");

                _cf.db.ExecQuery(
                    strSqlClearForDebug
                    );
                ////
            }
            else
            {
                ////
                string strSqlClearForDebug = CmUtils.StringUtils.Replace(@"
						---- Clear for Debug:
						drop table #input_Invoice_Invoice;
					");

                _cf.db.ExecQuery(
                    strSqlClearForDebug
                    );
                ////

            }
            #endregion

            // Return Good:
            MyCodeLabel_Done:
            return;
            //TDALUtils.DBUtils.CommitSafety(_cf.db);
            //mdsFinal.AcceptChanges();
            //return mdsFinal;		
        }

        private void Invoice_Invoice_SaveX_New20191016(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            , DateTime dtimeSys
            ////
            , object objFlagIsDelete
            ////
            , DataSet dsData
            )
        {
            #region // Temp:
            //int nTidSeq = 0;
            //bool bMyDebugSql = false;
            string strFunctionName = "Invoice_Invoice_SaveAllX";
            //string strErrorCodeDefault = TError.ErridnInventory.Invoice_Invoice_SaveAllX;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
                ////
                , "objFlagIsDelete",objFlagIsDelete
				////
                });
            //ArrayList alPCErrEx = new ArrayList();
            ////
            Hashtable htParamsSql = new Hashtable();
            #endregion

            #region // Convert Input:
            //DataSet dsData = TUtils.CUtils.StdDS(arrobjDSData);
            //if (dsData == null) dsData = new DataSet("dsData");
            //dsData.AcceptChanges();
            alParamsCoupleError.AddRange(new object[]{
                "Check.dsData", CmUtils.XmlUtils.DataSet2XmlSimple(dsData)
                });
            #endregion

            #region // Refine and Check Input:
            ////
            DataRow drAbilityOfUser = Sys_User_GetAbilityViewOfUser(strWAUserCode);
            ////
            bool bIsDelete = CmUtils.StringUtils.StringEqual(objFlagIsDelete, TConst.Flag.Yes);
            ////
            string strMST = TUtils.CUtils.StdParam(drAbilityOfUser["MNNTMST"]);
            #endregion

            #region // Refine and Check Input Invoice_Invoice:
            ////
            DataTable dtInput_Invoice_Invoice = null;
            {
                ////
                string strTableCheck = "Invoice_Invoice";
                ////
                if (!dsData.Tables.Contains(strTableCheck))
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.TableName", strTableCheck
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Invoice_Invoice_SaveX_Input_InvoiceTblNotFound
                        , null
                        , alParamsCoupleError.ToArray()
                        );
                }
                dtInput_Invoice_Invoice = dsData.Tables[strTableCheck];
                ////
                if (dtInput_Invoice_Invoice.Rows.Count < 1)
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.TableName", strTableCheck
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Invoice_Invoice_SaveX_Input_InvoiceTblInvalid
                        , null
                        , alParamsCoupleError.ToArray()
                        );
                }
                ////
                TUtils.CUtils.StdDataInTable(
                    dtInput_Invoice_Invoice // dtData
                    , "StdParam", "InvoiceCode" // arrstrCouple
                    , "StdParam", "MST" // arrstrCouple
                    , "StdParam", "NetworkID" // arrstrCouple
                    , "StdParam", "RefNo" // arrstrCouple
                    , "StdParam", "FormNo" // arrstrCouple
                    , "StdParam", "Sign" // arrstrCouple
                    , "StdParam", "SourceInvoiceCode" // arrstrCouple
                    , "StdParam", "InvoiceAdjType" // arrstrCouple
                    , "StdParam", "PaymentMethodCode" // arrstrCouple
                    , "StdParam", "InvoiceType2" // arrstrCouple
                    , "StdParam", "CustomerNNTCode" // arrstrCouple
                    , "", "CustomerNNTName" // arrstrCouple
                    , "", "CustomerNNTAddress" // arrstrCouple
                    , "", "CustomerNNTPhone" // arrstrCouple
                    , "", "CustomerNNTBankName" // arrstrCouple
                    , "", "CustomerNNTEmail" // arrstrCouple
                    , "", "CustomerNNTAccNo" // arrstrCouple
                    , "", "CustomerNNTBuyerName" // arrstrCouple
                    , "StdParam", "CustomerMST" // arrstrCouple
                    , "StdParam", "TInvoiceCode" // arrstrCouple
                    , "StdParam", "InvoiceNo" // arrstrCouple
                    , "", "InvoiceDateUTC" // arrstrCouple
                                           //, "StdParam", "EmailSend" // arrstrCouple
                    , "", "InvoiceFileSpec" // arrstrCouple
                    , "", "InvoiceFilePath" // arrstrCouple
                    , "", "InvoicePDFFilePath" // arrstrCouple
                    , "float", "TotalValInvoice" // arrstrCouple
                    , "float", "TotalValVAT" // arrstrCouple
                    , "float", "TotalValPmt" // arrstrCouple
                    , "", "AttachedDelFilePath" // arrstrCouple
                    , "", "DeleteReason" // arrstrCouple
                    , "StdParam", "InvoiceVerifyCQTCode" // arrstrCouple
                    , "StdParam", "CurrencyCode" // arrstrCouple
                    , "float", "CurrencyRate" // arrstrCouple
                    , "float", "ValGoodsNotTaxable" // arrstrCouple
                    , "float", "ValGoodsNotChargeTax" // arrstrCouple
                    , "float", "ValGoodsVAT5" // arrstrCouple
                    , "float", "ValVAT5" // arrstrCouple
                    , "float", "ValGoodsVAT10" // arrstrCouple
                    , "float", "ValVAT10" // arrstrCouple
                    , "", "NNTFullName" // arrstrCouple
                    , "", "NNTFullAdress" // arrstrCouple
                    , "", "NNTPhone" // arrstrCouple
                    , "", "NNTFax" // arrstrCouple
                    , "", "NNTEmail" // arrstrCouple
                    , "", "NNTWebsite" // arrstrCouple
                    , "", "NNTAccNo" // arrstrCouple
                    , "", "NNTBankName" // arrstrCouple
                    , "", "Remark" // arrstrCouple
                    , "", "InvoiceCF1" // arrstrCouple
                    , "", "InvoiceCF2" // arrstrCouple
                    , "", "InvoiceCF3" // arrstrCouple
                    , "", "InvoiceCF4" // arrstrCouple
                    , "", "InvoiceCF5" // arrstrCouple
                    , "", "InvoiceCF6" // arrstrCouple
                    , "", "InvoiceCF7" // arrstrCouple
                    , "", "InvoiceCF8" // arrstrCouple
                    , "", "InvoiceCF9" // arrstrCouple
                    , "", "InvoiceCF10" // arrstrCouple
                    , "", "FlagConfirm" // arrstrCouple
                    );
                ////
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_Invoice, "EmailSend", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_Invoice, "CreateDTimeUTC", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_Invoice, "CreateBy", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_Invoice, "InvoiceNoDTimeUTC", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_Invoice, "InvoiceNoBy", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_Invoice, "SignDTimeUTC", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_Invoice, "SignBy", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_Invoice, "ApprDTimeUTC", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_Invoice, "ApprBy", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_Invoice, "CancelDTimeUTC", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_Invoice, "CancelBy", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_Invoice, "SendEmailDTimeUTC", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_Invoice, "SendEmailBy", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_Invoice, "IssuedDTimeUTC", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_Invoice, "IssuedBy", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_Invoice, "DeleteDTimeUTC", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_Invoice, "DeleteBy", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_Invoice, "ChangeDTimeUTC", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_Invoice, "ChangeBy", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_Invoice, "LUDTimeUTC", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_Invoice, "LUBy", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_Invoice, "FlagChange", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_Invoice, "FlagPushOutSite", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_Invoice, "InvoiceStatus", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_Invoice, "LogLUDTimeUTC", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_Invoice, "LogLUBy", typeof(object));
            }
            #endregion

            #region //// SaveTemp Invoice_Invoice For Check:
            //if (!bIsDelete)
            {
                // Upload:
                TUtils.CUtils.MyBuildDBDT_Common(
                    _cf.db // db
                    , "#input_Invoice_Invoice" // strTableName
                    , new object[] {
                            "InvoiceCode", TConst.BizMix.Default_DBColType
                            , "MST", TConst.BizMix.Default_DBColType
                            , "NetworkID", TConst.BizMix.Default_DBColType
                            , "RefNo", TConst.BizMix.Default_DBColType
                            , "FormNo", TConst.BizMix.Default_DBColType
                            , "Sign", TConst.BizMix.Default_DBColType
                            , "SourceInvoiceCode", TConst.BizMix.Default_DBColType
                            , "InvoiceAdjType", TConst.BizMix.Default_DBColType
                            , "PaymentMethodCode", TConst.BizMix.Default_DBColType
                            , "InvoiceType2", TConst.BizMix.Default_DBColType
                            , "CustomerNNTCode", TConst.BizMix.Default_DBColType
                            , "CustomerNNTName", TConst.BizMix.Default_DBColType
                            , "CustomerNNTAddress", TConst.BizMix.Default_DBColType
                            , "CustomerNNTPhone", TConst.BizMix.Default_DBColType
                            , "CustomerNNTBankName", TConst.BizMix.Default_DBColType
                            , "CustomerNNTEmail", TConst.BizMix.Default_DBColType
                            , "CustomerNNTAccNo", TConst.BizMix.Default_DBColType
                            , "CustomerNNTBuyerName", TConst.BizMix.Default_DBColType
                            , "CustomerMST", TConst.BizMix.Default_DBColType
                            , "TInvoiceCode", TConst.BizMix.Default_DBColType
                            , "InvoiceNo", TConst.BizMix.Default_DBColType
                            , "InvoiceDateUTC", TConst.BizMix.Default_DBColType
                            , "EmailSend", TConst.BizMix.Default_DBColType
                            , "InvoiceFileSpec", TConst.BizMix.Default_DBColType
                            , "InvoiceFilePath", TConst.BizMix.Default_DBColType
                            , "InvoicePDFFilePath", TConst.BizMix.Default_DBColType
                            , "TotalValInvoice", "float"
                            , "TotalValVAT", "float"
                            , "TotalValPmt", "float"
                            , "CreateDTimeUTC", TConst.BizMix.Default_DBColType
                            , "CreateBy", TConst.BizMix.Default_DBColType
                            , "InvoiceNoDTimeUTC", TConst.BizMix.Default_DBColType
                            , "InvoiceNoBy", TConst.BizMix.Default_DBColType
                            , "SignDTimeUTC", TConst.BizMix.Default_DBColType
                            , "SignBy", TConst.BizMix.Default_DBColType
                            , "ApprDTimeUTC", TConst.BizMix.Default_DBColType
                            , "ApprBy", TConst.BizMix.Default_DBColType
                            , "CancelDTimeUTC", TConst.BizMix.Default_DBColType
                            , "CancelBy", TConst.BizMix.Default_DBColType
                            , "SendEmailDTimeUTC", TConst.BizMix.Default_DBColType
                            , "SendEmailBy", TConst.BizMix.Default_DBColType
                            , "IssuedDTimeUTC", TConst.BizMix.Default_DBColType
                            , "IssuedBy", TConst.BizMix.Default_DBColType
                            , "AttachedDelFilePath", TConst.BizMix.Default_DBColType
                            , "DeleteReason", TConst.BizMix.Default_DBColType
                            , "DeleteDTimeUTC", TConst.BizMix.Default_DBColType
                            , "DeleteBy", TConst.BizMix.Default_DBColType
                            , "ChangeDTimeUTC", TConst.BizMix.Default_DBColType
                            , "ChangeBy", TConst.BizMix.Default_DBColType
                            , "InvoiceVerifyCQTCode", TConst.BizMix.Default_DBColType
                            , "CurrencyCode", TConst.BizMix.Default_DBColType
                            , "CurrencyRate", TConst.BizMix.Default_DBColType
                            , "ValGoodsNotTaxable", "float"
                            , "ValGoodsNotChargeTax", "float"
                            , "ValGoodsVAT5", "float"
                            , "ValVAT5", "float"
                            , "ValGoodsVAT10", "float"
                            , "ValVAT10", "float"
                            , "NNTFullName", TConst.BizMix.Default_DBColType
                            , "NNTFullAdress", TConst.BizMix.Default_DBColType
                            , "NNTPhone", TConst.BizMix.Default_DBColType
                            , "NNTFax", TConst.BizMix.Default_DBColType
                            , "NNTEmail", TConst.BizMix.Default_DBColType
                            , "NNTWebsite", TConst.BizMix.Default_DBColType
                            , "NNTAccNo", TConst.BizMix.Default_DBColType
                            , "NNTBankName", TConst.BizMix.Default_DBColType
                            , "LUDTimeUTC", TConst.BizMix.Default_DBColType
                            , "LUBy", TConst.BizMix.Default_DBColType
                            , "Remark", TConst.BizMix.Default_DBColType
                            , "InvoiceCF1", TConst.BizMix.Default_DBColType
                            , "InvoiceCF2", TConst.BizMix.Default_DBColType
                            , "InvoiceCF3", TConst.BizMix.Default_DBColType
                            , "InvoiceCF4", TConst.BizMix.Default_DBColType
                            , "InvoiceCF5", TConst.BizMix.Default_DBColType
                            , "InvoiceCF6", TConst.BizMix.Default_DBColType
                            , "InvoiceCF7", TConst.BizMix.Default_DBColType
                            , "InvoiceCF8", TConst.BizMix.Default_DBColType
                            , "InvoiceCF9", TConst.BizMix.Default_DBColType
                            , "InvoiceCF10", TConst.BizMix.Default_DBColType
                            , "FlagConfirm", TConst.BizMix.Default_DBColType
                            , "FlagChange", TConst.BizMix.Default_DBColType
                            , "FlagPushOutSite", TConst.BizMix.Default_DBColType
                            , "FlagDeleteOutSite", TConst.BizMix.Default_DBColType
                            , "InvoiceStatus", TConst.BizMix.Default_DBColType
                            , "LogLUDTimeUTC", TConst.BizMix.Default_DBColType
                            , "LogLUBy", TConst.BizMix.Default_DBColType
                        } // arrSingleStructure
                    , dtInput_Invoice_Invoice // dtData
                );
            }
            #endregion

            #region /// Refine and check Input Invoice_Invoice:
            {
                #region ----// Check InvalidInvoiceCode:
                {
                    string strSql_CheckInvalidInvoiceCode = CmUtils.StringUtils.Replace(@"
                            --- Check:
                            select distinct 
                                t.InvoiceCode
                            from #input_Invoice_Invoice t --//[mylock]
                            where(1=1)
                                and (t.InvoiceCode is null or LTRIM(RTRIM(t.InvoiceCode)) = '')
                            ;
						");
                    DataTable dt_CheckInvalidInvoiceCode = _cf.db.ExecQuery(
                        strSql_CheckInvalidInvoiceCode
                        ).Tables[0];
                    /////
                    if (dt_CheckInvalidInvoiceCode.Rows.Count > 0)
                    {
                        alParamsCoupleError.AddRange(new object[]{
                            "Check.ErrConditionalRaise", "(t.InvoiceCode is null or LTRIM(RTRIM(t.InvoiceCode)) = '')"
                            , "Check.NumberRows", dt_CheckInvalidInvoiceCode.Rows.Count
                            });
                        throw CmUtils.CMyException.Raise(
                            TError.ErridnInventory.Invoice_Invoice_SaveX_InvalidInvoiceCode
                            , null
                            , alParamsCoupleError.ToArray()
                            );
                    }
                    ////
                }
                #endregion

                #region ----// Check InvalidInvoiceStatus:
                {
                    string strSql_CheckInvalidInvoiceCode = CmUtils.StringUtils.Replace(@"
                            --- #tbl_Invoice_Invoice_ForSTUFF:
                            select distinct 
                                t.InvoiceCode
                            into #tbl_Invoice_Invoice_ForSTUFF
                            from #input_Invoice_Invoice t --//[mylock]
                                inner join Invoice_Invoice f --//[mylock]
                                    on t.InvoiceCode = f.InvoiceCode
                            where(1=1)
                                and f.InvoiceStatus not in ('PENDING') 
                            ;

                            --- Return:					
                            select 
                                STUFF(( 
		                            SELECT ',' + f.InvoiceCode
		                            FROM #tbl_Invoice_Invoice_ForSTUFF f --//[mylock]
		                            WHERE(1=1)
		                            FOR
		                            XML PATH('')
		                            ), 1, 1, ''
                                ) AS ListInvoiceCode
                            where(1=1)
                            ;

                            --- Clear For Debug:
                            drop table #tbl_Invoice_Invoice_ForSTUFF;
						");
                    DataTable dt_CheckInvalidInvoiceCode = _cf.db.ExecQuery(
                        strSql_CheckInvalidInvoiceCode
                        ).Tables[0];
                    /////
                    if (dt_CheckInvalidInvoiceCode.Rows.Count > 0)
                    {
                        string strListInvoiceCode = TUtils.CUtils.StdParam(dt_CheckInvalidInvoiceCode.Rows[0]["ListInvoiceCode"]);
                        /////
                        if (!string.IsNullOrEmpty(strListInvoiceCode))
                        {
                            if (bIsDelete)
                            {
                                goto MyCodeLabel_Done; // Thành công
                            }
                            else // if (!string.IsNullOrEmpty(strListInvoiceCode))
                            {
                                alParamsCoupleError.AddRange(new object[]{
                                    "Check.ErrConditionalRaise", "f.InvoiceStatus not in ('PENDING')"
                                    , "Check.strListInvoiceCode", strListInvoiceCode
                                    });
                                throw CmUtils.CMyException.Raise(
                                    TError.ErridnInventory.Invoice_Invoice_SaveX_StatusNotMatched
                                    , null
                                    , alParamsCoupleError.ToArray()
                                    );

                            }
                        }
                        /////
                    }
                    ////
                }
                #endregion

                #region ----// Đã cấp số hóa đơn thì không được Xóa:
                if (bIsDelete)
                {
                    string strSql_CheckInvalidInvoiceCode = CmUtils.StringUtils.Replace(@"
                            --- #tbl_Invoice_Invoice_ForSTUFF:
                            select distinct 
                                t.InvoiceCode
                            into #tbl_Invoice_Invoice_ForSTUFF
                            from #input_Invoice_Invoice t --//[mylock]
                                inner join Invoice_Invoice f --//[mylock]
                                    on t.InvoiceCode = f.InvoiceCode
                            where(1=1)
                                and f.InvoiceNo is not null 
                            ;

                            --- Return:					
                            select 
                                STUFF(( 
		                            SELECT ',' + f.InvoiceCode
		                            FROM #tbl_Invoice_Invoice_ForSTUFF f --//[mylock]
		                            WHERE(1=1)
		                            FOR
		                            XML PATH('')
		                            ), 1, 1, ''
                                ) AS ListInvoiceCode
                            where(1=1)
                            ;

                            --- Clear For Debug:
                            drop table #tbl_Invoice_Invoice_ForSTUFF;
						");
                    DataTable dt_CheckInvalidInvoiceCode = _cf.db.ExecQuery(
                        strSql_CheckInvalidInvoiceCode
                        ).Tables[0];
                    /////
                    if (dt_CheckInvalidInvoiceCode.Rows.Count > 0)
                    {
                        /////
                        string strListInvoiceCode = TUtils.CUtils.StdParam(dt_CheckInvalidInvoiceCode.Rows[0]["ListInvoiceCode"]);
                        ////
                        if (!string.IsNullOrEmpty(strListInvoiceCode))
                        {
                            alParamsCoupleError.AddRange(new object[]{
                                "Check.ErrConditionalRaise", "f.InvoiceNo is not null "
                                , "Check.strListInvoiceCode", strListInvoiceCode
                                });
                            throw CmUtils.CMyException.Raise(
                                TError.ErridnInventory.Invoice_Invoice_SaveX_ExistInvoiceNo
                                , null
                                , alParamsCoupleError.ToArray()
                                );

                        }
                    }
                    ////
                }
                #endregion

                #region ----// Nếu là hóa đơn điều chỉnh thì RefNo không được Null:
                if (!bIsDelete)
                {
                    string strSql_CheckInvalidInvoiceCode = CmUtils.StringUtils.Replace(@"
                            --- #tbl_Invoice_Invoice_ForSTUFF:
                            select distinct 
                                t.InvoiceCode
                            into #tbl_Invoice_Invoice_ForSTUFF
                            from #input_Invoice_Invoice t --//[mylock]
                            where(1=1)
                                and t.RefNo is null
                                and t.InvoiceAdjType in ('@strADJINCREASE', '@strADJDESCREASE')
                            ;

                            --- Return:					
                            select 
                                STUFF(( 
		                            SELECT ',' + f.InvoiceCode
		                            FROM #tbl_Invoice_Invoice_ForSTUFF f --//[mylock]
		                            WHERE(1=1)
		                            FOR
		                            XML PATH('')
		                            ), 1, 1, ''
                                ) AS ListInvoiceCode
                            where(1=1)
                            ;

                            --- Clear For Debug:
                            drop table #tbl_Invoice_Invoice_ForSTUFF;
						"
                        , "@strADJINCREASE", TConst.InvoiceAdjType.AdjInCrease
                        , "@strADJINCREASE", TConst.InvoiceAdjType.AdjDescrease
                        );
                    DataTable dt_CheckInvalidInvoiceCode = _cf.db.ExecQuery(
                        strSql_CheckInvalidInvoiceCode
                        ).Tables[0];
                    /////
                    if (dt_CheckInvalidInvoiceCode.Rows.Count > 0)
                    {
                        string strListInvoiceCode = TUtils.CUtils.StdParam(dt_CheckInvalidInvoiceCode.Rows[0]["ListInvoiceCode"]);
                        /////
                        if (!string.IsNullOrEmpty(strListInvoiceCode))
                        {
                            alParamsCoupleError.AddRange(new object[]{
                                "Check.ErrConditionalRaise", "and t.InvoiceAdjType in ('@strADJINCREASE', '@strADJDESCREASE') and t.RefNo is null"
                                , "Check.strListInvoiceCode", strListInvoiceCode
                                });
                            throw CmUtils.CMyException.Raise(
                                TError.ErridnInventory.Invoice_Invoice_SaveX_InvoiceAdjTypeIsNotNull
                                , null
                                , alParamsCoupleError.ToArray()
                                );
                        }
                        /////
                    }
                    ////
                }
                #endregion

                #region ----// Nếu là hóa đơn thay thế:
                {
                    #region ----// Nếu là hóa đơn thay thế thì RefNo không được Null:
                    {
                        string strSql_CheckInvalidInvoiceCode = CmUtils.StringUtils.Replace(@"
                                --- #tbl_Invoice_Invoice_ForSTUFF:
                                select distinct 
                                    t.RefNo
                                into #tbl_Invoice_Invoice_ForSTUFF
                                from #input_Invoice_Invoice t --//[mylock]
                                where(1=1)
                                    and t.SourceInvoiceCode in ('@strInvoiceReplace') 
                                    and (t.RefNo is null or LTRIM(RTRIM(t.RefNo)) = '')
                                ;

                                --- Return:					
                                select 
                                    STUFF(( 
		                                SELECT ',' + f.RefNo
		                                FROM #tbl_Invoice_Invoice_ForSTUFF f --//[mylock]
		                                WHERE(1=1)
		                                FOR
		                                XML PATH('')
		                                ), 1, 1, ''
                                    ) AS ListRefNo
                                where(1=1)
                                ;

                                --- Clear For Debug:
                                drop table #tbl_Invoice_Invoice_ForSTUFF;
						    "
                            , "@strInvoiceReplace", TConst.SourceInvoiceCode.InvoiceReplace
                            );
                        DataTable dt_CheckInvalidInvoiceCode = _cf.db.ExecQuery(
                            strSql_CheckInvalidInvoiceCode
                            ).Tables[0];
                        /////
                        if (dt_CheckInvalidInvoiceCode.Rows.Count > 0)
                        {
                            /////
                            string strListRefNo = TUtils.CUtils.StdParam(dt_CheckInvalidInvoiceCode.Rows[0]["ListRefNo"]);
                            ////
                            if (!string.IsNullOrEmpty(strListRefNo))
                            {
                                alParamsCoupleError.AddRange(new object[]{
                                    "Check.ErrConditionalRaise", "and t.SourceInvoiceCode in ('@strInvoiceReplace') and (t.RefNo is null or LTRIM(RTRIM(t.RefNo)) = '')"
                                    , "Check.strListRefNo", strListRefNo
                                    });
                                throw CmUtils.CMyException.Raise(
                                    TError.ErridnInventory.Invoice_Invoice_SaveX_Input_Invoice_InvalidRefNo
                                    , null
                                    , alParamsCoupleError.ToArray()
                                    );

                            }
                        }
                        ////
                    }
                    #endregion

                    #region ----// RefNo ở trạng thái Deleted:
                    {
                        string strSql_CheckInvalidInvoiceCode = CmUtils.StringUtils.Replace(@"
                                --- #tbl_Invoice_Invoice_ForSTUFF:
                                select distinct 
                                    t.RefNo
                                into #tbl_Invoice_Invoice_ForSTUFF
                                from #input_Invoice_Invoice t --//[mylock]
                                    left join Invoice_Invoice f --//[mylock]
                                        on t.RefNo = f.InvoiceCode
                                where(1=1)
                                    and t.SourceInvoiceCode in ('@strInvoiceReplace') 
                                    and (f.InvoiceStatus not in ('DELETED', 'ISSUED')) 
                                ;

                                --- Return:					
                                select 
                                    STUFF(( 
		                                SELECT ',' + f.RefNo
		                                FROM #tbl_Invoice_Invoice_ForSTUFF f --//[mylock]
		                                WHERE(1=1)
		                                FOR
		                                XML PATH('')
		                                ), 1, 1, ''
                                    ) AS ListRefNo
                                where(1=1)
                                ;

                                --- Clear For Debug:
                                drop table #tbl_Invoice_Invoice_ForSTUFF;
						    "
                            , "@strInvoiceReplace", TConst.SourceInvoiceCode.InvoiceReplace
                            );
                        DataTable dt_CheckInvalidInvoiceCode = _cf.db.ExecQuery(
                            strSql_CheckInvalidInvoiceCode
                            ).Tables[0];
                        /////
                        if (dt_CheckInvalidInvoiceCode.Rows.Count > 0)
                        {
                            /////
                            string strListRefNo = TUtils.CUtils.StdParam(dt_CheckInvalidInvoiceCode.Rows[0]["ListRefNo"]);
                            ////
                            if (!string.IsNullOrEmpty(strListRefNo))
                            {
                                alParamsCoupleError.AddRange(new object[]{
                                    "Check.ErrConditionalRaise", "and t.SourceInvoiceCode in ('@strInvoiceReplace')  and (f.InvoiceStatus not in ('DELETED', 'ISSUED')) "
                                    , "Check.strListRefNo", strListRefNo
                                    });
                                throw CmUtils.CMyException.Raise(
                                    TError.ErridnInventory.Invoice_Invoice_SaveX_Input_Invoice_InvalidInvoiceStatusRefNo
                                    , null
                                    , alParamsCoupleError.ToArray()
                                    );

                            }
                        }
                        ////
                    }
                    #endregion

                    #region ----// Không cho phép xóa hóa đơn thay thế:
                    if (bIsDelete)
                    {
                        string strSql_CheckInvalidInvoiceCode = CmUtils.StringUtils.Replace(@"
                                --- #tbl_Invoice_Invoice_ForSTUFF:
                                select distinct 
                                    t.RefNo
                                into #tbl_Invoice_Invoice_ForSTUFF
                                from #input_Invoice_Invoice t --//[mylock]
                                where(1=1)
                                ;

                                --- Return:					
                                select 
                                    STUFF(( 
		                                SELECT ',' + f.RefNo
		                                FROM #tbl_Invoice_Invoice_ForSTUFF f --//[mylock]
		                                WHERE(1=1)
		                                FOR
		                                XML PATH('')
		                                ), 1, 1, ''
                                    ) AS ListRefNo
                                where(1=1)
                                ;

                                --- Clear For Debug:
                                drop table #tbl_Invoice_Invoice_ForSTUFF;
						    "
                            , "@strInvoiceReplace", TConst.SourceInvoiceCode.InvoiceReplace
                            );
                        DataTable dt_CheckInvalidInvoiceCode = _cf.db.ExecQuery(
                            strSql_CheckInvalidInvoiceCode
                            ).Tables[0];
                        /////
                        if (dt_CheckInvalidInvoiceCode.Rows.Count > 0)
                        {
                            /////
                            string strListRefNo = TUtils.CUtils.StdParam(dt_CheckInvalidInvoiceCode.Rows[0]["ListRefNo"]);
                            ////
                            if (!string.IsNullOrEmpty(strListRefNo))
                            {
                                alParamsCoupleError.AddRange(new object[]{
                                    "Check.strListRefNo", strListRefNo
                                    });
                                throw CmUtils.CMyException.Raise(
                                    TError.ErridnInventory.Invoice_Invoice_SaveX_NotDelete
                                    , null
                                    , alParamsCoupleError.ToArray()
                                    );

                            }
                        }
                        ////
                    }
                    #endregion
                }
                #endregion

                #region ----// Check Mst_NNT:
                {
                    string strSql_CheckMstNNT = CmUtils.StringUtils.Replace(@"
                            --- #tbl_Invoice_Invoice_ForSTUFF:
                            select distinct 
	                            t.MST
                            into #tbl_Invoice_Invoice_ForSTUFF_Exist
                            from #input_Invoice_Invoice t --//[mylock]
	                            left join Mst_NNT f --//[mylock]
		                            on t.MST = f.MST
                            where(1=1)
	                            and f.MST is null
                            ;

                            --- #tbl_Invoice_Invoice_ForSTUFF_Active:
                            select distinct 
	                            t.MST
                            into #tbl_Invoice_Invoice_ForSTUFF_Active
                            from #input_Invoice_Invoice t --//[mylock]
	                            left join Mst_NNT f --//[mylock]
		                            on t.MST = f.MST
                            where(1=1)
	                            and f.FlagActive = '0'
                            ;

                            --- Return:					
                            select 
                                STUFF(( 
		                            SELECT ',' + f.MST
		                            FROM #tbl_Invoice_Invoice_ForSTUFF_Exist f --//[mylock]
		                            WHERE(1=1)
		                            FOR
		                            XML PATH('')
		                            ), 1, 1, ''
                                ) AS ListMST
                            where(1=1)
                            ;

                            --- Return:					
                            select 
                                STUFF(( 
		                            SELECT ',' + f.MST
		                            FROM #tbl_Invoice_Invoice_ForSTUFF_Active f --//[mylock]
		                            WHERE(1=1)
		                            FOR
		                            XML PATH('')
		                            ), 1, 1, ''
                                ) AS ListMST
                            where(1=1)
                            ;

                            --- Clear For Debug:
                            drop table #tbl_Invoice_Invoice_ForSTUFF_Exist;
                            drop table #tbl_Invoice_Invoice_ForSTUFF_Active;
						");
                    DataSet ds_CheckMstNNT = _cf.db.ExecQuery(
                        strSql_CheckMstNNT
                        );
                    ////
                    DataTable dt_Invoice_Invoice_ForSTUFF_Exist = ds_CheckMstNNT.Tables[0];
                    DataTable dt_Invoice_Invoice_ForSTUFF_Active = ds_CheckMstNNT.Tables[1];
                    /////
                    if (dt_Invoice_Invoice_ForSTUFF_Exist.Rows.Count > 0)
                    {
                        string strListMST = TUtils.CUtils.StdParam(dt_Invoice_Invoice_ForSTUFF_Exist.Rows[0]["ListMST"]);
                        /////
                        if (!string.IsNullOrEmpty(strListMST))
                        {
                            alParamsCoupleError.AddRange(new object[]{
                                "Check.ErrConditionalRaise", "Mst_NNT.MST is null"
                                , "Check.strListMST", strListMST
                                });
                            throw CmUtils.CMyException.Raise(
                                TError.ErridnInventory.Invoice_Invoice_SaveX_Invalid_MstNNT_NotFound
                                , null
                                , alParamsCoupleError.ToArray()
                                );
                        }
                        /////
                    }
                    ////
                    if (dt_Invoice_Invoice_ForSTUFF_Active.Rows.Count > 0)
                    {
                        string strListMST = TUtils.CUtils.StdParam(dt_Invoice_Invoice_ForSTUFF_Active.Rows[0]["ListMST"]);
                        /////
                        if (!string.IsNullOrEmpty(strListMST))
                        {
                            alParamsCoupleError.AddRange(new object[]{
                                "Check.ErrConditionalRaise", "Mst_NNT.FlagActive = '0'"
                                , "Check.strListMST", strListMST
                                });
                            throw CmUtils.CMyException.Raise(
                                TError.ErridnInventory.Invoice_Invoice_SaveX_Invalid_MstNNT_FlagActive
                                , null
                                , alParamsCoupleError.ToArray()
                                );
                        }
                        /////
                    }
                    ////
                }
                #endregion

                #region ----// Check Mst_PaymentMethods:
                {
                    string strSql_CheckPaymentMethods = CmUtils.StringUtils.Replace(@"
                            --- #tbl_Invoice_Invoice_ForSTUFF:
                            select distinct 
	                            t.PaymentMethodCode
                            into #tbl_Invoice_Invoice_ForSTUFF_Exist
                            from #input_Invoice_Invoice t --//[mylock]
	                            left join Mst_PaymentMethods f --//[mylock]
		                            on t.PaymentMethodCode = f.PaymentMethodCode
                            where(1=1)
	                            and f.PaymentMethodCode is null
                            ;

                            --- #tbl_Invoice_Invoice_ForSTUFF_Active:
                            select distinct 
	                            t.PaymentMethodCode
                            into #tbl_Invoice_Invoice_ForSTUFF_Active
                            from #input_Invoice_Invoice t --//[mylock]
	                            left join Mst_PaymentMethods f --//[mylock]
		                            on t.PaymentMethodCode = f.PaymentMethodCode
                            where(1=1)
	                            and f.FlagActive = '0'
                            ;

                            --- Return:					
                            select 
                                STUFF(( 
		                            SELECT ',' + f.PaymentMethodCode
		                            FROM #tbl_Invoice_Invoice_ForSTUFF_Exist f --//[mylock]
		                            WHERE(1=1)
		                            FOR
		                            XML PATH('')
		                            ), 1, 1, ''
                                ) AS ListPaymentMethodCode
                            where(1=1)
                            ;

                            --- Return:					
                            select 
                                STUFF(( 
		                            SELECT ',' + f.PaymentMethodCode
		                            FROM #tbl_Invoice_Invoice_ForSTUFF_Active f --//[mylock]
		                            WHERE(1=1)
		                            FOR
		                            XML PATH('')
		                            ), 1, 1, ''
                                ) AS ListPaymentMethodCode
                            where(1=1)
                            ;

                            --- Clear For Debug:
                            drop table #tbl_Invoice_Invoice_ForSTUFF_Exist;
                            drop table #tbl_Invoice_Invoice_ForSTUFF_Active;
						");
                    DataSet ds_CheckMst_PaymentMethods = _cf.db.ExecQuery(
                        strSql_CheckPaymentMethods
                        );
                    ////
                    DataTable dt_Invoice_Invoice_ForSTUFF_Exist = ds_CheckMst_PaymentMethods.Tables[0];
                    DataTable dt_Invoice_Invoice_ForSTUFF_Active = ds_CheckMst_PaymentMethods.Tables[1];
                    /////
                    if (dt_Invoice_Invoice_ForSTUFF_Exist.Rows.Count > 0)
                    {
                        string strListPaymentMethodCode = TUtils.CUtils.StdParam(dt_Invoice_Invoice_ForSTUFF_Exist.Rows[0]["ListPaymentMethodCode"]);
                        /////
                        if (!string.IsNullOrEmpty(strListPaymentMethodCode))
                        {
                            alParamsCoupleError.AddRange(new object[]{
                                "Check.ErrConditionalRaise", "Mst_PaymentMethods.PaymentMethodCode is null"
                                , "Check.strListPaymentMethodCode", strListPaymentMethodCode
                                });
                            throw CmUtils.CMyException.Raise(
                                TError.ErridnInventory.Invoice_Invoice_SaveX_Invalid_PaymentMethods_NotFound
                                , null
                                , alParamsCoupleError.ToArray()
                                );
                        }
                        /////
                    }
                    ////
                    if (dt_Invoice_Invoice_ForSTUFF_Active.Rows.Count > 0)
                    {
                        string strListPaymentMethodCode = TUtils.CUtils.StdParam(dt_Invoice_Invoice_ForSTUFF_Active.Rows[0]["ListPaymentMethodCode"]);
                        /////
                        if (!string.IsNullOrEmpty(strListPaymentMethodCode))
                        {
                            alParamsCoupleError.AddRange(new object[]{
                                "Check.ErrConditionalRaise", "Mst_PaymentMethods.FlagActive = '0'"
                                , "Check.strListPaymentMethodCode", strListPaymentMethodCode
                                });
                            throw CmUtils.CMyException.Raise(
                                TError.ErridnInventory.Invoice_Invoice_SaveX_Invalid_PaymentMethods_FlagActive
                                , null
                                , alParamsCoupleError.ToArray()
                                );
                        }
                        /////
                    }
                    ////
                }
                #endregion

                #region ----// Check Mst_InvoiceType2:
                {
                    string strSql_CheckInvoiceType2 = CmUtils.StringUtils.Replace(@"
                            --- #tbl_Invoice_Invoice_ForSTUFF:
                            select distinct 
	                            t.InvoiceType2
                            into #tbl_Invoice_Invoice_ForSTUFF_Exist
                            from #input_Invoice_Invoice t --//[mylock]
	                            left join Mst_InvoiceType2 f --//[mylock]
		                            on t.InvoiceType2 = f.InvoiceType2
                            where(1=1)
	                            and f.InvoiceType2 is null
                            ;

                            --- #tbl_Invoice_Invoice_ForSTUFF_Active:
                            select distinct 
	                            t.InvoiceType2
                            into #tbl_Invoice_Invoice_ForSTUFF_Active
                            from #input_Invoice_Invoice t --//[mylock]
	                            left join Mst_InvoiceType2 f --//[mylock]
		                            on t.InvoiceType2 = f.InvoiceType2
                            where(1=1)
	                            and f.FlagActive = '0'
                            ;

                            --- Return:					
                            select 
                                STUFF(( 
		                            SELECT ',' + f.InvoiceType2
		                            FROM #tbl_Invoice_Invoice_ForSTUFF_Exist f --//[mylock]
		                            WHERE(1=1)
		                            FOR
		                            XML PATH('')
		                            ), 1, 1, ''
                                ) AS ListInvoiceType2
                            where(1=1)
                            ;

                            --- Return:					
                            select 
                                STUFF(( 
		                            SELECT ',' + f.InvoiceType2
		                            FROM #tbl_Invoice_Invoice_ForSTUFF_Active f --//[mylock]
		                            WHERE(1=1)
		                            FOR
		                            XML PATH('')
		                            ), 1, 1, ''
                                ) AS ListInvoiceType2
                            where(1=1)
                            ;

                            --- Clear For Debug:
                            drop table #tbl_Invoice_Invoice_ForSTUFF_Exist;
                            drop table #tbl_Invoice_Invoice_ForSTUFF_Active;
						");
                    DataSet ds_CheckMst_InvoiceType2 = _cf.db.ExecQuery(
                        strSql_CheckInvoiceType2
                        );
                    ////
                    DataTable dt_Invoice_Invoice_ForSTUFF_Exist = ds_CheckMst_InvoiceType2.Tables[0];
                    DataTable dt_Invoice_Invoice_ForSTUFF_Active = ds_CheckMst_InvoiceType2.Tables[1];
                    /////
                    if (dt_Invoice_Invoice_ForSTUFF_Exist.Rows.Count > 0)
                    {
                        string strListInvoiceType2 = TUtils.CUtils.StdParam(dt_Invoice_Invoice_ForSTUFF_Exist.Rows[0]["ListInvoiceType2"]);
                        /////
                        if (!string.IsNullOrEmpty(strListInvoiceType2))
                        {
                            alParamsCoupleError.AddRange(new object[]{
                                "Check.ErrConditionalRaise", "Mst_InvoiceType2.InvoiceType2 is null"
                                , "Check.strListInvoiceType2", strListInvoiceType2
                                });
                            throw CmUtils.CMyException.Raise(
                                TError.ErridnInventory.Invoice_Invoice_SaveX_Invalid_InvoiceType2_NotFound
                                , null
                                , alParamsCoupleError.ToArray()
                                );
                        }
                        /////
                    }
                    ////
                    if (dt_Invoice_Invoice_ForSTUFF_Active.Rows.Count > 0)
                    {
                        string strListInvoiceType2 = TUtils.CUtils.StdParam(dt_Invoice_Invoice_ForSTUFF_Active.Rows[0]["ListInvoiceType2"]);
                        /////
                        if (!string.IsNullOrEmpty(strListInvoiceType2))
                        {
                            alParamsCoupleError.AddRange(new object[]{
                                "Check.ErrConditionalRaise", "Mst_InvoiceType2.FlagActive = '0'"
                                , "Check.strListInvoiceType2", strListInvoiceType2
                                });
                            throw CmUtils.CMyException.Raise(
                                TError.ErridnInventory.Invoice_Invoice_SaveX_Invalid_InvoiceType2_FlagActive
                                , null
                                , alParamsCoupleError.ToArray()
                                );
                        }
                        /////
                    }
                    ////
                }
                #endregion

                #region ----// Check Mst_SourceInvoice:
                {
                    string strSql_CheckMst_SourceInvoice = CmUtils.StringUtils.Replace(@"
                            --- #tbl_Invoice_Invoice_ForSTUFF:
                            select distinct 
	                            t.SourceInvoiceCode
                            into #tbl_Invoice_Invoice_ForSTUFF_Exist
                            from #input_Invoice_Invoice t --//[mylock]
	                            left join Mst_SourceInvoice f --//[mylock]
		                            on t.SourceInvoiceCode = f.SourceInvoiceCode
                            where(1=1)
	                            and f.SourceInvoiceCode is null
                            ;

                            --- #tbl_Invoice_Invoice_ForSTUFF_Active:
                            select distinct 
	                            t.SourceInvoiceCode
                            into #tbl_Invoice_Invoice_ForSTUFF_Active
                            from #input_Invoice_Invoice t --//[mylock]
	                            left join Mst_SourceInvoice f --//[mylock]
		                            on t.SourceInvoiceCode = f.SourceInvoiceCode
                            where(1=1)
	                            and f.FlagActive = '0'
                            ;

                            --- Return:					
                            select 
                                STUFF(( 
		                            SELECT ',' + f.SourceInvoiceCode
		                            FROM #tbl_Invoice_Invoice_ForSTUFF_Exist f --//[mylock]
		                            WHERE(1=1)
		                            FOR
		                            XML PATH('')
		                            ), 1, 1, ''
                                ) AS ListSourceInvoiceCode
                            where(1=1)
                            ;

                            --- Return:					
                            select 
                                STUFF(( 
		                            SELECT ',' + f.SourceInvoiceCode
		                            FROM #tbl_Invoice_Invoice_ForSTUFF_Active f --//[mylock]
		                            WHERE(1=1)
		                            FOR
		                            XML PATH('')
		                            ), 1, 1, ''
                                ) AS ListSourceInvoiceCode
                            where(1=1)
                            ;

                            --- Clear For Debug:
                            drop table #tbl_Invoice_Invoice_ForSTUFF_Exist;
                            drop table #tbl_Invoice_Invoice_ForSTUFF_Active;
						");
                    DataSet ds_CheckMst_PaymentMethods = _cf.db.ExecQuery(
                        strSql_CheckMst_SourceInvoice
                        );
                    ////
                    DataTable dt_Invoice_Invoice_ForSTUFF_Exist = ds_CheckMst_PaymentMethods.Tables[0];
                    DataTable dt_Invoice_Invoice_ForSTUFF_Active = ds_CheckMst_PaymentMethods.Tables[1];
                    /////
                    if (dt_Invoice_Invoice_ForSTUFF_Exist.Rows.Count > 0)
                    {
                        string strListSourceInvoiceCode = TUtils.CUtils.StdParam(dt_Invoice_Invoice_ForSTUFF_Exist.Rows[0]["ListSourceInvoiceCode"]);
                        /////
                        if (!string.IsNullOrEmpty(strListSourceInvoiceCode))
                        {
                            alParamsCoupleError.AddRange(new object[]{
                                "Check.ErrConditionalRaise", "Mst_SourceInvoice.SourceInvoiceCode is null"
                                , "Check.strListSourceInvoiceCode", strListSourceInvoiceCode
                                });
                            throw CmUtils.CMyException.Raise(
                                TError.ErridnInventory.Invoice_Invoice_SaveX_Invalid_SourceInvoice_NotFound
                                , null
                                , alParamsCoupleError.ToArray()
                                );
                        }
                        /////
                    }
                    ////
                    if (dt_Invoice_Invoice_ForSTUFF_Active.Rows.Count > 0)
                    {
                        string strListSourceInvoiceCode = TUtils.CUtils.StdParam(dt_Invoice_Invoice_ForSTUFF_Active.Rows[0]["ListSourceInvoiceCode"]);
                        /////
                        if (!string.IsNullOrEmpty(strListSourceInvoiceCode))
                        {
                            alParamsCoupleError.AddRange(new object[]{
                                "Check.ErrConditionalRaise", "Mst_SourceInvoice.FlagActive = '0'"
                                , "Check.strListPaymentMethodCode", strListSourceInvoiceCode
                                });
                            throw CmUtils.CMyException.Raise(
                                TError.ErridnInventory.Invoice_Invoice_SaveX_Invalid_SourceInvoice_FlagActive
                                , null
                                , alParamsCoupleError.ToArray()
                                );
                        }
                        /////
                    }
                    ////
                }
                #endregion

                #region ----// Check Invoice_TempInvoice:
                {
                    string strSql_CheckInvoice_TempInvoice = CmUtils.StringUtils.Replace(@"
                            --- #tbl_Invoice_Invoice_ForSTUFF_Exist:
                            select distinct 
	                            t.TInvoiceCode
                            into #tbl_Invoice_Invoice_ForSTUFF_Exist
                            from #input_Invoice_Invoice t --//[mylock]
	                            left join Invoice_TempInvoice f --//[mylock]
		                            on t.TInvoiceCode = f.TInvoiceCode
                            where(1=1)
	                            and f.TInvoiceCode is null
                            ;

                            --- #tbl_Invoice_Invoice_ForSTUFF_Active:
                            select distinct 
	                            t.TInvoiceCode
                            into #tbl_Invoice_Invoice_ForSTUFF_Active
                            from #input_Invoice_Invoice t --//[mylock]
	                            left join Invoice_TempInvoice f --//[mylock]
		                            on t.TInvoiceCode = f.TInvoiceCode
                            where(1=1)
	                            and f.TInvoiceStatus not in ('ISSUED')
                            ;

                            --- Return:					
                            select 
                                STUFF(( 
		                            SELECT ',' + f.TInvoiceCode
		                            FROM #tbl_Invoice_Invoice_ForSTUFF_Exist f --//[mylock]
		                            WHERE(1=1)
		                            FOR
		                            XML PATH('')
		                            ), 1, 1, ''
                                ) AS ListTInvoiceCode
                            where(1=1)
                            ;

                            --- Return:					
                            select 
                                STUFF(( 
		                            SELECT ',' + f.TInvoiceCode
		                            FROM #tbl_Invoice_Invoice_ForSTUFF_Active f --//[mylock]
		                            WHERE(1=1)
		                            FOR
		                            XML PATH('')
		                            ), 1, 1, ''
                                ) AS ListTInvoiceCode
                            where(1=1)
                            ;

                            --- Clear For Debug:
                            drop table #tbl_Invoice_Invoice_ForSTUFF_Exist;
                            drop table #tbl_Invoice_Invoice_ForSTUFF_Active;
						");
                    DataSet ds_CheckInvoice_TempInvoice = _cf.db.ExecQuery(
                        strSql_CheckInvoice_TempInvoice
                        );
                    ////
                    DataTable dt_Invoice_Invoice_ForSTUFF_Exist = ds_CheckInvoice_TempInvoice.Tables[0];
                    DataTable dt_Invoice_Invoice_ForSTUFF_Active = ds_CheckInvoice_TempInvoice.Tables[1];
                    /////
                    if (dt_Invoice_Invoice_ForSTUFF_Exist.Rows.Count > 0)
                    {
                        string strListTInvoiceCode = TUtils.CUtils.StdParam(dt_Invoice_Invoice_ForSTUFF_Exist.Rows[0]["ListTInvoiceCode"]);
                        /////
                        if (!string.IsNullOrEmpty(strListTInvoiceCode))
                        {
                            alParamsCoupleError.AddRange(new object[]{
                                "Check.ErrConditionalRaise", "Invoice_TempInvoice.TInvoiceCode is null"
                                , "Check.strListTInvoiceCode", strListTInvoiceCode
                                });
                            throw CmUtils.CMyException.Raise(
                                TError.ErridnInventory.Invoice_Invoice_SaveX_Invalid_TempInvoice_NotFound
                                , null
                                , alParamsCoupleError.ToArray()
                                );
                        }
                        /////
                    }
                    ////
                    if (dt_Invoice_Invoice_ForSTUFF_Active.Rows.Count > 0)
                    {
                        string strListTInvoiceCode = TUtils.CUtils.StdParam(dt_Invoice_Invoice_ForSTUFF_Active.Rows[0]["ListTInvoiceCode"]);
                        /////
                        if (!string.IsNullOrEmpty(strListTInvoiceCode))
                        {
                            alParamsCoupleError.AddRange(new object[]{
                                "Check.ErrConditionalRaise", "Invoice_TempInvoice.TInvoiceStatus not in ('ISSUED')"
                                , "Check.strListTInvoiceCode", strListTInvoiceCode
                                });
                            throw CmUtils.CMyException.Raise(
                                TError.ErridnInventory.Invoice_Invoice_SaveX_Invalid_TempInvoice_StatusNotMatch
                                , null
                                , alParamsCoupleError.ToArray()
                                );
                        }
                        /////
                    }
                    ////
                }
                #endregion

                #region ----// Check SL hóa đơn sử dụng:
                {
                    string strSql_CheckInvoice_TempInvoice = CmUtils.StringUtils.Replace(@"
                            --- #tbl_Invoice_TempInvoice:
                            select distinct 
	                            t.TInvoiceCode
                            into #tbl_Invoice_TempInvoice
                            from #input_Invoice_Invoice t --//[mylock]
	                            inner join Invoice_TempInvoice f --//[mylock]
		                            on t.TInvoiceCode = t.TInvoiceCode
                            where(1=1)
                            ;

							---- Return:
							select 
								t.TInvoiceCode
								, f.EndInvoiceNo
								, f.StartInvoiceNo
								, f.QtyUsed
								, (f.EndInvoiceNo - f.StartInvoiceNo + 1 - f.QtyUsed) QtyRemain
							from #tbl_Invoice_TempInvoice t --//[mylock]
								inner join Invoice_TempInvoice f --//[mylock]
									on t.TInvoiceCode = f.TInvoiceCode
							where(1=1)
								and (f.EndInvoiceNo - f.StartInvoiceNo + 1 - f.QtyUsed) < 1
							;

                            --- Clear For Debug:
                            drop table #tbl_Invoice_TempInvoice;
						");
                    DataSet ds_Invoice_TempInvoice = _cf.db.ExecQuery(
                        strSql_CheckInvoice_TempInvoice
                        );
                    ////
                    DataTable dt_Invoice_TempInvoice = ds_Invoice_TempInvoice.Tables[0];
                    /////
                    if (dt_Invoice_TempInvoice.Rows.Count > 0)
                    {
                        alParamsCoupleError.AddRange(new object[]{
                            "Check.strTInvoiceCode", dt_Invoice_TempInvoice.Rows[0]["TInvoiceCode"]
                            , "Check.DB.StartInvoiceNo", dt_Invoice_TempInvoice.Rows[0]["StartInvoiceNo"]
                            , "Check.DB.EndInvoiceNo", dt_Invoice_TempInvoice.Rows[0]["EndInvoiceNo"]
                            , "Check.DB.QtyUsed",  dt_Invoice_TempInvoice.Rows[0]["QtyUsed"]
                            , "Check.ErrConditionRaise", "((nEndInvoiceNo - nStartInvoiceNo - nQtyUsed)< 1)"
                            });
                        throw CmUtils.CMyException.Raise(
                            TError.ErridnInventory.Invoice_Invoice_SaveX_Invalid_SourceInvoice_NotFound
                            , null
                            , alParamsCoupleError.ToArray()
                            );
                    }
                    ////
                }
                #endregion
            }
            #endregion

            #region // Build Invoice_Invoice:
            {
                string strSql_Build = CmUtils.StringUtils.Replace(@"
                        ----- #tbl_Invoice_Invoice_Build:
                        select 
	                        t.InvoiceCode
	                        , t.MST
	                        , t.NetworkID
	                        , t.RefNo
	                        , t.FormNo
	                        , t.Sign
	                        , t.SourceInvoiceCode
	                        , t.InvoiceAdjType
	                        , t.InvoiceType2
	                        , t.PaymentMethodCode
	                        , t.CustomerNNTCode
	                        , t.CustomerNNTName
	                        , t.CustomerNNTAddress
	                        , t.CustomerNNTPhone
	                        , t.CustomerNNTBankName
	                        , t.CustomerNNTEmail
	                        , t.CustomerNNTAccNo
	                        , t.CustomerNNTBuyerName
	                        , t.CustomerMST
	                        , t.TInvoiceCode
	                        , t.InvoiceNo
	                        , t.InvoiceDateUTC
	                        , t.EmailSend
	                        , t.InvoiceFileSpec
	                        , t.InvoiceFilePath
	                        , null InvoicePDFFilePath
	                        , t.TotalValInvoice
	                        , t.TotalValVAT
	                        , t.TotalValPmt
	                        , IsNull(f.CreateDTimeUTC, '@strLogLUDTimeUTC') CreateDTimeUTC --t.CreateDTimeUTC
	                        , IsNull(f.CreateBy, '@strLogLUBy') CreateBy --t.CreateBy
	                        , t.InvoiceNoDTimeUTC
	                        , t.InvoiceNoBy
	                        , t.SignDTimeUTC
	                        , t.SignBy
	                        , t.ApprDTimeUTC
	                        , t.ApprBy
	                        , t.CancelDTimeUTC
	                        , t.CancelBy
	                        , t.SendEmailDTimeUTC
	                        , t.SendEmailBy
	                        , t.IssuedDTimeUTC
	                        , t.IssuedBy
                            , null AttachedDelFilePath
                            , null DeleteReason
                            , t.DeleteDTimeUTC
	                        , t.DeleteBy
	                        , t.ChangeDTimeUTC
	                        , t.ChangeBy
	                        , t.InvoiceVerifyCQTCode
	                        , t.CurrencyCode
	                        , t.CurrencyRate
	                        , t.ValGoodsNotTaxable
	                        , t.ValGoodsNotChargeTax
	                        , t.ValGoodsVAT5
	                        , t.ValVAT5
	                        , t.ValGoodsVAT10
	                        , t.ValVAT10
	                        , t.NNTFullName
	                        , t.NNTFullAdress
	                        , t.NNTPhone
	                        , t.NNTFax
	                        , t.NNTEmail
	                        , t.NNTWebsite
	                        , t.NNTAccNo
	                        , t.NNTBankName
	                        , '@strLogLUDTimeUTC' LUDTimeUTC --t.LUDTimeUTC
	                        , '@strLogLUBy' LUBy --t.LUBy
	                        , t.Remark
	                        , t.InvoiceCF1
	                        , t.InvoiceCF2
	                        , t.InvoiceCF3
	                        , t.InvoiceCF4
	                        , t.InvoiceCF5
	                        , t.InvoiceCF6
	                        , t.InvoiceCF7
	                        , t.InvoiceCF8
	                        , t.InvoiceCF9
	                        , t.InvoiceCF10
	                        --, t.FlagConfirm
	                        , '1' FlagChange --t.FlagChange
	                        , null FlagPushOutSite -- t.FlagPushOutSite
	                        , null FlagDeleteOutSite -- t.FlagDeleteOutSite
	                        , '@strInvoiceStatus' InvoiceStatus --t.InvoiceStatus
	                        , '@strLogLUDTimeUTC' LogLUDTimeUTC --t.LogLUDTimeUTC
	                        , '@strLogLUBy' LogLUBy --t.LogLUBy
                        into #tbl_Invoice_Invoice_Build
                        from #input_Invoice_Invoice t --//[mylock]
                            left join Invoice_Invoice f --//[mylock]
                                on t.InvoiceCode = f.InvoiceCode
                        where(1=1)
                        ;

                        select null tbl_Invoice_Invoice_Build, t.* from #tbl_Invoice_Invoice_Build t --//[mylock];
                    ;"
                    , "@strInvoiceStatus", TConst.InvoiceStatus.Pending
                    , "@strLogLUDTimeUTC", dtimeSys.ToString("yyyy-MM-dd hh:mm:ss")
                    , "@strLogLUBy", strWAUserCode
                    );
                DataTable dt_Build = _cf.db.ExecQuery(
                    strSql_Build
                    ).Tables[0];
                /////
            }
            #endregion

            #region //// Refine and Check Input Invoice_InvoiceDtl:
            ////
            DataTable dtInput_Invoice_InvoiceDtl = null;
            if (!bIsDelete)
            {
                ////
                string strTableCheck = "Invoice_InvoiceDtl";
                ////
                if (!dsData.Tables.Contains(strTableCheck))
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.TableName", strTableCheck
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Invoice_Invoice_SaveX_Input_InvoiceDtlTblNotFound
                        , null
                        , alParamsCoupleError.ToArray()
                        );
                }
                dtInput_Invoice_InvoiceDtl = dsData.Tables[strTableCheck];
                ////

                if (dtInput_Invoice_InvoiceDtl.Rows.Count < 1)
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.TableName", strTableCheck
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Invoice_Invoice_SaveX_Input_InvoiceDtlTblInvalid
                        , null
                        , alParamsCoupleError.ToArray()
                        );
                }
                ////
                TUtils.CUtils.StdDataInTable(
                    dtInput_Invoice_InvoiceDtl // dtData
                    , "StdParam", "InvoiceCode" // arrstrCouple
                    , "StdParam", "Idx" // arrstrCouple
                    , "StdParam", "NetworkID" // arrstrCouple
                    , "StdParam", "SpecCode" // arrstrCouple
                    , "", "SpecName" // arrstrCouple
                    , "StdParam", "ProductID" // arrstrCouple
                    , "", "ProductName" // arrstrCouple
                    , "StdParam", "VATRateCode" // arrstrCouple
                    , "float", "VATRate" // arrstrCouple
                    , "StdParam", "UnitCode" // arrstrCouple
                    , "", "UnitName" // arrstrCouple
                    , "float", "UnitPrice" // arrstrCouple
                    , "float", "Qty" // arrstrCouple
                    , "float", "ValInvoice" // arrstrCouple
                    , "float", "ValTax" // arrstrCouple
                    , "StdParam", "InventoryCode" // arrstrCouple
                    , "float", "DiscountRate" // arrstrCouple
                    , "float", "ValDiscount" // arrstrCouple
                    , "", "Remark" // arrstrCouple
                    , "", "InvoiceDCF1" // arrstrCouple
                    , "", "InvoiceDCF2" // arrstrCouple
                    , "", "InvoiceDCF3" // arrstrCouple
                    , "", "InvoiceDCF4" // arrstrCouple
                    , "", "InvoiceDCF5" // arrstrCouple
                    );
                ////
                //TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_InvoiceDtl, "InvoiceCode", typeof(object));
                //TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_InvoiceDtl, "NetworkID", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_InvoiceDtl, "InvoiceDtlStatus", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_InvoiceDtl, "LogLUDTimeUTC", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_InvoiceDtl, "LogLUBy", typeof(object));
                ////////
            }
            #endregion

            #region //// SaveTemp Invoice_InvoiceDtl For Check:
            if (!bIsDelete)
            {
                // Upload:
                TUtils.CUtils.MyBuildDBDT_Common(
                    _cf.db // db
                    , "#input_Invoice_InvoiceDtl" // strTableName
                    , new object[] {
                            "InvoiceCode", TConst.BizMix.Default_DBColType
                            , "Idx", TConst.BizMix.Default_DBColType
                            , "NetworkID", TConst.BizMix.Default_DBColType
                            , "SpecCode", TConst.BizMix.Default_DBColType
                            , "SpecName", TConst.BizMix.Default_DBColType
                            , "ProductID", TConst.BizMix.Default_DBColType
                            , "ProductName", TConst.BizMix.Default_DBColType
                            , "VATRateCode", TConst.BizMix.Default_DBColType
                            , "VATRate", "float"
                            , "UnitCode", TConst.BizMix.Default_DBColType
                            , "UnitName", TConst.BizMix.Default_DBColType
                            , "UnitPrice", "float"
                            , "Qty", "float"
                            , "ValInvoice", "float"
                            , "ValTax", "float"
                            , "InventoryCode", TConst.BizMix.Default_DBColType
                            , "DiscountRate", "float"
                            , "ValDiscount", "float"
                            , "InvoiceDtlStatus", TConst.BizMix.Default_DBColType
                            , "Remark", TConst.BizMix.Default_DBColType
                            , "InvoiceDCF1", TConst.BizMix.Default_DBColType
                            , "InvoiceDCF2", TConst.BizMix.Default_DBColType
                            , "InvoiceDCF3", TConst.BizMix.Default_DBColType
                            , "InvoiceDCF4", TConst.BizMix.Default_DBColType
                            , "InvoiceDCF5", TConst.BizMix.Default_DBColType
                            , "LogLUDTimeUTC", TConst.BizMix.Default_DBColType
                            , "LogLUBy", TConst.BizMix.Default_DBColType
                        } // arrSingleStructure
                    , dtInput_Invoice_InvoiceDtl // dtData
                );
            }
            #endregion

            #region // Refine and Check Input Invoice_InvoiceDtl:
            if (!bIsDelete)
            {
                #region ----// Check ProductID + SpecCode là duy nhất:
                {
                    string strSql_CheckProducID = CmUtils.StringUtils.Replace(@"                            
                            ---- #tbl_Invoice_InvoiceDtl_TotalProductID:
                            select 
	                            t.InvoiceCode
	                            , t.SpecCode
	                            , t.ProductID
	                            , count(0) QtyProductID
                            into #tbl_Invoice_InvoiceDtl_TotalProductID
                            from #input_Invoice_InvoiceDtl t --//[mylock]
                            where(1=1)
	                            and t.ProductID is not null
                            group by 
	                            t.InvoiceCode
	                            , t.SpecCode
	                            , t.ProductID
                            ;

                            ---- Return:
                            select top 1
	                            t.InvoiceCode
	                            , t.ProductID
	                            , t.SpecCode
	                            , t.QtyProductID
                            from #tbl_Invoice_InvoiceDtl_TotalProductID t --//[mylock]
                            where(1=1)
	                            and t.QtyProductID > 1
                            ;

                            -- Clear For Debug:
                            drop table #tbl_Invoice_InvoiceDtl_TotalProductID;

						");
                    DataTable dt_CheckProductID = _cf.db.ExecQuery(
                        strSql_CheckProducID
                        ).Tables[0];
                    /////
                    if (dt_CheckProductID.Rows.Count > 0)
                    {
                        alParamsCoupleError.AddRange(new object[]{
                            "Check.ErrConditionalRaise", "t.QtyProductID > 1"
                            //, "Check.NumberRows", dt_CheckProductID.Rows.Count
                            , "Check.InvoiceCode", dt_CheckProductID.Rows[0]["InvoiceCode"]
                            , "Check.SpecCode", dt_CheckProductID.Rows[0]["SpecCode"]
                            , "Check.ProductID", dt_CheckProductID.Rows[0]["ProductID"]
                            , "Check.QtyProductID", dt_CheckProductID.Rows[0]["QtyProductID"]
                            });
                        throw CmUtils.CMyException.Raise(
                            TError.ErridnInventory.Invoice_Invoice_SaveX_Input_InvoiceDtl_ProductIDDuplicate
                            , null
                            , alParamsCoupleError.ToArray()
                            );
                    }
                    ////
                }
                #endregion

                #region ----// Check SpecCode là duy nhất:
      //          {
      //              string strSql_CheckSpec = CmUtils.StringUtils.Replace(@"                         
      //                      ---- #tbl_Invoice_InvoiceDtl_TotalSpec:
      //                      select 
	     //                       t.InvoiceCode
	     //                       , t.SpecCode
	     //                       , count(0) QtySpecCode
      //                      into #tbl_Invoice_InvoiceDtl_TotalSpec
      //                      from #input_Invoice_InvoiceDtl t --//[mylock]
      //                      where(1=1)
	     //                       and t.ProductID is null
						//		and t.SpecCode is not null
      //                      group by 
	     //                       t.InvoiceCode
	     //                       , t.SpecCode
      //                      ;

      //                      ---- Return:
      //                      select top 1
	     //                       t.InvoiceCode
	     //                       , t.SpecCode
	     //                       , t.QtySpecCode
      //                      from #tbl_Invoice_InvoiceDtl_TotalSpec t --//[mylock]
      //                      where(1=1)
	     //                       and t.QtySpecCode > 1
      //                      ;

      //                      -- Clear For Debug:
      //                      drop table #tbl_Invoice_InvoiceDtl_TotalSpec;

						//");
      //              DataTable dt_CheckSpecCode = _cf.db.ExecQuery(
      //                  strSql_CheckSpec
      //                  ).Tables[0];
      //              /////
      //              if (dt_CheckSpecCode.Rows.Count > 0)
      //              {
      //                  alParamsCoupleError.AddRange(new object[]{
      //                      "Check.ErrConditionalRaise", "t.QtyProductID > 1"
      //                      //, "Check.NumberRows", dt_CheckProductID.Rows.Count
      //                      , "Check.InvoiceCode", dt_CheckSpecCode.Rows[0]["InvoiceCode"]
      //                      , "Check.SpecCode", dt_CheckSpecCode.Rows[0]["SpecCode"]
      //                      , "Check.QtySpecCode", dt_CheckSpecCode.Rows[0]["QtySpecCode"]
      //                      });
      //                  throw CmUtils.CMyException.Raise(
      //                      TError.ErridnInventory.Invoice_Invoice_SaveX_Input_InvoiceDtl_SpecCodeDuplicate
      //                      , null
      //                      , alParamsCoupleError.ToArray()
      //                      );
      //              }
      //              ////
      //          }
                #endregion

            }
            #endregion

            #region // Build Invoice_InvoiceDtl:
            if (!bIsDelete)
            {
                string strSql_Build = CmUtils.StringUtils.Replace(@"
                        ----- #tbl_Invoice_InvoiceDtl_Build:
                        select 
	                        t.InvoiceCode
							, Row_Number() over( partition by t.InvoiceCode order by t.Idx asc) Idx 
							--, Row_Number() over (order by t.Idx desc) Idx 
	                        --, t.Idx
	                        , t.NetworkID
	                        , t.SpecCode
	                        , t.SpecName
	                        , t.ProductID
	                        , t.ProductName
	                        , t.VATRateCode
	                        , t.VATRate
	                        , t.UnitCode
	                        , t.UnitName
	                        , t.UnitPrice
	                        , t.Qty
	                        , t.ValInvoice
	                        , t.ValTax
	                        , t.InventoryCode
	                        , t.DiscountRate
	                        , t.ValDiscount
	                        , '@strInvoiceStatus' InvoiceDtlStatus --t.InvoiceDtlStatus
	                        , t.Remark
	                        , t.InvoiceDCF1
	                        , t.InvoiceDCF2
	                        , t.InvoiceDCF3
	                        , t.InvoiceDCF4
	                        , t.InvoiceDCF5
	                        , '@strLogLUDTimeUTC' LogLUDTimeUTC --t.LogLUDTimeUTC
	                        , '@strLogLUBy' LogLUBy --t.LogLUBy
                        into #tbl_Invoice_InvoiceDtl_Build
                        from #input_Invoice_InvoiceDtl t --//[mylock]

                        select null tbl_Invoice_InvoiceDtl_Build, t.* from #tbl_Invoice_InvoiceDtl_Build t --//[mylock];
                    ;"
                    , "@strInvoiceStatus", TConst.InvoiceStatus.Pending
                    , "@strLogLUDTimeUTC", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
                    , "@strLogLUBy", strWAUserCode
                    );
                DataTable dt_Build = _cf.db.ExecQuery(
                    strSql_Build
                    ).Tables[0];
                /////
            }
            #endregion

            #region // SaveDB:
            {
                //// Clear All:
                {
                    string strSqlDelete = CmUtils.StringUtils.Replace(@"
                            ---- #tbl_Invoice_InvoiceDtl:
                            select 
                                t.InvoiceCode
                                , t.Idx
                            into #tbl_Invoice_InvoiceDtl
                            from Invoice_InvoiceDtl t --//[mylock]
	                            inner join #input_Invoice_Invoice f --//[mylock]
		                            on t.InvoiceCode = f.InvoiceCode
                            where (1=1)
                            ;

                            --- Delete:
                            ---- Invoice_InvoiceDtl:
                            delete t 
                            from Invoice_InvoiceDtl t --//[mylock]
	                            inner join #tbl_Invoice_InvoiceDtl f --//[mylock]
		                            on t.InvoiceCode = f.InvoiceCode
		                                and t.Idx = f.Idx
                            where (1=1)
                            ;

                            ---- Invoice_Invoice:
                            delete t
                            from Invoice_Invoice t --//[mylock]
	                            inner join #input_Invoice_Invoice f --//[mylock]
		                            on t.InvoiceCode = f.InvoiceCode
                            where (1=1)
                            ;

                            --- Clear For Debug:
                            drop table #tbl_Invoice_InvoiceDtl;
						");
                    DataSet dtDB = _cf.db.ExecQuery(
                        strSqlDelete
                        );
                }

                //// Insert All:
                if (!bIsDelete)
                {
                    #region // Insert:
                    {
                        ////
                        string zzzzClauseInsert_Invoice_Invoice_zSave = CmUtils.StringUtils.Replace(@"
                                ---- Invoice_Invoice:                                
                                insert into Invoice_Invoice(
	                                InvoiceCode
	                                , MST
	                                , NetworkID
	                                , RefNo
	                                , FormNo
	                                , Sign
	                                , SourceInvoiceCode
	                                , InvoiceAdjType
	                                , PaymentMethodCode
	                                , InvoiceType2
	                                , CustomerNNTCode
	                                , CustomerNNTName
	                                , CustomerNNTAddress
	                                , CustomerNNTPhone
	                                , CustomerNNTBankName
	                                , CustomerNNTEmail
	                                , CustomerNNTAccNo
	                                , CustomerNNTBuyerName
	                                , CustomerMST
	                                , TInvoiceCode
	                                , InvoiceNo
	                                , InvoiceDateUTC
	                                , EmailSend
	                                , InvoiceFileSpec
	                                , InvoiceFilePath
	                                , InvoicePDFFilePath
	                                , TotalValInvoice
	                                , TotalValVAT
	                                , TotalValPmt
	                                , CreateDTimeUTC
	                                , CreateBy
	                                , InvoiceNoDTimeUTC
	                                , InvoiceNoBy
	                                , SignDTimeUTC
	                                , SignBy
	                                , ApprDTimeUTC
	                                , ApprBy
	                                , CancelDTimeUTC
	                                , CancelBy
	                                , SendEmailDTimeUTC
	                                , SendEmailBy
	                                , IssuedDTimeUTC
	                                , IssuedBy
	                                , AttachedDelFilePath
	                                , DeleteReason
	                                , DeleteDTimeUTC
	                                , DeleteBy
	                                , ChangeDTimeUTC
	                                , ChangeBy
	                                , InvoiceVerifyCQTCode
	                                , CurrencyCode
	                                , CurrencyRate
	                                , ValGoodsNotTaxable
	                                , ValGoodsNotChargeTax
	                                , ValGoodsVAT5
	                                , ValVAT5
	                                , ValGoodsVAT10
	                                , ValVAT10
	                                , NNTFullName
	                                , NNTFullAdress
	                                , NNTPhone
	                                , NNTFax
	                                , NNTEmail
	                                , NNTWebsite
	                                , NNTAccNo
	                                , NNTBankName
	                                , LUDTimeUTC
	                                , LUBy
	                                , Remark
	                                , InvoiceCF1
	                                , InvoiceCF2
	                                , InvoiceCF3
	                                , InvoiceCF4
	                                , InvoiceCF5
	                                , InvoiceCF6
	                                , InvoiceCF7
	                                , InvoiceCF8
	                                , InvoiceCF9
	                                , InvoiceCF10
	                                , FlagChange
	                                , FlagPushOutSite
	                                , FlagDeleteOutSite
	                                , InvoiceStatus
	                                , LogLUDTimeUTC
	                                , LogLUBy
                                )
                                select 
	                                t.InvoiceCode
	                                , t.MST
	                                , t.NetworkID
	                                , t.RefNo
	                                , t.FormNo
	                                , t.Sign
	                                , t.SourceInvoiceCode
	                                , t.InvoiceAdjType
	                                , t.PaymentMethodCode
	                                , t.InvoiceType2
	                                , t.CustomerNNTCode
	                                , t.CustomerNNTName
	                                , t.CustomerNNTAddress
	                                , t.CustomerNNTPhone
	                                , t.CustomerNNTBankName
	                                , t.CustomerNNTEmail
	                                , t.CustomerNNTAccNo
	                                , t.CustomerNNTBuyerName
	                                , t.CustomerMST
	                                , t.TInvoiceCode
	                                , t.InvoiceNo
	                                , t.InvoiceDateUTC
	                                , t.EmailSend
	                                , t.InvoiceFileSpec
	                                , t.InvoiceFilePath
	                                , t.InvoicePDFFilePath
	                                , t.TotalValInvoice
	                                , t.TotalValVAT
	                                , t.TotalValPmt
	                                , t.CreateDTimeUTC
	                                , t.CreateBy
	                                , t.InvoiceNoDTimeUTC
	                                , t.InvoiceNoBy
	                                , t.SignDTimeUTC
	                                , t.SignBy
	                                , t.ApprDTimeUTC
	                                , t.ApprBy
	                                , t.CancelDTimeUTC
	                                , t.CancelBy
	                                , t.SendEmailDTimeUTC
	                                , t.SendEmailBy
	                                , t.IssuedDTimeUTC
	                                , t.IssuedBy
	                                , t.AttachedDelFilePath
	                                , t.DeleteReason
	                                , t.DeleteDTimeUTC
	                                , t.DeleteBy
	                                , t.ChangeDTimeUTC
	                                , t.ChangeBy
	                                , t.InvoiceVerifyCQTCode
	                                , t.CurrencyCode
	                                , t.CurrencyRate
	                                , t.ValGoodsNotTaxable
	                                , t.ValGoodsNotChargeTax
	                                , t.ValGoodsVAT5
	                                , t.ValVAT5
	                                , t.ValGoodsVAT10
	                                , t.ValVAT10
	                                , t.NNTFullName
	                                , t.NNTFullAdress
	                                , t.NNTPhone
	                                , t.NNTFax
	                                , t.NNTEmail
	                                , t.NNTWebsite
	                                , t.NNTAccNo
	                                , t.NNTBankName
	                                , t.LUDTimeUTC
	                                , t.LUBy
	                                , t.Remark
	                                , t.InvoiceCF1
	                                , t.InvoiceCF2
	                                , t.InvoiceCF3
	                                , t.InvoiceCF4
	                                , t.InvoiceCF5
	                                , t.InvoiceCF6
	                                , t.InvoiceCF7
	                                , t.InvoiceCF8
	                                , t.InvoiceCF9
	                                , t.InvoiceCF10
	                                , t.FlagChange
	                                , t.FlagPushOutSite
	                                , t.FlagDeleteOutSite
	                                , t.InvoiceStatus
	                                , t.LogLUDTimeUTC
	                                , t.LogLUBy
                                from #tbl_Invoice_Invoice_Build t --//[mylock]
                            ");
                        /////
                        string zzzzClauseInsert_Invoice_InvoiceDtl_zSave = CmUtils.StringUtils.Replace(@"
                                ---- Invoice_InvoiceDtl:  
                                insert into Invoice_InvoiceDtl(
	                                InvoiceCode
	                                , Idx
	                                , NetworkID
	                                , SpecCode
	                                , SpecName
	                                , ProductID
	                                , ProductName
	                                , VATRateCode
	                                , VATRate
	                                , UnitCode
	                                , UnitName
	                                , UnitPrice
	                                , Qty
	                                , ValInvoice
	                                , ValTax
	                                , InventoryCode
	                                , DiscountRate
	                                , ValDiscount
	                                , InvoiceDtlStatus
	                                , Remark
	                                , InvoiceDCF1
	                                , InvoiceDCF2
	                                , InvoiceDCF3
	                                , InvoiceDCF4
	                                , InvoiceDCF5
	                                , LogLUDTimeUTC
	                                , LogLUBy
                                )
                                select 
	                                t.InvoiceCode
	                                , t.Idx
	                                , t.NetworkID
	                                , t.SpecCode
	                                , t.SpecName
	                                , t.ProductID
	                                , t.ProductName
	                                , t.VATRateCode
	                                , t.VATRate
	                                , t.UnitCode
	                                , t.UnitName
	                                , t.UnitPrice
	                                , t.Qty
	                                , t.ValInvoice
	                                , t.ValTax
	                                , t.InventoryCode
	                                , t.DiscountRate
	                                , t.ValDiscount
	                                , t.InvoiceDtlStatus
	                                , t.Remark
	                                , t.InvoiceDCF1
	                                , t.InvoiceDCF2
	                                , t.InvoiceDCF3
	                                , t.InvoiceDCF4
	                                , t.InvoiceDCF5
	                                , t.LogLUDTimeUTC
	                                , t.LogLUBy
                                from #tbl_Invoice_InvoiceDtl_Build t
                            ");

                        /////
                        string strSqlExec = CmUtils.StringUtils.Replace(@"
								----
								zzzzClauseInsert_Invoice_Invoice_zSave			
								----
								zzzzClauseInsert_Invoice_InvoiceDtl_zSave			
								----
							"
                            , "zzzzClauseInsert_Invoice_Invoice_zSave", zzzzClauseInsert_Invoice_Invoice_zSave
                            , "zzzzClauseInsert_Invoice_InvoiceDtl_zSave", zzzzClauseInsert_Invoice_InvoiceDtl_zSave
                            );
                        ////
                        DataSet dsExec = _cf.db.ExecQuery(strSqlExec);
                        ////
                    }
                    #endregion
                }
            }
            #endregion

            #region // Check One RefNo:
            if (!bIsDelete)
            {
                myCheck_Invoice_Invoice_RefNo_New20190705(
                    ref alParamsCoupleError // alParamsCoupleError
                    , dtimeSys // dtimeSys
                    , "#tbl_Invoice_Invoice_Build"  //zzzz_tbl_Invoice_Invoice_RefNo
                    );
            }
            #endregion

            #region // myCheck_Invoice_Invoice_Total:
            if (!bIsDelete)
            {
                myCheck_Invoice_Invoice_Total_New20190905(
                    ref alParamsCoupleError // alParamsCoupleError
                    , dtimeSys // dtimeSys
                    , "#tbl_Invoice_Invoice_Build"  //zzzz_tbl_Invoice_Invoice_RefNo
                    );
                ////
                myCheck_Invoice_InvoiceDtl_Total_New20190905(
                    ref alParamsCoupleError // alParamsCoupleError
                    , dtimeSys // dtimeSys
                    , "#tbl_Invoice_Invoice_Build"  //zzzz_tbl_Invoice_Invoice_RefNo
                    );
            }
            #endregion

            #region // myCheck_OS_Invoice_Invoice_CheckMasterPrd:
            

            if (!bIsDelete)
            {
                /*Ngày 2019-08-02:
                * A @HuongNV chốt: Client truyền thêm 1 cờ xác nhận (FlagConfirm) check hàng hóa:
                    + Cờ FlagConfirm chỉ truyền vào không lưu trong DB.
                    + Nếu FlagConfirm = 1 => Không thay đổi luật check hiện tại tính đến trước ngày 2019-08-02.
                    + Nếu FlagConfirm = 0 => Bỏ luật check các FK hàng hóa trừ SpecCode.
                */
                ////
                string strFlagConfirm = dtInput_Invoice_Invoice.Rows[0]["FlagConfirm"].ToString();

                if (CmUtils.StringUtils.StringEqual(strFlagConfirm, TConst.Flag.Active))
                {
                    myCheck_OS_Invoice_Invoice_CheckMasterPrd(
                    ref alParamsCoupleError  //alParamsCoupleError
                    , dtimeSys  //dtimeSys
                    , strTid  //strTid
                    , "#tbl_Invoice_Invoice_Build"  //zzzz_tbl_Invoice_Invoice_RefNo
                    );
                }
                else
                {
                    myCheck_OS_Invoice_Invoice_CheckMasterPrd_NotConfirm(
                    ref alParamsCoupleError  //alParamsCoupleError
                    , dtimeSys  //dtimeSys
                    , strTid  //strTid
                    , "#tbl_Invoice_Invoice_Build"  //zzzz_tbl_Invoice_Invoice_RefNo
                    );
                }
            }
            #endregion

            #region //// Clear For Debug:
            if (!bIsDelete)
            {
                ////
                string strSqlClearForDebug = CmUtils.StringUtils.Replace(@"
						---- Clear for Debug:
						drop table #input_Invoice_Invoice;
						drop table #input_Invoice_InvoiceDtl;
					");

                _cf.db.ExecQuery(
                    strSqlClearForDebug
                    );
                ////
            }
            else
            {
                ////
                string strSqlClearForDebug = CmUtils.StringUtils.Replace(@"
						---- Clear for Debug:
						drop table #input_Invoice_Invoice;
					");

                _cf.db.ExecQuery(
                    strSqlClearForDebug
                    );
                ////

            }
        #endregion

        // Return Good:
        MyCodeLabel_Done:
            return;
            //TDALUtils.DBUtils.CommitSafety(_cf.db);
            //mdsFinal.AcceptChanges();
            //return mdsFinal;		
        }

        private void Invoice_Invoice_SaveX_New20191101(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            , DateTime dtimeSys
            ////
            , object objFlagIsDelete
            , object objFlagIsCheckInvoiceTotal
            ////
            , DataSet dsData
            )
        {
            #region // Temp:
            //int nTidSeq = 0;
            //bool bMyDebugSql = false;
            string strFunctionName = "Invoice_Invoice_SaveAllX";
            //string strErrorCodeDefault = TError.ErridnInventory.Invoice_Invoice_SaveAllX;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
                ////
                , "objFlagIsDelete",objFlagIsDelete
                , "objFlagIsCheckInvoiceTotal", objFlagIsCheckInvoiceTotal
				////
                });
            //ArrayList alPCErrEx = new ArrayList();
            ////
            Hashtable htParamsSql = new Hashtable();
            #endregion

            #region // Convert Input:
            //DataSet dsData = TUtils.CUtils.StdDS(arrobjDSData);
            //if (dsData == null) dsData = new DataSet("dsData");
            //dsData.AcceptChanges();
            alParamsCoupleError.AddRange(new object[]{
                "Check.dsData", CmUtils.XmlUtils.DataSet2XmlSimple(dsData)
                });
            #endregion

            #region // Refine and Check Input:
            ////
            DataRow drAbilityOfUser = Sys_User_GetAbilityViewOfUser(strWAUserCode);
            ////
            bool bIsDelete = CmUtils.StringUtils.StringEqual(objFlagIsDelete, TConst.Flag.Yes);
            if (objFlagIsCheckInvoiceTotal == null)
            {
                objFlagIsCheckInvoiceTotal = 1;
            }
            bool bIsCheckInvoiceTotal = CmUtils.StringUtils.StringEqual(objFlagIsCheckInvoiceTotal, TConst.Flag.Yes);
            ////
            string strMST = TUtils.CUtils.StdParam(drAbilityOfUser["MNNTMST"]);
            #endregion

            #region // Refine and Check Input Invoice_Invoice:
            ////
            DataTable dtInput_Invoice_Invoice = null;
            {
                ////
                string strTableCheck = "Invoice_Invoice";
                ////
                if (!dsData.Tables.Contains(strTableCheck))
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.TableName", strTableCheck
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Invoice_Invoice_SaveX_Input_InvoiceTblNotFound
                        , null
                        , alParamsCoupleError.ToArray()
                        );
                }
                dtInput_Invoice_Invoice = dsData.Tables[strTableCheck];
                ////
                if (dtInput_Invoice_Invoice.Rows.Count < 1)
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.TableName", strTableCheck
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Invoice_Invoice_SaveX_Input_InvoiceTblInvalid
                        , null
                        , alParamsCoupleError.ToArray()
                        );
                }
                ////
                TUtils.CUtils.StdDataInTable(
                    dtInput_Invoice_Invoice // dtData
                    , "StdParam", "InvoiceCode" // arrstrCouple
                    , "StdParam", "MST" // arrstrCouple
                    , "StdParam", "NetworkID" // arrstrCouple
                    , "StdParam", "RefNo" // arrstrCouple
                    , "StdParam", "FormNo" // arrstrCouple
                    , "StdParam", "Sign" // arrstrCouple
                    , "StdParam", "SourceInvoiceCode" // arrstrCouple
                    , "StdParam", "InvoiceAdjType" // arrstrCouple
                    , "StdParam", "PaymentMethodCode" // arrstrCouple
                    , "StdParam", "InvoiceType2" // arrstrCouple
                    , "StdParam", "CustomerNNTCode" // arrstrCouple
                    , "", "CustomerNNTName" // arrstrCouple
                    , "", "CustomerNNTAddress" // arrstrCouple
                    , "", "CustomerNNTPhone" // arrstrCouple
                    , "", "CustomerNNTBankName" // arrstrCouple
                    , "", "CustomerNNTEmail" // arrstrCouple
                    , "", "CustomerNNTAccNo" // arrstrCouple
                    , "", "CustomerNNTBuyerName" // arrstrCouple
                    , "StdParam", "CustomerMST" // arrstrCouple
                    , "StdParam", "TInvoiceCode" // arrstrCouple
                    , "StdParam", "InvoiceNo" // arrstrCouple
                    , "", "InvoiceDateUTC" // arrstrCouple
                                           //, "StdParam", "EmailSend" // arrstrCouple
                    , "", "InvoiceFileSpec" // arrstrCouple
                    , "", "InvoiceFilePath" // arrstrCouple
                    , "", "InvoicePDFFilePath" // arrstrCouple
                    , "float", "TotalValInvoice" // arrstrCouple
                    , "float", "TotalValVAT" // arrstrCouple
                    , "float", "TotalValPmt" // arrstrCouple
                    , "", "AttachedDelFilePath" // arrstrCouple
                    , "", "DeleteReason" // arrstrCouple
                    , "StdParam", "InvoiceVerifyCQTCode" // arrstrCouple
                    , "StdParam", "CurrencyCode" // arrstrCouple
                    , "float", "CurrencyRate" // arrstrCouple
                    , "float", "ValGoodsNotTaxable" // arrstrCouple
                    , "float", "ValGoodsNotChargeTax" // arrstrCouple
                    , "float", "ValGoodsVAT5" // arrstrCouple
                    , "float", "ValVAT5" // arrstrCouple
                    , "float", "ValGoodsVAT10" // arrstrCouple
                    , "float", "ValVAT10" // arrstrCouple
                    , "", "NNTFullName" // arrstrCouple
                    , "", "NNTFullAdress" // arrstrCouple
                    , "", "NNTPhone" // arrstrCouple
                    , "", "NNTFax" // arrstrCouple
                    , "", "NNTEmail" // arrstrCouple
                    , "", "NNTWebsite" // arrstrCouple
                    , "", "NNTAccNo" // arrstrCouple
                    , "", "NNTBankName" // arrstrCouple
                    , "", "Remark" // arrstrCouple
                    , "", "InvoiceCF1" // arrstrCouple
                    , "", "InvoiceCF2" // arrstrCouple
                    , "", "InvoiceCF3" // arrstrCouple
                    , "", "InvoiceCF4" // arrstrCouple
                    , "", "InvoiceCF5" // arrstrCouple
                    , "", "InvoiceCF6" // arrstrCouple
                    , "", "InvoiceCF7" // arrstrCouple
                    , "", "InvoiceCF8" // arrstrCouple
                    , "", "InvoiceCF9" // arrstrCouple
                    , "", "InvoiceCF10" // arrstrCouple
                    , "", "FlagConfirm" // arrstrCouple
                    );
                ////
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_Invoice, "EmailSend", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_Invoice, "CreateDTimeUTC", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_Invoice, "CreateBy", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_Invoice, "InvoiceNoDTimeUTC", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_Invoice, "InvoiceNoBy", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_Invoice, "SignDTimeUTC", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_Invoice, "SignBy", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_Invoice, "ApprDTimeUTC", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_Invoice, "ApprBy", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_Invoice, "CancelDTimeUTC", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_Invoice, "CancelBy", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_Invoice, "SendEmailDTimeUTC", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_Invoice, "SendEmailBy", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_Invoice, "IssuedDTimeUTC", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_Invoice, "IssuedBy", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_Invoice, "DeleteDTimeUTC", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_Invoice, "DeleteBy", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_Invoice, "ChangeDTimeUTC", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_Invoice, "ChangeBy", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_Invoice, "LUDTimeUTC", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_Invoice, "LUBy", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_Invoice, "FlagChange", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_Invoice, "FlagPushOutSite", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_Invoice, "InvoiceStatus", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_Invoice, "LogLUDTimeUTC", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_Invoice, "LogLUBy", typeof(object));
            }
            #endregion

            #region //// SaveTemp Invoice_Invoice For Check:
            //if (!bIsDelete)
            {
                // Upload:
                TUtils.CUtils.MyBuildDBDT_Common(
                    _cf.db // db
                    , "#input_Invoice_Invoice" // strTableName
                    , new object[] {
                            "InvoiceCode", TConst.BizMix.Default_DBColType
                            , "MST", TConst.BizMix.Default_DBColType
                            , "NetworkID", TConst.BizMix.Default_DBColType
                            , "RefNo", TConst.BizMix.Default_DBColType
                            , "FormNo", TConst.BizMix.Default_DBColType
                            , "Sign", TConst.BizMix.Default_DBColType
                            , "SourceInvoiceCode", TConst.BizMix.Default_DBColType
                            , "InvoiceAdjType", TConst.BizMix.Default_DBColType
                            , "PaymentMethodCode", TConst.BizMix.Default_DBColType
                            , "InvoiceType2", TConst.BizMix.Default_DBColType
                            , "CustomerNNTCode", TConst.BizMix.Default_DBColType
                            , "CustomerNNTName", TConst.BizMix.Default_DBColType
                            , "CustomerNNTAddress", TConst.BizMix.Default_DBColType
                            , "CustomerNNTPhone", TConst.BizMix.Default_DBColType
                            , "CustomerNNTBankName", TConst.BizMix.Default_DBColType
                            , "CustomerNNTEmail", TConst.BizMix.Default_DBColType
                            , "CustomerNNTAccNo", TConst.BizMix.Default_DBColType
                            , "CustomerNNTBuyerName", TConst.BizMix.Default_DBColType
                            , "CustomerMST", TConst.BizMix.Default_DBColType
                            , "TInvoiceCode", TConst.BizMix.Default_DBColType
                            , "InvoiceNo", TConst.BizMix.Default_DBColType
                            , "InvoiceDateUTC", TConst.BizMix.Default_DBColType
                            , "EmailSend", TConst.BizMix.Default_DBColType
                            , "InvoiceFileSpec", TConst.BizMix.Default_DBColType
                            , "InvoiceFilePath", TConst.BizMix.Default_DBColType
                            , "InvoicePDFFilePath", TConst.BizMix.Default_DBColType
                            , "TotalValInvoice", "float"
                            , "TotalValVAT", "float"
                            , "TotalValPmt", "float"
                            , "CreateDTimeUTC", TConst.BizMix.Default_DBColType
                            , "CreateBy", TConst.BizMix.Default_DBColType
                            , "InvoiceNoDTimeUTC", TConst.BizMix.Default_DBColType
                            , "InvoiceNoBy", TConst.BizMix.Default_DBColType
                            , "SignDTimeUTC", TConst.BizMix.Default_DBColType
                            , "SignBy", TConst.BizMix.Default_DBColType
                            , "ApprDTimeUTC", TConst.BizMix.Default_DBColType
                            , "ApprBy", TConst.BizMix.Default_DBColType
                            , "CancelDTimeUTC", TConst.BizMix.Default_DBColType
                            , "CancelBy", TConst.BizMix.Default_DBColType
                            , "SendEmailDTimeUTC", TConst.BizMix.Default_DBColType
                            , "SendEmailBy", TConst.BizMix.Default_DBColType
                            , "IssuedDTimeUTC", TConst.BizMix.Default_DBColType
                            , "IssuedBy", TConst.BizMix.Default_DBColType
                            , "AttachedDelFilePath", TConst.BizMix.Default_DBColType
                            , "DeleteReason", TConst.BizMix.Default_DBColType
                            , "DeleteDTimeUTC", TConst.BizMix.Default_DBColType
                            , "DeleteBy", TConst.BizMix.Default_DBColType
                            , "ChangeDTimeUTC", TConst.BizMix.Default_DBColType
                            , "ChangeBy", TConst.BizMix.Default_DBColType
                            , "InvoiceVerifyCQTCode", TConst.BizMix.Default_DBColType
                            , "CurrencyCode", TConst.BizMix.Default_DBColType
                            , "CurrencyRate", TConst.BizMix.Default_DBColType
                            , "ValGoodsNotTaxable", "float"
                            , "ValGoodsNotChargeTax", "float"
                            , "ValGoodsVAT5", "float"
                            , "ValVAT5", "float"
                            , "ValGoodsVAT10", "float"
                            , "ValVAT10", "float"
                            , "NNTFullName", TConst.BizMix.Default_DBColType
                            , "NNTFullAdress", TConst.BizMix.Default_DBColType
                            , "NNTPhone", TConst.BizMix.Default_DBColType
                            , "NNTFax", TConst.BizMix.Default_DBColType
                            , "NNTEmail", TConst.BizMix.Default_DBColType
                            , "NNTWebsite", TConst.BizMix.Default_DBColType
                            , "NNTAccNo", TConst.BizMix.Default_DBColType
                            , "NNTBankName", TConst.BizMix.Default_DBColType
                            , "LUDTimeUTC", TConst.BizMix.Default_DBColType
                            , "LUBy", TConst.BizMix.Default_DBColType
                            , "Remark", TConst.BizMix.Default_DBColType
                            , "InvoiceCF1", TConst.BizMix.Default_DBColType
                            , "InvoiceCF2", TConst.BizMix.Default_DBColType
                            , "InvoiceCF3", TConst.BizMix.Default_DBColType
                            , "InvoiceCF4", TConst.BizMix.Default_DBColType
                            , "InvoiceCF5", TConst.BizMix.Default_DBColType
                            , "InvoiceCF6", TConst.BizMix.Default_DBColType
                            , "InvoiceCF7", TConst.BizMix.Default_DBColType
                            , "InvoiceCF8", TConst.BizMix.Default_DBColType
                            , "InvoiceCF9", TConst.BizMix.Default_DBColType
                            , "InvoiceCF10", TConst.BizMix.Default_DBColType
                            , "FlagConfirm", TConst.BizMix.Default_DBColType
                            , "FlagChange", TConst.BizMix.Default_DBColType
                            , "FlagPushOutSite", TConst.BizMix.Default_DBColType
                            , "FlagDeleteOutSite", TConst.BizMix.Default_DBColType
                            , "InvoiceStatus", TConst.BizMix.Default_DBColType
                            , "LogLUDTimeUTC", TConst.BizMix.Default_DBColType
                            , "LogLUBy", TConst.BizMix.Default_DBColType
                        } // arrSingleStructure
                    , dtInput_Invoice_Invoice // dtData
                );
            }
            #endregion

            #region /// Refine and check Input Invoice_Invoice:
            {
                #region ----// Check InvalidInvoiceCode:
                {
                    string strSql_CheckInvalidInvoiceCode = CmUtils.StringUtils.Replace(@"
                            --- Check:
                            select distinct 
                                t.InvoiceCode
                            from #input_Invoice_Invoice t --//[mylock]
                            where(1=1)
                                and (t.InvoiceCode is null or LTRIM(RTRIM(t.InvoiceCode)) = '')
                            ;
						");
                    DataTable dt_CheckInvalidInvoiceCode = _cf.db.ExecQuery(
                        strSql_CheckInvalidInvoiceCode
                        ).Tables[0];
                    /////
                    if (dt_CheckInvalidInvoiceCode.Rows.Count > 0)
                    {
                        alParamsCoupleError.AddRange(new object[]{
                            "Check.ErrConditionalRaise", "(t.InvoiceCode is null or LTRIM(RTRIM(t.InvoiceCode)) = '')"
                            , "Check.NumberRows", dt_CheckInvalidInvoiceCode.Rows.Count
                            });
                        throw CmUtils.CMyException.Raise(
                            TError.ErridnInventory.Invoice_Invoice_SaveX_InvalidInvoiceCode
                            , null
                            , alParamsCoupleError.ToArray()
                            );
                    }
                    ////
                }
                #endregion

                #region ----// Check InvalidInvoiceStatus:
                {
                    string strSql_CheckInvalidInvoiceCode = CmUtils.StringUtils.Replace(@"
                            --- #tbl_Invoice_Invoice_ForSTUFF:
                            select distinct 
                                t.InvoiceCode
                            into #tbl_Invoice_Invoice_ForSTUFF
                            from #input_Invoice_Invoice t --//[mylock]
                                inner join Invoice_Invoice f --//[mylock]
                                    on t.InvoiceCode = f.InvoiceCode
                            where(1=1)
                                and f.InvoiceStatus not in ('PENDING') 
                            ;

                            --- Return:					
                            select 
                                STUFF(( 
		                            SELECT ',' + f.InvoiceCode
		                            FROM #tbl_Invoice_Invoice_ForSTUFF f --//[mylock]
		                            WHERE(1=1)
		                            FOR
		                            XML PATH('')
		                            ), 1, 1, ''
                                ) AS ListInvoiceCode
                            where(1=1)
                            ;

                            --- Clear For Debug:
                            drop table #tbl_Invoice_Invoice_ForSTUFF;
						");
                    DataTable dt_CheckInvalidInvoiceCode = _cf.db.ExecQuery(
                        strSql_CheckInvalidInvoiceCode
                        ).Tables[0];
                    /////
                    if (dt_CheckInvalidInvoiceCode.Rows.Count > 0)
                    {
                        string strListInvoiceCode = TUtils.CUtils.StdParam(dt_CheckInvalidInvoiceCode.Rows[0]["ListInvoiceCode"]);
                        /////
                        if (!string.IsNullOrEmpty(strListInvoiceCode))
                        {
                            if (bIsDelete)
                            {
                                goto MyCodeLabel_Done; // Thành công
                            }
                            else // if (!string.IsNullOrEmpty(strListInvoiceCode))
                            {
                                alParamsCoupleError.AddRange(new object[]{
                                    "Check.ErrConditionalRaise", "f.InvoiceStatus not in ('PENDING')"
                                    , "Check.strListInvoiceCode", strListInvoiceCode
                                    });
                                throw CmUtils.CMyException.Raise(
                                    TError.ErridnInventory.Invoice_Invoice_SaveX_StatusNotMatched
                                    , null
                                    , alParamsCoupleError.ToArray()
                                    );

                            }
                        }
                        /////
                    }
                    ////
                }
                #endregion

                #region ----// Đã cấp số hóa đơn thì không được Xóa:
                if (bIsDelete)
                {
                    string strSql_CheckInvalidInvoiceCode = CmUtils.StringUtils.Replace(@"
                            --- #tbl_Invoice_Invoice_ForSTUFF:
                            select distinct 
                                t.InvoiceCode
                            into #tbl_Invoice_Invoice_ForSTUFF
                            from #input_Invoice_Invoice t --//[mylock]
                                inner join Invoice_Invoice f --//[mylock]
                                    on t.InvoiceCode = f.InvoiceCode
                            where(1=1)
                                and f.InvoiceNo is not null 
                            ;

                            --- Return:					
                            select 
                                STUFF(( 
		                            SELECT ',' + f.InvoiceCode
		                            FROM #tbl_Invoice_Invoice_ForSTUFF f --//[mylock]
		                            WHERE(1=1)
		                            FOR
		                            XML PATH('')
		                            ), 1, 1, ''
                                ) AS ListInvoiceCode
                            where(1=1)
                            ;

                            --- Clear For Debug:
                            drop table #tbl_Invoice_Invoice_ForSTUFF;
						");
                    DataTable dt_CheckInvalidInvoiceCode = _cf.db.ExecQuery(
                        strSql_CheckInvalidInvoiceCode
                        ).Tables[0];
                    /////
                    if (dt_CheckInvalidInvoiceCode.Rows.Count > 0)
                    {
                        /////
                        string strListInvoiceCode = TUtils.CUtils.StdParam(dt_CheckInvalidInvoiceCode.Rows[0]["ListInvoiceCode"]);
                        ////
                        if (!string.IsNullOrEmpty(strListInvoiceCode))
                        {
                            alParamsCoupleError.AddRange(new object[]{
                                "Check.ErrConditionalRaise", "f.InvoiceNo is not null "
                                , "Check.strListInvoiceCode", strListInvoiceCode
                                });
                            throw CmUtils.CMyException.Raise(
                                TError.ErridnInventory.Invoice_Invoice_SaveX_ExistInvoiceNo
                                , null
                                , alParamsCoupleError.ToArray()
                                );

                        }
                    }
                    ////
                }
                #endregion

                #region ----// Nếu là hóa đơn điều chỉnh thì RefNo không được Null:
                if (!bIsDelete)
                {
                    string strSql_CheckInvalidInvoiceCode = CmUtils.StringUtils.Replace(@"
                            --- #tbl_Invoice_Invoice_ForSTUFF:
                            select distinct 
                                t.InvoiceCode
                            into #tbl_Invoice_Invoice_ForSTUFF
                            from #input_Invoice_Invoice t --//[mylock]
                            where(1=1)
                                and t.RefNo is null
                                and t.InvoiceAdjType in ('@strADJINCREASE', '@strADJDESCREASE')
                            ;

                            --- Return:					
                            select 
                                STUFF(( 
		                            SELECT ',' + f.InvoiceCode
		                            FROM #tbl_Invoice_Invoice_ForSTUFF f --//[mylock]
		                            WHERE(1=1)
		                            FOR
		                            XML PATH('')
		                            ), 1, 1, ''
                                ) AS ListInvoiceCode
                            where(1=1)
                            ;

                            --- Clear For Debug:
                            drop table #tbl_Invoice_Invoice_ForSTUFF;
						"
                        , "@strADJINCREASE", TConst.InvoiceAdjType.AdjInCrease
                        , "@strADJINCREASE", TConst.InvoiceAdjType.AdjDescrease
                        );
                    DataTable dt_CheckInvalidInvoiceCode = _cf.db.ExecQuery(
                        strSql_CheckInvalidInvoiceCode
                        ).Tables[0];
                    /////
                    if (dt_CheckInvalidInvoiceCode.Rows.Count > 0)
                    {
                        string strListInvoiceCode = TUtils.CUtils.StdParam(dt_CheckInvalidInvoiceCode.Rows[0]["ListInvoiceCode"]);
                        /////
                        if (!string.IsNullOrEmpty(strListInvoiceCode))
                        {
                            alParamsCoupleError.AddRange(new object[]{
                                "Check.ErrConditionalRaise", "and t.InvoiceAdjType in ('@strADJINCREASE', '@strADJDESCREASE') and t.RefNo is null"
                                , "Check.strListInvoiceCode", strListInvoiceCode
                                });
                            throw CmUtils.CMyException.Raise(
                                TError.ErridnInventory.Invoice_Invoice_SaveX_InvoiceAdjTypeIsNotNull
                                , null
                                , alParamsCoupleError.ToArray()
                                );
                        }
                        /////
                    }
                    ////
                }
                #endregion

                #region ----// Nếu là hóa đơn thay thế:
                {
                    #region ----// Nếu là hóa đơn thay thế thì RefNo không được Null:
                    {
                        string strSql_CheckInvalidInvoiceCode = CmUtils.StringUtils.Replace(@"
                                --- #tbl_Invoice_Invoice_ForSTUFF:
                                select distinct 
                                    t.RefNo
                                into #tbl_Invoice_Invoice_ForSTUFF
                                from #input_Invoice_Invoice t --//[mylock]
                                where(1=1)
                                    and t.SourceInvoiceCode in ('@strInvoiceReplace') 
                                    and (t.RefNo is null or LTRIM(RTRIM(t.RefNo)) = '')
                                ;

                                --- Return:					
                                select 
                                    STUFF(( 
		                                SELECT ',' + f.RefNo
		                                FROM #tbl_Invoice_Invoice_ForSTUFF f --//[mylock]
		                                WHERE(1=1)
		                                FOR
		                                XML PATH('')
		                                ), 1, 1, ''
                                    ) AS ListRefNo
                                where(1=1)
                                ;

                                --- Clear For Debug:
                                drop table #tbl_Invoice_Invoice_ForSTUFF;
						    "
                            , "@strInvoiceReplace", TConst.SourceInvoiceCode.InvoiceReplace
                            );
                        DataTable dt_CheckInvalidInvoiceCode = _cf.db.ExecQuery(
                            strSql_CheckInvalidInvoiceCode
                            ).Tables[0];
                        /////
                        if (dt_CheckInvalidInvoiceCode.Rows.Count > 0)
                        {
                            /////
                            string strListRefNo = TUtils.CUtils.StdParam(dt_CheckInvalidInvoiceCode.Rows[0]["ListRefNo"]);
                            ////
                            if (!string.IsNullOrEmpty(strListRefNo))
                            {
                                alParamsCoupleError.AddRange(new object[]{
                                    "Check.ErrConditionalRaise", "and t.SourceInvoiceCode in ('@strInvoiceReplace') and (t.RefNo is null or LTRIM(RTRIM(t.RefNo)) = '')"
                                    , "Check.strListRefNo", strListRefNo
                                    });
                                throw CmUtils.CMyException.Raise(
                                    TError.ErridnInventory.Invoice_Invoice_SaveX_Input_Invoice_InvalidRefNo
                                    , null
                                    , alParamsCoupleError.ToArray()
                                    );

                            }
                        }
                        ////
                    }
                    #endregion

                    #region ----// RefNo ở trạng thái Deleted:
                    {
                        string strSql_CheckInvalidInvoiceCode = CmUtils.StringUtils.Replace(@"
                                --- #tbl_Invoice_Invoice_ForSTUFF:
                                select distinct 
                                    t.RefNo
                                into #tbl_Invoice_Invoice_ForSTUFF
                                from #input_Invoice_Invoice t --//[mylock]
                                    left join Invoice_Invoice f --//[mylock]
                                        on t.RefNo = f.InvoiceCode
                                where(1=1)
                                    and t.SourceInvoiceCode in ('@strInvoiceReplace') 
                                    and (f.InvoiceStatus not in ('DELETED', 'ISSUED')) 
                                ;

                                --- Return:					
                                select 
                                    STUFF(( 
		                                SELECT ',' + f.RefNo
		                                FROM #tbl_Invoice_Invoice_ForSTUFF f --//[mylock]
		                                WHERE(1=1)
		                                FOR
		                                XML PATH('')
		                                ), 1, 1, ''
                                    ) AS ListRefNo
                                where(1=1)
                                ;

                                --- Clear For Debug:
                                drop table #tbl_Invoice_Invoice_ForSTUFF;
						    "
                            , "@strInvoiceReplace", TConst.SourceInvoiceCode.InvoiceReplace
                            );
                        DataTable dt_CheckInvalidInvoiceCode = _cf.db.ExecQuery(
                            strSql_CheckInvalidInvoiceCode
                            ).Tables[0];
                        /////
                        if (dt_CheckInvalidInvoiceCode.Rows.Count > 0)
                        {
                            /////
                            string strListRefNo = TUtils.CUtils.StdParam(dt_CheckInvalidInvoiceCode.Rows[0]["ListRefNo"]);
                            ////
                            if (!string.IsNullOrEmpty(strListRefNo))
                            {
                                alParamsCoupleError.AddRange(new object[]{
                                    "Check.ErrConditionalRaise", "and t.SourceInvoiceCode in ('@strInvoiceReplace')  and (f.InvoiceStatus not in ('DELETED', 'ISSUED')) "
                                    , "Check.strListRefNo", strListRefNo
                                    });
                                throw CmUtils.CMyException.Raise(
                                    TError.ErridnInventory.Invoice_Invoice_SaveX_Input_Invoice_InvalidInvoiceStatusRefNo
                                    , null
                                    , alParamsCoupleError.ToArray()
                                    );

                            }
                        }
                        ////
                    }
                    #endregion

                    #region ----// Không cho phép xóa hóa đơn thay thế:
                    if (bIsDelete)
                    {
                        string strSql_CheckInvalidInvoiceCode = CmUtils.StringUtils.Replace(@"
                                --- #tbl_Invoice_Invoice_ForSTUFF:
                                select distinct 
                                    t.RefNo
                                into #tbl_Invoice_Invoice_ForSTUFF
                                from #input_Invoice_Invoice t --//[mylock]
                                where(1=1)
                                ;

                                --- Return:					
                                select 
                                    STUFF(( 
		                                SELECT ',' + f.RefNo
		                                FROM #tbl_Invoice_Invoice_ForSTUFF f --//[mylock]
		                                WHERE(1=1)
		                                FOR
		                                XML PATH('')
		                                ), 1, 1, ''
                                    ) AS ListRefNo
                                where(1=1)
                                ;

                                --- Clear For Debug:
                                drop table #tbl_Invoice_Invoice_ForSTUFF;
						    "
                            , "@strInvoiceReplace", TConst.SourceInvoiceCode.InvoiceReplace
                            );
                        DataTable dt_CheckInvalidInvoiceCode = _cf.db.ExecQuery(
                            strSql_CheckInvalidInvoiceCode
                            ).Tables[0];
                        /////
                        if (dt_CheckInvalidInvoiceCode.Rows.Count > 0)
                        {
                            /////
                            string strListRefNo = TUtils.CUtils.StdParam(dt_CheckInvalidInvoiceCode.Rows[0]["ListRefNo"]);
                            ////
                            if (!string.IsNullOrEmpty(strListRefNo))
                            {
                                alParamsCoupleError.AddRange(new object[]{
                                    "Check.strListRefNo", strListRefNo
                                    });
                                throw CmUtils.CMyException.Raise(
                                    TError.ErridnInventory.Invoice_Invoice_SaveX_NotDelete
                                    , null
                                    , alParamsCoupleError.ToArray()
                                    );

                            }
                        }
                        ////
                    }
                    #endregion
                }
                #endregion

                #region ----// Check Mst_NNT:
                {
                    string strSql_CheckMstNNT = CmUtils.StringUtils.Replace(@"
                            --- #tbl_Invoice_Invoice_ForSTUFF:
                            select distinct 
	                            t.MST
                            into #tbl_Invoice_Invoice_ForSTUFF_Exist
                            from #input_Invoice_Invoice t --//[mylock]
	                            left join Mst_NNT f --//[mylock]
		                            on t.MST = f.MST
                            where(1=1)
	                            and f.MST is null
                            ;

                            --- #tbl_Invoice_Invoice_ForSTUFF_Active:
                            select distinct 
	                            t.MST
                            into #tbl_Invoice_Invoice_ForSTUFF_Active
                            from #input_Invoice_Invoice t --//[mylock]
	                            left join Mst_NNT f --//[mylock]
		                            on t.MST = f.MST
                            where(1=1)
	                            and f.FlagActive = '0'
                            ;

                            --- Return:					
                            select 
                                STUFF(( 
		                            SELECT ',' + f.MST
		                            FROM #tbl_Invoice_Invoice_ForSTUFF_Exist f --//[mylock]
		                            WHERE(1=1)
		                            FOR
		                            XML PATH('')
		                            ), 1, 1, ''
                                ) AS ListMST
                            where(1=1)
                            ;

                            --- Return:					
                            select 
                                STUFF(( 
		                            SELECT ',' + f.MST
		                            FROM #tbl_Invoice_Invoice_ForSTUFF_Active f --//[mylock]
		                            WHERE(1=1)
		                            FOR
		                            XML PATH('')
		                            ), 1, 1, ''
                                ) AS ListMST
                            where(1=1)
                            ;

                            --- Clear For Debug:
                            drop table #tbl_Invoice_Invoice_ForSTUFF_Exist;
                            drop table #tbl_Invoice_Invoice_ForSTUFF_Active;
						");
                    DataSet ds_CheckMstNNT = _cf.db.ExecQuery(
                        strSql_CheckMstNNT
                        );
                    ////
                    DataTable dt_Invoice_Invoice_ForSTUFF_Exist = ds_CheckMstNNT.Tables[0];
                    DataTable dt_Invoice_Invoice_ForSTUFF_Active = ds_CheckMstNNT.Tables[1];
                    /////
                    if (dt_Invoice_Invoice_ForSTUFF_Exist.Rows.Count > 0)
                    {
                        string strListMST = TUtils.CUtils.StdParam(dt_Invoice_Invoice_ForSTUFF_Exist.Rows[0]["ListMST"]);
                        /////
                        if (!string.IsNullOrEmpty(strListMST))
                        {
                            alParamsCoupleError.AddRange(new object[]{
                                "Check.ErrConditionalRaise", "Mst_NNT.MST is null"
                                , "Check.strListMST", strListMST
                                });
                            throw CmUtils.CMyException.Raise(
                                TError.ErridnInventory.Invoice_Invoice_SaveX_Invalid_MstNNT_NotFound
                                , null
                                , alParamsCoupleError.ToArray()
                                );
                        }
                        /////
                    }
                    ////
                    if (dt_Invoice_Invoice_ForSTUFF_Active.Rows.Count > 0)
                    {
                        string strListMST = TUtils.CUtils.StdParam(dt_Invoice_Invoice_ForSTUFF_Active.Rows[0]["ListMST"]);
                        /////
                        if (!string.IsNullOrEmpty(strListMST))
                        {
                            alParamsCoupleError.AddRange(new object[]{
                                "Check.ErrConditionalRaise", "Mst_NNT.FlagActive = '0'"
                                , "Check.strListMST", strListMST
                                });
                            throw CmUtils.CMyException.Raise(
                                TError.ErridnInventory.Invoice_Invoice_SaveX_Invalid_MstNNT_FlagActive
                                , null
                                , alParamsCoupleError.ToArray()
                                );
                        }
                        /////
                    }
                    ////
                }
                #endregion

                #region ----// Check Mst_PaymentMethods:
                {
                    string strSql_CheckPaymentMethods = CmUtils.StringUtils.Replace(@"
                            --- #tbl_Invoice_Invoice_ForSTUFF:
                            select distinct 
	                            t.PaymentMethodCode
                            into #tbl_Invoice_Invoice_ForSTUFF_Exist
                            from #input_Invoice_Invoice t --//[mylock]
	                            left join Mst_PaymentMethods f --//[mylock]
		                            on t.PaymentMethodCode = f.PaymentMethodCode
                            where(1=1)
	                            and f.PaymentMethodCode is null
                            ;

                            --- #tbl_Invoice_Invoice_ForSTUFF_Active:
                            select distinct 
	                            t.PaymentMethodCode
                            into #tbl_Invoice_Invoice_ForSTUFF_Active
                            from #input_Invoice_Invoice t --//[mylock]
	                            left join Mst_PaymentMethods f --//[mylock]
		                            on t.PaymentMethodCode = f.PaymentMethodCode
                            where(1=1)
	                            and f.FlagActive = '0'
                            ;

                            --- Return:					
                            select 
                                STUFF(( 
		                            SELECT ',' + f.PaymentMethodCode
		                            FROM #tbl_Invoice_Invoice_ForSTUFF_Exist f --//[mylock]
		                            WHERE(1=1)
		                            FOR
		                            XML PATH('')
		                            ), 1, 1, ''
                                ) AS ListPaymentMethodCode
                            where(1=1)
                            ;

                            --- Return:					
                            select 
                                STUFF(( 
		                            SELECT ',' + f.PaymentMethodCode
		                            FROM #tbl_Invoice_Invoice_ForSTUFF_Active f --//[mylock]
		                            WHERE(1=1)
		                            FOR
		                            XML PATH('')
		                            ), 1, 1, ''
                                ) AS ListPaymentMethodCode
                            where(1=1)
                            ;

                            --- Clear For Debug:
                            drop table #tbl_Invoice_Invoice_ForSTUFF_Exist;
                            drop table #tbl_Invoice_Invoice_ForSTUFF_Active;
						");
                    DataSet ds_CheckMst_PaymentMethods = _cf.db.ExecQuery(
                        strSql_CheckPaymentMethods
                        );
                    ////
                    DataTable dt_Invoice_Invoice_ForSTUFF_Exist = ds_CheckMst_PaymentMethods.Tables[0];
                    DataTable dt_Invoice_Invoice_ForSTUFF_Active = ds_CheckMst_PaymentMethods.Tables[1];
                    /////
                    if (dt_Invoice_Invoice_ForSTUFF_Exist.Rows.Count > 0)
                    {
                        string strListPaymentMethodCode = TUtils.CUtils.StdParam(dt_Invoice_Invoice_ForSTUFF_Exist.Rows[0]["ListPaymentMethodCode"]);
                        /////
                        if (!string.IsNullOrEmpty(strListPaymentMethodCode))
                        {
                            alParamsCoupleError.AddRange(new object[]{
                                "Check.ErrConditionalRaise", "Mst_PaymentMethods.PaymentMethodCode is null"
                                , "Check.strListPaymentMethodCode", strListPaymentMethodCode
                                });
                            throw CmUtils.CMyException.Raise(
                                TError.ErridnInventory.Invoice_Invoice_SaveX_Invalid_PaymentMethods_NotFound
                                , null
                                , alParamsCoupleError.ToArray()
                                );
                        }
                        /////
                    }
                    ////
                    if (dt_Invoice_Invoice_ForSTUFF_Active.Rows.Count > 0)
                    {
                        string strListPaymentMethodCode = TUtils.CUtils.StdParam(dt_Invoice_Invoice_ForSTUFF_Active.Rows[0]["ListPaymentMethodCode"]);
                        /////
                        if (!string.IsNullOrEmpty(strListPaymentMethodCode))
                        {
                            alParamsCoupleError.AddRange(new object[]{
                                "Check.ErrConditionalRaise", "Mst_PaymentMethods.FlagActive = '0'"
                                , "Check.strListPaymentMethodCode", strListPaymentMethodCode
                                });
                            throw CmUtils.CMyException.Raise(
                                TError.ErridnInventory.Invoice_Invoice_SaveX_Invalid_PaymentMethods_FlagActive
                                , null
                                , alParamsCoupleError.ToArray()
                                );
                        }
                        /////
                    }
                    ////
                }
                #endregion

                #region ----// Check Mst_InvoiceType2:
                {
                    string strSql_CheckInvoiceType2 = CmUtils.StringUtils.Replace(@"
                            --- #tbl_Invoice_Invoice_ForSTUFF:
                            select distinct 
	                            t.InvoiceType2
                            into #tbl_Invoice_Invoice_ForSTUFF_Exist
                            from #input_Invoice_Invoice t --//[mylock]
	                            left join Mst_InvoiceType2 f --//[mylock]
		                            on t.InvoiceType2 = f.InvoiceType2
                            where(1=1)
	                            and f.InvoiceType2 is null
                            ;

                            --- #tbl_Invoice_Invoice_ForSTUFF_Active:
                            select distinct 
	                            t.InvoiceType2
                            into #tbl_Invoice_Invoice_ForSTUFF_Active
                            from #input_Invoice_Invoice t --//[mylock]
	                            left join Mst_InvoiceType2 f --//[mylock]
		                            on t.InvoiceType2 = f.InvoiceType2
                            where(1=1)
	                            and f.FlagActive = '0'
                            ;

                            --- Return:					
                            select 
                                STUFF(( 
		                            SELECT ',' + f.InvoiceType2
		                            FROM #tbl_Invoice_Invoice_ForSTUFF_Exist f --//[mylock]
		                            WHERE(1=1)
		                            FOR
		                            XML PATH('')
		                            ), 1, 1, ''
                                ) AS ListInvoiceType2
                            where(1=1)
                            ;

                            --- Return:					
                            select 
                                STUFF(( 
		                            SELECT ',' + f.InvoiceType2
		                            FROM #tbl_Invoice_Invoice_ForSTUFF_Active f --//[mylock]
		                            WHERE(1=1)
		                            FOR
		                            XML PATH('')
		                            ), 1, 1, ''
                                ) AS ListInvoiceType2
                            where(1=1)
                            ;

                            --- Clear For Debug:
                            drop table #tbl_Invoice_Invoice_ForSTUFF_Exist;
                            drop table #tbl_Invoice_Invoice_ForSTUFF_Active;
						");
                    DataSet ds_CheckMst_InvoiceType2 = _cf.db.ExecQuery(
                        strSql_CheckInvoiceType2
                        );
                    ////
                    DataTable dt_Invoice_Invoice_ForSTUFF_Exist = ds_CheckMst_InvoiceType2.Tables[0];
                    DataTable dt_Invoice_Invoice_ForSTUFF_Active = ds_CheckMst_InvoiceType2.Tables[1];
                    /////
                    if (dt_Invoice_Invoice_ForSTUFF_Exist.Rows.Count > 0)
                    {
                        string strListInvoiceType2 = TUtils.CUtils.StdParam(dt_Invoice_Invoice_ForSTUFF_Exist.Rows[0]["ListInvoiceType2"]);
                        /////
                        if (!string.IsNullOrEmpty(strListInvoiceType2))
                        {
                            alParamsCoupleError.AddRange(new object[]{
                                "Check.ErrConditionalRaise", "Mst_InvoiceType2.InvoiceType2 is null"
                                , "Check.strListInvoiceType2", strListInvoiceType2
                                });
                            throw CmUtils.CMyException.Raise(
                                TError.ErridnInventory.Invoice_Invoice_SaveX_Invalid_InvoiceType2_NotFound
                                , null
                                , alParamsCoupleError.ToArray()
                                );
                        }
                        /////
                    }
                    ////
                    if (dt_Invoice_Invoice_ForSTUFF_Active.Rows.Count > 0)
                    {
                        string strListInvoiceType2 = TUtils.CUtils.StdParam(dt_Invoice_Invoice_ForSTUFF_Active.Rows[0]["ListInvoiceType2"]);
                        /////
                        if (!string.IsNullOrEmpty(strListInvoiceType2))
                        {
                            alParamsCoupleError.AddRange(new object[]{
                                "Check.ErrConditionalRaise", "Mst_InvoiceType2.FlagActive = '0'"
                                , "Check.strListInvoiceType2", strListInvoiceType2
                                });
                            throw CmUtils.CMyException.Raise(
                                TError.ErridnInventory.Invoice_Invoice_SaveX_Invalid_InvoiceType2_FlagActive
                                , null
                                , alParamsCoupleError.ToArray()
                                );
                        }
                        /////
                    }
                    ////
                }
                #endregion

                #region ----// Check Mst_SourceInvoice:
                {
                    string strSql_CheckMst_SourceInvoice = CmUtils.StringUtils.Replace(@"
                            --- #tbl_Invoice_Invoice_ForSTUFF:
                            select distinct 
	                            t.SourceInvoiceCode
                            into #tbl_Invoice_Invoice_ForSTUFF_Exist
                            from #input_Invoice_Invoice t --//[mylock]
	                            left join Mst_SourceInvoice f --//[mylock]
		                            on t.SourceInvoiceCode = f.SourceInvoiceCode
                            where(1=1)
	                            and f.SourceInvoiceCode is null
                            ;

                            --- #tbl_Invoice_Invoice_ForSTUFF_Active:
                            select distinct 
	                            t.SourceInvoiceCode
                            into #tbl_Invoice_Invoice_ForSTUFF_Active
                            from #input_Invoice_Invoice t --//[mylock]
	                            left join Mst_SourceInvoice f --//[mylock]
		                            on t.SourceInvoiceCode = f.SourceInvoiceCode
                            where(1=1)
	                            and f.FlagActive = '0'
                            ;

                            --- Return:					
                            select 
                                STUFF(( 
		                            SELECT ',' + f.SourceInvoiceCode
		                            FROM #tbl_Invoice_Invoice_ForSTUFF_Exist f --//[mylock]
		                            WHERE(1=1)
		                            FOR
		                            XML PATH('')
		                            ), 1, 1, ''
                                ) AS ListSourceInvoiceCode
                            where(1=1)
                            ;

                            --- Return:					
                            select 
                                STUFF(( 
		                            SELECT ',' + f.SourceInvoiceCode
		                            FROM #tbl_Invoice_Invoice_ForSTUFF_Active f --//[mylock]
		                            WHERE(1=1)
		                            FOR
		                            XML PATH('')
		                            ), 1, 1, ''
                                ) AS ListSourceInvoiceCode
                            where(1=1)
                            ;

                            --- Clear For Debug:
                            drop table #tbl_Invoice_Invoice_ForSTUFF_Exist;
                            drop table #tbl_Invoice_Invoice_ForSTUFF_Active;
						");
                    DataSet ds_CheckMst_PaymentMethods = _cf.db.ExecQuery(
                        strSql_CheckMst_SourceInvoice
                        );
                    ////
                    DataTable dt_Invoice_Invoice_ForSTUFF_Exist = ds_CheckMst_PaymentMethods.Tables[0];
                    DataTable dt_Invoice_Invoice_ForSTUFF_Active = ds_CheckMst_PaymentMethods.Tables[1];
                    /////
                    if (dt_Invoice_Invoice_ForSTUFF_Exist.Rows.Count > 0)
                    {
                        string strListSourceInvoiceCode = TUtils.CUtils.StdParam(dt_Invoice_Invoice_ForSTUFF_Exist.Rows[0]["ListSourceInvoiceCode"]);
                        /////
                        if (!string.IsNullOrEmpty(strListSourceInvoiceCode))
                        {
                            alParamsCoupleError.AddRange(new object[]{
                                "Check.ErrConditionalRaise", "Mst_SourceInvoice.SourceInvoiceCode is null"
                                , "Check.strListSourceInvoiceCode", strListSourceInvoiceCode
                                });
                            throw CmUtils.CMyException.Raise(
                                TError.ErridnInventory.Invoice_Invoice_SaveX_Invalid_SourceInvoice_NotFound
                                , null
                                , alParamsCoupleError.ToArray()
                                );
                        }
                        /////
                    }
                    ////
                    if (dt_Invoice_Invoice_ForSTUFF_Active.Rows.Count > 0)
                    {
                        string strListSourceInvoiceCode = TUtils.CUtils.StdParam(dt_Invoice_Invoice_ForSTUFF_Active.Rows[0]["ListSourceInvoiceCode"]);
                        /////
                        if (!string.IsNullOrEmpty(strListSourceInvoiceCode))
                        {
                            alParamsCoupleError.AddRange(new object[]{
                                "Check.ErrConditionalRaise", "Mst_SourceInvoice.FlagActive = '0'"
                                , "Check.strListPaymentMethodCode", strListSourceInvoiceCode
                                });
                            throw CmUtils.CMyException.Raise(
                                TError.ErridnInventory.Invoice_Invoice_SaveX_Invalid_SourceInvoice_FlagActive
                                , null
                                , alParamsCoupleError.ToArray()
                                );
                        }
                        /////
                    }
                    ////
                }
                #endregion

                #region ----// Check Invoice_TempInvoice:
                {
                    string strSql_CheckInvoice_TempInvoice = CmUtils.StringUtils.Replace(@"
                            --- #tbl_Invoice_Invoice_ForSTUFF_Exist:
                            select distinct 
	                            t.TInvoiceCode
                            into #tbl_Invoice_Invoice_ForSTUFF_Exist
                            from #input_Invoice_Invoice t --//[mylock]
	                            left join Invoice_TempInvoice f --//[mylock]
		                            on t.TInvoiceCode = f.TInvoiceCode
                            where(1=1)
	                            and f.TInvoiceCode is null
                            ;

                            --- #tbl_Invoice_Invoice_ForSTUFF_Active:
                            select distinct 
	                            t.TInvoiceCode
                            into #tbl_Invoice_Invoice_ForSTUFF_Active
                            from #input_Invoice_Invoice t --//[mylock]
	                            left join Invoice_TempInvoice f --//[mylock]
		                            on t.TInvoiceCode = f.TInvoiceCode
                            where(1=1)
	                            and f.TInvoiceStatus not in ('ISSUED')
                            ;

                            --- Return:					
                            select 
                                STUFF(( 
		                            SELECT ',' + f.TInvoiceCode
		                            FROM #tbl_Invoice_Invoice_ForSTUFF_Exist f --//[mylock]
		                            WHERE(1=1)
		                            FOR
		                            XML PATH('')
		                            ), 1, 1, ''
                                ) AS ListTInvoiceCode
                            where(1=1)
                            ;

                            --- Return:					
                            select 
                                STUFF(( 
		                            SELECT ',' + f.TInvoiceCode
		                            FROM #tbl_Invoice_Invoice_ForSTUFF_Active f --//[mylock]
		                            WHERE(1=1)
		                            FOR
		                            XML PATH('')
		                            ), 1, 1, ''
                                ) AS ListTInvoiceCode
                            where(1=1)
                            ;

                            --- Clear For Debug:
                            drop table #tbl_Invoice_Invoice_ForSTUFF_Exist;
                            drop table #tbl_Invoice_Invoice_ForSTUFF_Active;
						");
                    DataSet ds_CheckInvoice_TempInvoice = _cf.db.ExecQuery(
                        strSql_CheckInvoice_TempInvoice
                        );
                    ////
                    DataTable dt_Invoice_Invoice_ForSTUFF_Exist = ds_CheckInvoice_TempInvoice.Tables[0];
                    DataTable dt_Invoice_Invoice_ForSTUFF_Active = ds_CheckInvoice_TempInvoice.Tables[1];
                    /////
                    if (dt_Invoice_Invoice_ForSTUFF_Exist.Rows.Count > 0)
                    {
                        string strListTInvoiceCode = TUtils.CUtils.StdParam(dt_Invoice_Invoice_ForSTUFF_Exist.Rows[0]["ListTInvoiceCode"]);
                        /////
                        if (!string.IsNullOrEmpty(strListTInvoiceCode))
                        {
                            alParamsCoupleError.AddRange(new object[]{
                                "Check.ErrConditionalRaise", "Invoice_TempInvoice.TInvoiceCode is null"
                                , "Check.strListTInvoiceCode", strListTInvoiceCode
                                });
                            throw CmUtils.CMyException.Raise(
                                TError.ErridnInventory.Invoice_Invoice_SaveX_Invalid_TempInvoice_NotFound
                                , null
                                , alParamsCoupleError.ToArray()
                                );
                        }
                        /////
                    }
                    ////
                    if (dt_Invoice_Invoice_ForSTUFF_Active.Rows.Count > 0)
                    {
                        string strListTInvoiceCode = TUtils.CUtils.StdParam(dt_Invoice_Invoice_ForSTUFF_Active.Rows[0]["ListTInvoiceCode"]);
                        /////
                        if (!string.IsNullOrEmpty(strListTInvoiceCode))
                        {
                            alParamsCoupleError.AddRange(new object[]{
                                "Check.ErrConditionalRaise", "Invoice_TempInvoice.TInvoiceStatus not in ('ISSUED')"
                                , "Check.strListTInvoiceCode", strListTInvoiceCode
                                });
                            throw CmUtils.CMyException.Raise(
                                TError.ErridnInventory.Invoice_Invoice_SaveX_Invalid_TempInvoice_StatusNotMatch
                                , null
                                , alParamsCoupleError.ToArray()
                                );
                        }
                        /////
                    }
                    ////
                }
                #endregion

                #region ----// Check SL hóa đơn sử dụng:
                {
                    string strSql_CheckInvoice_TempInvoice = CmUtils.StringUtils.Replace(@"
                            --- #tbl_Invoice_TempInvoice:
                            select distinct 
	                            t.TInvoiceCode
                            into #tbl_Invoice_TempInvoice
                            from #input_Invoice_Invoice t --//[mylock]
	                            inner join Invoice_TempInvoice f --//[mylock]
		                            on t.TInvoiceCode = t.TInvoiceCode
                            where(1=1)
                            ;

							---- Return:
							select 
								t.TInvoiceCode
								, f.EndInvoiceNo
								, f.StartInvoiceNo
								, f.QtyUsed
								, (f.EndInvoiceNo - f.StartInvoiceNo + 1 - f.QtyUsed) QtyRemain
							from #tbl_Invoice_TempInvoice t --//[mylock]
								inner join Invoice_TempInvoice f --//[mylock]
									on t.TInvoiceCode = f.TInvoiceCode
							where(1=1)
								and (f.EndInvoiceNo - f.StartInvoiceNo + 1 - f.QtyUsed) < 1
							;

                            --- Clear For Debug:
                            drop table #tbl_Invoice_TempInvoice;
						");
                    DataSet ds_Invoice_TempInvoice = _cf.db.ExecQuery(
                        strSql_CheckInvoice_TempInvoice
                        );
                    ////
                    DataTable dt_Invoice_TempInvoice = ds_Invoice_TempInvoice.Tables[0];
                    /////
                    if (dt_Invoice_TempInvoice.Rows.Count > 0)
                    {
                        alParamsCoupleError.AddRange(new object[]{
                            "Check.strTInvoiceCode", dt_Invoice_TempInvoice.Rows[0]["TInvoiceCode"]
                            , "Check.DB.StartInvoiceNo", dt_Invoice_TempInvoice.Rows[0]["StartInvoiceNo"]
                            , "Check.DB.EndInvoiceNo", dt_Invoice_TempInvoice.Rows[0]["EndInvoiceNo"]
                            , "Check.DB.QtyUsed",  dt_Invoice_TempInvoice.Rows[0]["QtyUsed"]
                            , "Check.ErrConditionRaise", "((nEndInvoiceNo - nStartInvoiceNo - nQtyUsed)< 1)"
                            });
                        throw CmUtils.CMyException.Raise(
                            TError.ErridnInventory.Invoice_Invoice_SaveX_Invalid_SourceInvoice_NotFound
                            , null
                            , alParamsCoupleError.ToArray()
                            );
                    }
                    ////
                }
                #endregion
            }
            #endregion

            #region // Build Invoice_Invoice:
            {
                string strSql_Build = CmUtils.StringUtils.Replace(@"
                        ----- #tbl_Invoice_Invoice_Build:
                        select 
	                        t.InvoiceCode
	                        , t.MST
	                        , t.NetworkID
	                        , t.RefNo
	                        , t.FormNo
	                        , t.Sign
	                        , t.SourceInvoiceCode
	                        , t.InvoiceAdjType
	                        , t.InvoiceType2
	                        , t.PaymentMethodCode
	                        , t.CustomerNNTCode
	                        , t.CustomerNNTName
	                        , t.CustomerNNTAddress
	                        , t.CustomerNNTPhone
	                        , t.CustomerNNTBankName
	                        , t.CustomerNNTEmail
	                        , t.CustomerNNTAccNo
	                        , t.CustomerNNTBuyerName
	                        , t.CustomerMST
	                        , t.TInvoiceCode
	                        , t.InvoiceNo
	                        , t.InvoiceDateUTC
	                        , t.EmailSend
	                        , t.InvoiceFileSpec
	                        , t.InvoiceFilePath
	                        , null InvoicePDFFilePath
	                        , t.TotalValInvoice
	                        , t.TotalValVAT
	                        , t.TotalValPmt
	                        , IsNull(f.CreateDTimeUTC, '@strLogLUDTimeUTC') CreateDTimeUTC --t.CreateDTimeUTC
	                        , IsNull(f.CreateBy, '@strLogLUBy') CreateBy --t.CreateBy
	                        , t.InvoiceNoDTimeUTC
	                        , t.InvoiceNoBy
	                        , t.SignDTimeUTC
	                        , t.SignBy
	                        , t.ApprDTimeUTC
	                        , t.ApprBy
	                        , t.CancelDTimeUTC
	                        , t.CancelBy
	                        , t.SendEmailDTimeUTC
	                        , t.SendEmailBy
	                        , t.IssuedDTimeUTC
	                        , t.IssuedBy
                            , null AttachedDelFilePath
                            , null DeleteReason
                            , t.DeleteDTimeUTC
	                        , t.DeleteBy
	                        , t.ChangeDTimeUTC
	                        , t.ChangeBy
	                        , t.InvoiceVerifyCQTCode
	                        , t.CurrencyCode
	                        , t.CurrencyRate
	                        , t.ValGoodsNotTaxable
	                        , t.ValGoodsNotChargeTax
	                        , t.ValGoodsVAT5
	                        , t.ValVAT5
	                        , t.ValGoodsVAT10
	                        , t.ValVAT10
	                        , t.NNTFullName
	                        , t.NNTFullAdress
	                        , t.NNTPhone
	                        , t.NNTFax
	                        , t.NNTEmail
	                        , t.NNTWebsite
	                        , t.NNTAccNo
	                        , t.NNTBankName
	                        , '@strLogLUDTimeUTC' LUDTimeUTC --t.LUDTimeUTC
	                        , '@strLogLUBy' LUBy --t.LUBy
	                        , t.Remark
	                        , t.InvoiceCF1
	                        , t.InvoiceCF2
	                        , t.InvoiceCF3
	                        , t.InvoiceCF4
	                        , t.InvoiceCF5
	                        , t.InvoiceCF6
	                        , t.InvoiceCF7
	                        , t.InvoiceCF8
	                        , t.InvoiceCF9
	                        , t.InvoiceCF10
	                        --, t.FlagConfirm
	                        , '1' FlagChange --t.FlagChange
	                        , null FlagPushOutSite -- t.FlagPushOutSite
	                        , null FlagDeleteOutSite -- t.FlagDeleteOutSite
	                        , '@strInvoiceStatus' InvoiceStatus --t.InvoiceStatus
	                        , '@strLogLUDTimeUTC' LogLUDTimeUTC --t.LogLUDTimeUTC
	                        , '@strLogLUBy' LogLUBy --t.LogLUBy
                        into #tbl_Invoice_Invoice_Build
                        from #input_Invoice_Invoice t --//[mylock]
                            left join Invoice_Invoice f --//[mylock]
                                on t.InvoiceCode = f.InvoiceCode
                        where(1=1)
                        ;

                        select null tbl_Invoice_Invoice_Build, t.* from #tbl_Invoice_Invoice_Build t --//[mylock];
                    ;"
                    , "@strInvoiceStatus", TConst.InvoiceStatus.Pending
                    , "@strLogLUDTimeUTC", dtimeSys.ToString("yyyy-MM-dd hh:mm:ss")
                    , "@strLogLUBy", strWAUserCode
                    );
                DataTable dt_Build = _cf.db.ExecQuery(
                    strSql_Build
                    ).Tables[0];
                /////
            }
            #endregion

            #region //// Refine and Check Input Invoice_InvoiceDtl:
            ////
            DataTable dtInput_Invoice_InvoiceDtl = null;
            if (!bIsDelete)
            {
                ////
                string strTableCheck = "Invoice_InvoiceDtl";
                ////
                if (!dsData.Tables.Contains(strTableCheck))
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.TableName", strTableCheck
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Invoice_Invoice_SaveX_Input_InvoiceDtlTblNotFound
                        , null
                        , alParamsCoupleError.ToArray()
                        );
                }
                dtInput_Invoice_InvoiceDtl = dsData.Tables[strTableCheck];
                ////

                if (dtInput_Invoice_InvoiceDtl.Rows.Count < 1)
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.TableName", strTableCheck
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Invoice_Invoice_SaveX_Input_InvoiceDtlTblInvalid
                        , null
                        , alParamsCoupleError.ToArray()
                        );
                }
                ////
                TUtils.CUtils.StdDataInTable(
                    dtInput_Invoice_InvoiceDtl // dtData
                    , "StdParam", "InvoiceCode" // arrstrCouple
                    , "StdParam", "Idx" // arrstrCouple
                    , "StdParam", "NetworkID" // arrstrCouple
                    , "StdParam", "SpecCode" // arrstrCouple
                    , "", "SpecName" // arrstrCouple
                    , "StdParam", "ProductID" // arrstrCouple
                    , "", "ProductName" // arrstrCouple
                    , "StdParam", "VATRateCode" // arrstrCouple
                    , "float", "VATRate" // arrstrCouple
                    , "StdParam", "UnitCode" // arrstrCouple
                    , "", "UnitName" // arrstrCouple
                    , "float", "UnitPrice" // arrstrCouple
                    , "float", "Qty" // arrstrCouple
                    , "float", "ValInvoice" // arrstrCouple
                    , "float", "ValTax" // arrstrCouple
                    , "StdParam", "InventoryCode" // arrstrCouple
                    , "float", "DiscountRate" // arrstrCouple
                    , "float", "ValDiscount" // arrstrCouple
                    , "", "Remark" // arrstrCouple
                    , "", "InvoiceDCF1" // arrstrCouple
                    , "", "InvoiceDCF2" // arrstrCouple
                    , "", "InvoiceDCF3" // arrstrCouple
                    , "", "InvoiceDCF4" // arrstrCouple
                    , "", "InvoiceDCF5" // arrstrCouple
                    );
                ////
                //TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_InvoiceDtl, "InvoiceCode", typeof(object));
                //TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_InvoiceDtl, "NetworkID", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_InvoiceDtl, "InvoiceDtlStatus", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_InvoiceDtl, "LogLUDTimeUTC", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_InvoiceDtl, "LogLUBy", typeof(object));
                ////////
            }
            #endregion

            #region //// SaveTemp Invoice_InvoiceDtl For Check:
            if (!bIsDelete)
            {
                // Upload:
                TUtils.CUtils.MyBuildDBDT_Common(
                    _cf.db // db
                    , "#input_Invoice_InvoiceDtl" // strTableName
                    , new object[] {
                            "InvoiceCode", TConst.BizMix.Default_DBColType
                            , "Idx", TConst.BizMix.Default_DBColType
                            , "NetworkID", TConst.BizMix.Default_DBColType
                            , "SpecCode", TConst.BizMix.Default_DBColType
                            , "SpecName", TConst.BizMix.Default_DBColType
                            , "ProductID", TConst.BizMix.Default_DBColType
                            , "ProductName", TConst.BizMix.Default_DBColType
                            , "VATRateCode", TConst.BizMix.Default_DBColType
                            , "VATRate", "float"
                            , "UnitCode", TConst.BizMix.Default_DBColType
                            , "UnitName", TConst.BizMix.Default_DBColType
                            , "UnitPrice", "float"
                            , "Qty", "float"
                            , "ValInvoice", "float"
                            , "ValTax", "float"
                            , "InventoryCode", TConst.BizMix.Default_DBColType
                            , "DiscountRate", "float"
                            , "ValDiscount", "float"
                            , "InvoiceDtlStatus", TConst.BizMix.Default_DBColType
                            , "Remark", TConst.BizMix.Default_DBColType
                            , "InvoiceDCF1", TConst.BizMix.Default_DBColType
                            , "InvoiceDCF2", TConst.BizMix.Default_DBColType
                            , "InvoiceDCF3", TConst.BizMix.Default_DBColType
                            , "InvoiceDCF4", TConst.BizMix.Default_DBColType
                            , "InvoiceDCF5", TConst.BizMix.Default_DBColType
                            , "LogLUDTimeUTC", TConst.BizMix.Default_DBColType
                            , "LogLUBy", TConst.BizMix.Default_DBColType
                        } // arrSingleStructure
                    , dtInput_Invoice_InvoiceDtl // dtData
                );
            }
            #endregion

            #region // Refine and Check Input Invoice_InvoiceDtl:
            if (!bIsDelete)
            {
                #region ----// Check ProductID + SpecCode là duy nhất:
                {
                    string strSql_CheckProducID = CmUtils.StringUtils.Replace(@"                            
                            ---- #tbl_Invoice_InvoiceDtl_TotalProductID:
                            select 
	                            t.InvoiceCode
	                            , t.SpecCode
	                            , t.ProductID
	                            , count(0) QtyProductID
                            into #tbl_Invoice_InvoiceDtl_TotalProductID
                            from #input_Invoice_InvoiceDtl t --//[mylock]
                            where(1=1)
	                            and t.ProductID is not null
                            group by 
	                            t.InvoiceCode
	                            , t.SpecCode
	                            , t.ProductID
                            ;

                            ---- Return:
                            select top 1
	                            t.InvoiceCode
	                            , t.ProductID
	                            , t.SpecCode
	                            , t.QtyProductID
                            from #tbl_Invoice_InvoiceDtl_TotalProductID t --//[mylock]
                            where(1=1)
	                            and t.QtyProductID > 1
                            ;

                            -- Clear For Debug:
                            drop table #tbl_Invoice_InvoiceDtl_TotalProductID;

						");
                    DataTable dt_CheckProductID = _cf.db.ExecQuery(
                        strSql_CheckProducID
                        ).Tables[0];
                    /////
                    if (dt_CheckProductID.Rows.Count > 0)
                    {
                        alParamsCoupleError.AddRange(new object[]{
                            "Check.ErrConditionalRaise", "t.QtyProductID > 1"
                            //, "Check.NumberRows", dt_CheckProductID.Rows.Count
                            , "Check.InvoiceCode", dt_CheckProductID.Rows[0]["InvoiceCode"]
                            , "Check.SpecCode", dt_CheckProductID.Rows[0]["SpecCode"]
                            , "Check.ProductID", dt_CheckProductID.Rows[0]["ProductID"]
                            , "Check.QtyProductID", dt_CheckProductID.Rows[0]["QtyProductID"]
                            });
                        throw CmUtils.CMyException.Raise(
                            TError.ErridnInventory.Invoice_Invoice_SaveX_Input_InvoiceDtl_ProductIDDuplicate
                            , null
                            , alParamsCoupleError.ToArray()
                            );
                    }
                    ////
                }
                #endregion

                #region ----// Check SpecCode là duy nhất:
                //          {
                //              string strSql_CheckSpec = CmUtils.StringUtils.Replace(@"                         
                //                      ---- #tbl_Invoice_InvoiceDtl_TotalSpec:
                //                      select 
                //                       t.InvoiceCode
                //                       , t.SpecCode
                //                       , count(0) QtySpecCode
                //                      into #tbl_Invoice_InvoiceDtl_TotalSpec
                //                      from #input_Invoice_InvoiceDtl t --//[mylock]
                //                      where(1=1)
                //                       and t.ProductID is null
                //		and t.SpecCode is not null
                //                      group by 
                //                       t.InvoiceCode
                //                       , t.SpecCode
                //                      ;

                //                      ---- Return:
                //                      select top 1
                //                       t.InvoiceCode
                //                       , t.SpecCode
                //                       , t.QtySpecCode
                //                      from #tbl_Invoice_InvoiceDtl_TotalSpec t --//[mylock]
                //                      where(1=1)
                //                       and t.QtySpecCode > 1
                //                      ;

                //                      -- Clear For Debug:
                //                      drop table #tbl_Invoice_InvoiceDtl_TotalSpec;

                //");
                //              DataTable dt_CheckSpecCode = _cf.db.ExecQuery(
                //                  strSql_CheckSpec
                //                  ).Tables[0];
                //              /////
                //              if (dt_CheckSpecCode.Rows.Count > 0)
                //              {
                //                  alParamsCoupleError.AddRange(new object[]{
                //                      "Check.ErrConditionalRaise", "t.QtyProductID > 1"
                //                      //, "Check.NumberRows", dt_CheckProductID.Rows.Count
                //                      , "Check.InvoiceCode", dt_CheckSpecCode.Rows[0]["InvoiceCode"]
                //                      , "Check.SpecCode", dt_CheckSpecCode.Rows[0]["SpecCode"]
                //                      , "Check.QtySpecCode", dt_CheckSpecCode.Rows[0]["QtySpecCode"]
                //                      });
                //                  throw CmUtils.CMyException.Raise(
                //                      TError.ErridnInventory.Invoice_Invoice_SaveX_Input_InvoiceDtl_SpecCodeDuplicate
                //                      , null
                //                      , alParamsCoupleError.ToArray()
                //                      );
                //              }
                //              ////
                //          }
                #endregion

            }
            #endregion

            #region // Build Invoice_InvoiceDtl:
            if (!bIsDelete)
            {
                string strSql_Build = CmUtils.StringUtils.Replace(@"
                        ----- #tbl_Invoice_InvoiceDtl_Build:
                        select 
	                        t.InvoiceCode
							, Row_Number() over( partition by t.InvoiceCode order by t.Idx asc) Idx 
							--, Row_Number() over (order by t.Idx desc) Idx 
	                        --, t.Idx
	                        , t.NetworkID
	                        , t.SpecCode
	                        , t.SpecName
	                        , t.ProductID
	                        , t.ProductName
	                        , t.VATRateCode
	                        , t.VATRate
	                        , t.UnitCode
	                        , t.UnitName
	                        , t.UnitPrice
	                        , t.Qty
	                        , t.ValInvoice
	                        , t.ValTax
	                        , t.InventoryCode
	                        , t.DiscountRate
	                        , t.ValDiscount
	                        , '@strInvoiceStatus' InvoiceDtlStatus --t.InvoiceDtlStatus
	                        , t.Remark
	                        , t.InvoiceDCF1
	                        , t.InvoiceDCF2
	                        , t.InvoiceDCF3
	                        , t.InvoiceDCF4
	                        , t.InvoiceDCF5
	                        , '@strLogLUDTimeUTC' LogLUDTimeUTC --t.LogLUDTimeUTC
	                        , '@strLogLUBy' LogLUBy --t.LogLUBy
                        into #tbl_Invoice_InvoiceDtl_Build
                        from #input_Invoice_InvoiceDtl t --//[mylock]

                        select null tbl_Invoice_InvoiceDtl_Build, t.* from #tbl_Invoice_InvoiceDtl_Build t --//[mylock];
                    ;"
                    , "@strInvoiceStatus", TConst.InvoiceStatus.Pending
                    , "@strLogLUDTimeUTC", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
                    , "@strLogLUBy", strWAUserCode
                    );
                DataTable dt_Build = _cf.db.ExecQuery(
                    strSql_Build
                    ).Tables[0];
                /////
            }
            #endregion

            #region // SaveDB:
            {
                //// Clear All:
                {
                    string strSqlDelete = CmUtils.StringUtils.Replace(@"
                            ---- #tbl_Invoice_InvoiceDtl:
                            select 
                                t.InvoiceCode
                                , t.Idx
                            into #tbl_Invoice_InvoiceDtl
                            from Invoice_InvoiceDtl t --//[mylock]
	                            inner join #input_Invoice_Invoice f --//[mylock]
		                            on t.InvoiceCode = f.InvoiceCode
                            where (1=1)
                            ;

                            --- Delete:
                            ---- Invoice_InvoiceDtl:
                            delete t 
                            from Invoice_InvoiceDtl t --//[mylock]
	                            inner join #tbl_Invoice_InvoiceDtl f --//[mylock]
		                            on t.InvoiceCode = f.InvoiceCode
		                                and t.Idx = f.Idx
                            where (1=1)
                            ;

                            ---- Invoice_Invoice:
                            delete t
                            from Invoice_Invoice t --//[mylock]
	                            inner join #input_Invoice_Invoice f --//[mylock]
		                            on t.InvoiceCode = f.InvoiceCode
                            where (1=1)
                            ;

                            --- Clear For Debug:
                            drop table #tbl_Invoice_InvoiceDtl;
						");
                    DataSet dtDB = _cf.db.ExecQuery(
                        strSqlDelete
                        );
                }

                //// Insert All:
                if (!bIsDelete)
                {
                    #region // Insert:
                    {
                        ////
                        string zzzzClauseInsert_Invoice_Invoice_zSave = CmUtils.StringUtils.Replace(@"
                                ---- Invoice_Invoice:                                
                                insert into Invoice_Invoice(
	                                InvoiceCode
	                                , MST
	                                , NetworkID
	                                , RefNo
	                                , FormNo
	                                , Sign
	                                , SourceInvoiceCode
	                                , InvoiceAdjType
	                                , PaymentMethodCode
	                                , InvoiceType2
	                                , CustomerNNTCode
	                                , CustomerNNTName
	                                , CustomerNNTAddress
	                                , CustomerNNTPhone
	                                , CustomerNNTBankName
	                                , CustomerNNTEmail
	                                , CustomerNNTAccNo
	                                , CustomerNNTBuyerName
	                                , CustomerMST
	                                , TInvoiceCode
	                                , InvoiceNo
	                                , InvoiceDateUTC
	                                , EmailSend
	                                , InvoiceFileSpec
	                                , InvoiceFilePath
	                                , InvoicePDFFilePath
	                                , TotalValInvoice
	                                , TotalValVAT
	                                , TotalValPmt
	                                , CreateDTimeUTC
	                                , CreateBy
	                                , InvoiceNoDTimeUTC
	                                , InvoiceNoBy
	                                , SignDTimeUTC
	                                , SignBy
	                                , ApprDTimeUTC
	                                , ApprBy
	                                , CancelDTimeUTC
	                                , CancelBy
	                                , SendEmailDTimeUTC
	                                , SendEmailBy
	                                , IssuedDTimeUTC
	                                , IssuedBy
	                                , AttachedDelFilePath
	                                , DeleteReason
	                                , DeleteDTimeUTC
	                                , DeleteBy
	                                , ChangeDTimeUTC
	                                , ChangeBy
	                                , InvoiceVerifyCQTCode
	                                , CurrencyCode
	                                , CurrencyRate
	                                , ValGoodsNotTaxable
	                                , ValGoodsNotChargeTax
	                                , ValGoodsVAT5
	                                , ValVAT5
	                                , ValGoodsVAT10
	                                , ValVAT10
	                                , NNTFullName
	                                , NNTFullAdress
	                                , NNTPhone
	                                , NNTFax
	                                , NNTEmail
	                                , NNTWebsite
	                                , NNTAccNo
	                                , NNTBankName
	                                , LUDTimeUTC
	                                , LUBy
	                                , Remark
	                                , InvoiceCF1
	                                , InvoiceCF2
	                                , InvoiceCF3
	                                , InvoiceCF4
	                                , InvoiceCF5
	                                , InvoiceCF6
	                                , InvoiceCF7
	                                , InvoiceCF8
	                                , InvoiceCF9
	                                , InvoiceCF10
	                                , FlagChange
	                                , FlagPushOutSite
	                                , FlagDeleteOutSite
	                                , InvoiceStatus
	                                , LogLUDTimeUTC
	                                , LogLUBy
                                )
                                select 
	                                t.InvoiceCode
	                                , t.MST
	                                , t.NetworkID
	                                , t.RefNo
	                                , t.FormNo
	                                , t.Sign
	                                , t.SourceInvoiceCode
	                                , t.InvoiceAdjType
	                                , t.PaymentMethodCode
	                                , t.InvoiceType2
	                                , t.CustomerNNTCode
	                                , t.CustomerNNTName
	                                , t.CustomerNNTAddress
	                                , t.CustomerNNTPhone
	                                , t.CustomerNNTBankName
	                                , t.CustomerNNTEmail
	                                , t.CustomerNNTAccNo
	                                , t.CustomerNNTBuyerName
	                                , t.CustomerMST
	                                , t.TInvoiceCode
	                                , t.InvoiceNo
	                                , t.InvoiceDateUTC
	                                , t.EmailSend
	                                , t.InvoiceFileSpec
	                                , t.InvoiceFilePath
	                                , t.InvoicePDFFilePath
	                                , t.TotalValInvoice
	                                , t.TotalValVAT
	                                , t.TotalValPmt
	                                , t.CreateDTimeUTC
	                                , t.CreateBy
	                                , t.InvoiceNoDTimeUTC
	                                , t.InvoiceNoBy
	                                , t.SignDTimeUTC
	                                , t.SignBy
	                                , t.ApprDTimeUTC
	                                , t.ApprBy
	                                , t.CancelDTimeUTC
	                                , t.CancelBy
	                                , t.SendEmailDTimeUTC
	                                , t.SendEmailBy
	                                , t.IssuedDTimeUTC
	                                , t.IssuedBy
	                                , t.AttachedDelFilePath
	                                , t.DeleteReason
	                                , t.DeleteDTimeUTC
	                                , t.DeleteBy
	                                , t.ChangeDTimeUTC
	                                , t.ChangeBy
	                                , t.InvoiceVerifyCQTCode
	                                , t.CurrencyCode
	                                , t.CurrencyRate
	                                , t.ValGoodsNotTaxable
	                                , t.ValGoodsNotChargeTax
	                                , t.ValGoodsVAT5
	                                , t.ValVAT5
	                                , t.ValGoodsVAT10
	                                , t.ValVAT10
	                                , t.NNTFullName
	                                , t.NNTFullAdress
	                                , t.NNTPhone
	                                , t.NNTFax
	                                , t.NNTEmail
	                                , t.NNTWebsite
	                                , t.NNTAccNo
	                                , t.NNTBankName
	                                , t.LUDTimeUTC
	                                , t.LUBy
	                                , t.Remark
	                                , t.InvoiceCF1
	                                , t.InvoiceCF2
	                                , t.InvoiceCF3
	                                , t.InvoiceCF4
	                                , t.InvoiceCF5
	                                , t.InvoiceCF6
	                                , t.InvoiceCF7
	                                , t.InvoiceCF8
	                                , t.InvoiceCF9
	                                , t.InvoiceCF10
	                                , t.FlagChange
	                                , t.FlagPushOutSite
	                                , t.FlagDeleteOutSite
	                                , t.InvoiceStatus
	                                , t.LogLUDTimeUTC
	                                , t.LogLUBy
                                from #tbl_Invoice_Invoice_Build t --//[mylock]
                            ");
                        /////
                        string zzzzClauseInsert_Invoice_InvoiceDtl_zSave = CmUtils.StringUtils.Replace(@"
                                ---- Invoice_InvoiceDtl:  
                                insert into Invoice_InvoiceDtl(
	                                InvoiceCode
	                                , Idx
	                                , NetworkID
	                                , SpecCode
	                                , SpecName
	                                , ProductID
	                                , ProductName
	                                , VATRateCode
	                                , VATRate
	                                , UnitCode
	                                , UnitName
	                                , UnitPrice
	                                , Qty
	                                , ValInvoice
	                                , ValTax
	                                , InventoryCode
	                                , DiscountRate
	                                , ValDiscount
	                                , InvoiceDtlStatus
	                                , Remark
	                                , InvoiceDCF1
	                                , InvoiceDCF2
	                                , InvoiceDCF3
	                                , InvoiceDCF4
	                                , InvoiceDCF5
	                                , LogLUDTimeUTC
	                                , LogLUBy
                                )
                                select 
	                                t.InvoiceCode
	                                , t.Idx
	                                , t.NetworkID
	                                , t.SpecCode
	                                , t.SpecName
	                                , t.ProductID
	                                , t.ProductName
	                                , t.VATRateCode
	                                , t.VATRate
	                                , t.UnitCode
	                                , t.UnitName
	                                , t.UnitPrice
	                                , t.Qty
	                                , t.ValInvoice
	                                , t.ValTax
	                                , t.InventoryCode
	                                , t.DiscountRate
	                                , t.ValDiscount
	                                , t.InvoiceDtlStatus
	                                , t.Remark
	                                , t.InvoiceDCF1
	                                , t.InvoiceDCF2
	                                , t.InvoiceDCF3
	                                , t.InvoiceDCF4
	                                , t.InvoiceDCF5
	                                , t.LogLUDTimeUTC
	                                , t.LogLUBy
                                from #tbl_Invoice_InvoiceDtl_Build t
                            ");

                        /////
                        string strSqlExec = CmUtils.StringUtils.Replace(@"
								----
								zzzzClauseInsert_Invoice_Invoice_zSave			
								----
								zzzzClauseInsert_Invoice_InvoiceDtl_zSave			
								----
							"
                            , "zzzzClauseInsert_Invoice_Invoice_zSave", zzzzClauseInsert_Invoice_Invoice_zSave
                            , "zzzzClauseInsert_Invoice_InvoiceDtl_zSave", zzzzClauseInsert_Invoice_InvoiceDtl_zSave
                            );
                        ////
                        DataSet dsExec = _cf.db.ExecQuery(strSqlExec);
                        ////
                    }
                    #endregion
                }
            }
            #endregion

            #region // Check One RefNo:
            if (!bIsDelete)
            {
                myCheck_Invoice_Invoice_RefNo_New20190705(
                    ref alParamsCoupleError // alParamsCoupleError
                    , dtimeSys // dtimeSys
                    , "#tbl_Invoice_Invoice_Build"  //zzzz_tbl_Invoice_Invoice_RefNo
                    );
            }
            #endregion

            #region // myCheck_Invoice_Invoice_Total:
            if (!bIsDelete)
            {
                /*
                    Ngày 2019-11-01
                    Nâng Cấp: -  Nếu FlagIsCheckInvoiceTotal = 1 hoặc null thì hệ thống sẽ Insert Vào DB mà không tính toán
                              -  Ngược lại nếu FlagIsCheckInvoiceTotal = 0 thì hệ thống sẽ tính toán rồi Insert vào DB
                        FlagIsCheckInvoiceTotal = 0 => Không Check
                        FlagIsCheckInvoiceTotal = 1 => Check
                        FlagIsCheckInvoiceTotal = null => Check
                */
                if (bIsCheckInvoiceTotal)
                {
                    myCheck_Invoice_Invoice_Total_New20190905(
                        ref alParamsCoupleError // alParamsCoupleError
                        , dtimeSys // dtimeSys
                        , "#tbl_Invoice_Invoice_Build"  //zzzz_tbl_Invoice_Invoice_RefNo
                        );
                    ////
                    myCheck_Invoice_InvoiceDtl_Total_New20190905(
                        ref alParamsCoupleError // alParamsCoupleError
                        , dtimeSys // dtimeSys
                        , "#tbl_Invoice_Invoice_Build"  //zzzz_tbl_Invoice_Invoice_RefNo
                        );
                }
                
            }
            #endregion

            #region // myCheck_OS_Invoice_Invoice_CheckMasterPrd:


            if (!bIsDelete)
            {
                /*Ngày 2019-08-02:
                * A @HuongNV chốt: Client truyền thêm 1 cờ xác nhận (FlagConfirm) check hàng hóa:
                    + Cờ FlagConfirm chỉ truyền vào không lưu trong DB.
                    + Nếu FlagConfirm = 1 => Không thay đổi luật check hiện tại tính đến trước ngày 2019-08-02.
                    + Nếu FlagConfirm = 0 => Bỏ luật check các FK hàng hóa trừ SpecCode.
                */
                ////
                string strFlagConfirm = dtInput_Invoice_Invoice.Rows[0]["FlagConfirm"].ToString();

                if (CmUtils.StringUtils.StringEqual(strFlagConfirm, TConst.Flag.Active))
                {
                    myCheck_OS_Invoice_Invoice_CheckMasterPrd(
                    ref alParamsCoupleError  //alParamsCoupleError
                    , dtimeSys  //dtimeSys
                    , strTid  //strTid
                    , "#tbl_Invoice_Invoice_Build"  //zzzz_tbl_Invoice_Invoice_RefNo
                    );
                }
                else
                {
                    myCheck_OS_Invoice_Invoice_CheckMasterPrd_NotConfirm(
                    ref alParamsCoupleError  //alParamsCoupleError
                    , dtimeSys  //dtimeSys
                    , strTid  //strTid
                    , "#tbl_Invoice_Invoice_Build"  //zzzz_tbl_Invoice_Invoice_RefNo
                    );
                }
            }
            #endregion

            #region //// Clear For Debug:
            if (!bIsDelete)
            {
                ////
                string strSqlClearForDebug = CmUtils.StringUtils.Replace(@"
						---- Clear for Debug:
						drop table #input_Invoice_Invoice;
						drop table #input_Invoice_InvoiceDtl;
					");

                _cf.db.ExecQuery(
                    strSqlClearForDebug
                    );
                ////
            }
            else
            {
                ////
                string strSqlClearForDebug = CmUtils.StringUtils.Replace(@"
						---- Clear for Debug:
						drop table #input_Invoice_Invoice;
					");

                _cf.db.ExecQuery(
                    strSqlClearForDebug
                    );
                ////

            }
            #endregion

            // Return Good:
            MyCodeLabel_Done:
            return;
            //TDALUtils.DBUtils.CommitSafety(_cf.db);
            //mdsFinal.AcceptChanges();
            //return mdsFinal;		
        }

        private void Invoice_Invoice_SaveX_New20191112(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            , DateTime dtimeSys
            ////
            , object objFlagIsDelete
            , object objFlagIsCheckInvoiceTotal
            ////
            , DataSet dsData
            )
        {
            #region // Temp:
            //int nTidSeq = 0;
            //bool bMyDebugSql = false;
            string strFunctionName = "Invoice_Invoice_SaveAllX";
            //string strErrorCodeDefault = TError.ErridnInventory.Invoice_Invoice_SaveAllX;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
                ////
                , "objFlagIsDelete",objFlagIsDelete
                , "objFlagIsCheckInvoiceTotal", objFlagIsCheckInvoiceTotal
				////
                });
            //ArrayList alPCErrEx = new ArrayList();
            ////
            Hashtable htParamsSql = new Hashtable();
            #endregion

            #region // Convert Input:
            //DataSet dsData = TUtils.CUtils.StdDS(arrobjDSData);
            //if (dsData == null) dsData = new DataSet("dsData");
            //dsData.AcceptChanges();
            alParamsCoupleError.AddRange(new object[]{
                "Check.dsData", CmUtils.XmlUtils.DataSet2XmlSimple(dsData)
                });
            #endregion

            #region // Refine and Check Input:
            ////
            DataRow drAbilityOfUser = Sys_User_GetAbilityViewOfUser(strWAUserCode);
            ////
            bool bIsDelete = CmUtils.StringUtils.StringEqual(objFlagIsDelete, TConst.Flag.Yes);
            if (objFlagIsCheckInvoiceTotal == null)
            {
                objFlagIsCheckInvoiceTotal = 1;
            }
            bool bIsCheckInvoiceTotal = CmUtils.StringUtils.StringEqual(objFlagIsCheckInvoiceTotal, TConst.Flag.Yes);
            ////
            string strMST = TUtils.CUtils.StdParam(drAbilityOfUser["MNNTMST"]);
            #endregion

            #region // Refine and Check Input Invoice_Invoice:
            ////
            DataTable dtInput_Invoice_Invoice = null;
            {
                ////
                string strTableCheck = "Invoice_Invoice";
                ////
                if (!dsData.Tables.Contains(strTableCheck))
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.TableName", strTableCheck
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Invoice_Invoice_SaveX_Input_InvoiceTblNotFound
                        , null
                        , alParamsCoupleError.ToArray()
                        );
                }
                dtInput_Invoice_Invoice = dsData.Tables[strTableCheck];
                ////
                if (dtInput_Invoice_Invoice.Rows.Count < 1)
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.TableName", strTableCheck
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Invoice_Invoice_SaveX_Input_InvoiceTblInvalid
                        , null
                        , alParamsCoupleError.ToArray()
                        );
                }
                ////
                TUtils.CUtils.StdDataInTable(
                    dtInput_Invoice_Invoice // dtData
                    , "StdParam", "InvoiceCode" // arrstrCouple
                    , "StdParam", "MST" // arrstrCouple
                    , "StdParam", "NetworkID" // arrstrCouple
                    , "StdParam", "RefNo" // arrstrCouple
                    , "StdParam", "FormNo" // arrstrCouple
                    , "StdParam", "Sign" // arrstrCouple
                    , "StdParam", "SourceInvoiceCode" // arrstrCouple
                    , "StdParam", "InvoiceAdjType" // arrstrCouple
                    , "StdParam", "PaymentMethodCode" // arrstrCouple
                    , "StdParam", "InvoiceType2" // arrstrCouple
                    , "StdParam", "CustomerNNTCode" // arrstrCouple
                    , "", "CustomerNNTName" // arrstrCouple
                    , "", "CustomerNNTAddress" // arrstrCouple
                    , "", "CustomerNNTPhone" // arrstrCouple
                    , "", "CustomerNNTBankName" // arrstrCouple
                    , "", "CustomerNNTEmail" // arrstrCouple
                    , "", "CustomerNNTAccNo" // arrstrCouple
                    , "", "CustomerNNTBuyerName" // arrstrCouple
                    , "StdParam", "CustomerMST" // arrstrCouple
                    , "StdParam", "TInvoiceCode" // arrstrCouple
                    , "StdParam", "InvoiceNo" // arrstrCouple
                    , "", "InvoiceDateUTC" // arrstrCouple
                                           //, "StdParam", "EmailSend" // arrstrCouple
                    , "", "InvoiceFileSpec" // arrstrCouple
                    , "", "InvoiceFilePath" // arrstrCouple
                    , "", "InvoicePDFFilePath" // arrstrCouple
                    , "float", "TotalValInvoice" // arrstrCouple
                    , "float", "TotalValVAT" // arrstrCouple
                    , "float", "TotalValPmt" // arrstrCouple
                    , "", "AttachedDelFilePath" // arrstrCouple
                    , "", "DeleteReason" // arrstrCouple
                    , "StdParam", "InvoiceVerifyCQTCode" // arrstrCouple
                    , "StdParam", "CurrencyCode" // arrstrCouple
                    , "float", "CurrencyRate" // arrstrCouple
                    , "float", "ValGoodsNotTaxable" // arrstrCouple
                    , "float", "ValGoodsNotChargeTax" // arrstrCouple
                    , "float", "ValGoodsVAT5" // arrstrCouple
                    , "float", "ValVAT5" // arrstrCouple
                    , "float", "ValGoodsVAT10" // arrstrCouple
                    , "float", "ValVAT10" // arrstrCouple
                    , "", "NNTFullName" // arrstrCouple
                    , "", "NNTFullAdress" // arrstrCouple
                    , "", "NNTPhone" // arrstrCouple
                    , "", "NNTFax" // arrstrCouple
                    , "", "NNTEmail" // arrstrCouple
                    , "", "NNTWebsite" // arrstrCouple
                    , "", "NNTAccNo" // arrstrCouple
                    , "", "NNTBankName" // arrstrCouple
                    , "", "Remark" // arrstrCouple
                    , "", "InvoiceCF1" // arrstrCouple
                    , "", "InvoiceCF2" // arrstrCouple
                    , "", "InvoiceCF3" // arrstrCouple
                    , "", "InvoiceCF4" // arrstrCouple
                    , "", "InvoiceCF5" // arrstrCouple
                    , "", "InvoiceCF6" // arrstrCouple
                    , "", "InvoiceCF7" // arrstrCouple
                    , "", "InvoiceCF8" // arrstrCouple
                    , "", "InvoiceCF9" // arrstrCouple
                    , "", "InvoiceCF10" // arrstrCouple
                    , "", "FlagConfirm" // arrstrCouple
                    );
                ////
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_Invoice, "EmailSend", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_Invoice, "CreateDTimeUTC", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_Invoice, "CreateBy", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_Invoice, "InvoiceNoDTimeUTC", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_Invoice, "InvoiceNoBy", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_Invoice, "SignDTimeUTC", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_Invoice, "SignBy", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_Invoice, "ApprDTimeUTC", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_Invoice, "ApprBy", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_Invoice, "CancelDTimeUTC", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_Invoice, "CancelBy", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_Invoice, "SendEmailDTimeUTC", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_Invoice, "SendEmailBy", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_Invoice, "IssuedDTimeUTC", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_Invoice, "IssuedBy", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_Invoice, "DeleteDTimeUTC", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_Invoice, "DeleteBy", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_Invoice, "ChangeDTimeUTC", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_Invoice, "ChangeBy", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_Invoice, "LUDTimeUTC", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_Invoice, "LUBy", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_Invoice, "FlagChange", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_Invoice, "FlagPushOutSite", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_Invoice, "InvoiceStatus", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_Invoice, "LogLUDTimeUTC", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_Invoice, "LogLUBy", typeof(object));
            }
            #endregion

            #region //// SaveTemp Invoice_Invoice For Check:
            //if (!bIsDelete)
            {
                // Upload:
                TUtils.CUtils.MyBuildDBDT_Common(
                    _cf.db // db
                    , "#input_Invoice_Invoice" // strTableName
                    , new object[] {
                            "InvoiceCode", TConst.BizMix.Default_DBColType
                            , "MST", TConst.BizMix.Default_DBColType
                            , "NetworkID", TConst.BizMix.Default_DBColType
                            , "RefNo", TConst.BizMix.Default_DBColType
                            , "FormNo", TConst.BizMix.Default_DBColType
                            , "Sign", TConst.BizMix.Default_DBColType
                            , "SourceInvoiceCode", TConst.BizMix.Default_DBColType
                            , "InvoiceAdjType", TConst.BizMix.Default_DBColType
                            , "PaymentMethodCode", TConst.BizMix.Default_DBColType
                            , "InvoiceType2", TConst.BizMix.Default_DBColType
                            , "CustomerNNTCode", TConst.BizMix.Default_DBColType
                            , "CustomerNNTName", TConst.BizMix.Default_DBColType
                            , "CustomerNNTAddress", TConst.BizMix.Default_DBColType
                            , "CustomerNNTPhone", TConst.BizMix.Default_DBColType
                            , "CustomerNNTBankName", TConst.BizMix.Default_DBColType
                            , "CustomerNNTEmail", TConst.BizMix.Default_DBColType
                            , "CustomerNNTAccNo", TConst.BizMix.Default_DBColType
                            , "CustomerNNTBuyerName", TConst.BizMix.Default_DBColType
                            , "CustomerMST", TConst.BizMix.Default_DBColType
                            , "TInvoiceCode", TConst.BizMix.Default_DBColType
                            , "InvoiceNo", TConst.BizMix.Default_DBColType
                            , "InvoiceDateUTC", TConst.BizMix.Default_DBColType
                            , "EmailSend", TConst.BizMix.Default_DBColType
                            , "InvoiceFileSpec", TConst.BizMix.Default_DBColType
                            , "InvoiceFilePath", TConst.BizMix.Default_DBColType
                            , "InvoicePDFFilePath", TConst.BizMix.Default_DBColType
                            , "TotalValInvoice", "float"
                            , "TotalValVAT", "float"
                            , "TotalValPmt", "float"
                            , "CreateDTimeUTC", TConst.BizMix.Default_DBColType
                            , "CreateBy", TConst.BizMix.Default_DBColType
                            , "InvoiceNoDTimeUTC", TConst.BizMix.Default_DBColType
                            , "InvoiceNoBy", TConst.BizMix.Default_DBColType
                            , "SignDTimeUTC", TConst.BizMix.Default_DBColType
                            , "SignBy", TConst.BizMix.Default_DBColType
                            , "ApprDTimeUTC", TConst.BizMix.Default_DBColType
                            , "ApprBy", TConst.BizMix.Default_DBColType
                            , "CancelDTimeUTC", TConst.BizMix.Default_DBColType
                            , "CancelBy", TConst.BizMix.Default_DBColType
                            , "SendEmailDTimeUTC", TConst.BizMix.Default_DBColType
                            , "SendEmailBy", TConst.BizMix.Default_DBColType
                            , "IssuedDTimeUTC", TConst.BizMix.Default_DBColType
                            , "IssuedBy", TConst.BizMix.Default_DBColType
                            , "AttachedDelFilePath", TConst.BizMix.Default_DBColType
                            , "DeleteReason", TConst.BizMix.Default_DBColType
                            , "DeleteDTimeUTC", TConst.BizMix.Default_DBColType
                            , "DeleteBy", TConst.BizMix.Default_DBColType
                            , "ChangeDTimeUTC", TConst.BizMix.Default_DBColType
                            , "ChangeBy", TConst.BizMix.Default_DBColType
                            , "InvoiceVerifyCQTCode", TConst.BizMix.Default_DBColType
                            , "CurrencyCode", TConst.BizMix.Default_DBColType
                            , "CurrencyRate", TConst.BizMix.Default_DBColType
                            , "ValGoodsNotTaxable", "float"
                            , "ValGoodsNotChargeTax", "float"
                            , "ValGoodsVAT5", "float"
                            , "ValVAT5", "float"
                            , "ValGoodsVAT10", "float"
                            , "ValVAT10", "float"
                            , "NNTFullName", TConst.BizMix.Default_DBColType
                            , "NNTFullAdress", TConst.BizMix.Default_DBColType
                            , "NNTPhone", TConst.BizMix.Default_DBColType
                            , "NNTFax", TConst.BizMix.Default_DBColType
                            , "NNTEmail", TConst.BizMix.Default_DBColType
                            , "NNTWebsite", TConst.BizMix.Default_DBColType
                            , "NNTAccNo", TConst.BizMix.Default_DBColType
                            , "NNTBankName", TConst.BizMix.Default_DBColType
                            , "LUDTimeUTC", TConst.BizMix.Default_DBColType
                            , "LUBy", TConst.BizMix.Default_DBColType
                            , "Remark", TConst.BizMix.Default_DBColType
                            , "InvoiceCF1", TConst.BizMix.Default_DBColType
                            , "InvoiceCF2", TConst.BizMix.Default_DBColType
                            , "InvoiceCF3", TConst.BizMix.Default_DBColType
                            , "InvoiceCF4", TConst.BizMix.Default_DBColType
                            , "InvoiceCF5", TConst.BizMix.Default_DBColType
                            , "InvoiceCF6", TConst.BizMix.Default_DBColType
                            , "InvoiceCF7", TConst.BizMix.Default_DBColType
                            , "InvoiceCF8", TConst.BizMix.Default_DBColType
                            , "InvoiceCF9", TConst.BizMix.Default_DBColType
                            , "InvoiceCF10", TConst.BizMix.Default_DBColType
                            , "FlagConfirm", TConst.BizMix.Default_DBColType
                            , "FlagChange", TConst.BizMix.Default_DBColType
                            , "FlagPushOutSite", TConst.BizMix.Default_DBColType
                            , "FlagDeleteOutSite", TConst.BizMix.Default_DBColType
                            , "InvoiceStatus", TConst.BizMix.Default_DBColType
                            , "LogLUDTimeUTC", TConst.BizMix.Default_DBColType
                            , "LogLUBy", TConst.BizMix.Default_DBColType
                        } // arrSingleStructure
                    , dtInput_Invoice_Invoice // dtData
                );
            }
            #endregion

            #region /// Refine and check Input Invoice_Invoice:
            {
                #region ----// Check InvalidInvoiceCode:
                {
                    string strSql_CheckInvalidInvoiceCode = CmUtils.StringUtils.Replace(@"
                            --- Check:
                            select distinct 
                                t.InvoiceCode
                            from #input_Invoice_Invoice t --//[mylock]
                            where(1=1)
                                and (t.InvoiceCode is null or LTRIM(RTRIM(t.InvoiceCode)) = '')
                            ;
						");
                    DataTable dt_CheckInvalidInvoiceCode = _cf.db.ExecQuery(
                        strSql_CheckInvalidInvoiceCode
                        ).Tables[0];
                    /////
                    if (dt_CheckInvalidInvoiceCode.Rows.Count > 0)
                    {
                        alParamsCoupleError.AddRange(new object[]{
                            "Check.ErrConditionalRaise", "(t.InvoiceCode is null or LTRIM(RTRIM(t.InvoiceCode)) = '')"
                            , "Check.NumberRows", dt_CheckInvalidInvoiceCode.Rows.Count
                            });
                        throw CmUtils.CMyException.Raise(
                            TError.ErridnInventory.Invoice_Invoice_SaveX_InvalidInvoiceCode
                            , null
                            , alParamsCoupleError.ToArray()
                            );
                    }
                    ////
                }
                #endregion

                #region ----// Check InvalidInvoiceStatus:
                {
                    string strSql_CheckInvalidInvoiceCode = CmUtils.StringUtils.Replace(@"
                            --- #tbl_Invoice_Invoice_ForSTUFF:
                            select distinct 
                                t.InvoiceCode
                            into #tbl_Invoice_Invoice_ForSTUFF
                            from #input_Invoice_Invoice t --//[mylock]
                                inner join Invoice_Invoice f --//[mylock]
                                    on t.InvoiceCode = f.InvoiceCode
                            where(1=1)
                                and f.InvoiceStatus not in ('PENDING') 
                            ;

                            --- Return:					
                            select 
                                STUFF(( 
		                            SELECT ',' + f.InvoiceCode
		                            FROM #tbl_Invoice_Invoice_ForSTUFF f --//[mylock]
		                            WHERE(1=1)
		                            FOR
		                            XML PATH('')
		                            ), 1, 1, ''
                                ) AS ListInvoiceCode
                            where(1=1)
                            ;

                            --- Clear For Debug:
                            drop table #tbl_Invoice_Invoice_ForSTUFF;
						");
                    DataTable dt_CheckInvalidInvoiceCode = _cf.db.ExecQuery(
                        strSql_CheckInvalidInvoiceCode
                        ).Tables[0];
                    /////
                    if (dt_CheckInvalidInvoiceCode.Rows.Count > 0)
                    {
                        string strListInvoiceCode = TUtils.CUtils.StdParam(dt_CheckInvalidInvoiceCode.Rows[0]["ListInvoiceCode"]);
                        /////
                        if (!string.IsNullOrEmpty(strListInvoiceCode))
                        {
                            if (bIsDelete)
                            {
                                goto MyCodeLabel_Done; // Thành công
                            }
                            else // if (!string.IsNullOrEmpty(strListInvoiceCode))
                            {
                                alParamsCoupleError.AddRange(new object[]{
                                    "Check.ErrConditionalRaise", "f.InvoiceStatus not in ('PENDING')"
                                    , "Check.strListInvoiceCode", strListInvoiceCode
                                    });
                                throw CmUtils.CMyException.Raise(
                                    TError.ErridnInventory.Invoice_Invoice_SaveX_StatusNotMatched
                                    , null
                                    , alParamsCoupleError.ToArray()
                                    );

                            }
                        }
                        /////
                    }
                    ////
                }
                #endregion

                #region ----// Đã cấp số hóa đơn thì không được Xóa:
                if (bIsDelete)
                {
                    string strSql_CheckInvalidInvoiceCode = CmUtils.StringUtils.Replace(@"
                            --- #tbl_Invoice_Invoice_ForSTUFF:
                            select distinct 
                                t.InvoiceCode
                            into #tbl_Invoice_Invoice_ForSTUFF
                            from #input_Invoice_Invoice t --//[mylock]
                                inner join Invoice_Invoice f --//[mylock]
                                    on t.InvoiceCode = f.InvoiceCode
                            where(1=1)
                                and f.InvoiceNo is not null 
                            ;

                            --- Return:					
                            select 
                                STUFF(( 
		                            SELECT ',' + f.InvoiceCode
		                            FROM #tbl_Invoice_Invoice_ForSTUFF f --//[mylock]
		                            WHERE(1=1)
		                            FOR
		                            XML PATH('')
		                            ), 1, 1, ''
                                ) AS ListInvoiceCode
                            where(1=1)
                            ;

                            --- Clear For Debug:
                            drop table #tbl_Invoice_Invoice_ForSTUFF;
						");
                    DataTable dt_CheckInvalidInvoiceCode = _cf.db.ExecQuery(
                        strSql_CheckInvalidInvoiceCode
                        ).Tables[0];
                    /////
                    if (dt_CheckInvalidInvoiceCode.Rows.Count > 0)
                    {
                        /////
                        string strListInvoiceCode = TUtils.CUtils.StdParam(dt_CheckInvalidInvoiceCode.Rows[0]["ListInvoiceCode"]);
                        ////
                        if (!string.IsNullOrEmpty(strListInvoiceCode))
                        {
                            alParamsCoupleError.AddRange(new object[]{
                                "Check.ErrConditionalRaise", "f.InvoiceNo is not null "
                                , "Check.strListInvoiceCode", strListInvoiceCode
                                });
                            throw CmUtils.CMyException.Raise(
                                TError.ErridnInventory.Invoice_Invoice_SaveX_ExistInvoiceNo
                                , null
                                , alParamsCoupleError.ToArray()
                                );

                        }
                    }
                    ////
                }
                #endregion

                #region ----// Nếu là hóa đơn điều chỉnh thì RefNo không được Null:
                if (!bIsDelete)
                {
                    string strSql_CheckInvalidInvoiceCode = CmUtils.StringUtils.Replace(@"
                            --- #tbl_Invoice_Invoice_ForSTUFF:
                            select distinct 
                                t.InvoiceCode
                            into #tbl_Invoice_Invoice_ForSTUFF
                            from #input_Invoice_Invoice t --//[mylock]
                            where(1=1)
                                and t.RefNo is null
                                and t.InvoiceAdjType in ('@strADJINCREASE', '@strADJDESCREASE')
                            ;

                            --- Return:					
                            select 
                                STUFF(( 
		                            SELECT ',' + f.InvoiceCode
		                            FROM #tbl_Invoice_Invoice_ForSTUFF f --//[mylock]
		                            WHERE(1=1)
		                            FOR
		                            XML PATH('')
		                            ), 1, 1, ''
                                ) AS ListInvoiceCode
                            where(1=1)
                            ;

                            --- Clear For Debug:
                            drop table #tbl_Invoice_Invoice_ForSTUFF;
						"
                        , "@strADJINCREASE", TConst.InvoiceAdjType.AdjInCrease
                        , "@strADJINCREASE", TConst.InvoiceAdjType.AdjDescrease
                        );
                    DataTable dt_CheckInvalidInvoiceCode = _cf.db.ExecQuery(
                        strSql_CheckInvalidInvoiceCode
                        ).Tables[0];
                    /////
                    if (dt_CheckInvalidInvoiceCode.Rows.Count > 0)
                    {
                        string strListInvoiceCode = TUtils.CUtils.StdParam(dt_CheckInvalidInvoiceCode.Rows[0]["ListInvoiceCode"]);
                        /////
                        if (!string.IsNullOrEmpty(strListInvoiceCode))
                        {
                            alParamsCoupleError.AddRange(new object[]{
                                "Check.ErrConditionalRaise", "and t.InvoiceAdjType in ('@strADJINCREASE', '@strADJDESCREASE') and t.RefNo is null"
                                , "Check.strListInvoiceCode", strListInvoiceCode
                                });
                            throw CmUtils.CMyException.Raise(
                                TError.ErridnInventory.Invoice_Invoice_SaveX_InvoiceAdjTypeIsNotNull
                                , null
                                , alParamsCoupleError.ToArray()
                                );
                        }
                        /////
                    }
                    ////
                }
                #endregion

                #region ----// Nếu là hóa đơn thay thế:
                {
                    #region ----// Nếu là hóa đơn thay thế thì RefNo không được Null:
                    {
                        string strSql_CheckInvalidInvoiceCode = CmUtils.StringUtils.Replace(@"
                                --- #tbl_Invoice_Invoice_ForSTUFF:
                                select distinct 
                                    t.RefNo
                                into #tbl_Invoice_Invoice_ForSTUFF
                                from #input_Invoice_Invoice t --//[mylock]
                                where(1=1)
                                    and t.SourceInvoiceCode in ('@strInvoiceReplace') 
                                    and (t.RefNo is null or LTRIM(RTRIM(t.RefNo)) = '')
                                ;

                                --- Return:					
                                select 
                                    STUFF(( 
		                                SELECT ',' + f.RefNo
		                                FROM #tbl_Invoice_Invoice_ForSTUFF f --//[mylock]
		                                WHERE(1=1)
		                                FOR
		                                XML PATH('')
		                                ), 1, 1, ''
                                    ) AS ListRefNo
                                where(1=1)
                                ;

                                --- Clear For Debug:
                                drop table #tbl_Invoice_Invoice_ForSTUFF;
						    "
                            , "@strInvoiceReplace", TConst.SourceInvoiceCode.InvoiceReplace
                            );
                        DataTable dt_CheckInvalidInvoiceCode = _cf.db.ExecQuery(
                            strSql_CheckInvalidInvoiceCode
                            ).Tables[0];
                        /////
                        if (dt_CheckInvalidInvoiceCode.Rows.Count > 0)
                        {
                            /////
                            string strListRefNo = TUtils.CUtils.StdParam(dt_CheckInvalidInvoiceCode.Rows[0]["ListRefNo"]);
                            ////
                            if (!string.IsNullOrEmpty(strListRefNo))
                            {
                                alParamsCoupleError.AddRange(new object[]{
                                    "Check.ErrConditionalRaise", "and t.SourceInvoiceCode in ('@strInvoiceReplace') and (t.RefNo is null or LTRIM(RTRIM(t.RefNo)) = '')"
                                    , "Check.strListRefNo", strListRefNo
                                    });
                                throw CmUtils.CMyException.Raise(
                                    TError.ErridnInventory.Invoice_Invoice_SaveX_Input_Invoice_InvalidRefNo
                                    , null
                                    , alParamsCoupleError.ToArray()
                                    );

                            }
                        }
                        ////
                    }
                    #endregion

                    #region ----// RefNo ở trạng thái Deleted:
                    {
                        string strSql_CheckInvalidInvoiceCode = CmUtils.StringUtils.Replace(@"
                                --- #tbl_Invoice_Invoice_ForSTUFF:
                                select distinct 
                                    t.RefNo
                                into #tbl_Invoice_Invoice_ForSTUFF
                                from #input_Invoice_Invoice t --//[mylock]
                                    left join Invoice_Invoice f --//[mylock]
                                        on t.RefNo = f.InvoiceCode
                                where(1=1)
                                    and t.SourceInvoiceCode in ('@strInvoiceReplace') 
                                    and (f.InvoiceStatus not in ('DELETED', 'ISSUED')) 
                                ;

                                --- Return:					
                                select 
                                    STUFF(( 
		                                SELECT ',' + f.RefNo
		                                FROM #tbl_Invoice_Invoice_ForSTUFF f --//[mylock]
		                                WHERE(1=1)
		                                FOR
		                                XML PATH('')
		                                ), 1, 1, ''
                                    ) AS ListRefNo
                                where(1=1)
                                ;

                                --- Clear For Debug:
                                drop table #tbl_Invoice_Invoice_ForSTUFF;
						    "
                            , "@strInvoiceReplace", TConst.SourceInvoiceCode.InvoiceReplace
                            );
                        DataTable dt_CheckInvalidInvoiceCode = _cf.db.ExecQuery(
                            strSql_CheckInvalidInvoiceCode
                            ).Tables[0];
                        /////
                        if (dt_CheckInvalidInvoiceCode.Rows.Count > 0)
                        {
                            /////
                            string strListRefNo = TUtils.CUtils.StdParam(dt_CheckInvalidInvoiceCode.Rows[0]["ListRefNo"]);
                            ////
                            if (!string.IsNullOrEmpty(strListRefNo))
                            {
                                alParamsCoupleError.AddRange(new object[]{
                                    "Check.ErrConditionalRaise", "and t.SourceInvoiceCode in ('@strInvoiceReplace')  and (f.InvoiceStatus not in ('DELETED', 'ISSUED')) "
                                    , "Check.strListRefNo", strListRefNo
                                    });
                                throw CmUtils.CMyException.Raise(
                                    TError.ErridnInventory.Invoice_Invoice_SaveX_Input_Invoice_InvalidInvoiceStatusRefNo
                                    , null
                                    , alParamsCoupleError.ToArray()
                                    );

                            }
                        }
                        ////
                    }
                    #endregion

                    #region ----// Không cho phép xóa hóa đơn thay thế:
                    if (bIsDelete)
                    {
                        string strSql_CheckInvalidInvoiceCode = CmUtils.StringUtils.Replace(@"
                                --- #tbl_Invoice_Invoice_ForSTUFF:
                                select distinct 
                                    t.RefNo
                                into #tbl_Invoice_Invoice_ForSTUFF
                                from #input_Invoice_Invoice t --//[mylock]
                                where(1=1)
                                ;

                                --- Return:					
                                select 
                                    STUFF(( 
		                                SELECT ',' + f.RefNo
		                                FROM #tbl_Invoice_Invoice_ForSTUFF f --//[mylock]
		                                WHERE(1=1)
		                                FOR
		                                XML PATH('')
		                                ), 1, 1, ''
                                    ) AS ListRefNo
                                where(1=1)
                                ;

                                --- Clear For Debug:
                                drop table #tbl_Invoice_Invoice_ForSTUFF;
						    "
                            , "@strInvoiceReplace", TConst.SourceInvoiceCode.InvoiceReplace
                            );
                        DataTable dt_CheckInvalidInvoiceCode = _cf.db.ExecQuery(
                            strSql_CheckInvalidInvoiceCode
                            ).Tables[0];
                        /////
                        if (dt_CheckInvalidInvoiceCode.Rows.Count > 0)
                        {
                            /////
                            string strListRefNo = TUtils.CUtils.StdParam(dt_CheckInvalidInvoiceCode.Rows[0]["ListRefNo"]);
                            ////
                            if (!string.IsNullOrEmpty(strListRefNo))
                            {
                                alParamsCoupleError.AddRange(new object[]{
                                    "Check.strListRefNo", strListRefNo
                                    });
                                throw CmUtils.CMyException.Raise(
                                    TError.ErridnInventory.Invoice_Invoice_SaveX_NotDelete
                                    , null
                                    , alParamsCoupleError.ToArray()
                                    );

                            }
                        }
                        ////
                    }
                    #endregion
                }
                #endregion

                #region ----// Check Mst_NNT:
                {
                    string strSql_CheckMstNNT = CmUtils.StringUtils.Replace(@"
                            --- #tbl_Invoice_Invoice_ForSTUFF:
                            select distinct 
	                            t.MST
                            into #tbl_Invoice_Invoice_ForSTUFF_Exist
                            from #input_Invoice_Invoice t --//[mylock]
	                            left join Mst_NNT f --//[mylock]
		                            on t.MST = f.MST
                            where(1=1)
	                            and f.MST is null
                            ;

                            --- #tbl_Invoice_Invoice_ForSTUFF_Active:
                            select distinct 
	                            t.MST
                            into #tbl_Invoice_Invoice_ForSTUFF_Active
                            from #input_Invoice_Invoice t --//[mylock]
	                            left join Mst_NNT f --//[mylock]
		                            on t.MST = f.MST
                            where(1=1)
	                            and f.FlagActive = '0'
                            ;

                            --- Return:					
                            select 
                                STUFF(( 
		                            SELECT ',' + f.MST
		                            FROM #tbl_Invoice_Invoice_ForSTUFF_Exist f --//[mylock]
		                            WHERE(1=1)
		                            FOR
		                            XML PATH('')
		                            ), 1, 1, ''
                                ) AS ListMST
                            where(1=1)
                            ;

                            --- Return:					
                            select 
                                STUFF(( 
		                            SELECT ',' + f.MST
		                            FROM #tbl_Invoice_Invoice_ForSTUFF_Active f --//[mylock]
		                            WHERE(1=1)
		                            FOR
		                            XML PATH('')
		                            ), 1, 1, ''
                                ) AS ListMST
                            where(1=1)
                            ;

                            --- Clear For Debug:
                            drop table #tbl_Invoice_Invoice_ForSTUFF_Exist;
                            drop table #tbl_Invoice_Invoice_ForSTUFF_Active;
						");
                    DataSet ds_CheckMstNNT = _cf.db.ExecQuery(
                        strSql_CheckMstNNT
                        );
                    ////
                    DataTable dt_Invoice_Invoice_ForSTUFF_Exist = ds_CheckMstNNT.Tables[0];
                    DataTable dt_Invoice_Invoice_ForSTUFF_Active = ds_CheckMstNNT.Tables[1];
                    /////
                    if (dt_Invoice_Invoice_ForSTUFF_Exist.Rows.Count > 0)
                    {
                        string strListMST = TUtils.CUtils.StdParam(dt_Invoice_Invoice_ForSTUFF_Exist.Rows[0]["ListMST"]);
                        /////
                        if (!string.IsNullOrEmpty(strListMST))
                        {
                            alParamsCoupleError.AddRange(new object[]{
                                "Check.ErrConditionalRaise", "Mst_NNT.MST is null"
                                , "Check.strListMST", strListMST
                                });
                            throw CmUtils.CMyException.Raise(
                                TError.ErridnInventory.Invoice_Invoice_SaveX_Invalid_MstNNT_NotFound
                                , null
                                , alParamsCoupleError.ToArray()
                                );
                        }
                        /////
                    }
                    ////
                    if (dt_Invoice_Invoice_ForSTUFF_Active.Rows.Count > 0)
                    {
                        string strListMST = TUtils.CUtils.StdParam(dt_Invoice_Invoice_ForSTUFF_Active.Rows[0]["ListMST"]);
                        /////
                        if (!string.IsNullOrEmpty(strListMST))
                        {
                            alParamsCoupleError.AddRange(new object[]{
                                "Check.ErrConditionalRaise", "Mst_NNT.FlagActive = '0'"
                                , "Check.strListMST", strListMST
                                });
                            throw CmUtils.CMyException.Raise(
                                TError.ErridnInventory.Invoice_Invoice_SaveX_Invalid_MstNNT_FlagActive
                                , null
                                , alParamsCoupleError.ToArray()
                                );
                        }
                        /////
                    }
                    ////
                }
                #endregion

                #region ----// Check Mst_PaymentMethods:
                {
                    string strSql_CheckPaymentMethods = CmUtils.StringUtils.Replace(@"
                            --- #tbl_Invoice_Invoice_ForSTUFF:
                            select distinct 
	                            t.PaymentMethodCode
                            into #tbl_Invoice_Invoice_ForSTUFF_Exist
                            from #input_Invoice_Invoice t --//[mylock]
	                            left join Mst_PaymentMethods f --//[mylock]
		                            on t.PaymentMethodCode = f.PaymentMethodCode
                            where(1=1)
	                            and f.PaymentMethodCode is null
                            ;

                            --- #tbl_Invoice_Invoice_ForSTUFF_Active:
                            select distinct 
	                            t.PaymentMethodCode
                            into #tbl_Invoice_Invoice_ForSTUFF_Active
                            from #input_Invoice_Invoice t --//[mylock]
	                            left join Mst_PaymentMethods f --//[mylock]
		                            on t.PaymentMethodCode = f.PaymentMethodCode
                            where(1=1)
	                            and f.FlagActive = '0'
                            ;

                            --- Return:					
                            select 
                                STUFF(( 
		                            SELECT ',' + f.PaymentMethodCode
		                            FROM #tbl_Invoice_Invoice_ForSTUFF_Exist f --//[mylock]
		                            WHERE(1=1)
		                            FOR
		                            XML PATH('')
		                            ), 1, 1, ''
                                ) AS ListPaymentMethodCode
                            where(1=1)
                            ;

                            --- Return:					
                            select 
                                STUFF(( 
		                            SELECT ',' + f.PaymentMethodCode
		                            FROM #tbl_Invoice_Invoice_ForSTUFF_Active f --//[mylock]
		                            WHERE(1=1)
		                            FOR
		                            XML PATH('')
		                            ), 1, 1, ''
                                ) AS ListPaymentMethodCode
                            where(1=1)
                            ;

                            --- Clear For Debug:
                            drop table #tbl_Invoice_Invoice_ForSTUFF_Exist;
                            drop table #tbl_Invoice_Invoice_ForSTUFF_Active;
						");
                    DataSet ds_CheckMst_PaymentMethods = _cf.db.ExecQuery(
                        strSql_CheckPaymentMethods
                        );
                    ////
                    DataTable dt_Invoice_Invoice_ForSTUFF_Exist = ds_CheckMst_PaymentMethods.Tables[0];
                    DataTable dt_Invoice_Invoice_ForSTUFF_Active = ds_CheckMst_PaymentMethods.Tables[1];
                    /////
                    if (dt_Invoice_Invoice_ForSTUFF_Exist.Rows.Count > 0)
                    {
                        string strListPaymentMethodCode = TUtils.CUtils.StdParam(dt_Invoice_Invoice_ForSTUFF_Exist.Rows[0]["ListPaymentMethodCode"]);
                        /////
                        if (!string.IsNullOrEmpty(strListPaymentMethodCode))
                        {
                            alParamsCoupleError.AddRange(new object[]{
                                "Check.ErrConditionalRaise", "Mst_PaymentMethods.PaymentMethodCode is null"
                                , "Check.strListPaymentMethodCode", strListPaymentMethodCode
                                });
                            throw CmUtils.CMyException.Raise(
                                TError.ErridnInventory.Invoice_Invoice_SaveX_Invalid_PaymentMethods_NotFound
                                , null
                                , alParamsCoupleError.ToArray()
                                );
                        }
                        /////
                    }
                    ////
                    if (dt_Invoice_Invoice_ForSTUFF_Active.Rows.Count > 0)
                    {
                        string strListPaymentMethodCode = TUtils.CUtils.StdParam(dt_Invoice_Invoice_ForSTUFF_Active.Rows[0]["ListPaymentMethodCode"]);
                        /////
                        if (!string.IsNullOrEmpty(strListPaymentMethodCode))
                        {
                            alParamsCoupleError.AddRange(new object[]{
                                "Check.ErrConditionalRaise", "Mst_PaymentMethods.FlagActive = '0'"
                                , "Check.strListPaymentMethodCode", strListPaymentMethodCode
                                });
                            throw CmUtils.CMyException.Raise(
                                TError.ErridnInventory.Invoice_Invoice_SaveX_Invalid_PaymentMethods_FlagActive
                                , null
                                , alParamsCoupleError.ToArray()
                                );
                        }
                        /////
                    }
                    ////
                }
                #endregion

                #region ----// Check Mst_InvoiceType2:
                {
                    string strSql_CheckInvoiceType2 = CmUtils.StringUtils.Replace(@"
                            --- #tbl_Invoice_Invoice_ForSTUFF:
                            select distinct 
	                            t.InvoiceType2
                            into #tbl_Invoice_Invoice_ForSTUFF_Exist
                            from #input_Invoice_Invoice t --//[mylock]
	                            left join Mst_InvoiceType2 f --//[mylock]
		                            on t.InvoiceType2 = f.InvoiceType2
                            where(1=1)
	                            and f.InvoiceType2 is null
                            ;

                            --- #tbl_Invoice_Invoice_ForSTUFF_Active:
                            select distinct 
	                            t.InvoiceType2
                            into #tbl_Invoice_Invoice_ForSTUFF_Active
                            from #input_Invoice_Invoice t --//[mylock]
	                            left join Mst_InvoiceType2 f --//[mylock]
		                            on t.InvoiceType2 = f.InvoiceType2
                            where(1=1)
	                            and f.FlagActive = '0'
                            ;

                            --- Return:					
                            select 
                                STUFF(( 
		                            SELECT ',' + f.InvoiceType2
		                            FROM #tbl_Invoice_Invoice_ForSTUFF_Exist f --//[mylock]
		                            WHERE(1=1)
		                            FOR
		                            XML PATH('')
		                            ), 1, 1, ''
                                ) AS ListInvoiceType2
                            where(1=1)
                            ;

                            --- Return:					
                            select 
                                STUFF(( 
		                            SELECT ',' + f.InvoiceType2
		                            FROM #tbl_Invoice_Invoice_ForSTUFF_Active f --//[mylock]
		                            WHERE(1=1)
		                            FOR
		                            XML PATH('')
		                            ), 1, 1, ''
                                ) AS ListInvoiceType2
                            where(1=1)
                            ;

                            --- Clear For Debug:
                            drop table #tbl_Invoice_Invoice_ForSTUFF_Exist;
                            drop table #tbl_Invoice_Invoice_ForSTUFF_Active;
						");
                    DataSet ds_CheckMst_InvoiceType2 = _cf.db.ExecQuery(
                        strSql_CheckInvoiceType2
                        );
                    ////
                    DataTable dt_Invoice_Invoice_ForSTUFF_Exist = ds_CheckMst_InvoiceType2.Tables[0];
                    DataTable dt_Invoice_Invoice_ForSTUFF_Active = ds_CheckMst_InvoiceType2.Tables[1];
                    /////
                    if (dt_Invoice_Invoice_ForSTUFF_Exist.Rows.Count > 0)
                    {
                        string strListInvoiceType2 = TUtils.CUtils.StdParam(dt_Invoice_Invoice_ForSTUFF_Exist.Rows[0]["ListInvoiceType2"]);
                        /////
                        if (!string.IsNullOrEmpty(strListInvoiceType2))
                        {
                            alParamsCoupleError.AddRange(new object[]{
                                "Check.ErrConditionalRaise", "Mst_InvoiceType2.InvoiceType2 is null"
                                , "Check.strListInvoiceType2", strListInvoiceType2
                                });
                            throw CmUtils.CMyException.Raise(
                                TError.ErridnInventory.Invoice_Invoice_SaveX_Invalid_InvoiceType2_NotFound
                                , null
                                , alParamsCoupleError.ToArray()
                                );
                        }
                        /////
                    }
                    ////
                    if (dt_Invoice_Invoice_ForSTUFF_Active.Rows.Count > 0)
                    {
                        string strListInvoiceType2 = TUtils.CUtils.StdParam(dt_Invoice_Invoice_ForSTUFF_Active.Rows[0]["ListInvoiceType2"]);
                        /////
                        if (!string.IsNullOrEmpty(strListInvoiceType2))
                        {
                            alParamsCoupleError.AddRange(new object[]{
                                "Check.ErrConditionalRaise", "Mst_InvoiceType2.FlagActive = '0'"
                                , "Check.strListInvoiceType2", strListInvoiceType2
                                });
                            throw CmUtils.CMyException.Raise(
                                TError.ErridnInventory.Invoice_Invoice_SaveX_Invalid_InvoiceType2_FlagActive
                                , null
                                , alParamsCoupleError.ToArray()
                                );
                        }
                        /////
                    }
                    ////
                }
                #endregion

                #region ----// Check Mst_SourceInvoice:
                {
                    string strSql_CheckMst_SourceInvoice = CmUtils.StringUtils.Replace(@"
                            --- #tbl_Invoice_Invoice_ForSTUFF:
                            select distinct 
	                            t.SourceInvoiceCode
                            into #tbl_Invoice_Invoice_ForSTUFF_Exist
                            from #input_Invoice_Invoice t --//[mylock]
	                            left join Mst_SourceInvoice f --//[mylock]
		                            on t.SourceInvoiceCode = f.SourceInvoiceCode
                            where(1=1)
	                            and f.SourceInvoiceCode is null
                            ;

                            --- #tbl_Invoice_Invoice_ForSTUFF_Active:
                            select distinct 
	                            t.SourceInvoiceCode
                            into #tbl_Invoice_Invoice_ForSTUFF_Active
                            from #input_Invoice_Invoice t --//[mylock]
	                            left join Mst_SourceInvoice f --//[mylock]
		                            on t.SourceInvoiceCode = f.SourceInvoiceCode
                            where(1=1)
	                            and f.FlagActive = '0'
                            ;

                            --- Return:					
                            select 
                                STUFF(( 
		                            SELECT ',' + f.SourceInvoiceCode
		                            FROM #tbl_Invoice_Invoice_ForSTUFF_Exist f --//[mylock]
		                            WHERE(1=1)
		                            FOR
		                            XML PATH('')
		                            ), 1, 1, ''
                                ) AS ListSourceInvoiceCode
                            where(1=1)
                            ;

                            --- Return:					
                            select 
                                STUFF(( 
		                            SELECT ',' + f.SourceInvoiceCode
		                            FROM #tbl_Invoice_Invoice_ForSTUFF_Active f --//[mylock]
		                            WHERE(1=1)
		                            FOR
		                            XML PATH('')
		                            ), 1, 1, ''
                                ) AS ListSourceInvoiceCode
                            where(1=1)
                            ;

                            --- Clear For Debug:
                            drop table #tbl_Invoice_Invoice_ForSTUFF_Exist;
                            drop table #tbl_Invoice_Invoice_ForSTUFF_Active;
						");
                    DataSet ds_CheckMst_PaymentMethods = _cf.db.ExecQuery(
                        strSql_CheckMst_SourceInvoice
                        );
                    ////
                    DataTable dt_Invoice_Invoice_ForSTUFF_Exist = ds_CheckMst_PaymentMethods.Tables[0];
                    DataTable dt_Invoice_Invoice_ForSTUFF_Active = ds_CheckMst_PaymentMethods.Tables[1];
                    /////
                    if (dt_Invoice_Invoice_ForSTUFF_Exist.Rows.Count > 0)
                    {
                        string strListSourceInvoiceCode = TUtils.CUtils.StdParam(dt_Invoice_Invoice_ForSTUFF_Exist.Rows[0]["ListSourceInvoiceCode"]);
                        /////
                        if (!string.IsNullOrEmpty(strListSourceInvoiceCode))
                        {
                            alParamsCoupleError.AddRange(new object[]{
                                "Check.ErrConditionalRaise", "Mst_SourceInvoice.SourceInvoiceCode is null"
                                , "Check.strListSourceInvoiceCode", strListSourceInvoiceCode
                                });
                            throw CmUtils.CMyException.Raise(
                                TError.ErridnInventory.Invoice_Invoice_SaveX_Invalid_SourceInvoice_NotFound
                                , null
                                , alParamsCoupleError.ToArray()
                                );
                        }
                        /////
                    }
                    ////
                    if (dt_Invoice_Invoice_ForSTUFF_Active.Rows.Count > 0)
                    {
                        string strListSourceInvoiceCode = TUtils.CUtils.StdParam(dt_Invoice_Invoice_ForSTUFF_Active.Rows[0]["ListSourceInvoiceCode"]);
                        /////
                        if (!string.IsNullOrEmpty(strListSourceInvoiceCode))
                        {
                            alParamsCoupleError.AddRange(new object[]{
                                "Check.ErrConditionalRaise", "Mst_SourceInvoice.FlagActive = '0'"
                                , "Check.strListPaymentMethodCode", strListSourceInvoiceCode
                                });
                            throw CmUtils.CMyException.Raise(
                                TError.ErridnInventory.Invoice_Invoice_SaveX_Invalid_SourceInvoice_FlagActive
                                , null
                                , alParamsCoupleError.ToArray()
                                );
                        }
                        /////
                    }
                    ////
                }
                #endregion

                #region ----// Check Invoice_TempInvoice:
                {
                    string strSql_CheckInvoice_TempInvoice = CmUtils.StringUtils.Replace(@"
                            --- #tbl_Invoice_Invoice_ForSTUFF_Exist:
                            select distinct 
	                            t.TInvoiceCode
                            into #tbl_Invoice_Invoice_ForSTUFF_Exist
                            from #input_Invoice_Invoice t --//[mylock]
	                            left join Invoice_TempInvoice f --//[mylock]
		                            on t.TInvoiceCode = f.TInvoiceCode
                            where(1=1)
	                            and f.TInvoiceCode is null
                            ;

                            --- #tbl_Invoice_Invoice_ForSTUFF_Active:
                            select distinct 
	                            t.TInvoiceCode
                            into #tbl_Invoice_Invoice_ForSTUFF_Active
                            from #input_Invoice_Invoice t --//[mylock]
	                            left join Invoice_TempInvoice f --//[mylock]
		                            on t.TInvoiceCode = f.TInvoiceCode
                            where(1=1)
	                            and f.TInvoiceStatus not in ('ISSUED')
                            ;

                            --- Return:					
                            select 
                                STUFF(( 
		                            SELECT ',' + f.TInvoiceCode
		                            FROM #tbl_Invoice_Invoice_ForSTUFF_Exist f --//[mylock]
		                            WHERE(1=1)
		                            FOR
		                            XML PATH('')
		                            ), 1, 1, ''
                                ) AS ListTInvoiceCode
                            where(1=1)
                            ;

                            --- Return:					
                            select 
                                STUFF(( 
		                            SELECT ',' + f.TInvoiceCode
		                            FROM #tbl_Invoice_Invoice_ForSTUFF_Active f --//[mylock]
		                            WHERE(1=1)
		                            FOR
		                            XML PATH('')
		                            ), 1, 1, ''
                                ) AS ListTInvoiceCode
                            where(1=1)
                            ;

                            --- Clear For Debug:
                            drop table #tbl_Invoice_Invoice_ForSTUFF_Exist;
                            drop table #tbl_Invoice_Invoice_ForSTUFF_Active;
						");
                    DataSet ds_CheckInvoice_TempInvoice = _cf.db.ExecQuery(
                        strSql_CheckInvoice_TempInvoice
                        );
                    ////
                    DataTable dt_Invoice_Invoice_ForSTUFF_Exist = ds_CheckInvoice_TempInvoice.Tables[0];
                    DataTable dt_Invoice_Invoice_ForSTUFF_Active = ds_CheckInvoice_TempInvoice.Tables[1];
                    /////
                    if (dt_Invoice_Invoice_ForSTUFF_Exist.Rows.Count > 0)
                    {
                        string strListTInvoiceCode = TUtils.CUtils.StdParam(dt_Invoice_Invoice_ForSTUFF_Exist.Rows[0]["ListTInvoiceCode"]);
                        /////
                        if (!string.IsNullOrEmpty(strListTInvoiceCode))
                        {
                            alParamsCoupleError.AddRange(new object[]{
                                "Check.ErrConditionalRaise", "Invoice_TempInvoice.TInvoiceCode is null"
                                , "Check.strListTInvoiceCode", strListTInvoiceCode
                                });
                            throw CmUtils.CMyException.Raise(
                                TError.ErridnInventory.Invoice_Invoice_SaveX_Invalid_TempInvoice_NotFound
                                , null
                                , alParamsCoupleError.ToArray()
                                );
                        }
                        /////
                    }
                    ////
                    if (dt_Invoice_Invoice_ForSTUFF_Active.Rows.Count > 0)
                    {
                        string strListTInvoiceCode = TUtils.CUtils.StdParam(dt_Invoice_Invoice_ForSTUFF_Active.Rows[0]["ListTInvoiceCode"]);
                        /////
                        if (!string.IsNullOrEmpty(strListTInvoiceCode))
                        {
                            alParamsCoupleError.AddRange(new object[]{
                                "Check.ErrConditionalRaise", "Invoice_TempInvoice.TInvoiceStatus not in ('ISSUED')"
                                , "Check.strListTInvoiceCode", strListTInvoiceCode
                                });
                            throw CmUtils.CMyException.Raise(
                                TError.ErridnInventory.Invoice_Invoice_SaveX_Invalid_TempInvoice_StatusNotMatch
                                , null
                                , alParamsCoupleError.ToArray()
                                );
                        }
                        /////
                    }
                    ////
                }
                #endregion

                #region ----// Check SL hóa đơn sử dụng:
                {
                    string strSql_CheckInvoice_TempInvoice = CmUtils.StringUtils.Replace(@"
                            --- #tbl_Invoice_TempInvoice:
                            select distinct 
	                            t.TInvoiceCode
                            into #tbl_Invoice_TempInvoice
                            from #input_Invoice_Invoice t --//[mylock]
	                            inner join Invoice_TempInvoice f --//[mylock]
		                            on t.TInvoiceCode = t.TInvoiceCode
                            where(1=1)
                            ;

							---- Return:
							select 
								t.TInvoiceCode
								, f.EndInvoiceNo
								, f.StartInvoiceNo
								, f.QtyUsed
								, (f.EndInvoiceNo - f.StartInvoiceNo + 1 - f.QtyUsed) QtyRemain
							from #tbl_Invoice_TempInvoice t --//[mylock]
								inner join Invoice_TempInvoice f --//[mylock]
									on t.TInvoiceCode = f.TInvoiceCode
							where(1=1)
								and (f.EndInvoiceNo - f.StartInvoiceNo + 1 - f.QtyUsed) < 1
							;

                            --- Clear For Debug:
                            drop table #tbl_Invoice_TempInvoice;
						");
                    DataSet ds_Invoice_TempInvoice = _cf.db.ExecQuery(
                        strSql_CheckInvoice_TempInvoice
                        );
                    ////
                    DataTable dt_Invoice_TempInvoice = ds_Invoice_TempInvoice.Tables[0];
                    /////
                    if (dt_Invoice_TempInvoice.Rows.Count > 0)
                    {
                        alParamsCoupleError.AddRange(new object[]{
                            "Check.strTInvoiceCode", dt_Invoice_TempInvoice.Rows[0]["TInvoiceCode"]
                            , "Check.DB.StartInvoiceNo", dt_Invoice_TempInvoice.Rows[0]["StartInvoiceNo"]
                            , "Check.DB.EndInvoiceNo", dt_Invoice_TempInvoice.Rows[0]["EndInvoiceNo"]
                            , "Check.DB.QtyUsed",  dt_Invoice_TempInvoice.Rows[0]["QtyUsed"]
                            , "Check.ErrConditionRaise", "((nEndInvoiceNo - nStartInvoiceNo - nQtyUsed)< 1)"
                            });
                        throw CmUtils.CMyException.Raise(
                            TError.ErridnInventory.Invoice_Invoice_SaveX_Invalid_SourceInvoice_NotFound
                            , null
                            , alParamsCoupleError.ToArray()
                            );
                    }
                    ////
                }
                #endregion
            }
            #endregion

            #region // Build Invoice_Invoice:
            {
                string strSql_Build = CmUtils.StringUtils.Replace(@"
                        ----- #tbl_Invoice_Invoice_Build:
                        select 
	                        t.InvoiceCode
	                        , t.MST
	                        , t.NetworkID
	                        , t.RefNo
	                        , t.FormNo
	                        , t.Sign
	                        , t.SourceInvoiceCode
	                        , t.InvoiceAdjType
	                        , t.InvoiceType2
	                        , t.PaymentMethodCode
	                        , t.CustomerNNTCode
	                        , t.CustomerNNTName
	                        , t.CustomerNNTAddress
	                        , t.CustomerNNTPhone
	                        , t.CustomerNNTBankName
	                        , t.CustomerNNTEmail
	                        , t.CustomerNNTAccNo
	                        , t.CustomerNNTBuyerName
	                        , t.CustomerMST
	                        , t.TInvoiceCode
	                        , t.InvoiceNo
	                        , t.InvoiceDateUTC
	                        , t.EmailSend
	                        , t.InvoiceFileSpec
	                        , t.InvoiceFilePath
	                        , null InvoicePDFFilePath
	                        , t.TotalValInvoice
	                        , t.TotalValVAT
	                        , t.TotalValPmt
	                        , IsNull(f.CreateDTimeUTC, '@strLogLUDTimeUTC') CreateDTimeUTC --t.CreateDTimeUTC
	                        , IsNull(f.CreateBy, '@strLogLUBy') CreateBy --t.CreateBy
	                        , t.InvoiceNoDTimeUTC
	                        , t.InvoiceNoBy
	                        , t.SignDTimeUTC
	                        , t.SignBy
	                        , t.ApprDTimeUTC
	                        , t.ApprBy
	                        , t.CancelDTimeUTC
	                        , t.CancelBy
	                        , t.SendEmailDTimeUTC
	                        , t.SendEmailBy
	                        , t.IssuedDTimeUTC
	                        , t.IssuedBy
                            , t.AttachedDelFilePath
                            , t.DeleteReason
                            , t.DeleteDTimeUTC
	                        , t.DeleteBy
	                        , t.ChangeDTimeUTC
	                        , t.ChangeBy
	                        , t.InvoiceVerifyCQTCode
	                        , t.CurrencyCode
	                        , t.CurrencyRate
	                        , t.ValGoodsNotTaxable
	                        , t.ValGoodsNotChargeTax
	                        , t.ValGoodsVAT5
	                        , t.ValVAT5
	                        , t.ValGoodsVAT10
	                        , t.ValVAT10
	                        , t.NNTFullName
	                        , t.NNTFullAdress
	                        , t.NNTPhone
	                        , t.NNTFax
	                        , t.NNTEmail
	                        , t.NNTWebsite
	                        , t.NNTAccNo
	                        , t.NNTBankName
	                        , '@strLogLUDTimeUTC' LUDTimeUTC --t.LUDTimeUTC
	                        , '@strLogLUBy' LUBy --t.LUBy
	                        , t.Remark
	                        , t.InvoiceCF1
	                        , t.InvoiceCF2
	                        , t.InvoiceCF3
	                        , t.InvoiceCF4
	                        , t.InvoiceCF5
	                        , t.InvoiceCF6
	                        , t.InvoiceCF7
	                        , t.InvoiceCF8
	                        , t.InvoiceCF9
	                        , t.InvoiceCF10
	                        --, t.FlagConfirm
	                        , '1' FlagChange --t.FlagChange
	                        , null FlagPushOutSite -- t.FlagPushOutSite
	                        , null FlagDeleteOutSite -- t.FlagDeleteOutSite
	                        , '@strInvoiceStatus' InvoiceStatus --t.InvoiceStatus
	                        , '@strLogLUDTimeUTC' LogLUDTimeUTC --t.LogLUDTimeUTC
	                        , '@strLogLUBy' LogLUBy --t.LogLUBy
                        into #tbl_Invoice_Invoice_Build
                        from #input_Invoice_Invoice t --//[mylock]
                            left join Invoice_Invoice f --//[mylock]
                                on t.InvoiceCode = f.InvoiceCode
                        where(1=1)
                        ;

                        select null tbl_Invoice_Invoice_Build, t.* from #tbl_Invoice_Invoice_Build t --//[mylock];
                    ;"
                    , "@strInvoiceStatus", TConst.InvoiceStatus.Pending
                    , "@strLogLUDTimeUTC", dtimeSys.ToString("yyyy-MM-dd hh:mm:ss")
                    , "@strLogLUBy", strWAUserCode
                    );
                DataTable dt_Build = _cf.db.ExecQuery(
                    strSql_Build
                    ).Tables[0];
                /////
            }
            #endregion

            #region //// Refine and Check Input Invoice_InvoiceDtl:
            ////
            DataTable dtInput_Invoice_InvoiceDtl = null;
            if (!bIsDelete)
            {
                ////
                string strTableCheck = "Invoice_InvoiceDtl";
                ////
                if (!dsData.Tables.Contains(strTableCheck))
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.TableName", strTableCheck
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Invoice_Invoice_SaveX_Input_InvoiceDtlTblNotFound
                        , null
                        , alParamsCoupleError.ToArray()
                        );
                }
                dtInput_Invoice_InvoiceDtl = dsData.Tables[strTableCheck];
                ////

                if (dtInput_Invoice_InvoiceDtl.Rows.Count < 1)
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.TableName", strTableCheck
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Invoice_Invoice_SaveX_Input_InvoiceDtlTblInvalid
                        , null
                        , alParamsCoupleError.ToArray()
                        );
                }
                ////
                TUtils.CUtils.StdDataInTable(
                    dtInput_Invoice_InvoiceDtl // dtData
                    , "StdParam", "InvoiceCode" // arrstrCouple
                    , "StdParam", "Idx" // arrstrCouple
                    , "StdParam", "NetworkID" // arrstrCouple
                    , "StdParam", "SpecCode" // arrstrCouple
                    , "", "SpecName" // arrstrCouple
                    , "StdParam", "ProductID" // arrstrCouple
                    , "", "ProductName" // arrstrCouple
                    , "StdParam", "VATRateCode" // arrstrCouple
                    , "float", "VATRate" // arrstrCouple
                    , "StdParam", "UnitCode" // arrstrCouple
                    , "", "UnitName" // arrstrCouple
                    , "float", "UnitPrice" // arrstrCouple
                    , "float", "Qty" // arrstrCouple
                    , "float", "ValInvoice" // arrstrCouple
                    , "float", "ValTax" // arrstrCouple
                    , "StdParam", "InventoryCode" // arrstrCouple
                    , "float", "DiscountRate" // arrstrCouple
                    , "float", "ValDiscount" // arrstrCouple
                    , "", "Remark" // arrstrCouple
                    , "", "InvoiceDCF1" // arrstrCouple
                    , "", "InvoiceDCF2" // arrstrCouple
                    , "", "InvoiceDCF3" // arrstrCouple
                    , "", "InvoiceDCF4" // arrstrCouple
                    , "", "InvoiceDCF5" // arrstrCouple
                    );
                ////
                //TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_InvoiceDtl, "InvoiceCode", typeof(object));
                //TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_InvoiceDtl, "NetworkID", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_InvoiceDtl, "InvoiceDtlStatus", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_InvoiceDtl, "LogLUDTimeUTC", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_InvoiceDtl, "LogLUBy", typeof(object));
                ////////
            }
            #endregion

            #region //// SaveTemp Invoice_InvoiceDtl For Check:
            if (!bIsDelete)
            {
                // Upload:
                TUtils.CUtils.MyBuildDBDT_Common(
                    _cf.db // db
                    , "#input_Invoice_InvoiceDtl" // strTableName
                    , new object[] {
                            "InvoiceCode", TConst.BizMix.Default_DBColType
                            , "Idx", TConst.BizMix.Default_DBColType
                            , "NetworkID", TConst.BizMix.Default_DBColType
                            , "SpecCode", TConst.BizMix.Default_DBColType
                            , "SpecName", TConst.BizMix.Default_DBColType
                            , "ProductID", TConst.BizMix.Default_DBColType
                            , "ProductName", TConst.BizMix.Default_DBColType
                            , "VATRateCode", TConst.BizMix.Default_DBColType
                            , "VATRate", "float"
                            , "UnitCode", TConst.BizMix.Default_DBColType
                            , "UnitName", TConst.BizMix.Default_DBColType
                            , "UnitPrice", "float"
                            , "Qty", "float"
                            , "ValInvoice", "float"
                            , "ValTax", "float"
                            , "InventoryCode", TConst.BizMix.Default_DBColType
                            , "DiscountRate", "float"
                            , "ValDiscount", "float"
                            , "InvoiceDtlStatus", TConst.BizMix.Default_DBColType
                            , "Remark", TConst.BizMix.Default_DBColType
                            , "InvoiceDCF1", TConst.BizMix.Default_DBColType
                            , "InvoiceDCF2", TConst.BizMix.Default_DBColType
                            , "InvoiceDCF3", TConst.BizMix.Default_DBColType
                            , "InvoiceDCF4", TConst.BizMix.Default_DBColType
                            , "InvoiceDCF5", TConst.BizMix.Default_DBColType
                            , "LogLUDTimeUTC", TConst.BizMix.Default_DBColType
                            , "LogLUBy", TConst.BizMix.Default_DBColType
                        } // arrSingleStructure
                    , dtInput_Invoice_InvoiceDtl // dtData
                );
            }
            #endregion

            #region // Refine and Check Input Invoice_InvoiceDtl:
            if (!bIsDelete)
            {
                #region ----// Check ProductID + SpecCode là duy nhất:
                {
                    string strSql_CheckProducID = CmUtils.StringUtils.Replace(@"                            
                            ---- #tbl_Invoice_InvoiceDtl_TotalProductID:
                            select 
	                            t.InvoiceCode
	                            , t.SpecCode
	                            , t.ProductID
	                            , count(0) QtyProductID
                            into #tbl_Invoice_InvoiceDtl_TotalProductID
                            from #input_Invoice_InvoiceDtl t --//[mylock]
                            where(1=1)
	                            and t.ProductID is not null
                            group by 
	                            t.InvoiceCode
	                            , t.SpecCode
	                            , t.ProductID
                            ;

                            ---- Return:
                            select top 1
	                            t.InvoiceCode
	                            , t.ProductID
	                            , t.SpecCode
	                            , t.QtyProductID
                            from #tbl_Invoice_InvoiceDtl_TotalProductID t --//[mylock]
                            where(1=1)
	                            and t.QtyProductID > 1
                            ;

                            -- Clear For Debug:
                            drop table #tbl_Invoice_InvoiceDtl_TotalProductID;

						");
                    DataTable dt_CheckProductID = _cf.db.ExecQuery(
                        strSql_CheckProducID
                        ).Tables[0];
                    /////
                    if (dt_CheckProductID.Rows.Count > 0)
                    {
                        alParamsCoupleError.AddRange(new object[]{
                            "Check.ErrConditionalRaise", "t.QtyProductID > 1"
                            //, "Check.NumberRows", dt_CheckProductID.Rows.Count
                            , "Check.InvoiceCode", dt_CheckProductID.Rows[0]["InvoiceCode"]
                            , "Check.SpecCode", dt_CheckProductID.Rows[0]["SpecCode"]
                            , "Check.ProductID", dt_CheckProductID.Rows[0]["ProductID"]
                            , "Check.QtyProductID", dt_CheckProductID.Rows[0]["QtyProductID"]
                            });
                        throw CmUtils.CMyException.Raise(
                            TError.ErridnInventory.Invoice_Invoice_SaveX_Input_InvoiceDtl_ProductIDDuplicate
                            , null
                            , alParamsCoupleError.ToArray()
                            );
                    }
                    ////
                }
                #endregion

                #region ----// Check SpecCode là duy nhất:
                //          {
                //              string strSql_CheckSpec = CmUtils.StringUtils.Replace(@"                         
                //                      ---- #tbl_Invoice_InvoiceDtl_TotalSpec:
                //                      select 
                //                       t.InvoiceCode
                //                       , t.SpecCode
                //                       , count(0) QtySpecCode
                //                      into #tbl_Invoice_InvoiceDtl_TotalSpec
                //                      from #input_Invoice_InvoiceDtl t --//[mylock]
                //                      where(1=1)
                //                       and t.ProductID is null
                //		and t.SpecCode is not null
                //                      group by 
                //                       t.InvoiceCode
                //                       , t.SpecCode
                //                      ;

                //                      ---- Return:
                //                      select top 1
                //                       t.InvoiceCode
                //                       , t.SpecCode
                //                       , t.QtySpecCode
                //                      from #tbl_Invoice_InvoiceDtl_TotalSpec t --//[mylock]
                //                      where(1=1)
                //                       and t.QtySpecCode > 1
                //                      ;

                //                      -- Clear For Debug:
                //                      drop table #tbl_Invoice_InvoiceDtl_TotalSpec;

                //");
                //              DataTable dt_CheckSpecCode = _cf.db.ExecQuery(
                //                  strSql_CheckSpec
                //                  ).Tables[0];
                //              /////
                //              if (dt_CheckSpecCode.Rows.Count > 0)
                //              {
                //                  alParamsCoupleError.AddRange(new object[]{
                //                      "Check.ErrConditionalRaise", "t.QtyProductID > 1"
                //                      //, "Check.NumberRows", dt_CheckProductID.Rows.Count
                //                      , "Check.InvoiceCode", dt_CheckSpecCode.Rows[0]["InvoiceCode"]
                //                      , "Check.SpecCode", dt_CheckSpecCode.Rows[0]["SpecCode"]
                //                      , "Check.QtySpecCode", dt_CheckSpecCode.Rows[0]["QtySpecCode"]
                //                      });
                //                  throw CmUtils.CMyException.Raise(
                //                      TError.ErridnInventory.Invoice_Invoice_SaveX_Input_InvoiceDtl_SpecCodeDuplicate
                //                      , null
                //                      , alParamsCoupleError.ToArray()
                //                      );
                //              }
                //              ////
                //          }
                #endregion

            }
            #endregion

            #region // Build Invoice_InvoiceDtl:
            if (!bIsDelete)
            {
                string strSql_Build = CmUtils.StringUtils.Replace(@"
                        ----- #tbl_Invoice_InvoiceDtl_Build:
                        select 
	                        t.InvoiceCode
							, Row_Number() over( partition by t.InvoiceCode order by t.Idx asc) Idx 
							--, Row_Number() over (order by t.Idx desc) Idx 
	                        --, t.Idx
	                        , t.NetworkID
	                        , t.SpecCode
	                        , t.SpecName
	                        , t.ProductID
	                        , t.ProductName
	                        , t.VATRateCode
	                        , t.VATRate
	                        , t.UnitCode
	                        , t.UnitName
	                        , t.UnitPrice
	                        , t.Qty
	                        , t.ValInvoice
	                        , t.ValTax
	                        , t.InventoryCode
	                        , t.DiscountRate
	                        , t.ValDiscount
	                        , '@strInvoiceStatus' InvoiceDtlStatus --t.InvoiceDtlStatus
	                        , t.Remark
	                        , t.InvoiceDCF1
	                        , t.InvoiceDCF2
	                        , t.InvoiceDCF3
	                        , t.InvoiceDCF4
	                        , t.InvoiceDCF5
	                        , '@strLogLUDTimeUTC' LogLUDTimeUTC --t.LogLUDTimeUTC
	                        , '@strLogLUBy' LogLUBy --t.LogLUBy
                        into #tbl_Invoice_InvoiceDtl_Build
                        from #input_Invoice_InvoiceDtl t --//[mylock]

                        select null tbl_Invoice_InvoiceDtl_Build, t.* from #tbl_Invoice_InvoiceDtl_Build t --//[mylock];
                    ;"
                    , "@strInvoiceStatus", TConst.InvoiceStatus.Pending
                    , "@strLogLUDTimeUTC", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
                    , "@strLogLUBy", strWAUserCode
                    );
                DataTable dt_Build = _cf.db.ExecQuery(
                    strSql_Build
                    ).Tables[0];
                /////
            }
            #endregion

            #region // SaveDB:
            {
                //// Clear All:
                {
                    string strSqlDelete = CmUtils.StringUtils.Replace(@"
                            ---- #tbl_Invoice_InvoiceDtl:
                            select 
                                t.InvoiceCode
                                , t.Idx
                            into #tbl_Invoice_InvoiceDtl
                            from Invoice_InvoiceDtl t --//[mylock]
	                            inner join #input_Invoice_Invoice f --//[mylock]
		                            on t.InvoiceCode = f.InvoiceCode
                            where (1=1)
                            ;

                            --- Delete:
                            ---- Invoice_InvoiceDtl:
                            delete t 
                            from Invoice_InvoiceDtl t --//[mylock]
	                            inner join #tbl_Invoice_InvoiceDtl f --//[mylock]
		                            on t.InvoiceCode = f.InvoiceCode
		                                and t.Idx = f.Idx
                            where (1=1)
                            ;

                            ---- Invoice_Invoice:
                            delete t
                            from Invoice_Invoice t --//[mylock]
	                            inner join #input_Invoice_Invoice f --//[mylock]
		                            on t.InvoiceCode = f.InvoiceCode
                            where (1=1)
                            ;

                            --- Clear For Debug:
                            drop table #tbl_Invoice_InvoiceDtl;
						");
                    DataSet dtDB = _cf.db.ExecQuery(
                        strSqlDelete
                        );
                }

                //// Insert All:
                if (!bIsDelete)
                {
                    #region // Insert:
                    {
                        ////
                        string zzzzClauseInsert_Invoice_Invoice_zSave = CmUtils.StringUtils.Replace(@"
                                ---- Invoice_Invoice:                                
                                insert into Invoice_Invoice(
	                                InvoiceCode
	                                , MST
	                                , NetworkID
	                                , RefNo
	                                , FormNo
	                                , Sign
	                                , SourceInvoiceCode
	                                , InvoiceAdjType
	                                , PaymentMethodCode
	                                , InvoiceType2
	                                , CustomerNNTCode
	                                , CustomerNNTName
	                                , CustomerNNTAddress
	                                , CustomerNNTPhone
	                                , CustomerNNTBankName
	                                , CustomerNNTEmail
	                                , CustomerNNTAccNo
	                                , CustomerNNTBuyerName
	                                , CustomerMST
	                                , TInvoiceCode
	                                , InvoiceNo
	                                , InvoiceDateUTC
	                                , EmailSend
	                                , InvoiceFileSpec
	                                , InvoiceFilePath
	                                , InvoicePDFFilePath
	                                , TotalValInvoice
	                                , TotalValVAT
	                                , TotalValPmt
	                                , CreateDTimeUTC
	                                , CreateBy
	                                , InvoiceNoDTimeUTC
	                                , InvoiceNoBy
	                                , SignDTimeUTC
	                                , SignBy
	                                , ApprDTimeUTC
	                                , ApprBy
	                                , CancelDTimeUTC
	                                , CancelBy
	                                , SendEmailDTimeUTC
	                                , SendEmailBy
	                                , IssuedDTimeUTC
	                                , IssuedBy
	                                , AttachedDelFilePath
	                                , DeleteReason
	                                , DeleteDTimeUTC
	                                , DeleteBy
	                                , ChangeDTimeUTC
	                                , ChangeBy
	                                , InvoiceVerifyCQTCode
	                                , CurrencyCode
	                                , CurrencyRate
	                                , ValGoodsNotTaxable
	                                , ValGoodsNotChargeTax
	                                , ValGoodsVAT5
	                                , ValVAT5
	                                , ValGoodsVAT10
	                                , ValVAT10
	                                , NNTFullName
	                                , NNTFullAdress
	                                , NNTPhone
	                                , NNTFax
	                                , NNTEmail
	                                , NNTWebsite
	                                , NNTAccNo
	                                , NNTBankName
	                                , LUDTimeUTC
	                                , LUBy
	                                , Remark
	                                , InvoiceCF1
	                                , InvoiceCF2
	                                , InvoiceCF3
	                                , InvoiceCF4
	                                , InvoiceCF5
	                                , InvoiceCF6
	                                , InvoiceCF7
	                                , InvoiceCF8
	                                , InvoiceCF9
	                                , InvoiceCF10
	                                , FlagChange
	                                , FlagPushOutSite
	                                , FlagDeleteOutSite
	                                , InvoiceStatus
	                                , LogLUDTimeUTC
	                                , LogLUBy
                                )
                                select 
	                                t.InvoiceCode
	                                , t.MST
	                                , t.NetworkID
	                                , t.RefNo
	                                , t.FormNo
	                                , t.Sign
	                                , t.SourceInvoiceCode
	                                , t.InvoiceAdjType
	                                , t.PaymentMethodCode
	                                , t.InvoiceType2
	                                , t.CustomerNNTCode
	                                , t.CustomerNNTName
	                                , t.CustomerNNTAddress
	                                , t.CustomerNNTPhone
	                                , t.CustomerNNTBankName
	                                , t.CustomerNNTEmail
	                                , t.CustomerNNTAccNo
	                                , t.CustomerNNTBuyerName
	                                , t.CustomerMST
	                                , t.TInvoiceCode
	                                , t.InvoiceNo
	                                , t.InvoiceDateUTC
	                                , t.EmailSend
	                                , t.InvoiceFileSpec
	                                , t.InvoiceFilePath
	                                , t.InvoicePDFFilePath
	                                , t.TotalValInvoice
	                                , t.TotalValVAT
	                                , t.TotalValPmt
	                                , t.CreateDTimeUTC
	                                , t.CreateBy
	                                , t.InvoiceNoDTimeUTC
	                                , t.InvoiceNoBy
	                                , t.SignDTimeUTC
	                                , t.SignBy
	                                , t.ApprDTimeUTC
	                                , t.ApprBy
	                                , t.CancelDTimeUTC
	                                , t.CancelBy
	                                , t.SendEmailDTimeUTC
	                                , t.SendEmailBy
	                                , t.IssuedDTimeUTC
	                                , t.IssuedBy
	                                , t.AttachedDelFilePath
	                                , t.DeleteReason
	                                , t.DeleteDTimeUTC
	                                , t.DeleteBy
	                                , t.ChangeDTimeUTC
	                                , t.ChangeBy
	                                , t.InvoiceVerifyCQTCode
	                                , t.CurrencyCode
	                                , t.CurrencyRate
	                                , t.ValGoodsNotTaxable
	                                , t.ValGoodsNotChargeTax
	                                , t.ValGoodsVAT5
	                                , t.ValVAT5
	                                , t.ValGoodsVAT10
	                                , t.ValVAT10
	                                , t.NNTFullName
	                                , t.NNTFullAdress
	                                , t.NNTPhone
	                                , t.NNTFax
	                                , t.NNTEmail
	                                , t.NNTWebsite
	                                , t.NNTAccNo
	                                , t.NNTBankName
	                                , t.LUDTimeUTC
	                                , t.LUBy
	                                , t.Remark
	                                , t.InvoiceCF1
	                                , t.InvoiceCF2
	                                , t.InvoiceCF3
	                                , t.InvoiceCF4
	                                , t.InvoiceCF5
	                                , t.InvoiceCF6
	                                , t.InvoiceCF7
	                                , t.InvoiceCF8
	                                , t.InvoiceCF9
	                                , t.InvoiceCF10
	                                , t.FlagChange
	                                , t.FlagPushOutSite
	                                , t.FlagDeleteOutSite
	                                , t.InvoiceStatus
	                                , t.LogLUDTimeUTC
	                                , t.LogLUBy
                                from #tbl_Invoice_Invoice_Build t --//[mylock]
                            ");
                        /////
                        string zzzzClauseInsert_Invoice_InvoiceDtl_zSave = CmUtils.StringUtils.Replace(@"
                                ---- Invoice_InvoiceDtl:  
                                insert into Invoice_InvoiceDtl(
	                                InvoiceCode
	                                , Idx
	                                , NetworkID
	                                , SpecCode
	                                , SpecName
	                                , ProductID
	                                , ProductName
	                                , VATRateCode
	                                , VATRate
	                                , UnitCode
	                                , UnitName
	                                , UnitPrice
	                                , Qty
	                                , ValInvoice
	                                , ValTax
	                                , InventoryCode
	                                , DiscountRate
	                                , ValDiscount
	                                , InvoiceDtlStatus
	                                , Remark
	                                , InvoiceDCF1
	                                , InvoiceDCF2
	                                , InvoiceDCF3
	                                , InvoiceDCF4
	                                , InvoiceDCF5
	                                , LogLUDTimeUTC
	                                , LogLUBy
                                )
                                select 
	                                t.InvoiceCode
	                                , t.Idx
	                                , t.NetworkID
	                                , t.SpecCode
	                                , t.SpecName
	                                , t.ProductID
	                                , t.ProductName
	                                , t.VATRateCode
	                                , t.VATRate
	                                , t.UnitCode
	                                , t.UnitName
	                                , t.UnitPrice
	                                , t.Qty
	                                , t.ValInvoice
	                                , t.ValTax
	                                , t.InventoryCode
	                                , t.DiscountRate
	                                , t.ValDiscount
	                                , t.InvoiceDtlStatus
	                                , t.Remark
	                                , t.InvoiceDCF1
	                                , t.InvoiceDCF2
	                                , t.InvoiceDCF3
	                                , t.InvoiceDCF4
	                                , t.InvoiceDCF5
	                                , t.LogLUDTimeUTC
	                                , t.LogLUBy
                                from #tbl_Invoice_InvoiceDtl_Build t
                            ");

                        /////
                        string strSqlExec = CmUtils.StringUtils.Replace(@"
								----
								zzzzClauseInsert_Invoice_Invoice_zSave			
								----
								zzzzClauseInsert_Invoice_InvoiceDtl_zSave			
								----
							"
                            , "zzzzClauseInsert_Invoice_Invoice_zSave", zzzzClauseInsert_Invoice_Invoice_zSave
                            , "zzzzClauseInsert_Invoice_InvoiceDtl_zSave", zzzzClauseInsert_Invoice_InvoiceDtl_zSave
                            );
                        ////
                        DataSet dsExec = _cf.db.ExecQuery(strSqlExec);
                        ////
                    }
                    #endregion
                }
            }
            #endregion

            #region // Check One RefNo:
            if (!bIsDelete)
            {
                myCheck_Invoice_Invoice_RefNo_New20190705(
                    ref alParamsCoupleError // alParamsCoupleError
                    , dtimeSys // dtimeSys
                    , "#tbl_Invoice_Invoice_Build"  //zzzz_tbl_Invoice_Invoice_RefNo
                    );
            }
            #endregion

            #region // myCheck_Invoice_Invoice_Total:
            if (!bIsDelete)
            {
                /*
                    Ngày 2019-11-01
                    Nâng Cấp: -  Nếu FlagIsCheckInvoiceTotal = 1 hoặc null thì hệ thống sẽ Insert Vào DB mà không tính toán
                              -  Ngược lại nếu FlagIsCheckInvoiceTotal = 0 thì hệ thống sẽ tính toán rồi Insert vào DB
                        FlagIsCheckInvoiceTotal = 0 => Không Check
                        FlagIsCheckInvoiceTotal = 1 => Check
                        FlagIsCheckInvoiceTotal = null => Check
                */
                if (bIsCheckInvoiceTotal)
                {
                    myCheck_Invoice_Invoice_Total_New20190905(
                        ref alParamsCoupleError // alParamsCoupleError
                        , dtimeSys // dtimeSys
                        , "#tbl_Invoice_Invoice_Build"  //zzzz_tbl_Invoice_Invoice_RefNo
                        );
                    ////
                    myCheck_Invoice_InvoiceDtl_Total_New20190905(
                        ref alParamsCoupleError // alParamsCoupleError
                        , dtimeSys // dtimeSys
                        , "#tbl_Invoice_Invoice_Build"  //zzzz_tbl_Invoice_Invoice_RefNo
                        );
                }

            }
            #endregion

            #region // myCheck_OS_Invoice_Invoice_CheckMasterPrd:


            if (!bIsDelete)
            {
                /*Ngày 2019-08-02:
                * A @HuongNV chốt: Client truyền thêm 1 cờ xác nhận (FlagConfirm) check hàng hóa:
                    + Cờ FlagConfirm chỉ truyền vào không lưu trong DB.
                    + Nếu FlagConfirm = 1 => Không thay đổi luật check hiện tại tính đến trước ngày 2019-08-02.
                    + Nếu FlagConfirm = 0 => Bỏ luật check các FK hàng hóa trừ SpecCode.
                */
                ////
                string strFlagConfirm = dtInput_Invoice_Invoice.Rows[0]["FlagConfirm"].ToString();

                if (CmUtils.StringUtils.StringEqual(strFlagConfirm, TConst.Flag.Active))
                {
                    myCheck_OS_Invoice_Invoice_CheckMasterPrd(
                    ref alParamsCoupleError  //alParamsCoupleError
                    , dtimeSys  //dtimeSys
                    , strTid  //strTid
                    , "#tbl_Invoice_Invoice_Build"  //zzzz_tbl_Invoice_Invoice_RefNo
                    );
                }
                else
                {
                    myCheck_OS_Invoice_Invoice_CheckMasterPrd_NotConfirm(
                    ref alParamsCoupleError  //alParamsCoupleError
                    , dtimeSys  //dtimeSys
                    , strTid  //strTid
                    , "#tbl_Invoice_Invoice_Build"  //zzzz_tbl_Invoice_Invoice_RefNo
                    );
                }
            }
            #endregion

            #region //// Clear For Debug:
            if (!bIsDelete)
            {
                ////
                string strSqlClearForDebug = CmUtils.StringUtils.Replace(@"
						---- Clear for Debug:
						drop table #input_Invoice_Invoice;
						drop table #input_Invoice_InvoiceDtl;
					");

                _cf.db.ExecQuery(
                    strSqlClearForDebug
                    );
                ////
            }
            else
            {
                ////
                string strSqlClearForDebug = CmUtils.StringUtils.Replace(@"
						---- Clear for Debug:
						drop table #input_Invoice_Invoice;
					");

                _cf.db.ExecQuery(
                    strSqlClearForDebug
                    );
                ////

            }
            #endregion

            // Return Good:
            MyCodeLabel_Done:
            return;
            //TDALUtils.DBUtils.CommitSafety(_cf.db);
            //mdsFinal.AcceptChanges();
            //return mdsFinal;		
        }

        public DataSet WAS_Invoice_Invoice_Deleted_New20190715(
           ref ArrayList alParamsCoupleError
           , RQ_Invoice_Invoice objRQ_Invoice_Invoice
           ////
           , out RT_Invoice_Invoice objRT_Invoice_Invoice
           )
        {
            #region // Temp:
            string strTid = objRQ_Invoice_Invoice.Tid;
            objRT_Invoice_Invoice = new RT_Invoice_Invoice();
            DataSet mdsResult = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            DateTime dtimeSys = DateTime.UtcNow;
            //DataSet mdsExec = null;
            //DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(objRQ_Invoice_Invoice.Tid);
            //int nTidSeq = 0;
            //bool bNeedTransaction = true;
            string strFunctionName = "WAS_Invoice_Invoice_Deleted";
            string strErrorCodeDefault = TError.ErridnInventory.WAS_Invoice_Invoice_Deleted;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
                });
            #endregion

            try
            {
                #region // Init:
                #endregion

                #region // Refine and Check Input:
                //List<Invoice_Invoice> lst_Invoice_Invoice = new List<Invoice_Invoice>();
                //DataSet dsData = new DataSet();
                //{
                //    ////
                //    DataTable dt_Transaction_KeKhaiThue = TUtils.DataTableCmUtils.ToDataTable<Transaction_KeKhaiThue>(objRQ_Mst_NNT.Lst_Transaction_KeKhaiThue, "Transaction_KeKhaiThue");
                //    dsData.Tables.Add(dt_Transaction_KeKhaiThue);
                //}
                #endregion

                #region // Invoice_Invoice_Deleted:
                mdsResult = Invoice_Invoice_Deleted_New20190715(
                    objRQ_Invoice_Invoice.Tid // strTid
                    , objRQ_Invoice_Invoice.GwUserCode // strGwUserCode
                    , objRQ_Invoice_Invoice.GwPassword // strGwPassword
                    , objRQ_Invoice_Invoice.WAUserCode // strUserCode
                    , objRQ_Invoice_Invoice.WAUserPassword // strUserPassword
                    , ref alParamsCoupleError // alParamsCoupleError
                                              ////
                    , objRQ_Invoice_Invoice.Invoice_Invoice.InvoiceCode // objInvoiceCode
                    , objRQ_Invoice_Invoice.Invoice_Invoice.InvoicePDFFilePath // objInvoicePDFFilePath
                    , objRQ_Invoice_Invoice.Invoice_Invoice.AttachedDelFilePath // objAttachedDelFilePath
                    , objRQ_Invoice_Invoice.Invoice_Invoice.DeleteReason // objDeleteReason
                    , objRQ_Invoice_Invoice.Invoice_Invoice.Remark // objRemark
                    );
                #endregion

                // Return Good:
                return mdsResult;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsResult
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Write ReturnLog:
                //_cf.ProcessBizReturn(
                //	ref mdsResult // mdsFinal
                //	, strTid // strTid
                //	, strFunctionName // strFunctionName
                //	);
                #endregion
            }
        }

        public DataSet Invoice_Invoice_Deleted_New20190715(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            ////
            , object objInvoiceCode
            , object objInvoicePDFFilePath
            , object objAttachedDelFilePath
            , object objDeleteReason
            , object objRemark
            )
        {
            #region // Temp:
            DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            //int nTidSeq = 0;
            DateTime dtimeSys = DateTime.UtcNow;
            string strFunctionName = "Invoice_Invoice_Approved";
            string strErrorCodeDefault = TError.ErridnInventory.Invoice_Invoice_Approved;
            alParamsCoupleError.AddRange(new object[]{
                    "strFunctionName", strFunctionName
                    , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
			        ////
					, "objInvoiceCode", objInvoiceCode
                    , "objInvoicePDFFilePath", objInvoicePDFFilePath
                    , "objAttachedDelFilePath", objAttachedDelFilePath
                    , "objDeleteReason", objDeleteReason
                    , "objRemark", objRemark
                    });
            #endregion

            try
            {
                #region // Init:
                //_cf.db.LogUserId = _cf.sinf.strUserCode;
                _cf.db.BeginTransaction();

                // Write RequestLog:
                _cf.ProcessBizReq_OutSide(
                    strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    , alParamsCoupleError // alParamsCoupleError
                    );

                // Sys_User_CheckAuthentication:
                //Sys_User_CheckAuthentication(
                //    ref alParamsCoupleError
                //    , strWAUserCode
                //    , strWAUserPassword
                //    );

                // Check Access/Deny:
                Sys_Access_CheckDenyV30(
                    ref alParamsCoupleError
                    , strWAUserCode
                    , strFunctionName
                    );
                #endregion

                #region // Invoice_Invoice_DeletedX:
                //DataSet dsGetData = null;
                {
                    Invoice_Invoice_DeletedX_New20190715(
                        strTid // strTid
                        , strGwUserCode // strGwUserCode
                        , strGwPassword // strGwPassword
                        , strWAUserCode // strWAUserCode
                        , strWAUserPassword // strWAUserPassword
                        , ref alParamsCoupleError // alParamsCoupleError
                        , dtimeSys // dtimeSys
                                   ////
                        , objInvoiceCode // objInvoiceCode
                        , objInvoicePDFFilePath // objInvoicePDFFilePath
                        , objAttachedDelFilePath // objAttachedDelFilePath
                        , objDeleteReason // objDeleteReason
                        , objRemark // objRemark
                        );
                }
                ////
                //CmUtils.DataUtils.MoveDataTable(ref mdsFinal, ref dsGetData);
                #endregion

                // Return Good:
                TDALUtils.DBUtils.CommitSafety(_cf.db);
                mdsFinal.AcceptChanges();
                return mdsFinal;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Rollback:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);

                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsFinal
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Rollback and Release resources:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);
                TDALUtils.DBUtils.ReleaseAllSemaphore(_cf.db_Sys, true);

                // Write ReturnLog:
                _cf.ProcessBizReturn_OutSide(
                    ref mdsFinal // mdsFinal
                    , strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    );
                #endregion
            }
        }

        private void Invoice_Invoice_DeletedX_New20190715(
           string strTid
           , string strGwUserCode
           , string strGwPassword
           , string strWAUserCode
           , string strWAUserPassword
           , ref ArrayList alParamsCoupleError
           , DateTime dtimeSys
            //// 
            , object objInvoiceCode
            , object objInvoicePDFFilePath
            , object objAttachedDelFilePath
            , object objDeleteReason
            , object objRemark
          )
        {
            #region // Temp:
            //int nTidSeq = 0;
            //bool bMyDebugSql = false;
            string strFunctionName = "Invoice_Invoice_DeletedX";
            //string strErrorCodeDefault = TError.ErrHTCNM.Invoice_Invoice_DeletedX;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
                , "objInvoiceCode", objInvoiceCode
                , "objInvoicePDFFilePath", objInvoicePDFFilePath
                , "objAttachedDelFilePath", objAttachedDelFilePath
                , "objDeleteReason", objDeleteReason
                , "objRemark", objRemark
                });
            //ArrayList alPCErrEx = new ArrayList();
            ////
            Hashtable htParamsSql = new Hashtable();
            #endregion

            #region // Convert Input:
            // drAbilityOfUser:
            DataRow drAbilityOfUser = Sys_User_GetAbilityViewOfUser(strWAUserCode);
            zzzzClauseSelect_Mst_NNT_ViewAbility_Get(
                drAbilityOfUser // drAbilityOfUser
                , ref alParamsCoupleError // alParamsCoupleError
                );

            #endregion

            #region // Refine and Check Input Invoice_Invoice:
            ////
            string strInvoiceCode = TUtils.CUtils.StdParam(objInvoiceCode);
            string strInvoicePDFFilePath = string.Format("{0}", objInvoicePDFFilePath).Trim();
            string strAttachedDelFilePath = string.Format("{0}", objAttachedDelFilePath).Trim();
            string strDeleteReason = string.Format("{0}", objDeleteReason).Trim();
            string strRemark = string.Format("{0}", objRemark).Trim();
            ////
            DataTable dtDB_Invoice_Invoice = null;
            string strFlagPushOutSite = "";
            string strOrgID = "";
            {
                Invoice_Invoice_CheckDB(
                    ref alParamsCoupleError // alParamsCoupleError
                    , strInvoiceCode // objInvoiceCode
                    , TConst.Flag.Yes // strFlagExistToCheck
                    , TConst.InvoiceStatus.Issued // strInvoiceStatusListToCheck
                    , out dtDB_Invoice_Invoice // dtDB_Invoice_Invoice
                    );

                ////
                string strMST = TUtils.CUtils.StdParam(dtDB_Invoice_Invoice.Rows[0]["MST"]);
                strFlagPushOutSite = TUtils.CUtils.StdParam(dtDB_Invoice_Invoice.Rows[0]["FlagPushOutSite"]);

                alParamsCoupleError.AddRange(new object[]{
                    "strFlagPushOutSite", strFlagPushOutSite
                    });
                if (!CmUtils.StringUtils.StringEqualIgnoreCase(drAbilityOfUser["MST"], strMST)
                    && !CmUtils.StringUtils.StringEqualIgnoreCase(drAbilityOfUser["FlagBG"], TConst.Flag.Active))
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.DB.NNT.MST", drAbilityOfUser["MST"]
                        , "Check.strMST", strMST
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Invoice_Invoice_Deleted_InvalidMST
                        , null
                        , alParamsCoupleError.ToArray()
                        );

                }
                ////
                DataTable dtDB_Mst_NNT = null;

                Mst_NNT_CheckDB(
                    ref alParamsCoupleError // alParamsCoupleError
                    , strMST // strMST 
                    , TConst.Flag.Yes // strFlagExistToCheck
                    , TConst.Flag.Active // strFlagActiveListToCheck
                    , "" // strTCTStatusListToCheck
                    , out dtDB_Mst_NNT // dtDB_Mst_Organ
                    );
                strOrgID = TUtils.CUtils.StdParam(dtDB_Mst_NNT.Rows[0]["OrgID"]);
                ////
            }
            #endregion

            #region // SaveTemp Invoice_Invoice:
            {
                ////
                TUtils.CUtils.MyBuildDBDT_Common(
                    _cf.db
                    , "#input_Invoice_Invoice"
                    , TConst.BizMix.Default_DBColType // strDefaultType
                    , new object[]{
                        "InvoiceCode"
                        , "InvoicePDFFilePath"
                        , "Remark"
                        , "AttachedDelFilePath"
                        , "DeleteReason"
                        , "InvoiceStatus"
                        , "DeleteDTimeUTC"
                        , "DeleteBy"
                        , "LogLUDTimeUTC"
                        , "LogLUBy"
                        }
                    , new object[]{
                            new object[]{
                                strInvoiceCode, // InvoiceCode
                                strInvoicePDFFilePath, // InvoicePDFFilePath
								strRemark, // Remark
                                strAttachedDelFilePath, // AttachedDelFilePath
								strDeleteReason, // DeleteReason
								TConst.InvoiceStatus.Deleted, // InvoiceStatus
                                dtimeSys.ToString("yyyy-MM-dd HH:mm:ss"), // DeleteDTimeUTC
                                strWAUserCode, // DeleteBy
                                dtimeSys.ToString("yyyy-MM-dd HH:mm:ss"), // LogLUDTimeUTC
                                strWAUserCode, // LogLUBy
								}
                        }
                    );

            }
            #endregion

            #region // SaveDB:
            {
                ////
                string zzB_Update_Invoice_Invoice_ClauseSet_zzE = @"
						t.LogLUDTimeUTC = f.LogLUDTimeUTC
						, t.LogLUBy = f.LogLUBy
						, t.DeleteDTimeUTC = f.DeleteDTimeUTC
						, t.DeleteBy = f.DeleteBy
						, t.InvoiceStatus = f.InvoiceStatus						
                        , t.InvoicePDFFilePath = f.InvoicePDFFilePath
						, t.Remark = f.Remark						
                        , t.AttachedDelFilePath = f.AttachedDelFilePath
						, t.DeleteReason = f.DeleteReason
						";
                ////
                string zzB_Update_Invoice_InvoiceDtl_ClauseSet_zzE = @"
						t.LogLUDTimeUTC = f.LogLUDTimeUTC
						, t.LogLUBy = f.LogLUBy
						, t.InvoiceDtlStatus = f.InvoiceStatus
						";
                //          ////
                //          string zzB_Update_Invoice_InvoicePrd_ClauseSet_zzE = @"
                //t.LogLUDTimeUTC = f.LogLUDTimeUTC
                //, t.LogLUBy = f.LogLUBy
                //, t.InvoicePrdStatus = f.InvoiceStatus
                //";
                ////
                string zzB_Update_Invoice_Invoice_zzE = CmUtils.StringUtils.Replace(@"
						---- Invoice_Invoice:
						update t
						set 
							zzB_Update_Invoice_Invoice_ClauseSet_zzE
						from Invoice_Invoice t --//[mylock]
							inner join #input_Invoice_Invoice f --//[mylock]
								on t.InvoiceCode = f.InvoiceCode
						where (1=1)
						;
					"
                    , "zzB_Update_Invoice_Invoice_ClauseSet_zzE", zzB_Update_Invoice_Invoice_ClauseSet_zzE
                    );
                ////
                string zzB_Update_Invoice_InvoiceDtl_zzE = CmUtils.StringUtils.Replace(@"
                        ---- #tbl_Invoice_InvoiceDtl_Temp: 
                        select 
                            t.InvoiceCode
                            , t.Idx
                            , f.InvoiceStatus
                            , f.LogLUDTimeUTC
                            , f.LogLUBy
                        into #tbl_Invoice_InvoiceDtl_Temp
						from Invoice_InvoiceDtl t --//[mylock]
							inner join #input_Invoice_Invoice f --//[mylock]
								on t.InvoiceCode = f.InvoiceCode
						where (1=1)
						;

                        ---- Update:
						update t
						set 
							zzB_Update_Invoice_InvoiceDtl_ClauseSet_zzE
						from Invoice_InvoiceDtl t --//[mylock]
							inner join #tbl_Invoice_InvoiceDtl_Temp f --//[mylock]
								on t.InvoiceCode = f.InvoiceCode
								    and t.Idx = f.Idx
						where (1=1)
						;
					"
                    , "zzB_Update_Invoice_InvoiceDtl_ClauseSet_zzE", zzB_Update_Invoice_InvoiceDtl_ClauseSet_zzE
                    );
                //           ////
                //           string zzB_Update_Invoice_InvoicePrd_zzE = CmUtils.StringUtils.Replace(@"
                //                   ---- #tbl_Invoice_InvoicePrd_Temp: 
                //                   select 
                //                       t.InvoiceCode
                //                       , t.ProductID
                //                       , t.SpecCode
                //                       , f.InvoiceStatus
                //                       , f.LogLUDTimeUTC
                //                       , f.LogLUBy
                //                   into #tbl_Invoice_InvoicePrd_Temp
                //	from Invoice_InvoicePrd t --//[mylock]
                //		inner join #input_Invoice_Invoice f --//[mylock]
                //			on t.InvoiceCode = f.InvoiceCode
                //	where (1=1)
                //	;

                //                   ---- Update:
                //	update t
                //	set 
                //		zzB_Update_Invoice_InvoicePrd_ClauseSet_zzE
                //	from Invoice_InvoicePrd t --//[mylock]
                //		inner join #tbl_Invoice_InvoicePrd_Temp f --//[mylock]
                //			on t.InvoiceCode = f.InvoiceCode
                //			    and t.ProductID = f.ProductID
                //			    and t.SpecCode = f.SpecCode
                //	where (1=1)
                //	;
                //"
                //               , "zzB_Update_Invoice_InvoicePrd_ClauseSet_zzE", zzB_Update_Invoice_InvoicePrd_ClauseSet_zzE
                //               );
                ////
                string strSql_SaveOnDB = CmUtils.StringUtils.Replace(@"
						----
						zzB_Update_Invoice_Invoice_zzE
                        ----
						zzB_Update_Invoice_InvoiceDtl_zzE
                        ----
					"
                    , "zzB_Update_Invoice_Invoice_zzE", zzB_Update_Invoice_Invoice_zzE
                    , "zzB_Update_Invoice_InvoiceDtl_zzE", zzB_Update_Invoice_InvoiceDtl_zzE
                    );

                DataSet dsDB_Check = _cf.db.ExecQuery(
                    strSql_SaveOnDB
                    );
            }
            #endregion

            #region // Call 3A nếu 3A đã lấy dữ liệu:
            if(!string.IsNullOrEmpty(strFlagPushOutSite))
            {
                #region // OSTVAN_3A_Invoice_Invoice_CallDelete:
                OSTVAN_3A_Invoice_Invoice_CallDelete(
                    strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // strWAUserCode
                    , strWAUserPassword // strWAUserPassword
                    , nNetworkID.ToString() // nNetworkID
                    , strOrgID // strOrgID
                    , ref alParamsCoupleError // alParamsCoupleError
                    , dtimeSys // dtimeSys
                    , strInvoiceCode // strInvoiceCode
                    );
                #endregion
            }
            #endregion

            #region // Call WS All Network phục vụ hóa đơn đầu vào:
            string strCustomerMST = TUtils.CUtils.StdParam(dtDB_Invoice_Invoice.Rows[0]["CustomerMST"]);
            {
                #region // Get Data:
                DataSet dataSet_GetInvoice = new DataSet();
                {
                    string strSql_SaveOnDB = CmUtils.StringUtils.Replace(@"
                            ---- Invoice_Invoice: 
                            select 
                                t.*
							from Invoice_Invoice t --//[mylock]
							    inner join #input_Invoice_Invoice f --//[mylock]
								    on t.InvoiceCode = f.InvoiceCode
							where (1=1)
							;
					    "
                        );

                    DataSet dsDB_Check = _cf.db.ExecQuery(
                        strSql_SaveOnDB
                        );
                    ////
                    DataTable dtData_Invoice_Invoice = new DataTable("Invoice_InvoiceInput");
                    dtData_Invoice_Invoice = dsDB_Check.Tables[0].Copy();
                    dataSet_GetInvoice.Tables.Add(dtData_Invoice_Invoice);
                    dataSet_GetInvoice.Tables[0].TableName = "Invoice_InvoiceInput";
                    ////

                }
                #endregion

                #region // OS_TVAN_Invoice_InvoiceInput_CallDeleted:
                {
                    OS_TVAN_Invoice_InvoiceInput_CallDeleted(
                        strTid // strTid
                        , strGwUserCode // strGwUserCode
                        , strGwPassword // strGwPassword
                        , strWAUserCode // strWAUserCode
                        , strWAUserPassword // strWAUserPassword
                        , nNetworkID.ToString() // nNetworkID
                        , ref alParamsCoupleError // alParamsCoupleError
                                                  ////
                        , dtimeSys // dtimeSys
                        , strCustomerMST // strCustomerMST
                        , dataSet_GetInvoice // dataSet
                        );
                }
                #endregion
            }
            #endregion

            #region //// Clear For Debug:
            {
                ////
                string strSqlClearForDebug = CmUtils.StringUtils.Replace(@"
						---- Clear for Debug:
						drop table #input_Invoice_Invoice;
						drop table #tbl_Invoice_InvoiceDtl_Temp;
					");

                _cf.db.ExecQuery(
                    strSqlClearForDebug
                    );
                ////
            }
            #endregion
        }

        private void Invoice_Invoice_DeletedX_New20191112(
           string strTid
           , string strGwUserCode
           , string strGwPassword
           , string strWAUserCode
           , string strWAUserPassword
           , ref ArrayList alParamsCoupleError
           , DateTime dtimeSys
            //// 
            , object objInvoiceCode
            , object objInvoicePDFFilePath
            //, object objAttachedDelFilePath
            //, object objDeleteReason
            , object objRemark
          )
        {
            #region // Temp:
            //int nTidSeq = 0;
            //bool bMyDebugSql = false;
            string strFunctionName = "Invoice_Invoice_DeletedX";
            //string strErrorCodeDefault = TError.ErrHTCNM.Invoice_Invoice_DeletedX;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
                , "objInvoiceCode", objInvoiceCode
                , "objInvoicePDFFilePath", objInvoicePDFFilePath
                //, "objAttachedDelFilePath", objAttachedDelFilePath
                //, "objDeleteReason", objDeleteReason
                , "objRemark", objRemark
                });
            //ArrayList alPCErrEx = new ArrayList();
            ////
            Hashtable htParamsSql = new Hashtable();
            #endregion

            #region // Convert Input:
            // drAbilityOfUser:
            DataRow drAbilityOfUser = Sys_User_GetAbilityViewOfUser(strWAUserCode);
            zzzzClauseSelect_Mst_NNT_ViewAbility_Get(
                drAbilityOfUser // drAbilityOfUser
                , ref alParamsCoupleError // alParamsCoupleError
                );

            #endregion

            #region // Refine and Check Input Invoice_Invoice:
            ////
            string strInvoiceCode = TUtils.CUtils.StdParam(objInvoiceCode);
            string strInvoicePDFFilePath = string.Format("{0}", objInvoicePDFFilePath).Trim();
            //string strAttachedDelFilePath = string.Format("{0}", objAttachedDelFilePath).Trim();
            //string strDeleteReason = string.Format("{0}", objDeleteReason).Trim();
            string strRemark = string.Format("{0}", objRemark).Trim();
            ////
            DataTable dtDB_Invoice_Invoice = null;
            string strFlagPushOutSite = "";
            string strOrgID = "";
            {
                Invoice_Invoice_CheckDB(
                    ref alParamsCoupleError // alParamsCoupleError
                    , strInvoiceCode // objInvoiceCode
                    , TConst.Flag.Yes // strFlagExistToCheck
                    , TConst.InvoiceStatus.Issued // strInvoiceStatusListToCheck
                    , out dtDB_Invoice_Invoice // dtDB_Invoice_Invoice
                    );

                ////
                string strMST = TUtils.CUtils.StdParam(dtDB_Invoice_Invoice.Rows[0]["MST"]);
                strFlagPushOutSite = TUtils.CUtils.StdParam(dtDB_Invoice_Invoice.Rows[0]["FlagPushOutSite"]);

                alParamsCoupleError.AddRange(new object[]{
                    "strFlagPushOutSite", strFlagPushOutSite
                    });
                if (!CmUtils.StringUtils.StringEqualIgnoreCase(drAbilityOfUser["MST"], strMST)
                    && !CmUtils.StringUtils.StringEqualIgnoreCase(drAbilityOfUser["FlagBG"], TConst.Flag.Active))
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.DB.NNT.MST", drAbilityOfUser["MST"]
                        , "Check.strMST", strMST
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Invoice_Invoice_Deleted_InvalidMST
                        , null
                        , alParamsCoupleError.ToArray()
                        );

                }
                ////
                DataTable dtDB_Mst_NNT = null;

                Mst_NNT_CheckDB(
                    ref alParamsCoupleError // alParamsCoupleError
                    , strMST // strMST 
                    , TConst.Flag.Yes // strFlagExistToCheck
                    , TConst.Flag.Active // strFlagActiveListToCheck
                    , "" // strTCTStatusListToCheck
                    , out dtDB_Mst_NNT // dtDB_Mst_Organ
                    );
                strOrgID = TUtils.CUtils.StdParam(dtDB_Mst_NNT.Rows[0]["OrgID"]);
                ////
            }
            #endregion

            #region // SaveTemp Invoice_Invoice:
            {
                ////
                TUtils.CUtils.MyBuildDBDT_Common(
                    _cf.db
                    , "#input_Invoice_Invoice"
                    , TConst.BizMix.Default_DBColType // strDefaultType
                    , new object[]{
                        "InvoiceCode"
                        , "InvoicePDFFilePath"
                        , "Remark"
                        //, "AttachedDelFilePath"
                        //, "DeleteReason"
                        , "InvoiceStatus"
                        , "DeleteDTimeUTC"
                        , "DeleteBy"
                        , "LogLUDTimeUTC"
                        , "LogLUBy"
                        }
                    , new object[]{
                            new object[]{
                                strInvoiceCode, // InvoiceCode
                                strInvoicePDFFilePath, // InvoicePDFFilePath
								strRemark, // Remark
                                //strAttachedDelFilePath, // AttachedDelFilePath
								//strDeleteReason, // DeleteReason
								TConst.InvoiceStatus.Deleted, // InvoiceStatus
                                dtimeSys.ToString("yyyy-MM-dd HH:mm:ss"), // DeleteDTimeUTC
                                strWAUserCode, // DeleteBy
                                dtimeSys.ToString("yyyy-MM-dd HH:mm:ss"), // LogLUDTimeUTC
                                strWAUserCode, // LogLUBy
								}
                        }
                    );

            }
            #endregion

            #region // SaveDB:
            {
                ////
                string zzB_Update_Invoice_Invoice_ClauseSet_zzE = @"
						t.LogLUDTimeUTC = f.LogLUDTimeUTC
						, t.LogLUBy = f.LogLUBy
						, t.DeleteDTimeUTC = f.DeleteDTimeUTC
						, t.DeleteBy = f.DeleteBy
						, t.InvoiceStatus = f.InvoiceStatus						
                        , t.InvoicePDFFilePath = f.InvoicePDFFilePath
						, t.Remark = f.Remark						
                        --, t.AttachedDelFilePath = f.AttachedDelFilePath
						--, t.DeleteReason = f.DeleteReason
						";
                ////
                string zzB_Update_Invoice_InvoiceDtl_ClauseSet_zzE = @"
						t.LogLUDTimeUTC = f.LogLUDTimeUTC
						, t.LogLUBy = f.LogLUBy
						, t.InvoiceDtlStatus = f.InvoiceStatus
						";
                //          ////
                //          string zzB_Update_Invoice_InvoicePrd_ClauseSet_zzE = @"
                //t.LogLUDTimeUTC = f.LogLUDTimeUTC
                //, t.LogLUBy = f.LogLUBy
                //, t.InvoicePrdStatus = f.InvoiceStatus
                //";
                ////
                string zzB_Update_Invoice_Invoice_zzE = CmUtils.StringUtils.Replace(@"
						---- Invoice_Invoice:
						update t
						set 
							zzB_Update_Invoice_Invoice_ClauseSet_zzE
						from Invoice_Invoice t --//[mylock]
							inner join #input_Invoice_Invoice f --//[mylock]
								on t.InvoiceCode = f.InvoiceCode
						where (1=1)
						;
					"
                    , "zzB_Update_Invoice_Invoice_ClauseSet_zzE", zzB_Update_Invoice_Invoice_ClauseSet_zzE
                    );
                ////
                string zzB_Update_Invoice_InvoiceDtl_zzE = CmUtils.StringUtils.Replace(@"
                        ---- #tbl_Invoice_InvoiceDtl_Temp: 
                        select 
                            t.InvoiceCode
                            , t.Idx
                            , f.InvoiceStatus
                            , f.LogLUDTimeUTC
                            , f.LogLUBy
                        into #tbl_Invoice_InvoiceDtl_Temp
						from Invoice_InvoiceDtl t --//[mylock]
							inner join #input_Invoice_Invoice f --//[mylock]
								on t.InvoiceCode = f.InvoiceCode
						where (1=1)
						;

                        ---- Update:
						update t
						set 
							zzB_Update_Invoice_InvoiceDtl_ClauseSet_zzE
						from Invoice_InvoiceDtl t --//[mylock]
							inner join #tbl_Invoice_InvoiceDtl_Temp f --//[mylock]
								on t.InvoiceCode = f.InvoiceCode
								    and t.Idx = f.Idx
						where (1=1)
						;
					"
                    , "zzB_Update_Invoice_InvoiceDtl_ClauseSet_zzE", zzB_Update_Invoice_InvoiceDtl_ClauseSet_zzE
                    );
                //           ////
                //           string zzB_Update_Invoice_InvoicePrd_zzE = CmUtils.StringUtils.Replace(@"
                //                   ---- #tbl_Invoice_InvoicePrd_Temp: 
                //                   select 
                //                       t.InvoiceCode
                //                       , t.ProductID
                //                       , t.SpecCode
                //                       , f.InvoiceStatus
                //                       , f.LogLUDTimeUTC
                //                       , f.LogLUBy
                //                   into #tbl_Invoice_InvoicePrd_Temp
                //	from Invoice_InvoicePrd t --//[mylock]
                //		inner join #input_Invoice_Invoice f --//[mylock]
                //			on t.InvoiceCode = f.InvoiceCode
                //	where (1=1)
                //	;

                //                   ---- Update:
                //	update t
                //	set 
                //		zzB_Update_Invoice_InvoicePrd_ClauseSet_zzE
                //	from Invoice_InvoicePrd t --//[mylock]
                //		inner join #tbl_Invoice_InvoicePrd_Temp f --//[mylock]
                //			on t.InvoiceCode = f.InvoiceCode
                //			    and t.ProductID = f.ProductID
                //			    and t.SpecCode = f.SpecCode
                //	where (1=1)
                //	;
                //"
                //               , "zzB_Update_Invoice_InvoicePrd_ClauseSet_zzE", zzB_Update_Invoice_InvoicePrd_ClauseSet_zzE
                //               );
                ////
                string strSql_SaveOnDB = CmUtils.StringUtils.Replace(@"
						----
						zzB_Update_Invoice_Invoice_zzE
                        ----
						zzB_Update_Invoice_InvoiceDtl_zzE
                        ----
					"
                    , "zzB_Update_Invoice_Invoice_zzE", zzB_Update_Invoice_Invoice_zzE
                    , "zzB_Update_Invoice_InvoiceDtl_zzE", zzB_Update_Invoice_InvoiceDtl_zzE
                    );

                DataSet dsDB_Check = _cf.db.ExecQuery(
                    strSql_SaveOnDB
                    );
            }
            #endregion

            #region // Call 3A nếu 3A đã lấy dữ liệu:
            if (!string.IsNullOrEmpty(strFlagPushOutSite))
            {
                #region // OSTVAN_3A_Invoice_Invoice_CallDelete:
                OSTVAN_3A_Invoice_Invoice_CallDelete(
                    strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // strWAUserCode
                    , strWAUserPassword // strWAUserPassword
                    , nNetworkID.ToString() // nNetworkID
                    , strOrgID // strOrgID
                    , ref alParamsCoupleError // alParamsCoupleError
                    , dtimeSys // dtimeSys
                    , strInvoiceCode // strInvoiceCode
                    );
                #endregion
            }
            #endregion

            #region // Call WS All Network phục vụ hóa đơn đầu vào:
            string strCustomerMST = TUtils.CUtils.StdParam(dtDB_Invoice_Invoice.Rows[0]["CustomerMST"]);
            {
                #region // Get Data:
                DataSet dataSet_GetInvoice = new DataSet();
                {
                    string strSql_SaveOnDB = CmUtils.StringUtils.Replace(@"
                            ---- Invoice_Invoice: 
                            select 
                                t.*
							from Invoice_Invoice t --//[mylock]
							    inner join #input_Invoice_Invoice f --//[mylock]
								    on t.InvoiceCode = f.InvoiceCode
							where (1=1)
							;
					    "
                        );

                    DataSet dsDB_Check = _cf.db.ExecQuery(
                        strSql_SaveOnDB
                        );
                    ////
                    DataTable dtData_Invoice_Invoice = new DataTable("Invoice_InvoiceInput");
                    dtData_Invoice_Invoice = dsDB_Check.Tables[0].Copy();
                    dataSet_GetInvoice.Tables.Add(dtData_Invoice_Invoice);
                    dataSet_GetInvoice.Tables[0].TableName = "Invoice_InvoiceInput";
                    ////

                }
                #endregion

                #region // OS_TVAN_Invoice_InvoiceInput_CallDeleted:
                {
                    OS_TVAN_Invoice_InvoiceInput_CallDeleted(
                        strTid // strTid
                        , strGwUserCode // strGwUserCode
                        , strGwPassword // strGwPassword
                        , strWAUserCode // strWAUserCode
                        , strWAUserPassword // strWAUserPassword
                        , nNetworkID.ToString() // nNetworkID
                        , ref alParamsCoupleError // alParamsCoupleError
                                                  ////
                        , dtimeSys // dtimeSys
                        , strCustomerMST // strCustomerMST
                        , dataSet_GetInvoice // dataSet
                        );
                }
                #endregion
            }
            #endregion

            #region //// Clear For Debug:
            {
                ////
                string strSqlClearForDebug = CmUtils.StringUtils.Replace(@"
						---- Clear for Debug:
						drop table #input_Invoice_Invoice;
						drop table #tbl_Invoice_InvoiceDtl_Temp;
					");

                _cf.db.ExecQuery(
                    strSqlClearForDebug
                    );
                ////
            }
            #endregion
        }

        public DataSet Invoice_Invoice_Upd(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            ////
            , object objInvoiceCode
            , object objAttachedDelFilePath
            , object objDeleteReason
            ////
            , object objFt_Cols_Upd
            )
        {
            #region // Temp:
            DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            //int nTidSeq = 0;
            DateTime dtimeSys = DateTime.UtcNow;
            string strFunctionName = "Invoice_Invoice_Upd";
            string strErrorCodeDefault = TError.ErridnInventory.Invoice_Invoice_Upd;
            alParamsCoupleError.AddRange(new object[]{
                    "strFunctionName", strFunctionName
                    , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
					////
					, "objInvoiceCode", objInvoiceCode
                    , "objProvinceCode", objAttachedDelFilePath
                    , "objDLName", objDeleteReason
					////
					, "objFt_Cols_Upd", objFt_Cols_Upd
                    });
            #endregion

            try
            {
                #region // Init:
                //_cf.db.LogUserId = _cf.sinf.strUserCode;
                _cf.db.BeginTransaction();

                // Write RequestLog:
                _cf.ProcessBizReq_OutSide(
                    strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    , alParamsCoupleError // alParamsCoupleError
                    );

                // Sys_User_CheckAuthentication:
                //Sys_User_CheckAuthentication(
                //    ref alParamsCoupleError
                //    , strWAUserCode
                //    , strWAUserPassword
                //    );

                // Check Access/Deny:
                Sys_Access_CheckDenyV30(
                    ref alParamsCoupleError
                    , strWAUserCode
                    , strFunctionName
                    );
                #endregion

                #region // Refine and Check Input:
                ////
                string strFt_Cols_Upd = TUtils.CUtils.StdParam(objFt_Cols_Upd);
                strFt_Cols_Upd = (strFt_Cols_Upd == null ? "" : strFt_Cols_Upd);
                ////
                string strInvoiceCode = TUtils.CUtils.StdParam(objInvoiceCode);
                string strAttachedDelFilePath = string.Format("{0}", objAttachedDelFilePath).Trim();
                string strDeleteReason = string.Format("{0}", objDeleteReason).Trim();
                ////
                bool bUpd_AttachedDelFilePath = strFt_Cols_Upd.Contains("Invoice_Invoice.AttachedDelFilePath".ToUpper());
                bool bUpd_DeleteReason = strFt_Cols_Upd.Contains("Invoice_Invoice.DeleteReason".ToUpper());

                ////
                DataTable dtDB_Invoice_Invoice = null;
                {
                    ////
                    Invoice_Invoice_CheckDB(
                         ref alParamsCoupleError // alParamsCoupleError
                         , strInvoiceCode // objInvoiceCode 
                         , TConst.Flag.Yes // strFlagExistToCheck
                         , "" // strFlagActiveListToCheck
                         , out dtDB_Invoice_Invoice // dtDB_Invoice_Invoice
                        );
                    ////
                }
                #endregion

                #region // Save Invoice_Invoice:
                {
                    // Init:
                    ArrayList alColumnEffective = new ArrayList();
                    string strFN = "";
                    DataRow drDB = dtDB_Invoice_Invoice.Rows[0];
                    if (bUpd_AttachedDelFilePath) { strFN = "AttachedDelFilePath"; drDB[strFN] = strAttachedDelFilePath; alColumnEffective.Add(strFN); }
                    if (bUpd_DeleteReason) { strFN = "DeleteReason"; drDB[strFN] = strDeleteReason; alColumnEffective.Add(strFN); }
                    strFN = "LogLUDTimeUTC"; drDB[strFN] = dtimeSys.ToString("yyyy-MM-dd HH:mm:ss"); alColumnEffective.Add(strFN);
                    strFN = "LogLUBy"; drDB[strFN] = strWAUserCode; alColumnEffective.Add(strFN);

                    // Save:
                    _cf.db.SaveData(
                        "Invoice_Invoice"
                        , dtDB_Invoice_Invoice
                        , alColumnEffective.ToArray()
                        );
                }
                #endregion

                // Return Good:
                TDALUtils.DBUtils.CommitSafety(_cf.db);
                mdsFinal.AcceptChanges();
                return mdsFinal;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Rollback:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);

                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsFinal
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Rollback and Release resources:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);
                TDALUtils.DBUtils.ReleaseAllSemaphore(_cf.db_Sys, true);

                // Write ReturnLog:
                _cf.ProcessBizReturn_OutSide(
                    ref mdsFinal // mdsFinal
                    , strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    );
                #endregion
            }
        }

        public DataSet WAS_Invoice_Invoice_Upd(
            ref ArrayList alParamsCoupleError
            , RQ_Invoice_Invoice objRQ_Invoice_Invoice
            ////
            , out RT_Invoice_Invoice objRT_Invoice_Invoice
            )
        {
            #region // Temp:
            string strTid = objRQ_Invoice_Invoice.Tid;
            objRT_Invoice_Invoice = new RT_Invoice_Invoice();
            DataSet mdsResult = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            DateTime dtimeSys = DateTime.UtcNow;
            //DataSet mdsExec = null;
            //DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(objRQ_Invoice_Invoice.Tid);
            //int nTidSeq = 0;
            //bool bNeedTransaction = true;
            string strFunctionName = "WAS_Invoice_Invoice_Upd";
            string strErrorCodeDefault = TError.ErridnInventory.WAS_Invoice_Invoice_Upd;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
                , "Invoice_Invoice", TJson.JsonConvert.SerializeObject(objRQ_Invoice_Invoice.Invoice_Invoice)
				////
				});
            #endregion

            try
            {
                #region // Init:
                #endregion

                #region // Refine and Check Input:
                //List<Invoice_Invoice> lst_Invoice_Invoice = new List<Invoice_Invoice>();
                //List<Invoice_InvoiceInGroup> lst_Invoice_InvoiceInGroup = new List<Invoice_InvoiceInGroup>();
                #endregion

                #region // Invoice_Invoice_Update:
                mdsResult = Invoice_Invoice_Upd(
                    objRQ_Invoice_Invoice.Tid // strTid
                    , objRQ_Invoice_Invoice.GwUserCode // strGwUserCode
                    , objRQ_Invoice_Invoice.GwPassword // strGwPassword
                    , objRQ_Invoice_Invoice.WAUserCode // strUserCode
                    , objRQ_Invoice_Invoice.WAUserPassword // strUserPassword
                    , ref alParamsCoupleError // alParamsCoupleError
                                              ////
                    , objRQ_Invoice_Invoice.Invoice_Invoice.InvoiceCode // objDLCode
                    , objRQ_Invoice_Invoice.Invoice_Invoice.AttachedDelFilePath // objProvinceCode
                    , objRQ_Invoice_Invoice.Invoice_Invoice.DeleteReason // objDLName
                    ////
                    , objRQ_Invoice_Invoice.Ft_Cols_Upd// objFt_Cols_Upd
                    );
                #endregion

                // Return Good:
                return mdsResult;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsResult
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Write ReturnLog:
                //_cf.ProcessBizReturn(
                //	ref mdsResult // mdsFinal
                //	, strTid // strTid
                //	, strFunctionName // strFunctionName
                //	);
                #endregion
            }
        }

        private void Invoice_Invoice_Upd_AdjX_New20190802(
           string strTid
           , string strGwUserCode
           , string strGwPassword
           , string strWAUserCode
           , string strWAUserPassword
           , ref ArrayList alParamsCoupleError
           , DateTime dtimeSys
            //// 
            , object objInvoiceCode
            , object objAttachedDelFilePath
            , object objDeleteReason
          )
        {
            #region // Temp:
            //int nTidSeq = 0;
            //bool bMyDebugSql = false;
            string strFunctionName = "Invoice_Invoice_Upd_AdjX";
            //string strErrorCodeDefault = TError.ErrHTCNM.Invoice_Invoice_DeletedX;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
                , "objInvoiceCode", objInvoiceCode
                , "objAttachedDelFilePath", objAttachedDelFilePath
                , "objDeleteReason", objDeleteReason
                });
            //ArrayList alPCErrEx = new ArrayList();
            ////
            Hashtable htParamsSql = new Hashtable();
            #endregion

            #region // Convert Input:
            // drAbilityOfUser:
            DataRow drAbilityOfUser = Sys_User_GetAbilityViewOfUser(strWAUserCode);
            zzzzClauseSelect_Mst_NNT_ViewAbility_Get(
                drAbilityOfUser // drAbilityOfUser
                , ref alParamsCoupleError // alParamsCoupleError
                );

            #endregion

            #region // Refine and Check Input Invoice_Invoice:
            ////
            string strInvoiceCode = TUtils.CUtils.StdParam(objInvoiceCode);
            string strAttachedDelFilePath = string.Format("{0}", objAttachedDelFilePath).Trim();
            string strDeleteReason = string.Format("{0}", objDeleteReason).Trim();
            ////
            DataTable dtDB_Invoice_Invoice = null;
            {
                Invoice_Invoice_CheckDB(
                    ref alParamsCoupleError // alParamsCoupleError
                    , strInvoiceCode // objInvoiceCode
                    , TConst.Flag.Yes // strFlagExistToCheck
                    , TConst.InvoiceStatus.Pending // strInvoiceStatusListToCheck
                    , out dtDB_Invoice_Invoice // dtDB_Invoice_Invoice
                    );

                ////
                string strMST = TUtils.CUtils.StdParam(dtDB_Invoice_Invoice.Rows[0]["MST"]);
                
                ////
                DataTable dtDB_Mst_NNT = null;

                Mst_NNT_CheckDB(
                    ref alParamsCoupleError // alParamsCoupleError
                    , strMST // strMST 
                    , TConst.Flag.Yes // strFlagExistToCheck
                    , TConst.Flag.Active // strFlagActiveListToCheck
                    , "" // strTCTStatusListToCheck
                    , out dtDB_Mst_NNT // dtDB_Mst_Organ
                    );
                ////
            }
            #endregion

            #region // SaveTemp Invoice_Invoice:
            {
                ////
                TUtils.CUtils.MyBuildDBDT_Common(
                    _cf.db
                    , "#input_Invoice_Invoice"
                    , TConst.BizMix.Default_DBColType // strDefaultType
                    , new object[]{
                        "InvoiceCode"
                        , "AttachedDelFilePath"
                        , "DeleteReason"
                        , "LogLUDTimeUTC"
                        , "LogLUBy"
                        }
                    , new object[]{
                            new object[]{
                                strInvoiceCode, // InvoiceCode
                                strAttachedDelFilePath, // AttachedDelFilePath
								strDeleteReason, // DeleteReason
                                dtimeSys.ToString("yyyy-MM-dd HH:mm:ss"), // LogLUDTimeUTC
                                strWAUserCode, // LogLUBy
								}
                        }
                    );

            }
            #endregion

            #region // SaveDB:
            {
                ////
                string zzB_Update_Invoice_Invoice_ClauseSet_zzE = @"
						t.LogLUDTimeUTC = f.LogLUDTimeUTC
						, t.LogLUBy = f.LogLUBy			
                        , t.AttachedDelFilePath = f.AttachedDelFilePath
						, t.DeleteReason = f.DeleteReason
						";
                
                ////
                string zzB_Update_Invoice_Invoice_zzE = CmUtils.StringUtils.Replace(@"
						---- Invoice_Invoice:
						update t
						set 
							zzB_Update_Invoice_Invoice_ClauseSet_zzE
						from Invoice_Invoice t --//[mylock]
							inner join #input_Invoice_Invoice f --//[mylock]
								on t.InvoiceCode = f.InvoiceCode
						where (1=1)
						;
					"
                    , "zzB_Update_Invoice_Invoice_ClauseSet_zzE", zzB_Update_Invoice_Invoice_ClauseSet_zzE
                    );
                
                
                string strSql_SaveOnDB = CmUtils.StringUtils.Replace(@"
						----
						zzB_Update_Invoice_Invoice_zzE
                        ----
					"
                    , "zzB_Update_Invoice_Invoice_zzE", zzB_Update_Invoice_Invoice_zzE
                    );

                DataSet dsDB_Check = _cf.db.ExecQuery(
                    strSql_SaveOnDB
                    );
            }
            #endregion

            #region //// Clear For Debug:
            {
                ////
                string strSqlClearForDebug = CmUtils.StringUtils.Replace(@"
						---- Clear for Debug:
						drop table #input_Invoice_Invoice;
					");

                _cf.db.ExecQuery(
                    strSqlClearForDebug
                    );
                ////
            }
            #endregion
        }

        private void Invoice_Invoice_Upd_AdjX_New20191112(
           string strTid
           , string strGwUserCode
           , string strGwPassword
           , string strWAUserCode
           , string strWAUserPassword
           , ref ArrayList alParamsCoupleError
           , DateTime dtimeSys
            //// 
            , object objInvoiceCode
            //, object objAttachedDelFilePath
            //, object objDeleteReason
          )
        {
            #region // Temp:
            //int nTidSeq = 0;
            //bool bMyDebugSql = false;
            string strFunctionName = "Invoice_Invoice_Upd_AdjX";
            //string strErrorCodeDefault = TError.ErrHTCNM.Invoice_Invoice_DeletedX;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
                , "objInvoiceCode", objInvoiceCode
                //, "objAttachedDelFilePath", objAttachedDelFilePath
                //, "objDeleteReason", objDeleteReason
                });
            //ArrayList alPCErrEx = new ArrayList();
            ////
            Hashtable htParamsSql = new Hashtable();
            #endregion

            #region // Convert Input:
            // drAbilityOfUser:
            DataRow drAbilityOfUser = Sys_User_GetAbilityViewOfUser(strWAUserCode);
            zzzzClauseSelect_Mst_NNT_ViewAbility_Get(
                drAbilityOfUser // drAbilityOfUser
                , ref alParamsCoupleError // alParamsCoupleError
                );

            #endregion

            #region // Refine and Check Input Invoice_Invoice:
            ////
            string strInvoiceCode = TUtils.CUtils.StdParam(objInvoiceCode);
            //string strAttachedDelFilePath = string.Format("{0}", objAttachedDelFilePath).Trim();
            //string strDeleteReason = string.Format("{0}", objDeleteReason).Trim();
            ////
            DataTable dtDB_Invoice_Invoice = null;
            {
                Invoice_Invoice_CheckDB(
                    ref alParamsCoupleError // alParamsCoupleError
                    , strInvoiceCode // objInvoiceCode
                    , TConst.Flag.Yes // strFlagExistToCheck
                    , TConst.InvoiceStatus.Pending // strInvoiceStatusListToCheck
                    , out dtDB_Invoice_Invoice // dtDB_Invoice_Invoice
                    );

                ////
                string strMST = TUtils.CUtils.StdParam(dtDB_Invoice_Invoice.Rows[0]["MST"]);

                ////
                DataTable dtDB_Mst_NNT = null;

                Mst_NNT_CheckDB(
                    ref alParamsCoupleError // alParamsCoupleError
                    , strMST // strMST 
                    , TConst.Flag.Yes // strFlagExistToCheck
                    , TConst.Flag.Active // strFlagActiveListToCheck
                    , "" // strTCTStatusListToCheck
                    , out dtDB_Mst_NNT // dtDB_Mst_Organ
                    );
                ////
            }
            #endregion

            #region // SaveTemp Invoice_Invoice:
            {
                ////
                TUtils.CUtils.MyBuildDBDT_Common(
                    _cf.db
                    , "#input_Invoice_Invoice"
                    , TConst.BizMix.Default_DBColType // strDefaultType
                    , new object[]{
                        "InvoiceCode"
                        //, "AttachedDelFilePath"
                        //, "DeleteReason"
                        , "LogLUDTimeUTC"
                        , "LogLUBy"
                        }
                    , new object[]{
                            new object[]{
                                strInvoiceCode, // InvoiceCode
        //                        strAttachedDelFilePath, // AttachedDelFilePath
								//strDeleteReason, // DeleteReason
                                dtimeSys.ToString("yyyy-MM-dd HH:mm:ss"), // LogLUDTimeUTC
                                strWAUserCode, // LogLUBy
								}
                        }
                    );

            }
            #endregion

            #region // SaveDB:
            {
                ////
                string zzB_Update_Invoice_Invoice_ClauseSet_zzE = @"
						t.LogLUDTimeUTC = f.LogLUDTimeUTC
						, t.LogLUBy = f.LogLUBy			
                        --, t.AttachedDelFilePath = f.AttachedDelFilePath
						--, t.DeleteReason = f.DeleteReason
						";

                ////
                string zzB_Update_Invoice_Invoice_zzE = CmUtils.StringUtils.Replace(@"
						---- Invoice_Invoice:
						update t
						set 
							zzB_Update_Invoice_Invoice_ClauseSet_zzE
						from Invoice_Invoice t --//[mylock]
							inner join #input_Invoice_Invoice f --//[mylock]
								on t.InvoiceCode = f.InvoiceCode
						where (1=1)
						;
					"
                    , "zzB_Update_Invoice_Invoice_ClauseSet_zzE", zzB_Update_Invoice_Invoice_ClauseSet_zzE
                    );


                string strSql_SaveOnDB = CmUtils.StringUtils.Replace(@"
						----
						zzB_Update_Invoice_Invoice_zzE
                        ----
					"
                    , "zzB_Update_Invoice_Invoice_zzE", zzB_Update_Invoice_Invoice_zzE
                    );

                DataSet dsDB_Check = _cf.db.ExecQuery(
                    strSql_SaveOnDB
                    );
            }
            #endregion

            #region //// Clear For Debug:
            {
                ////
                string strSqlClearForDebug = CmUtils.StringUtils.Replace(@"
						---- Clear for Debug:
						drop table #input_Invoice_Invoice;
					");

                _cf.db.ExecQuery(
                    strSqlClearForDebug
                    );
                ////
            }
            #endregion
        }
        #endregion

        #region // Invoice_TempGroup:
        private void Invoice_TempGroup_CheckDB(
            ref ArrayList alParamsCoupleError
            , object objInvoiceTGroupCode
            , string strFlagExistToCheck
            , string strFlagActiveListToCheck
            , out DataTable dtDB_Invoice_TempGroup
            )
        {
            // GetInfo:
            string strSqlExec = CmUtils.StringUtils.Replace(@"
					select top 1
						t.*
					from Invoice_TempGroup t --//[mylock]
					where (1=1)
						and t.InvoiceTGroupCode = @objInvoiceTGroupCode
					;
				");
            dtDB_Invoice_TempGroup = _cf.db.ExecQuery(
                strSqlExec
                , "@objInvoiceTGroupCode", objInvoiceTGroupCode
                ).Tables[0];
            dtDB_Invoice_TempGroup.TableName = "Invoice_TempGroup";

            // strFlagExistToCheck:
            if (strFlagExistToCheck.Length > 0)
            {
                if (CmUtils.StringUtils.StringEqual(strFlagExistToCheck, TConst.Flag.Active) && dtDB_Invoice_TempGroup.Rows.Count < 1)
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.InvoiceTGroupCode", objInvoiceTGroupCode
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Invoice_TempGroup_CheckDB_InvoiceTGroupCodeNotFound
                        , null
                        , alParamsCoupleError.ToArray()
                        );
                }
                if (CmUtils.StringUtils.StringEqual(strFlagExistToCheck, TConst.Flag.Inactive) && dtDB_Invoice_TempGroup.Rows.Count > 0)
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.InvoiceTGroupCode", objInvoiceTGroupCode
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Invoice_TempGroup_CheckDB_InvoiceTGroupCodeExist
                        , null
                        , alParamsCoupleError.ToArray()
                        );
                }
            }

            // strFlagActiveListToCheck:
            if (strFlagActiveListToCheck.Length > 0 && !strFlagActiveListToCheck.Contains(Convert.ToString(dtDB_Invoice_TempGroup.Rows[0]["FlagActive"])))
            {
                alParamsCoupleError.AddRange(new object[]{
                    "Check.InvoiceTGroupCode", objInvoiceTGroupCode
                    , "Check.strFlagActiveListToCheck", strFlagActiveListToCheck
                    , "DB.FlagActive", dtDB_Invoice_TempGroup.Rows[0]["FlagActive"]
                    });
                throw CmUtils.CMyException.Raise(
                    TError.ErridnInventory.Invoice_TempGroup_CheckDB_FlagActiveNotMatched
                    , null
                    , alParamsCoupleError.ToArray()
                    );
            }
        }

        public DataSet Invoice_TempGroup_Get(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            //// Filter:
            , string strFt_RecordStart
            , string strFt_RecordCount
            , string strFt_WhereClause
            //// Return:
            , string strRt_Cols_Invoice_TempGroup
            , string strRt_Cols_Invoice_TempGroupField
            )
        {
            #region // Temp:
            DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            //int nTidSeq = 0;
            DateTime dtimeSys = DateTime.UtcNow;
            bool bNeedTransaction = true;
            string strFunctionName = "Invoice_TempGroup_Get";
            string strErrorCodeDefault = TError.ErridnInventory.Invoice_TempGroup_Get;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				//// Filter
				, "strFt_RecordStart", strFt_RecordStart
                , "strFt_RecordCount", strFt_RecordCount
                , "strFt_WhereClause", strFt_WhereClause
				//// Return
				, "strRt_Cols_Invoice_TempGroup", strRt_Cols_Invoice_TempGroup
                , "strRt_Cols_Invoice_TempGroupField", strRt_Cols_Invoice_TempGroupField
                });
            #endregion

            try
            {
                #region // Init:
                //_cf.db.LogUserId = _cf.sinf.strUserCode;
                if (bNeedTransaction) _cf.db.BeginTransaction();

                // Write RequestLog:
                _cf.ProcessBizReq_OutSide(
                    strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    , alParamsCoupleError // alParamsCoupleError
                    );

                // Sys_User_CheckAuthentication:
                //Sys_User_CheckAuthentication(
                //    ref alParamsCoupleError
                //    , strWAUserCode
                //    , strWAUserPassword
                //    );

                // Check Access/Deny:
                Sys_Access_CheckDenyV30(
                    ref alParamsCoupleError
                    , strWAUserCode
                    , strFunctionName
                    );
                #endregion

                #region // Check:
                //// Refine:
                long nFilterRecordStart = Convert.ToInt64(strFt_RecordStart);
                long nFilterRecordEnd = nFilterRecordStart + Convert.ToInt64(strFt_RecordCount) - 1;
                bool bGet_Invoice_TempGroup = (strRt_Cols_Invoice_TempGroup != null && strRt_Cols_Invoice_TempGroup.Length > 0);
                bool bGet_Invoice_TempGroupField = (strRt_Cols_Invoice_TempGroupField != null && strRt_Cols_Invoice_TempGroupField.Length > 0);

                //// drAbilityOfUser:
                //DataRow drAbilityOfUser = myCache_ViewAbility_GetUserInfo(strWAUserCode);

                #endregion

                #region // Build Sql:
                ////
                ArrayList alParamsCoupleSql = new ArrayList();
                alParamsCoupleSql.AddRange(new object[] {
                    "@nFilterRecordStart", nFilterRecordStart
                    , "@nFilterRecordEnd", nFilterRecordEnd
                    });
                ////
                //myCache_ViewAbility_GetDealerInfo(drAbilityOfUser);
                ////
                string strSqlGetData = CmUtils.StringUtils.Replace(@"
						---- #tbl_Invoice_TempGroup_Filter_Draft:
						select distinct
							identity(bigint, 0, 1) MyIdxSeq
							, itgrp.InvoiceTGroupCode
						into #tbl_Invoice_TempGroup_Filter_Draft
						from Invoice_TempGroup itgrp --//[mylock]
						where (1=1)
							zzB_Where_strFilter_zzE
						order by itgrp.InvoiceTGroupCode asc
						;

						---- Summary:
						select Count(0) MyCount from #tbl_Invoice_TempGroup_Filter_Draft t --//[mylock]
						;

						---- #tbl_Invoice_TempGroup_Filter:
						select
							t.*
						into #tbl_Invoice_TempGroup_Filter
						from #tbl_Invoice_TempGroup_Filter_Draft t --//[mylock]
						where
							(t.MyIdxSeq >= @nFilterRecordStart)
							and (t.MyIdxSeq <= @nFilterRecordEnd)
						;

						-------- Invoice_TempGroup -------:
						zzB_Select_Invoice_TempGroup_zzE
						---------------------------------

						-------- Invoice_TempGroupField -------:
						zzB_Select_Invoice_TempGroupField_zzE
						---------------------------------

						---- Clear for debug:
						--drop table #tbl_Invoice_TempGroup_Filter_Draft;
						--drop table #tbl_Invoice_TempGroup_Filter;
					"
                    );
                ////
                string zzB_Select_Invoice_TempGroup_zzE = "-- Nothing.";
                if (bGet_Invoice_TempGroup)
                {
                    #region // bGet_Invoice_TempGroup:
                    zzB_Select_Invoice_TempGroup_zzE = CmUtils.StringUtils.Replace(@"
							---- Invoice_TempGroup:
							select
								t.MyIdxSeq
								, itgrp.*
							from #tbl_Invoice_TempGroup_Filter t --//[mylock]
								inner join Invoice_TempGroup itgrp --//[mylock]
									on t.InvoiceTGroupCode = itgrp.InvoiceTGroupCode
							order by t.MyIdxSeq asc
							;
						"
                        );
                    #endregion
                }
                ////
                string zzB_Select_Invoice_TempGroupField_zzE = "-- Nothing.";
                if (bGet_Invoice_TempGroupField)
                {
                    #region // bGet_Invoice_TempGroupField:
                    zzB_Select_Invoice_TempGroup_zzE = CmUtils.StringUtils.Replace(@"
							---- Invoice_TempGroupField:
							select
								t.MyIdxSeq
								, itgrp.*
								, icf.InvoiceCustomFieldCode icf_InvoiceCustomFieldCode
								, icf.InvoiceCustomFieldName icf_InvoiceCustomFieldName
								, idcf.InvoiceDtlCustomFieldCode idcf_InvoiceDtlCustomFieldCode
								, idcf.InvoiceDtlCustomFieldName idcf_InvoiceDtlCustomFieldName
							from #tbl_Invoice_TempGroup_Filter t --//[mylock]
								inner join Invoice_TempGroupField itgrpf --//[mylock]
									on t.InvoiceTGroupCode = itgrpf.InvoiceTGroupCode
								left join Invoice_CustomField icf --//[mylock]
									on itgrpf.DBFieldName = icf.InvoiceCustomFieldCode
								left join Invoice_DtlCustomField idcf --//[mylock]
									on itgrpf.DBFieldName = idcf.InvoiceDtlCustomFieldCode
							order by t.MyIdxSeq asc
							;
						"
                        );
                    #endregion
                }
                ////
                string zzB_Where_strFilter_zzE = "";
                {
                    Hashtable htSpCols = new Hashtable();
                    {
                        #region // htSpCols:
                        ////
                        TUtils.CUtils.MyBuildHTSupportedColumns(
                            _cf.db // db
                            , ref htSpCols // htSupportedColumns
                            , "Invoice_TempGroup" // strTableNameDB
                            , "Invoice_TempGroup." // strPrefixStd
                            , "itgrp." // strPrefixAlias
                            );
                        ////
                        #endregion
                    }
                    zzB_Where_strFilter_zzE = CmUtils.SqlUtils.BuildWhere(
                        htSpCols // htSpCols
                        , strFt_WhereClause // strClause
                        , "@p_" // strParamPrefix
                        , ref alParamsCoupleSql // alParamsCoupleSql
                        );
                    zzB_Where_strFilter_zzE = (zzB_Where_strFilter_zzE.Length <= 0 ? "" : string.Format(" and ({0})", zzB_Where_strFilter_zzE));
                    alParamsCoupleError.AddRange(new object[]{
                        "zzB_Where_strFilter_zzE", zzB_Where_strFilter_zzE
                        });
                }
                ////
                strSqlGetData = CmUtils.StringUtils.Replace(
                    strSqlGetData
                    , "zzB_Where_strFilter_zzE", zzB_Where_strFilter_zzE
                    , "zzB_Select_Invoice_TempGroup_zzE", zzB_Select_Invoice_TempGroup_zzE
                    , "zzB_Select_Invoice_TempGroupField_zzE", zzB_Select_Invoice_TempGroupField_zzE
                    );
                #endregion

                #region // Get Data:
                DataSet dsGetData = _cf.db.ExecQuery(
                    strSqlGetData
                    , alParamsCoupleSql.ToArray()
                    );
                int nIdxTable = 0;
                dsGetData.Tables[nIdxTable++].TableName = "MySummaryTable";
                if (bGet_Invoice_TempGroup)
                {
                    dsGetData.Tables[nIdxTable++].TableName = "Invoice_TempGroup";
                }
                ////
                if (bGet_Invoice_TempGroupField)
                {
                    dsGetData.Tables[nIdxTable++].TableName = "Invoice_TempGroupField";
                }
                CmUtils.DataUtils.MoveDataTable(ref mdsFinal, ref dsGetData);
                #endregion

                // Return Good:
                TDALUtils.DBUtils.RollbackSafety(_cf.db); // Always Rollback.
                mdsFinal.AcceptChanges();
                return mdsFinal;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Rollback:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);

                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsFinal
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Rollback and Release resources:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);
                TDALUtils.DBUtils.ReleaseAllSemaphore(_cf.db_Sys, true);

                // Write ReturnLog:
                _cf.ProcessBizReturn_OutSide(
                    ref mdsFinal // mdsFinal
                    , strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    );
                #endregion
            }
        }

        public DataSet Invoice_TempGroup_Create(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            ////
            , object objInvoiceTGroupCode
            , object objMST
            , object objInvoiceTGroupName
            , object objInvoiceTGroupBody
            , object objFilePathThumbnail
            , object objSpec_Prd_Type
            //, object objFlagActive
            )
        {
            #region // Temp:
            DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            //int nTidSeq = 0;
            DateTime dtimeSys = DateTime.UtcNow;
            string strFunctionName = "Invoice_TempGroup_Create";
            string strErrorCodeDefault = TError.ErridnInventory.Invoice_TempGroup_Create;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
                ////
				, "objInvoiceTGroupCode", objInvoiceTGroupCode
                //, "objMST", objMST
                , "objInvoiceTGroupName", objInvoiceTGroupName
                , "objInvoiceTGroupBody", objInvoiceTGroupBody
                , "objFilePathThumbnail", objFilePathThumbnail
                , "objSpec_Prd_Type", objSpec_Prd_Type
                });
            #endregion

            try
            {
                #region // Convert Input:
                #endregion

                #region // Init:
                //_cf.db.LogUserId = _cf.sinf.strUserCode;
                _cf.db.BeginTransaction();

                // Write RequestLog:
                _cf.ProcessBizReq_OutSide(
                    strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    , alParamsCoupleError // alParamsCoupleError
                    );

                // Sys_User_CheckAuthentication:
                //Sys_User_CheckAuthentication(
                //    ref alParamsCoupleError
                //    , strWAUserCode
                //    , strWAUserPassword
                //    );

                // Check Access/Deny:
                Sys_Access_CheckDenyV30(
                    ref alParamsCoupleError
                    , strWAUserCode
                    , strFunctionName
                    );
                #endregion

                #region // Refine and Check Input:
                ////
                string strInvoiceTGroupCode = TUtils.CUtils.StdParam(objInvoiceTGroupCode);
                string strMST = TUtils.CUtils.StdParam(objMST);
                string strInvoiceTGroupName = string.Format("{0}", objInvoiceTGroupName).Trim();
                string strInvoiceTGroupBody = string.Format("{0}", objInvoiceTGroupBody).Trim();
                string strFilePathThumbnail = string.Format("{0}", objFilePathThumbnail).Trim();
                string strSpec_Prd_Type = TUtils.CUtils.StdParam(objSpec_Prd_Type);

                // drAbilityOfUser:
                //DataRow drAbilityOfUser = Sys_User_GetAbilityViewOfUser(strWAUserCode);
                ////
                DataTable dtDB_Invoice_TempGroup = null;
                {
                    ////
                    if (strInvoiceTGroupCode == null || strInvoiceTGroupCode.Length < 1)
                    {
                        alParamsCoupleError.AddRange(new object[]{
                            "Check.strInvoiceTGroupCode", strInvoiceTGroupCode
                            });
                        throw CmUtils.CMyException.Raise(
                            TError.ErridnInventory.Invoice_TempGroup_Create_InvalidInvoiceTGroupCode
                            , null
                            , alParamsCoupleError.ToArray()
                            );
                    }
                    Invoice_TempGroup_CheckDB(
                        ref alParamsCoupleError // alParamsCoupleError
                        , strInvoiceTGroupCode // strInvoiceTGroupCode
                        , TConst.Flag.No // strFlagExistToCheck
                        , "" // strFlagActiveListToCheck
                        , out dtDB_Invoice_TempGroup // dtDB_Invoice_TempGroup
                        );
                    ////
                    DataTable dtDB_Mst_NNT = null;

                    Mst_NNT_CheckDB(
                        ref alParamsCoupleError // alParamsCoupleError
                        , strMST // objMST
                        , TConst.Flag.Yes // strFlagExistToCheck
                        , TConst.Flag.Active // strFlagActiveListToCheck
                        , "" // strTCTStatusListToCheck
                        , out dtDB_Mst_NNT // dtDB_Mst_NNT
                        );
                    ////
                    if (strInvoiceTGroupName.Length < 1)
                    {
                        alParamsCoupleError.AddRange(new object[]{
                            "Check.strInvoiceTGroupName", strInvoiceTGroupName
                            });
                        throw CmUtils.CMyException.Raise(
                            TError.ErridnInventory.Invoice_TempGroup_Create_InvalidInvoiceTGroupName
                            , null
                            , alParamsCoupleError.ToArray()
                            );
                    }
                    ////
                    if (CmUtils.StringUtils.StringEqualIgnoreCase(strSpec_Prd_Type, TConst.Spec_Prd_Type.Spec)
                        && CmUtils.StringUtils.StringEqualIgnoreCase(strSpec_Prd_Type, TConst.Spec_Prd_Type.ProductId))
                    {
                        alParamsCoupleError.AddRange(new object[]{
                            "Check.strSpec_Prd_Type", strInvoiceTGroupName
                            , "Check.Expected", string.Format("{0}, {1}", TConst.Spec_Prd_Type.Spec, TConst.Spec_Prd_Type.ProductId).Trim()
                            });
                        throw CmUtils.CMyException.Raise(
                            TError.ErridnInventory.Invoice_TempGroup_Create_InvalidSpec_Prd_Type
                            , null
                            , alParamsCoupleError.ToArray()
                            );
                    }
                }
                #endregion

                #region // SaveDB Invoice_TempGroup:
                {
                    // Init:
                    //ArrayList alColumnEffective = new ArrayList();
                    string strFN = "";
                    DataRow drDB = dtDB_Invoice_TempGroup.NewRow();
                    strFN = "InvoiceTGroupCode"; drDB[strFN] = strInvoiceTGroupCode;
                    strFN = "NetworkID"; drDB[strFN] = nNetworkID;
                    strFN = "MST"; drDB[strFN] = strMST;
                    strFN = "InvoiceTGroupName"; drDB[strFN] = strInvoiceTGroupName;
                    strFN = "InvoiceTGroupBody"; drDB[strFN] = strInvoiceTGroupBody;
                    strFN = "FilePathThumbnail"; drDB[strFN] = strFilePathThumbnail;
                    strFN = "Spec_Prd_Type"; drDB[strFN] = strSpec_Prd_Type;
                    strFN = "FlagActive"; drDB[strFN] = TConst.Flag.Active;
                    strFN = "LogLUDTimeUTC"; drDB[strFN] = dtimeSys.ToString("yyyy-MM-dd HH:mm:ss");
                    strFN = "LogLUBy"; drDB[strFN] = strWAUserCode;
                    dtDB_Invoice_TempGroup.Rows.Add(drDB);

                    // Save:
                    _cf.db.SaveData(
                        "Invoice_TempGroup"
                        , dtDB_Invoice_TempGroup
                        //, alColumnEffective.ToArray()
                        );
                }
                #endregion

                // Return Good:
                TDALUtils.DBUtils.CommitSafety(_cf.db);
                mdsFinal.AcceptChanges();
                return mdsFinal;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Rollback:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);

                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsFinal
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Rollback and Release resources:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);
                TDALUtils.DBUtils.ReleaseAllSemaphore(_cf.db_Sys, true);

                // Write ReturnLog:
                _cf.ProcessBizReturn_OutSide(
                    ref mdsFinal // mdsFinal
                    , strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    );
                #endregion
            }
        }
        public DataSet Invoice_TempGroup_Update(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            ////
            , object objInvoiceTGroupCode
            //, object objMST
            , object objInvoiceTGroupName
            , object objInvoiceTGroupBody
            , object objFilePathThumbnail
            , object objSpec_Prd_Type
            , object objFlagActive
            ////
            , object objFt_Cols_Upd
            )
        {
            #region // Temp:
            DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            //int nTidSeq = 0;
            DateTime dtimeSys = DateTime.UtcNow;
            string strFunctionName = "Invoice_TempGroup_Update";
            string strErrorCodeDefault = TError.ErridnInventory.Invoice_TempGroup_Update;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
				, "objInvoiceTGroupCode", objInvoiceTGroupCode
                //, "objMST", objMST
                , "objInvoiceTGroupName", objInvoiceTGroupName
                , "objInvoiceTGroupBody", objInvoiceTGroupBody
                , "objFilePathThumbnail", objFilePathThumbnail
                , "objSpec_Prd_Type", objSpec_Prd_Type
                , "objFlagActive", objFlagActive
				////
				, "objFt_Cols_Upd", objFt_Cols_Upd
                });
            #endregion

            try
            {
                #region // Convert Input:
                #endregion

                #region // Init:
                //_cf.db.LogUserId = _cf.sinf.strUserCode;
                _cf.db.BeginTransaction();

                // Write RequestLog:
                _cf.ProcessBizReq_OutSide(
                    strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    , alParamsCoupleError // alParamsCoupleError
                    );

                // Sys_User_CheckAuthentication:
                //Sys_User_CheckAuthentication(
                //    ref alParamsCoupleError
                //    , strWAUserCode
                //    , strWAUserPassword
                //    );

                // Check Access/Deny:
                Sys_Access_CheckDenyV30(
                    ref alParamsCoupleError
                    , strWAUserCode
                    , strFunctionName
                    );
                #endregion

                #region // Refine and Check Input:
                ////
                string strFt_Cols_Upd = TUtils.CUtils.StdParam(objFt_Cols_Upd);
                strFt_Cols_Upd = (strFt_Cols_Upd == null ? "" : strFt_Cols_Upd);
                ////
                string strInvoiceTGroupCode = TUtils.CUtils.StdParam(objInvoiceTGroupCode);
                //string strMST = TUtils.CUtils.StdParam(objMST);
                string strInvoiceTGroupName = string.Format("{0}", objInvoiceTGroupName).Trim();
                string strInvoiceTGroupBody = string.Format("{0}", objInvoiceTGroupBody).Trim();
                string strFilePathThumbnail = string.Format("{0}", objFilePathThumbnail).Trim();
                string strSpec_Prd_Type = TUtils.CUtils.StdParam(objSpec_Prd_Type);
                string strFlagActive = TUtils.CUtils.StdFlag(objFlagActive);
                ////
                bool bUpd_InvoiceTGroupName = strFt_Cols_Upd.Contains("Invoice_TempGroup.InvoiceTGroupName".ToUpper());
                bool bUpd_InvoiceTGroupBody = strFt_Cols_Upd.Contains("Invoice_TempGroup.InvoiceTGroupBody".ToUpper());
                bool bUpd_FilePathThumbnail = strFt_Cols_Upd.Contains("Invoice_TempGroup.FilePathThumbnail".ToUpper());
                bool bUpd_Spec_Prd_Type = strFt_Cols_Upd.Contains("Invoice_TempGroup.Spec_Prd_Type".ToUpper());
                bool bUpd_FlagActive = strFt_Cols_Upd.Contains("Invoice_TempGroup.FlagActive".ToUpper());

                ////
                DataTable dtDB_Invoice_TempGroup = null;
                {
                    ////
                    Invoice_TempGroup_CheckDB(
                         ref alParamsCoupleError // alParamsCoupleError
                         , strInvoiceTGroupCode // objInvoiceTGroupCode 
                         , TConst.Flag.Yes // strFlagExistToCheck
                         , "" // strFlagActiveListToCheck
                         , out dtDB_Invoice_TempGroup // dtDB_Invoice_TempGroup
                        );
                    ////
                    if (bUpd_InvoiceTGroupName && string.IsNullOrEmpty(strInvoiceTGroupName))
                    {
                        alParamsCoupleError.AddRange(new object[]{
                            "Check.strInvoiceTGroupName", strInvoiceTGroupName
                            });
                        throw CmUtils.CMyException.Raise(
                            TError.ErridnInventory.Invoice_TempGroup_Update_InvalidProvinceName
                            , null
                            , alParamsCoupleError.ToArray()
                            );
                    }
                    ////
                    ////
                    if (CmUtils.StringUtils.StringEqualIgnoreCase(strSpec_Prd_Type, TConst.Spec_Prd_Type.Spec)
                        && CmUtils.StringUtils.StringEqualIgnoreCase(strSpec_Prd_Type, TConst.Spec_Prd_Type.ProductId))
                    {
                        alParamsCoupleError.AddRange(new object[]{
                            "Check.strSpec_Prd_Type", strInvoiceTGroupName
                            , "Check.Expected", string.Format("{0}, {1}", TConst.Spec_Prd_Type.Spec, TConst.Spec_Prd_Type.ProductId).Trim()
                            });
                        throw CmUtils.CMyException.Raise(
                            TError.ErridnInventory.Invoice_TempGroup_Update_InvalidSpec_Prd_Type
                            , null
                            , alParamsCoupleError.ToArray()
                            );
                    }
                }
                #endregion

                #region // SaveDB Invoice_TempGroup:
                {
                    // Init:
                    ArrayList alColumnEffective = new ArrayList();
                    string strFN = "";
                    DataRow drDB = dtDB_Invoice_TempGroup.Rows[0];
                    if (bUpd_InvoiceTGroupName) { strFN = "InvoiceTGroupName"; drDB[strFN] = strInvoiceTGroupName; alColumnEffective.Add(strFN); }
                    if (bUpd_InvoiceTGroupBody) { strFN = "InvoiceTGroupBody"; drDB[strFN] = strInvoiceTGroupBody; alColumnEffective.Add(strFN); }
                    if (bUpd_FilePathThumbnail) { strFN = "FilePathThumbnail"; drDB[strFN] = strFilePathThumbnail; alColumnEffective.Add(strFN); }
                    if (bUpd_Spec_Prd_Type) { strFN = "Spec_Prd_Type"; drDB[strFN] = strSpec_Prd_Type; alColumnEffective.Add(strFN); }
                    if (bUpd_FlagActive) { strFN = "FlagActive"; drDB[strFN] = strFlagActive; alColumnEffective.Add(strFN); }
                    strFN = "LogLUDTimeUTC"; drDB[strFN] = dtimeSys.ToString("yyyy-MM-dd HH:mm:ss"); alColumnEffective.Add(strFN);
                    strFN = "LogLUBy"; drDB[strFN] = strWAUserCode; alColumnEffective.Add(strFN);

                    // Save:
                    _cf.db.SaveData(
                        "Invoice_TempGroup"
                        , dtDB_Invoice_TempGroup
                        , alColumnEffective.ToArray()
                        );
                }
                #endregion

                // Return Good:
                TDALUtils.DBUtils.CommitSafety(_cf.db);
                mdsFinal.AcceptChanges();
                return mdsFinal;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Rollback:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);

                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsFinal
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Rollback and Release resources:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);
                TDALUtils.DBUtils.ReleaseAllSemaphore(_cf.db_Sys, true);

                // Write ReturnLog:
                _cf.ProcessBizReturn_OutSide(
                    ref mdsFinal // mdsFinal
                    , strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    );
                #endregion
            }
        }
        public DataSet Invoice_TempGroup_Delete(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            /////
            , object objobjInvoiceTGroupCode
            )
        {
            #region // Temp:
            DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            //int nTidSeq = 0;
            DateTime dtimeSys = DateTime.UtcNow;
            string strFunctionName = "Invoice_TempGroup_Delete";
            string strErrorCodeDefault = TError.ErridnInventory.Invoice_TempGroup_Delete;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
				, "objProvinceCode", objobjInvoiceTGroupCode
                });
            #endregion

            try
            {
                #region // Init:
                //_cf.db.LogUserId = _cf.sinf.strUserCode;
                _cf.db.BeginTransaction();

                // Write RequestLog:
                _cf.ProcessBizReq_OutSide(
                    strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    , alParamsCoupleError // alParamsCoupleError
                    );

                // Sys_User_CheckAuthentication:
                //Sys_User_CheckAuthentication(
                //    ref alParamsCoupleError
                //    , strWAUserCode
                //    , strWAUserPassword
                //    );

                // Check Access/Deny:
                Sys_Access_CheckDenyV30(
                    ref alParamsCoupleError
                    , strWAUserCode
                    , strFunctionName
                    );
                #endregion

                #region // Refine and Check Input:
                ////
                string strProvinceCode = TUtils.CUtils.StdParam(objobjInvoiceTGroupCode);
                ////
                DataTable dtDB_Invoice_TempGroup = null;
                {
                    ////
                    Invoice_TempGroup_CheckDB(
                         ref alParamsCoupleError // alParamsCoupleError
                         , objobjInvoiceTGroupCode // objProvinceCode
                         , TConst.Flag.Yes // strFlagExistToCheck
                         , "" // strFlagActiveListToCheck
                         , out dtDB_Invoice_TempGroup // dtDB_Invoice_TempGroup
                        );
                    ////
                }
                #endregion

                #region // SaveDB Invoice_TempGroup:
                {
                    // Init:
                    dtDB_Invoice_TempGroup.Rows[0].Delete();

                    // Save:
                    _cf.db.SaveData(
                        "Invoice_TempGroup"
                        , dtDB_Invoice_TempGroup
                        );
                }
                #endregion

                // Return Good:
                TDALUtils.DBUtils.CommitSafety(_cf.db);
                mdsFinal.AcceptChanges();
                return mdsFinal;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Rollback:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);

                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsFinal
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Rollback and Release resources:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);
                TDALUtils.DBUtils.ReleaseAllSemaphore(_cf.db_Sys, true);

                // Write ReturnLog:
                _cf.ProcessBizReturn_OutSide(
                    ref mdsFinal // mdsFinal
                    , strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    );
                #endregion
            }
        }


        public DataSet WAS_Invoice_TempGroup_Get(
            ref ArrayList alParamsCoupleError
            , RQ_Invoice_TempGroup objRQ_Invoice_TempGroup
            ////
            , out RT_Invoice_TempGroup objRT_Invoice_TempGroup
            )
        {
            #region // Temp:
            string strTid = objRQ_Invoice_TempGroup.Tid;
            objRT_Invoice_TempGroup = new RT_Invoice_TempGroup();
            DataSet mdsResult = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            DateTime dtimeSys = DateTime.UtcNow;
            //DataSet mdsExec = null;
            //DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(objRQ_Invoice_TempGroup.Tid);
            //int nTidSeq = 0;
            //bool bNeedTransaction = true;
            string strFunctionName = "WAS_Invoice_TempGroup_Get";
            string strErrorCodeDefault = TError.ErridnInventory.WAS_Invoice_TempGroup_Get;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
				});
            #endregion

            try
            {
                #region // Init:
                #endregion

                #region // Refine and Check Input:
                List<MySummaryTable> lst_MySummaryTable = new List<MySummaryTable>();

                List<Invoice_TempGroup> lst_Invoice_TempGroup = new List<Invoice_TempGroup>();
                bool bGet_Invoice_TempGroup = (objRQ_Invoice_TempGroup.Rt_Cols_Invoice_TempGroup != null && objRQ_Invoice_TempGroup.Rt_Cols_Invoice_TempGroup.Length > 0);

                List<Invoice_TempGroupField> lst_Invoice_TempGroupField = new List<Invoice_TempGroupField>();
                bool bGet_Invoice_TempGroupField = (objRQ_Invoice_TempGroup.Rt_Cols_Invoice_TempGroupField != null && objRQ_Invoice_TempGroup.Rt_Cols_Invoice_TempGroupField.Length > 0);

                #endregion

                #region // WS_Invoice_TempGroup_Get:
                mdsResult = Invoice_TempGroup_Get(
                    objRQ_Invoice_TempGroup.Tid // strTid
                    , objRQ_Invoice_TempGroup.GwUserCode // strGwUserCode
                    , objRQ_Invoice_TempGroup.GwPassword // strGwPassword
                    , objRQ_Invoice_TempGroup.WAUserCode // strUserCode
                    , objRQ_Invoice_TempGroup.WAUserPassword // strUserPassword
                    , ref alParamsCoupleError // alParamsCoupleError
                                              //// Filter:
                    , objRQ_Invoice_TempGroup.Ft_RecordStart // strFt_RecordStart
                    , objRQ_Invoice_TempGroup.Ft_RecordCount // strFt_RecordCount
                    , objRQ_Invoice_TempGroup.Ft_WhereClause // strFt_WhereClause
                                                             //// Return:
                    , objRQ_Invoice_TempGroup.Rt_Cols_Invoice_TempGroup // strRt_Cols_Invoice_TempGroup
                    , objRQ_Invoice_TempGroup.Rt_Cols_Invoice_TempGroupField // strRt_Cols_Invoice_TempGroup
                    );
                #endregion

                #region // GetData:
                if (!CmUtils.CMyDataSet.HasError(mdsResult))
                {
                    ////
                    if (bGet_Invoice_TempGroup)
                    {
                        ////
                        DataTable dt_MySummaryTable = mdsResult.Tables["MySummaryTable"].Copy();
                        lst_MySummaryTable = TUtils.DataTableCmUtils.ToListof<MySummaryTable>(dt_MySummaryTable);
                        objRT_Invoice_TempGroup.MySummaryTable = lst_MySummaryTable[0];

                        ////
                        DataTable dt_Invoice_TempGroup = mdsResult.Tables["Invoice_TempGroup"].Copy();
                        lst_Invoice_TempGroup = TUtils.DataTableCmUtils.ToListof<Invoice_TempGroup>(dt_Invoice_TempGroup);
                        objRT_Invoice_TempGroup.Lst_Invoice_TempGroup = lst_Invoice_TempGroup;
                    }

                    ////
                    if (bGet_Invoice_TempGroupField)
                    {
                        ////
                        DataTable dt_Invoice_TempGroupField = mdsResult.Tables["Invoice_TempGroupField"].Copy();
                        lst_Invoice_TempGroupField = TUtils.DataTableCmUtils.ToListof<Invoice_TempGroupField>(dt_Invoice_TempGroupField);
                        objRT_Invoice_TempGroup.Lst_Invoice_TempGroupField = lst_Invoice_TempGroupField;
                    }
                }
                #endregion

                // Return Good:
                return mdsResult;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsResult
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Write ReturnLog:
                //_cf.ProcessBizReturn(
                //	ref mdsResult // mdsFinal
                //	, strTid // strTid
                //	, strFunctionName // strFunctionName
                //	);
                #endregion
            }
        }

        public DataSet WAS_Invoice_TempGroup_Create(
            ref ArrayList alParamsCoupleError
            , RQ_Invoice_TempGroup objRQ_Invoice_TempGroup
            ////
            , out RT_Invoice_TempGroup objRT_Invoice_TempGroup
            )
        {
            #region // Temp:
            string strTid = objRQ_Invoice_TempGroup.Tid;
            objRT_Invoice_TempGroup = new RT_Invoice_TempGroup();
            DataSet mdsResult = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            DateTime dtimeSys = DateTime.UtcNow;
            //DataSet mdsExec = null;
            //DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(objRQ_Invoice_TempGroup.Tid);
            //int nTidSeq = 0;
            //bool bNeedTransaction = true;
            string strFunctionName = "WAS_Invoice_TempGroup_Create";
            string strErrorCodeDefault = TError.ErridnInventory.WAS_Invoice_TempGroup_Create;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
                , "Invoice_TempGroup", TJson.JsonConvert.SerializeObject(objRQ_Invoice_TempGroup.Invoice_TempGroup)
				////
				});
            #endregion

            try
            {
                #region // Init:
                #endregion

                #region // Refine and Check Input:
                //List<Invoice_TempGroup> lst_Invoice_TempGroup = new List<Invoice_TempGroup>();
                //List<Invoice_TempGroupInGroup> lst_Invoice_TempGroupInGroup = new List<Invoice_TempGroupInGroup>();
                #endregion

                #region // Invoice_TempGroup_Create:
                mdsResult = Invoice_TempGroup_Create(
                    objRQ_Invoice_TempGroup.Tid // strTid
                    , objRQ_Invoice_TempGroup.GwUserCode // strGwUserCode
                    , objRQ_Invoice_TempGroup.GwPassword // strGwPassword
                    , objRQ_Invoice_TempGroup.WAUserCode // strUserCode
                    , objRQ_Invoice_TempGroup.WAUserPassword // strUserPassword
                    , ref alParamsCoupleError // alParamsCoupleError
                                              ////
                    , objRQ_Invoice_TempGroup.Invoice_TempGroup.InvoiceTGroupCode // objInvoiceTGroupCode
                    , objRQ_Invoice_TempGroup.Invoice_TempGroup.MST // objMST
                    , objRQ_Invoice_TempGroup.Invoice_TempGroup.InvoiceTGroupName // objInvoiceTGroupName
                    , objRQ_Invoice_TempGroup.Invoice_TempGroup.InvoiceTGroupBody // objInvoiceTGroupBody
                    , objRQ_Invoice_TempGroup.Invoice_TempGroup.FilePathThumbnail // objFilePathThumbnail
                    , objRQ_Invoice_TempGroup.Invoice_TempGroup.Spec_Prd_Type // objSpec_Prd_Type
                    );
                #endregion

                // Return Good:
                return mdsResult;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsResult
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Write ReturnLog:
                //_cf.ProcessBizReturn(
                //	ref mdsResult // mdsFinal
                //	, strTid // strTid
                //	, strFunctionName // strFunctionName
                //	);
                #endregion
            }
        }

        public DataSet WAS_Invoice_TempGroup_Update(
            ref ArrayList alParamsCoupleError
            , RQ_Invoice_TempGroup objRQ_Invoice_TempGroup
            ////
            , out RT_Invoice_TempGroup objRT_Invoice_TempGroup
            )
        {
            #region // Temp:
            string strTid = objRQ_Invoice_TempGroup.Tid;
            objRT_Invoice_TempGroup = new RT_Invoice_TempGroup();
            DataSet mdsResult = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            DateTime dtimeSys = DateTime.UtcNow;
            //DataSet mdsExec = null;
            //DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(objRQ_Invoice_TempGroup.Tid);
            //int nTidSeq = 0;
            //bool bNeedTransaction = true;
            string strFunctionName = "WAS_Invoice_TempGroup_Update";
            string strErrorCodeDefault = TError.ErridnInventory.WAS_Invoice_TempGroup_Update;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
                , "Invoice_TempGroup", TJson.JsonConvert.SerializeObject(objRQ_Invoice_TempGroup.Invoice_TempGroup)
				////
				});
            #endregion

            try
            {
                #region // Init:
                #endregion

                #region // Refine and Check Input:
                //List<Invoice_TempGroup> lst_Invoice_TempGroup = new List<Invoice_TempGroup>();
                //List<Invoice_TempGroupInGroup> lst_Invoice_TempGroupInGroup = new List<Invoice_TempGroupInGroup>();
                #endregion

                #region // Invoice_TempGroup_Update:
                mdsResult = Invoice_TempGroup_Update(
                    objRQ_Invoice_TempGroup.Tid // strTid
                    , objRQ_Invoice_TempGroup.GwUserCode // strGwUserCode
                    , objRQ_Invoice_TempGroup.GwPassword // strGwPassword
                    , objRQ_Invoice_TempGroup.WAUserCode // strUserCode
                    , objRQ_Invoice_TempGroup.WAUserPassword // strUserPassword
                    , ref alParamsCoupleError // alParamsCoupleError
                                              ////
                    , objRQ_Invoice_TempGroup.Invoice_TempGroup.InvoiceTGroupCode // objInvoiceTGroupCode
                    //, objRQ_Invoice_TempGroup.Invoice_TempGroup.MST // objMST
                    , objRQ_Invoice_TempGroup.Invoice_TempGroup.InvoiceTGroupName // objInvoiceTGroupName
                    , objRQ_Invoice_TempGroup.Invoice_TempGroup.InvoiceTGroupBody // objInvoiceTGroupBody
                    , objRQ_Invoice_TempGroup.Invoice_TempGroup.FilePathThumbnail // objFilePathThumbnail
                    , objRQ_Invoice_TempGroup.Invoice_TempGroup.Spec_Prd_Type // objSpec_Prd_Type
                    , objRQ_Invoice_TempGroup.Invoice_TempGroup.FlagActive // objFlagActive
                                                                           ////
                    , objRQ_Invoice_TempGroup.Ft_Cols_Upd// objFt_Cols_Upd
                    );
                #endregion

                // Return Good:
                return mdsResult;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsResult
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Write ReturnLog:
                //_cf.ProcessBizReturn(
                //	ref mdsResult // mdsFinal
                //	, strTid // strTid
                //	, strFunctionName // strFunctionName
                //	);
                #endregion
            }
        }

        public DataSet WAS_Invoice_TempGroup_Delete(
            ref ArrayList alParamsCoupleError
            , RQ_Invoice_TempGroup objRQ_Invoice_TempGroup
            ////
            , out RT_Invoice_TempGroup objRT_Invoice_TempGroup
            )
        {
            #region // Temp:
            string strTid = objRQ_Invoice_TempGroup.Tid;
            objRT_Invoice_TempGroup = new RT_Invoice_TempGroup();
            DataSet mdsResult = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            DateTime dtimeSys = DateTime.UtcNow;
            //DataSet mdsExec = null;
            //DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(objRQ_Invoice_TempGroup.Tid);
            //int nTidSeq = 0;
            //bool bNeedTransaction = true;
            string strFunctionName = "WAS_Invoice_TempGroup_Delete";
            string strErrorCodeDefault = TError.ErridnInventory.WAS_Invoice_TempGroup_Delete;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				//, "Invoice_TempGroup", TJson.JsonConvert.SerializeObject(objRQ_Invoice_TempGroup.Invoice_TempGroup)
				////
				});
            #endregion

            try
            {
                #region // Init:
                #endregion

                #region // Refine and Check Input:
                //List<Invoice_TempGroup> lst_Invoice_TempGroup = new List<Invoice_TempGroup>();
                //List<Invoice_TempGroupInGroup> lst_Invoice_TempGroupInGroup = new List<Invoice_TempGroupInGroup>();
                #endregion

                #region // Invoice_TempGroup_Delete:
                mdsResult = Invoice_TempGroup_Delete(
                    objRQ_Invoice_TempGroup.Tid // strTid
                    , objRQ_Invoice_TempGroup.GwUserCode // strGwUserCode
                    , objRQ_Invoice_TempGroup.GwPassword // strGwPassword
                    , objRQ_Invoice_TempGroup.WAUserCode // strUserCode
                    , objRQ_Invoice_TempGroup.WAUserPassword // strUserPassword
                    , ref alParamsCoupleError // alParamsCoupleError
                                              ////
                    , objRQ_Invoice_TempGroup.Invoice_TempGroup.InvoiceTGroupCode // objInvoiceTGroupCode
                    );
                #endregion

                // Return Good:
                return mdsResult;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsResult
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Write ReturnLog:
                //_cf.ProcessBizReturn(
                //	ref mdsResult // mdsFinal
                //	, strTid // strTid
                //	, strFunctionName // strFunctionName
                //	);
                #endregion
            }
        }
        #endregion

        #region // Invoice_TempInvoice:
        public DataSet Invoice_TempInvoice_Get_New20190705(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            //// Filter:
            , string strFt_RecordStart
            , string strFt_RecordCount
            , string strFt_WhereClause
            //// Return:
            , string strRt_Cols_Invoice_TempInvoice
            , string strRt_Cols_Invoice_TempCustomField
            )
        {
            #region // Temp:
            DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            //int nTidSeq = 0;
            DateTime dtimeSys = DateTime.UtcNow;
            bool bNeedTransaction = true;
            string strFunctionName = "Invoice_TempInvoice_Get";
            string strErrorCodeDefault = TError.ErridnInventory.Invoice_TempInvoice_Get;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				//// Filter
				, "strFt_RecordStart", strFt_RecordStart
                , "strFt_RecordCount", strFt_RecordCount
                , "strFt_WhereClause", strFt_WhereClause
				//// Return
				, "strRt_Cols_Invoice_TempInvoice", strRt_Cols_Invoice_TempInvoice
                , "strRt_Cols_Invoice_TempCustomField", strRt_Cols_Invoice_TempCustomField
                });
            #endregion

            try
            {
                #region // Init:
                //_cf.db.LogUserId = _cf.sinf.strUserCode;
                if (bNeedTransaction) _cf.db.BeginTransaction();

                // Write RequestLog:
                _cf.ProcessBizReq_OutSide(
                    strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    , alParamsCoupleError // alParamsCoupleError
                    );

                // Sys_User_CheckAuthentication:
                //Sys_User_CheckAuthentication(
                //    ref alParamsCoupleError
                //    , strWAUserCode
                //    , strWAUserPassword
                //    );

                // Check Access/Deny:
                Sys_Access_CheckDenyV30(
                    ref alParamsCoupleError
                    , strWAUserCode
                    , strFunctionName
                    );
                #endregion

                #region // Check:
                //// Refine:
                long nFilterRecordStart = Convert.ToInt64(strFt_RecordStart);
                long nFilterRecordEnd = nFilterRecordStart + Convert.ToInt64(strFt_RecordCount) - 1;
                bool bGet_Invoice_TempInvoice = (strRt_Cols_Invoice_TempInvoice != null && strRt_Cols_Invoice_TempInvoice.Length > 0);
                bool bGet_Invoice_TempCustomField = (strRt_Cols_Invoice_TempCustomField != null && strRt_Cols_Invoice_TempCustomField.Length > 0);

                //// drAbilityOfUser:
                //DataRow drAbilityOfUser = myCache_ViewAbility_GetUserInfo(strWAUserCode);

                #endregion

                #region // Build Sql:
                ////
                ArrayList alParamsCoupleSql = new ArrayList();
                alParamsCoupleSql.AddRange(new object[] {
                    "@nFilterRecordStart", nFilterRecordStart
                    , "@nFilterRecordEnd", nFilterRecordEnd
                    });
                ////
                // drAbilityOfUser:
                DataRow drAbilityOfUser = Sys_User_GetAbilityViewOfUser(strWAUserCode);
                zzzzClauseSelect_Mst_NNT_ViewAbility_Get(
                    drAbilityOfUser // drAbilityOfUser
                    , ref alParamsCoupleError // alParamsCoupleError
                    );
                string strSqlGetData = CmUtils.StringUtils.Replace(@"
						---- #tbl_Invoice_TempInvoice_Filter_Draft:
						select distinct
							identity(bigint, 0, 1) MyIdxSeq
							, iti.TInvoiceCode
							, iti.CreateDTimeUTC 
						into #tbl_Invoice_TempInvoice_Filter_Draft
						from Invoice_TempInvoice iti --//[mylock]
                            inner join #tbl_Mst_NNT_ViewAbility t_MstNNT_View --//[mylock]
                                on iti.MST = t_MstNNT_View.MST
                            left join Invoice_TempCustomField itcf --//[mylock]
                                on iti.TInvoiceCode = itcf.TInvoiceCode
						where (1=1)
							zzB_Where_strFilter_zzE
						order by iti.CreateDTimeUTC desc
						;

						---- Summary:
						select Count(0) MyCount from #tbl_Invoice_TempInvoice_Filter_Draft t --//[mylock]
						;

						---- #tbl_Invoice_TempInvoice_Filter:
						select
							t.*
						into #tbl_Invoice_TempInvoice_Filter
						from #tbl_Invoice_TempInvoice_Filter_Draft t --//[mylock]
						where
							(t.MyIdxSeq >= @nFilterRecordStart)
							and (t.MyIdxSeq <= @nFilterRecordEnd)
						;

						-------- Invoice_TempInvoice --------:
						zzB_Select_Invoice_TempInvoice_zzE
						----------------------------------------

						-------- Invoice_TempCustomField --------:
						zzB_Select_Invoice_TempCustomField_zzE
						----------------------------------------

						---- Clear for debug:
						--drop table #tbl_Invoice_TempInvoice_Filter_Draft;
						--drop table #tbl_Invoice_TempInvoice_Filter;
					"
                    );
                ////
                string zzB_Select_Invoice_TempInvoice_zzE = "-- Nothing.";
                if (bGet_Invoice_TempInvoice)
                {
                    #region // bGet_Invoice_TempInvoice:
                    zzB_Select_Invoice_TempInvoice_zzE = CmUtils.StringUtils.Replace(@"
							---- Invoice_TempInvoice:
							select
								t.MyIdxSeq
								, iti.*
	                            , mgtid.GovTaxID mgtid_GovTaxID
	                            , mgtid.GovTaxName mgtid_GovTaxName
								----
								, mit.InvoiceType mit_InvoiceType
								, mit.InvoiceTypeName mit_InvoiceTypeName
								----
								, itg.InvoiceTGroupCode itg_InvoiceTGroupCode
								, itg.Spec_Prd_Type itg_Spec_Prd_Type
							from #tbl_Invoice_TempInvoice_Filter t --//[mylock]
								inner join Invoice_TempInvoice iti --//[mylock]
									on t.TInvoiceCode = iti.TInvoiceCode
	                            left join Mst_NNT mnnt --//[mylock]
		                            on iti.MST = mnnt.MST
	                            left join Mst_GovTaxID mgtid --//[mylock]
		                            on mnnt.GovTaxID = mgtid.GovTaxID
								left join Mst_InvoiceType mit --//[mylock]
									on iti.InvoiceType = mit.InvoiceType
								left join Invoice_TempGroup itg --//[mylock]
									on iti.InvoiceTGroupCode = itg.InvoiceTGroupCode
							order by t.MyIdxSeq asc
							;
						"
                        );
                    #endregion
                }
                ////
                string zzB_Select_Invoice_TempCustomField_zzE = "-- Nothing.";
                if (bGet_Invoice_TempCustomField)
                {
                    #region // bGet_Invoice_TempInvoice:
                    zzB_Select_Invoice_TempCustomField_zzE = CmUtils.StringUtils.Replace(@"
							---- Invoice_TempCustomField:
							select
								t.MyIdxSeq
								, itcf.*
							from #tbl_Invoice_TempInvoice_Filter t --//[mylock]
								inner join Invoice_TempCustomField itcf --//[mylock]
									on t.TInvoiceCode = itcf.TInvoiceCode
							order by t.MyIdxSeq asc
							;
						"
                        );
                    #endregion
                }
                ////
                string zzB_Where_strFilter_zzE = "";
                {
                    Hashtable htSpCols = new Hashtable();
                    {
                        #region // htSpCols:
                        ////
                        TUtils.CUtils.MyBuildHTSupportedColumns(
                            _cf.db // db
                            , ref htSpCols // htSupportedColumns
                            , "Invoice_TempInvoice" // strTableNameDB
                            , "Invoice_TempInvoice." // strPrefixStd
                            , "iti." // strPrefixAlias
                            );
                        ////
                        #endregion
                    }
                    zzB_Where_strFilter_zzE = CmUtils.SqlUtils.BuildWhere(
                        htSpCols // htSpCols
                        , strFt_WhereClause // strClause
                        , "@p_" // strParamPrefix
                        , ref alParamsCoupleSql // alParamsCoupleSql
                        );
                    zzB_Where_strFilter_zzE = (zzB_Where_strFilter_zzE.Length <= 0 ? "" : string.Format(" and ({0})", zzB_Where_strFilter_zzE));
                    alParamsCoupleError.AddRange(new object[]{
                        "zzB_Where_strFilter_zzE", zzB_Where_strFilter_zzE
                        });
                }
                ////
                strSqlGetData = CmUtils.StringUtils.Replace(
                    strSqlGetData
                    , "zzB_Where_strFilter_zzE", zzB_Where_strFilter_zzE
                    , "zzB_Select_Invoice_TempInvoice_zzE", zzB_Select_Invoice_TempInvoice_zzE
                    , "zzB_Select_Invoice_TempCustomField_zzE", zzB_Select_Invoice_TempCustomField_zzE
                    );
                #endregion

                #region // Get Data:
                DataSet dsGetData = _cf.db.ExecQuery(
                    strSqlGetData
                    , alParamsCoupleSql.ToArray()
                    );
                int nIdxTable = 0;
                dsGetData.Tables[nIdxTable++].TableName = "MySummaryTable";
                if (bGet_Invoice_TempInvoice)
                {
                    dsGetData.Tables[nIdxTable++].TableName = "Invoice_TempInvoice";
                }
                ////
                if (bGet_Invoice_TempCustomField)
                {
                    dsGetData.Tables[nIdxTable++].TableName = "Invoice_TempCustomField";
                }
                CmUtils.DataUtils.MoveDataTable(ref mdsFinal, ref dsGetData);
                #endregion

                // Return Good:
                TDALUtils.DBUtils.RollbackSafety(_cf.db); // Always Rollback.
                mdsFinal.AcceptChanges();
                return mdsFinal;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Rollback:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);

                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsFinal
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Rollback and Release resources:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);
                TDALUtils.DBUtils.ReleaseAllSemaphore(_cf.db_Sys, true);

                // Write ReturnLog:
                _cf.ProcessBizReturn_OutSide(
                    ref mdsFinal // mdsFinal
                    , strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    );
                #endregion
            }
        }

        public DataSet Invoice_TempInvoice_Get_New20191028(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            //// Filter:
            , string strFt_RecordStart
            , string strFt_RecordCount
            , string strFt_WhereClause
            //// Return:
            , string strRt_Cols_Invoice_TempInvoice
            , string strRt_Cols_Invoice_TempCustomField
            )
        {
            #region // Temp:
            DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            Stopwatch stopWatchFunc = new Stopwatch();
            //int nTidSeq = 0;
            DateTime dtimeSys = DateTime.UtcNow;
            bool bNeedTransaction = true;
            string strFunctionName = "Invoice_TempInvoice_Get";
            string strErrorCodeDefault = TError.ErridnInventory.Invoice_TempInvoice_Get;
            ArrayList alParamsCoupleSW = new ArrayList();
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				//// Filter
				, "strFt_RecordStart", strFt_RecordStart
                , "strFt_RecordCount", strFt_RecordCount
                , "strFt_WhereClause", strFt_WhereClause
				//// Return
				, "strRt_Cols_Invoice_TempInvoice", strRt_Cols_Invoice_TempInvoice
                , "strRt_Cols_Invoice_TempCustomField", strRt_Cols_Invoice_TempCustomField
                });
            #endregion

            try
            {
                #region // SW:				
                stopWatchFunc.Start();
                alParamsCoupleSW.AddRange(new object[]{
                    "strFunctionName", strFunctionName
                    , "stopWatchFunc.Start", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
                    });
                #endregion

                #region // Init:
                //_cf.db.LogUserId = _cf.sinf.strUserCode;
                if (bNeedTransaction) _cf.db.BeginTransaction();

                // Write RequestLog:
                _cf.ProcessBizReq_OutSide(
                    strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    , alParamsCoupleError // alParamsCoupleError
                    );

                // Sys_User_CheckAuthentication:
                //Sys_User_CheckAuthentication(
                //    ref alParamsCoupleError
                //    , strWAUserCode
                //    , strWAUserPassword
                //    );

                // Check Access/Deny:
                Sys_Access_CheckDenyV30(
                    ref alParamsCoupleError
                    , strWAUserCode
                    , strFunctionName
                    );
                #endregion

                #region // Check:
                //// Refine:
                long nFilterRecordStart = Convert.ToInt64(strFt_RecordStart);
                long nFilterRecordEnd = nFilterRecordStart + Convert.ToInt64(strFt_RecordCount) - 1;
                bool bGet_Invoice_TempInvoice = (strRt_Cols_Invoice_TempInvoice != null && strRt_Cols_Invoice_TempInvoice.Length > 0);
                bool bGet_Invoice_TempCustomField = (strRt_Cols_Invoice_TempCustomField != null && strRt_Cols_Invoice_TempCustomField.Length > 0);

                //// drAbilityOfUser:
                //DataRow drAbilityOfUser = myCache_ViewAbility_GetUserInfo(strWAUserCode);

                #endregion

                #region // Build Sql:
                ////
                ArrayList alParamsCoupleSql = new ArrayList();
                alParamsCoupleSql.AddRange(new object[] {
                    "@nFilterRecordStart", nFilterRecordStart
                    , "@nFilterRecordEnd", nFilterRecordEnd
                    });
                ////
                // drAbilityOfUser:
                DataRow drAbilityOfUser = Sys_User_GetAbilityViewOfUser(strWAUserCode);
                zzzzClauseSelect_Mst_NNT_ViewAbility_Get(
                    drAbilityOfUser // drAbilityOfUser
                    , ref alParamsCoupleError // alParamsCoupleError
                    );
                string strSqlGetData = CmUtils.StringUtils.Replace(@"
						---- #tbl_Invoice_TempInvoice_Filter_Draft:
						select distinct
							identity(bigint, 0, 1) MyIdxSeq
							, iti.TInvoiceCode
							, iti.CreateDTimeUTC 
						into #tbl_Invoice_TempInvoice_Filter_Draft
						from Invoice_TempInvoice iti --//[mylock]
                            inner join #tbl_Mst_NNT_ViewAbility t_MstNNT_View --//[mylock]
                                on iti.MST = t_MstNNT_View.MST
                            left join Invoice_TempCustomField itcf --//[mylock]
                                on iti.TInvoiceCode = itcf.TInvoiceCode
						where (1=1)
							zzB_Where_strFilter_zzE
						order by iti.CreateDTimeUTC desc
						;

						---- Summary:
						select Count(0) MyCount from #tbl_Invoice_TempInvoice_Filter_Draft t --//[mylock]
						;

						---- #tbl_Invoice_TempInvoice_Filter:
						select
							t.*
						into #tbl_Invoice_TempInvoice_Filter
						from #tbl_Invoice_TempInvoice_Filter_Draft t --//[mylock]
						where
							(t.MyIdxSeq >= @nFilterRecordStart)
							and (t.MyIdxSeq <= @nFilterRecordEnd)
						;

						-------- Invoice_TempInvoice --------:
						zzB_Select_Invoice_TempInvoice_zzE
						----------------------------------------

						-------- Invoice_TempCustomField --------:
						zzB_Select_Invoice_TempCustomField_zzE
						----------------------------------------

						---- Clear for debug:
						--drop table #tbl_Invoice_TempInvoice_Filter_Draft;
						--drop table #tbl_Invoice_TempInvoice_Filter;
					"
                    );
                ////
                string zzB_Select_Invoice_TempInvoice_zzE = "-- Nothing.";
                if (bGet_Invoice_TempInvoice)
                {
                    #region // bGet_Invoice_TempInvoice:
                    zzB_Select_Invoice_TempInvoice_zzE = CmUtils.StringUtils.Replace(@"
							---- Invoice_TempInvoice:
							select
								t.MyIdxSeq
								, iti.*
	                            , mgtid.GovTaxID mgtid_GovTaxID
	                            , mgtid.GovTaxName mgtid_GovTaxName
								----
								, mit.InvoiceType mit_InvoiceType
								, mit.InvoiceTypeName mit_InvoiceTypeName
								----
								, itg.InvoiceTGroupCode itg_InvoiceTGroupCode
								, itg.Spec_Prd_Type itg_Spec_Prd_Type
                                , itg.InvoiceTGroupName itg_InvoiceTGroupName
							from #tbl_Invoice_TempInvoice_Filter t --//[mylock]
								inner join Invoice_TempInvoice iti --//[mylock]
									on t.TInvoiceCode = iti.TInvoiceCode
	                            left join Mst_NNT mnnt --//[mylock]
		                            on iti.MST = mnnt.MST
	                            left join Mst_GovTaxID mgtid --//[mylock]
		                            on mnnt.GovTaxID = mgtid.GovTaxID
								left join Mst_InvoiceType mit --//[mylock]
									on iti.InvoiceType = mit.InvoiceType
								left join Invoice_TempGroup itg --//[mylock]
									on iti.InvoiceTGroupCode = itg.InvoiceTGroupCode
							order by t.MyIdxSeq asc
							;
						"
                        );
                    #endregion
                }
                ////
                string zzB_Select_Invoice_TempCustomField_zzE = "-- Nothing.";
                if (bGet_Invoice_TempCustomField)
                {
                    #region // bGet_Invoice_TempInvoice:
                    zzB_Select_Invoice_TempCustomField_zzE = CmUtils.StringUtils.Replace(@"
							---- Invoice_TempCustomField:
							select
								t.MyIdxSeq
								, itcf.*
							from #tbl_Invoice_TempInvoice_Filter t --//[mylock]
								inner join Invoice_TempCustomField itcf --//[mylock]
									on t.TInvoiceCode = itcf.TInvoiceCode
							order by t.MyIdxSeq asc
							;
						"
                        );
                    #endregion
                }
                ////
                string zzB_Where_strFilter_zzE = "";
                {
                    Hashtable htSpCols = new Hashtable();
                    {
                        #region // htSpCols:
                        ////
                        TUtils.CUtils.MyBuildHTSupportedColumns(
                            _cf.db // db
                            , ref htSpCols // htSupportedColumns
                            , "Invoice_TempInvoice" // strTableNameDB
                            , "Invoice_TempInvoice." // strPrefixStd
                            , "iti." // strPrefixAlias
                            );
                        ////
                        #endregion
                    }
                    zzB_Where_strFilter_zzE = CmUtils.SqlUtils.BuildWhere(
                        htSpCols // htSpCols
                        , strFt_WhereClause // strClause
                        , "@p_" // strParamPrefix
                        , ref alParamsCoupleSql // alParamsCoupleSql
                        );
                    zzB_Where_strFilter_zzE = (zzB_Where_strFilter_zzE.Length <= 0 ? "" : string.Format(" and ({0})", zzB_Where_strFilter_zzE));
                    alParamsCoupleError.AddRange(new object[]{
                        "zzB_Where_strFilter_zzE", zzB_Where_strFilter_zzE
                        });
                }
                ////
                strSqlGetData = CmUtils.StringUtils.Replace(
                    strSqlGetData
                    , "zzB_Where_strFilter_zzE", zzB_Where_strFilter_zzE
                    , "zzB_Select_Invoice_TempInvoice_zzE", zzB_Select_Invoice_TempInvoice_zzE
                    , "zzB_Select_Invoice_TempCustomField_zzE", zzB_Select_Invoice_TempCustomField_zzE
                    );
                #endregion

                #region // Get Data:
                DataSet dsGetData = _cf.db.ExecQuery(
                    strSqlGetData
                    , alParamsCoupleSql.ToArray()
                    );
                int nIdxTable = 0;
                dsGetData.Tables[nIdxTable++].TableName = "MySummaryTable";
                if (bGet_Invoice_TempInvoice)
                {
                    dsGetData.Tables[nIdxTable++].TableName = "Invoice_TempInvoice";
                }
                ////
                if (bGet_Invoice_TempCustomField)
                {
                    dsGetData.Tables[nIdxTable++].TableName = "Invoice_TempCustomField";
                }
                CmUtils.DataUtils.MoveDataTable(ref mdsFinal, ref dsGetData);
                #endregion

                // Return Good:
                TDALUtils.DBUtils.RollbackSafety(_cf.db); // Always Rollback.
                mdsFinal.AcceptChanges();
                return mdsFinal;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Rollback:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);

                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsFinal
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Rollback and Release resources:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);
                TDALUtils.DBUtils.ReleaseAllSemaphore(_cf.db_Sys, true);

                stopWatchFunc.Stop();
                alParamsCoupleSW.AddRange(new object[]{
                    "strFunctionName", strFunctionName
                    , "stopWatchFunc.Stop", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
                    , "stopWatchFunc.ElapsedMilliseconds", stopWatchFunc.ElapsedMilliseconds
                    });

                // Write ReturnLog:
                _cf.ProcessBizReturn_OutSide(
                    ref mdsFinal // mdsFinal
                    , strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    , alParamsCoupleSW // alParamsCoupleSW
                    );
                #endregion
            }
        }

        public DataSet Invoice_TempInvoice_Get_New20191109(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            //// Filter:
            , string strFt_RecordStart
            , string strFt_RecordCount
            , string strFt_WhereClause
            //// Return:
            , string strRt_Cols_Invoice_TempInvoice
            , string strRt_Cols_Invoice_TempCustomField
            )
        {
            #region // Temp:
            DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            Stopwatch stopWatchFunc = new Stopwatch();
            //int nTidSeq = 0;
            DateTime dtimeSys = DateTime.UtcNow;
            bool bNeedTransaction = true;
            string strFunctionName = "Invoice_TempInvoice_Get";
            string strErrorCodeDefault = TError.ErridnInventory.Invoice_TempInvoice_Get;
            ArrayList alParamsCoupleSW = new ArrayList();
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				//// Filter
				, "strFt_RecordStart", strFt_RecordStart
                , "strFt_RecordCount", strFt_RecordCount
                , "strFt_WhereClause", strFt_WhereClause
				//// Return
				, "strRt_Cols_Invoice_TempInvoice", strRt_Cols_Invoice_TempInvoice
                , "strRt_Cols_Invoice_TempCustomField", strRt_Cols_Invoice_TempCustomField
                });
            #endregion

            try
            {
                #region // SW:				
                stopWatchFunc.Start();
                alParamsCoupleSW.AddRange(new object[]{
                    "strFunctionName", strFunctionName
                    , "stopWatchFunc.Start", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
                    });
                #endregion

                #region // Init:
                //_cf.db.LogUserId = _cf.sinf.strUserCode;
                if (bNeedTransaction) _cf.db.BeginTransaction();

                // Write RequestLog:
                _cf.ProcessBizReq_OutSide(
                    strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    , alParamsCoupleError // alParamsCoupleError
                    );

                // Sys_User_CheckAuthentication:
                //Sys_User_CheckAuthentication(
                //    ref alParamsCoupleError
                //    , strWAUserCode
                //    , strWAUserPassword
                //    );

                // Check Access/Deny:
                Sys_Access_CheckDenyV30(
                    ref alParamsCoupleError
                    , strWAUserCode
                    , strFunctionName
                    );
                #endregion

                #region // Check:
                //// Refine:
                long nFilterRecordStart = Convert.ToInt64(strFt_RecordStart);
                long nFilterRecordEnd = nFilterRecordStart + Convert.ToInt64(strFt_RecordCount) - 1;
                bool bGet_Invoice_TempInvoice = (strRt_Cols_Invoice_TempInvoice != null && strRt_Cols_Invoice_TempInvoice.Length > 0);
                bool bGet_Invoice_TempCustomField = (strRt_Cols_Invoice_TempCustomField != null && strRt_Cols_Invoice_TempCustomField.Length > 0);

                //// drAbilityOfUser:
                //DataRow drAbilityOfUser = myCache_ViewAbility_GetUserInfo(strWAUserCode);

                #endregion

                #region // Build Sql:
                ////
                ArrayList alParamsCoupleSql = new ArrayList();
                alParamsCoupleSql.AddRange(new object[] {
                    "@nFilterRecordStart", nFilterRecordStart
                    , "@nFilterRecordEnd", nFilterRecordEnd
                    });
                ////
                // drAbilityOfUser:
                DataRow drAbilityOfUser = Sys_User_GetAbilityViewOfUser(strWAUserCode);
                zzzzClauseSelect_Mst_NNT_ViewAbility_Get(
                    drAbilityOfUser // drAbilityOfUser
                    , ref alParamsCoupleError // alParamsCoupleError
                    );
                string strSqlGetData = CmUtils.StringUtils.Replace(@"
						---- #tbl_Invoice_TempInvoice_Filter_Draft:
						select distinct
							identity(bigint, 0, 1) MyIdxSeq
							, iti.TInvoiceCode
							, iti.CreateDTimeUTC 
						into #tbl_Invoice_TempInvoice_Filter_Draft
						from Invoice_TempInvoice iti --//[mylock]
                            inner join #tbl_Mst_NNT_ViewAbility t_MstNNT_View --//[mylock]
                                on iti.MST = t_MstNNT_View.MST
                            left join Invoice_TempCustomField itcf --//[mylock]
                                on iti.TInvoiceCode = itcf.TInvoiceCode
						where (1=1)
							zzB_Where_strFilter_zzE
						order by iti.CreateDTimeUTC desc
						;

						---- Summary:
						select Count(0) MyCount from #tbl_Invoice_TempInvoice_Filter_Draft t --//[mylock]
						;

						---- #tbl_Invoice_TempInvoice_Filter:
						select
							t.*
						into #tbl_Invoice_TempInvoice_Filter
						from #tbl_Invoice_TempInvoice_Filter_Draft t --//[mylock]
						where
							(t.MyIdxSeq >= @nFilterRecordStart)
							and (t.MyIdxSeq <= @nFilterRecordEnd)
						;

						-------- Invoice_TempInvoice --------:
						zzB_Select_Invoice_TempInvoice_zzE
						----------------------------------------

						-------- Invoice_TempCustomField --------:
						zzB_Select_Invoice_TempCustomField_zzE
						----------------------------------------

						---- Clear for debug:
						--drop table #tbl_Invoice_TempInvoice_Filter_Draft;
						--drop table #tbl_Invoice_TempInvoice_Filter;
					"
                    );
                ////
                string zzB_Select_Invoice_TempInvoice_zzE = "-- Nothing.";
                if (bGet_Invoice_TempInvoice)
                {
                    #region // bGet_Invoice_TempInvoice:
                    zzB_Select_Invoice_TempInvoice_zzE = CmUtils.StringUtils.Replace(@"
							---- Invoice_TempInvoice:
							select
								t.MyIdxSeq
								, iti.*
	                            , mgtid.GovTaxID mgtid_GovTaxID
	                            , mgtid.GovTaxName mgtid_GovTaxName
								----
								, mit.InvoiceType mit_InvoiceType
								, mit.InvoiceTypeName mit_InvoiceTypeName
								----
								, itg.InvoiceTGroupCode itg_InvoiceTGroupCode
								, itg.Spec_Prd_Type itg_Spec_Prd_Type
                                , itg.InvoiceTGroupName itg_InvoiceTGroupName
                                , itg.VATType itg_VATType
							from #tbl_Invoice_TempInvoice_Filter t --//[mylock]
								inner join Invoice_TempInvoice iti --//[mylock]
									on t.TInvoiceCode = iti.TInvoiceCode
	                            left join Mst_NNT mnnt --//[mylock]
		                            on iti.MST = mnnt.MST
	                            left join Mst_GovTaxID mgtid --//[mylock]
		                            on mnnt.GovTaxID = mgtid.GovTaxID
								left join Mst_InvoiceType mit --//[mylock]
									on iti.InvoiceType = mit.InvoiceType
								left join Invoice_TempGroup itg --//[mylock]
									on iti.InvoiceTGroupCode = itg.InvoiceTGroupCode
							order by t.MyIdxSeq asc
							;
						"
                        );
                    #endregion
                }
                ////
                string zzB_Select_Invoice_TempCustomField_zzE = "-- Nothing.";
                if (bGet_Invoice_TempCustomField)
                {
                    #region // bGet_Invoice_TempInvoice:
                    zzB_Select_Invoice_TempCustomField_zzE = CmUtils.StringUtils.Replace(@"
							---- Invoice_TempCustomField:
							select
								t.MyIdxSeq
								, itcf.*
							from #tbl_Invoice_TempInvoice_Filter t --//[mylock]
								inner join Invoice_TempCustomField itcf --//[mylock]
									on t.TInvoiceCode = itcf.TInvoiceCode
							order by t.MyIdxSeq asc
							;
						"
                        );
                    #endregion
                }
                ////
                string zzB_Where_strFilter_zzE = "";
                {
                    Hashtable htSpCols = new Hashtable();
                    {
                        #region // htSpCols:
                        ////
                        TUtils.CUtils.MyBuildHTSupportedColumns(
                            _cf.db // db
                            , ref htSpCols // htSupportedColumns
                            , "Invoice_TempInvoice" // strTableNameDB
                            , "Invoice_TempInvoice." // strPrefixStd
                            , "iti." // strPrefixAlias
                            );
                        ////
                        #endregion
                    }
                    zzB_Where_strFilter_zzE = CmUtils.SqlUtils.BuildWhere(
                        htSpCols // htSpCols
                        , strFt_WhereClause // strClause
                        , "@p_" // strParamPrefix
                        , ref alParamsCoupleSql // alParamsCoupleSql
                        );
                    zzB_Where_strFilter_zzE = (zzB_Where_strFilter_zzE.Length <= 0 ? "" : string.Format(" and ({0})", zzB_Where_strFilter_zzE));
                    alParamsCoupleError.AddRange(new object[]{
                        "zzB_Where_strFilter_zzE", zzB_Where_strFilter_zzE
                        });
                }
                ////
                strSqlGetData = CmUtils.StringUtils.Replace(
                    strSqlGetData
                    , "zzB_Where_strFilter_zzE", zzB_Where_strFilter_zzE
                    , "zzB_Select_Invoice_TempInvoice_zzE", zzB_Select_Invoice_TempInvoice_zzE
                    , "zzB_Select_Invoice_TempCustomField_zzE", zzB_Select_Invoice_TempCustomField_zzE
                    );
                #endregion

                #region // Get Data:
                DataSet dsGetData = _cf.db.ExecQuery(
                    strSqlGetData
                    , alParamsCoupleSql.ToArray()
                    );
                int nIdxTable = 0;
                dsGetData.Tables[nIdxTable++].TableName = "MySummaryTable";
                if (bGet_Invoice_TempInvoice)
                {
                    dsGetData.Tables[nIdxTable++].TableName = "Invoice_TempInvoice";
                }
                ////
                if (bGet_Invoice_TempCustomField)
                {
                    dsGetData.Tables[nIdxTable++].TableName = "Invoice_TempCustomField";
                }
                CmUtils.DataUtils.MoveDataTable(ref mdsFinal, ref dsGetData);
                #endregion

                // Return Good:
                TDALUtils.DBUtils.RollbackSafety(_cf.db); // Always Rollback.
                mdsFinal.AcceptChanges();
                return mdsFinal;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Rollback:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);

                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsFinal
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Rollback and Release resources:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);
                TDALUtils.DBUtils.ReleaseAllSemaphore(_cf.db_Sys, true);

                stopWatchFunc.Stop();
                alParamsCoupleSW.AddRange(new object[]{
                    "strFunctionName", strFunctionName
                    , "stopWatchFunc.Stop", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
                    , "stopWatchFunc.ElapsedMilliseconds", stopWatchFunc.ElapsedMilliseconds
                    });

                // Write ReturnLog:
                _cf.ProcessBizReturn_OutSide(
                    ref mdsFinal // mdsFinal
                    , strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    , alParamsCoupleSW // alParamsCoupleSW
                    );
                #endregion
            }
        }

        public DataSet WAS_Invoice_TempInvoice_Get_New20190705(
            ref ArrayList alParamsCoupleError
            , RQ_Invoice_TempInvoice objRQ_Invoice_TempInvoice
            ////
            , out RT_Invoice_TempInvoice objRT_Invoice_TempInvoice
            )
        {
            #region // Temp:
            string strTid = objRQ_Invoice_TempInvoice.Tid;
            objRT_Invoice_TempInvoice = new RT_Invoice_TempInvoice();
            DataSet mdsResult = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            DateTime dtimeSys = DateTime.UtcNow;
            //DataSet mdsExec = null;
            //DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(objRQ_Invoice_TempInvoice.Tid);
            //int nTidSeq = 0;
            //bool bNeedTransaction = true;
            string strFunctionName = "Invoice_TempInvoice_Get";
            string strErrorCodeDefault = TError.ErridnInventory.Invoice_TempInvoice_Get;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
				});
            #endregion

            try
            {
                #region // Init:
                #endregion

                #region // Refine and Check Input:
                List<MySummaryTable> lst_MySummaryTable = new List<MySummaryTable>();
                List<Invoice_TempInvoice> lst_Invoice_TempInvoice = new List<Invoice_TempInvoice>();
                List<Invoice_TempCustomField> lst_Invoice_TempCustomField = new List<Invoice_TempCustomField>();
                bool bGet_Invoice_TempInvoice = (objRQ_Invoice_TempInvoice.Rt_Cols_Invoice_TempInvoice != null && objRQ_Invoice_TempInvoice.Rt_Cols_Invoice_TempInvoice.Length > 0);
                bool bGet_Invoice_TempCustomField = (objRQ_Invoice_TempInvoice.Rt_Cols_Invoice_TempCustomField != null && objRQ_Invoice_TempInvoice.Rt_Cols_Invoice_TempCustomField.Length > 0);
                #endregion

                #region // WS_Invoice_TempInvoice_Get:
                mdsResult = Invoice_TempInvoice_Get_New20191109(
                    objRQ_Invoice_TempInvoice.Tid // strTid
                    , objRQ_Invoice_TempInvoice.GwUserCode // strGwUserCode
                    , objRQ_Invoice_TempInvoice.GwPassword // strGwPassword
                    , objRQ_Invoice_TempInvoice.WAUserCode // strUserCode
                    , objRQ_Invoice_TempInvoice.WAUserPassword // strUserPassword
                    , ref alParamsCoupleError // alParamsCoupleError
                                              //// Filter:
                    , objRQ_Invoice_TempInvoice.Ft_RecordStart // strFt_RecordStart
                    , objRQ_Invoice_TempInvoice.Ft_RecordCount // strFt_RecordCount
                    , objRQ_Invoice_TempInvoice.Ft_WhereClause // strFt_WhereClause
                                                               //// Return:
                    , objRQ_Invoice_TempInvoice.Rt_Cols_Invoice_TempInvoice // strRt_Cols_Invoice_TempInvoice
                    , objRQ_Invoice_TempInvoice.Rt_Cols_Invoice_TempCustomField // strRt_Cols_Invoice_TempCustomField
                    );
                #endregion

                #region // GetData:
                if (!CmUtils.CMyDataSet.HasError(mdsResult))
                {
                    ////
                    DataTable dt_MySummaryTable = mdsResult.Tables["MySummaryTable"].Copy();
                    lst_MySummaryTable = TUtils.DataTableCmUtils.ToListof<MySummaryTable>(dt_MySummaryTable);
                    objRT_Invoice_TempInvoice.MySummaryTable = lst_MySummaryTable[0];
                    ////
                    if (bGet_Invoice_TempInvoice)
                    {
                        ////
                        DataTable dt_Invoice_TempInvoice = mdsResult.Tables["Invoice_TempInvoice"].Copy();
                        lst_Invoice_TempInvoice = TUtils.DataTableCmUtils.ToListof<Invoice_TempInvoice>(dt_Invoice_TempInvoice);
                        objRT_Invoice_TempInvoice.Lst_Invoice_TempInvoice = lst_Invoice_TempInvoice;
                    }

                    ////
                    if (bGet_Invoice_TempCustomField)
                    {
                        ////
                        DataTable dt_Invoice_TempCustomField = mdsResult.Tables["Invoice_TempCustomField"].Copy();
                        lst_Invoice_TempCustomField = TUtils.DataTableCmUtils.ToListof<Invoice_TempCustomField>(dt_Invoice_TempCustomField);
                        objRT_Invoice_TempInvoice.Lst_Invoice_TempCustomField = lst_Invoice_TempCustomField;
                    }
                }
                #endregion

                // Return Good:
                return mdsResult;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsResult
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Write ReturnLog:
                //_cf.ProcessBizReturn(
                //	ref mdsResult // mdsFinal
                //	, strTid // strTid
                //	, strFunctionName // strFunctionName
                //	);
                #endregion
            }
        }
        
        private void Invoice_TempInvoice_SaveX_New20190705(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            , DateTime dtimeSys
            ////
            , object objFlagIsDelete
            ////
            , object objTInvoiceCode
            , object objMST
            , object objPaymentMethodCode
            , object objInvoiceType
            , object objTInvoiceName
            , object objFormNo
            , object objSign
            , object objNNTName
            , object objNNTAddress
            , object objNNTPhone
            , object objNNTFax
            , object objNNTEmail
            , object objNNTWebsite
            , object objNNTAccNo
            , object objNNTBankName
            , object objLogoFilePath
            , object objTInvoiceBody
            , object objWatermarkFilePath
            , object objInvoiceTGroupCode
            , object objRemark
            ////
            //, object objTInvoiceFilePathXML
            ////
            , DataSet dsData
            )
        {
            #region // Temp:
            DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            //int nTidSeq = 0;
            //bool bMyDebugSql = false;
            string strFunctionName = "Invoice_TempInvoice_SaveX";
            alParamsCoupleError.AddRange(new object[]{
                    "strFunctionName", strFunctionName
                    , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
                    ////
                    , "objFlagIsDelete",objFlagIsDelete
				    ////
                    , "objTInvoiceCode", objTInvoiceCode
                    , "objMST", objMST
                    , "objPaymentMethodCode", objPaymentMethodCode
                    , "objInvoiceType", objInvoiceType
                    , "objTInvoiceName", objTInvoiceName
                    , "objFormno", objFormNo
                    , "objSign", objSign
                    , "objNNTName", objNNTName
                    , "objNNTAddress", objNNTAddress
                    , "objNNTPhone", objNNTPhone
                    , "objNNTFax", objNNTFax
                    , "objNNTEmail", objNNTEmail
                    , "objNNTWebsite", objNNTWebsite
                    , "objNNTAccNo", objNNTAccNo
                    , "objNNTBankName", objNNTBankName
                    , "objLogoFilePath", objLogoFilePath
                    , "objTInvoiceBody", objTInvoiceBody
                    , "objWatermarkFilePath", objWatermarkFilePath
                    , "objInvoiceTGroupCode", objInvoiceTGroupCode
                    , "objRemark", objRemark
                    ////
                    //, "objTInvoiceFilePathXML", objTInvoiceFilePathXML
                    });
            //ArrayList alPCErrEx = new ArrayList();
            ////
            Hashtable htParamsSql = new Hashtable();
            #endregion

            #region // Convert Input:
            alParamsCoupleError.AddRange(new object[]{
                "Check.dsData", TJson.JsonConvert.SerializeObject(dsData)
                });
            #endregion

            #region // Refine and Check Input:
            ////
            bool bIsDelete = CmUtils.StringUtils.StringEqual(objFlagIsDelete, TConst.Flag.Yes);
            ////
            string strTInvoiceCode = TUtils.CUtils.StdParam(objTInvoiceCode);
            string strMST = TUtils.CUtils.StdParam(objMST);
            string strPaymentMethodCode = TUtils.CUtils.StdParam(objPaymentMethodCode);
            string strInvoiceType = TUtils.CUtils.StdParam(objInvoiceType);
            string strTInvoiceName = string.Format("{0}", objTInvoiceName);
            string strFormNo = TUtils.CUtils.StdParam(objFormNo);
            string strSign = string.Format("{0}", objSign);
            string strNNTName = string.Format("{0}", objNNTName);
            string strNNTAddress = string.Format("{0}", objNNTAddress);
            string strNNTPhone = string.Format("{0}", objNNTPhone);
            string strNNTFax = string.Format("{0}", objNNTFax);
            string strNNTEmail = string.Format("{0}", objNNTEmail);
            string strNNTWebsite = string.Format("{0}", objNNTWebsite);
            string strNNTAccNo = string.Format("{0}", objNNTAccNo);
            string strNNTBankName = string.Format("{0}", objNNTBankName);
            string strLogoFilePath = string.Format("{0}", objLogoFilePath);
            string strTInvoiceBody = string.Format("{0}", objTInvoiceBody);
            string strWatermarkFilePath = string.Format("{0}", objWatermarkFilePath);
            string strInvoiceTGroupCode = TUtils.CUtils.StdParam(objInvoiceTGroupCode);
            string strRemark = string.Format("{0}", objRemark);
            ////
            //string strTInvoiceFilePathXML = string.Format("{0}", objTInvoiceFilePathXML).Trim();
            ////
            string strCreateDTimeUTC = null;
            string strCreateBy = null;
            ////
            DataTable dtDB_Invoice_TempInvoice = null;
            {
                ////
                if (strTInvoiceCode == null || strTInvoiceCode.Length < 1)
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.strTInvoiceCode", strTInvoiceCode
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Invoice_TempInvoice_SaveX_InvalidTInvoiceCode
                        , null
                        , alParamsCoupleError.ToArray()
                        );
                }
                ////
                Invoice_TempInvoice_CheckDB(
                    ref alParamsCoupleError // alParamsCoupleError
                    , strTInvoiceCode // objShipNo
                    , "" // strFlagExistToCheck
                    , "" // strTInvoiceStatusListToCheck
                    , "" // strFlagActiveListToCheck
                    , out dtDB_Invoice_TempInvoice // dtDB_Invoice_TempInvoice
                    );
                ////
                if (dtDB_Invoice_TempInvoice.Rows.Count < 1) // Chưa tồn tại
                {
                    if (bIsDelete)
                    {
                        goto MyCodeLabel_Done; // Thành công
                    }
                    else
                    {
                        // Nothing
                    }
                }
                else // Đã tồn tại Invoice_TempInvoice:
                {
                    if (!CmUtils.StringUtils.StringEqualIgnoreCase(dtDB_Invoice_TempInvoice.Rows[0]["TInvoiceStatus"], TConst.TInvoiceStatus.Pending))
                    {
                        alParamsCoupleError.AddRange(new object[]{
                            "Check.DB.TInvoiceStatus", dtDB_Invoice_TempInvoice.Rows[0]["TInvoiceStatus"]
                            , "Check.InputStatus.Expected", TConst.TInvoiceStatus.Pending
                            });
                        throw CmUtils.CMyException.Raise(
                            TError.ErridnInventory.Invoice_TempInvoice_SaveX_StatusNotMatched
                            , null
                            , alParamsCoupleError.ToArray()
                            );
                    }
                    else
                    {
                        strCreateDTimeUTC = TUtils.CUtils.StdDTime(dtDB_Invoice_TempInvoice.Rows[0]["CreateDTimeUTC"]);
                        strCreateBy = TUtils.CUtils.StdParam(dtDB_Invoice_TempInvoice.Rows[0]["CreateBy"]);
                    }
                }
                strCreateDTimeUTC = string.IsNullOrEmpty(strCreateDTimeUTC) ? dtimeSys.ToString("yyyy-MM-dd HH:mm:ss") : strCreateDTimeUTC;
                strCreateBy = string.IsNullOrEmpty(strCreateBy) ? strWAUserCode : strCreateBy;
                ////
                myCache_ViewAbility_CheckAccessMSTWrite(
                    ref alParamsCoupleError // alParamsCoupleError
                    , strWAUserCode // strWAUserCode
                    , strMST // strMST
                    );
                ////
                DataTable dtDB_Mst_PaymentMethods = null;

                Mst_PaymentMethods_CheckDB(
                    ref alParamsCoupleError // alParamsCoupleError
                    , strPaymentMethodCode // objPaymentMethodCode
                    , TConst.Flag.Yes // strFlagExistToCheck
                    , TConst.Flag.Active // strFlagActiveListToCheck
                    , out dtDB_Mst_PaymentMethods // dtDB_Mst_PaymentMethods
                    );
                ////
                DataTable dtDB_Mst_InvoiceType = null;

                Mst_InvoiceType_CheckDB(
                    ref alParamsCoupleError // alParamsCoupleError
                    , strInvoiceType // objPaymentMethodCode
                    , TConst.Flag.Yes // strFlagExistToCheck
                    , TConst.Flag.Active // strFlagActiveListToCheck
                    , out dtDB_Mst_InvoiceType // dtDB_Mst_InvoiceType
                    );
                ////
                if (strFormNo == null || strFormNo.Length < 1)
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.strFormNo", strFormNo
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Invoice_TempInvoice_SaveX_InvalidFormNo
                        , null
                        , alParamsCoupleError.ToArray()
                        );
                }
                ////
                Invoice_TempInvoice_CheckFormNo(
                    ref alParamsCoupleError // alParamsCoupleError
                    , strFormNo // objFormNo
                    , strMST // objMST
                    , strTInvoiceCode // objTInvoiceCode               
                    );
                ////
                Invoice_TempInvoice_CheckFormatFormNo(
                    ref alParamsCoupleError // alParamsCoupleError
                    , strFormNo // objFormNo           
                    );
                ////
                if (strSign == null || strSign.Length < 1)
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.strSign", strSign
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Invoice_TempInvoice_SaveX_InvalidSign
                        , null
                        , alParamsCoupleError.ToArray()
                        );
                }
                ////
                DateTime dtCreateInvoiceUTC = Convert.ToDateTime(strCreateDTimeUTC);

                Invoice_TempInvoice_CheckFormatSign(
                    ref alParamsCoupleError // alParamsCoupleError
                    , strSign // objFormNo
                    , dtCreateInvoiceUTC.ToString("yy")
                    );
                //string strFormNo_Calc = "";
                //GetFormNo(
                //    ref alParamsCoupleError // alParamsCoupleError
                //    , strInvoiceType  // strInvoiceType
                //    , strMST  // objMST
                //    , ref strFormNo_Calc // strFormNo_Calc
                //    );
                //////
                //if(!CmUtils.StringUtils.StringEqualIgnoreCase(strFormNo_Calc, strFormNo))
                //{
                //    alParamsCoupleError.AddRange(new object[]{
                //        "Check.strFormNo", strFormNo
                //        , "Check.FormNo.Expected", strFormNo_Calc
                //        });
                //    throw CmUtils.CMyException.Raise(
                //        TError.ErridnInventory.Invoice_TempInvoice_SaveX_InvalidFormNo
                //        , null
                //        , alParamsCoupleError.ToArray()
                //        );

                //}
                ////
                DataTable dtDB_Invoice_TempGroup = null;

                Invoice_TempGroup_CheckDB(
                    ref alParamsCoupleError // alParamsCoupleError
                    , strInvoiceTGroupCode // strInvoiceTGroupCode
                    , TConst.Flag.Yes // strFlagExistToCheck
                    , TConst.Flag.Active // strFlagActiveListToCheck
                    , out dtDB_Invoice_TempGroup // dtDB_Invoice_TempGroup
                    );
                ////
                if (!CmUtils.StringUtils.StringEqualIgnoreCase(dtDB_Invoice_TempGroup.Rows[0]["MST"], TConst.BizMix.MSTALL)
                    && !CmUtils.StringUtils.StringEqualIgnoreCase(dtDB_Invoice_TempGroup.Rows[0]["MST"], strMST))
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.strInvoiceTGroupCode", strInvoiceTGroupCode
                        , "Check.DB.TGroup.InvoiceTGroupCode", dtDB_Invoice_TempGroup.Rows[0]["InvoiceTGroupCode"]
                        , "Check.Input.strMST", strMST
                        , "Check.Expected.TGroup.MST", string.Format("{0} or {1}", TConst.BizMix.MSTALL, strMST).Trim()
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Invoice_TempInvoice_SaveX_NNTNotUsedInvoiceTGroupCode
                        , null
                        , alParamsCoupleError.ToArray()
                        );

                }
                ////
            }
            #endregion

            #region // SaveTemp Invoice_Invoice:
            {
                ////
                TUtils.CUtils.MyBuildDBDT_Common(
                    _cf.db
                    , "#input_Invoice_TempInvoice"
                    , new object[]{
                        "TInvoiceCode", TConst.BizMix.Default_DBColType,
                        "NetworkID", TConst.BizMix.Default_DBColType,
                        "MST", TConst.BizMix.Default_DBColType,
                        "PaymentMethodCode", TConst.BizMix.Default_DBColType,
                        "InvoiceType", TConst.BizMix.Default_DBColType,
                        "TInvoiceName", TConst.BizMix.Default_DBColType,
                        "FormNo", TConst.BizMix.Default_DBColType,
                        "Sign", TConst.BizMix.Default_DBColType,
                        "TInvoiceFilePathXML", TConst.BizMix.Default_DBColType,
                        "EffDateStart", TConst.BizMix.Default_DBColType,
                        "EffDateEnd", TConst.BizMix.Default_DBColType,
                        "NNTName", TConst.BizMix.Default_DBColType,
                        "NNTAddress", TConst.BizMix.Default_DBColType,
                        "NNTPhone", TConst.BizMix.Default_DBColType,
                        "NNTFax", TConst.BizMix.Default_DBColType,
                        "NNTEmail", TConst.BizMix.Default_DBColType,
                        "NNTWebsite", TConst.BizMix.Default_DBColType,
                        "NNTAccNo", TConst.BizMix.Default_DBColType,
                        "NNTBankName", TConst.BizMix.Default_DBColType,
                        "LogoFilePath", TConst.BizMix.Max_DBCol,
                        "TInvoiceBody", TConst.BizMix.Max_DBCol,
                        "WatermarkFilePath", TConst.BizMix.Max_DBCol,
                        "InvoiceTGroupCode", TConst.BizMix.Max_DBCol,
                        "StartInvoiceNo", TConst.BizMix.Default_DBColType,
                        "EndInvoiceNo", TConst.BizMix.Default_DBColType,
                        "CreateDTimeUTC", TConst.BizMix.Default_DBColType,
                        "CreateBy", TConst.BizMix.Default_DBColType,
                        "LUDTimeUTC", TConst.BizMix.Default_DBColType,
                        "LUBy", TConst.BizMix.Default_DBColType,
                        "Remark", TConst.BizMix.Default_DBColType,
                        "TInvoiceStatus", TConst.BizMix.Default_DBColType,
                        "FlagActive", TConst.BizMix.Default_DBColType,
                        "UpdQtyInvoiceNoDTimeUTC", TConst.BizMix.Default_DBColType,
                        "UpdQtyInvoiceNoBy", TConst.BizMix.Default_DBColType,
                        "IssuedDTimeUTC", TConst.BizMix.Default_DBColType,
                        "Issuedby", TConst.BizMix.Default_DBColType,
                        "InActiveDTimeUTC", TConst.BizMix.Default_DBColType,
                        "InActiveBy", TConst.BizMix.Default_DBColType,
                        "LogLUDTimeUTC", TConst.BizMix.Default_DBColType,
                        "LogLUBy", TConst.BizMix.Default_DBColType,
                        }
                    , new object[]{
                            new object[]{
                                strTInvoiceCode, // TInvoiceCode
                                nNetworkID, // NetworkID
                                strMST, // strMST
                                strPaymentMethodCode, // PaymentMethodCode
                                strInvoiceType, // InvoiceType
                                strTInvoiceName, // TInvoiceName
                                strFormNo, // FormNo
                                strSign, // Sign
                                null, // TInvoiceFilePathXML
                                null, // EffDateStart
                                null, // EffDateEnd
                                strNNTName, // NNTName
                                strNNTAddress, // NNTAddress
                                strNNTPhone, // NNTPhone
                                strNNTFax, // NNTFax
                                strNNTEmail, // NNTEmail
                                strNNTWebsite, // NNTWebsite
                                strNNTAccNo, // NNTAccNo
                                strNNTBankName, // NNTBankName
                                strLogoFilePath, // LogoFilePath
                                strTInvoiceBody, // TInvoiceBody
                                strWatermarkFilePath, // WatermarkFilePath
                                strInvoiceTGroupCode, // InvoiceTGroupCode
                                0.0, // StartInvoiceNo
                                0.0, // EndInvoiceNo
                                strCreateDTimeUTC, // CreateDTimeUTC
                                strWAUserCode, // CreateBy
                                dtimeSys.ToString("yyyy-MM-dd HH:mm:ss"), // LUDTimeUTC
                                strWAUserCode, // LUBy
                                strRemark, // Remark
                                TConst.TInvoiceStatus.Pending, // TInvoiceStatus
                                TConst.Flag.Active, // FlagActive
                                null, // UpdQtyInvoiceNoDTimeUTC
                                null, // UpdQtyInvoiceNoBy
                                null, // IssuedDTimeUTC
                                null, // Issuedby
                                null, // InActiveDTimeUTC
                                null, // InActiveBy
                                dtimeSys.ToString("yyyy-MM-dd HH:mm:ss"), // LogLUDTimeUTC
                                strWAUserCode, // LogLUBy
								}
                        }
                    );

            }
            #endregion
            
            #region // Refine and Check Invoice_TempCustomField:
            ////

            DataTable dtInput_Invoice_TempCustomField = null;
            if (!bIsDelete)
            {
                ////
                string strTableCheck = "Invoice_TempCustomField";
                ////
                if (!dsData.Tables.Contains(strTableCheck))
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.TableName", strTableCheck
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Invoice_TempInvoiceCheckDB_CustomFieldNotFound
                        , null
                        , alParamsCoupleError.ToArray()
                        );
                }
                dtInput_Invoice_TempCustomField = dsData.Tables[strTableCheck];
                ////
                //if (dtInput_KUNN_ValLaiSuatChangeHist.Rows.Count < 1)
                //{
                //	alParamsCoupleError.AddRange(new object[]{
                //		"Check.TableName", strTableCheck
                //		});
                //	throw CmUtils.CMyException.Raise(
                //		TError.ErrTCGQLTV.Mst_Spec_Add_Input_KUNN_ValLaiSuatChangeHistTblInvalid
                //		, null
                //		, alParamsCoupleError.ToArray()
                //		);
                //}
                ////
                TUtils.CUtils.StdDataInTable(
                    dtInput_Invoice_TempCustomField // dtData
                    , "StdParam", "DBFieldName" // arrstrCouple
                    , "", "TCFType" // arrstrCouple
                    , "", "DisplayName" // arrstrCouple
                    );
                ////
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_TempCustomField, "TInvoiceCode", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_TempCustomField, "NetworkID", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_TempCustomField, "FlagActive", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_TempCustomField, "LogLUDTimeUTC", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_TempCustomField, "LogLUBy", typeof(object));
                ////
                for (int nScan = 0; nScan < dtInput_Invoice_TempCustomField.Rows.Count; nScan++)
                {
                    ////
                    DataRow drScan = dtInput_Invoice_TempCustomField.Rows[nScan];
                    
                    string strDBFieldName = TUtils.CUtils.StdParam(drScan["DBFieldName"]);
                    string strTCFType = string.Format("{0}", drScan["TCFType"]).Trim();
                    string strDisplayName = string.Format("{0}", drScan["DisplayName"]).Trim();

                    ////
                    if (strDBFieldName == null || strDBFieldName.Length < 1)
                    {
                        alParamsCoupleError.AddRange(new object[]{
                            "Check.strTInvoiceCode", strTInvoiceCode
                            , "Check.strDBFieldName", strDBFieldName
                            , "Check.strDBFieldName", strDBFieldName
                            });
                        throw CmUtils.CMyException.Raise(
                            TError.ErridnInventory.Invoice_TempInvoice_SaveX_InvalidDBFieldName
                            , null
                            , alParamsCoupleError.ToArray()
                            );
                    }
                    ////
                    if (strTCFType == null || strTCFType.Length < 1)
                    {
                        alParamsCoupleError.AddRange(new object[]{
                            "Check.strTInvoiceCode", strTInvoiceCode
                            , "Check.strDBFieldName", strDBFieldName
                            , "Check.strTCFType", strTCFType
                            });
                        throw CmUtils.CMyException.Raise(
                            TError.ErridnInventory.Invoice_TempInvoice_SaveX_InvalidTCFType
                            , null
                            , alParamsCoupleError.ToArray()
                            );
                    }
                    ////
                    if (strDisplayName == null || strDisplayName.Length < 1)
                    {
                        alParamsCoupleError.AddRange(new object[]{
                            "Check.strTInvoiceCode", strTInvoiceCode
                            , "Check.strDBFieldName", strDBFieldName
                            , "Check.strDisplayName", strDisplayName
                            });
                        throw CmUtils.CMyException.Raise(
                            TError.ErridnInventory.Invoice_TempInvoice_SaveX_InvalidDisplayName
                            , null
                            , alParamsCoupleError.ToArray()
                            );
                    }
                    ////
                    //DataTable dtDB_Invoice_TempCustomField = null;

                    //Invoice_TempCustomField_CheckDB(
                    //    ref alParamsCoupleError // alParamsCoupleError
                    //    , strTInvoiceCode // objTInvoiceCode
                    //    , strDBFieldName // objDBFieldName
                    //    , "" // strFlagExistToCheck
                    //    , "" // strFlagActiveListToCheck
                    //    , out dtDB_Invoice_TempCustomField // dtDB_Invoice_TempCustomField
                    //    );
                    ////
                    drScan["TInvoiceCode"] = strTInvoiceCode;
                    drScan["DBFieldName"] = strDBFieldName;
                    drScan["NetworkID"] = nNetworkID;
                    drScan["TCFType"] = strTCFType;
                    drScan["DisplayName"] = strDisplayName;
                    drScan["FlagActive"] = TConst.Flag.Active;
                    drScan["LogLUDTimeUTC"] = dtimeSys.ToString("yyyy-MM-dd HH:mm:ss");
                    drScan["LogLUBy"] = strWAUserCode;


                }
            }
            #endregion

            #region //// SaveTemp Invoice_TempCustomField:
            {
                TUtils.CUtils.MyBuildDBDT_Common(
                    _cf.db
                    , "#input_Invoice_TempCustomField"
                    , new object[]{
                            "TInvoiceCode", TConst.BizMix.Default_DBColType,
                            "DBFieldName", TConst.BizMix.Default_DBColType,
                            "NetworkID", TConst.BizMix.Default_DBColType,
                            "TCFType", TConst.BizMix.Default_DBColType,
                            "DisplayName", TConst.BizMix.Default_DBColType,
                            "FlagActive", TConst.BizMix.Default_DBColType,
                            "LogLUDTimeUTC", TConst.BizMix.Default_DBColType,
                            "LogLUBy", TConst.BizMix.Default_DBColType,
                        }
                    , dtInput_Invoice_TempCustomField
                    );
            }
            #endregion

            #region // SaveDB:
            {
                //// Clear All:
                {
                    string strSqlDelete = CmUtils.StringUtils.Replace(@"
                                ---- Invoice_TempCustomField:
							    delete t
							    from Invoice_TempCustomField t --//[mylock]
								    inner join #input_Invoice_TempInvoice f --//[mylock]
									    on t.TInvoiceCode = f.TInvoiceCode
							    where (1=1)
							    ;

							    ---- Invoice_TempInvoice:
							    delete t
							    from Invoice_TempInvoice t --//[mylock]
								    inner join #input_Invoice_TempInvoice f --//[mylock]
									    on t.TInvoiceCode = f.TInvoiceCode
							    where (1=1)
							    ;
						");
                    _cf.db.ExecQuery(
                        strSqlDelete
                        );
                }

                //// Insert All:
                if (!bIsDelete)
                {
                    #region // Insert:
                    {

                        ////
                        string zzzzClauseInsert_Invoice_TempInvoice_zSave = CmUtils.StringUtils.Replace(@"
                                ---- Invoice_TempInvoice:
                                insert into Invoice_TempInvoice
                                (	
	                                TInvoiceCode
	                                , NetworkID
	                                , MST
	                                , PaymentMethodCode
	                                , InvoiceType
	                                , TInvoiceName
	                                , FormNo
	                                , Sign
	                                , TInvoiceFilePathXML
	                                , EffDateStart
	                                , EffDateEnd
	                                , NNTName
	                                , NNTAddress
                                    , NNTPhone
                                    , NNTFax
                                    , NNTEmail
                                    , NNTWebsite
                                    , NNTAccNo
                                    , NNTBankName
                                    , LogoFilePath
	                                , TInvoiceBody
	                                , WatermarkFilePath
	                                , InvoiceTGroupCode
	                                , StartInvoiceNo
	                                , EndInvoiceNo
	                                , CreateDTimeUTC
	                                , CreateBy
	                                , LUDTimeUTC
	                                , LUBy
	                                , Remark
	                                , TInvoiceStatus
	                                , FlagActive
	                                , UpdQtyInvoiceNoDTimeUTC
	                                , UpdQtyInvoiceNoBy
	                                , IssuedDTimeUTC
	                                , Issuedby
	                                , InActiveDTimeUTC
	                                , InActiveBy
	                                , LogLUDTimeUTC
	                                , LogLUBy
                                )
                                select
	                                t.TInvoiceCode
	                                , t.NetworkID
	                                , t.MST
	                                , t.PaymentMethodCode
	                                , t.InvoiceType
	                                , t.TInvoiceName
	                                , t.FormNo
	                                , t.Sign
	                                , t.TInvoiceFilePathXML
	                                , t.EffDateStart
	                                , t.EffDateEnd
	                                , t.NNTName
	                                , t.NNTAddress
	                                , t.NNTPhone
	                                , t.NNTFax
	                                , t.NNTEmail
	                                , t.NNTWebsite
	                                , t.NNTAccNo
	                                , t.NNTBankName
	                                , t.LogoFilePath
	                                , t.TInvoiceBody
	                                , t.WatermarkFilePath
	                                , t.InvoiceTGroupCode
	                                , t.StartInvoiceNo
	                                , t.EndInvoiceNo
	                                , t.CreateDTimeUTC
	                                , t.CreateBy
	                                , t.LUDTimeUTC
	                                , t.LUBy
	                                , t.Remark
	                                , t.TInvoiceStatus
	                                , t.FlagActive
	                                , t.UpdQtyInvoiceNoDTimeUTC
	                                , t.UpdQtyInvoiceNoBy
	                                , t.IssuedDTimeUTC
	                                , t.Issuedby
	                                , t.InActiveDTimeUTC
	                                , t.InActiveBy
	                                , t.LogLUDTimeUTC
	                                , t.LogLUBy
                                from #input_Invoice_TempInvoice t --//[mylock]
                                ;
                            ");

                        /////
                        string zzzzClauseInsert_Invoice_TempCustomField_zSave = CmUtils.StringUtils.Replace(@"
                                ---- Invoice_TempCustomField:  
                                insert into Invoice_TempCustomField(
	                                TInvoiceCode
	                                , DBFieldName
	                                , NetworkID
	                                , TCFType
	                                , DisplayName
	                                , FlagActive
	                                , LogLUDTimeUTC
	                                , LogLUBy
                                )
                                select 
	                                t.TInvoiceCode
	                                , t.DBFieldName
	                                , t.NetworkID
	                                , t.TCFType
	                                , t.DisplayName
	                                , t.FlagActive
	                                , t.LogLUDTimeUTC
	                                , t.LogLUBy
                                from #input_Invoice_TempCustomField t
                            ");

                        string strSqlExec = CmUtils.StringUtils.Replace(@"
								----
								zzzzClauseInsert_Invoice_TempInvoice_zSave

			                    ----
								zzzzClauseInsert_Invoice_TempCustomField_zSave
			
								----
							"
                            , "zzzzClauseInsert_Invoice_TempInvoice_zSave", zzzzClauseInsert_Invoice_TempInvoice_zSave
                            , "zzzzClauseInsert_Invoice_TempCustomField_zSave", zzzzClauseInsert_Invoice_TempCustomField_zSave
                            );
                        ////
                        DataSet dsExec = _cf.db.ExecQuery(strSqlExec);
                        ////
                    }
                    #endregion
                }
            }
            #endregion

            #region //// Clear For Debug:
            {
                ////
                string strSqlClearForDebug = CmUtils.StringUtils.Replace(@"
						---- Clear for Debug:
						drop table #input_Invoice_TempInvoice;
						drop table #input_Invoice_TempCustomField;
					");

                _cf.db.ExecQuery(
                    strSqlClearForDebug
                    );
                ////
            }
        #endregion

        // Return Good:
        MyCodeLabel_Done:
            return;
            //TDALUtils.DBUtils.CommitSafety(_cf.db);
            //mdsFinal.AcceptChanges();
            //return mdsFinal;		
        }

        private void Invoice_TempInvoice_SaveX_New20191107(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            , DateTime dtimeSys
            ////
            , object objFlagIsDelete
            ////
            , object objTInvoiceCode
            , object objMST
            , object objPaymentMethodCode
            , object objInvoiceType
            , object objTInvoiceName
            , object objFormNo
            , object objSign
            , object objNNTName
            , object objNNTAddress
            , object objNNTPhone
            , object objNNTFax
            , object objNNTEmail
            , object objNNTWebsite
            , object objNNTAccNo
            , object objNNTBankName
            , object objLogoFilePath
            , object objTInvoiceBody
            , object objWatermarkFilePath
            , object objInvoiceTGroupCode
            , object objRemark
            ////
            //, object objTInvoiceFilePathXML
            ////
            , DataSet dsData
            )
        {
            #region // Temp:
            DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            //int nTidSeq = 0;
            //bool bMyDebugSql = false;
            string strFunctionName = "Invoice_TempInvoice_SaveX";
            alParamsCoupleError.AddRange(new object[]{
                    "strFunctionName", strFunctionName
                    , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
                    ////
                    , "objFlagIsDelete",objFlagIsDelete
				    ////
                    , "objTInvoiceCode", objTInvoiceCode
                    , "objMST", objMST
                    , "objPaymentMethodCode", objPaymentMethodCode
                    , "objInvoiceType", objInvoiceType
                    , "objTInvoiceName", objTInvoiceName
                    , "objFormno", objFormNo
                    , "objSign", objSign
                    , "objNNTName", objNNTName
                    , "objNNTAddress", objNNTAddress
                    , "objNNTPhone", objNNTPhone
                    , "objNNTFax", objNNTFax
                    , "objNNTEmail", objNNTEmail
                    , "objNNTWebsite", objNNTWebsite
                    , "objNNTAccNo", objNNTAccNo
                    , "objNNTBankName", objNNTBankName
                    , "objLogoFilePath", objLogoFilePath
                    , "objTInvoiceBody", objTInvoiceBody
                    , "objWatermarkFilePath", objWatermarkFilePath
                    , "objInvoiceTGroupCode", objInvoiceTGroupCode
                    , "objRemark", objRemark
                    ////
                    //, "objTInvoiceFilePathXML", objTInvoiceFilePathXML
                    });
            //ArrayList alPCErrEx = new ArrayList();
            ////
            Hashtable htParamsSql = new Hashtable();
            #endregion

            #region // Convert Input:
            alParamsCoupleError.AddRange(new object[]{
                "Check.dsData", TJson.JsonConvert.SerializeObject(dsData)
                });
            #endregion

            #region // Refine and Check Input:
            ////
            bool bIsDelete = CmUtils.StringUtils.StringEqual(objFlagIsDelete, TConst.Flag.Yes);
            ////
            string strTInvoiceCode = TUtils.CUtils.StdParam(objTInvoiceCode);
            string strMST = TUtils.CUtils.StdParam(objMST);
            string strPaymentMethodCode = TUtils.CUtils.StdParam(objPaymentMethodCode);
            string strInvoiceType = TUtils.CUtils.StdParam(objInvoiceType);
            string strTInvoiceName = string.Format("{0}", objTInvoiceName);
            string strFormNo = TUtils.CUtils.StdParam(objFormNo);
            string strSign = string.Format("{0}", objSign);
            string strNNTName = string.Format("{0}", objNNTName);
            string strNNTAddress = string.Format("{0}", objNNTAddress);
            string strNNTPhone = string.Format("{0}", objNNTPhone);
            string strNNTFax = string.Format("{0}", objNNTFax);
            string strNNTEmail = string.Format("{0}", objNNTEmail);
            string strNNTWebsite = string.Format("{0}", objNNTWebsite);
            string strNNTAccNo = string.Format("{0}", objNNTAccNo);
            string strNNTBankName = string.Format("{0}", objNNTBankName);
            string strLogoFilePath = string.Format("{0}", objLogoFilePath);
            string strTInvoiceBody = string.Format("{0}", objTInvoiceBody);
            string strWatermarkFilePath = string.Format("{0}", objWatermarkFilePath);
            string strInvoiceTGroupCode = TUtils.CUtils.StdParam(objInvoiceTGroupCode);
            string strRemark = string.Format("{0}", objRemark);
            ////
            //string strTInvoiceFilePathXML = string.Format("{0}", objTInvoiceFilePathXML).Trim();
            ////
            string strCreateDTimeUTC = null;
            string strCreateBy = null;
            ////
            DataTable dtDB_Invoice_TempInvoice = null;
            {
                ////
                if (strTInvoiceCode == null || strTInvoiceCode.Length < 1)
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.strTInvoiceCode", strTInvoiceCode
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Invoice_TempInvoice_SaveX_InvalidTInvoiceCode
                        , null
                        , alParamsCoupleError.ToArray()
                        );
                }
                ////
                Invoice_TempInvoice_CheckDB(
                    ref alParamsCoupleError // alParamsCoupleError
                    , strTInvoiceCode // objShipNo
                    , "" // strFlagExistToCheck
                    , "" // strTInvoiceStatusListToCheck
                    , "" // strFlagActiveListToCheck
                    , out dtDB_Invoice_TempInvoice // dtDB_Invoice_TempInvoice
                    );
                ////
                if (dtDB_Invoice_TempInvoice.Rows.Count < 1) // Chưa tồn tại
                {
                    if (bIsDelete)
                    {
                        goto MyCodeLabel_Done; // Thành công
                    }
                    else
                    {
                        // Nothing
                    }
                }
                else // Đã tồn tại Invoice_TempInvoice:
                {
                    if (!CmUtils.StringUtils.StringEqualIgnoreCase(dtDB_Invoice_TempInvoice.Rows[0]["TInvoiceStatus"], TConst.TInvoiceStatus.Pending))
                    {
                        alParamsCoupleError.AddRange(new object[]{
                            "Check.DB.TInvoiceStatus", dtDB_Invoice_TempInvoice.Rows[0]["TInvoiceStatus"]
                            , "Check.InputStatus.Expected", TConst.TInvoiceStatus.Pending
                            });
                        throw CmUtils.CMyException.Raise(
                            TError.ErridnInventory.Invoice_TempInvoice_SaveX_StatusNotMatched
                            , null
                            , alParamsCoupleError.ToArray()
                            );
                    }
                    else
                    {
                        strCreateDTimeUTC = TUtils.CUtils.StdDTime(dtDB_Invoice_TempInvoice.Rows[0]["CreateDTimeUTC"]);
                        strCreateBy = TUtils.CUtils.StdParam(dtDB_Invoice_TempInvoice.Rows[0]["CreateBy"]);
                    }
                }
                strCreateDTimeUTC = string.IsNullOrEmpty(strCreateDTimeUTC) ? dtimeSys.ToString("yyyy-MM-dd HH:mm:ss") : strCreateDTimeUTC;
                strCreateBy = string.IsNullOrEmpty(strCreateBy) ? strWAUserCode : strCreateBy;
                ////
                myCache_ViewAbility_CheckAccessMSTWrite(
                    ref alParamsCoupleError // alParamsCoupleError
                    , strWAUserCode // strWAUserCode
                    , strMST // strMST
                    );
                ////
                DataTable dtDB_Mst_PaymentMethods = null;

                Mst_PaymentMethods_CheckDB(
                    ref alParamsCoupleError // alParamsCoupleError
                    , strPaymentMethodCode // objPaymentMethodCode
                    , TConst.Flag.Yes // strFlagExistToCheck
                    , TConst.Flag.Active // strFlagActiveListToCheck
                    , out dtDB_Mst_PaymentMethods // dtDB_Mst_PaymentMethods
                    );
                ////
                DataTable dtDB_Mst_InvoiceType = null;

                Mst_InvoiceType_CheckDB(
                    ref alParamsCoupleError // alParamsCoupleError
                    , strInvoiceType // objPaymentMethodCode
                    , TConst.Flag.Yes // strFlagExistToCheck
                    , TConst.Flag.Active // strFlagActiveListToCheck
                    , out dtDB_Mst_InvoiceType // dtDB_Mst_InvoiceType
                    );
                ////
                if (strFormNo == null || strFormNo.Length < 1)
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.strFormNo", strFormNo
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Invoice_TempInvoice_SaveX_InvalidFormNo
                        , null
                        , alParamsCoupleError.ToArray()
                        );
                }
                ////
                Invoice_TempInvoice_CheckFormNo(
                    ref alParamsCoupleError // alParamsCoupleError
                    , strFormNo // objFormNo
                    , strMST // objMST
                    , strTInvoiceCode // objTInvoiceCode               
                    );
                ////
                Invoice_TempInvoice_CheckFormatFormNo(
                    ref alParamsCoupleError // alParamsCoupleError
                    , strFormNo // objFormNo           
                    );
                ////
                if (strSign == null || strSign.Length < 1)
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.strSign", strSign
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Invoice_TempInvoice_SaveX_InvalidSign
                        , null
                        , alParamsCoupleError.ToArray()
                        );
                }
                ////
                DateTime dtCreateInvoiceUTC = Convert.ToDateTime(strCreateDTimeUTC);

                Invoice_TempInvoice_CheckFormatSign(
                    ref alParamsCoupleError // alParamsCoupleError
                    , strSign // objFormNo
                    , dtCreateInvoiceUTC.ToString("yy")
                    );
                //string strFormNo_Calc = "";
                //GetFormNo(
                //    ref alParamsCoupleError // alParamsCoupleError
                //    , strInvoiceType  // strInvoiceType
                //    , strMST  // objMST
                //    , ref strFormNo_Calc // strFormNo_Calc
                //    );
                //////
                //if(!CmUtils.StringUtils.StringEqualIgnoreCase(strFormNo_Calc, strFormNo))
                //{
                //    alParamsCoupleError.AddRange(new object[]{
                //        "Check.strFormNo", strFormNo
                //        , "Check.FormNo.Expected", strFormNo_Calc
                //        });
                //    throw CmUtils.CMyException.Raise(
                //        TError.ErridnInventory.Invoice_TempInvoice_SaveX_InvalidFormNo
                //        , null
                //        , alParamsCoupleError.ToArray()
                //        );

                //}
                ////
                DataTable dtDB_Invoice_TempGroup = null;

                Invoice_TempGroup_CheckDB(
                    ref alParamsCoupleError // alParamsCoupleError
                    , strInvoiceTGroupCode // strInvoiceTGroupCode
                    , TConst.Flag.Yes // strFlagExistToCheck
                    , TConst.Flag.Active // strFlagActiveListToCheck
                    , out dtDB_Invoice_TempGroup // dtDB_Invoice_TempGroup
                    );
                ////
                if (!CmUtils.StringUtils.StringEqualIgnoreCase(dtDB_Invoice_TempGroup.Rows[0]["MST"], TConst.BizMix.MSTALL)
                    && !CmUtils.StringUtils.StringEqualIgnoreCase(dtDB_Invoice_TempGroup.Rows[0]["MST"], strMST))
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.strInvoiceTGroupCode", strInvoiceTGroupCode
                        , "Check.DB.TGroup.InvoiceTGroupCode", dtDB_Invoice_TempGroup.Rows[0]["InvoiceTGroupCode"]
                        , "Check.Input.strMST", strMST
                        , "Check.Expected.TGroup.MST", string.Format("{0} or {1}", TConst.BizMix.MSTALL, strMST).Trim()
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Invoice_TempInvoice_SaveX_NNTNotUsedInvoiceTGroupCode
                        , null
                        , alParamsCoupleError.ToArray()
                        );

                }
                ////
            }
            #endregion

            #region // SaveTemp Invoice_Invoice:
            {
                ////
                TUtils.CUtils.MyBuildDBDT_Common(
                    _cf.db
                    , "#input_Invoice_TempInvoice"
                    , new object[]{
                        "TInvoiceCode", TConst.BizMix.Default_DBColType,
                        "NetworkID", TConst.BizMix.Default_DBColType,
                        "MST", TConst.BizMix.Default_DBColType,
                        "PaymentMethodCode", TConst.BizMix.Default_DBColType,
                        "InvoiceType", TConst.BizMix.Default_DBColType,
                        "TInvoiceName", TConst.BizMix.Default_DBColType,
                        "FormNo", TConst.BizMix.Default_DBColType,
                        "Sign", TConst.BizMix.Default_DBColType,
                        "TInvoiceFilePathXML", TConst.BizMix.Default_DBColType,
                        "EffDateStart", TConst.BizMix.Default_DBColType,
                        "EffDateEnd", TConst.BizMix.Default_DBColType,
                        "NNTName", TConst.BizMix.Default_DBColType,
                        "NNTAddress", TConst.BizMix.Default_DBColType,
                        "NNTPhone", TConst.BizMix.Default_DBColType,
                        "NNTFax", TConst.BizMix.Default_DBColType,
                        "NNTEmail", TConst.BizMix.Default_DBColType,
                        "NNTWebsite", TConst.BizMix.Default_DBColType,
                        "NNTAccNo", TConst.BizMix.Default_DBColType,
                        "NNTBankName", TConst.BizMix.Default_DBColType,
                        "LogoFilePath", TConst.BizMix.Max_DBCol,
                        "TInvoiceBody", TConst.BizMix.Max_DBCol,
                        "WatermarkFilePath", TConst.BizMix.Max_DBCol,
                        "InvoiceTGroupCode", TConst.BizMix.Max_DBCol,
                        "StartInvoiceNo", TConst.BizMix.Default_DBColType,
                        "EndInvoiceNo", TConst.BizMix.Default_DBColType,
                        "CreateDTimeUTC", TConst.BizMix.Default_DBColType,
                        "CreateBy", TConst.BizMix.Default_DBColType,
                        "LUDTimeUTC", TConst.BizMix.Default_DBColType,
                        "LUBy", TConst.BizMix.Default_DBColType,
                        "Remark", TConst.BizMix.Default_DBColType,
                        "TInvoiceStatus", TConst.BizMix.Default_DBColType,
                        "FlagActive", TConst.BizMix.Default_DBColType,
                        "UpdQtyInvoiceNoDTimeUTC", TConst.BizMix.Default_DBColType,
                        "UpdQtyInvoiceNoBy", TConst.BizMix.Default_DBColType,
                        "IssuedDTimeUTC", TConst.BizMix.Default_DBColType,
                        "Issuedby", TConst.BizMix.Default_DBColType,
                        "InActiveDTimeUTC", TConst.BizMix.Default_DBColType,
                        "InActiveBy", TConst.BizMix.Default_DBColType,
                        "LogLUDTimeUTC", TConst.BizMix.Default_DBColType,
                        "LogLUBy", TConst.BizMix.Default_DBColType,
                        }
                    , new object[]{
                            new object[]{
                                strTInvoiceCode, // TInvoiceCode
                                nNetworkID, // NetworkID
                                strMST, // strMST
                                strPaymentMethodCode, // PaymentMethodCode
                                strInvoiceType, // InvoiceType
                                strTInvoiceName, // TInvoiceName
                                strFormNo, // FormNo
                                strSign, // Sign
                                null, // TInvoiceFilePathXML
                                null, // EffDateStart
                                null, // EffDateEnd
                                strNNTName, // NNTName
                                strNNTAddress, // NNTAddress
                                strNNTPhone, // NNTPhone
                                strNNTFax, // NNTFax
                                strNNTEmail, // NNTEmail
                                strNNTWebsite, // NNTWebsite
                                strNNTAccNo, // NNTAccNo
                                strNNTBankName, // NNTBankName
                                strLogoFilePath, // LogoFilePath
                                strTInvoiceBody, // TInvoiceBody
                                strWatermarkFilePath, // WatermarkFilePath
                                strInvoiceTGroupCode, // InvoiceTGroupCode
                                0.0, // StartInvoiceNo
                                0.0, // EndInvoiceNo
                                strCreateDTimeUTC, // CreateDTimeUTC
                                strWAUserCode, // CreateBy
                                dtimeSys.ToString("yyyy-MM-dd HH:mm:ss"), // LUDTimeUTC
                                strWAUserCode, // LUBy
                                strRemark, // Remark
                                TConst.TInvoiceStatus.Pending, // TInvoiceStatus
                                TConst.Flag.Active, // FlagActive
                                null, // UpdQtyInvoiceNoDTimeUTC
                                null, // UpdQtyInvoiceNoBy
                                null, // IssuedDTimeUTC
                                null, // Issuedby
                                null, // InActiveDTimeUTC
                                null, // InActiveBy
                                dtimeSys.ToString("yyyy-MM-dd HH:mm:ss"), // LogLUDTimeUTC
                                strWAUserCode, // LogLUBy
								}
                        }
                    );

            }
            #endregion

            #region // Refine and Check Invoice_TempCustomField:
            ////

            DataTable dtInput_Invoice_TempCustomField = null;
            if (!bIsDelete)
            {
                ////
                string strTableCheck = "Invoice_TempCustomField";
                ////
                if (!dsData.Tables.Contains(strTableCheck))
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.TableName", strTableCheck
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Invoice_TempInvoiceCheckDB_CustomFieldNotFound
                        , null
                        , alParamsCoupleError.ToArray()
                        );
                }
                dtInput_Invoice_TempCustomField = dsData.Tables[strTableCheck];
                ////
                //if (dtInput_KUNN_ValLaiSuatChangeHist.Rows.Count < 1)
                //{
                //	alParamsCoupleError.AddRange(new object[]{
                //		"Check.TableName", strTableCheck
                //		});
                //	throw CmUtils.CMyException.Raise(
                //		TError.ErrTCGQLTV.Mst_Spec_Add_Input_KUNN_ValLaiSuatChangeHistTblInvalid
                //		, null
                //		, alParamsCoupleError.ToArray()
                //		);
                //}
                ////
                TUtils.CUtils.StdDataInTable(
                    dtInput_Invoice_TempCustomField // dtData
                    , "StdParam", "DBFieldName" // arrstrCouple
                    , "", "TCFType" // arrstrCouple
                    , "", "DisplayName" // arrstrCouple
                    , "", "DBPhysicalType" // arrstrCouple
                    );
                ////
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_TempCustomField, "TInvoiceCode", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_TempCustomField, "NetworkID", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_TempCustomField, "FlagActive", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_TempCustomField, "LogLUDTimeUTC", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_TempCustomField, "LogLUBy", typeof(object));
                ////
                for (int nScan = 0; nScan < dtInput_Invoice_TempCustomField.Rows.Count; nScan++)
                {
                    ////
                    DataRow drScan = dtInput_Invoice_TempCustomField.Rows[nScan];

                    string strDBFieldName = TUtils.CUtils.StdParam(drScan["DBFieldName"]);
                    string strTCFType = string.Format("{0}", drScan["TCFType"]).Trim();
                    string strDisplayName = string.Format("{0}", drScan["DisplayName"]).Trim();
                    string strDBPhysicalType = string.Format("{0}", drScan["DBPhysicalType"]).Trim();
                    ////
                    if (strDBFieldName == null || strDBFieldName.Length < 1)
                    {
                        alParamsCoupleError.AddRange(new object[]{
                            "Check.strTInvoiceCode", strTInvoiceCode
                            , "Check.strDBFieldName", strDBFieldName
                            , "Check.strDBFieldName", strDBFieldName
                            });
                        throw CmUtils.CMyException.Raise(
                            TError.ErridnInventory.Invoice_TempInvoice_SaveX_InvalidDBFieldName
                            , null
                            , alParamsCoupleError.ToArray()
                            );
                    }
                    ////
                    if (strTCFType == null || strTCFType.Length < 1)
                    {
                        alParamsCoupleError.AddRange(new object[]{
                            "Check.strTInvoiceCode", strTInvoiceCode
                            , "Check.strDBFieldName", strDBFieldName
                            , "Check.strTCFType", strTCFType
                            });
                        throw CmUtils.CMyException.Raise(
                            TError.ErridnInventory.Invoice_TempInvoice_SaveX_InvalidTCFType
                            , null
                            , alParamsCoupleError.ToArray()
                            );
                    }
                    ////
                    if (strDisplayName == null || strDisplayName.Length < 1)
                    {
                        alParamsCoupleError.AddRange(new object[]{
                            "Check.strTInvoiceCode", strTInvoiceCode
                            , "Check.strDBFieldName", strDBFieldName
                            , "Check.strDisplayName", strDisplayName
                            });
                        throw CmUtils.CMyException.Raise(
                            TError.ErridnInventory.Invoice_TempInvoice_SaveX_InvalidDisplayName
                            , null
                            , alParamsCoupleError.ToArray()
                            );
                    }
                    ////
                    //DataTable dtDB_Invoice_TempCustomField = null;

                    //Invoice_TempCustomField_CheckDB(
                    //    ref alParamsCoupleError // alParamsCoupleError
                    //    , strTInvoiceCode // objTInvoiceCode
                    //    , strDBFieldName // objDBFieldName
                    //    , "" // strFlagExistToCheck
                    //    , "" // strFlagActiveListToCheck
                    //    , out dtDB_Invoice_TempCustomField // dtDB_Invoice_TempCustomField
                    //    );
                    ////
                    drScan["TInvoiceCode"] = strTInvoiceCode;
                    drScan["DBFieldName"] = strDBFieldName;
                    drScan["NetworkID"] = nNetworkID;
                    drScan["TCFType"] = strTCFType;
                    drScan["DisplayName"] = strDisplayName;
                    drScan["DBPhysicalType"] = strDBPhysicalType;
                    drScan["FlagActive"] = TConst.Flag.Active;
                    drScan["LogLUDTimeUTC"] = dtimeSys.ToString("yyyy-MM-dd HH:mm:ss");
                    drScan["LogLUBy"] = strWAUserCode;


                }
            }
            #endregion

            #region //// SaveTemp Invoice_TempCustomField:
            {
                TUtils.CUtils.MyBuildDBDT_Common(
                    _cf.db
                    , "#input_Invoice_TempCustomField"
                    , new object[]{
                            "TInvoiceCode", TConst.BizMix.Default_DBColType,
                            "DBFieldName", TConst.BizMix.Default_DBColType,
                            "NetworkID", TConst.BizMix.Default_DBColType,
                            "TCFType", TConst.BizMix.Default_DBColType,
                            "DisplayName", TConst.BizMix.Default_DBColType,
                            "DBPhysicalType", TConst.BizMix.Default_DBColType,
                            "FlagActive", TConst.BizMix.Default_DBColType,
                            "LogLUDTimeUTC", TConst.BizMix.Default_DBColType,
                            "LogLUBy", TConst.BizMix.Default_DBColType,
                        }
                    , dtInput_Invoice_TempCustomField
                    );
            }
            #endregion

            #region // SaveDB:
            {
                //// Clear All:
                {
                    string strSqlDelete = CmUtils.StringUtils.Replace(@"
                                ---- Invoice_TempCustomField:
							    delete t
							    from Invoice_TempCustomField t --//[mylock]
								    inner join #input_Invoice_TempInvoice f --//[mylock]
									    on t.TInvoiceCode = f.TInvoiceCode
							    where (1=1)
							    ;

							    ---- Invoice_TempInvoice:
							    delete t
							    from Invoice_TempInvoice t --//[mylock]
								    inner join #input_Invoice_TempInvoice f --//[mylock]
									    on t.TInvoiceCode = f.TInvoiceCode
							    where (1=1)
							    ;
						");
                    _cf.db.ExecQuery(
                        strSqlDelete
                        );
                }

                //// Insert All:
                if (!bIsDelete)
                {
                    #region // Insert:
                    {

                        ////
                        string zzzzClauseInsert_Invoice_TempInvoice_zSave = CmUtils.StringUtils.Replace(@"
                                ---- Invoice_TempInvoice:
                                insert into Invoice_TempInvoice
                                (	
	                                TInvoiceCode
	                                , NetworkID
	                                , MST
	                                , PaymentMethodCode
	                                , InvoiceType
	                                , TInvoiceName
	                                , FormNo
	                                , Sign
	                                , TInvoiceFilePathXML
	                                , EffDateStart
	                                , EffDateEnd
	                                , NNTName
	                                , NNTAddress
                                    , NNTPhone
                                    , NNTFax
                                    , NNTEmail
                                    , NNTWebsite
                                    , NNTAccNo
                                    , NNTBankName
                                    , LogoFilePath
	                                , TInvoiceBody
	                                , WatermarkFilePath
	                                , InvoiceTGroupCode
	                                , StartInvoiceNo
	                                , EndInvoiceNo
	                                , CreateDTimeUTC
	                                , CreateBy
	                                , LUDTimeUTC
	                                , LUBy
	                                , Remark
	                                , TInvoiceStatus
	                                , FlagActive
	                                , UpdQtyInvoiceNoDTimeUTC
	                                , UpdQtyInvoiceNoBy
	                                , IssuedDTimeUTC
	                                , Issuedby
	                                , InActiveDTimeUTC
	                                , InActiveBy
	                                , LogLUDTimeUTC
	                                , LogLUBy
                                )
                                select
	                                t.TInvoiceCode
	                                , t.NetworkID
	                                , t.MST
	                                , t.PaymentMethodCode
	                                , t.InvoiceType
	                                , t.TInvoiceName
	                                , t.FormNo
	                                , t.Sign
	                                , t.TInvoiceFilePathXML
	                                , t.EffDateStart
	                                , t.EffDateEnd
	                                , t.NNTName
	                                , t.NNTAddress
	                                , t.NNTPhone
	                                , t.NNTFax
	                                , t.NNTEmail
	                                , t.NNTWebsite
	                                , t.NNTAccNo
	                                , t.NNTBankName
	                                , t.LogoFilePath
	                                , t.TInvoiceBody
	                                , t.WatermarkFilePath
	                                , t.InvoiceTGroupCode
	                                , t.StartInvoiceNo
	                                , t.EndInvoiceNo
	                                , t.CreateDTimeUTC
	                                , t.CreateBy
	                                , t.LUDTimeUTC
	                                , t.LUBy
	                                , t.Remark
	                                , t.TInvoiceStatus
	                                , t.FlagActive
	                                , t.UpdQtyInvoiceNoDTimeUTC
	                                , t.UpdQtyInvoiceNoBy
	                                , t.IssuedDTimeUTC
	                                , t.Issuedby
	                                , t.InActiveDTimeUTC
	                                , t.InActiveBy
	                                , t.LogLUDTimeUTC
	                                , t.LogLUBy
                                from #input_Invoice_TempInvoice t --//[mylock]
                                ;
                            ");

                        /////
                        string zzzzClauseInsert_Invoice_TempCustomField_zSave = CmUtils.StringUtils.Replace(@"
                                ---- Invoice_TempCustomField:  
                                insert into Invoice_TempCustomField(
	                                TInvoiceCode
	                                , DBFieldName
	                                , NetworkID
	                                , TCFType
	                                , DisplayName
                                    , DBPhysicalType
	                                , FlagActive
	                                , LogLUDTimeUTC
	                                , LogLUBy
                                )
                                select 
	                                t.TInvoiceCode
	                                , t.DBFieldName
	                                , t.NetworkID
	                                , t.TCFType
	                                , t.DisplayName
                                    , t.DBPhysicalType
	                                , t.FlagActive
	                                , t.LogLUDTimeUTC
	                                , t.LogLUBy
                                from #input_Invoice_TempCustomField t
                            ");

                        string strSqlExec = CmUtils.StringUtils.Replace(@"
								----
								zzzzClauseInsert_Invoice_TempInvoice_zSave

			                    ----
								zzzzClauseInsert_Invoice_TempCustomField_zSave
			
								----
							"
                            , "zzzzClauseInsert_Invoice_TempInvoice_zSave", zzzzClauseInsert_Invoice_TempInvoice_zSave
                            , "zzzzClauseInsert_Invoice_TempCustomField_zSave", zzzzClauseInsert_Invoice_TempCustomField_zSave
                            );
                        ////
                        DataSet dsExec = _cf.db.ExecQuery(strSqlExec);
                        ////
                    }
                    #endregion
                }
            }
            #endregion

            #region //// Clear For Debug:
            {
                ////
                string strSqlClearForDebug = CmUtils.StringUtils.Replace(@"
						---- Clear for Debug:
						drop table #input_Invoice_TempInvoice;
						drop table #input_Invoice_TempCustomField;
					");

                _cf.db.ExecQuery(
                    strSqlClearForDebug
                    );
                ////
            }
            #endregion

            // Return Good:
            MyCodeLabel_Done:
            return;
            //TDALUtils.DBUtils.CommitSafety(_cf.db);
            //mdsFinal.AcceptChanges();
            //return mdsFinal;		
        }

        public DataSet Invoice_TempInvoice_Save_New20190705(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            ////
            , object objFlagIsDelete
            ////
            , object objTInvoiceCode
            , object objMST
            , object objPaymentMethodCode
            , object objInvoiceType
            , object objTInvoiceName
            , object objFormNo
            , object objSign
            , object objNNTName
            , object objNNTAddress
            , object objNNTPhone
            , object objNNTFax
            , object objNNTEmail
            , object objNNTWebsite
            , object objNNTAccNo
            , object objNNTBankName
            , object objLogoFilePath
            , object objTInvoiceBody
            , object objWatermarkFilePath
            , object objInvoiceTGroupCode
            , object objRemark
            ////
            //, object objTInvoiceFilePathXML
            ////
            , DataSet dsData
            )
        {
            #region // Temp:
            DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            //int nTidSeq = 0;
            DateTime dtimeSys = DateTime.UtcNow;
            string strFunctionName = "Invoice_TempInvoice_Save";
            string strErrorCodeDefault = TError.ErridnInventory.Invoice_TempInvoice_Save;
            alParamsCoupleError.AddRange(new object[]{
                    "strFunctionName", strFunctionName
                    , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
                    /////
                    , "objFlagIsDelete", objFlagIsDelete
			        ////
                    , "objTInvoiceCode", objTInvoiceCode
                    , "objMST", objMST
                    , "objPaymentMethodCode", objPaymentMethodCode
                    , "objInvoiceType", objInvoiceType
                    , "objTInvoiceName", objTInvoiceName
                    , "objFormno", objFormNo
                    , "objSign", objSign
                    , "objNNTName", objNNTName
                    , "objNNTAddress", objNNTAddress
                    , "objNNTPhone", objNNTPhone
                    , "objNNTFax", objNNTFax
                    , "objNNTEmail", objNNTEmail
                    , "objNNTWebsite", objNNTWebsite
                    , "objNNTAccNo", objNNTAccNo
                    , "objNNTBankName", objNNTBankName
                    , "objLogoFilePath", objLogoFilePath
                    , "objTInvoiceBody", objTInvoiceBody
                    , "objWatermarkFilePath", objWatermarkFilePath
                    , "objInvoiceTGroupCode", objInvoiceTGroupCode
                    , "objRemark", objRemark
                    ////
                    //, "objTInvoiceFilePathXML", objTInvoiceFilePathXML
                    });
            #endregion

            try
            {
                #region // Init:
                //_cf.db.LogUserId = _cf.sinf.strUserCode;
                _cf.db.BeginTransaction();

                // Write RequestLog:
                _cf.ProcessBizReq_OutSide(
                    strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    , alParamsCoupleError // alParamsCoupleError
                    );

                // Sys_User_CheckAuthentication:
                //Sys_User_CheckAuthentication(
                //    ref alParamsCoupleError
                //    , strWAUserCode
                //    , strWAUserPassword
                //    );

                // Check Access/Deny:
                Sys_Access_CheckDenyV30(
                    ref alParamsCoupleError
                    , strWAUserCode
                    , strFunctionName
                    );
                #endregion

                #region // Invoice_TempInvoice_SaveX:
                //DataSet dsGetData = null;
                {
                    Invoice_TempInvoice_SaveX_New20191107(
                        strTid // strTid
                        , strGwUserCode // strGwUserCode
                        , strGwPassword // strGwPassword
                        , strWAUserCode // strWAUserCode
                        , strWAUserPassword // strWAUserPassword
                        , ref alParamsCoupleError // alParamsCoupleError
                        , dtimeSys // dtimeSys
                                   ////
                        , objFlagIsDelete // objFlagIsDelete
                                          ////
                        , objTInvoiceCode //  objTInvoiceCode
                        , objMST //   objMST
                        , objPaymentMethodCode //   objPaymentMethodCode
                        , objInvoiceType //   objInvoiceType
                        , objTInvoiceName //   objTInvoiceName
                        , objFormNo //   objFormNo
                        , objSign //   objSign
                        , objNNTName //   objNNTName
                        , objNNTAddress //   objNNTAddress
                        , objNNTPhone //   objNNTPhone
                        , objNNTFax //   objNNTFax
                        , objNNTEmail //   objNNTEmail
                        , objNNTWebsite //   objNNTWebsite
                        , objNNTAccNo //   objNNTAccNo
                        , objNNTBankName //   objNNTBankName
                        , objLogoFilePath //   objLogoFilePath
                        , objTInvoiceBody //   objTInvoiceBody
                        , objWatermarkFilePath //   objWatermarkFilePath
                        , objInvoiceTGroupCode // objInvoiceTGroupCode
                        , objRemark //   objRemark
                        ////
                        //, objTInvoiceFilePathXML // objTInvoiceFilePathXML
                        ////
                        , dsData
                        );
                }
                ////
                //CmUtils.DataUtils.MoveDataTable(ref mdsFinal, ref dsGetData);
                #endregion

                // Return Good:
                TDALUtils.DBUtils.CommitSafety(_cf.db);
                mdsFinal.AcceptChanges();
                return mdsFinal;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Rollback:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);

                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsFinal
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Rollback and Release resources:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);
                TDALUtils.DBUtils.ReleaseAllSemaphore(_cf.db_Sys, true);

                // Write ReturnLog:
                _cf.ProcessBizReturn_OutSide(
                    ref mdsFinal // mdsFinal
                    , strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    );
                #endregion
            }
        }

        public DataSet WAS_Invoice_TempInvoice_Save_New20190705(
            ref ArrayList alParamsCoupleError
            , RQ_Invoice_TempInvoice objRQ_Invoice_TempInvoice
            ////
            , out RT_Invoice_TempInvoice objRT_Invoice_TempInvoice
            )
        {
            #region // Temp:
            string strTid = objRQ_Invoice_TempInvoice.Tid;
            objRT_Invoice_TempInvoice = new RT_Invoice_TempInvoice();
            DataSet mdsResult = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            DateTime dtimeSys = DateTime.UtcNow;
            //DataSet mdsExec = null;
            //DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(objRQ_Invoice_TempInvoice.Tid);
            //int nTidSeq = 0;
            //bool bNeedTransaction = true;
            string strFunctionName = "WAS_Invoice_TempInvoice_Save";
            string strErrorCodeDefault = TError.ErridnInventory.WAS_Invoice_TempInvoice_Save;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
				});
            #endregion

            try
            {
                #region // Init:
                #endregion

                #region // Refine and Check Input:
                //List<Invoice_TempInvoice> lst_Invoice_TempInvoice = new List<Invoice_TempInvoice>();
                List<Invoice_TempCustomField> lst_Invoice_TempCustomField = new List<Invoice_TempCustomField>();
                //bool bGet_Invoice_TempInvoice = (objRQ_Invoice_TempInvoice.Rt_Cols_Invoice_TempInvoice != null && objRQ_Invoice_TempInvoice.Rt_Cols_Invoice_TempInvoice.Length > 0);
                //bool bGet_Invoice_TempCustomField = (objRQ_Invoice_TempInvoice.Rt_Cols_Invoice_TempCustomField != null && objRQ_Invoice_TempInvoice.Rt_Cols_Invoice_TempCustomField.Length > 0);
                #endregion

                #region // Refine and Check Input:
                ////
                DataSet dsData = new DataSet();
                {
                    ////
                    if (objRQ_Invoice_TempInvoice.Lst_Invoice_TempCustomField != null)
                    {
                        DataTable dt_Invoice_TempCustomField = TUtils.DataTableCmUtils.ToDataTable<Invoice_TempCustomField>(objRQ_Invoice_TempInvoice.Lst_Invoice_TempCustomField, "Invoice_TempCustomField");
                        dsData.Tables.Add(dt_Invoice_TempCustomField);
                    }
                    
                    
                }
                #endregion

                #region // Invoice_TempInvoice_Save:
                mdsResult = Invoice_TempInvoice_Save_New20190705(
                    objRQ_Invoice_TempInvoice.Tid // strTid
                    , objRQ_Invoice_TempInvoice.GwUserCode // strGwUserCode
                    , objRQ_Invoice_TempInvoice.GwPassword // strGwPassword
                    , objRQ_Invoice_TempInvoice.WAUserCode // strUserCode
                    , objRQ_Invoice_TempInvoice.WAUserPassword // strUserPassword
                    , ref alParamsCoupleError // alParamsCoupleError
                                              //// Filter:
                    , objRQ_Invoice_TempInvoice.FlagIsDelete // objFlagIsDelete
                                                             /////
                    , objRQ_Invoice_TempInvoice.Invoice_TempInvoice.TInvoiceCode // objTInvoiceCode
                    , objRQ_Invoice_TempInvoice.Invoice_TempInvoice.MST // objMST
                    , objRQ_Invoice_TempInvoice.Invoice_TempInvoice.PaymentMethodCode // objPaymentMethodCode
                    , objRQ_Invoice_TempInvoice.Invoice_TempInvoice.InvoiceType // objPaymentMethodCode
                    , objRQ_Invoice_TempInvoice.Invoice_TempInvoice.TInvoiceName // objTInvoiceName
                    , objRQ_Invoice_TempInvoice.Invoice_TempInvoice.FormNo // objFormNo
                    , objRQ_Invoice_TempInvoice.Invoice_TempInvoice.Sign // objSign
                    , objRQ_Invoice_TempInvoice.Invoice_TempInvoice.NNTName // objNNTName
                    , objRQ_Invoice_TempInvoice.Invoice_TempInvoice.NNTAddress // objNNTAddress
                    , objRQ_Invoice_TempInvoice.Invoice_TempInvoice.NNTPhone // objNNTPhone
                    , objRQ_Invoice_TempInvoice.Invoice_TempInvoice.NNTFax // objNNTFax
                    , objRQ_Invoice_TempInvoice.Invoice_TempInvoice.NNTEmail // objNNTEmail
                    , objRQ_Invoice_TempInvoice.Invoice_TempInvoice.NNTWebsite // objNNTWebsite
                    , objRQ_Invoice_TempInvoice.Invoice_TempInvoice.NNTAccNo // objNNTAccNo
                    , objRQ_Invoice_TempInvoice.Invoice_TempInvoice.NNTBankName // objNNTBankName
                    , objRQ_Invoice_TempInvoice.Invoice_TempInvoice.LogoFilePath // objLogoFilePath
                    , objRQ_Invoice_TempInvoice.Invoice_TempInvoice.TInvoiceBody // objTInvoiceBody
                    , objRQ_Invoice_TempInvoice.Invoice_TempInvoice.WatermarkFilePath // objWatermarkFilePath
                    , objRQ_Invoice_TempInvoice.Invoice_TempInvoice.InvoiceTGroupCode // objInvoiceTGroupCode
                    , objRQ_Invoice_TempInvoice.Invoice_TempInvoice.Remark // objRemark
                    ////
                    //, objRQ_Invoice_TempInvoice.Invoice_TempInvoice.TInvoiceFilePathXML // objTInvoiceFilePathXML
                                                                                        ////
                    , dsData
                    );
                #endregion

                // Return Good:
                return mdsResult;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsResult
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Write ReturnLog:
                //_cf.ProcessBizReturn(
                //	ref mdsResult // mdsFinal
                //	, strTid // strTid
                //	, strFunctionName // strFunctionName
                //	);
                #endregion
            }
        }
        #endregion

        #region // Invoice_InvoiceInput:
        private void Invoice_InvoiceInput_CheckDB(
            ref ArrayList alParamsCoupleError
            , object objInvoiceCode
            , string strFlagExistToCheck
            , string strInvoiceStatusListToCheck
            , out DataTable dtDB_Invoice_InvoiceInput
            )
        {
            // GetInfo:
            string strSqlExec = CmUtils.StringUtils.Replace(@"
					select top 1
						t.*
					from Invoice_InvoiceInput t --//[mylock]
					where (1=1)
						and t.InvoiceCode = @objInvoiceCode
					;
				");
            dtDB_Invoice_InvoiceInput = _cf.db.ExecQuery(
                strSqlExec
                , "@objInvoiceCode", objInvoiceCode
                ).Tables[0];
            dtDB_Invoice_InvoiceInput.TableName = "Invoice_InvoiceInput";

            // strFlagExistToCheck:
            if (strFlagExistToCheck.Length > 0)
            {
                if (CmUtils.StringUtils.StringEqual(strFlagExistToCheck, TConst.Flag.Active) && dtDB_Invoice_InvoiceInput.Rows.Count < 1)
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.InvoiceCode", objInvoiceCode
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Invoice_InvoiceInput_CheckDB_InvoiceNotFound
                        , null
                        , alParamsCoupleError.ToArray()
                        );
                }
                if (CmUtils.StringUtils.StringEqual(strFlagExistToCheck, TConst.Flag.Inactive) && dtDB_Invoice_InvoiceInput.Rows.Count > 0)
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.InvoiceCode", objInvoiceCode
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Invoice_InvoiceInput_CheckDB_InvoiceExist
                        , null
                        , alParamsCoupleError.ToArray()
                        );
                }
            }

            // strInvoiceStatusListToCheck:
            if (strInvoiceStatusListToCheck.Length > 0 && !strInvoiceStatusListToCheck.Contains(Convert.ToString(dtDB_Invoice_InvoiceInput.Rows[0]["InvoiceStatus"])))
            {
                alParamsCoupleError.AddRange(new object[]{
                    "Check.InvoiceCode", objInvoiceCode
                    , "Check.strInvoiceStatusListToCheck", strInvoiceStatusListToCheck
                    , "DB.InvoiceStatus", dtDB_Invoice_InvoiceInput.Rows[0]["InvoiceStatus"]
                    });
                throw CmUtils.CMyException.Raise(
                    TError.ErridnInventory.Invoice_InvoiceInput_CheckDB_InvoiceStatusNotMatched
                    , null
                    , alParamsCoupleError.ToArray()
                    );
            }
        }
        public DataSet Invoice_InvoiceInput_Get(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            //// Filter:
            , string strFt_RecordStart
            , string strFt_RecordCount
            , string strFt_WhereClause
            //// Return:
            , string strRt_Cols_Invoice_InvoiceInput
            , string strRt_Cols_Invoice_InvoiceInputDtl
            )
        {
            #region // Temp:
            DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            //int nTidSeq = 0;
            DateTime dtimeSys = DateTime.UtcNow;
            bool bNeedTransaction = true;
            string strFunctionName = "Invoice_InvoiceInput_Get";
            string strErrorCodeDefault = TError.ErridnInventory.Invoice_InvoiceInput_Get;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				//// Filter
				, "strFt_RecordStart", strFt_RecordStart
                , "strFt_RecordCount", strFt_RecordCount
                , "strFt_WhereClause", strFt_WhereClause
				//// Return
				, "strRt_Cols_Invoice_InvoiceInput", strRt_Cols_Invoice_InvoiceInput
                , "strRt_Cols_Invoice_InvoiceInputDtl", strRt_Cols_Invoice_InvoiceInputDtl
                });
            #endregion

            try
            {
                #region // Init:
                //_cf.db.LogUserId = _cf.sinf.strUserCode;
                if (bNeedTransaction) _cf.db.BeginTransaction();

                //// Write RequestLog:
                //_cf.ProcessBizReq_OutSide(
                //    strTid // strTid
                //    , strGwUserCode // strGwUserCode
                //    , strGwPassword // strGwPassword
                //    , strWAUserCode // objUserCode
                //    , strFunctionName // strFunctionName
                //    , alParamsCoupleError // alParamsCoupleError
                //    );

                // Sys_User_CheckAuthentication:
                //Sys_User_CheckAuthentication(
                //    ref alParamsCoupleError
                //    , strWAUserCode
                //    , strWAUserPassword
                //    );

                // Check Access/Deny:
                Sys_Access_CheckDenyV30(
                    ref alParamsCoupleError
                    , strWAUserCode
                    , strFunctionName
                    );
                #endregion

                #region // Check:
                //// Refine:
                long nFilterRecordStart = Convert.ToInt64(strFt_RecordStart);
                long nFilterRecordEnd = nFilterRecordStart + Convert.ToInt64(strFt_RecordCount) - 1;
                bool bGet_Invoice_InvoiceInput = (strRt_Cols_Invoice_InvoiceInput != null && strRt_Cols_Invoice_InvoiceInput.Length > 0);
                bool bGet_Invoice_InvoiceInputDtl = (strRt_Cols_Invoice_InvoiceInputDtl != null && strRt_Cols_Invoice_InvoiceInputDtl.Length > 0);

                //// drAbilityOfUser:
                //DataRow drAbilityOfUser = myCache_ViewAbility_GetUserInfo(strWAUserCode);

                // drAbilityOfUser:
                DataRow drAbilityOfUser = Sys_User_GetAbilityViewOfUser(strWAUserCode);
                zzzzClauseSelect_Mst_NNT_ViewAbility_Get(
                    drAbilityOfUser // drAbilityOfUser
                    , ref alParamsCoupleError // alParamsCoupleError
                    );
                #endregion

                #region // Build Sql:
                ////
                ArrayList alParamsCoupleSql = new ArrayList();
                alParamsCoupleSql.AddRange(new object[] {
                    "@nFilterRecordStart", nFilterRecordStart
                    , "@nFilterRecordEnd", nFilterRecordEnd
                    });
                ////
                //myCache_ViewAbility_GetDealerInfo(drAbilityOfUser);
                ////
                string strSqlGetData = CmUtils.StringUtils.Replace(@"
						---- #tbl_Invoice_InvoiceInput_Filter_Draft:
						select distinct
							identity(bigint, 0, 1) MyIdxSeq
							, iii.InvoiceCode
						into #tbl_Invoice_InvoiceInput_Filter_Draft
						from Invoice_InvoiceInput iii --//[mylock]
                            inner join #tbl_Mst_NNT_ViewAbility t_MstNNT_View --//[mylock]
                                on iii.CustomerMST = t_MstNNT_View.MST
						where (1=1)
							zzB_Where_strFilter_zzE
						order by iii.InvoiceCode asc
						;

						---- Summary:
						select Count(0) MyCount from #tbl_Invoice_InvoiceInput_Filter_Draft t --//[mylock]
						;

						---- #tbl_Invoice_InvoiceInput_Filter:
						select
							t.*
						into #tbl_Invoice_InvoiceInput_Filter
						from #tbl_Invoice_InvoiceInput_Filter_Draft t --//[mylock]
						where
							(t.MyIdxSeq >= @nFilterRecordStart)
							and (t.MyIdxSeq <= @nFilterRecordEnd)
						;

						-------- Invoice_InvoiceInput -------:
						zzB_Select_Invoice_InvoiceInput_zzE
						---------------------------------

						-------- Invoice_InvoiceInputDtl -------:
						zzB_Select_Invoice_InvoiceInputDtl_zzE
						---------------------------------

						---- Clear for debug:
						--drop table #tbl_Invoice_InvoiceInput_Filter_Draft;
						--drop table #tbl_Invoice_InvoiceInput_Filter;
					"
                    );
                ////
                string zzB_Select_Invoice_InvoiceInput_zzE = "-- Nothing.";
                if (bGet_Invoice_InvoiceInput)
                {
                    #region // bGet_Invoice_InvoiceInput:
                    zzB_Select_Invoice_InvoiceInput_zzE = CmUtils.StringUtils.Replace(@"
							---- Invoice_InvoiceInput:
							select
								t.MyIdxSeq
								, iii.*
								----
								, mpm.PaymentMethodCode mpm_PaymentMethodCode
								, mpm.PaymentMethodName mpm_PaymentMethodName
							from #tbl_Invoice_InvoiceInput_Filter t --//[mylock]
								inner join Invoice_InvoiceInput iii --//[mylock]
									on t.InvoiceCode = iii.InvoiceCode
								left join Mst_PaymentMethods mpm --//[mylock]
									on iii.PaymentMethodCode = mpm.PaymentMethodCode
							order by t.MyIdxSeq asc
							;
						"
                        );
                    #endregion
                }
                ////
                string zzB_Select_Invoice_InvoiceInputDtl_zzE = "-- Nothing.";
                if (bGet_Invoice_InvoiceInputDtl)
                {
                    #region // bGet_Invoice_InvoiceInputDtl:
                    zzB_Select_Invoice_InvoiceInputDtl_zzE = CmUtils.StringUtils.Replace(@"
							---- Invoice_InvoiceInputDtl:
							select
								t.MyIdxSeq
								, iiid.*
							from #tbl_Invoice_InvoiceInput_Filter t --//[mylock]
								inner join Invoice_InvoiceInputDtl iiid --//[mylock]
									on t.InvoiceCode = iiid.InvoiceCode
							order by t.MyIdxSeq asc
							;
						"
                        );
                    #endregion
                }
                ////
                string zzB_Where_strFilter_zzE = "";
                {
                    Hashtable htSpCols = new Hashtable();
                    {
                        #region // htSpCols:
                        ////
                        TUtils.CUtils.MyBuildHTSupportedColumns(
                            _cf.db // db
                            , ref htSpCols // htSupportedColumns
                            , "Invoice_InvoiceInput" // strTableNameDB
                            , "Invoice_InvoiceInput." // strPrefixStd
                            , "iii." // strPrefixAlias
                            );
                        ////
                        #endregion
                    }
                    zzB_Where_strFilter_zzE = CmUtils.SqlUtils.BuildWhere(
                        htSpCols // htSpCols
                        , strFt_WhereClause // strClause
                        , "@p_" // strParamPrefix
                        , ref alParamsCoupleSql // alParamsCoupleSql
                        );
                    zzB_Where_strFilter_zzE = (zzB_Where_strFilter_zzE.Length <= 0 ? "" : string.Format(" and ({0})", zzB_Where_strFilter_zzE));
                    alParamsCoupleError.AddRange(new object[]{
                        "zzB_Where_strFilter_zzE", zzB_Where_strFilter_zzE
                        });
                }
                ////
                strSqlGetData = CmUtils.StringUtils.Replace(
                    strSqlGetData
                    , "zzB_Where_strFilter_zzE", zzB_Where_strFilter_zzE
                    , "zzB_Select_Invoice_InvoiceInput_zzE", zzB_Select_Invoice_InvoiceInput_zzE
                    , "zzB_Select_Invoice_InvoiceInputDtl_zzE", zzB_Select_Invoice_InvoiceInputDtl_zzE
                    );
                #endregion

                #region // Get Data:
                DataSet dsGetData = _cf.db.ExecQuery(
                    strSqlGetData
                    , alParamsCoupleSql.ToArray()
                    );
                int nIdxTable = 0;
                dsGetData.Tables[nIdxTable++].TableName = "MySummaryTable";
                if (bGet_Invoice_InvoiceInput)
                {
                    dsGetData.Tables[nIdxTable++].TableName = "Invoice_InvoiceInput";
                }
                ////
                if (bGet_Invoice_InvoiceInputDtl)
                {
                    dsGetData.Tables[nIdxTable++].TableName = "Invoice_InvoiceInputDtl";
                }
                CmUtils.DataUtils.MoveDataTable(ref mdsFinal, ref dsGetData);
                #endregion

                // Return Good:
                TDALUtils.DBUtils.RollbackSafety(_cf.db); // Always Rollback.
                mdsFinal.AcceptChanges();
                return mdsFinal;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Rollback:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);

                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsFinal
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Rollback and Release resources:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);
                TDALUtils.DBUtils.ReleaseAllSemaphore(_cf.db_Sys, true);

                // Write ReturnLog:
                _cf.ProcessBizReturn_OutSide(
                    ref mdsFinal // mdsFinal
                    , strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    );
                #endregion
            }
        }


        public DataSet WAS_Invoice_InvoiceInput_Get(
            ref ArrayList alParamsCoupleError
            , RQ_Invoice_InvoiceInput objRQ_Invoice_InvoiceInput
            ////
            , out RT_Invoice_InvoiceInput objRT_Invoice_InvoiceInput
            )
        {
            #region // Temp:
            string strTid = objRQ_Invoice_InvoiceInput.Tid;
            objRT_Invoice_InvoiceInput = new RT_Invoice_InvoiceInput();
            DataSet mdsResult = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            DateTime dtimeSys = DateTime.UtcNow;
            //DataSet mdsExec = null;
            //DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(objRQ_Invoice_InvoiceInput.Tid);
            //int nTidSeq = 0;
            //bool bNeedTransaction = true;
            string strFunctionName = "WAS_Invoice_InvoiceInput_Get";
            string strErrorCodeDefault = TError.ErridnInventory.WAS_Invoice_InvoiceInput_Get;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
				});
            #endregion

            try
            {
                #region // Init:
                #endregion

                #region // Refine and Check Input:
                List<MySummaryTable> lst_MySummaryTable = new List<MySummaryTable>();

                List<Invoice_InvoiceInput> lst_Invoice_InvoiceInput = new List<Invoice_InvoiceInput>();
                bool bGet_Invoice_InvoiceInput = (objRQ_Invoice_InvoiceInput.Rt_Cols_Invoice_InvoiceInput != null && objRQ_Invoice_InvoiceInput.Rt_Cols_Invoice_InvoiceInput.Length > 0);

                List<Invoice_InvoiceInputDtl> lst_Invoice_InvoiceInputDtl = new List<Invoice_InvoiceInputDtl>();
                bool bGet_Invoice_InvoiceInputDtl = (objRQ_Invoice_InvoiceInput.Rt_Cols_Invoice_InvoiceInputDtl != null && objRQ_Invoice_InvoiceInput.Rt_Cols_Invoice_InvoiceInputDtl.Length > 0);

                #endregion

                #region // WS_Invoice_InvoiceInput_Get:
                mdsResult = Invoice_InvoiceInput_Get(
                    objRQ_Invoice_InvoiceInput.Tid // strTid
                    , objRQ_Invoice_InvoiceInput.GwUserCode // strGwUserCode
                    , objRQ_Invoice_InvoiceInput.GwPassword // strGwPassword
                    , objRQ_Invoice_InvoiceInput.WAUserCode // strUserCode
                    , objRQ_Invoice_InvoiceInput.WAUserPassword // strUserPassword
                    , ref alParamsCoupleError // alParamsCoupleError
                                              //// Filter:
                    , objRQ_Invoice_InvoiceInput.Ft_RecordStart // strFt_RecordStart
                    , objRQ_Invoice_InvoiceInput.Ft_RecordCount // strFt_RecordCount
                    , objRQ_Invoice_InvoiceInput.Ft_WhereClause // strFt_WhereClause
                                                                //// Return:
                    , objRQ_Invoice_InvoiceInput.Rt_Cols_Invoice_InvoiceInput // strRt_Cols_Invoice_InvoiceInput
                    , objRQ_Invoice_InvoiceInput.Rt_Cols_Invoice_InvoiceInputDtl // strRt_Cols_Invoice_InvoiceInputDtl
                    );
                #endregion

                #region // GetData:
                if (!CmUtils.CMyDataSet.HasError(mdsResult))
                {
                    ////
                    if (bGet_Invoice_InvoiceInput)
                    {
                        ////
                        DataTable dt_MySummaryTable = mdsResult.Tables["MySummaryTable"].Copy();
                        lst_MySummaryTable = TUtils.DataTableCmUtils.ToListof<MySummaryTable>(dt_MySummaryTable);
                        objRT_Invoice_InvoiceInput.MySummaryTable = lst_MySummaryTable[0];

                        ////
                        DataTable dt_Invoice_InvoiceInput = mdsResult.Tables["Invoice_InvoiceInput"].Copy();
                        lst_Invoice_InvoiceInput = TUtils.DataTableCmUtils.ToListof<Invoice_InvoiceInput>(dt_Invoice_InvoiceInput);
                        objRT_Invoice_InvoiceInput.Lst_Invoice_InvoiceInput = lst_Invoice_InvoiceInput;
                    }

                    ////
                    if (bGet_Invoice_InvoiceInputDtl)
                    {
                        ////
                        DataTable dt_Invoice_InvoiceInputDtl = mdsResult.Tables["Invoice_InvoiceInputDtl"].Copy();
                        lst_Invoice_InvoiceInputDtl = TUtils.DataTableCmUtils.ToListof<Invoice_InvoiceInputDtl>(dt_Invoice_InvoiceInputDtl);
                        objRT_Invoice_InvoiceInput.Lst_Invoice_InvoiceInputDtl = lst_Invoice_InvoiceInputDtl;
                    }
                }
                #endregion

                // Return Good:
                return mdsResult;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsResult
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Write ReturnLog:
                //_cf.ProcessBizReturn(
                //	ref mdsResult // mdsFinal
                //	, strTid // strTid
                //	, strFunctionName // strFunctionName
                //	);
                #endregion
            }
        }


        private void Invoice_InvoiceInput_SaveX(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            , DateTime dtimeSys
            ////
            , object objFlagIsDelete
            ////
            , DataSet dsData
            )
        {
            #region // Temp:
            //int nTidSeq = 0;
            //bool bMyDebugSql = false;
            string strFunctionName = "Invoice_InvoiceInput_SaveAllX";
            //string strErrorCodeDefault = TError.ErridnInventory.Invoice_InvoiceInput_SaveAllX;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
                ////
                , "objFlagIsDelete",objFlagIsDelete
				////
                });
            //ArrayList alPCErrEx = new ArrayList();
            ////
            Hashtable htParamsSql = new Hashtable();
            #endregion

            #region // Convert Input:
            alParamsCoupleError.AddRange(new object[]{
                "Check.dsData", CmUtils.XmlUtils.DataSet2XmlSimple(dsData)
                });
            #endregion

            #region // Refine and Check Input Invoice_InvoiceInput:
            ////
            bool bIsDelete = CmUtils.StringUtils.StringEqual(objFlagIsDelete, TConst.Flag.Yes);

            ////
            DataTable dtInput_Invoice_InvoiceInput = null;
            {
                ////
                string strTableCheck = "Invoice_InvoiceInput";
                ////
                if (!dsData.Tables.Contains(strTableCheck))
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.TableName", strTableCheck
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Invoice_InvoiceInput_SaveX_Input_InvoiceTblNotFound
                        , null
                        , alParamsCoupleError.ToArray()
                        );
                }
                dtInput_Invoice_InvoiceInput = dsData.Tables[strTableCheck];
                ////
                if (dtInput_Invoice_InvoiceInput.Rows.Count < 1)
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.TableName", strTableCheck
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Invoice_InvoiceInput_SaveX_Input_InvoiceTblInvalid
                        , null
                        , alParamsCoupleError.ToArray()
                        );
                }
                ////
                TUtils.CUtils.StdDataInTable(
                    dtInput_Invoice_InvoiceInput // dtData
                    , "StdParam", "InvoiceCode" // arrstrCouple
                    , "StdParam", "MST" // arrstrCouple
                    , "StdParam", "NetworkID" // arrstrCouple
                    , "StdParam", "RefNo" // arrstrCouple
                    , "StdParam", "FormNo" // arrstrCouple
                    , "StdParam", "Sign" // arrstrCouple
                    , "StdParam", "SourceInvoiceCode" // arrstrCouple
                    , "StdParam", "InvoiceAdjType" // arrstrCouple
                    , "StdParam", "PaymentMethodCode" // arrstrCouple
                    , "StdParam", "InvoiceType2" // arrstrCouple
                    , "StdParam", "CustomerNNTCode" // arrstrCouple
                    , "", "CustomerNNTName" // arrstrCouple
                    , "", "CustomerNNTAddress" // arrstrCouple
                    , "", "CustomerNNTPhone" // arrstrCouple
                    , "", "CustomerNNTBankName" // arrstrCouple
                    , "", "CustomerNNTEmail" // arrstrCouple
                    , "", "CustomerNNTAccNo" // arrstrCouple
                    , "", "CustomerNNTBuyerName" // arrstrCouple
                    , "StdParam", "CustomerMST" // arrstrCouple
                    , "StdParam", "TInvoiceCode" // arrstrCouple
                    , "StdParam", "InvoiceNo" // arrstrCouple
                    , "", "InvoiceDateUTC" // arrstrCouple
                    , "", "EmailSend" // arrstrCouple
                    , "", "InvoiceFileSpec" // arrstrCouple
                    , "", "InvoiceFilePath" // arrstrCouple
                    , "", "InvoicePDFFilePath" // arrstrCouple
                    , "float", "TotalValInvoice" // arrstrCouple
                    , "float", "TotalValVAT" // arrstrCouple
                    , "float", "TotalValPmt" // arrstrCouple
                    , "StdDTime", "CreateDTimeUTC" // arrstrCouple
                    , "", "CreateBy" // arrstrCouple
                    , "StdDTime", "InvoiceNoDTimeUTC" // arrstrCouple
                    , "", "InvoiceNoBy" // arrstrCouple
                    , "StdDTime", "SignDTimeUTC" // arrstrCouple
                    , "", "SignBy" // arrstrCouple
                    , "StdDTime", "ApprDTimeUTC" // arrstrCouple
                    , "", "ApprBy" // arrstrCouple
                    , "StdDTime", "CancelDTimeUTC" // arrstrCouple
                    , "", "CancelBy" // arrstrCouple
                    , "StdDTime", "SendEmailDTimeUTC" // arrstrCouple
                    , "", "SendEmailBy" // arrstrCouple
                    , "StdDTime", "IssuedDTimeUTC" // arrstrCouple
                    , "", "IssuedBy" // arrstrCouple
                    , "", "AttachedDelFilePath" // arrstrCouple
                    , "", "DeleteReason" // arrstrCouple
                    , "StdDTime", "DeleteDTimeUTC" // arrstrCouple
                    , "", "DeleteBy" // arrstrCouple
                    , "StdDTime", "ChangeDTimeUTC" // arrstrCouple
                    , "", "ChangeBy" // arrstrCouple
                    , "StdParam", "InvoiceVerifyCQTCode" // arrstrCouple
                    , "StdParam", "CurrencyCode" // arrstrCouple
                    , "float", "CurrencyRate" // arrstrCouple
                    , "float", "ValGoodsNotTaxable" // arrstrCouple
                    , "float", "ValGoodsNotChargeTax" // arrstrCouple
                    , "float", "ValGoodsVAT5" // arrstrCouple
                    , "float", "ValVAT5" // arrstrCouple
                    , "float", "ValGoodsVAT10" // arrstrCouple
                    , "float", "ValVAT10" // arrstrCouple
                    , "", "NNTFullName" // arrstrCouple
                    , "", "NNTFullAdress" // arrstrCouple
                    , "", "NNTPhone" // arrstrCouple
                    , "", "NNTFax" // arrstrCouple
                    , "", "NNTEmail" // arrstrCouple
                    , "", "NNTWebsite" // arrstrCouple
                    , "", "NNTAccNo" // arrstrCouple
                    , "", "NNTBankName" // arrstrCouple
                    , "StdDTime", "LUDTimeUTC" // arrstrCouple
                    , "", "LUBy" // arrstrCouple
                    , "", "Remark" // arrstrCouple
                    , "", "InvoiceCF1" // arrstrCouple
                    , "", "InvoiceCF2" // arrstrCouple
                    , "", "InvoiceCF3" // arrstrCouple
                    , "", "InvoiceCF4" // arrstrCouple
                    , "", "InvoiceCF5" // arrstrCouple
                    , "", "InvoiceCF6" // arrstrCouple
                    , "", "InvoiceCF7" // arrstrCouple
                    , "", "InvoiceCF8" // arrstrCouple
                    , "", "InvoiceCF9" // arrstrCouple
                    , "", "InvoiceCF10" // arrstrCouple
                    , "", "FlagChange" // arrstrCouple
                    , "", "FlagPushOutSite" // arrstrCouple
                    , "", "FlagDeleteOutSite" // arrstrCouple
                    , "", "InvoiceStatus" // arrstrCouple
                    );
                ////

                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_InvoiceInput, "LogLUDTimeUTC", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_InvoiceInput, "LogLUBy", typeof(object));
                ////
            }
            #endregion

            #region //// SaveTemp Invoice_InvoiceInput:
            //if (!bIsDelete)
            {
                // Upload:
                TUtils.CUtils.MyBuildDBDT_Common(
                    _cf.db // db
                    , "#input_Invoice_InvoiceInput" // strTableName
                    , new object[] {
                            "InvoiceCode", TConst.BizMix.Default_DBColType
                            , "MST", TConst.BizMix.Default_DBColType
                            , "NetworkID", TConst.BizMix.Default_DBColType
                            , "RefNo", TConst.BizMix.Default_DBColType
                            , "FormNo", TConst.BizMix.Default_DBColType
                            , "Sign", TConst.BizMix.Default_DBColType
                            , "SourceInvoiceCode", TConst.BizMix.Default_DBColType
                            , "InvoiceAdjType", TConst.BizMix.Default_DBColType
                            , "PaymentMethodCode", TConst.BizMix.Default_DBColType
                            , "InvoiceType2", TConst.BizMix.Default_DBColType
                            , "CustomerNNTCode", TConst.BizMix.Default_DBColType
                            , "CustomerNNTName", TConst.BizMix.Default_DBColType
                            , "CustomerNNTAddress", TConst.BizMix.Default_DBColType
                            , "CustomerNNTPhone", TConst.BizMix.Default_DBColType
                            , "CustomerNNTBankName", TConst.BizMix.Default_DBColType
                            , "CustomerNNTEmail", TConst.BizMix.Default_DBColType
                            , "CustomerNNTAccNo", TConst.BizMix.Default_DBColType
                            , "CustomerNNTBuyerName", TConst.BizMix.Default_DBColType
                            , "CustomerMST", TConst.BizMix.Default_DBColType
                            , "TInvoiceCode", TConst.BizMix.Default_DBColType
                            , "InvoiceNo", TConst.BizMix.Default_DBColType
                            , "InvoiceDateUTC", TConst.BizMix.Default_DBColType
                            , "EmailSend", TConst.BizMix.Default_DBColType
                            , "InvoiceFileSpec", TConst.BizMix.Default_DBColType
                            , "InvoiceFilePath", TConst.BizMix.Default_DBColType
                            , "InvoicePDFFilePath", TConst.BizMix.Default_DBColType
                            , "TotalValInvoice", "float"
                            , "TotalValVAT", "float"
                            , "TotalValPmt", "float"
                            , "CreateDTimeUTC", TConst.BizMix.Default_DBColType
                            , "CreateBy", TConst.BizMix.Default_DBColType
                            , "InvoiceNoDTimeUTC", TConst.BizMix.Default_DBColType
                            , "InvoiceNoBy", TConst.BizMix.Default_DBColType
                            , "SignDTimeUTC", TConst.BizMix.Default_DBColType
                            , "SignBy", TConst.BizMix.Default_DBColType
                            , "ApprDTimeUTC", TConst.BizMix.Default_DBColType
                            , "ApprBy", TConst.BizMix.Default_DBColType
                            , "CancelDTimeUTC", TConst.BizMix.Default_DBColType
                            , "CancelBy", TConst.BizMix.Default_DBColType
                            , "SendEmailDTimeUTC", TConst.BizMix.Default_DBColType
                            , "SendEmailBy", TConst.BizMix.Default_DBColType
                            , "IssuedDTimeUTC", TConst.BizMix.Default_DBColType
                            , "IssuedBy", TConst.BizMix.Default_DBColType
                            , "AttachedDelFilePath", TConst.BizMix.Default_DBColType
                            , "DeleteReason", TConst.BizMix.Default_DBColType
                            , "DeleteDTimeUTC", TConst.BizMix.Default_DBColType
                            , "DeleteBy", TConst.BizMix.Default_DBColType
                            , "ChangeDTimeUTC", TConst.BizMix.Default_DBColType
                            , "ChangeBy", TConst.BizMix.Default_DBColType
                            , "InvoiceVerifyCQTCode", TConst.BizMix.Default_DBColType
                            , "CurrencyCode", TConst.BizMix.Default_DBColType
                            , "CurrencyRate", TConst.BizMix.Default_DBColType
                            , "ValGoodsNotTaxable", "float"
                            , "ValGoodsNotChargeTax", "float"
                            , "ValGoodsVAT5", "float"
                            , "ValVAT5", "float"
                            , "ValGoodsVAT10", "float"
                            , "ValVAT10", "float"
                            , "NNTFullName", TConst.BizMix.Default_DBColType
                            , "NNTFullAdress", TConst.BizMix.Default_DBColType
                            , "NNTPhone", TConst.BizMix.Default_DBColType
                            , "NNTFax", TConst.BizMix.Default_DBColType
                            , "NNTEmail", TConst.BizMix.Default_DBColType
                            , "NNTWebsite", TConst.BizMix.Default_DBColType
                            , "NNTAccNo", TConst.BizMix.Default_DBColType
                            , "NNTBankName", TConst.BizMix.Default_DBColType
                            , "LUDTimeUTC", TConst.BizMix.Default_DBColType
                            , "LUBy", TConst.BizMix.Default_DBColType
                            , "Remark", TConst.BizMix.Default_DBColType
                            , "InvoiceCF1", TConst.BizMix.Default_DBColType
                            , "InvoiceCF2", TConst.BizMix.Default_DBColType
                            , "InvoiceCF3", TConst.BizMix.Default_DBColType
                            , "InvoiceCF4", TConst.BizMix.Default_DBColType
                            , "InvoiceCF5", TConst.BizMix.Default_DBColType
                            , "InvoiceCF6", TConst.BizMix.Default_DBColType
                            , "InvoiceCF7", TConst.BizMix.Default_DBColType
                            , "InvoiceCF8", TConst.BizMix.Default_DBColType
                            , "InvoiceCF9", TConst.BizMix.Default_DBColType
                            , "InvoiceCF10", TConst.BizMix.Default_DBColType
                            , "FlagChange", TConst.BizMix.Default_DBColType
                            , "FlagPushOutSite", TConst.BizMix.Default_DBColType
                            , "FlagDeleteOutSite", TConst.BizMix.Default_DBColType
                            , "InvoiceStatus", TConst.BizMix.Default_DBColType
                            , "LogLUDTimeUTC", TConst.BizMix.Default_DBColType
                            , "LogLUBy", TConst.BizMix.Default_DBColType
                        } // arrSingleStructure
                    , dtInput_Invoice_InvoiceInput // dtData
                );
            }
            #endregion

            #region //// Refine and Check Input Invoice_InvoiceInputDtl:
            ////
            DataTable dtInput_Invoice_InvoiceInputDtl = null;
            if (!bIsDelete)
            {
                ////
                string strTableCheck = "Invoice_InvoiceInputDtl";
                ////
                if (!dsData.Tables.Contains(strTableCheck))
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.TableName", strTableCheck
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Invoice_InvoiceInput_SaveX_Input_InvoiceDtlTblNotFound
                        , null
                        , alParamsCoupleError.ToArray()
                        );
                }
                dtInput_Invoice_InvoiceInputDtl = dsData.Tables[strTableCheck];
                ////

                if (dtInput_Invoice_InvoiceInputDtl.Rows.Count < 1)
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.TableName", strTableCheck
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Invoice_InvoiceInput_SaveX_Input_InvoiceDtlTblInvalid
                        , null
                        , alParamsCoupleError.ToArray()
                        );
                }
                ////
                TUtils.CUtils.StdDataInTable(
                    dtInput_Invoice_InvoiceInputDtl // dtData
                    , "StdParam", "InvoiceCode" // arrstrCouple
                    , "StdParam", "Idx" // arrstrCouple
                    , "StdParam", "NetworkID" // arrstrCouple
                    , "StdParam", "SpecCode" // arrstrCouple
                    , "", "SpecName" // arrstrCouple
                    , "StdParam", "ProductID" // arrstrCouple
                    , "", "ProductName" // arrstrCouple
                    , "StdParam", "VATRateCode" // arrstrCouple
                    , "float", "VATRate" // arrstrCouple
                    , "StdParam", "UnitCode" // arrstrCouple
                    , "", "UnitName" // arrstrCouple
                    , "StdParam", "UnitPrice" // arrstrCouple
                    , "float", "Qty" // arrstrCouple
                    , "float", "ValInvoice" // arrstrCouple
                    , "float", "ValTax" // arrstrCouple
                    , "StdParam", "InventoryCode" // arrstrCouple
                    , "float", "DiscountRate" // arrstrCouple
                    , "float", "ValDiscount" // arrstrCouple
                    , "", "Remark" // arrstrCouple
                    , "", "InvoiceDCF1" // arrstrCouple
                    , "", "InvoiceDCF2" // arrstrCouple
                    , "", "InvoiceDCF3" // arrstrCouple
                    , "", "InvoiceDCF4" // arrstrCouple
                    , "", "InvoiceDCF5" // arrstrCouple
                    );
                ////
                //TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_InvoiceInputDtl, "InvoiceCode", typeof(object));
                //TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_InvoiceInputDtl, "NetworkID", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_InvoiceInputDtl, "InvoiceDtlStatus", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_InvoiceInputDtl, "LogLUDTimeUTC", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_InvoiceInputDtl, "LogLUBy", typeof(object));
                ////////
            }
            #endregion

            #region //// SaveTemp Invoice_InvoiceInputDtl For Check:
            if (!bIsDelete)
            {
                // Upload:
                TUtils.CUtils.MyBuildDBDT_Common(
                    _cf.db // db
                    , "#input_Invoice_InvoiceInputDtl" // strTableName
                    , new object[] {
                            "InvoiceCode", TConst.BizMix.Default_DBColType
                            , "Idx", TConst.BizMix.Default_DBColType
                            , "NetworkID", TConst.BizMix.Default_DBColType
                            , "SpecCode", TConst.BizMix.Default_DBColType
                            , "SpecName", TConst.BizMix.Default_DBColType
                            , "ProductID", TConst.BizMix.Default_DBColType
                            , "ProductName", TConst.BizMix.Default_DBColType
                            , "VATRateCode", TConst.BizMix.Default_DBColType
                            , "VATRate", "float"
                            , "UnitCode", TConst.BizMix.Default_DBColType
                            , "UnitName", TConst.BizMix.Default_DBColType
                            , "UnitPrice", "float"
                            , "Qty", "float"
                            , "ValInvoice", "float"
                            , "ValTax", "float"
                            , "InventoryCode", TConst.BizMix.Default_DBColType
                            , "DiscountRate", "float"
                            , "ValDiscount", "float"
                            , "InvoiceDtlStatus", TConst.BizMix.Default_DBColType
                            , "Remark", TConst.BizMix.Default_DBColType
                            , "InvoiceDCF1", TConst.BizMix.Default_DBColType
                            , "InvoiceDCF2", TConst.BizMix.Default_DBColType
                            , "InvoiceDCF3", TConst.BizMix.Default_DBColType
                            , "InvoiceDCF4", TConst.BizMix.Default_DBColType
                            , "InvoiceDCF5", TConst.BizMix.Default_DBColType
                            , "LogLUDTimeUTC", TConst.BizMix.Default_DBColType
                            , "LogLUBy", TConst.BizMix.Default_DBColType
                        } // arrSingleStructure
                    , dtInput_Invoice_InvoiceInputDtl // dtData
                );
            }
            #endregion

            #region // SaveDB:
            {
                //// Clear All:
                {
                    string strSqlDelete = CmUtils.StringUtils.Replace(@"
                            ---- #tbl_Invoice_InvoiceInputDtl:
                            select 
                                t.InvoiceCode
                                , t.Idx
                            into #tbl_Invoice_InvoiceInputDtl
                            from Invoice_InvoiceInputDtl t --//[mylock]
	                            inner join #input_Invoice_InvoiceInput f --//[mylock]
		                            on t.InvoiceCode = f.InvoiceCode
                            where (1=1)
                            ;

                            --- Delete:
                            ---- Invoice_InvoiceInputDtl:
                            delete t 
                            from Invoice_InvoiceInputDtl t --//[mylock]
	                            inner join #tbl_Invoice_InvoiceInputDtl f --//[mylock]
		                            on t.InvoiceCode = f.InvoiceCode
		                                and t.Idx = f.Idx
                            where (1=1)
                            ;

                            ---- Invoice_InvoiceInput:
                            delete t
                            from Invoice_InvoiceInput t --//[mylock]
	                            inner join #input_Invoice_InvoiceInput f --//[mylock]
		                            on t.InvoiceCode = f.InvoiceCode
                            where (1=1)
                            ;

                            --- Clear For Debug:
                            drop table #tbl_Invoice_InvoiceInputDtl;
						");
                    DataSet dtDB = _cf.db.ExecQuery(
                        strSqlDelete
                        );
                }

                //// Insert All:
                if (!bIsDelete)
                {
                    #region // Insert:
                    {
                        ////
                        string zzzzClauseInsert_Invoice_InvoiceInput_zSave = CmUtils.StringUtils.Replace(@"
                                ---- Invoice_InvoiceInput:                                
                                insert into Invoice_InvoiceInput(
	                                InvoiceCode
	                                , MST
	                                , NetworkID
	                                , RefNo
	                                , FormNo
	                                , Sign
	                                , SourceInvoiceCode
	                                , InvoiceAdjType
	                                , PaymentMethodCode
	                                , InvoiceType2
	                                , CustomerNNTCode
	                                , CustomerNNTName
	                                , CustomerNNTAddress
	                                , CustomerNNTPhone
	                                , CustomerNNTBankName
	                                , CustomerNNTEmail
	                                , CustomerNNTAccNo
	                                , CustomerNNTBuyerName
	                                , CustomerMST
	                                , TInvoiceCode
	                                , InvoiceNo
	                                , InvoiceDateUTC
	                                , EmailSend
	                                , InvoiceFileSpec
	                                , InvoiceFilePath
	                                , InvoicePDFFilePath
	                                , TotalValInvoice
	                                , TotalValVAT
	                                , TotalValPmt
	                                , CreateDTimeUTC
	                                , CreateBy
	                                , InvoiceNoDTimeUTC
	                                , InvoiceNoBy
	                                , SignDTimeUTC
	                                , SignBy
	                                , ApprDTimeUTC
	                                , ApprBy
	                                , CancelDTimeUTC
	                                , CancelBy
	                                , SendEmailDTimeUTC
	                                , SendEmailBy
	                                , IssuedDTimeUTC
	                                , IssuedBy
	                                , AttachedDelFilePath
	                                , DeleteReason
	                                , DeleteDTimeUTC
	                                , DeleteBy
	                                , ChangeDTimeUTC
	                                , ChangeBy
	                                , InvoiceVerifyCQTCode
	                                , CurrencyCode
	                                , CurrencyRate
	                                , ValGoodsNotTaxable
	                                , ValGoodsNotChargeTax
	                                , ValGoodsVAT5
	                                , ValVAT5
	                                , ValGoodsVAT10
	                                , ValVAT10
	                                , NNTFullName
	                                , NNTFullAdress
	                                , NNTPhone
	                                , NNTFax
	                                , NNTEmail
	                                , NNTWebsite
	                                , NNTAccNo
	                                , NNTBankName
	                                , LUDTimeUTC
	                                , LUBy
	                                , Remark
	                                , InvoiceCF1
	                                , InvoiceCF2
	                                , InvoiceCF3
	                                , InvoiceCF4
	                                , InvoiceCF5
	                                , InvoiceCF6
	                                , InvoiceCF7
	                                , InvoiceCF8
	                                , InvoiceCF9
	                                , InvoiceCF10
	                                , FlagChange
	                                , FlagPushOutSite
	                                , FlagDeleteOutSite
	                                , InvoiceStatus
	                                , LogLUDTimeUTC
	                                , LogLUBy
                                )
                                select 
	                                t.InvoiceCode
	                                , t.MST
	                                , t.NetworkID
	                                , t.RefNo
	                                , t.FormNo
	                                , t.Sign
	                                , t.SourceInvoiceCode
	                                , t.InvoiceAdjType
	                                , t.PaymentMethodCode
	                                , t.InvoiceType2
	                                , t.CustomerNNTCode
	                                , t.CustomerNNTName
	                                , t.CustomerNNTAddress
	                                , t.CustomerNNTPhone
	                                , t.CustomerNNTBankName
	                                , t.CustomerNNTEmail
	                                , t.CustomerNNTAccNo
	                                , t.CustomerNNTBuyerName
	                                , t.CustomerMST
	                                , t.TInvoiceCode
	                                , t.InvoiceNo
	                                , t.InvoiceDateUTC
	                                , t.EmailSend
	                                , t.InvoiceFileSpec
	                                , t.InvoiceFilePath
	                                , t.InvoicePDFFilePath
	                                , t.TotalValInvoice
	                                , t.TotalValVAT
	                                , t.TotalValPmt
	                                , t.CreateDTimeUTC
	                                , t.CreateBy
	                                , t.InvoiceNoDTimeUTC
	                                , t.InvoiceNoBy
	                                , t.SignDTimeUTC
	                                , t.SignBy
	                                , t.ApprDTimeUTC
	                                , t.ApprBy
	                                , t.CancelDTimeUTC
	                                , t.CancelBy
	                                , t.SendEmailDTimeUTC
	                                , t.SendEmailBy
	                                , t.IssuedDTimeUTC
	                                , t.IssuedBy
	                                , t.AttachedDelFilePath
	                                , t.DeleteReason
	                                , t.DeleteDTimeUTC
	                                , t.DeleteBy
	                                , t.ChangeDTimeUTC
	                                , t.ChangeBy
	                                , t.InvoiceVerifyCQTCode
	                                , t.CurrencyCode
	                                , t.CurrencyRate
	                                , t.ValGoodsNotTaxable
	                                , t.ValGoodsNotChargeTax
	                                , t.ValGoodsVAT5
	                                , t.ValVAT5
	                                , t.ValGoodsVAT10
	                                , t.ValVAT10
	                                , t.NNTFullName
	                                , t.NNTFullAdress
	                                , t.NNTPhone
	                                , t.NNTFax
	                                , t.NNTEmail
	                                , t.NNTWebsite
	                                , t.NNTAccNo
	                                , t.NNTBankName
	                                , t.LUDTimeUTC
	                                , t.LUBy
	                                , t.Remark
	                                , t.InvoiceCF1
	                                , t.InvoiceCF2
	                                , t.InvoiceCF3
	                                , t.InvoiceCF4
	                                , t.InvoiceCF5
	                                , t.InvoiceCF6
	                                , t.InvoiceCF7
	                                , t.InvoiceCF8
	                                , t.InvoiceCF9
	                                , t.InvoiceCF10
	                                , t.FlagChange
	                                , t.FlagPushOutSite
	                                , t.FlagDeleteOutSite
	                                , t.InvoiceStatus
	                                , '@strLogLUDTimeUTC' LogLUDTimeUTC -- t.LogLUDTimeUTC
	                                , '@strLogLUBy' LogLUBy  --t.LogLUBy
                                from #input_Invoice_InvoiceInput t --//[mylock]
                            "
                            , "@strLogLUDTimeUTC", dtimeSys.ToString("yyyy-MM-dd hh:mm:ss")
                            , "@strLogLUBy", strWAUserCode
                            );
                        /////
                        string zzzzClauseInsert_Invoice_InvoiceInputDtl_zSave = CmUtils.StringUtils.Replace(@"
                                ---- Invoice_InvoiceInputDtl:  
                                insert into Invoice_InvoiceInputDtl(
	                                InvoiceCode
	                                , Idx
	                                , NetworkID
	                                , SpecCode
	                                , SpecName
	                                , ProductID
	                                , ProductName
	                                , VATRateCode
	                                , VATRate
	                                , UnitCode
	                                , UnitName
	                                , UnitPrice
	                                , Qty
                                    , ValInvoice
	                                , ValTax
	                                , InventoryCode
	                                , DiscountRate
	                                , ValDiscount
	                                , InvoiceDtlStatus
	                                , Remark
	                                , InvoiceDCF1
	                                , InvoiceDCF2
	                                , InvoiceDCF3
	                                , InvoiceDCF4
	                                , InvoiceDCF5
	                                , LogLUDTimeUTC
	                                , LogLUBy
                                )
                                select 
	                                t.InvoiceCode
	                                , t.Idx
	                                , t.NetworkID
	                                , t.SpecCode
	                                , t.SpecName
	                                , t.ProductID
	                                , t.ProductName
	                                , t.VATRateCode
	                                , t.VATRate
	                                , t.UnitCode
	                                , t.UnitName
	                                , t.UnitPrice
	                                , t.Qty 
	                                , t.ValInvoice
	                                , t.ValTax
	                                , t.InventoryCode
	                                , t.DiscountRate
	                                , t.ValDiscount
	                                , f.InvoiceStatus
	                                , t.Remark
	                                , t.InvoiceDCF1
	                                , t.InvoiceDCF2
	                                , t.InvoiceDCF3
	                                , t.InvoiceDCF4
	                                , t.InvoiceDCF5
	                                , '@strLogLUDTimeUTC' LogLUDTimeUTC -- t.LogLUDTimeUTC
	                                , '@strLogLUBy' LogLUBy  --t.LogLUBy
                                from #input_Invoice_InvoiceInputDtl t
                                    inner join #input_Invoice_InvoiceInput f --//[mylock]
                                        on t.InvoiceCode = f.InvoiceCode
                            "
                            , "@strLogLUDTimeUTC", dtimeSys.ToString("yyyy-MM-dd hh:mm:ss")
                            , "@strLogLUBy", strWAUserCode
                            );

                        /////
                        string strSqlExec = CmUtils.StringUtils.Replace(@"
								----
								zzzzClauseInsert_Invoice_InvoiceInput_zSave			
								----
								zzzzClauseInsert_Invoice_InvoiceInputDtl_zSave			
								----
							"
                            , "zzzzClauseInsert_Invoice_InvoiceInput_zSave", zzzzClauseInsert_Invoice_InvoiceInput_zSave
                            , "zzzzClauseInsert_Invoice_InvoiceInputDtl_zSave", zzzzClauseInsert_Invoice_InvoiceInputDtl_zSave
                            );
                        ////
                        DataSet dsExec = _cf.db.ExecQuery(strSqlExec);
                        ////
                    }
                    #endregion
                }
            }
            #endregion

            #region //// Clear For Debug:
            if (!bIsDelete)
            {
                ////
                string strSqlClearForDebug = CmUtils.StringUtils.Replace(@"
						---- Clear for Debug:
						drop table #input_Invoice_InvoiceInput;
						drop table #input_Invoice_InvoiceInputDtl;
					");

                _cf.db.ExecQuery(
                    strSqlClearForDebug
                    );
                ////
            }
            else
            {
                ////
                string strSqlClearForDebug = CmUtils.StringUtils.Replace(@"
						---- Clear for Debug:
						drop table #input_Invoice_InvoiceInput;
					");

                _cf.db.ExecQuery(
                    strSqlClearForDebug
                    );
                ////

            }
            #endregion

            // Return Good:
            //MyCodeLabel_Done:
            return;
            //TDALUtils.DBUtils.CommitSafety(_cf.db);
            //mdsFinal.AcceptChanges();
            //return mdsFinal;		
        }
        
        public DataSet Invoice_InvoiceInput_Save(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            ////
            , object objFlagIsDelete
            ////
            , DataSet dsData
            )
        {
            #region // Temp:
            DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            //int nTidSeq = 0;
            DateTime dtimeSys = DateTime.UtcNow;
            string strFunctionName = "Invoice_InvoiceInput_Save";
            string strErrorCodeDefault = TError.ErridnInventory.Invoice_InvoiceInput_Save;
            alParamsCoupleError.AddRange(new object[]{
                    "strFunctionName", strFunctionName
                    , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
                    /////
                    , "objFlagIsDelete", objFlagIsDelete
			        ////
                    });
            #endregion

            try
            {
                #region // Init:
                //_cf.db.LogUserId = _cf.sinf.strUserCode;
                _cf.db.BeginTransaction();

                //// Write RequestLog:
                _cf.ProcessBizReq_OutSide(
                    strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    , alParamsCoupleError // alParamsCoupleError
                    );

                //// Sys_User_CheckAuthentication:
                //Sys_User_CheckAuthentication(
                //    ref alParamsCoupleError
                //    , strWAUserCode
                //    , strWAUserPassword
                //    );

                //// Check Access/Deny:
                //Sys_Access_CheckDenyV30(
                //    ref alParamsCoupleError
                //    , strWAUserCode
                //    , strFunctionName
                //    );
                #endregion

                #region // Invoice_InvoiceInput_SaveX:
                //DataSet dsGetData = null;
                {

                    Invoice_InvoiceInput_SaveX(
                        strTid // strTid
                        , strGwUserCode // strGwUserCode
                        , strGwPassword // strGwPassword
                        , strWAUserCode // strWAUserCode
                        , strWAUserPassword // strWAUserPassword
                        , ref alParamsCoupleError // alParamsCoupleError
                        , dtimeSys // dtimeSys
                                   ////
                        , objFlagIsDelete // objFlagIsDelete
                                          ////
                        , dsData // dsData
                        );
                }
                ////
                //CmUtils.DataUtils.MoveDataTable(ref mdsFinal, ref dsGetData);
                #endregion

                // Return Good:
                TDALUtils.DBUtils.CommitSafety(_cf.db);
                mdsFinal.AcceptChanges();
                return mdsFinal;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Rollback:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);

                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsFinal
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Rollback and Release resources:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);
                TDALUtils.DBUtils.ReleaseAllSemaphore(_cf.db_Sys, true);

                // Write ReturnLog:
                _cf.ProcessBizReturn_OutSide(
                    ref mdsFinal // mdsFinal
                    , strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    );
                #endregion
            }
        }

        public DataSet WAS_Invoice_InvoiceInput_Save(
            ref ArrayList alParamsCoupleError
            , RQ_Invoice_InvoiceInput objRQ_Invoice_InvoiceInput
            ////
            , out RT_Invoice_InvoiceInput objRT_Invoice_InvoiceInput
            )
        {
            #region // Temp:
            string strTid = objRQ_Invoice_InvoiceInput.Tid;
            objRT_Invoice_InvoiceInput = new RT_Invoice_InvoiceInput();
            DataSet mdsResult = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            DateTime dtimeSys = DateTime.UtcNow;
            //DataSet mdsExec = null;
            //DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(objRQ_Invoice_InvoiceInput.Tid);
            //int nTidSeq = 0;
            //bool bNeedTransaction = true;
            string strFunctionName = "WAS_Invoice_InvoiceInput_Save";
            string strErrorCodeDefault = TError.ErridnInventory.WAS_Invoice_InvoiceInput_Save;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
                , "FlagIsDelete", objRQ_Invoice_InvoiceInput.FlagIsDelete
                , "Lst_Invoice_InvoiceInput", TJson.JsonConvert.SerializeObject(objRQ_Invoice_InvoiceInput.Lst_Invoice_InvoiceInput)
                , "Lst_Invoice_InvoiceInputDtl", TJson.JsonConvert.SerializeObject(objRQ_Invoice_InvoiceInput.Lst_Invoice_InvoiceInputDtl)
                });
            #endregion

            try
            {
                #region // Init:
                #endregion

                #region // Refine and Check Input:
                List<Invoice_InvoiceInput> lst_Invoice_InvoiceInput = new List<Invoice_InvoiceInput>();
                List<Invoice_InvoiceInputDtl> lst_Invoice_InvoiceInputDtl = new List<Invoice_InvoiceInputDtl>();
                #endregion

                #region // Refine and Check Input:
                ////
                DataSet dsData = new DataSet();
                {
                    ////
                    ////
                    if (objRQ_Invoice_InvoiceInput.Lst_Invoice_InvoiceInput != null)
                    {
                        DataTable dt_Invoice_InvoiceInput = TUtils.DataTableCmUtils.ToDataTable<Invoice_InvoiceInput>(objRQ_Invoice_InvoiceInput.Lst_Invoice_InvoiceInput, "Invoice_InvoiceInput");
                        dsData.Tables.Add(dt_Invoice_InvoiceInput);
                    }

                    ////
                    if (objRQ_Invoice_InvoiceInput.Lst_Invoice_InvoiceInputDtl != null)
                    {
                        DataTable dt_Invoice_InvoiceInputDtl = TUtils.DataTableCmUtils.ToDataTable<Invoice_InvoiceInputDtl>(objRQ_Invoice_InvoiceInput.Lst_Invoice_InvoiceInputDtl, "Invoice_InvoiceInputDtl");
                        dsData.Tables.Add(dt_Invoice_InvoiceInputDtl);
                    }
                    
                    ////

                }
                #endregion

                #region // WS_Invoice_InvoiceInput_Create:
                mdsResult = Invoice_InvoiceInput_Save(
                    objRQ_Invoice_InvoiceInput.Tid // strTid
                    , objRQ_Invoice_InvoiceInput.GwUserCode // strGwUserCode
                    , objRQ_Invoice_InvoiceInput.GwPassword // strGwPassword
                    , objRQ_Invoice_InvoiceInput.WAUserCode // strUserCode
                    , objRQ_Invoice_InvoiceInput.WAUserPassword // strUserPassword
                    , ref alParamsCoupleError // alParamsCoupleError
                                              ////
                    , objRQ_Invoice_InvoiceInput.FlagIsDelete // objFlagIsDelete
                                                              ////
                    , dsData // dsData
                    );
                #endregion

                // Return Good:
                return mdsResult;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsResult
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Write ReturnLog:
                //_cf.ProcessBizReturn(
                //	ref mdsResult // mdsFinal
                //	, strTid // strTid
                //	, strFunctionName // strFunctionName
                //	);
                #endregion
            }
        }

        private void Invoice_InvoiceInput_DeleteX(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            , DateTime dtimeSys
            ////
            , DataSet dsData
            ////
            , object objFt_Cols_Upd
            )
        {
            #region // Temp:
            //int nTidSeq = 0;
            //bool bMyDebugSql = false;
            string strFunctionName = "Invoice_InvoiceInput_DeleteX";
            //string strErrorCodeDefault = TError.ErridnInventory.Invoice_InvoiceInput_SaveAllX;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
                ////
				, "objFt_Cols_Upd", objFt_Cols_Upd
                });
            //ArrayList alPCErrEx = new ArrayList();
            ////
            Hashtable htParamsSql = new Hashtable();
            #endregion

            #region // Convert Input:
            alParamsCoupleError.AddRange(new object[]{
                "Check.dsData", CmUtils.XmlUtils.DataSet2XmlSimple(dsData)
                });
            #endregion

            #region // Refine and Check Input:
            string strFt_Cols_Upd = TUtils.CUtils.StdParam(objFt_Cols_Upd);
            strFt_Cols_Upd = (strFt_Cols_Upd == null ? "" : strFt_Cols_Upd);
            ////

            ////
            bool bUpd_AttachedDelFilePath = strFt_Cols_Upd.Contains("Invoice_InvoiceInput.AttachedDelFilePath".ToUpper());
            bool bUpd_DeleteReason = strFt_Cols_Upd.Contains("Invoice_InvoiceInput.DeleteReason".ToUpper());
            bool bUpd_InvoicePDFFilePath = strFt_Cols_Upd.Contains("Invoice_InvoiceInput.InvoicePDFFilePath".ToUpper());
            bool bUpd_DeleteDTimeUTC = strFt_Cols_Upd.Contains("Invoice_InvoiceInput.DeleteDTimeUTC".ToUpper());
            bool bUpd_DeleteBy = strFt_Cols_Upd.Contains("Invoice_InvoiceInput.DeleteBy".ToUpper());
            bool bUpd_InvoiceStatus = strFt_Cols_Upd.Contains("Invoice_InvoiceInput.InvoiceStatus".ToUpper());
            //bool bUpd_InvoiceDtlStatus = strFt_Cols_Upd.Contains("Invoice_InvoiceInput.InvoiceDtlStatus".ToUpper());

            #endregion

            #region // Refine and Check Input Invoice_InvoiceInput:

            ////
            DataTable dtInput_Invoice_InvoiceInput = null;
            {
                ////
                string strTableCheck = "Invoice_InvoiceInput";
                ////
                if (!dsData.Tables.Contains(strTableCheck))
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.TableName", strTableCheck
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Invoice_InvoiceInput_SaveX_Input_InvoiceTblNotFound
                        , null
                        , alParamsCoupleError.ToArray()
                        );
                }
                dtInput_Invoice_InvoiceInput = dsData.Tables[strTableCheck];
                ////
                if (dtInput_Invoice_InvoiceInput.Rows.Count < 1)
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.TableName", strTableCheck
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Invoice_InvoiceInput_SaveX_Input_InvoiceTblInvalid
                        , null
                        , alParamsCoupleError.ToArray()
                        );
                }
                ////
                TUtils.CUtils.StdDataInTable(
                    dtInput_Invoice_InvoiceInput // dtData
                    , "StdParam", "InvoiceCode" // arrstrCouple
                    , "StdParam", "AttachedDelFilePath" // arrstrCouple
                    , "StdParam", "DeleteReason" // arrstrCouple
                    , "StdParam", "InvoicePDFFilePath" // arrstrCouple
                    , "StdDTime", "DeleteDTimeUTC" // arrstrCouple
                    , "", "DeleteBy" // arrstrCouple
                    , "StdFlag", "InvoiceStatus" // arrstrCouple
                    );
                ////

                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_InvoiceInput, "LogLUDTimeUTC", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_InvoiceInput, "LogLUBy", typeof(object));
                ////
                for (int nScan = 0; nScan < dtInput_Invoice_InvoiceInput.Rows.Count; nScan++)
                {
                    ////
                    DataRow drScan = dtInput_Invoice_InvoiceInput.Rows[nScan];

                    ////
                    DataTable dtDB_Invoice_InvoiceInput = null;

                    ////
                    Invoice_InvoiceInput_CheckDB(
                        ref alParamsCoupleError // alParamsCoupleError
                        , drScan["InvoiceCode"] // objAssetCode
                        , TConst.Flag.Yes // strFlagExistToCheck
                        , "" // strFlagActiveListToCheck
                        , out dtDB_Invoice_InvoiceInput // dtDB_Invoice_InvoiceInput
                        );

                    string strAttachedDelFilePath = string.Format("{0}", drScan["AttachedDelFilePath"]).Trim();
                    string strDeleteReason = string.Format("{0}", drScan["DeleteReason"]).Trim();
                    string strInvoicePDFFilePath = string.Format("{0}", drScan["InvoicePDFFilePath"]).Trim();
                    string strDeleteDTimeUTC = TUtils.CUtils.StdDTime(drScan["DeleteDTimeUTC"]);
                    string strDeleteBy = string.Format("{0}", drScan["DeleteBy"]).Trim();


                    ////
                    if (bUpd_InvoicePDFFilePath && string.IsNullOrEmpty(strInvoicePDFFilePath))
                    {
                        alParamsCoupleError.AddRange(new object[]{
                            "Check.strInvoicePDFFilePath", strInvoicePDFFilePath
                            });
                        throw CmUtils.CMyException.Raise(
                            TError.ErridnInventory.Invoice_DtlCustomField_Update_InvalidInvoiceDtlCustomFieldName
                            , null
                            , alParamsCoupleError.ToArray()
                            );
                    }
                    ////
                    if (bUpd_DeleteDTimeUTC && string.IsNullOrEmpty(strDeleteDTimeUTC))
                    {
                        alParamsCoupleError.AddRange(new object[]{
                            "Check.strDeleteDTimeUTC", strDeleteDTimeUTC
                            });
                        throw CmUtils.CMyException.Raise(
                            TError.ErridnInventory.Invoice_DtlCustomField_Update_InvalidInvoiceDtlCustomFieldName
                            , null
                            , alParamsCoupleError.ToArray()
                            );
                    }
                    ////
                    if (bUpd_DeleteBy && string.IsNullOrEmpty(strDeleteBy))
                    {
                        alParamsCoupleError.AddRange(new object[]{
                            "Check.strDeleteBy", strDeleteBy
                            });
                        throw CmUtils.CMyException.Raise(
                            TError.ErridnInventory.Invoice_DtlCustomField_Update_InvalidInvoiceDtlCustomFieldName
                            , null
                            , alParamsCoupleError.ToArray()
                            );
                    }

                    ////
                    drScan["AttachedDelFilePath"] = strAttachedDelFilePath;
                    drScan["DeleteReason"] = strDeleteReason;
                    drScan["InvoicePDFFilePath"] = strInvoicePDFFilePath; // string.Format("{0}", drScan["InvoiceDtlCustomFieldName"]).Trim();
                    drScan["DeleteDTimeUTC"] = strDeleteDTimeUTC;
                    drScan["DeleteBy"] = strDeleteBy;
                    drScan["InvoiceStatus"] = TConst.InvoiceStatus.Deleted;
                    drScan["LogLUDTimeUTC"] = dtimeSys.ToString("yyyy-MM-dd HH:mm:ss");
                    drScan["LogLUBy"] = strWAUserCode;
                }
            }
            #endregion

            #region //// SaveTemp Invoice_InvoiceInput:
            //if (!bIsDelete)
            {
                // Upload:
                TUtils.CUtils.MyBuildDBDT_Common(
                    _cf.db // db
                    , "#input_Invoice_InvoiceInput" // strTableName
                    , new object[] {
                            "InvoiceCode", TConst.BizMix.Default_DBColType
                            , "AttachedDelFilePath", TConst.BizMix.Default_DBColType
                            , "DeleteReason", TConst.BizMix.Default_DBColType
                            , "InvoicePDFFilePath", TConst.BizMix.Default_DBColType
                            , "DeleteDTimeUTC", TConst.BizMix.Default_DBColType
                            , "DeleteBy", TConst.BizMix.Default_DBColType
                            , "InvoiceStatus", TConst.BizMix.Default_DBColType
                            , "LogLUDTimeUTC", TConst.BizMix.Default_DBColType
                            , "LogLUBy", TConst.BizMix.Default_DBColType
                        } // arrSingleStructure
                    , dtInput_Invoice_InvoiceInput // dtData
                );
            }
            #endregion

            #region // SaveDB Invoice_InvoiceInput:
            {
                ////
                string zzB_Update_Invoice_InvoiceInput_ClauseSet_zzE = @"
								t.LogLUDTimeUTC = f.LogLUDTimeUTC
								, t.LogLUBy = f.LogLUBy
							";
                ////
                string zzB_Update_Invoice_InvoiceInputDtl_ClauseSet_zzE = @"
						    t.LogLUDTimeUTC = f.LogLUDTimeUTC
						    , t.LogLUBy = f.LogLUBy
						    , t.InvoiceDtlStatus = f.InvoiceDtlStatus
						";

                if (bUpd_AttachedDelFilePath) zzB_Update_Invoice_InvoiceInput_ClauseSet_zzE += ", t.AttachedDelFilePath = f.AttachedDelFilePath";
                if (bUpd_DeleteReason) zzB_Update_Invoice_InvoiceInput_ClauseSet_zzE += ", t.DeleteReason = f.DeleteReason";
                if (bUpd_InvoicePDFFilePath) zzB_Update_Invoice_InvoiceInput_ClauseSet_zzE += ", t.InvoicePDFFilePath = f.InvoicePDFFilePath";
                if (bUpd_DeleteDTimeUTC) zzB_Update_Invoice_InvoiceInput_ClauseSet_zzE += ", t.DeleteDTimeUTC = f.DeleteDTimeUTC";
                if (bUpd_DeleteBy) zzB_Update_Invoice_InvoiceInput_ClauseSet_zzE += ", t.DeleteBy = f.DeleteBy";
                if (bUpd_InvoiceStatus) zzB_Update_Invoice_InvoiceInput_ClauseSet_zzE += ", t.InvoiceStatus = f.InvoiceStatus";
                //if (bUpd_InvoiceDtlStatus) zzB_Update_Invoice_InvoiceInputDtl_ClauseSet_zzE += ", t.InvoiceDtlStatus = f.InvoiceDtlStatus";
                ////
                string zzB_Update_Invoice_InvoiceInput_zzE = CmUtils.StringUtils.Replace(@"
							---- Invoice_InvoiceInput:
							update t
							set 
								zzB_Update_Invoice_InvoiceInput_ClauseSet_zzE
							from Invoice_InvoiceInput t --//[mylock]
								inner join #input_Invoice_InvoiceInput f --//[mylock]
									on t.InvoiceCode = f.InvoiceCode
							where (1=1)
							;
						"
                    , "zzB_Update_Invoice_InvoiceInput_ClauseSet_zzE", zzB_Update_Invoice_InvoiceInput_ClauseSet_zzE
                    );

                ////
                string zzB_Update_Invoice_InvoiceInputDtl_zzE = CmUtils.StringUtils.Replace(@"
							---- #tbl_Invoice_InvoiceInputDtl_Temp: 
                        select 
                            t.InvoiceCode
                            , t.Idx
                            , f.InvoiceStatus InvoiceDtlStatus
                            , f.LogLUDTimeUTC
                            , f.LogLUBy
                        into #tbl_Invoice_InvoiceInputDtl_Temp
						from Invoice_InvoiceInputDtl t --//[mylock]
							inner join #input_Invoice_InvoiceInput f --//[mylock]
								on t.InvoiceCode = f.InvoiceCode
						where (1=1)
						;

                        ---- Update:
						update t
						set 
							zzB_Update_Invoice_InvoiceInputDtl_ClauseSet_zzE
						from Invoice_InvoiceInputDtl t --//[mylock]
							inner join #tbl_Invoice_InvoiceInputDtl_Temp f --//[mylock]
								on t.InvoiceCode = f.InvoiceCode
								    and t.Idx = f.Idx
						where (1=1)
						;
						"
                    , "zzB_Update_Invoice_InvoiceInputDtl_ClauseSet_zzE", zzB_Update_Invoice_InvoiceInputDtl_ClauseSet_zzE
                    );

                ////
                string strSql_Exec = CmUtils.StringUtils.Replace(@"
							----
							zzB_Update_Invoice_InvoiceInput_zzE
							----
							zzB_Update_Invoice_InvoiceInputDtl_zzE
							----
						"
                    , "zzB_Update_Invoice_InvoiceInput_zzE", zzB_Update_Invoice_InvoiceInput_zzE
                    , "zzB_Update_Invoice_InvoiceInputDtl_zzE", zzB_Update_Invoice_InvoiceInputDtl_zzE
                    );
                DataSet dsDB_Check = _cf.db.ExecQuery(
                    strSql_Exec
                    );
            }
            #endregion

            #region //// Clear For Debug:
            {
                ////
                string strSqlClearForDebug = CmUtils.StringUtils.Replace(@"
						---- Clear for Debug:
						drop table #input_Invoice_InvoiceInput;
						--drop table #input_Invoice_InvoiceInputDtl;
					");

                _cf.db.ExecQuery(
                    strSqlClearForDebug
                    );
                ////
            }
            #endregion

            // Return Good:
            //MyCodeLabel_Done:
            return;
            //TDALUtils.DBUtils.CommitSafety(_cf.db);
            //mdsFinal.AcceptChanges();
            //return mdsFinal;		
        }


        public DataSet Invoice_InvoiceInput_Delete(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            ////
            , DataSet dsData
            ////
            , object objFt_Cols_Upd
            )
        {
            #region // Temp:
            DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            //int nTidSeq = 0;
            DateTime dtimeSys = DateTime.UtcNow;
            string strFunctionName = "Invoice_InvoiceInput_Delete";
            string strErrorCodeDefault = TError.ErridnInventory.Invoice_InvoiceInput_Delete;
            alParamsCoupleError.AddRange(new object[]{
                    "strFunctionName", strFunctionName
                    , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
			        ////
				    , "objFt_Cols_Upd", objFt_Cols_Upd
                    });
            #endregion

            try
            {
                #region // Init:
                //_cf.db.LogUserId = _cf.sinf.strUserCode;
                _cf.db.BeginTransaction();

                // Write RequestLog:
                _cf.ProcessBizReq_OutSide(
                    strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    , alParamsCoupleError // alParamsCoupleError
                    );

                //// Sys_User_CheckAuthentication:
                //Sys_User_CheckAuthentication(
                //    ref alParamsCoupleError
                //    , strWAUserCode
                //    , strWAUserPassword
                //    );

                //// Check Access/Deny:
                //Sys_Access_CheckDenyV30(
                //    ref alParamsCoupleError
                //    , strWAUserCode
                //    , strFunctionName
                //    );
                #endregion

                #region // Invoice_InvoiceInput_DeleteX:
                //DataSet dsGetData = null;
                {

                    Invoice_InvoiceInput_DeleteX(
                        strTid // strTid
                        , strGwUserCode // strGwUserCode
                        , strGwPassword // strGwPassword
                        , strWAUserCode // strWAUserCode
                        , strWAUserPassword // strWAUserPassword
                        , ref alParamsCoupleError // alParamsCoupleError
                        , dtimeSys // dtimeSys
                                          ////
                        , dsData // dsData
                        ////
                        , objFt_Cols_Upd // objFt_Cols_Upd
                        );
                }
                ////
                //CmUtils.DataUtils.MoveDataTable(ref mdsFinal, ref dsGetData);
                #endregion

                // Return Good:
                TDALUtils.DBUtils.CommitSafety(_cf.db);
                mdsFinal.AcceptChanges();
                return mdsFinal;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Rollback:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);

                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsFinal
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Rollback and Release resources:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);
                TDALUtils.DBUtils.ReleaseAllSemaphore(_cf.db_Sys, true);

                // Write ReturnLog:
                _cf.ProcessBizReturn_OutSide(
                    ref mdsFinal // mdsFinal
                    , strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    );
                #endregion
            }
        }

        public DataSet WAS_Invoice_InvoiceInput_Delete(
            ref ArrayList alParamsCoupleError
            , RQ_Invoice_InvoiceInput objRQ_Invoice_InvoiceInput
            ////
            , out RT_Invoice_InvoiceInput objRT_Invoice_InvoiceInput
            )
        {
            #region // Temp:
            string strTid = objRQ_Invoice_InvoiceInput.Tid;
            objRT_Invoice_InvoiceInput = new RT_Invoice_InvoiceInput();
            DataSet mdsResult = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            DateTime dtimeSys = DateTime.UtcNow;
            //DataSet mdsExec = null;
            //DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(objRQ_Invoice_InvoiceInput.Tid);
            //int nTidSeq = 0;
            //bool bNeedTransaction = true;
            string strFunctionName = "WAS_Invoice_InvoiceInput_Delete";
            string strErrorCodeDefault = TError.ErridnInventory.WAS_Invoice_InvoiceInput_Delete;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
                , "Lst_Invoice_InvoiceInput", TJson.JsonConvert.SerializeObject(objRQ_Invoice_InvoiceInput.Lst_Invoice_InvoiceInput)
                , "Lst_Invoice_InvoiceInputDtl", TJson.JsonConvert.SerializeObject(objRQ_Invoice_InvoiceInput.Lst_Invoice_InvoiceInputDtl)
                });
            #endregion

            try
            {
                #region // Init:
                #endregion

                #region // Refine and Check Input:
                List<Invoice_InvoiceInput> lst_Invoice_InvoiceInput = new List<Invoice_InvoiceInput>();
                List<Invoice_InvoiceInputDtl> lst_Invoice_InvoiceInputDtl = new List<Invoice_InvoiceInputDtl>();
                #endregion

                #region // Refine and Check Input:
                ////
                DataSet dsData = new DataSet();
                {
                    ////
                    if (objRQ_Invoice_InvoiceInput.Lst_Invoice_InvoiceInput != null)
                    {
                        DataTable dt_Invoice_InvoiceInput = TUtils.DataTableCmUtils.ToDataTable<Invoice_InvoiceInput>(objRQ_Invoice_InvoiceInput.Lst_Invoice_InvoiceInput, "Invoice_InvoiceInput");
                        dsData.Tables.Add(dt_Invoice_InvoiceInput);
                    }

                    ////
                    if (objRQ_Invoice_InvoiceInput.Lst_Invoice_InvoiceInputDtl != null)
                    {
                        DataTable dt_Invoice_InvoiceInputDtl = TUtils.DataTableCmUtils.ToDataTable<Invoice_InvoiceInputDtl>(objRQ_Invoice_InvoiceInput.Lst_Invoice_InvoiceInputDtl, "Invoice_InvoiceInputDtl");
                        dsData.Tables.Add(dt_Invoice_InvoiceInputDtl);
                    }

                }
                #endregion

                #region // WS_Invoice_InvoiceInput_Delete:
                mdsResult = Invoice_InvoiceInput_Delete(
                    objRQ_Invoice_InvoiceInput.Tid // strTid
                    , objRQ_Invoice_InvoiceInput.GwUserCode // strGwUserCode
                    , objRQ_Invoice_InvoiceInput.GwPassword // strGwPassword
                    , objRQ_Invoice_InvoiceInput.WAUserCode // strUserCode
                    , objRQ_Invoice_InvoiceInput.WAUserPassword // strUserPassword
                    , ref alParamsCoupleError // alParamsCoupleError
                                              ////
                    , dsData // dsData
                    , objRQ_Invoice_InvoiceInput.Ft_Cols_Upd // objFt_Cols_Upd
                    );
                #endregion

                // Return Good:
                return mdsResult;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsResult
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Write ReturnLog:
                //_cf.ProcessBizReturn(
                //	ref mdsResult // mdsFinal
                //	, strTid // strTid
                //	, strFunctionName // strFunctionName
                //	);
                #endregion
            }
        }
		#endregion

		#region // Mst_NNT:
		private void Mst_NNT_CheckDBAll(
			ref ArrayList alParamsCoupleError
			, object objMST
			, string strFlagExistToCheck
			, string strFlagActiveListToCheck
			, string strTCTStatusListToCheck
			, string strRegisterStatusListToCheck
			, out DataTable dtDB_Mst_NNT
			)
		{
			// GetInfo:
			string strSqlExec = CmUtils.StringUtils.Replace(@"
					select top 1
						t.*
					from Mst_NNT t --//[mylock]
					where (1=1)
						and t.MST = @objMST
					;
				");
			dtDB_Mst_NNT = _cf.db.ExecQuery(
				strSqlExec
				, "@objMST", objMST
				).Tables[0];
			dtDB_Mst_NNT.TableName = "Mst_NNT";

			// strFlagExistToCheck:
			if (strFlagExistToCheck.Length > 0)
			{
				if (CmUtils.StringUtils.StringEqual(strFlagExistToCheck, TConst.Flag.Active) && dtDB_Mst_NNT.Rows.Count < 1)
				{
					alParamsCoupleError.AddRange(new object[]{
						"Check.MST", objMST
						});
					throw CmUtils.CMyException.Raise(
						TError.ErridnInventory.Mst_NNT_CheckDB_NNTNotFound
						, null
						, alParamsCoupleError.ToArray()
						);
				}
				if (CmUtils.StringUtils.StringEqual(strFlagExistToCheck, TConst.Flag.Inactive) && dtDB_Mst_NNT.Rows.Count > 0)
				{
					alParamsCoupleError.AddRange(new object[]{
						"Check.MST", objMST
						});
					throw CmUtils.CMyException.Raise(
						TError.ErridnInventory.Mst_NNT_CheckDB_NNTExist
						, null
						, alParamsCoupleError.ToArray()
						);
				}
			}

			// strFlagActiveListToCheck:
			if (strFlagActiveListToCheck.Length > 0 && !strFlagActiveListToCheck.Contains(Convert.ToString(dtDB_Mst_NNT.Rows[0]["FlagActive"])))
			{
				alParamsCoupleError.AddRange(new object[]{
					"Check.MST", objMST
					, "Check.strFlagActiveListToCheck", strFlagActiveListToCheck
					, "DB.FlagActive", dtDB_Mst_NNT.Rows[0]["FlagActive"]
					});
				throw CmUtils.CMyException.Raise(
					TError.ErridnInventory.Mst_NNT_CheckDB_FlagActiveNotMatched
					, null
					, alParamsCoupleError.ToArray()
					);
			}

			// strTCTStatusRegListToCheck:
			if (strTCTStatusListToCheck.Length > 0 && !strTCTStatusListToCheck.Contains(Convert.ToString(dtDB_Mst_NNT.Rows[0]["TCTStatus"])))
			{
				alParamsCoupleError.AddRange(new object[]{
					"Check.MST", objMST
					, "Check.strTCTStatusListToCheck", strTCTStatusListToCheck
					, "DB.TCTStatus", dtDB_Mst_NNT.Rows[0]["TCTStatus"]
					});
				throw CmUtils.CMyException.Raise(
					TError.ErridnInventory.Mst_NNT_CheckDB_StatusNotMatched
					, null
					, alParamsCoupleError.ToArray()
					);
			}

			// strRegisterStatusRegListToCheck:
			if (strRegisterStatusListToCheck.Length > 0 && !strRegisterStatusListToCheck.Contains(Convert.ToString(dtDB_Mst_NNT.Rows[0]["RegisterStatus"])))
			{
				alParamsCoupleError.AddRange(new object[]{
					"Check.MST", objMST
					, "Check.strRegisterStatusListToCheck", strRegisterStatusListToCheck
					, "DB.RegisterStatus", dtDB_Mst_NNT.Rows[0]["RegisterStatus"]
					});
				throw CmUtils.CMyException.Raise(
					TError.ErridnInventory.Mst_NNT_CheckDB_StatusNotMatched
					, null
					, alParamsCoupleError.ToArray()
					);
			}

		}

		private void Mst_NNT_RegisterStatusApprX(
			string strTid
			, string strGwUserCode
			, string strGwPassword
			, string strWAUserCode
			, string strWAUserPassword
			, ref ArrayList alParamsCoupleError
			, DateTime dtimeSys
			//// 
			, object objMST
			, object objRemark
			////
			)
		{
			#region // Temp:
			string strFunctionName = "Mst_NNT_RegisterStatusApprX";
			//string strErrorCodeDefault = TError.ErrHTCNM.Mst_NNT_RegisterStatusApprX;
			alParamsCoupleError.AddRange(new object[]{
				"strFunctionName", strFunctionName
				, "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
                , "objMST", objMST
				, "objRemark", objRemark
				});
			#endregion

			#region // Refine and Check Input:
			////
			object objFt_Cols_Upd = "Mst_NNT.RegisterStatus, Mst_NNT.Remark";
			string strFt_Cols_Upd = TUtils.CUtils.StdParam(objFt_Cols_Upd);
			strFt_Cols_Upd = (strFt_Cols_Upd == null ? "" : strFt_Cols_Upd);
			////
			string strMST = TUtils.CUtils.StdParam(objMST);
			string strRemark = string.Format("{0}", objRemark).Trim();
			////
			bool bUpd_RegisterStatus = strFt_Cols_Upd.Contains("Mst_NNT.RegisterStatus".ToUpper());
			bool bUpd_Remark = strFt_Cols_Upd.Contains("Mst_NNT.Remark".ToUpper());

			////
			DataTable dtDB_Mst_NNT = null;
			{
				////
				Mst_NNT_CheckDB(
					ref alParamsCoupleError // alParamsCoupleError
					, strMST // strMST 
					, TConst.Flag.Yes // strFlagExistToCheck
					, "" // strFlagActiveListToCheck
					, "" // strTCTStatusListToCheck
					, out dtDB_Mst_NNT // dtDB_Mst_Organ
					);
			}
			#endregion

			#region // Save Mst_Chain:
			{
				// Init:
				ArrayList alColumnEffective = new ArrayList();
				string strFN = "";
				DataRow drDB = dtDB_Mst_NNT.Rows[0];
				if (bUpd_RegisterStatus) { strFN = "RegisterStatus"; drDB[strFN] = TConst.RegisterStatus.Approve; alColumnEffective.Add(strFN); }
				if (bUpd_Remark) { strFN = "Remark"; drDB[strFN] = strRemark; alColumnEffective.Add(strFN); }
				strFN = "LogLUDTimeUTC"; drDB[strFN] = dtimeSys.ToString("yyyy-MM-dd HH:mm:ss"); alColumnEffective.Add(strFN);
				strFN = "LogLUBy"; drDB[strFN] = strWAUserCode; alColumnEffective.Add(strFN);

				// Save:
				_cf.db.SaveData(
					"Mst_NNT"
					, dtDB_Mst_NNT
					, alColumnEffective.ToArray()
					);
			}
			#endregion
		}
		public DataSet Mst_NNT_RegisterStatusAppr(
			string strTid
			, string strGwUserCode
			, string strGwPassword
			, string strWAUserCode
			, string strWAUserPassword
			, ref ArrayList alParamsCoupleError
			////
			, object objMST
			, object objRemark
			)
		{
			#region // Temp:
			DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
			//int nTidSeq = 0;
			DateTime dtimeSys = DateTime.UtcNow;
			string strFunctionName = "Mst_NNT_Update";
			string strErrorCodeDefault = TError.ErridnInventory.Mst_NNT_RegisterStatusAppr;
			alParamsCoupleError.AddRange(new object[]{
					"strFunctionName", strFunctionName
					, "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
			        ////
                    , "objMST", objMST
					, "objRemark", objRemark
					});
			#endregion

			try
			{
				#region // Init:
				//_cf.db.LogUserId = _cf.sinf.strUserCode;
				_cf.db.BeginTransaction();

				// Write RequestLog:
				_cf.ProcessBizReq_OutSide(
					strTid // strTid
					, strGwUserCode // strGwUserCode
					, strGwPassword // strGwPassword
					, strWAUserCode // objUserCode
					, strFunctionName // strFunctionName
					, alParamsCoupleError // alParamsCoupleError
					);

				// Sys_User_CheckAuthentication:
				//Sys_User_CheckAuthentication(
				//	ref alParamsCoupleError
				//	, strWAUserCode
				//	, strWAUserPassword
				//	);

				// Check Access/Deny:
				Sys_Access_CheckDenyV30(
					ref alParamsCoupleError
					, strWAUserCode
					, strFunctionName
					);
				#endregion

				#region // Mst_NNT_UpdateX:
				//DataSet dsGetData = null;
				{
					Mst_NNT_RegisterStatusApprX(
						strTid // strTid
						, strGwUserCode // strGwUserCode
						, strGwPassword // strGwPassword
						, strWAUserCode // strWAUserCode
						, strWAUserPassword // strWAUserPassword
						, ref alParamsCoupleError // alParamsCoupleError
						, dtimeSys // dtimeSys
								   ////
						, objMST // objMST
						, objRemark // objRemark
						);
				}
				////
				//CmUtils.DataUtils.MoveDataTable(ref mdsFinal, ref dsGetData);
				#endregion

				// Return Good:
				TDALUtils.DBUtils.CommitSafety(_cf.db);
				mdsFinal.AcceptChanges();
				return mdsFinal;
			}
			catch (Exception exc)
			{
				#region // Catch of try:
				// Rollback:
				TDALUtils.DBUtils.RollbackSafety(_cf.db);

				// Return Bad:
				return TUtils.CProcessExc.Process(
					ref mdsFinal
					, exc
					, strErrorCodeDefault
					, alParamsCoupleError.ToArray()
					);
				#endregion
			}
			finally
			{
				#region // Finally of try:
				// Rollback and Release resources:
				TDALUtils.DBUtils.RollbackSafety(_cf.db);
				TDALUtils.DBUtils.ReleaseAllSemaphore(_cf.db_Sys, true);

				// Write ReturnLog:
				_cf.ProcessBizReturn_OutSide(
					ref mdsFinal // mdsFinal
					, strTid // strTid
					, strGwUserCode // strGwUserCode
					, strGwPassword // strGwPassword
					, strWAUserCode // objUserCode
					, strFunctionName // strFunctionName
					);
				#endregion
			}
		}
		public DataSet WAS_Mst_NNT_RegisterStatusAppr(
			ref ArrayList alParamsCoupleError
			, RQ_Mst_NNT objRQ_Mst_NNT
			////
			, out RT_Mst_NNT objRT_Mst_NNT
			)
		{
			#region // Temp:
			string strTid = objRQ_Mst_NNT.Tid;
			objRT_Mst_NNT = new RT_Mst_NNT();
			DataSet mdsResult = CmUtils.CMyDataSet.NewMyDataSet(strTid);
			DateTime dtimeSys = DateTime.UtcNow;
			//DataSet mdsExec = null;
			//DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(objRQ_Mst_NNT.Tid);
			//int nTidSeq = 0;
			//bool bNeedTransaction = true;
			string strFunctionName = "WAS_Mst_NNT_RegisterStatusAppr";
			string strErrorCodeDefault = TError.ErridnInventory.WAS_Mst_NNT_RegisterStatusAppr;
			alParamsCoupleError.AddRange(new object[]{
				"strFunctionName", strFunctionName
				, "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
				});
			#endregion

			try
			{
				#region // Init:
				#endregion

				#region // Refine and Check Input:
				List<Mst_NNT> lst_Mst_NNT = new List<Mst_NNT>();
				#endregion

				#region // Mst_NNT_Update:
				mdsResult = Mst_NNT_RegisterStatusAppr(
					objRQ_Mst_NNT.Tid // strTid
					, objRQ_Mst_NNT.GwUserCode // strGwUserCode
					, objRQ_Mst_NNT.GwPassword // strGwPassword
					, objRQ_Mst_NNT.WAUserCode // strUserCode
					, objRQ_Mst_NNT.WAUserPassword // strUserPassword
					, ref alParamsCoupleError // alParamsCoupleError
											  ////
					, objRQ_Mst_NNT.Mst_NNT.MST // objMST
					, objRQ_Mst_NNT.Mst_NNT.Remark// objRemark
					);
				#endregion

				// Return Good:
				return mdsResult;
			}
			catch (Exception exc)
			{
				#region // Catch of try:
				// Return Bad:
				return TUtils.CProcessExc.Process(
					ref mdsResult
					, exc
					, strErrorCodeDefault
					, alParamsCoupleError.ToArray()
					);
				#endregion
			}
			finally
			{
				#region // Finally of try:
				// Write ReturnLog:
				//_cf.ProcessBizReturn(
				//	ref mdsResult // mdsFinal
				//	, strTid // strTid
				//	, strFunctionName // strFunctionName
				//	);
				#endregion
			}
		}


        private void Seq_MST_GetX(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , string strNetworkID
            , ref ArrayList alParamsCoupleError
            ////
            )
        {
            #region // Temp:
            DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            //int nTidSeq = 0;
            DateTime dtimeSys = DateTime.UtcNow;
            //bool bNeedTransaction = true;
            string strFunctionName = "Seq_MST_GetX";
            //string strErrorCodeDefault = TError.ErridnInventory.WAS_Seq_GenObjCode_Get;
            alParamsCoupleError = new ArrayList(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				// //
                });
            //TDAL.IEzDAL dbLocal = (TDAL.IEzDAL)_cf.db.Clone();
            #endregion

            #region // Convert Input:
            DateTime dtimeTDate = DateTime.UtcNow;
            #endregion

            #region // Refine and Check Input:
            ////
            string strTableName = "Seq_MST";
            string strFormat = "{0}.{1}";
            string strRandom36 = null;
            #endregion

            #region // SequenceGet:
            ////
            string strResult = "";
            {
                // //
                long nSeq = Seq_Common_Raw(strTableName);
                long nMaxSeq = 10000000;
                string strRandom = Convert.ToString(nSeq % nMaxSeq);
                Int32 nRandom = Convert.ToInt32(strRandom);

                strRandom36 = TUtils.CMyBase36.To36(nRandom, 6);
            }
            ////
            strResult = string.Format(
                strFormat // Format
                , "ORG" // {0}
                , strRandom36 // {1}
                );
            /////
            CmUtils.CMyDataSet.SetRemark(ref mdsFinal, strResult);
            //CmUtils.CMyDataSet.SetRemark(ref mdsFinal, strResultFinal);
            #endregion
        }
        public DataSet RptSv_Seq_MST_Get(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , string strNetworkID
            , ref ArrayList alParamsCoupleError
           ////
           )
        {
            #region // Temp:
            DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            //int nTidSeq = 0;
            DateTime dtimeSys = DateTime.UtcNow;
            //bool bNeedTransaction = true;
            string strFunctionName = "RptSv_Seq_MST_Get";
            string strErrorCodeDefault = TError.ErridnInventory.RptSv_Seq_MST_Get;
            alParamsCoupleError = new ArrayList(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				// //
                });

            TDAL.IEzDAL dbLocal = (TDAL.IEzDAL)_cf.db.Clone();
            #endregion

            try
            {
                #region // Convert Input:
                DateTime dtimeTDate = DateTime.UtcNow;
                #endregion

                #region // Init:
                dbLocal.BeginTransaction();

                // Write RequestLog:
                _cf.ProcessBizReq_OutSide(
                    strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    , alParamsCoupleError // alParamsCoupleError
                    );
                #endregion

                #region // Refine and Check Input:
                ////
                string strTableName = "Seq_MST";
                string strFormat = "{0}.{1}";
                string strRandom36 = null;
                #endregion

                #region // SequenceGet:
                ////
                string strResult = "";
                {
                    // //
                    long nSeq = Seq_Common_Raw(strTableName);
                    long nMaxSeq = 10000000;
                    string strRandom = Convert.ToString(nSeq % nMaxSeq);
                    Int32 nRandom = Convert.ToInt32(strRandom);

                    strRandom36 = TUtils.CMyBase36.To36(nRandom, 5);
                }
                ////
                strResult = string.Format(
                    strFormat // Format
                    , "ORG" // {0}
                    , strRandom36 // {1}
                    );
                /////
                CmUtils.CMyDataSet.SetRemark(ref mdsFinal, strResult);
                //CmUtils.CMyDataSet.SetRemark(ref mdsFinal, strResultFinal);
                #endregion

                // Return Good:
                TDALUtils.DBUtils.RollbackSafety(dbLocal); // Always Rollback.
                mdsFinal.AcceptChanges();
                return mdsFinal;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Rollback:
                TDALUtils.DBUtils.RollbackSafety(dbLocal);

                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsFinal
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Rollback and Release resources:
                TDALUtils.DBUtils.RollbackSafety(dbLocal);
                TDALUtils.DBUtils.ReleaseAllSemaphore(dbLocal, true);

                // Write ReturnLog:
                _cf.ProcessBizReturn_OutSide(
                    ref mdsFinal // mdsFinal
                    , strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    );
                #endregion
            }
        }
        public DataSet WAS_RptSv_Seq_MST_Get(
            ref ArrayList alParamsCoupleError
            , RQ_Seq_Common objRQ_Seq_Common
            ////
            , out RT_Seq_Common objRT_Seq_Common
            )
        {
            #region // Temp:
            string strTid = objRQ_Seq_Common.Tid;
            objRT_Seq_Common = new RT_Seq_Common();
            DataSet mdsResult = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            DateTime dtimeSys = DateTime.UtcNow;
            //DataSet mdsExec = null;
            //DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(objRQ_Seq_Common.Tid);
            //int nTidSeq = 0;
            //bool bNeedTransaction = true;
            string strFunctionName = "WAS_RptSv_Seq_MST_Get";
            string strErrorCodeDefault = TError.ErridnInventory.WAS_RptSv_Seq_MST_Get;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
				});
            #endregion

            try
            {
                #region // Init:
                #endregion

                #region // Refine and Check Input:
                #endregion

                #region // WS_Seq_Common_Get:
                mdsResult = RptSv_Seq_MST_Get(
                    objRQ_Seq_Common.Tid // strTid
                    , objRQ_Seq_Common.GwUserCode // strGwUserCode
                    , objRQ_Seq_Common.GwPassword // strGwPassword
                    , objRQ_Seq_Common.WAUserCode // strUserCode
                    , objRQ_Seq_Common.WAUserPassword // strUserPassword
                    , objRQ_Seq_Common.NetworkID // strNetworkID
                    , ref alParamsCoupleError // alParamsCoupleError
                                              // //
                    );
                #endregion

                #region // GetData:
                #endregion

                // Return Good:
                return mdsResult;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsResult
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Write ReturnLog:
                //_cf.ProcessBizReturn(
                //	ref mdsResult // mdsFinal
                //	, strTid // strTid
                //	, strFunctionName // strFunctionName
                //	);
                #endregion
            }
        }
        #endregion

        #region // MstSv_Inos_User:
        public DataSet WAS_RptSv_MstSv_Inos_User_Get(
            ref ArrayList alParamsCoupleError
            , RQ_MstSv_Inos_User objRQ_MstSv_Inos_User
            ////
            , out RT_MstSv_Inos_User objRT_MstSv_Inos_User
            )
        {
            #region // Temp:
            string strTid = objRQ_MstSv_Inos_User.Tid;
            objRT_MstSv_Inos_User = new RT_MstSv_Inos_User();
            DataSet mdsResult = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            DateTime dtimeSys = DateTime.UtcNow;
            //DataSet mdsExec = null;
            //DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(objRQ_MstSv_Inos_User.Tid);
            //int nTidSeq = 0;
            //bool bNeedTransaction = true;
            string strFunctionName = "WAS_RptSv_MstSv_Inos_User_Get";
            string strErrorCodeDefault = TError.ErridnInventory.WAS_MstSv_Inos_User_Get;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
				});
            #endregion

            try
            {
                #region // Init:
                #endregion

                #region // Refine and Check Input:
                List<MySummaryTable> lst_MySummaryTable = new List<MySummaryTable>();
                List<MstSv_Inos_User> lst_MstSv_Inos_User = new List<MstSv_Inos_User>();
                #endregion

                #region // WS_MstSv_Inos_User_Get:
                mdsResult = RptSv_MstSv_Inos_User_Get(
                    objRQ_MstSv_Inos_User.Tid // strTid
                    , objRQ_MstSv_Inos_User.GwUserCode // strGwUserCode
                    , objRQ_MstSv_Inos_User.GwPassword // strGwPassword
                    , objRQ_MstSv_Inos_User.WAUserCode // strUserCode
                    , objRQ_MstSv_Inos_User.WAUserPassword // strUserPassword
                    , ref alParamsCoupleError // alParamsCoupleError
                                              //// Filter:
                    , objRQ_MstSv_Inos_User.Ft_RecordStart // strFt_RecordStart
                    , objRQ_MstSv_Inos_User.Ft_RecordCount // strFt_RecordCount
                    , objRQ_MstSv_Inos_User.Ft_WhereClause // strFt_WhereClause
                                                          //// Return:
                    , objRQ_MstSv_Inos_User.Rt_Cols_MstSv_Inos_User // strRt_Cols_MstSv_Inos_User
                    );
                #endregion

                #region // GetData:
                if (!CmUtils.CMyDataSet.HasError(mdsResult))
                {
                    ////
                    DataTable dt_MySummaryTable = mdsResult.Tables["MySummaryTable"].Copy();
                    lst_MySummaryTable = TUtils.DataTableCmUtils.ToListof<MySummaryTable>(dt_MySummaryTable);
                    objRT_MstSv_Inos_User.MySummaryTable = lst_MySummaryTable[0];
                    ////
                    DataTable dt_MstSv_Inos_User = mdsResult.Tables["MstSv_Inos_User"].Copy();
                    lst_MstSv_Inos_User = TUtils.DataTableCmUtils.ToListof<MstSv_Inos_User>(dt_MstSv_Inos_User);
                    objRT_MstSv_Inos_User.Lst_MstSv_Inos_User = lst_MstSv_Inos_User;
                    /////
                }
                #endregion

                // Return Good:
                return mdsResult;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsResult
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Write ReturnLog:
                //_cf.ProcessBizReturn(
                //	ref mdsResult // mdsFinal
                //	, strTid // strTid
                //	, strFunctionName // strFunctionName
                //	);
                #endregion
            }
        }

        public DataSet RptSv_MstSv_Inos_User_Get(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            //// Filter:
            , string strFt_RecordStart
            , string strFt_RecordCount
            , string strFt_WhereClause
            //// Return:
            , string strRt_Cols_MstSv_Inos_User
            )
        {
            #region // Temp:
            DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            //int nTidSeq = 0;
            DateTime dtimeSys = DateTime.UtcNow;
            string strFunctionName = "RptSv_MstSv_Inos_User_Get";
            string strErrorCodeDefault = TError.ErridnInventory.MstSv_Inos_User_Get;
            alParamsCoupleError.AddRange(new object[]{
                    "strFunctionName", strFunctionName
                    , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
			        //// Filter
					, "strFt_RecordStart", strFt_RecordStart
                    , "strFt_RecordCount", strFt_RecordCount
                    , "strFt_WhereClause", strFt_WhereClause
			        //// Return
					, "strRt_Cols_MstSv_Inos_User", strRt_Cols_MstSv_Inos_User
                    });
            #endregion

            try
            {
                #region // Init:
                //_cf.db.LogUserId = _cf.sinf.strUserCode;
                _cf.db.BeginTransaction();

                // Write RequestLog:
                _cf.ProcessBizReq_OutSide(
                    strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    , alParamsCoupleError // alParamsCoupleError
                    );

                // RptSv_Sys_User_CheckAuthentication:
                //RptSv_Sys_User_CheckAuthentication(
                //    ref alParamsCoupleError
                //    , strWAUserCode
                //    , strWAUserPassword
                //    );

                // Check Access/Deny:
                //RptSv_Sys_Access_CheckDeny(
                //	ref alParamsCoupleError
                //	, strWAUserCode
                //	, strFunctionName
                //	);
                #endregion

                #region // MstSv_Inos_User_GetX:
                DataSet dsGetData = null;
                {
                    ////
                    RptSv_MstSv_Inos_User_GetX(
                        strTid // strTid
                        , strGwUserCode // strGwUserCode
                        , strGwPassword // strGwPassword
                        , strWAUserCode // strWAUserCode
                        , strWAUserPassword // strWAUserPassword
                        , ref alParamsCoupleError // alParamsCoupleError
                        , dtimeSys // dtimeSys
                                   ////
                        , strFt_RecordStart // strFt_RecordStart
                        , strFt_RecordCount // strFt_RecordCount
                        , strFt_WhereClause // strFt_WhereClause
                                            ////
                        , strRt_Cols_MstSv_Inos_User // strRt_Cols_MstSv_Inos_User
                                                    ////
                        , out dsGetData // dsGetData
                        );
                    ////
                    CmUtils.DataUtils.MoveDataTable(ref mdsFinal, ref dsGetData);
                }
                #endregion

                // Return Good:
                TDALUtils.DBUtils.RollbackSafety(_cf.db); // Always Rollback.
                mdsFinal.AcceptChanges();
                return mdsFinal;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Rollback:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);

                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsFinal
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Rollback and Release resources:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);
                TDALUtils.DBUtils.ReleaseAllSemaphore(_cf.db_Sys, true);

                // Write ReturnLog:
                _cf.ProcessBizReturn_OutSide(
                    ref mdsFinal // mdsFinal
                    , strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    );
                #endregion
            }
        }
        private void RptSv_MstSv_Inos_User_GetX(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            , DateTime dtimeSys
            //// Filter:
            , string strFt_RecordStart
            , string strFt_RecordCount
            , string strFt_WhereClause
            //// Return:
            , string strRt_Cols_MstSv_Inos_User
            ////
            , out DataSet dsGetData
            )
        {
            #region // Temp:
            //DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            //DateTime dtimeSys = DateTime.UtcNow;
            //bool bNeedTransaction = true;
            string strFunctionName = "RptSv_MstSv_Inos_User_GetX";
            //string strErrorCodeDefault = TError.ErrHTCNM.Mnf_VIN_Get_QCX;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
                });
            #endregion

            #region // Check:
            //// Refine:
            long nFilterRecordStart = Convert.ToInt64(strFt_RecordStart);
            long nFilterRecordEnd = nFilterRecordStart + Convert.ToInt64(strFt_RecordCount) - 1;
            bool bGet_MstSv_Inos_User = (strRt_Cols_MstSv_Inos_User != null && strRt_Cols_MstSv_Inos_User.Length > 0);

            //// drAbilityOfUser:
            //DataRow drAbilityOfUser = Sys_User_GetAbilityViewOfUser(strWAUserCode);
            //zzzzClauseSelect_MstSv_Inos_User_ViewAbility_Get(
            //    drAbilityOfUser // drAbilityOfUser
            //    , ref alParamsCoupleError // alParamsCoupleError
            //    );

            #endregion

            #region // Build Sql:
            ////
            ArrayList alParamsCoupleSql = new ArrayList();
            alParamsCoupleSql.AddRange(new object[] {
                "@nFilterRecordStart", nFilterRecordStart
                , "@nFilterRecordEnd", nFilterRecordEnd
                });
            ////
            //myCache_ViewAbility_GetDealerInfo(drAbilityOfUser);
            ////
            string strSqlGetData = CmUtils.StringUtils.Replace(@"
					---- #tbl_MstSv_Inos_User_Filter_Draft:
					select distinct
						identity(bigint, 0, 1) MyIdxSeq
						, msiu.MST
                        , msiu.Email
					into #tbl_MstSv_Inos_User_Filter_Draft
					from MstSv_Inos_User msiu --//[mylock]
					where (1=1)
						zzB_Where_strFilter_zzE
					order by msiu.MST asc
					;

					---- Summary:
					select Count(0) MyCount from #tbl_MstSv_Inos_User_Filter_Draft t --//[mylock]
					;

					---- #tbl_MstSv_Inos_User_Filter:
					select
						t.*
					into #tbl_MstSv_Inos_User_Filter
					from #tbl_MstSv_Inos_User_Filter_Draft t --//[mylock]
					where (1=1)
						and (t.MyIdxSeq >= @nFilterRecordStart)
						and (t.MyIdxSeq <= @nFilterRecordEnd)
					;

					-------- MstSv_Inos_User -----:
					zzB_Select_MstSv_Inos_User_zzE
					------------------------

					---- Clear for debug:
					--drop table #tbl_MstSv_Inos_User_Filter_Draft;
					--drop table #tbl_MstSv_Inos_User_Filter;
				"
                );
            ////
            string zzB_Select_MstSv_Inos_User_zzE = "-- Nothing.";
            if (bGet_MstSv_Inos_User)
            {
                #region // bGet_MstSv_Inos_User:
                zzB_Select_MstSv_Inos_User_zzE = CmUtils.StringUtils.Replace(@"
					
					---- MstSv_Inos_User:
					select
						t.MyIdxSeq
						, msiu.*
					from #tbl_MstSv_Inos_User_Filter t --//[mylock]
						inner join MstSv_Inos_User msiu --//[mylock]
							on t.MST = msiu.MST
                                and t.Email = msiu.Email
					order by t.MyIdxSeq asc
					;
				"
                );
                #endregion
            }
            ////
            string zzB_Where_strFilter_zzE = "";
            {
                Hashtable htSpCols = new Hashtable();
                {
                    #region // htSpCols:
                    ////
                    TUtils.CUtils.MyBuildHTSupportedColumns(
                        _cf.db // db
                        , ref htSpCols // htSupportedColumns
                        , "MstSv_Inos_User" // strTableNameDB
                        , "MstSv_Inos_User." // strPrefixStd
                        , "msiu." // strPrefixAlias
                        );
                    ////
                    #endregion
                }
                zzB_Where_strFilter_zzE = CmUtils.SqlUtils.BuildWhere(
                    htSpCols // htSpCols
                    , strFt_WhereClause // strClause
                    , "@p_" // strParamPrefix
                    , ref alParamsCoupleSql // alParamsCoupleSql
                    );
                zzB_Where_strFilter_zzE = (zzB_Where_strFilter_zzE.Length <= 0 ? "" : string.Format(" and ({0})", zzB_Where_strFilter_zzE));
                alParamsCoupleError.AddRange(new object[]{
                    "zzB_Where_strFilter_zzE", zzB_Where_strFilter_zzE
                    });
            }
            ////
            strSqlGetData = CmUtils.StringUtils.Replace(
                strSqlGetData
                , "zzB_Where_strFilter_zzE", zzB_Where_strFilter_zzE
                , "zzB_Select_MstSv_Inos_User_zzE", zzB_Select_MstSv_Inos_User_zzE
                );
            #endregion

            #region // Get Data:
            dsGetData = _cf.db.ExecQuery(
                strSqlGetData
                , alParamsCoupleSql.ToArray()
                );
            int nIdxTable = 0;
            dsGetData.Tables[nIdxTable++].TableName = "MySummaryTable";
            if (bGet_MstSv_Inos_User)
            {
                dsGetData.Tables[nIdxTable++].TableName = "MstSv_Inos_User";
            }
            #endregion
        }
		#endregion

		#region // Sys_Group:
		public DataSet Sys_Group_Create_New20191102(
			string strTid
			, string strGwUserCode
			, string strGwPassword
			, string strWAUserCode
			, string strWAUserPassword
			, ref ArrayList alParamsCoupleError
			////
			, object objGroupCode
			, object objGroupName
			)
		{
			#region // Temp:
			DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
			//int nTidSeq = 0;
			DateTime dtimeSys = DateTime.UtcNow;
			string strFunctionName = "Sys_Group_Create";
			string strErrorCodeDefault = TError.ErridnInventory.Sys_Group_Create;
			alParamsCoupleError.AddRange(new object[]{
				"strFunctionName", strFunctionName
				, "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
				, "objGroupCode", objGroupCode
				, "objGroupName", objGroupName
				});
			#endregion

			try
			{
				#region // Convert Input:
				#endregion

				#region // Init:
				//_cf.db.LogUserId = _cf.sinf.strUserCode;
				_cf.db.BeginTransaction();

				// Write RequestLog:
				_cf.ProcessBizReq_OutSide(
					strTid // strTid
					, strGwUserCode // strGwUserCode
					, strGwPassword // strGwPassword
					, strWAUserCode // objUserCode
					, strFunctionName // strFunctionName
					, alParamsCoupleError // alParamsCoupleError
					);

				// Sys_User_CheckAuthentication:
				//Sys_User_CheckAuthentication(
				//	ref alParamsCoupleError
				//	, strWAUserCode
				//	, strWAUserPassword
				//	);

				// Check Access/Deny:
				Sys_Access_CheckDenyV30(
					ref alParamsCoupleError
					, strWAUserCode
					, strFunctionName
					);
				#endregion

				#region // Refine and Check Input:
				////
				string strGroupCode = TUtils.CUtils.StdParam(objGroupCode);
				string strGroupName = string.Format("{0}", objGroupName).Trim();
				string strMST = null;
				////
				DataTable dtDB_Sys_Group = null;
				{
					////
					if (strGroupCode == null || strGroupCode.Length <= 0)
					{
						alParamsCoupleError.AddRange(new object[]{
							"Check.strGroupCode", strGroupCode
							});
						throw CmUtils.CMyException.Raise(
							TError.ErridnInventory.Sys_Group_Create_InvalidGroupCode
							, null
							, alParamsCoupleError.ToArray()
							);
					}
					Sys_Group_CheckDB(
						ref alParamsCoupleError // alParamsCoupleError
						, objGroupCode // objGroupCode
						, TConst.Flag.No // strFlagExistToCheck
						, "" // strFlagPublicListToCheck
						, out dtDB_Sys_Group // dtDB_Sys_Group
						);
					////
					if (strGroupName.Length < 1)
					{
						alParamsCoupleError.AddRange(new object[]{
							"Check.strGroupName", strGroupName
							});
						throw CmUtils.CMyException.Raise(
							TError.ErridnInventory.Sys_Group_Create_InvalidGroupName
							, null
							, alParamsCoupleError.ToArray()
							);
					}
					////
					DataTable dtDB_Sys_User = null;

					Sys_User_CheckDB(
						ref alParamsCoupleError // alParamsCoupleError
						, strWAUserCode // objUserCode
						, TConst.Flag.Yes // strFlagExistToCheck
						, TConst.Flag.Active // strFlagActiveListToCheck
						, out dtDB_Sys_User // dtDB_Sys_User
						);

					strMST = TUtils.CUtils.StdParam(dtDB_Sys_User.Rows[0]["MST"]);
					////

				}
				#endregion

				#region // SaveDB Sys_Group:
				{
					// Init:
					//ArrayList alColumnEffective = new ArrayList();
					string strFN = "";
					DataRow drDB = dtDB_Sys_Group.NewRow();
					strFN = "GroupCode"; drDB[strFN] = strGroupCode;
					strFN = "NetworkID"; drDB[strFN] = nNetworkID;
					strFN = "MST"; drDB[strFN] = strMST;
					strFN = "GroupName"; drDB[strFN] = strGroupName;
					strFN = "FlagActive"; drDB[strFN] = TConst.Flag.Yes;
					strFN = "LogLUDTimeUTC"; drDB[strFN] = dtimeSys.ToString("yyyy-MM-dd HH:mm:ss");
					strFN = "LogLUBy"; drDB[strFN] = strWAUserCode;
					dtDB_Sys_Group.Rows.Add(drDB);

					// Save:
					_cf.db.SaveData(
						"Sys_Group"
						, dtDB_Sys_Group
						//, alColumnEffective.ToArray()
						);
				}
				#endregion

				// Return Good:
				TDALUtils.DBUtils.CommitSafety(_cf.db);
				mdsFinal.AcceptChanges();
				return mdsFinal;
			}
			catch (Exception exc)
			{
				#region // Catch of try:
				// Rollback:
				TDALUtils.DBUtils.RollbackSafety(_cf.db);

				// Return Bad:
				return TUtils.CProcessExc.Process(
					ref mdsFinal
					, exc
					, strErrorCodeDefault
					, alParamsCoupleError.ToArray()
					);
				#endregion
			}
			finally
			{
				#region // Finally of try:
				// Rollback and Release resources:
				TDALUtils.DBUtils.RollbackSafety(_cf.db);
				TDALUtils.DBUtils.ReleaseAllSemaphore(_cf.db_Sys, true);

				// Write ReturnLog:
				_cf.ProcessBizReturn_OutSide(
					ref mdsFinal // mdsFinal
					, strTid // strTid
					, strGwUserCode // strGwUserCode
					, strGwPassword // strGwPassword
					, strWAUserCode // objUserCode
					, strFunctionName // strFunctionName
					);
				#endregion
			}
		}
		#endregion

		#region // Sys_UserInGroup:
		public DataSet Sys_UserInGroup_Save_New20191102(
			string strTid
			, string strGwUserCode
			, string strGwPassword
			, string strWAUserCode
			, string strWAUserPassword
			, ref ArrayList alParamsCoupleError
			////
			, object objGroupCode
			, DataSet dsData
			)
		{
			#region // Temp:
			DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
			//int nTidSeq = 0;
			DateTime dtimeSys = DateTime.UtcNow;
			string strFunctionName = "Sys_UserInGroup_Save";
			string strErrorCodeDefault = TError.ErridnInventory.Sys_UserInGroup_Save;
			alParamsCoupleError.AddRange(new object[]{
				"strFunctionName", strFunctionName
				, "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
				, "objGroupCode", objGroupCode
				});
			#endregion

			try
			{
				#region // Convert Input:
				//DataSet dsData = TUtils.CUtils.StdDS(arrobjDSData);
				//if (dsData == null) dsData = new DataSet("dsData");
				//dsData.AcceptChanges();
				alParamsCoupleError.AddRange(new object[]{
					"Check.dsData", TJson.JsonConvert.SerializeObject(dsData)
					});
				#endregion

				#region // Init:
				//_cf.db.LogUserId = _cf.sinf.strUserCode;
				_cf.db.BeginTransaction();

				// Write RequestLog:
				_cf.ProcessBizReq_OutSide(
					strTid // strTid
					, strGwUserCode // strGwUserCode
					, strGwPassword // strGwPassword
					, strWAUserCode // objUserCode
					, strFunctionName // strFunctionName
					, alParamsCoupleError // alParamsCoupleError
					);

				// Sys_User_CheckAuthentication:
				//Sys_User_CheckAuthentication(
				//	ref alParamsCoupleError
				//	, strWAUserCode
				//	, strWAUserPassword
				//	);

				// Check Access/Deny:
				Sys_Access_CheckDenyV30(
					ref alParamsCoupleError
					, strWAUserCode
					, strFunctionName
					);
				#endregion

				#region // Refine and Check Input Master:
				////
				string strGroupCode = TUtils.CUtils.StdParam(objGroupCode);
				////
				DataTable dtDB_Sys_Group = null;
				////
				{
					////
					Sys_Group_CheckDB(
						ref alParamsCoupleError // alParamsCoupleError
						, objGroupCode // objGroupCode
						, TConst.Flag.Yes // strFlagExistToCheck
						, "" // strFlagActiveListToCheck
						, out dtDB_Sys_Group // dtDB_Sys_Group
						);
					////
					DataTable dtDB_Sys_User = null;
					Sys_User_CheckDB(
						ref alParamsCoupleError // alParamsCoupleError
						, strWAUserCode // objUserCode
						, TConst.Flag.Yes // strFlagExistToCheck
						, TConst.Flag.Active // strFlagActiveListToCheck
						, out dtDB_Sys_User // dt_Sys_User
						);
					string strMST = TUtils.CUtils.StdParam(dtDB_Sys_User.Rows[0]["MST"]);
					////
					dtDB_Sys_Group.Rows[0]["MST"] = strMST;
					dtDB_Sys_Group.Rows[0]["LogLUDTimeUTC"] = dtimeSys.ToString("yyyy-MM-dd HH:mm:ss");
					dtDB_Sys_Group.Rows[0]["LogLUBy"] = strWAUserCode;
					//// Upload:
					TUtils.CUtils.MyBuildDBDT_Common(
						_cf.db // db
						, "#tbl_Sys_Group" // strTableName
						, TConst.BizMix.Default_DBColType // strDefaultType
						, new object[] { "GroupCode", "NetworkID", "MST", "LogLUDTimeUTC", "LogLUBy" } // arrSingleStructure
						, dtDB_Sys_Group // dtData
						);
					////
				}
				#endregion

				#region // Refine and Check Input Detail:
				////
				DataTable dtInput_Sys_UserInGroup = null;
				////
				{
					////
					string strTableCheck = "Sys_UserInGroup";
					////
					if (!dsData.Tables.Contains(strTableCheck))
					{
						alParamsCoupleError.AddRange(new object[]{
							"Check.TableName", strTableCheck
							});
						throw CmUtils.CMyException.Raise(
							TError.ErridnInventory.Sys_UserInGroup_Save_InputTblDtlNotFound
							, null
							, alParamsCoupleError.ToArray()
							);
					}
					dtInput_Sys_UserInGroup = dsData.Tables[strTableCheck];
					TUtils.CUtils.StdDataInTable(
						dtInput_Sys_UserInGroup // dtData
						, "StdParam", "UserCode" // arrstrCouple
						);
					//// Upload:
					TUtils.CUtils.MyBuildDBDT_Common(
						_cf.db // db
						, "#tbl_Sys_UserInGroup" // strTableName
						, TConst.BizMix.Default_DBColType // strDefaultType
						, new object[] { "UserCode" } // arrSingleStructure
						, dtInput_Sys_UserInGroup // dtData
						);
					////
				}
				#endregion

				#region // SaveDB Sys_UserInGroup:
				{
					string strSql_Exec = CmUtils.StringUtils.Replace(@"
						---- Clear All:
						delete t
						from Sys_UserInGroup t --//[mylock]
							inner join #tbl_Sys_Group t_sg --//[mylock]
								on t.GroupCode = t_sg.GroupCode
							--inner join #tbl_Sys_UserInGroup t_suig --//[mylock]
								--on t.UserCode = t_suig.UserCode
						where (1=1)
						;

						---- Insert All:
						insert into Sys_UserInGroup(
							GroupCode
							, UserCode
							, NetworkID
							, MST
							, LogLUDTimeUTC
							, LogLUBy
							)
						select
							t_sg.GroupCode
							, t_suig.UserCode
							, t_sg.NetworkID
							, t_sg.MST
							, t_sg.LogLUDTimeUTC
							, t_sg.LogLUBy
						from #tbl_Sys_Group t_sg --//[mylock]
							inner join #tbl_Sys_UserInGroup t_suig --//[mylock]
								on (1=1)
						;
					");
					DataSet dsDB_Check = _cf.db.ExecQuery(
						strSql_Exec
						);
				}
				#endregion

				// Return Good:
				TDALUtils.DBUtils.CommitSafety(_cf.db);
				mdsFinal.AcceptChanges();
				return mdsFinal;
			}
			catch (Exception exc)
			{
				#region // Catch of try:
				// Rollback:
				TDALUtils.DBUtils.RollbackSafety(_cf.db);

				// Return Bad:
				return TUtils.CProcessExc.Process(
					ref mdsFinal
					, exc
					, strErrorCodeDefault
					, alParamsCoupleError.ToArray()
					);
				#endregion
			}
			finally
			{
				#region // Finally of try:
				// Rollback and Release resources:
				TDALUtils.DBUtils.RollbackSafety(_cf.db);
				TDALUtils.DBUtils.ReleaseAllSemaphore(_cf.db_Sys, true);

				// Write ReturnLog:
				_cf.ProcessBizReturn_OutSide(
					ref mdsFinal // mdsFinal
					, strTid // strTid
					, strGwUserCode // strGwUserCode
					, strGwPassword // strGwPassword
					, strWAUserCode // objUserCode
					, strFunctionName // strFunctionName
					);
				#endregion
			}
		}
        #endregion

        #region // Inv_InventoryBalance:
        private void OS_Inv_InventoryBalance_GetQtyX(
			string strTid
			, string strGwUserCode
			, string strGwPassword
			, string strWAUserCode
			, string strWAUserPassword
			, ref ArrayList alParamsCoupleError
			, DateTime dtimeSys
			/////
			, DataSet dsData
			, out DataSet dsGetData
		   )
		{
			#region // Temp:
			//int nTidSeq = 0;
			//bool bMyDebugSql = false;
			string strFunctionName = "Inv_InventoryBalance_GetQtyX";
			alParamsCoupleError.AddRange(new object[]{
				"strFunctionName", strFunctionName
				, "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
                });
			//ArrayList alPCErrEx = new ArrayList();
			////
			Hashtable htParamsSql = new Hashtable();
			#endregion

			#region // Convert Input:
			// drAbilityOfUser:
			DataRow drAbilityOfUser = Sys_User_GetAbilityViewOfUser(strWAUserCode);
			zzzzClauseSelect_Mst_NNT_ViewAbility_Get(
				drAbilityOfUser // drAbilityOfUser
				, ref alParamsCoupleError // alParamsCoupleError
				);
			#endregion

			#region // Convert Input:
			alParamsCoupleError.AddRange(new object[]{
					"Check.dsData", TJson.JsonConvert.SerializeObject(dsData)
					});
			#endregion

			#region //// Refine and Check Input:
			DataTable dtInv_InventoryBalance_GetQty = null;
			{
				////

				string strTableCheck = "Inv_InventoryBalance";
				////
				if (!dsData.Tables.Contains(strTableCheck))
				{
					alParamsCoupleError.AddRange(new object[]{
						"Check.TableName", strTableCheck
						});
					throw CmUtils.CMyException.Raise(
						TError.ErridnInventory.OS_Inv_InventoryBalance_GetQtyX_Inv_InventoryBalance_GetQtyTblNotFound
						, null
						, alParamsCoupleError.ToArray()
						);
				}
				dtInv_InventoryBalance_GetQty = dsData.Tables[strTableCheck];
				//if (dtInv_InventoryBalance_GetQty.Rows.Count < 1)
				//{
				//	alParamsCoupleError.AddRange(new object[]{
				//		"Check.TableName", "Inv_InventoryBalance_GetQty"
				//		});
				//	throw CmUtils.CMyException.Raise(
				//		TError.ErridnInventory.OS_Inv_InventoryBalance_GetQtyX_Inv_InventoryBalance_GetQtyTblInvalid
				//		, null
				//		, alParamsCoupleError.ToArray()
				//		);
				//}
				////
				TUtils.CUtils.StdDataInTable(
					dtInv_InventoryBalance_GetQty // dtData
					, "StdParam", "OrgID" // arrstrCouple
					, "StdParam", "ProductCode" // arrstrCouple
					);
				////
				for (int nScan = 0; nScan < dtInv_InventoryBalance_GetQty.Rows.Count; nScan++)
				{
					////
					DataRow drScan = dtInv_InventoryBalance_GetQty.Rows[nScan];
					////
				}
			}
			#endregion

			#region //// SaveTemp Inv_InventoryBalance_GetQty:
			{
				// Upload:
				TUtils.CUtils.MyBuildDBDT_Common(
					_cf.db // db
					, "#input_Inv_InventoryBalance_GetQty_Draft" // strTableName
					, new object[] {
							"OrgID", TConst.BizMix.Default_DBColType,
							"ProductCode", TConst.BizMix.Default_DBColType
						} // arrSingleStructure
					, dtInv_InventoryBalance_GetQty // dtData
				);
			}
			#endregion

			#region // Build Sql:
			ArrayList alParamsCoupleSql = new ArrayList();
			//alParamsCoupleSql.AddRange(new object[] { "@strAbilityOfUser", drAbilityOfUser["MBBankBUPattern"] });
			alParamsCoupleSql.AddRange(new object[] {
					"@Today", DateTime.Today.ToString("yyyy-MM-dd")
					});
			////
			//myCache_Mst_Distributor_ViewAbility_Get(drAbilityOfUser);

			string strSqlGetData = CmUtils.StringUtils.Replace(@"
                    ---- #tbl_Inv_InventoryBalance_GetQty_Filter:
                    select distinct
						t.OrgID
						, t.ProductCode
						, f.QtyTotalOK
                    into #tbl_Inv_InventoryBalance_GetQty_Filter
                    from #input_Inv_InventoryBalance_GetQty_Draft t --//[mylock]
                        inner join Inv_InventoryBalance f --//[mylock]
                            on t.OrgID = f.OrgID
								and t.ProductCode = f.ProductCode
                    where (1=1)
                    ;
                    --select null tbl_Inv_InventoryBalance_GetQty_Filter, * from #tbl_Inv_InventoryBalance_GetQty_Filter --//[mylock];
					--drop table #tbl_Inv_InventoryBalance_GetQty_Filter;

                    ---- #Inv_InventoryBalance_GetQty:
                    select 
						t.OrgID
						, t.ProductCode
						, Sum(t.QtyTotalOK) QtyTotalOK
                    from #tbl_Inv_InventoryBalance_GetQty_Filter t --//[mylock]
                    where (1=1)
					group by
						t.OrgID
						, t.ProductCode
                    ;

                    ---- Clear for debug: 
                    drop table #tbl_Inv_InventoryBalance_GetQty_Filter;

                "
				);
			#endregion

			#region // Get Data:
			////
			dsGetData = _cf.db.ExecQuery(
					strSqlGetData
					, alParamsCoupleSql.ToArray()
					);
			////
			dsGetData.Tables[0].TableName = "Inv_InventoryBalance_GetQty";
			//CmUtils.DataUtils.MoveDataTable(ref mdsFinal, ref dsGetData);
			////
			#endregion

			#region //// Clear For Debug:
			{
				////
				string strSqlClearForDebug = CmUtils.StringUtils.Replace(@"
						---- Clear for Debug:
						drop table #input_Inv_InventoryBalance_GetQty_Draft
					");

				_cf.db.ExecQuery(
					strSqlClearForDebug
					);
				////
			}
		#endregion

			// Return Good:
			MyCodeLabel_Done:
			return;

		}
		public DataSet OS_Inv_InventoryBalance_GetQty(
			string strTid
			, string strGwUserCode
			, string strGwPassword
			, string strWAUserCode
			, string strWAUserPassword
			, ref ArrayList alParamsCoupleError
			//// Filter:
			, DataSet dsData
			)
		{
			#region // Temp:
			DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
			Stopwatch stopWatchFunc = new Stopwatch();
			//int nTidSeq = 0;
			DateTime dtimeSys = DateTime.UtcNow;
			bool bNeedTransaction = true;
			string strFunctionName = "OS_Inv_InventoryBalance_GetQty";
			string strErrorCodeDefault = TError.ErridnInventory.OS_Inv_InventoryBalance_GetQty;
			ArrayList alParamsCoupleSW = new ArrayList();
			alParamsCoupleError.AddRange(new object[]{
				"strFunctionName", strFunctionName
				, "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				});
			#endregion

			try
			{
				#region // SW:				
				stopWatchFunc.Start();
				alParamsCoupleSW.AddRange(new object[]{
					"strFunctionName", strFunctionName
					, "stopWatchFunc.Start", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
					});
				#endregion

				#region // Init:
				//_cf.db.LogUserId = _cf.sinf.strUserCode;
				if (bNeedTransaction) _cf.db.BeginTransaction();

				// Write RequestLog:
				_cf.ProcessBizReq_OutSide(
					strTid // strTid
					, strGwUserCode // strGwUserCode
					, strGwPassword // strGwPassword
					, strWAUserCode // objUserCode
					, strFunctionName // strFunctionName
					, alParamsCoupleError // alParamsCoupleError
					);

				// Sys_User_CheckAuthentication:
				//Sys_User_CheckAuthentication(
				//    ref alParamsCoupleError
				//    , strWAUserCode
				//    , strWAUserPassword
				//    );

				// Check Access/Deny:
				Sys_Access_CheckDenyV30(
					ref alParamsCoupleError
					, strWAUserCode
					, strFunctionName
					);
				#endregion

				#region // OS_Inv_InventoryBalance_GetQtyX:
				DataSet dsGetData = new DataSet();
				{
					OS_Inv_InventoryBalance_GetQtyX(
						strTid // strTid
						, strGwUserCode // strGwUserCode
						, strGwPassword // strGwPassword
						, strWAUserCode // strWAUserCode
						, strWAUserPassword // strWAUserPassword
						, ref alParamsCoupleError // alParamsCoupleError
						, dtimeSys // dtimeSys
						////
						, dsData // dsData
						////
						, out dsGetData // dsGetData
						);
				}
				#endregion

				#region // Get Data:
				CmUtils.DataUtils.MoveDataTable(ref mdsFinal, ref dsGetData);
				#endregion

				// Return Good:
				TDALUtils.DBUtils.RollbackSafety(_cf.db); // Always Rollback.
				mdsFinal.AcceptChanges();
				return mdsFinal;
			}
			catch (Exception exc)
			{
				#region // Catch of try:
				// Rollback:
				TDALUtils.DBUtils.RollbackSafety(_cf.db);

				// Return Bad:
				return TUtils.CProcessExc.Process(
					ref mdsFinal
					, exc
					, strErrorCodeDefault
					, alParamsCoupleError.ToArray()
					);
				#endregion
			}
			finally
			{
				#region // Finally of try:
				// Rollback and Release resources:
				TDALUtils.DBUtils.RollbackSafety(_cf.db);
				TDALUtils.DBUtils.ReleaseAllSemaphore(_cf.db_Sys, true);

				stopWatchFunc.Stop();
				alParamsCoupleSW.AddRange(new object[]{
					"strFunctionName", strFunctionName
					, "stopWatchFunc.Stop", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
					, "stopWatchFunc.ElapsedMilliseconds", stopWatchFunc.ElapsedMilliseconds
					});

				// Write ReturnLog:
				_cf.ProcessBizReturn_OutSide(
					ref mdsFinal // mdsFinal
					, strTid // strTid
					, strGwUserCode // strGwUserCode
					, strGwPassword // strGwPassword
					, strWAUserCode // objUserCode
					, strFunctionName // strFunctionName
					, alParamsCoupleSW // alParamsCoupleSW
					);
				#endregion
			}
		}
		public DataSet WAS_OS_Inv_InventoryBalance_GetQty(
			ref ArrayList alParamsCoupleError
			, RQ_Inv_InventoryBalance objRQ_Inv_InventoryBalance
			////
			, out RT_Inv_InventoryBalance objRT_Inv_InventoryBalance
			)
		{
			#region // Temp:
			string strTid = objRQ_Inv_InventoryBalance.Tid;
			objRT_Inv_InventoryBalance = new RT_Inv_InventoryBalance();
			DataSet mdsResult = CmUtils.CMyDataSet.NewMyDataSet(strTid);
			DateTime dtimeSys = DateTime.UtcNow;
			//DataSet mdsExec = null;
			//DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(objRQ_Inv_InventoryBalance.Tid);
			//int nTidSeq = 0;
			//bool bNeedTransaction = true;
			string strFunctionName = "WAS_OS_Inv_InventoryBalance_GetQty";
			string strErrorCodeDefault = TError.ErridnInventory.WAS_OS_Inv_InventoryBalance_GetQty;
			alParamsCoupleError.AddRange(new object[]{
				"strFunctionName", strFunctionName
				, "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
				});
			#endregion

			try
			{
				#region // Init:
				#endregion

				#region // Refine and Check Input:
				List<Inv_InventoryBalance> lst_Inv_InventoryBalance = new List<Inv_InventoryBalance>();
				DataSet dsData = new DataSet();
				{
					////
					if (objRQ_Inv_InventoryBalance.Lst_Inv_InventoryBalance == null)
						objRQ_Inv_InventoryBalance.Lst_Inv_InventoryBalance = new List<Inv_InventoryBalance>();
					{
						DataTable dt_Inv_InventoryBalance = TUtils.DataTableCmUtils.ToDataTable<Inv_InventoryBalance>(objRQ_Inv_InventoryBalance.Lst_Inv_InventoryBalance, "Inv_InventoryBalance");
						dsData.Tables.Add(dt_Inv_InventoryBalance);
					}
				}
				#endregion

				#region // WS_OS_Inv_InventoryBalance_GetQty:
				mdsResult = OS_Inv_InventoryBalance_GetQty(
					objRQ_Inv_InventoryBalance.Tid // strTid
					, objRQ_Inv_InventoryBalance.GwUserCode // strGwUserCode
					, objRQ_Inv_InventoryBalance.GwPassword // strGwPassword
					, objRQ_Inv_InventoryBalance.WAUserCode // strUserCode
					, objRQ_Inv_InventoryBalance.WAUserPassword // strUserPassword
					, ref alParamsCoupleError // alParamsCoupleError
											  ////
					, dsData // dsData
					);
				#endregion

				#region // GetData:
				if (!CmUtils.CMyDataSet.HasError(mdsResult))
				{
					////
					DataTable dt_Inv_InventoryBalance = mdsResult.Tables["Inv_InventoryBalance_GetQty"].Copy();
					lst_Inv_InventoryBalance = TUtils.DataTableCmUtils.ToListof<Inv_InventoryBalance>(dt_Inv_InventoryBalance);
					objRT_Inv_InventoryBalance.Lst_Inv_InventoryBalance = lst_Inv_InventoryBalance;
					////
				}
				#endregion

				// Return Good:
				return mdsResult;
			}
			catch (Exception exc)
			{
				#region // Catch of try:
				// Return Bad:
				return TUtils.CProcessExc.Process(
					ref mdsResult
					, exc
					, strErrorCodeDefault
					, alParamsCoupleError.ToArray()
					);
				#endregion
			}
			finally
			{
				#region // Finally of try:
				// Write ReturnLog:
				//_cf.ProcessBizReturn(
				//	ref mdsResult // mdsFinal
				//	, strTid // strTid
				//	, strFunctionName // strFunctionName
				//	);
				#endregion
			}
		}
		#endregion

		#region // OS_InvF_InventoryOut:
		public void OSDMS_InvF_InventoryOut_UpdQtyOrder(
			string strTid
			, string strGwUserCode
			, string strGwPassword
			, string strWAUserCode
			//, string strWAUserPassword
			, string strNetworkID
			, string strOrgID
			, string strAccessToken
			, ref ArrayList alParamsCoupleError
			////
			, DateTime dtimeSys
			////
			, string strMST
			////
			, object objIF_InvOutNo
			, object objInvOutDate
			, object objOrderNo
			/////
			, DataSet dsData
			////
			)
		{
			#region // Temp:
			string strFunctionName = "OSDMS_InvF_InventoryOut_UpdQtyOrder";
			string strErrorCodeDefault = TError.ErridnInventory.OSDMS_InvF_InventoryOut_UpdQtyOrder;
			alParamsCoupleError.AddRange(new object[]{
				"strFunctionName", strFunctionName
				, "strErrorCodeDefault", strErrorCodeDefault
				, "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
				, "strWAUserCode", strWAUserCode
				//, "strWAUserPassword", strWAUserPassword
                , "strNetworkID", strNetworkID
                ////
                , "objIF_InvOutNo", objIF_InvOutNo
				, "objInvOutDate", objInvOutDate
				, "objOrderNo", objOrderNo
                //, "strUrl_OS_TVAN_AllNetWork", strUrl_OS_TVAN_AllNetWork
                });
			#endregion

			#region // Convert Input:
			//DataSet dsData = TUtils.CUtils.StdDS(arrobjDSData);
			//if (dsData == null) dsData = new DataSet("dsData");
			//dsData.AcceptChanges();
			alParamsCoupleError.AddRange(new object[]{
				"Check.dsData", CmUtils.XmlUtils.DataSet2XmlSimple(dsData)
				});
			#endregion

			#region // Refine and check Input:
			string strIF_InvOutNo = TUtils.CUtils.StdParam(objIF_InvOutNo);
			string strInvOutDate = TUtils.CUtils.StdDate(objInvOutDate);
			string strOrderNo = TUtils.CUtils.StdParam(objOrderNo);
			#endregion

			#region // OS_MstSvDMS_MstSv_Mst_Network_GetByMST:
			string strUrl_OS_Inv_AllNetWork = "";
			{
				OS_MstSvDMS_MstSv_Mst_Network_GetByMST(
					strTid // strTid
					, strGwUserCode // strGwUserCode
					, strGwPassword // strGwPassword
					, strWAUserCode // strWAUserCode
					//, strWAUserPassword // strWAUserPassword
					, strNetworkID // strNetworkID
					, strOrgID // strOrgID
					, strAccessToken // strAccessToken
									 ////
					, ref alParamsCoupleError // alParamsCoupleError
					, dtimeSys // dtimeSys
					, strMST // strMST
					, out strUrl_OS_Inv_AllNetWork // strUrl_OS_SkycicDMS_AllNetWork
					);
				////
				if (string.IsNullOrEmpty(strUrl_OS_Inv_AllNetWork))
				{
					alParamsCoupleError.AddRange(new object[]{
						"Check.MST", strMST
						, "Check.strUrl_OS_Inv_AllNetWork", strUrl_OS_Inv_AllNetWork
						});
					throw CmUtils.CMyException.Raise(
						TError.ErridnInventory.OSDMS_InvF_InventoryOut_UpdQtyOrder_InvalidUrl_OS_Inv_AllNetWork
						, null
						, alParamsCoupleError.ToArray()
						);

				}

			}
			#endregion

			#region // WA_OS_Inv_Seq_Common_Get:
			//strIF_InvInNo = "";
			//{
			//	WA_OS_Inv_Seq_Common_Get(
			//		strTid // strTid
			//		, strGwUserCode // strGwUserCode
			//		, strGwPassword // strGwPassword
			//		, strWAUserCode // strWAUserCode
			//		, strWAUserPassword // strWAUserPassword
			//		, strNetworkID // strNetworkID
			//					   ////
			//		, ref alParamsCoupleError // alParamsCoupleError
			//		, dtimeSys // dtimeSys
			//		, strUrl_OS_Inv_AllNetWork // strUrl_OS_Inv_AllNetWork
			//								   ////
			//		, TConst.SeqType.IFInvInNo // strSequenceType
			//		, "" // strParam_Prefix
			//		, "" // strParam_Postfix
			//		, out strIF_InvInNo // strResult
			//		);
			//	////
			//	if (string.IsNullOrEmpty(strIF_InvInNo))
			//	{
			//		alParamsCoupleError.AddRange(new object[]{
			//			"Check.MST", strMST
			//			, "Check.MST", strOrgID_Login
			//			, "Check.strIF_InvInNo", strIF_InvInNo
			//			});
			//		throw CmUtils.CMyException.Raise(
			//			TError.ErridnInventory.OSDMS_InvF_InventoryOut_UpdQtyOrder_InvalidIF_InvInNo
			//			, null
			//			, alParamsCoupleError.ToArray()
			//			);

			//	}

			//}
			#endregion

			#region // Refine and Check Input:
			OSDMS_InvF_InventoryOut objInvF_InventoryOut = new OSDMS_InvF_InventoryOut();
			//List<OSDMS_InvF_InventoryOut> Lst_InvF_InventoryOut = new List<OSDMS_InvF_InventoryOut>();
			List<OSDMS_InvF_InventoryOutDtl> Lst_InvF_InventoryOutDtl = new List<OSDMS_InvF_InventoryOutDtl>();
			////
			{
				////
				objInvF_InventoryOut.IF_InvOutNo = strIF_InvOutNo;
				objInvF_InventoryOut.InvOutDate = strInvOutDate;
				/////
				DataTable dtInput_InvF_InventoryOutDtl = dsData.Tables["InvF_InventoryOutDtl"];
				Lst_InvF_InventoryOutDtl = TUtils.DataTableCmUtils.ToListof<OSDMS_InvF_InventoryOutDtl>(dtInput_InvF_InventoryOutDtl);
				////

			}
			#endregion

			#region // Call Func:
			RT_OSDMS_InvF_InventoryOut objRT_OSDMS_InvF_InventoryOut = null;
			{
				#region // WA_MstSv_Mst_Network_GetByMST:
				/////
				RQ_OSDMS_InvF_InventoryOut objRQ_OSDMS_InvF_InventoryOut = new RQ_OSDMS_InvF_InventoryOut()
				{
					InvOut_OrderMixDtl = objInvF_InventoryOut,
					Lst_InvOut_OrderMixDtl = Lst_InvF_InventoryOutDtl,
					Tid = strTid,
					TokenID = strOS_MasterServer_Solution_TokenID,
					NetworkID = strNetworkID,
					OrgID = strOrgID,
					//AccessToken = strAccessToken,
					GwUserCode = _cf.nvcParams["OS_MasterServer_SkycicDMS_GwUserCode"],
					GwPassword = _cf.nvcParams["OS_MasterServer_SkycicDMS_GwPassword"],
                    //WAUserCode = strWAUserCode,
                    //WAUserPassword = strWAUserPassword
                    WAUserCode = _cf.nvcParams["OS_Network_BG_WAUserCode"],
                    WAUserPassword = _cf.nvcParams["OS_Network_BG_WAUserPassword"],
                    AccessToken = null
                };
				////
				//var jsonconverttest = TJson.JsonConvert.SerializeObject(objRQ_OSDMS_InvF_InventoryOut);
				var strOrderType = objRQ_OSDMS_InvF_InventoryOut.Lst_InvOut_OrderMixDtl[0].OrderMixType;
				string strOrderMixNoSys = string.Format("{0}", objRQ_OSDMS_InvF_InventoryOut.Lst_InvOut_OrderMixDtl[0].OrderMixNoSys).Trim();
				////
				if (string.IsNullOrEmpty(strOrderMixNoSys))
				{
					alParamsCoupleError.AddRange(new object[]{
						"Check.strIF_InvOutNo", strIF_InvOutNo
						, "Check.strOrderMixNoSys", strOrderMixNoSys
						, "Check.strOrderNo", strOrderNo
						});
					throw CmUtils.CMyException.Raise(
						TError.ErridnInventory.OSDMS_InvF_InventoryOut_UpdQtyOrder_InvalidOrderMixNoSys
						, null
						, alParamsCoupleError.ToArray()
						);
				}
				////
				try
				{
					
					if (CmUtils.StringUtils.StringEqual(strOrderType, TConst.RefType.OrderDL))
					{

						objRT_OSDMS_InvF_InventoryOut = OSDMS_InvF_InventoryOutService.Instance.WA_Ord_OrderDLMix_UpdQty(strUrl_OS_Inv_AllNetWork, objRQ_OSDMS_InvF_InventoryOut);
						////
					}
					////
					else if (CmUtils.StringUtils.StringEqual(strOrderType, TConst.RefType.OrderSO))
					{
						objRT_OSDMS_InvF_InventoryOut = OSDMS_InvF_InventoryOutService.Instance.WA_Ord_OrderSOMix_UpdQty(strUrl_OS_Inv_AllNetWork, objRQ_OSDMS_InvF_InventoryOut);
						////
					}
					////
					else if (CmUtils.StringUtils.StringEqual(strOrderType, TConst.RefType.OrderSR))
					{
						objRT_OSDMS_InvF_InventoryOut = OSDMS_InvF_InventoryOutService.Instance.WA_Ord_OrderSRMix_UpdQty(strUrl_OS_Inv_AllNetWork, objRQ_OSDMS_InvF_InventoryOut);
						////
					}
					//else 
					//{
					//	alParamsCoupleError.AddRange(new object[]{
					//		"Check.strOrderType", strOrderType
					//		});
					//	throw CmUtils.CMyException.Raise(
					//		TError.ErridnInventory.OSDMS_InvF_InventoryOut_UpdQtyOrder_InvalidOrderType
					//		, null
					//		, alParamsCoupleError.ToArray()
					//		);
					//}

				}
				catch (Exception cex)
				{
                    string strErrorCodeOS = null;

                    TUtils.CProcessExc.BizShowException(
						ref alParamsCoupleError // alParamsCoupleError
						, cex // cex
                        , out strErrorCodeOS
                        );

					throw CmUtils.CMyException.Raise(
						TError.ErridnInventory.CmSys_InvalidOutSite + "." + "DMSPLUS" + "." + strErrorCodeOS
                        , null
						, alParamsCoupleError.ToArray()
						);
				}
				////
				#endregion
			}
			#endregion
		}

        /// <summary>
        /// 20210410. Sửa gọi sang LQDMS => Trước đó là đang gọi DMS+
        /// Tham chiếu từ OSDMS_InvF_InventoryOut_UpdQtyOrder
        /// 20210915. Không dùng hàm này nữa.
        /// </summary>
        public void OSDMS_InvF_InventoryOut_UpdQtyOrder_New20210410(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            //, string strWAUserPassword
            , string strNetworkID
            , string strOrgID
            , string strAccessToken
            , ref ArrayList alParamsCoupleError
            ////
            , DateTime dtimeSys
            ////
            , string strMST
            ////
            , object objIF_InvOutNo
            , object objInvOutDate
            , object objOrderNo
            /////
            , DataSet dsData
            ////
            )
        {
            #region // Temp:
            string strFunctionName = "OSDMS_InvF_InventoryOut_UpdQtyOrder";
            string strErrorCodeDefault = TError.ErridnInventory.OSDMS_InvF_InventoryOut_UpdQtyOrder;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "strErrorCodeDefault", strErrorCodeDefault
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
				, "strWAUserCode", strWAUserCode
				//, "strWAUserPassword", strWAUserPassword
                , "strNetworkID", strNetworkID
                ////
                , "objIF_InvOutNo", objIF_InvOutNo
                , "objInvOutDate", objInvOutDate
                , "objOrderNo", objOrderNo
                //, "strUrl_OS_TVAN_AllNetWork", strUrl_OS_TVAN_AllNetWork
                });
            #endregion

            #region // Convert Input:
            //DataSet dsData = TUtils.CUtils.StdDS(arrobjDSData);
            //if (dsData == null) dsData = new DataSet("dsData");
            //dsData.AcceptChanges();
            alParamsCoupleError.AddRange(new object[]{
                "Check.dsData", CmUtils.XmlUtils.DataSet2XmlSimple(dsData)
                });
            #endregion

            #region // Refine and check Input:
            string strIF_InvOutNo = TUtils.CUtils.StdParam(objIF_InvOutNo);
            string strInvOutDate = TUtils.CUtils.StdDate(objInvOutDate);
            string strOrderNo = TUtils.CUtils.StdParam(objOrderNo);
            #endregion

            #region // OS_MstSvDMS_MstSv_Mst_Network_GetByMST:
            string strUrl_OS_Inv_AllNetWork = string.Format("{0}", htCacheMstParam[TConst.Mst_Param.OS_LQDMS_API_URL]);//_cf.nvcParams["OS_LQDMS_API_Url"];
            //{
            //    OS_MstSvDMS_MstSv_Mst_Network_GetByMST(
            //        strTid // strTid
            //        , strGwUserCode // strGwUserCode
            //        , strGwPassword // strGwPassword
            //        , strWAUserCode // strWAUserCode
            //                        //, strWAUserPassword // strWAUserPassword
            //        , strNetworkID // strNetworkID
            //        , strOrgID // strOrgID
            //        , strAccessToken // strAccessToken
            //                         ////
            //        , ref alParamsCoupleError // alParamsCoupleError
            //        , dtimeSys // dtimeSys
            //        , strMST // strMST
            //        , out strUrl_OS_Inv_AllNetWork // strUrl_OS_SkycicDMS_AllNetWork
            //        );
            //    ////
            //    if (string.IsNullOrEmpty(strUrl_OS_Inv_AllNetWork))
            //    {
            //        alParamsCoupleError.AddRange(new object[]{
            //            "Check.MST", strMST
            //            , "Check.strUrl_OS_Inv_AllNetWork", strUrl_OS_Inv_AllNetWork
            //            });
            //        throw CmUtils.CMyException.Raise(
            //            TError.ErridnInventory.OSDMS_InvF_InventoryOut_UpdQtyOrder_InvalidUrl_OS_Inv_AllNetWork
            //            , null
            //            , alParamsCoupleError.ToArray()
            //            );

            //    }

            //}
            #endregion

            #region // WA_OS_Inv_Seq_Common_Get:
            //strIF_InvInNo = "";
            //{
            //	WA_OS_Inv_Seq_Common_Get(
            //		strTid // strTid
            //		, strGwUserCode // strGwUserCode
            //		, strGwPassword // strGwPassword
            //		, strWAUserCode // strWAUserCode
            //		, strWAUserPassword // strWAUserPassword
            //		, strNetworkID // strNetworkID
            //					   ////
            //		, ref alParamsCoupleError // alParamsCoupleError
            //		, dtimeSys // dtimeSys
            //		, strUrl_OS_Inv_AllNetWork // strUrl_OS_Inv_AllNetWork
            //								   ////
            //		, TConst.SeqType.IFInvInNo // strSequenceType
            //		, "" // strParam_Prefix
            //		, "" // strParam_Postfix
            //		, out strIF_InvInNo // strResult
            //		);
            //	////
            //	if (string.IsNullOrEmpty(strIF_InvInNo))
            //	{
            //		alParamsCoupleError.AddRange(new object[]{
            //			"Check.MST", strMST
            //			, "Check.MST", strOrgID_Login
            //			, "Check.strIF_InvInNo", strIF_InvInNo
            //			});
            //		throw CmUtils.CMyException.Raise(
            //			TError.ErridnInventory.OSDMS_InvF_InventoryOut_UpdQtyOrder_InvalidIF_InvInNo
            //			, null
            //			, alParamsCoupleError.ToArray()
            //			);

            //	}

            //}
            #endregion

            #region // Refine and Check Input:
            OSDMS_InvF_InventoryOut objInvF_InventoryOut = new OSDMS_InvF_InventoryOut();
            //List<OSDMS_InvF_InventoryOut> Lst_InvF_InventoryOut = new List<OSDMS_InvF_InventoryOut>();
            List<OSDMS_InvF_InventoryOutDtl> Lst_InvF_InventoryOutDtl = new List<OSDMS_InvF_InventoryOutDtl>();
            ////
            {
                ////
                objInvF_InventoryOut.IF_InvOutNo = strIF_InvOutNo;
                objInvF_InventoryOut.InvOutDate = strInvOutDate;
                /////
                DataTable dtInput_InvF_InventoryOutDtl = dsData.Tables["InvF_InventoryOutDtl"];
                Lst_InvF_InventoryOutDtl = TUtils.DataTableCmUtils.ToListof<OSDMS_InvF_InventoryOutDtl>(dtInput_InvF_InventoryOutDtl);
                ////

            }
            #endregion

            #region // Call Func:
            RT_OSDMS_InvF_InventoryOut objRT_OSDMS_InvF_InventoryOut = null;
            {
                #region // WA_MstSv_Mst_Network_GetByMST:
                /////
                RQ_OSDMS_InvF_InventoryOut objRQ_OSDMS_InvF_InventoryOut = new RQ_OSDMS_InvF_InventoryOut()
                {
                    InvOut_OrderMixDtl = objInvF_InventoryOut,
                    Lst_InvOut_OrderMixDtl = Lst_InvF_InventoryOutDtl,
                    Tid = strTid,
                    TokenID = strOS_MasterServer_Solution_TokenID,
                    NetworkID = strNetworkID,
                    OrgID = strOrgID,
                    //AccessToken = strAccessToken,
                    GwUserCode = string.Format("{0}", htCacheMstParam[TConst.Mst_Param.OS_LQDMS_GWUSERCODE]), //_cf.nvcParams["OS_MasterServer_SkycicDMS_GwUserCode"],
                    GwPassword = string.Format("{0}", htCacheMstParam[TConst.Mst_Param.OS_LQDMS_GWPASSWORD]), //_cf.nvcParams["OS_MasterServer_SkycicDMS_GwPassword"],
                    //WAUserCode = strWAUserCode,
                    //WAUserPassword = strWAUserPassword
                    WAUserCode = string.Format("{0}", htCacheMstParam[TConst.Mst_Param.OS_LQDMS_BG_WAUSERCODE]), //_cf.nvcParams["OS_Network_BG_WAUserCode"],
                    WAUserPassword = string.Format("{0}", htCacheMstParam[TConst.Mst_Param.OS_LQDMS_BG_WAUSERPASSWORD]), //_cf.nvcParams["OS_Network_BG_WAUserPassword"],
                    AccessToken = null
                };
                ////
                var jsonconverttest = TJson.JsonConvert.SerializeObject(objRQ_OSDMS_InvF_InventoryOut);
                var strOrderType = objRQ_OSDMS_InvF_InventoryOut.Lst_InvOut_OrderMixDtl[0].OrderMixType;
                string strOrderMixNoSys = string.Format("{0}", objRQ_OSDMS_InvF_InventoryOut.Lst_InvOut_OrderMixDtl[0].OrderMixNoSys).Trim();
                ////
                if (string.IsNullOrEmpty(strOrderMixNoSys))
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.strIF_InvOutNo", strIF_InvOutNo
                        , "Check.strOrderMixNoSys", strOrderMixNoSys
                        , "Check.strOrderNo", strOrderNo
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.OSDMS_InvF_InventoryOut_UpdQtyOrder_InvalidOrderMixNoSys
                        , null
                        , alParamsCoupleError.ToArray()
                        );
                }
                ////
                try
                {

                    if (CmUtils.StringUtils.StringEqual(strOrderType, TConst.RefType.OrderDL))
                    {

                        objRT_OSDMS_InvF_InventoryOut = OSDMS_InvF_InventoryOutService.Instance.WA_Ord_OrderDLMix_UpdQty(strUrl_OS_Inv_AllNetWork, objRQ_OSDMS_InvF_InventoryOut);
                        ////
                    }
                    ////
                    else if (CmUtils.StringUtils.StringEqual(strOrderType, TConst.RefType.OrderSO))
                    {
                        objRT_OSDMS_InvF_InventoryOut = OSDMS_InvF_InventoryOutService.Instance.WA_Ord_OrderSOMix_UpdQty(strUrl_OS_Inv_AllNetWork, objRQ_OSDMS_InvF_InventoryOut);
                        ////
                    }
                    ////
                    else if (CmUtils.StringUtils.StringEqual(strOrderType, TConst.RefType.OrderSR))
                    {
                        objRT_OSDMS_InvF_InventoryOut = OSDMS_InvF_InventoryOutService.Instance.WA_Ord_OrderSRMix_UpdQty(strUrl_OS_Inv_AllNetWork, objRQ_OSDMS_InvF_InventoryOut);
                        ////
                    }
                    //else 
                    //{
                    //	alParamsCoupleError.AddRange(new object[]{
                    //		"Check.strOrderType", strOrderType
                    //		});
                    //	throw CmUtils.CMyException.Raise(
                    //		TError.ErridnInventory.OSDMS_InvF_InventoryOut_UpdQtyOrder_InvalidOrderType
                    //		, null
                    //		, alParamsCoupleError.ToArray()
                    //		);
                    //}

                }
                catch (Exception cex)
                {
                    string strErrorCodeOS = null;

                    TUtils.CProcessExc.BizShowException(
                        ref alParamsCoupleError // alParamsCoupleError
                        , cex // cex
                        , out strErrorCodeOS
                        );

                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.CmSys_InvalidOutSite + "." + "DMSPLUS" + "." + strErrorCodeOS
                        , null
                        , alParamsCoupleError.ToArray()
                        );
                }
                ////
                #endregion
            }
            #endregion
        }

        /// <summary>
        /// 20210915. Check đơn hàng trênLQDMS
        /// Tham chiếu từ OSDMS_InvF_InventoryOut_UpdQtyOrder
        /// </summary>
        public void OSLQDMS_InvF_InventoryOut_UpdQtyOrder(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            //, string strWAUserPassword
            , string strNetworkID
            , string strOrgID
            , string strAccessToken
            , ref ArrayList alParamsCoupleError
            ////
            , DateTime dtimeSys
            ////
            , string strMST
            ////
            , object objIF_InvOutNo
            , object objInvOutDate
            , object objOrderNo
            /////
            , DataSet dsData
            ////
            )
        {
            #region // Temp:
            string strFunctionName = "OSDMS_InvF_InventoryOut_UpdQtyOrder";
            string strErrorCodeDefault = TError.ErridnInventory.OSDMS_InvF_InventoryOut_UpdQtyOrder;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "strErrorCodeDefault", strErrorCodeDefault
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
				, "strWAUserCode", strWAUserCode
				//, "strWAUserPassword", strWAUserPassword
                , "strNetworkID", strNetworkID
                ////
                , "objIF_InvOutNo", objIF_InvOutNo
                , "objInvOutDate", objInvOutDate
                , "objOrderNo", objOrderNo
                //, "strUrl_OS_TVAN_AllNetWork", strUrl_OS_TVAN_AllNetWork
                });
            #endregion

            #region // Convert Input:
            //DataSet dsData = TUtils.CUtils.StdDS(arrobjDSData);
            //if (dsData == null) dsData = new DataSet("dsData");
            //dsData.AcceptChanges();
            alParamsCoupleError.AddRange(new object[]{
                "Check.dsData", CmUtils.XmlUtils.DataSet2XmlSimple(dsData)
                });
            #endregion

            #region // Refine and check Input:
            string strIF_InvOutNo = TUtils.CUtils.StdParam(objIF_InvOutNo);
            string strInvOutDate = TUtils.CUtils.StdDate(objInvOutDate);
            string strOrderNo = TUtils.CUtils.StdParam(objOrderNo);
            #endregion

            #region // OS_MstSvDMS_MstSv_Mst_Network_GetByMST:
            string strUrl_OS_Inv_AllNetWork = string.Format("{0}", htCacheMstParam[TConst.Mst_Param.OS_LQDMS_API_URL]);//_cf.nvcParams["OS_LQDMS_API_Url"];
            //{
            //    OS_MstSvDMS_MstSv_Mst_Network_GetByMST(
            //        strTid // strTid
            //        , strGwUserCode // strGwUserCode
            //        , strGwPassword // strGwPassword
            //        , strWAUserCode // strWAUserCode
            //                        //, strWAUserPassword // strWAUserPassword
            //        , strNetworkID // strNetworkID
            //        , strOrgID // strOrgID
            //        , strAccessToken // strAccessToken
            //                         ////
            //        , ref alParamsCoupleError // alParamsCoupleError
            //        , dtimeSys // dtimeSys
            //        , strMST // strMST
            //        , out strUrl_OS_Inv_AllNetWork // strUrl_OS_SkycicDMS_AllNetWork
            //        );
            //    ////
            //    if (string.IsNullOrEmpty(strUrl_OS_Inv_AllNetWork))
            //    {
            //        alParamsCoupleError.AddRange(new object[]{
            //            "Check.MST", strMST
            //            , "Check.strUrl_OS_Inv_AllNetWork", strUrl_OS_Inv_AllNetWork
            //            });
            //        throw CmUtils.CMyException.Raise(
            //            TError.ErridnInventory.OSDMS_InvF_InventoryOut_UpdQtyOrder_InvalidUrl_OS_Inv_AllNetWork
            //            , null
            //            , alParamsCoupleError.ToArray()
            //            );

            //    }

            //}
            #endregion

            #region // WA_OS_Inv_Seq_Common_Get:
            //strIF_InvInNo = "";
            //{
            //	WA_OS_Inv_Seq_Common_Get(
            //		strTid // strTid
            //		, strGwUserCode // strGwUserCode
            //		, strGwPassword // strGwPassword
            //		, strWAUserCode // strWAUserCode
            //		, strWAUserPassword // strWAUserPassword
            //		, strNetworkID // strNetworkID
            //					   ////
            //		, ref alParamsCoupleError // alParamsCoupleError
            //		, dtimeSys // dtimeSys
            //		, strUrl_OS_Inv_AllNetWork // strUrl_OS_Inv_AllNetWork
            //								   ////
            //		, TConst.SeqType.IFInvInNo // strSequenceType
            //		, "" // strParam_Prefix
            //		, "" // strParam_Postfix
            //		, out strIF_InvInNo // strResult
            //		);
            //	////
            //	if (string.IsNullOrEmpty(strIF_InvInNo))
            //	{
            //		alParamsCoupleError.AddRange(new object[]{
            //			"Check.MST", strMST
            //			, "Check.MST", strOrgID_Login
            //			, "Check.strIF_InvInNo", strIF_InvInNo
            //			});
            //		throw CmUtils.CMyException.Raise(
            //			TError.ErridnInventory.OSDMS_InvF_InventoryOut_UpdQtyOrder_InvalidIF_InvInNo
            //			, null
            //			, alParamsCoupleError.ToArray()
            //			);

            //	}

            //}
            #endregion

            #region // Refine and Check Input:
            OSDMS_InvF_InventoryOut objInvF_InventoryOut = new OSDMS_InvF_InventoryOut();
            //List<OSDMS_InvF_InventoryOut> Lst_InvF_InventoryOut = new List<OSDMS_InvF_InventoryOut>();
            List<OSDMS_InvF_InventoryOutDtl> Lst_InvF_InventoryOutDtl = new List<OSDMS_InvF_InventoryOutDtl>();
            ////
            {
                ////
                objInvF_InventoryOut.IF_InvOutNo = strIF_InvOutNo;
                objInvF_InventoryOut.InvOutDate = strInvOutDate;
                /////
                DataTable dtInput_InvF_InventoryOutDtl = dsData.Tables["InvF_InventoryOutDtl"];
                Lst_InvF_InventoryOutDtl = TUtils.DataTableCmUtils.ToListof<OSDMS_InvF_InventoryOutDtl>(dtInput_InvF_InventoryOutDtl);
                ////

            }
            #endregion

            #region // Call Func:
            RT_OSDMS_InvF_InventoryOut objRT_OSDMS_InvF_InventoryOut = null;
            {
                #region // WA_MstSv_Mst_Network_GetByMST:
                /////
                RQ_OSDMS_InvF_InventoryOut objRQ_OSDMS_InvF_InventoryOut = new RQ_OSDMS_InvF_InventoryOut()
                {
                    InvOut_OrderMixDtl = objInvF_InventoryOut,
                    Lst_InvOut_OrderMixDtl = Lst_InvF_InventoryOutDtl,
                    Tid = strTid,
                    TokenID = strOS_MasterServer_Solution_TokenID,
                    NetworkID = strNetworkID,
                    OrgID = strOrgID,
                    //AccessToken = strAccessToken,
                    GwUserCode = string.Format("{0}", htCacheMstParam[TConst.Mst_Param.OS_LQDMS_GWUSERCODE]), //_cf.nvcParams["OS_MasterServer_SkycicDMS_GwUserCode"],
                    GwPassword = string.Format("{0}", htCacheMstParam[TConst.Mst_Param.OS_LQDMS_GWPASSWORD]), //_cf.nvcParams["OS_MasterServer_SkycicDMS_GwPassword"],
                    //WAUserCode = strWAUserCode,
                    //WAUserPassword = strWAUserPassword
                    WAUserCode = string.Format("{0}", htCacheMstParam[TConst.Mst_Param.OS_LQDMS_BG_WAUSERCODE]), //_cf.nvcParams["OS_Network_BG_WAUserCode"],
                    WAUserPassword = string.Format("{0}", htCacheMstParam[TConst.Mst_Param.OS_LQDMS_BG_WAUSERPASSWORD]), //_cf.nvcParams["OS_Network_BG_WAUserPassword"],
                    AccessToken = null
                };
                ////
                var jsonconverttest = TJson.JsonConvert.SerializeObject(objRQ_OSDMS_InvF_InventoryOut);
                var strOrderType = objRQ_OSDMS_InvF_InventoryOut.Lst_InvOut_OrderMixDtl[0].OrderMixType;
                string strOrderMixNoSys = string.Format("{0}", objRQ_OSDMS_InvF_InventoryOut.Lst_InvOut_OrderMixDtl[0].OrderMixNoSys).Trim();
                ////
                if (string.IsNullOrEmpty(strOrderMixNoSys))
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.strIF_InvOutNo", strIF_InvOutNo
                        , "Check.strOrderMixNoSys", strOrderMixNoSys
                        , "Check.strOrderNo", strOrderNo
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.OSDMS_InvF_InventoryOut_UpdQtyOrder_InvalidOrderMixNoSys
                        , null
                        , alParamsCoupleError.ToArray()
                        );
                }
                ////
                try
                {

                    if (CmUtils.StringUtils.StringEqual(strOrderType, TConst.RefType.OrderDL))
                    {

                        objRT_OSDMS_InvF_InventoryOut = OSDMS_InvF_InventoryOutService.Instance.WA_Ord_OrderDLMix_UpdQty(strUrl_OS_Inv_AllNetWork, objRQ_OSDMS_InvF_InventoryOut);
                        ////
                    }
                    ////
                    else if (CmUtils.StringUtils.StringEqual(strOrderType, TConst.RefType.OrderSO))
                    {
                        objRT_OSDMS_InvF_InventoryOut = OSDMS_InvF_InventoryOutService.Instance.WA_Ord_OrderSOMix_UpdQty(strUrl_OS_Inv_AllNetWork, objRQ_OSDMS_InvF_InventoryOut);
                        ////
                    }
                    ////
                    else if (CmUtils.StringUtils.StringEqual(strOrderType, TConst.RefType.OrderSR))
                    {
                        objRT_OSDMS_InvF_InventoryOut = OSDMS_InvF_InventoryOutService.Instance.WA_Ord_OrderSRMix_UpdQty(strUrl_OS_Inv_AllNetWork, objRQ_OSDMS_InvF_InventoryOut);
                        ////
                    }
                    //else 
                    //{
                    //	alParamsCoupleError.AddRange(new object[]{
                    //		"Check.strOrderType", strOrderType
                    //		});
                    //	throw CmUtils.CMyException.Raise(
                    //		TError.ErridnInventory.OSDMS_InvF_InventoryOut_UpdQtyOrder_InvalidOrderType
                    //		, null
                    //		, alParamsCoupleError.ToArray()
                    //		);
                    //}

                }
                catch (Exception cex)
                {
                    string strErrorCodeOS = null;

                    TUtils.CProcessExc.BizShowException(
                        ref alParamsCoupleError // alParamsCoupleError
                        , cex // cex
                        , out strErrorCodeOS
                        );

                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.CmSys_InvalidOutSite + "." + "DMSPLUS" + "." + strErrorCodeOS
                        , null
                        , alParamsCoupleError.ToArray()
                        );
                }
                ////
                #endregion
            }
            #endregion
        }
        #endregion

        #region // OS_Ser_RO:
        public void OSVeloca_SerRO_InvF_Transaction_AddQtyMix(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            //, string strWAUserPassword
            , string strNetworkID
            , string strOrgID
            , string strAccessToken
            , ref ArrayList alParamsCoupleError
            ////
            , DateTime dtimeSys
            ////
            , string strMST
            ////
            , object objIF_InvOutNo
            , object objInvOutDate
            , object objRONoSys
            /////
            , DataSet dsData
            ////
            )
        {
            #region // Temp:
            string strFunctionName = "OSVeloca_SerRO_InvF_Transaction_AddQtyMix";
            string strErrorCodeDefault = TError.ErridnInventory.OSVeloca_SerRO_InvF_Transaction_AddQtyMix;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "strErrorCodeDefault", strErrorCodeDefault
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
				, "strWAUserCode", strWAUserCode
				//, "strWAUserPassword", strWAUserPassword
                , "strNetworkID", strNetworkID
                ////
                , "objIF_InvOutNo", objIF_InvOutNo
                , "objInvOutDate", objInvOutDate
                , "objRONoSys", objRONoSys
                });
            #endregion

            #region // Convert Input:
            //DataSet dsData = TUtils.CUtils.StdDS(arrobjDSData);
            //if (dsData == null) dsData = new DataSet("dsData");
            //dsData.AcceptChanges();
            alParamsCoupleError.AddRange(new object[]{
                "Check.dsData", CmUtils.XmlUtils.DataSet2XmlSimple(dsData)
                });
            #endregion

            #region // Refine and check Input:
            string strIF_InvOutNo = TUtils.CUtils.StdParam(objIF_InvOutNo);
            string strInvOutDate = TUtils.CUtils.StdDate(objInvOutDate);
            string strRONoSys = TUtils.CUtils.StdParam(objRONoSys);
            #endregion

            #region // OS_MstSvVeloca_MstSv_Mst_Network_GetByMST:
            string strUrl_OS_Inv_AllNetWork = "";
            {
                OS_MstSvVeloca_MstSv_Mst_Network_GetByMST(
                    strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // strWAUserCode
                                    //, strWAUserPassword // strWAUserPassword
                    , strNetworkID // strNetworkID
                    , strOrgID // strOrgID
                    , strAccessToken // strAccessToken
                                     ////
                    , ref alParamsCoupleError // alParamsCoupleError
                    , dtimeSys // dtimeSys
                    , strMST // strMST
                    , out strUrl_OS_Inv_AllNetWork // strUrl_OS_SkycicDMS_AllNetWork
                    );
                ////
                if (string.IsNullOrEmpty(strUrl_OS_Inv_AllNetWork))
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.MST", strMST
                        , "Check.strUrl_OS_Inv_AllNetWork", strUrl_OS_Inv_AllNetWork
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.OSVeloca_SerRO_InvF_Transaction_AddQtyMix_InvalidUrl_OS_Inv_AllNetWork
                        , null
                        , alParamsCoupleError.ToArray()
                        );

                }

            }
            #endregion

            #region // Refine and Check Input:
            SerRO_InvF_Transaction objSerRO_InvF_Transaction = new SerRO_InvF_Transaction();
            //List<SerRO_InvF_Transaction> Lst_InvF_InventoryOut = new List<SerRO_InvF_Transaction>();
            List<SerRO_InvF_Transaction> Lst_SerRO_InvF_Transaction = new List<SerRO_InvF_Transaction>();
            ////
            {
                ////
                objSerRO_InvF_Transaction.RONoSys = strRONoSys;
                /////
                DataTable dtInput_InvF_InventoryOutDtl = dsData.Tables["SerRO_InvF_Transaction"];
                Lst_SerRO_InvF_Transaction = TUtils.DataTableCmUtils.ToListof<SerRO_InvF_Transaction>(dtInput_InvF_InventoryOutDtl);
                ////

            }
            #endregion

            #region // Call Func:
            RT_SerRO_InvF_Transaction objRT_SerRO_InvF_Transaction = null;
            {
                #region // WA_MstSv_Mst_Network_GetByMST:
                /////
                RQ_SerRO_InvF_Transaction objRQ_SerRO_InvF_Transaction = new RQ_SerRO_InvF_Transaction()
                {
                    SerRO_InvF_Transaction = objSerRO_InvF_Transaction,
                    Lst_SerRO_InvF_Transaction = Lst_SerRO_InvF_Transaction,
                    Tid = strTid,
                    TokenID = strOS_MasterServer_Solution_TokenID,
                    NetworkID = strNetworkID,
                    OrgID = strOrgID,
                    AccessToken = strAccessToken,
                    GwUserCode = _cf.nvcParams["OS_MasterServer_SkycicVeloca_GwUserCode"],
                    GwPassword = _cf.nvcParams["OS_MasterServer_SkycicVeloca_GwPassword"],
                    WAUserCode = strWAUserCode,
                    //WAUserPassword = strWAUserPassword
                };
                ////
                try
                {
                    objRT_SerRO_InvF_Transaction = SerRO_InvF_TransactionService.Instance.OSVeloca_WA_SerRO_InvF_Transaction_AddQtyMix(strUrl_OS_Inv_AllNetWork, objRQ_SerRO_InvF_Transaction);
                    ////

                }
                catch (Exception cex)
                {
                    string strErrorCodeOS = null;

                    TUtils.CProcessExc.BizShowException(
                        ref alParamsCoupleError // alParamsCoupleError
                        , cex // cex
                        , out strErrorCodeOS
                        );

                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.CmSys_InvalidOutSite + "." + "VELOCA" + "." + strErrorCodeOS
                        , null
                        , alParamsCoupleError.ToArray()
                        );
                }
                ////
                #endregion
            }
            #endregion
        }
        #endregion 

        #region // OS_MstSvDMS_MstSv_Mst_Network_GetByMST:
        public void OS_MstSvDMS_MstSv_Mst_Network_GetByMST(
			string strTid
			, string strGwUserCode
			, string strGwPassword
			, string strWAUserCode
			//, string strWAUserPassword
			, string strNetworkID
			, string strOrgID
			, string strAccessToken
			, ref ArrayList alParamsCoupleError
			////
			, DateTime dtimeSys
			////
			, string strMST
			, out string strUrl_OS_SkycicDMS_AllNetWork
			)
		{
			#region // Temp:
			string strFunctionName = "OS_MstSvDMS_MstSv_Mst_Network_GetByMST";
			string strErrorCodeDefault = TError.ErridnInventory.OS_MstSvDMS_MstSv_Mst_Network_GetByMST;
			alParamsCoupleError.AddRange(new object[]{
				"strFunctionName", strFunctionName
				, "strErrorCodeDefault", strErrorCodeDefault
				, "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
				, "strWAUserCode", strWAUserCode
				//, "strWAUserPassword", strWAUserPassword
				, "strNetworkID", strNetworkID
                ////
                , "strMST", strMST
				});
			#endregion

			#region // Refine and check:
			string strOS_MasterServer_SkycicDMS_GwUserCode = _cf.nvcParams["OS_MasterServer_SkycicDMS_GwUserCode"];
			string strOS_MasterServer_SkycicDMS_GwPassword = _cf.nvcParams["OS_MasterServer_SkycicDMS_GwPassword"];
			string strOS_MasterServer_SkycicDMS_API_Url = _cf.nvcParams["OS_MasterServer_SkycicDMS_API_Url"];
			/////
			alParamsCoupleError.AddRange(new object[]{
				"Check.strOS_MasterServer_SkycicDMS_API_Url", strOS_MasterServer_SkycicDMS_API_Url
				});
			#endregion

			#region // Call Func:
			RT_OS_MstSvDMS_MstSv_Mst_Network objRT_OS_MstSvDMS_MstSv_Mst_Network = null;
			{
				#region // WA_MstSv_Mst_Network_GetByMST:
				OS_MstSvDMS_MstSv_Mst_Network objOS_MstSvDMS_MstSv_Mst_Network = new OS_MstSvDMS_MstSv_Mst_Network();
				objOS_MstSvDMS_MstSv_Mst_Network.MST = strMST;
				/////
				RQ_OS_MstSvDMS_MstSv_Mst_Network objRQ_OS_MstSvDMS_MstSv_Mst_Network = new RQ_OS_MstSvDMS_MstSv_Mst_Network()
				{
					MstSv_Mst_Network = objOS_MstSvDMS_MstSv_Mst_Network,
					Tid = strTid,
					TokenID = strOS_MasterServer_Solution_TokenID,
					NetworkID = nNetworkID.ToString(),
					OrgID = strOrgID,
					AccessToken = strAccessToken,
					GwUserCode = strOS_MasterServer_SkycicDMS_GwUserCode,
					GwPassword = strOS_MasterServer_SkycicDMS_GwPassword,
					WAUserCode = strOS_MasterServer_Solution_WAUserCode,
					//WAUserPassword = strAccessToken
				};
				////
				try
				{
					objRT_OS_MstSvDMS_MstSv_Mst_Network = OS_MstSvDMS_MstSv_Mst_NetworkService.Instance.WA_OS_MstSvDMS_MstSv_Mst_Network_GetByMST(objRQ_OS_MstSvDMS_MstSv_Mst_Network, strOS_MasterServer_SkycicDMS_API_Url);
					////
				}
				catch (Exception cex)
				{
                    string strErrorCodeOS = null;

                    TUtils.CProcessExc.BizShowException(
						ref alParamsCoupleError // alParamsCoupleError
						, cex // cex
                        , out strErrorCodeOS
                        );

					throw CmUtils.CMyException.Raise(
						TError.ErridnInventory.CmSys_InvalidOutSite + "." + "DMSPLUS" + "." + strErrorCodeOS
                        , null
						, alParamsCoupleError.ToArray()
						);
				}
				////
				#endregion
			}
			#endregion

			#region // Get Remark:
			strUrl_OS_SkycicDMS_AllNetWork = objRT_OS_MstSvDMS_MstSv_Mst_Network.c_K_DT_Sys.Lst_c_K_DT_SysInfo[0].Remark;
			//CmUtils.CMyDataSet.SetRemark(ref mdsFinal, strResult);
			#endregion
		}
        #endregion


        #region // OS_MstSvVeloca_MstSv_Mst_Network_GetByMST:
        public void OS_MstSvVeloca_MstSv_Mst_Network_GetByMST(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            //, string strWAUserPassword
            , string strNetworkID
            , string strOrgID
            , string strAccessToken
            , ref ArrayList alParamsCoupleError
            ////
            , DateTime dtimeSys
            ////
            , string strMST
            , out string strUrl_OS_SkycicDMS_AllNetWork
            )
        {
            #region // Temp:
            string strFunctionName = "OS_MstSvVeloca_MstSv_Mst_Network_GetByMST";
            string strErrorCodeDefault = TError.ErridnInventory.OS_MstSvVeloca_MstSv_Mst_Network_GetByMST;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "strErrorCodeDefault", strErrorCodeDefault
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
				, "strWAUserCode", strWAUserCode
				//, "strWAUserPassword", strWAUserPassword
				, "strNetworkID", strNetworkID
                ////
                , "strMST", strMST
                });
            #endregion

            #region // Refine and check:
            string strOS_MasterServer_SkycicVeloca_GwUserCode = _cf.nvcParams["OS_MasterServer_SkycicVeloca_GwUserCode"];
            string strOS_MasterServer_SkycicVeloca_GwPassword = _cf.nvcParams["OS_MasterServer_SkycicVeloca_GwPassword"];
            string strOS_MasterServer_SkycicVeloca_API_Url = _cf.nvcParams["OS_MasterServer_SkycicVeloca_API_Url"];
            /////
            alParamsCoupleError.AddRange(new object[]{
                "Check.strOS_MasterServer_SkycicDMS_API_Url", strOS_MasterServer_SkycicVeloca_API_Url
                });
            #endregion

            #region // Call Func:
            RT_OS_MstSvVeloca_MstSv_Mst_Network objRT_OS_MstSvVeloca_MstSv_Mst_Network = null;
            {
                #region // WA_MstSv_Mst_Network_GetByMST:
                OS_MstSvVeloca_MstSv_Mst_Network objOS_MstSvVeloca_MstSv_Mst_Network = new OS_MstSvVeloca_MstSv_Mst_Network();
                objOS_MstSvVeloca_MstSv_Mst_Network.MST = strMST;
                /////
                RQ_OS_MstSvVeloca_MstSv_Mst_Network objRQ_OS_MstSvVeloca_MstSv_Mst_Network = new RQ_OS_MstSvVeloca_MstSv_Mst_Network()
                {
                    MstSv_Mst_Network = objOS_MstSvVeloca_MstSv_Mst_Network,
                    Tid = strTid,
                    TokenID = strOS_MasterServer_Solution_TokenID,
                    NetworkID = nNetworkID.ToString(),
                    OrgID = strOrgID,
                    AccessToken = strAccessToken,
                    GwUserCode = strOS_MasterServer_SkycicVeloca_GwUserCode,
                    GwPassword = strOS_MasterServer_SkycicVeloca_GwPassword,
                    WAUserCode = strOS_MasterServer_Solution_WAUserCode,
                    //WAUserPassword = strAccessToken
                };
                ////
                try
                {
                    objRT_OS_MstSvVeloca_MstSv_Mst_Network = OS_MstSvVeloca_MstSv_Mst_NetworkService.Instance.WA_OS_MstSvVeloca_MstSv_Mst_Network_GetByMST(objRQ_OS_MstSvVeloca_MstSv_Mst_Network, strOS_MasterServer_SkycicVeloca_API_Url);
                    ////
                }
                catch (Exception cex)
                {
                    string strErrorCodeOS = null;

                    TUtils.CProcessExc.BizShowException(
                        ref alParamsCoupleError // alParamsCoupleError
                        , cex // cex
                        , out strErrorCodeOS
                        );

                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.CmSys_InvalidOutSite + "." + "VELOCA" + "." + strErrorCodeOS
                        , null
                        , alParamsCoupleError.ToArray()
                        );
                }
                ////
                #endregion
            }
            #endregion

            #region // Get Remark:
            strUrl_OS_SkycicDMS_AllNetWork = objRT_OS_MstSvVeloca_MstSv_Mst_Network.c_K_DT_Sys.Lst_c_K_DT_SysInfo[0].Remark;
            //CmUtils.CMyDataSet.SetRemark(ref mdsFinal, strResult);
            #endregion
        }
        #endregion

        #region // OS_InvF_InventoryCusReturn:
        public void OSDMS_InvF_InventoryCusReturn_UpdQtyRtnOrder(
			string strTid
			, string strGwUserCode
			, string strGwPassword
			, string strWAUserCode
			//, string strWAUserPassword
			, string strNetworkID
			, string strOrgID
			, string strAccessToken
			, ref ArrayList alParamsCoupleError
			////
			, DateTime dtimeSys
			////
			, string strMST
			////
			, object objIF_InvReturnNo
			, object objInvReturnDate
			/////
			, DataSet dsData
			////
			)
		{
			#region // Temp:
			string strFunctionName = "OSDMS_InvF_InventoryCusReturn_UpdQtyRtnOrder";
			string strErrorCodeDefault = TError.ErridnInventory.OSDMS_InvF_InventoryCusReturn_UpdQtyRtnOrder;
			alParamsCoupleError.AddRange(new object[]{
				"strFunctionName", strFunctionName
				, "strErrorCodeDefault", strErrorCodeDefault
				, "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
				, "strWAUserCode", strWAUserCode
				//, "strWAUserPassword", strWAUserPassword
                , "strNetworkID", strNetworkID
                ////
                , "objIF_InvReturnNo", objIF_InvReturnNo
				, "objInvReturnDate", objInvReturnDate
                //, "strUrl_OS_TVAN_AllNetWork", strUrl_OS_TVAN_AllNetWork
                });
			#endregion

			#region // Convert Input:
			//DataSet dsData = TUtils.CUtils.StdDS(arrobjDSData);
			//if (dsData == null) dsData = new DataSet("dsData");
			//dsData.AcceptChanges();
			alParamsCoupleError.AddRange(new object[]{
				"Check.dsData", CmUtils.XmlUtils.DataSet2XmlSimple(dsData)
				});
			#endregion

			#region // Refine and check Input:
			string strIF_InvReturnNo = TUtils.CUtils.StdParam(objIF_InvReturnNo);
			string strInvReturnDate = TUtils.CUtils.StdDate(objInvReturnDate);
			#endregion

			#region // OS_MstSvDMS_MstSv_Mst_Network_GetByMST:
			string strUrl_OS_Inv_AllNetWork = "";
			{
				OS_MstSvDMS_MstSv_Mst_Network_GetByMST(
					strTid // strTid
					, strGwUserCode // strGwUserCode
					, strGwPassword // strGwPassword
					, strWAUserCode // strWAUserCode
									//, strWAUserPassword // strWAUserPassword
					, strNetworkID // strNetworkID
					, strOrgID // strOrgID
					, strAccessToken // strAccessToken
									 ////
					, ref alParamsCoupleError // alParamsCoupleError
					, dtimeSys // dtimeSys
					, strMST // strMST
					, out strUrl_OS_Inv_AllNetWork // strUrl_OS_SkycicDMS_AllNetWork
					);
				////
				if (string.IsNullOrEmpty(strUrl_OS_Inv_AllNetWork))
				{
					alParamsCoupleError.AddRange(new object[]{
						"Check.MST", strMST
						, "Check.strUrl_OS_Inv_AllNetWork", strUrl_OS_Inv_AllNetWork
						});
					throw CmUtils.CMyException.Raise(
						TError.ErridnInventory.OSDMS_InvF_InventoryCusReturn_UpdQtyRtnOrder_InvalidUrl_OS_Inv_AllNetWork
						, null
						, alParamsCoupleError.ToArray()
						);

				}

			}
			#endregion

			#region // Refine and Check Input:
			OSDMS_InvF_InventoryCusReturn objInvF_InventoryCusReturn = new OSDMS_InvF_InventoryCusReturn();
			//List<OSDMS_InvF_InventoryCusReturn> Lst_InvF_InventoryCusReturn = new List<OSDMS_InvF_InventoryCusReturn>();
			List<OSDMS_InvF_InventoryCusReturnDtl> Lst_InvF_InventoryCusReturnDtl = new List<OSDMS_InvF_InventoryCusReturnDtl>();
			////
			{
				////
				objInvF_InventoryCusReturn.IF_InvReturnNo = strIF_InvReturnNo;
				objInvF_InventoryCusReturn.InvReturnDate = strInvReturnDate;
				/////
				DataTable dtInput_InvF_InventoryCusReturnDtl = dsData.Tables["InvF_InventoryCusReturnDtl"];
				Lst_InvF_InventoryCusReturnDtl = TUtils.DataTableCmUtils.ToListof<OSDMS_InvF_InventoryCusReturnDtl>(dtInput_InvF_InventoryCusReturnDtl);
				////

			}
			#endregion

			#region // Call Func:
			RT_OSDMS_InvF_InventoryCusReturn objRT_OSDMS_InvF_InventoryCusReturn = null;
			{
				#region // WA_Ord_OrderDLMix_UpdQtyReturn:
				/////
				RQ_OSDMS_InvF_InventoryCusReturn objRQ_OSDMS_InvF_InventoryCusReturn = new RQ_OSDMS_InvF_InventoryCusReturn()
				{
					InvReturn_OrderMixDtl = objInvF_InventoryCusReturn,
					Lst_InvReturn_OrderMixDtl = Lst_InvF_InventoryCusReturnDtl,
					Tid = strTid,
					TokenID = strOS_MasterServer_Solution_TokenID,
					NetworkID = strNetworkID,
					OrgID = strOrgID,
					AccessToken = strAccessToken,
					GwUserCode = _cf.nvcParams["OS_MasterServer_SkycicDMS_GwUserCode"],
					GwPassword = _cf.nvcParams["OS_MasterServer_SkycicDMS_GwPassword"],
					WAUserCode = strWAUserCode,
					//WAUserPassword = strWAUserPassword
				};
				////
				//var jsonconverttest =  TJson.JsonConvert.SerializeObject(objRQ_OSDMS_InvF_InventoryCusReturn);
				var strOrderType = objRQ_OSDMS_InvF_InventoryCusReturn.Lst_InvReturn_OrderMixDtl[0].OrderMixType;
				string strOrderMixNoSys = string.Format("{0}", objRQ_OSDMS_InvF_InventoryCusReturn.Lst_InvReturn_OrderMixDtl[0].OrderMixNoSys).Trim();
				////
				if (string.IsNullOrEmpty(strOrderMixNoSys))
				{
					alParamsCoupleError.AddRange(new object[]{
							"Check.strOrderMixNoSys", strOrderMixNoSys
							});
					throw CmUtils.CMyException.Raise(
						TError.ErridnInventory.OSDMS_InvF_InventoryCusReturn_UpdQtyRtnOrder_InvalidOrderMixNoSys
						, null
						, alParamsCoupleError.ToArray()
						);
				}
				////
				try
				{

					
					////
					if (CmUtils.StringUtils.StringEqual(strOrderType, TConst.RefType.OrderDL))
					{

						objRT_OSDMS_InvF_InventoryCusReturn = OSDMS_InvF_InventoryCusReturnService.Instance.WA_Ord_OrderDLMix_UpdQtyReturn(strUrl_OS_Inv_AllNetWork, objRQ_OSDMS_InvF_InventoryCusReturn);
						////
					}
					////
					else if (CmUtils.StringUtils.StringEqual(strOrderType, TConst.RefType.OrderSO))
					{
						objRT_OSDMS_InvF_InventoryCusReturn = OSDMS_InvF_InventoryCusReturnService.Instance.WA_Ord_OrderSOMix_UpdQtyReturn(strUrl_OS_Inv_AllNetWork, objRQ_OSDMS_InvF_InventoryCusReturn);
						////
					}
					////
					else if (CmUtils.StringUtils.StringEqual(strOrderType, TConst.RefType.OrderSR))
					{
						objRT_OSDMS_InvF_InventoryCusReturn = OSDMS_InvF_InventoryCusReturnService.Instance.WA_Ord_OrderSRMix_UpdQtyReturn(strUrl_OS_Inv_AllNetWork, objRQ_OSDMS_InvF_InventoryCusReturn);
						////
					}
					////
					//else
					//{
					//	alParamsCoupleError.AddRange(new object[]{
					//		"Check.strOrderType", strOrderType
					//		});
					//	throw CmUtils.CMyException.Raise(
					//		TError.ErridnInventory.OSDMS_InvF_InventoryCusReturn_UpdQtyRtnOrder_InvalidOrderType
					//		, null
					//		, alParamsCoupleError.ToArray()
					//		);
					//}

				}
				catch (Exception cex)
				{
                    string strErrorCodeOS = null;

                    TUtils.CProcessExc.BizShowException(
						ref alParamsCoupleError // alParamsCoupleError
						, cex // cex
                        , out strErrorCodeOS
                        );

					throw CmUtils.CMyException.Raise(
						TError.ErridnInventory.CmSys_InvalidOutSite + "." + "DMSPLUS" + "." + strErrorCodeOS
                        , null
						, alParamsCoupleError.ToArray()
						);
				}
				////
				#endregion
			}
			#endregion
		}
		#endregion

		#region // OS_MstSv_Sys_User_GetAccessToken:
		public void OS_MstSv_Sys_User_GetAccessToken(
			string strTid
			, string strGwUserCode
			, string strGwPassword
			, string strWAUserCode
			, string strWAUserPassword
			, string strNetworkID
			, string strOrgID
			//, string strAccessToken
			, ref ArrayList alParamsCoupleError
			////
			, DateTime dtimeSys
			////
			//, string strMST
			, out string strAccessToken
			)
		{
			#region // Temp:
			string strFunctionName = "OS_MstSv_Sys_User_GetAccessToken";
			string strErrorCodeDefault = TError.ErridnInventory.OS_MstSv_Sys_User_GetAccessToken;
			alParamsCoupleError.AddRange(new object[]{
				"strFunctionName", strFunctionName
				, "strErrorCodeDefault", strErrorCodeDefault
				, "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
				, "strWAUserCode", strWAUserCode
				, "strWAUserPassword", strWAUserPassword
				, "strNetworkID", strNetworkID
                ////
                //, "strMST", strMST
				});
			#endregion

			#region // Refine and check:
			//string strOS_MasterServer_SkycicDMS_GwUserCode = _cf.nvcParams["OS_MasterServer_SkycicDMS_GwUserCode"];
			//string strOS_MasterServer_SkycicDMS_GwPassword = _cf.nvcParams["OS_MasterServer_SkycicDMS_GwPassword"];
			//string strOS_MasterServer_SkycicDMS_API_Url = _cf.nvcParams["OS_MasterServer_SkycicDMS_API_Url"];
			///////
			//alParamsCoupleError.AddRange(new object[]{
			//	"Check.strOS_MasterServer_SkycicDMS_API_Url", strOS_MasterServer_SkycicDMS_API_Url
			//	});
			#endregion

			#region // Call Func:
			RT_MstSv_Sys_User objRT_MstSv_Sys_User = null;
			{
				#region // WA_MstSv_Sys_User_Login:
				//MstSv_Sys_User objMstSv_Sys_User = new MstSv_Sys_User();
				//objMstSv_Sys_User.UserCode = strWAUserCode;
				//objMstSv_Sys_User.UserPassword = strWAUserPassword;
				/////
				RQ_MstSv_Sys_User objRQ_MstSv_Sys_User = new RQ_MstSv_Sys_User()
				{
					//OS_MstSv_Sys_User = objMstSv_Sys_User,
					Tid = strTid,
					TokenID = strOS_MasterServer_Solution_TokenID,
					NetworkID = strNetworkID,
					GwUserCode = strOS_MasterServer_Solution_GwUserCode,
					GwPassword = strOS_MasterServer_Solution_GwPassword,
					WAUserCode = strWAUserCode,
					WAUserPassword = strWAUserPassword
				};
				////
				try
				{
					objRT_MstSv_Sys_User = OS_MstSvTVAN_MstSvSysUserService.Instance.WA_OS_MstSv_Sys_User_GetAccessToken(objRQ_MstSv_Sys_User);

					//strAccessToken = objRT_MstSv_Sys_User.c_K_DT_Sys.Lst_c_K_DT_SysInfo[0].Remark;
					////
				}
				catch (Exception cex)
				{
					TUtils.CProcessExc.BizShowException(
						ref alParamsCoupleError // alParamsCoupleError
						, cex // cex
						);

					throw CmUtils.CMyException.Raise(
						TError.ErridnInventory.CmSys_InvalidOutSite
						, null
						, alParamsCoupleError.ToArray()
						);
				}
				////
				#endregion
			}
			#endregion

			#region // Get Remark:
			strAccessToken = objRT_MstSv_Sys_User.c_K_DT_Sys.Lst_c_K_DT_SysInfo[0].Remark;
			//CmUtils.CMyDataSet.SetRemark(ref mdsFinal, strResult);
			#endregion
		}
        #endregion

        #region // OSDMS_Mst_PrintOrder_Update:
        public void OSDMS_Mst_PrintOrder_Update(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            //, string strWAUserPassword
            , string strNetworkID
            , string strOrgID
            , string strAccessToken
            , ref ArrayList alParamsCoupleError
            ////
            , DateTime dtimeSys
            ///
            , object objOrderNo
            , object objQtyIn
            )
        {
            #region // Temp:
            string strFunctionName = "OSDMS_Mst_PrintOrder_Update";
            string strErrorCodeDefault = TError.ErridnInventory.OSDMS_Mst_PrintOrder_Update;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "strErrorCodeDefault", strErrorCodeDefault
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
                , "objOrderNo", objOrderNo
                , "objQtyIn", objQtyIn
                //, "strUrl_OS_TVAN_AllNetWork", strUrl_OS_TVAN_AllNetWork
                });
            #endregion
            
            #region // Refine and check Input:
            string strOrderNo = TUtils.CUtils.StdParam(objOrderNo);
            Int64 nQtyIn = Convert.ToInt64(objQtyIn);
            string strLQDMSNetWorkUrl = string.Format("{0}", htCacheMstParam[TConst.Mst_Param.OS_LQDMS_API_URL]);// _cf.nvcParams["OS_LQDMS_API_Url"];
            #endregion

            #region // OS_MstSvDMS_MstSv_Mst_Network_GetByMST:
            //string strUrl_OS_Inv_AllNetWork = "";
            //{
            //    OS_MstSvDMS_MstSv_Mst_Network_GetByMST(
            //        strTid // strTid
            //        , strGwUserCode // strGwUserCode
            //        , strGwPassword // strGwPassword
            //        , strWAUserCode // strWAUserCode
            //                        //, strWAUserPassword // strWAUserPassword
            //        , strNetworkID // strNetworkID
            //        , strOrgID // strOrgID
            //        , strAccessToken // strAccessToken
            //                         ////
            //        , ref alParamsCoupleError // alParamsCoupleError
            //        , dtimeSys // dtimeSys
            //        , strMST // strMST
            //        , out strUrl_OS_Inv_AllNetWork // strUrl_OS_SkycicDMS_AllNetWork
            //        );
            //    ////
            //    if (string.IsNullOrEmpty(strUrl_OS_Inv_AllNetWork))
            //    {
            //        alParamsCoupleError.AddRange(new object[]{
            //            "Check.MST", strMST
            //            , "Check.strUrl_OS_Inv_AllNetWork", strUrl_OS_Inv_AllNetWork
            //            });
            //        throw CmUtils.CMyException.Raise(
            //            TError.ErridnInventory.OSDMS_InvF_InventoryOut_UpdQtyOrder_InvalidUrl_OS_Inv_AllNetWork
            //            , null
            //            , alParamsCoupleError.ToArray()
            //            );

            //    }

            //}
            #endregion

            #region // WA_OS_Inv_Seq_Common_Get:
            //strIF_InvInNo = "";
            //{
            //	WA_OS_Inv_Seq_Common_Get(
            //		strTid // strTid
            //		, strGwUserCode // strGwUserCode
            //		, strGwPassword // strGwPassword
            //		, strWAUserCode // strWAUserCode
            //		, strWAUserPassword // strWAUserPassword
            //		, strNetworkID // strNetworkID
            //					   ////
            //		, ref alParamsCoupleError // alParamsCoupleError
            //		, dtimeSys // dtimeSys
            //		, strUrl_OS_Inv_AllNetWork // strUrl_OS_Inv_AllNetWork
            //								   ////
            //		, TConst.SeqType.IFInvInNo // strSequenceType
            //		, "" // strParam_Prefix
            //		, "" // strParam_Postfix
            //		, out strIF_InvInNo // strResult
            //		);
            //	////
            //	if (string.IsNullOrEmpty(strIF_InvInNo))
            //	{
            //		alParamsCoupleError.AddRange(new object[]{
            //			"Check.MST", strMST
            //			, "Check.MST", strOrgID_Login
            //			, "Check.strIF_InvInNo", strIF_InvInNo
            //			});
            //		throw CmUtils.CMyException.Raise(
            //			TError.ErridnInventory.OSDMS_InvF_InventoryOut_UpdQtyOrder_InvalidIF_InvInNo
            //			, null
            //			, alParamsCoupleError.ToArray()
            //			);

            //	}

            //}
            #endregion

            #region // Call Func WA_Mst_PrintOrder_Update:
            {
                RT_Mst_PrintOrder objRT_Mst_PrintOrder = null;
                {
                    #region // Refine And Check:
                    Mst_PrintOrder objMst_PrintOrder = new Mst_PrintOrder();
                    {
                        objMst_PrintOrder.PrintOrdNo = strOrderNo;
                        objMst_PrintOrder.FinishedPrdQty = nQtyIn;
                        objMst_PrintOrder.Remark = null;
                        objMst_PrintOrder.FlagActive = TConst.Flag.Active;
                        objMst_PrintOrder.Json = "";
                        objMst_PrintOrder.OrgIDUpd = strOrgID;
                    }
                    #endregion

                    #region // WA_Mst_PrintOrder_Update:
                    /////
                    RQ_Mst_PrintOrder objRQ_Mst_PrintOrder = new RQ_Mst_PrintOrder()
                    {
                        //FlagIsDelete = TConst.Flag.No,
                        Mst_PrintOrder = objMst_PrintOrder,
                        Tid = strTid,
                        //TokenID = strOS_MasterServer_Solution_TokenID,
                        //NetworkID = strNetworkID,
                        //OrgID = strOrgID,
                        GwUserCode = string.Format("{0}", htCacheMstParam[TConst.Mst_Param.OS_LQDMS_GWUSERCODE]), //_cf.nvcParams["OS_LQDMS_GwUserCode"],
                        GwPassword = string.Format("{0}", htCacheMstParam[TConst.Mst_Param.OS_LQDMS_GWPASSWORD]), //_cf.nvcParams["OS_LQDMS_GwPassword"],
                        WAUserCode = string.Format("{0}", htCacheMstParam[TConst.Mst_Param.OS_LQDMS_BG_WAUSERCODE]), //_cf.nvcParams["OS_LQDMS_BG_WAUserCode"],
                        WAUserPassword = string.Format("{0}", htCacheMstParam[TConst.Mst_Param.OS_LQDMS_BG_WAUSERPASSWORD]), //_cf.nvcParams["OS_LQDMS_BG_WAUserPassword"],
                        AccessToken = null,

                        //Ft_RecordStart = "0",
                        //Ft_RecordCount = "123456",
                        //Ft_WhereClause = CmUtils.StringUtils.Replace("Mst_PrintOrder.PrintOrdNo = '@strPrintOrdNo' and Mst_PrintOrder.FlagActive = '1'", "@strPrintOrdNo", strPrintOrdNo)
                        Ft_Cols_Upd = "Mst_PrintOrder.FinishedPrdQty"
                    };
                    ////
                    try
                    {
                        string strJSon = TJson.JsonConvert.SerializeObject(objRQ_Mst_PrintOrder);
                        objRT_Mst_PrintOrder = OSDMS_Mst_PrintOrderService.Instance.WA_Mst_PrintOrder_Update(strLQDMSNetWorkUrl, objRQ_Mst_PrintOrder);
                        ////
                    }
                    catch (Exception cex)
                    {
                        string strErrorCodeOS = null;

                        TUtils.CProcessExc.BizShowException(
                            ref alParamsCoupleError // alParamsCoupleError
                            , cex // cex
                            , out strErrorCodeOS
                            );

                        throw CmUtils.CMyException.Raise(
                            TError.ErridnInventory.CmSys_InvalidOutSite + "." + "LQDMS" + "." + strErrorCodeOS
                            , null
                            , alParamsCoupleError.ToArray()
                            );
                    }
                    ////
                    #endregion
                }

            }

            #endregion
        }
        #endregion

        #region // OSLQDMS_Ord_OrderPD_Upddate:
        public void OSLQDMS_Ord_OrderPD_Update(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            //, string strWAUserPassword
            , string strNetworkID
            , string strOrgID
            , string strAccessToken
            , ref ArrayList alParamsCoupleError
            ////
            , DateTime dtimeSys
            ///
            , object objOrderPDNoSys
            , List<OS_Ord_OrderPDDtl> lst_Ord_OrderPDDtl
            //, object objQtyIn
            )
        {
            #region // Temp:
            string strFunctionName = "OSLQDMS_Ord_OrderPD_Update";
            string strErrorCodeDefault = TError.ErridnInventory.OSLQDMS_Ord_OrderPD_Update;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "strErrorCodeDefault", strErrorCodeDefault
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
                , "objOrderPDNoSys", objOrderPDNoSys
                , "lst_Ord_OrderPDDtl", lst_Ord_OrderPDDtl
                //, "objQtyIn", objQtyIn
                //, "strUrl_OS_TVAN_AllNetWork", strUrl_OS_TVAN_AllNetWork
                });
            #endregion

            #region // Refine and check Input:
            string strOrderPDNoSys = TUtils.CUtils.StdParam(objOrderPDNoSys);
            //Int64 nQtyIn = Convert.ToInt64(objQtyIn);
            string strLQDMSNetWorkUrl = string.Format("{0}", htCacheMstParam[TConst.Mst_Param.OS_LQDMS_API_URL]);// _cf.nvcParams["OS_LQDMS_API_Url"];
            #endregion

            #region // OS_MstSvDMS_MstSv_Mst_Network_GetByMST:
            //string strUrl_OS_Inv_AllNetWork = "";
            //{
            //    OS_MstSvDMS_MstSv_Mst_Network_GetByMST(
            //        strTid // strTid
            //        , strGwUserCode // strGwUserCode
            //        , strGwPassword // strGwPassword
            //        , strWAUserCode // strWAUserCode
            //                        //, strWAUserPassword // strWAUserPassword
            //        , strNetworkID // strNetworkID
            //        , strOrgID // strOrgID
            //        , strAccessToken // strAccessToken
            //                         ////
            //        , ref alParamsCoupleError // alParamsCoupleError
            //        , dtimeSys // dtimeSys
            //        , strMST // strMST
            //        , out strUrl_OS_Inv_AllNetWork // strUrl_OS_SkycicDMS_AllNetWork
            //        );
            //    ////
            //    if (string.IsNullOrEmpty(strUrl_OS_Inv_AllNetWork))
            //    {
            //        alParamsCoupleError.AddRange(new object[]{
            //            "Check.MST", strMST
            //            , "Check.strUrl_OS_Inv_AllNetWork", strUrl_OS_Inv_AllNetWork
            //            });
            //        throw CmUtils.CMyException.Raise(
            //            TError.ErridnInventory.OSDMS_InvF_InventoryOut_UpdQtyOrder_InvalidUrl_OS_Inv_AllNetWork
            //            , null
            //            , alParamsCoupleError.ToArray()
            //            );

            //    }

            //}
            #endregion

            #region // WA_OS_Inv_Seq_Common_Get:
            //strIF_InvInNo = "";
            //{
            //	WA_OS_Inv_Seq_Common_Get(
            //		strTid // strTid
            //		, strGwUserCode // strGwUserCode
            //		, strGwPassword // strGwPassword
            //		, strWAUserCode // strWAUserCode
            //		, strWAUserPassword // strWAUserPassword
            //		, strNetworkID // strNetworkID
            //					   ////
            //		, ref alParamsCoupleError // alParamsCoupleError
            //		, dtimeSys // dtimeSys
            //		, strUrl_OS_Inv_AllNetWork // strUrl_OS_Inv_AllNetWork
            //								   ////
            //		, TConst.SeqType.IFInvInNo // strSequenceType
            //		, "" // strParam_Prefix
            //		, "" // strParam_Postfix
            //		, out strIF_InvInNo // strResult
            //		);
            //	////
            //	if (string.IsNullOrEmpty(strIF_InvInNo))
            //	{
            //		alParamsCoupleError.AddRange(new object[]{
            //			"Check.MST", strMST
            //			, "Check.MST", strOrgID_Login
            //			, "Check.strIF_InvInNo", strIF_InvInNo
            //			});
            //		throw CmUtils.CMyException.Raise(
            //			TError.ErridnInventory.OSDMS_InvF_InventoryOut_UpdQtyOrder_InvalidIF_InvInNo
            //			, null
            //			, alParamsCoupleError.ToArray()
            //			);

            //	}

            //}
            #endregion

            #region // Call Func WA_Ord_OrderPD_UpdPGInvIn:
            {
                RT_OS_Ord_OrderPD objRT_OS_Ord_OrderPD = null;
                {
                    #region // Refine And Check:
                    OS_Ord_OrderPD objOS_Ord_OrderPD = new OS_Ord_OrderPD();
                    {
                        objOS_Ord_OrderPD.OrderPDNoSys = strOrderPDNoSys;
                    }
                    
                    #endregion

                    #region // WA_Mst_PrintOrder_Update:
                    /////
                    RQ_OS_Ord_OrderPD objRQ_OS_Ord_OrderPD = new RQ_OS_Ord_OrderPD()
                    {
                        //FlagIsDelete = TConst.Flag.No,
                        Ord_OrderPD = objOS_Ord_OrderPD,
                        Lst_Ord_OrderPDDtl = lst_Ord_OrderPDDtl,
                        Tid = strTid,
                        //TokenID = strOS_MasterServer_Solution_TokenID,
                        NetworkID = strNetworkID,
                        OrgID = strOrgID,
                        GwUserCode = string.Format("{0}", htCacheMstParam[TConst.Mst_Param.OS_LQDMS_GWUSERCODE]), //_cf.nvcParams["OS_LQDMS_GwUserCode"],
                        GwPassword = string.Format("{0}", htCacheMstParam[TConst.Mst_Param.OS_LQDMS_GWPASSWORD]), //_cf.nvcParams["OS_LQDMS_GwPassword"],
                        WAUserCode = string.Format("{0}", htCacheMstParam[TConst.Mst_Param.OS_LQDMS_BG_WAUSERCODE]), //_cf.nvcParams["OS_LQDMS_BG_WAUserCode"],
                        WAUserPassword = string.Format("{0}", htCacheMstParam[TConst.Mst_Param.OS_LQDMS_BG_WAUSERPASSWORD]), //_cf.nvcParams["OS_LQDMS_BG_WAUserPassword"],
                        AccessToken = null,

                        //Ft_RecordStart = "0",
                        //Ft_RecordCount = "123456",
                        //Ft_WhereClause = CmUtils.StringUtils.Replace("Mst_PrintOrder.PrintOrdNo = '@strPrintOrdNo' and Mst_PrintOrder.FlagActive = '1'", "@strPrintOrdNo", strPrintOrdNo)
                        Ft_Cols_Upd = "Ord_OrderPDDtl.PGInvInQty"
                    };
                    ////
                    try
                    {
                        string json = TJson.JsonConvert.SerializeObject(objRQ_OS_Ord_OrderPD);
                        objRT_OS_Ord_OrderPD = OSLQDMS_Ord_OrderPDService.Instance.WA_OS_Ord_OrderPD_Update(strLQDMSNetWorkUrl, objRQ_OS_Ord_OrderPD);
                        ////
                    }
                    catch (Exception cex)
                    {
                        string strErrorCodeOS = null;

                        TUtils.CProcessExc.BizShowException(
                            ref alParamsCoupleError // alParamsCoupleError
                            , cex // cex
                            , out strErrorCodeOS
                            );

                        throw CmUtils.CMyException.Raise(
                            TError.ErridnInventory.CmSys_InvalidOutSite + "." + "LQDMS" + "." + strErrorCodeOS
                            , null
                            , alParamsCoupleError.ToArray()
                            );
                    }
                    ////
                    #endregion
                }

            }

            #endregion
        }
        #endregion
    }
}

