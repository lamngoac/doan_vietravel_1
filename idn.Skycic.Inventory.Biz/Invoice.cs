using idn.Skycic.Inventory.BizService.Services;
using idn.Skycic.Inventory.Common.Models;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Diagnostics;
using System.Linq;
//using System.Xml.Linq;

using CmUtils = CommonUtils;
using TConst = idn.Skycic.Inventory.Constants;
using TDALUtils = EzDAL.Utils;
using TError = idn.Skycic.Inventory.Errors;
using TJson = Newtonsoft.Json;
using TUtils = idn.Skycic.Inventory.Utils;

namespace idn.Skycic.Inventory.Biz
{
    public partial class BizidNInventory
    {
        #region // Common:
        private void myCache_ViewAbility_CheckAccessMSTWrite(
            ref ArrayList alParamsCoupleError
            , string strWAUserCode
            , string strMST
            )
        {
            /////
            // drAbilityOfUser:
            DataRow drAbilityOfUser = Sys_User_GetAbilityViewOfUser(strWAUserCode);

            if (!CmUtils.StringUtils.StringEqualIgnoreCase(drAbilityOfUser["MST"], strMST)
                && !CmUtils.StringUtils.StringEqualIgnoreCase(drAbilityOfUser["FlagBG"], TConst.Flag.Active))
            {
                alParamsCoupleError.AddRange(new object[]{
                    "Check.strWAUserCode", strWAUserCode
                    , "Check.DB.MST", drAbilityOfUser["MST"]
                    , "Check.strMST", strMST
                    });
                throw CmUtils.CMyException.Raise(
                    TError.ErridnInventory.myCache_ViewAbility_CheckAccessMSTWrite
                    , null
                    , alParamsCoupleError.ToArray()
                    );

            }
        }
        #endregion

        #region // Invoice_TempInvoice:
        //Mẫu số hoá đơn: chương trình tự động hiển thị và không cho phép sửa(ví dụ: 01GTKT3/001). Việc hiển thị thông tin mẫu hoá đơn được thực hiện theo nguyên tắc sau:		
        // 6 kí tự đầu tiên lấy theo loại hoá đơn(01GTKT).	
        // 1 kí tự tiếp theo hiển thị số liên của hoá đơn(0)
        // 1 kí tự tiếp theo là "/", dùng để phân biệt giữa Số liên với Số thứ tự mẫu hoá đơn.
        // 3 kí tự tiếp theo là Số thứ tự mẫu hoá đơn.
        //Lưu ý: Riêng với loại hoá đơn 01/ hoặc 02/ - Tem, vé, thẻ, có thể tự nhập thông tinMẫu số hoá đơn, tuy nhiên không được vượt quá 11 kí tự.		
        public void GetFormNo(
            ref ArrayList alParamsCoupleError
            , string strInvoiceType
            , string strMST
            , ref string strFormNo
            )
        {
            ////
            string strSqlExec = CmUtils.StringUtils.Replace(@"						
                    ---- #tbl_Invoice_FormNoSequence_Insert:
					select 
						'@strMST' MST -- MST
						, f.InvoiceType -- InvoiceType
						, '@strNetworkID' NetworkID
						, f.LogLUDTimeUTC -- LogLUDTimeUTC
						, f.LogLUBy -- LogLUBy
					into #tbl_Invoice_FormNoSequence_Insert
					from Mst_InvoiceType f --//[mylock]
					where(1=1)
						and f.InvoiceType = '@strInvoiceType'
						--and f.MST = '@strMST'
					;

					------
					Insert into Invoice_FormNoSequence(
						MST
						, InvoiceType
						, NetworkID
						, LastNumber
						, LogLUDTimeUTC
						, LogLUBy
					)
					select 
						t.MST -- MST
						, t.InvoiceType -- InvoiceType
						, t.NetworkID -- NetworkID
						, 0.0 -- LastNumber
						, t.LogLUDTimeUTC -- LogLUDTimeUTC
						, t.LogLUBy -- LogLUBy
					from #tbl_Invoice_FormNoSequence_Insert t --//[mylock]
						left join Invoice_FormNoSequence f --//[mylock]
							on t.InvoiceType = f.InvoiceType
								and t.MST = f.MST
					where(1=1)
						and f.InvoiceType is null
						and f.MST is null
					;
					-----

					DECLARE @SearchWord varchar(100)
                    DECLARE @tmpFormNo varchar(100)
                    DECLARE @ResetNumber int

                    SET @SearchWord =( select '@strInvoiceType'
		                    )
                    select FormNo
                    into #tbl_Invoice_TempInvoice
                    from Invoice_TempInvoice t with(nolock)
                    where (1=1) 
	                    and t.InvoiceType = '@strInvoiceType'
	                    and t.MST = '@strMST'
	                    and t.FormNo like @SearchWord +'%'
                    IF ((Select Count(*) from #tbl_Invoice_TempInvoice)=0)
                    BEGIN
                    SET @ResetNumber=1
                    END
                    ELSE
                    BEGIN
                    SET @tmpFormNo=(Select FormNo
		                    From #tbl_Invoice_TempInvoice t with(nolock)
		                    Where t.FormNo =(Select Max(FormNo) from #tbl_Invoice_TempInvoice ))

                    SET @ResetNumber=RIGHT(@tmpFormNo,3)+1	
                    END
                    --Select @ResetNumber	    
                    update t 
                    set t.LastNumber=@ResetNumber
                    from Invoice_FormNoSequence t with(nolock)
                    where (1=1)
	                    and t.InvoiceType = '@strInvoiceType'
	                    and t.MST = '@strMST'

                    --Lấy ra PurReqNo
                    select ('@strInvoiceType' + '0/'
	                    + dbo.AddString(cast( LastNumber as char(3)), 1, '0', 3 - len(cast( LastNumber as char(3))))) FormNo
                    from Invoice_FormNoSequence t with(nolock)
                    where (1=1)
	                    and t.InvoiceType = '@strInvoiceType'
	                    and t.MST = '@strMST'
				;
				
				"
                , "@strInvoiceType", strInvoiceType
                , "@strNetworkID", nNetworkID
                , "@strMST", strMST);
            ////
            DataTable dtDB_Mst_InvoiceType = _cf.db.ExecQuery(
                strSqlExec
                ).Tables[0];
            if (dtDB_Mst_InvoiceType.Rows.Count > 0)
            {
                strFormNo = dtDB_Mst_InvoiceType.Rows[0]["FormNo"].ToString().Trim();
            }
        }
        private void myCheck_Invoice_TempInvoice_InvoiceNo(
            ref ArrayList alParamsCoupleError
            , DateTime dtimeSys
            ////
            , string strTInvoiceCode
            )
        {
            string strSqlcheckData = CmUtils.StringUtils.Replace(@"
                    ---- #tbl_Invoice_TempInvoice_Temp:
                    select 
 	                    t.TInvoiceCode
 	                    , t.StartInvoiceNo
 	                    , t.EndInvoiceNo
 	                    , t.QtyUsed
 	                    , t.LastInvoiceNo
 	                    , t.LastInvoiceDateUTC
 	                    , (t.StartInvoiceNo + t.QtyUsed - 1) CurrentInvoiceNo
                    into #tbl_Invoice_TempInvoice_Temp
                    from Invoice_TempInvoice t --//[mylock]
                    where (1=1)
 	                    and t.TInvoiceCode = '@strTInvoiceCode'
                    ;
        
                    ---- Return: 
                    select 
                        t.*
                    from #tbl_Invoice_TempInvoice_Temp t --//[mylock]
                    where (1=1)
                        and (t.CurrentInvoiceNo < t.StartInvoiceNo)
                        or (t.CurrentInvoiceNo > t.EndInvoiceNo)
                    ;
                    
                    ---- Clear for Debug:
                    drop table #tbl_Invoice_TempInvoice_Temp;
                "
                , "@strTInvoiceCode", strTInvoiceCode
                );
            //
            DataTable dtCheck = _cf.db.ExecQuery(strSqlcheckData).Tables[0];
            if (dtCheck.Rows.Count > 0)
            {
                alParamsCoupleError.AddRange(new object[]{
                    "Check.TInvoiceCode", dtCheck.Rows[0]["TInvoiceCode"].ToString()
                    , "Check.StartInvoiceNo", dtCheck.Rows[0]["StartInvoiceNo"].ToString()
                    , "Check.EndInvoiceNo", dtCheck.Rows[0]["EndInvoiceNo"].ToString()
                    , "Check.CurrentInvoiceNo", dtCheck.Rows[0]["CurrentInvoiceNo"].ToString()
                    , "Check.ConditionRaiseError", "and (t.CurrentInvoiceNo < t.StartInvoiceNo) or (t.CurrentInvoiceNo > t.EndInvoiceNo) "
                    });
                throw CmUtils.CMyException.Raise(
                    TError.ErridnInventory.myCheck_Invoice_TempInvoice_Invoice_InvalidValue
                    , null
                    , alParamsCoupleError.ToArray()
                    );
            }
        }
        private void Invoice_TempInvoice_CheckDB(
            ref ArrayList alParamsCoupleError
            , object objTInvoiceCode
            , string strFlagExistToCheck
            , string strTInvoiceStatusListToCheck
            , string strFlagActiveListToCheck
            , out DataTable dtDB_Invoice_TempInvoice
            )
        {
            // GetInfo:
            string strSqlExec = CmUtils.StringUtils.Replace(@"
					select top 1
						t.*
					from Invoice_TempInvoice t --//[mylock]
					where (1=1)
						and t.TInvoiceCode = @objTInvoiceCode
					;
				");
            dtDB_Invoice_TempInvoice = _cf.db.ExecQuery(
                strSqlExec
                , "@objTInvoiceCode", objTInvoiceCode
                ).Tables[0];
            dtDB_Invoice_TempInvoice.TableName = "Invoice_TempInvoice";

            // strFlagExistToCheck:
            if (strFlagExistToCheck.Length > 0)
            {
                if (CmUtils.StringUtils.StringEqual(strFlagExistToCheck, TConst.Flag.Active) && dtDB_Invoice_TempInvoice.Rows.Count < 1)
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.TInvoiceCode", objTInvoiceCode
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Invoice_TempInvoice_CheckDB_TempInvoiceNotFound
                        , null
                        , alParamsCoupleError.ToArray()
                        );
                }
                if (CmUtils.StringUtils.StringEqual(strFlagExistToCheck, TConst.Flag.Inactive) && dtDB_Invoice_TempInvoice.Rows.Count > 0)
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.TInvoiceCode", objTInvoiceCode
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Invoice_TempInvoice_CheckDB_TempInvoiceExist
                        , null
                        , alParamsCoupleError.ToArray()
                        );
                }
            }

            // strTInvoiceStatusListToCheck:
            if (strTInvoiceStatusListToCheck.Length > 0 && !strTInvoiceStatusListToCheck.Contains(Convert.ToString(dtDB_Invoice_TempInvoice.Rows[0]["TInvoiceStatus"])))
            {
                alParamsCoupleError.AddRange(new object[]{
                    "Check.TInvoiceCode", objTInvoiceCode
                    , "Check.strTInvoiceStatusListToCheck", strTInvoiceStatusListToCheck
                    , "DB.TInvoiceStatus", dtDB_Invoice_TempInvoice.Rows[0]["TInvoiceStatus"]
                    });
                throw CmUtils.CMyException.Raise(
                    TError.ErridnInventory.Invoice_TempInvoice_CheckDB_StatusNotMatched
                    , null
                    , alParamsCoupleError.ToArray()
                    );
            }

            // strFlagActiveListToCheck:
            if (strFlagActiveListToCheck.Length > 0 && !strFlagActiveListToCheck.Contains(Convert.ToString(dtDB_Invoice_TempInvoice.Rows[0]["FlagActive"])))
            {
                alParamsCoupleError.AddRange(new object[]{
                    "Check.TInvoiceCode", objTInvoiceCode
                    , "Check.strFlagActiveListToCheck", strFlagActiveListToCheck
                    , "DB.FlagActive", dtDB_Invoice_TempInvoice.Rows[0]["FlagActive"]
                    });
                throw CmUtils.CMyException.Raise(
                    TError.ErridnInventory.Invoice_TempInvoice_CheckDB_FlagActiveNotMatched
                    , null
                    , alParamsCoupleError.ToArray()
                    );
            }
        }

        private void Invoice_TempInvoice_CheckFormNo(
            ref ArrayList alParamsCoupleError
            , object objMST
            , object objFormNo
            , object objTInvoiceCode
            )
        {
            // GetInfo:
            string strSqlExec = CmUtils.StringUtils.Replace(@"
					select top 1
						t.*
					from Invoice_TempInvoice t --//[mylock]
					where (1=1)
						and t.FormNo = @objFormNo
						and t.MST = @objMST
						and t.TInvoiceCode != @objTInvoiceCode
					;
				");
            DataTable dtDB_Invoice_TempInvoice = _cf.db.ExecQuery(
                strSqlExec
                , "@objFormNo", objFormNo
                , "@objMST", objMST
                , "@objTInvoiceCode", objTInvoiceCode
                ).Tables[0];

            // 
            if (dtDB_Invoice_TempInvoice.Rows.Count > 0)
            {
                alParamsCoupleError.AddRange(new object[]{
                    "Check.objFormNo", objFormNo
                    , "Check.DB.TInvoiceCode", dtDB_Invoice_TempInvoice.Rows[0]["TInvoiceCode"]
                    });
                throw CmUtils.CMyException.Raise(
                    TError.ErridnInventory.Invoice_TempInvoice_CheckFormNo_ExistFormNo
                    , null
                    , alParamsCoupleError.ToArray()
                    );
            }
        }
        private void Invoice_license_TotalQtyIssued(
            ref ArrayList alParamsCoupleError
            , object objMST
            , DateTime dtimeSys
            , object objUserCode
            )
        {
            // GetInfo:
            string strSqlExec = CmUtils.StringUtils.Replace(@"
					--- #tbl_Mst_NNT_Filter:
                    select distinct
	                    t.MST
                    into #tbl_Mst_NNT_Filter
                    from Mst_NNT t --//[mylock]
                    where(1=1)
	                    and t.MST = @objMST
                    ;

                    ---- #tbl_Invoice_TempInvoice_TotalIssued:
                    select 
	                    t.MST
	                    , Sum(t.EndInvoiceNo - t.StartInvoiceNo + 1) TotalIssued
                    into #tbl_Invoice_TempInvoice_TotalIssued
                    from Invoice_TempInvoice t --//[mylock]
	                    inner join #tbl_Mst_NNT_Filter f --//[mylock]
		                    on t.MST = f.MST
                    where(1=1)
						and t.TInvoiceStatus = 'ISSUED'
                    group by 
	                    t.MST
                    ;

                    ---- update:
                    Update t 
                    set
	                    t.TotalQtyIssued = f.TotalIssued
	                    , t.LogLUDTimeUTC = @objLogLUDTimeUTC
	                    , t.LogLUBy = @LogLUBy
                    from Invoice_license t --//[mylock]
	                    inner join #tbl_Invoice_TempInvoice_TotalIssued f --//[mylock]
		                    on t.MST = f.MST
                    where(1=1)
                    ;

                    --- Check:
                    select 
	                    t.MST
	                    , t.TotalQty
	                    , t.TotalQtyIssued
	                    , t.TotalQtyUsed
                    from Invoice_license t --//[mylock]
	                    inner join #tbl_Mst_NNT_Filter f --//[mylock]
		                    on t.MST = f.MST
                    where(1=1)
	                    and ((t.TotalQty < t.TotalQtyIssued) or (t.TotalQtyUsed > t.TotalQtyIssued))
                    ;
				");
            DataTable dtDB_Invoice_license = _cf.db.ExecQuery(
                strSqlExec
                , "@objMST", objMST
                , "@objLogLUDTimeUTC", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
                , "@LogLUBy", objUserCode
                ).Tables[0];

            // 
            if (dtDB_Invoice_license.Rows.Count > 0)
            {
                alParamsCoupleError.AddRange(new object[]{
                    "Check.objMST", objMST
                    , "Check.DB.TotalQty", dtDB_Invoice_license.Rows[0]["TotalQty"]
                    , "Check.DB.TotalQtyIssued", dtDB_Invoice_license.Rows[0]["TotalQtyIssued"]
                    , "Check.DB.TotalQtyUsed", dtDB_Invoice_license.Rows[0]["TotalQtyUsed"]
                    , "Check.ConditionRaiseError", " (t.TotalQty < t.TotalQtyIssued) or (t.TotalQtyUsed > t.TotalQtyIssued))"
                    });
                throw CmUtils.CMyException.Raise(
                    TError.ErridnInventory.Invoice_license_TotalQtyIssued_InvalidValue
                    , null
                    , alParamsCoupleError.ToArray()
                    );
            }
        }
        private void Invoice_license_TotalQtyUsed(
            ref ArrayList alParamsCoupleError
            , object objMST
            , DateTime dtimeSys
            , object objUserCode
            )
        {
            // GetInfo:
            string strSqlExec = CmUtils.StringUtils.Replace(@"
					--- #tbl_Mst_NNT_Filter:
                    select distinct
	                    t.MST
                    into #tbl_Mst_NNT_Filter
                    from Mst_NNT t --//[mylock]
                    where(1=1)
	                   and t.MST = @objMST
                    ;

                    ---- #tbl_Invoice_TempInvoice_TotalQtyUsed:
                    select 
	                    t.MST
	                    , Sum(t.QtyUsed) TotalQtyUsed
                    into #tbl_Invoice_TempInvoice_TotalQtyUsed
                    from Invoice_TempInvoice t --//[mylock]
	                    inner join #tbl_Mst_NNT_Filter f --//[mylock]
		                    on t.MST = f.MST
                    where(1=1)
                    group by 
	                    t.MST
                    ;

                    ---- update:
                    Update t 
                    set
	                    t.TotalQtyUsed = f.TotalQtyUsed
	                    , t.LogLUDTimeUTC = @objLogLUDTimeUTC
	                    , t.LogLUBy = @LogLUBy
                    from Invoice_license t --//[mylock]
	                    inner join #tbl_Invoice_TempInvoice_TotalQtyUsed f --//[mylock]
		                    on t.MST = f.MST
                    where(1=1)
                    ;

                    --- Check:
                    select 
	                    t.MST
	                    , t.TotalQty
	                    , t.TotalQtyIssued
	                    , t.TotalQtyUsed
                    from Invoice_license t --//[mylock]
	                    inner join #tbl_Mst_NNT_Filter f --//[mylock]
		                    on t.MST = f.MST
                    where(1=1)
	                    and ((t.TotalQty < t.TotalQtyIssued) or (t.TotalQtyUsed > t.TotalQtyIssued))
                    ;
				");
            DataTable dtDB_Invoice_license = _cf.db.ExecQuery(
                strSqlExec
                , "@objMST", objMST
                , "@objLogLUDTimeUTC", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
                , "@LogLUBy", objUserCode
                ).Tables[0];

            // 
            if (dtDB_Invoice_license.Rows.Count > 0)
            {
                alParamsCoupleError.AddRange(new object[]{
                    "Check.objMST", objMST
                    , "Check.DB.TotalQty", dtDB_Invoice_license.Rows[0]["TotalQty"]
                    , "Check.DB.TotalQtyIssued", dtDB_Invoice_license.Rows[0]["TotalQtyIssued"]
                    , "Check.DB.TotalQtyUsed", dtDB_Invoice_license.Rows[0]["TotalQtyUsed"]
                    , "Check.ConditionRaiseError", " (t.TotalQty < t.TotalQtyIssued) or (t.TotalQtyUsed > t.TotalQtyIssued))"
                    });
                throw CmUtils.CMyException.Raise(
                    TError.ErridnInventory.Invoice_license_TotalQtyUsed_InvalidValue
                    , null
                    , alParamsCoupleError.ToArray()
                    );
            }
        }

        //Mẫu số hoá đơn: chương trình tự động hiển thị và không cho phép sửa(ví dụ: 01GTKT3/001). Việc hiển thị thông tin mẫu hoá đơn được thực hiện theo nguyên tắc sau:		
        // 6 kí tự đầu tiên lấy theo loại hoá đơn(01GTKT).	
        // 1 kí tự tiếp theo hiển thị số liên của hoá đơn(0)
        // 1 kí tự tiếp theo là "/", dùng để phân biệt giữa Số liên với Số thứ tự mẫu hoá đơn.
        // 3 kí tự tiếp theo là Số thứ tự mẫu hoá đơn.
        //Lưu ý: Riêng với loại hoá đơn 01/ hoặc 02/ - Tem, vé, thẻ, có thể tự nhập thông tinMẫu số hoá đơn, tuy nhiên không được vượt quá 11 kí tự.	
        private void Invoice_TempInvoice_CheckFormatFormNo(
            ref ArrayList alParamsCoupleError
            , object objFormNo
            )
        {
            /////
            string strFunctionName = "Invoice_TempInvoice_CheckFormatFormNo";
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                });
            // GetInfo:
            string[] arrFormNo = objFormNo.ToString().Split(new string[] { "/" }, StringSplitOptions.RemoveEmptyEntries);

            // 
            if (objFormNo.ToString().Length > 11)
            {
                alParamsCoupleError.AddRange(new object[]{
                    "Check.objFormNo", objFormNo
                    , "Check.arrFormNo", "objFormNo.ToString().Split(new string[] { '/' }"
                    , "Check.ErrConditional", "arrFormNo.Length != 2"
                    });
                throw CmUtils.CMyException.Raise(
                    TError.ErridnInventory.Invoice_TempInvoice_CheckFormNoFormat
                    , null
                    , alParamsCoupleError.ToArray()
                    );
            }
            else
            {
                ////
                //DataTable dtDB_Mst_InvoiceType = null;

                //Mst_InvoiceType_CheckDB(
                //    ref alParamsCoupleError // alParamsCoupleError
                //    , arrFormNo[0] // objPaymentMethodCode
                //    , TConst.Flag.Yes // strFlagExistToCheck
                //    , TConst.Flag.Active // strFlagActiveListToCheck
                //    , out dtDB_Mst_InvoiceType // dtDB_Mst_InvoiceType
                //    );
                ////
                //if(!CmUtils.StringUtils.StringEqualIgnoreCase(arrFormNo[1], "/"))
                //{
                //    alParamsCoupleError.AddRange(new object[]{
                //        "Check.objFormNo", objFormNo
                //        , "Check.(arrFormNo[1])", arrFormNo[1]
                //        , "Check.(arrFormNo[1]).Expected", "/"
                //        });
                //    throw CmUtils.CMyException.Raise(
                //        TError.ErridnInventory.Invoice_TempInvoice_CheckFormNoFormat
                //        , null
                //        , alParamsCoupleError.ToArray()
                //        );

                //}
            }
            /////
        }

        private void Invoice_TempInvoice_CheckFormatSign(
            ref ArrayList alParamsCoupleError
            , object objSign
            , object objYear
            )
        {
            /////
            ///Ký hiệu hoá đơn: phải nhập đúng theo quy định (6 ký tự đối với hoá đơn điện tử). Cụ thể:					
            //2 ký tự đầu để phân biệt các ký hiệu hóa đơn => ký tự phân biệt là hai chữ cái trong 20 chữ cái in hoa của bảng chữ cái tiếng Việt bao gồm: A, B, C, D, E, G, H, K, L, M, N, P, Q, R, S, T, U, V, X, Y.

            //    Ký tự thứ 3 là dấu "/".

            //    2 ký tự tiếp theo thể hiện năm tạo hoá đơn: Năm tạo hoá đơn được thể hiện bằng hai số cuối của năm thông báo phát hành.

            //    1 ký tự cuối thể hiện hình thức hoá đơn: Hình thức hóa đơn điện tử được ký hiệu là E.

            string strFunctionName = "Invoice_TempInvoice_CheckFormatSign";
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                });
            /////
            //Hashtable htMap = new Hashtable();
            //htMap.Add("A", "A");
            //htMap.Add("B", "B");
            //htMap.Add("C", "C");
            //htMap.Add("D", "D");
            //htMap.Add("E", "E");
            //htMap.Add("G", "G");
            //htMap.Add("H", "H");
            //htMap.Add("L", "L");
            //htMap.Add("M", "M");
            //htMap.Add("N", "N");
            //htMap.Add("P", "P");
            //htMap.Add("Q", "Q");
            //htMap.Add("S", "S");
            //htMap.Add("T", "T");
            //htMap.Add("U", "U");
            //htMap.Add("V", "V");
            //htMap.Add("X", "X");
            //htMap.Add("Y", "Y");
            //htMap.Add("/", "/");
            // GetInfo:
            string strMyCheck = "A, B, C, D, E, G, H, K, L, M, N, P, Q, R, S, T, U, V, X, Y";
            string[] arrMyCheck = strMyCheck.ToString().Split(new string[] { "," }, StringSplitOptions.RemoveEmptyEntries);
            ////
            string strSign = TUtils.CUtils.StdParam(objSign);
            if (strSign.Length != 6)
            {
                alParamsCoupleError.AddRange(new object[]{
                    "Check.objSign", objSign
                    , "Check.ErrConditional", "objSign.Length != 6"
                    });
                throw CmUtils.CMyException.Raise(
                    TError.ErridnInventory.Invoice_TempInvoice_CheckFormatSign
                    , null
                    , alParamsCoupleError.ToArray()
                    );
            }
            /////
            Boolean bSign_1 = false;
            Boolean bSign_2 = false;
            for (int iarrmycheck = 0; iarrmycheck < arrMyCheck.Length; iarrmycheck++)
            {
                if (CmUtils.StringUtils.StringEqualIgnoreCase(arrMyCheck[iarrmycheck].ToString().Trim(), strSign[0].ToString()))
                {
                    bSign_1 = true;
                }
                if (CmUtils.StringUtils.StringEqualIgnoreCase(arrMyCheck[iarrmycheck].ToString().Trim(), strSign[1].ToString()))
                {
                    bSign_2 = true;
                }
            }
            if (!bSign_1 || !bSign_2)
            {
                alParamsCoupleError.AddRange(new object[]{
                    string.Format("Check.strSign[{0}].Input", "0" ), strSign[0]
                    , string.Format("Check.strSign[{0}].Expected", "0" ), "A, B, C, D, E, G, H, K, L, M, N, P, Q, R, S, T, U, V, X, Y"
                    , string.Format("Check.strSign[{0}].Input", "1" ), strSign[1]
                    , string.Format("Check.strSign[{0}].Expected", "1" ), "A, B, C, D, E, G, H, K, L, M, N, P, Q, R, S, T, U, V, X, Y"
                    });
                throw CmUtils.CMyException.Raise(
                    TError.ErridnInventory.Invoice_TempInvoice_CheckFormatSign
                    , null
                    , alParamsCoupleError.ToArray()
                    );
            }
            ////
            if (!CmUtils.StringUtils.StringEqualIgnoreCase(objYear, string.Format("{0}{1}", strSign[3], strSign[4])))
            {
                alParamsCoupleError.AddRange(new object[]{
                    "Check.strSign[3+4].Input", string.Format("{0}{1}", strSign[3], strSign[4])
                    , string.Format("Check.strSign[3+4].Expected", "0" ), objYear
                    });
                throw CmUtils.CMyException.Raise(
                    TError.ErridnInventory.Invoice_TempInvoice_CheckFormatSign
                    , null
                    , alParamsCoupleError.ToArray()
                    );
            }
            ////
            if (!CmUtils.StringUtils.StringEqualIgnoreCase(strSign[5], "E"))
            {
                alParamsCoupleError.AddRange(new object[]{
                    "Check.strSign[5].Input", strSign[5]
                    ,"Check.strSign[5].Expected", "E"
                    });
                throw CmUtils.CMyException.Raise(
                    TError.ErridnInventory.Invoice_TempInvoice_CheckFormatSign
                    , null
                    , alParamsCoupleError.ToArray()
                    );
            }
            ////
            if (!CmUtils.StringUtils.StringEqualIgnoreCase(strSign[2], "/"))
            {
                alParamsCoupleError.AddRange(new object[]{
                    "Check.strSign[2].Input", strSign[2]
                    ,"Check.strSign[52].Expected", "/"
                    });
                throw CmUtils.CMyException.Raise(
                    TError.ErridnInventory.Invoice_TempInvoice_CheckFormatSign
                    , null
                    , alParamsCoupleError.ToArray()
                    );
            }
            ////
        }

        public DataSet Invoice_TempInvoice_Get(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            //// Filter:
            , string strFt_RecordStart
            , string strFt_RecordCount
            , string strFt_WhereClause
            //// Return:
            , string strRt_Cols_Invoice_TempInvoice
            )
        {
            #region // Temp:
            DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            //int nTidSeq = 0;
            DateTime dtimeSys = DateTime.UtcNow;
            bool bNeedTransaction = true;
            string strFunctionName = "Invoice_TempInvoice_Get";
            string strErrorCodeDefault = TError.ErridnInventory.Invoice_TempInvoice_Get;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				//// Filter
				, "strFt_RecordStart", strFt_RecordStart
                , "strFt_RecordCount", strFt_RecordCount
                , "strFt_WhereClause", strFt_WhereClause
				//// Return
				, "strRt_Cols_Invoice_TempInvoice", strRt_Cols_Invoice_TempInvoice
                });
            #endregion

            try
            {
                #region // Init:
                //_cf.db.LogUserId = _cf.sinf.strUserCode;
                if (bNeedTransaction) _cf.db.BeginTransaction();

                // Write RequestLog:
                _cf.ProcessBizReq_OutSide(
                    strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    , alParamsCoupleError // alParamsCoupleError
                    );

                // Sys_User_CheckAuthentication:
                //Sys_User_CheckAuthentication(
                //    ref alParamsCoupleError
                //    , strWAUserCode
                //    , strWAUserPassword
                //    );

                // Check Access/Deny:
                Sys_Access_CheckDenyV30(
                    ref alParamsCoupleError
                    , strWAUserCode
                    , strFunctionName
                    );
                #endregion

                #region // Check:
                //// Refine:
                long nFilterRecordStart = Convert.ToInt64(strFt_RecordStart);
                long nFilterRecordEnd = nFilterRecordStart + Convert.ToInt64(strFt_RecordCount) - 1;
                bool bGet_Invoice_TempInvoice = (strRt_Cols_Invoice_TempInvoice != null && strRt_Cols_Invoice_TempInvoice.Length > 0);

                //// drAbilityOfUser:
                //DataRow drAbilityOfUser = myCache_ViewAbility_GetUserInfo(strWAUserCode);

                #endregion

                #region // Build Sql:
                ////
                ArrayList alParamsCoupleSql = new ArrayList();
                alParamsCoupleSql.AddRange(new object[] {
                    "@nFilterRecordStart", nFilterRecordStart
                    , "@nFilterRecordEnd", nFilterRecordEnd
                    });
                ////
                // drAbilityOfUser:
                DataRow drAbilityOfUser = Sys_User_GetAbilityViewOfUser(strWAUserCode);
                zzzzClauseSelect_Mst_NNT_ViewAbility_Get(
                    drAbilityOfUser // drAbilityOfUser
                    , ref alParamsCoupleError // alParamsCoupleError
                    );
                string strSqlGetData = CmUtils.StringUtils.Replace(@"
						---- #tbl_Invoice_TempInvoice_Filter_Draft:
						select distinct
							identity(bigint, 0, 1) MyIdxSeq
							, iti.TInvoiceCode
							, iti.CreateDTimeUTC 
						into #tbl_Invoice_TempInvoice_Filter_Draft
						from Invoice_TempInvoice iti --//[mylock]
                            inner join #tbl_Mst_NNT_ViewAbility t_MstNNT_View --//[mylock]
                                on iti.MST = t_MstNNT_View.MST
						where (1=1)
							zzB_Where_strFilter_zzE
						order by iti.CreateDTimeUTC desc
						;

						---- Summary:
						select Count(0) MyCount from #tbl_Invoice_TempInvoice_Filter_Draft t --//[mylock]
						;

						---- #tbl_Invoice_TempInvoice_Filter:
						select
							t.*
						into #tbl_Invoice_TempInvoice_Filter
						from #tbl_Invoice_TempInvoice_Filter_Draft t --//[mylock]
						where
							(t.MyIdxSeq >= @nFilterRecordStart)
							and (t.MyIdxSeq <= @nFilterRecordEnd)
						;

						-------- Invoice_TempInvoice --------:
						zzB_Select_Invoice_TempInvoice_zzE
						----------------------------------------

						---- Clear for debug:
						--drop table #tbl_Invoice_TempInvoice_Filter_Draft;
						--drop table #tbl_Invoice_TempInvoice_Filter;
					"
                    );
                ////
                string zzB_Select_Invoice_TempInvoice_zzE = "-- Nothing.";
                if (bGet_Invoice_TempInvoice)
                {
                    #region // bGet_Invoice_TempInvoice:
                    zzB_Select_Invoice_TempInvoice_zzE = CmUtils.StringUtils.Replace(@"
							---- Invoice_TempInvoice:
							select
								t.MyIdxSeq
								, iti.*
	                            , mgtid.GovTaxID mgtid_GovTaxID
	                            , mgtid.GovTaxName mgtid_GovTaxName
								----
								, mit.InvoiceType mit_InvoiceType
								, mit.InvoiceTypeName mit_InvoiceTypeName
								----
								, itg.InvoiceTGroupCode itg_InvoiceTGroupCode
								, itg.Spec_Prd_Type itg_Spec_Prd_Type
							from #tbl_Invoice_TempInvoice_Filter t --//[mylock]
								inner join Invoice_TempInvoice iti --//[mylock]
									on t.TInvoiceCode = iti.TInvoiceCode
	                            left join Mst_NNT mnnt --//[mylock]
		                            on iti.MST = mnnt.MST
	                            left join Mst_GovTaxID mgtid --//[mylock]
		                            on mnnt.GovTaxID = mgtid.GovTaxID
								left join Mst_InvoiceType mit --//[mylock]
									on iti.InvoiceType = mit.InvoiceType
								left join Invoice_TempGroup itg --//[mylock]
									on iti.InvoiceTGroupCode = itg.InvoiceTGroupCode
							order by t.MyIdxSeq asc
							;
						"
                        );
                    #endregion
                }
                ////
                string zzB_Where_strFilter_zzE = "";
                {
                    Hashtable htSpCols = new Hashtable();
                    {
                        #region // htSpCols:
                        ////
                        TUtils.CUtils.MyBuildHTSupportedColumns(
                            _cf.db // db
                            , ref htSpCols // htSupportedColumns
                            , "Invoice_TempInvoice" // strTableNameDB
                            , "Invoice_TempInvoice." // strPrefixStd
                            , "iti." // strPrefixAlias
                            );
                        ////
                        #endregion
                    }
                    zzB_Where_strFilter_zzE = CmUtils.SqlUtils.BuildWhere(
                        htSpCols // htSpCols
                        , strFt_WhereClause // strClause
                        , "@p_" // strParamPrefix
                        , ref alParamsCoupleSql // alParamsCoupleSql
                        );
                    zzB_Where_strFilter_zzE = (zzB_Where_strFilter_zzE.Length <= 0 ? "" : string.Format(" and ({0})", zzB_Where_strFilter_zzE));
                    alParamsCoupleError.AddRange(new object[]{
                        "zzB_Where_strFilter_zzE", zzB_Where_strFilter_zzE
                        });
                }
                ////
                strSqlGetData = CmUtils.StringUtils.Replace(
                    strSqlGetData
                    , "zzB_Where_strFilter_zzE", zzB_Where_strFilter_zzE
                    , "zzB_Select_Invoice_TempInvoice_zzE", zzB_Select_Invoice_TempInvoice_zzE
                    );
                #endregion

                #region // Get Data:
                DataSet dsGetData = _cf.db.ExecQuery(
                    strSqlGetData
                    , alParamsCoupleSql.ToArray()
                    );
                int nIdxTable = 0;
                dsGetData.Tables[nIdxTable++].TableName = "MySummaryTable";
                if (bGet_Invoice_TempInvoice)
                {
                    dsGetData.Tables[nIdxTable++].TableName = "Invoice_TempInvoice";
                }
                CmUtils.DataUtils.MoveDataTable(ref mdsFinal, ref dsGetData);
                #endregion

                // Return Good:
                TDALUtils.DBUtils.RollbackSafety(_cf.db); // Always Rollback.
                mdsFinal.AcceptChanges();
                return mdsFinal;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Rollback:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);

                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsFinal
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Rollback and Release resources:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);
                TDALUtils.DBUtils.ReleaseAllSemaphore(_cf.db_Sys, true);

                // Write ReturnLog:
                _cf.ProcessBizReturn_OutSide(
                    ref mdsFinal // mdsFinal
                    , strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    );
                #endregion
            }
        }

        public DataSet Invoice_TempInvoice_Get_New20191109(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            //// Filter:
            , string strFt_RecordStart
            , string strFt_RecordCount
            , string strFt_WhereClause
            //// Return:
            , string strRt_Cols_Invoice_TempInvoice
            )
        {
            #region // Temp:
            DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            //int nTidSeq = 0;
            DateTime dtimeSys = DateTime.UtcNow;
            bool bNeedTransaction = true;
            string strFunctionName = "Invoice_TempInvoice_Get";
            string strErrorCodeDefault = TError.ErridnInventory.Invoice_TempInvoice_Get;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				//// Filter
				, "strFt_RecordStart", strFt_RecordStart
                , "strFt_RecordCount", strFt_RecordCount
                , "strFt_WhereClause", strFt_WhereClause
				//// Return
				, "strRt_Cols_Invoice_TempInvoice", strRt_Cols_Invoice_TempInvoice
                });
            #endregion

            try
            {
                #region // Init:
                //_cf.db.LogUserId = _cf.sinf.strUserCode;
                if (bNeedTransaction) _cf.db.BeginTransaction();

                // Write RequestLog:
                _cf.ProcessBizReq_OutSide(
                    strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    , alParamsCoupleError // alParamsCoupleError
                    );

                // Sys_User_CheckAuthentication:
                //Sys_User_CheckAuthentication(
                //    ref alParamsCoupleError
                //    , strWAUserCode
                //    , strWAUserPassword
                //    );

                // Check Access/Deny:
                Sys_Access_CheckDenyV30(
                    ref alParamsCoupleError
                    , strWAUserCode
                    , strFunctionName
                    );
                #endregion

                #region // Check:
                //// Refine:
                long nFilterRecordStart = Convert.ToInt64(strFt_RecordStart);
                long nFilterRecordEnd = nFilterRecordStart + Convert.ToInt64(strFt_RecordCount) - 1;
                bool bGet_Invoice_TempInvoice = (strRt_Cols_Invoice_TempInvoice != null && strRt_Cols_Invoice_TempInvoice.Length > 0);

                //// drAbilityOfUser:
                //DataRow drAbilityOfUser = myCache_ViewAbility_GetUserInfo(strWAUserCode);

                #endregion

                #region // Build Sql:
                ////
                ArrayList alParamsCoupleSql = new ArrayList();
                alParamsCoupleSql.AddRange(new object[] {
                    "@nFilterRecordStart", nFilterRecordStart
                    , "@nFilterRecordEnd", nFilterRecordEnd
                    });
                ////
                // drAbilityOfUser:
                DataRow drAbilityOfUser = Sys_User_GetAbilityViewOfUser(strWAUserCode);
                zzzzClauseSelect_Mst_NNT_ViewAbility_Get(
                    drAbilityOfUser // drAbilityOfUser
                    , ref alParamsCoupleError // alParamsCoupleError
                    );
                string strSqlGetData = CmUtils.StringUtils.Replace(@"
						---- #tbl_Invoice_TempInvoice_Filter_Draft:
						select distinct
							identity(bigint, 0, 1) MyIdxSeq
							, iti.TInvoiceCode
							, iti.CreateDTimeUTC 
						into #tbl_Invoice_TempInvoice_Filter_Draft
						from Invoice_TempInvoice iti --//[mylock]
                            inner join #tbl_Mst_NNT_ViewAbility t_MstNNT_View --//[mylock]
                                on iti.MST = t_MstNNT_View.MST
						where (1=1)
							zzB_Where_strFilter_zzE
						order by iti.CreateDTimeUTC desc
						;

						---- Summary:
						select Count(0) MyCount from #tbl_Invoice_TempInvoice_Filter_Draft t --//[mylock]
						;

						---- #tbl_Invoice_TempInvoice_Filter:
						select
							t.*
						into #tbl_Invoice_TempInvoice_Filter
						from #tbl_Invoice_TempInvoice_Filter_Draft t --//[mylock]
						where
							(t.MyIdxSeq >= @nFilterRecordStart)
							and (t.MyIdxSeq <= @nFilterRecordEnd)
						;

						-------- Invoice_TempInvoice --------:
						zzB_Select_Invoice_TempInvoice_zzE
						----------------------------------------

						---- Clear for debug:
						--drop table #tbl_Invoice_TempInvoice_Filter_Draft;
						--drop table #tbl_Invoice_TempInvoice_Filter;
					"
                    );
                ////
                string zzB_Select_Invoice_TempInvoice_zzE = "-- Nothing.";
                if (bGet_Invoice_TempInvoice)
                {
                    #region // bGet_Invoice_TempInvoice:
                    zzB_Select_Invoice_TempInvoice_zzE = CmUtils.StringUtils.Replace(@"
							---- Invoice_TempInvoice:
							select
								t.MyIdxSeq
								, iti.*
	                            , mgtid.GovTaxID mgtid_GovTaxID
	                            , mgtid.GovTaxName mgtid_GovTaxName
								----
								, mit.InvoiceType mit_InvoiceType
								, mit.InvoiceTypeName mit_InvoiceTypeName
								----
								, itg.InvoiceTGroupCode itg_InvoiceTGroupCode
								, itg.Spec_Prd_Type itg_Spec_Prd_Type
								, itg.VATType itg_VATType
							from #tbl_Invoice_TempInvoice_Filter t --//[mylock]
								inner join Invoice_TempInvoice iti --//[mylock]
									on t.TInvoiceCode = iti.TInvoiceCode
	                            left join Mst_NNT mnnt --//[mylock]
		                            on iti.MST = mnnt.MST
	                            left join Mst_GovTaxID mgtid --//[mylock]
		                            on mnnt.GovTaxID = mgtid.GovTaxID
								left join Mst_InvoiceType mit --//[mylock]
									on iti.InvoiceType = mit.InvoiceType
								left join Invoice_TempGroup itg --//[mylock]
									on iti.InvoiceTGroupCode = itg.InvoiceTGroupCode
							order by t.MyIdxSeq asc
							;
						"
                        );
                    #endregion
                }
                ////
                string zzB_Where_strFilter_zzE = "";
                {
                    Hashtable htSpCols = new Hashtable();
                    {
                        #region // htSpCols:
                        ////
                        TUtils.CUtils.MyBuildHTSupportedColumns(
                            _cf.db // db
                            , ref htSpCols // htSupportedColumns
                            , "Invoice_TempInvoice" // strTableNameDB
                            , "Invoice_TempInvoice." // strPrefixStd
                            , "iti." // strPrefixAlias
                            );
                        ////
                        #endregion
                    }
                    zzB_Where_strFilter_zzE = CmUtils.SqlUtils.BuildWhere(
                        htSpCols // htSpCols
                        , strFt_WhereClause // strClause
                        , "@p_" // strParamPrefix
                        , ref alParamsCoupleSql // alParamsCoupleSql
                        );
                    zzB_Where_strFilter_zzE = (zzB_Where_strFilter_zzE.Length <= 0 ? "" : string.Format(" and ({0})", zzB_Where_strFilter_zzE));
                    alParamsCoupleError.AddRange(new object[]{
                        "zzB_Where_strFilter_zzE", zzB_Where_strFilter_zzE
                        });
                }
                ////
                strSqlGetData = CmUtils.StringUtils.Replace(
                    strSqlGetData
                    , "zzB_Where_strFilter_zzE", zzB_Where_strFilter_zzE
                    , "zzB_Select_Invoice_TempInvoice_zzE", zzB_Select_Invoice_TempInvoice_zzE
                    );
                #endregion

                #region // Get Data:
                DataSet dsGetData = _cf.db.ExecQuery(
                    strSqlGetData
                    , alParamsCoupleSql.ToArray()
                    );
                int nIdxTable = 0;
                dsGetData.Tables[nIdxTable++].TableName = "MySummaryTable";
                if (bGet_Invoice_TempInvoice)
                {
                    dsGetData.Tables[nIdxTable++].TableName = "Invoice_TempInvoice";
                }
                CmUtils.DataUtils.MoveDataTable(ref mdsFinal, ref dsGetData);
                #endregion

                // Return Good:
                TDALUtils.DBUtils.RollbackSafety(_cf.db); // Always Rollback.
                mdsFinal.AcceptChanges();
                return mdsFinal;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Rollback:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);

                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsFinal
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Rollback and Release resources:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);
                TDALUtils.DBUtils.ReleaseAllSemaphore(_cf.db_Sys, true);

                // Write ReturnLog:
                _cf.ProcessBizReturn_OutSide(
                    ref mdsFinal // mdsFinal
                    , strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    );
                #endregion
            }
        }

        private void Invoice_TempInvoice_SaveX(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            , DateTime dtimeSys
            ////
            , object objFlagIsDelete
            ////
            , object objTInvoiceCode
            , object objMST
            , object objPaymentMethodCode
            , object objInvoiceType
            , object objTInvoiceName
            , object objFormNo
            , object objSign
            , object objNNTName
            , object objNNTAddress
            , object objLogoFilePath
            , object objTInvoiceBody
            , object objWatermarkFilePath
            , object objInvoiceTGroupCode
            , object objRemark
            )
        {
            #region // Temp:
            //int nTidSeq = 0;
            //bool bMyDebugSql = false;
            string strFunctionName = "Invoice_TempInvoice_SaveX";
            //string strErrorCodeDefault = TError.ErrTCGQLTV.Form_Receipt_Save;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
                ////
                , "objFlagIsDelete",objFlagIsDelete
				////
                , "objTInvoiceCode", objTInvoiceCode
                , "objMST", objMST
                , "objPaymentMethodCode", objPaymentMethodCode
                , "objInvoiceType", objInvoiceType
                , "objTInvoiceName", objTInvoiceName
                , "objFormno", objFormNo
                , "objSign", objSign
                , "objNNTName", objNNTName
                , "objNNTAddress", objNNTAddress
                , "objLogoFilePath", objLogoFilePath
                , "objTInvoiceBody", objTInvoiceBody
                , "objWatermarkFilePath", objWatermarkFilePath
                , "objInvoiceTGroupCode", objInvoiceTGroupCode
                , "objRemark", objRemark
                });
            //ArrayList alPCErrEx = new ArrayList();
            ////
            Hashtable htParamsSql = new Hashtable();
            #endregion

            #region // Convert Input:
            //alParamsCoupleError.AddRange(new object[]{
            //    "Check.dsData", TJson.JsonConvert.SerializeObject(dsData)
            //    });
            #endregion

            #region // Refine and Check Input:
            ////
            bool bIsDelete = CmUtils.StringUtils.StringEqual(objFlagIsDelete, TConst.Flag.Yes);
            ////
            string strTInvoiceCode = TUtils.CUtils.StdParam(objTInvoiceCode);
            string strMST = TUtils.CUtils.StdParam(objMST);
            string strPaymentMethodCode = TUtils.CUtils.StdParam(objPaymentMethodCode);
            string strInvoiceType = TUtils.CUtils.StdParam(objInvoiceType);
            string strTInvoiceName = string.Format("{0}", objTInvoiceName);
            string strFormNo = TUtils.CUtils.StdParam(objFormNo);
            string strSign = string.Format("{0}", objSign);
            string strNNTName = string.Format("{0}", objNNTName);
            string strNNTAddress = string.Format("{0}", objNNTAddress);
            string strLogoFilePath = string.Format("{0}", objLogoFilePath);
            string strTInvoiceBody = string.Format("{0}", objTInvoiceBody);
            string strWatermarkFilePath = string.Format("{0}", objWatermarkFilePath);
            string strInvoiceTGroupCode = TUtils.CUtils.StdParam(objInvoiceTGroupCode);
            string strRemark = string.Format("{0}", objRemark);
            ////
            string strCreateDTimeUTC = null;
            string strCreateBy = null;
            ////
            DataTable dtDB_Invoice_TempInvoice = null;
            {
                ////
                if (strTInvoiceCode == null || strTInvoiceCode.Length < 1)
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.strTInvoiceCode", strTInvoiceCode
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Invoice_TempInvoice_SaveX_InvalidTInvoiceCode
                        , null
                        , alParamsCoupleError.ToArray()
                        );
                }
                ////
                Invoice_TempInvoice_CheckDB(
                    ref alParamsCoupleError // alParamsCoupleError
                    , strTInvoiceCode // objShipNo
                    , "" // strFlagExistToCheck
                    , "" // strTInvoiceStatusListToCheck
                    , "" // strFlagActiveListToCheck
                    , out dtDB_Invoice_TempInvoice // dtDB_Invoice_TempInvoice
                    );
                ////
                if (dtDB_Invoice_TempInvoice.Rows.Count < 1) // Chưa tồn tại
                {
                    if (bIsDelete)
                    {
                        goto MyCodeLabel_Done; // Thành công
                    }
                    else
                    {
                        // Nothing
                    }
                }
                else // Đã tồn tại Invoice_TempInvoice:
                {
                    if (!CmUtils.StringUtils.StringEqualIgnoreCase(dtDB_Invoice_TempInvoice.Rows[0]["TInvoiceStatus"], TConst.TInvoiceStatus.Pending))
                    {
                        alParamsCoupleError.AddRange(new object[]{
                            "Check.DB.TInvoiceStatus", dtDB_Invoice_TempInvoice.Rows[0]["TInvoiceStatus"]
                            , "Check.InputStatus.Expected", TConst.TInvoiceStatus.Pending
                            });
                        throw CmUtils.CMyException.Raise(
                            TError.ErridnInventory.Invoice_TempInvoice_SaveX_StatusNotMatched
                            , null
                            , alParamsCoupleError.ToArray()
                            );
                    }
                    else
                    {
                        strCreateDTimeUTC = TUtils.CUtils.StdDTime(dtDB_Invoice_TempInvoice.Rows[0]["CreateDTimeUTC"]);
                        strCreateBy = TUtils.CUtils.StdParam(dtDB_Invoice_TempInvoice.Rows[0]["CreateBy"]);
                    }
                }
                strCreateDTimeUTC = string.IsNullOrEmpty(strCreateDTimeUTC) ? dtimeSys.ToString("yyyy-MM-dd HH:mm:ss") : strCreateDTimeUTC;
                strCreateBy = string.IsNullOrEmpty(strCreateBy) ? strWAUserCode : strCreateBy;
                ////
                myCache_ViewAbility_CheckAccessMSTWrite(
                    ref alParamsCoupleError // alParamsCoupleError
                    , strWAUserCode // strWAUserCode
                    , strMST // strMST
                    );
                ////
                DataTable dtDB_Mst_PaymentMethods = null;

                Mst_PaymentMethods_CheckDB(
                    ref alParamsCoupleError // alParamsCoupleError
                    , strPaymentMethodCode // objPaymentMethodCode
                    , TConst.Flag.Yes // strFlagExistToCheck
                    , TConst.Flag.Active // strFlagActiveListToCheck
                    , out dtDB_Mst_PaymentMethods // dtDB_Mst_PaymentMethods
                    );
                ////
                DataTable dtDB_Mst_InvoiceType = null;

                Mst_InvoiceType_CheckDB(
                    ref alParamsCoupleError // alParamsCoupleError
                    , strInvoiceType // objPaymentMethodCode
                    , TConst.Flag.Yes // strFlagExistToCheck
                    , TConst.Flag.Active // strFlagActiveListToCheck
                    , out dtDB_Mst_InvoiceType // dtDB_Mst_InvoiceType
                    );
                ////
                if (strFormNo == null || strFormNo.Length < 1)
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.strFormNo", strFormNo
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Invoice_TempInvoice_SaveX_InvalidFormNo
                        , null
                        , alParamsCoupleError.ToArray()
                        );
                }
                ////
                Invoice_TempInvoice_CheckFormNo(
                    ref alParamsCoupleError // alParamsCoupleError
                    , strFormNo // objFormNo
                    , strMST // objMST
                    , strTInvoiceCode // objTInvoiceCode               
                    );
                ////
                Invoice_TempInvoice_CheckFormatFormNo(
                    ref alParamsCoupleError // alParamsCoupleError
                    , strFormNo // objFormNo           
                    );
                ////
                if (strSign == null || strSign.Length < 1)
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.strSign", strSign
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Invoice_TempInvoice_SaveX_InvalidSign
                        , null
                        , alParamsCoupleError.ToArray()
                        );
                }
                ////
                DateTime dtCreateInvoiceUTC = Convert.ToDateTime(strCreateDTimeUTC);

                Invoice_TempInvoice_CheckFormatSign(
                    ref alParamsCoupleError // alParamsCoupleError
                    , strSign // objFormNo
                    , dtCreateInvoiceUTC.ToString("yy")
                    );
                //string strFormNo_Calc = "";
                //GetFormNo(
                //    ref alParamsCoupleError // alParamsCoupleError
                //    , strInvoiceType  // strInvoiceType
                //    , strMST  // objMST
                //    , ref strFormNo_Calc // strFormNo_Calc
                //    );
                //////
                //if(!CmUtils.StringUtils.StringEqualIgnoreCase(strFormNo_Calc, strFormNo))
                //{
                //    alParamsCoupleError.AddRange(new object[]{
                //        "Check.strFormNo", strFormNo
                //        , "Check.FormNo.Expected", strFormNo_Calc
                //        });
                //    throw CmUtils.CMyException.Raise(
                //        TError.ErridnInventory.Invoice_TempInvoice_SaveX_InvalidFormNo
                //        , null
                //        , alParamsCoupleError.ToArray()
                //        );

                //}
                ////
                DataTable dtDB_Invoice_TempGroup = null;

                Invoice_TempGroup_CheckDB(
                    ref alParamsCoupleError // alParamsCoupleError
                    , strInvoiceTGroupCode // strInvoiceTGroupCode
                    , TConst.Flag.Yes // strFlagExistToCheck
                    , TConst.Flag.Active // strFlagActiveListToCheck
                    , out dtDB_Invoice_TempGroup // dtDB_Invoice_TempGroup
                    );
                ////
                if (!CmUtils.StringUtils.StringEqualIgnoreCase(dtDB_Invoice_TempGroup.Rows[0]["MST"], TConst.BizMix.MSTALL)
                    && !CmUtils.StringUtils.StringEqualIgnoreCase(dtDB_Invoice_TempGroup.Rows[0]["MST"], strMST))
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.strInvoiceTGroupCode", strInvoiceTGroupCode
                        , "Check.DB.TGroup.InvoiceTGroupCode", dtDB_Invoice_TempGroup.Rows[0]["InvoiceTGroupCode"]
                        , "Check.Input.strMST", strMST
                        , "Check.Expected.TGroup.MST", string.Format("{0} or {1", TConst.BizMix.MSTALL, strMST).Trim()
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Invoice_TempInvoice_SaveX_NNTNotUsedInvoiceTGroupCode
                        , null
                        , alParamsCoupleError.ToArray()
                        );

                }
                ////
            }
            #endregion

            #region // SaveTemp Invoice_Invoice:
            {
                ////
                TUtils.CUtils.MyBuildDBDT_Common(
                    _cf.db
                    , "#input_Invoice_TempInvoice"
                    , new object[]{
                        "TInvoiceCode", TConst.BizMix.Default_DBColType,
                        "NetworkID", TConst.BizMix.Default_DBColType,
                        "MST", TConst.BizMix.Default_DBColType,
                        "PaymentMethodCode", TConst.BizMix.Default_DBColType,
                        "InvoiceType", TConst.BizMix.Default_DBColType,
                        "TInvoiceName", TConst.BizMix.Default_DBColType,
                        "FormNo", TConst.BizMix.Default_DBColType,
                        "Sign", TConst.BizMix.Default_DBColType,
                        "EffDateStart", TConst.BizMix.Default_DBColType,
                        "EffDateEnd", TConst.BizMix.Default_DBColType,
                        "NNTName", TConst.BizMix.Default_DBColType,
                        "NNTAddress", TConst.BizMix.Default_DBColType,
                        "LogoFilePath", TConst.BizMix.Max_DBCol,
                        "TInvoiceBody", TConst.BizMix.Max_DBCol,
                        "WatermarkFilePath", TConst.BizMix.Max_DBCol,
                        "InvoiceTGroupCode", TConst.BizMix.Max_DBCol,
                        "StartInvoiceNo", TConst.BizMix.Default_DBColType,
                        "EndInvoiceNo", TConst.BizMix.Default_DBColType,
                        "CreateDTimeUTC", TConst.BizMix.Default_DBColType,
                        "CreateBy", TConst.BizMix.Default_DBColType,
                        "LUDTimeUTC", TConst.BizMix.Default_DBColType,
                        "LUBy", TConst.BizMix.Default_DBColType,
                        "Remark", TConst.BizMix.Default_DBColType,
                        "TInvoiceStatus", TConst.BizMix.Default_DBColType,
                        "FlagActive", TConst.BizMix.Default_DBColType,
                        "UpdQtyInvoiceNoDTimeUTC", TConst.BizMix.Default_DBColType,
                        "UpdQtyInvoiceNoBy", TConst.BizMix.Default_DBColType,
                        "IssuedDTimeUTC", TConst.BizMix.Default_DBColType,
                        "Issuedby", TConst.BizMix.Default_DBColType,
                        "InActiveDTimeUTC", TConst.BizMix.Default_DBColType,
                        "InActiveBy", TConst.BizMix.Default_DBColType,
                        "LogLUDTimeUTC", TConst.BizMix.Default_DBColType,
                        "LogLUBy", TConst.BizMix.Default_DBColType,
                        }
                    , new object[]{
                            new object[]{
                                strTInvoiceCode, // TInvoiceCode
                                nNetworkID, // NetworkID
                                strMST, // strMST
                                strPaymentMethodCode, // PaymentMethodCode
                                strInvoiceType, // InvoiceType
                                strTInvoiceName, // TInvoiceName
                                strFormNo, // FormNo
                                strSign, // Sign
                                null, // EffDateStart
                                null, // EffDateEnd
                                strNNTName, // NNTName
                                strNNTAddress, // NNTAddress
                                strLogoFilePath, // LogoFilePath
                                strTInvoiceBody, // TInvoiceBody
                                strWatermarkFilePath, // WatermarkFilePath
                                strInvoiceTGroupCode, // InvoiceTGroupCode
                                0.0, // StartInvoiceNo
                                0.0, // EndInvoiceNo
                                strCreateDTimeUTC, // CreateDTimeUTC
                                strWAUserCode, // CreateBy
                                dtimeSys.ToString("yyyy-MM-dd HH:mm:ss"), // LUDTimeUTC
                                strWAUserCode, // LUBy
                                strRemark, // Remark
                                TConst.TInvoiceStatus.Pending, // TInvoiceStatus
                                TConst.Flag.Active, // FlagActive
                                null, // UpdQtyInvoiceNoDTimeUTC
                                null, // UpdQtyInvoiceNoBy
                                null, // IssuedDTimeUTC
                                null, // Issuedby
                                null, // InActiveDTimeUTC
                                null, // InActiveBy
                                dtimeSys.ToString("yyyy-MM-dd HH:mm:ss"), // LogLUDTimeUTC
                                strWAUserCode, // LogLUBy
								}
                        }
                    );

            }
            #endregion

            #region // SaveDB:
            {
                //// Clear All:
                {
                    string strSqlDelete = CmUtils.StringUtils.Replace(@"
							    ---- Invoice_TempInvoice:
							    delete t
							    from Invoice_TempInvoice t --//[mylock]
								    inner join #input_Invoice_TempInvoice f --//[mylock]
									    on t.TInvoiceCode = f.TInvoiceCode
							    where (1=1)
							    ;
						");
                    _cf.db.ExecQuery(
                        strSqlDelete
                        );
                }

                //// Insert All:
                if (!bIsDelete)
                {
                    #region // Insert:
                    {

                        ////
                        string zzzzClauseInsert_Invoice_TempInvoice_zSave = CmUtils.StringUtils.Replace(@"
                                ---- Invoice_TempInvoice:
                                insert into Invoice_TempInvoice
                                (	
	                                TInvoiceCode
	                                , NetworkID
	                                , MST
	                                , PaymentMethodCode
	                                , InvoiceType
	                                , TInvoiceName
	                                , FormNo
	                                , Sign
	                                , EffDateStart
	                                , EffDateEnd
	                                , NNTName
	                                , NNTAddress
	                                , LogoFilePath
	                                , TInvoiceBody
	                                , WatermarkFilePath
	                                , InvoiceTGroupCode
	                                , StartInvoiceNo
	                                , EndInvoiceNo
	                                , CreateDTimeUTC
	                                , CreateBy
	                                , LUDTimeUTC
	                                , LUBy
	                                , Remark
	                                , TInvoiceStatus
	                                , FlagActive
	                                , UpdQtyInvoiceNoDTimeUTC
	                                , UpdQtyInvoiceNoBy
	                                , IssuedDTimeUTC
	                                , Issuedby
	                                , InActiveDTimeUTC
	                                , InActiveBy
	                                , LogLUDTimeUTC
	                                , LogLUBy
                                )
                                select
	                                t.TInvoiceCode
	                                , t.NetworkID
	                                , t.MST
	                                , t.PaymentMethodCode
	                                , t.InvoiceType
	                                , t.TInvoiceName
	                                , t.FormNo
	                                , t.Sign
	                                , t.EffDateStart
	                                , t.EffDateEnd
	                                , t.NNTName
	                                , t.NNTAddress
	                                , t.LogoFilePath
	                                , t.TInvoiceBody
	                                , t.WatermarkFilePath
	                                , t.InvoiceTGroupCode
	                                , t.StartInvoiceNo
	                                , t.EndInvoiceNo
	                                , t.CreateDTimeUTC
	                                , t.CreateBy
	                                , t.LUDTimeUTC
	                                , t.LUBy
	                                , t.Remark
	                                , t.TInvoiceStatus
	                                , t.FlagActive
	                                , t.UpdQtyInvoiceNoDTimeUTC
	                                , t.UpdQtyInvoiceNoBy
	                                , t.IssuedDTimeUTC
	                                , t.Issuedby
	                                , t.InActiveDTimeUTC
	                                , t.InActiveBy
	                                , t.LogLUDTimeUTC
	                                , t.LogLUBy
                                from #input_Invoice_TempInvoice t --//[mylock]
                                ;
                            ");
                        string strSqlExec = CmUtils.StringUtils.Replace(@"
								----
								zzzzClauseInsert_Invoice_TempInvoice_zSave
			
								----
							"
                            , "zzzzClauseInsert_Invoice_TempInvoice_zSave", zzzzClauseInsert_Invoice_TempInvoice_zSave
                            );
                        ////
                        DataSet dsExec = _cf.db.ExecQuery(strSqlExec);
                        ////
                    }
                    #endregion
                }
            }
            #endregion

            #region //// Clear For Debug:.
            {
                ////
                string strSqlClearForDebug = CmUtils.StringUtils.Replace(@"
						---- Clear for Debug:
						drop table #input_Invoice_TempInvoice;
					");

                _cf.db.ExecQuery(
                    strSqlClearForDebug
                    );
                ////
            }
        #endregion

        // Return Good:
        MyCodeLabel_Done:
            return;
            //TDALUtils.DBUtils.CommitSafety(_cf.db);
            //mdsFinal.AcceptChanges();
            //return mdsFinal;		
        }
        private void Invoice_TempInvoice_UpdQtyInvoiceNoX(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            , DateTime dtimeSys
            ////
            , object objTInvoiceCode
            , object objStartInvoiceNo
            , object objEndInvoiceNo
            , object objRemark
            )
        {
            #region // Temp:
            //int nTidSeq = 0;
            //bool bMyDebugSql = false;
            string strFunctionName = "Invoice_TempInvoice_UpdQtyInvoiceNoX";
            //string strErrorCodeDefault = TError.ErrTCGQLTV.Form_Receipt_Save;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
                ////
                //, "objFlagIsDelete",objFlagIsDelete
				////
                , "objTInvoiceCode", objTInvoiceCode
                , "objStartInvoiceNo", objStartInvoiceNo
                , "objEndInvoiceNo", objEndInvoiceNo
                , "objRemark", objRemark
                });
            //ArrayList alPCErrEx = new ArrayList();
            ////
            Hashtable htParamsSql = new Hashtable();
            #endregion

            #region // Convert Input:
            //alParamsCoupleError.AddRange(new object[]{
            //    "Check.dsData", TJson.JsonConvert.SerializeObject(dsData)
            //    });
            #endregion

            #region // Refine and Check Input:
            ////
            //bool bIsDelete = CmUtils.StringUtils.StringEqual(objFlagIsDelete, TConst.Flag.Yes);
            ////
            string strTInvoiceCode = TUtils.CUtils.StdParam(objTInvoiceCode);
            string strRemark = string.Format("{0}", objRemark);
            ////
            DataTable dtDB_Invoice_TempInvoice = null;
            string strMST = "";
            {
                ////
                Invoice_TempInvoice_CheckDB(
                    ref alParamsCoupleError // alParamsCoupleError
                    , strTInvoiceCode // objShipNo
                    , TConst.Flag.Yes // strFlagExistToCheck
                    , TConst.TInvoiceStatus.Pending // strTInvoiceStatusListToCheck
                    , TConst.Flag.Active // strFlagActiveListToCheck
                    , out dtDB_Invoice_TempInvoice // dtDB_Invoice_TempInvoice
                    );
                ////
                strMST = TUtils.CUtils.StdParam(dtDB_Invoice_TempInvoice.Rows[0]["MST"]);
                /////
                DataTable dtDB_Invoice_license = null;

                Invoice_license_CheckDB(
                    ref alParamsCoupleError // alParamsCoupleError
                    , strMST // dtDB_Invoice_license
                    , TConst.Flag.Yes // strFlagExistToCheck
                    , TConst.Flag.Active // dtDB_Invoice_license
                    , out dtDB_Invoice_license // dtDB_Invoice_license
                    );
                ////
                myCache_ViewAbility_CheckAccessMSTWrite(
                    ref alParamsCoupleError // alParamsCoupleError
                    , strWAUserCode // strWAUserCode
                    , strMST // strMST
                    );
                ////
                Int64 nStartInvoiceNo = Convert.ToInt64(objStartInvoiceNo);
                Int64 nEndInvoiceNo = Convert.ToInt64(objEndInvoiceNo);
                if ((nStartInvoiceNo == 0 || nEndInvoiceNo == 0 || (nEndInvoiceNo - nStartInvoiceNo < 0)))
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.objTInvoiceCode", objTInvoiceCode
                        , "Check.objStartInvoiceNo", objStartInvoiceNo
                        , "Check.objEndInvoiceNo", objEndInvoiceNo
                        , "Check.ConditionalRaise", "((nStartInvoiceNo == 0 || nEndInvoiceNo == 0 || (nEndInvoiceNo - nStartInvoiceNo < 0)))"
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Invoice_TempInvoice_UpdQtyInvoiceNoX_InvalidValue
                        , null
                        , alParamsCoupleError.ToArray()
                        );
                }
                ////
            }
            #endregion

            #region // SaveTemp Invoice_Invoice:
            {
                ////
                TUtils.CUtils.MyBuildDBDT_Common(
                    _cf.db
                    , "#input_Invoice_TempInvoice"
                    , TConst.BizMix.Default_DBColType // strDefaultType
                    , new object[]{
                        "TInvoiceCode",
                        "StartInvoiceNo",
                        "EndInvoiceNo",
                        "LUDTimeUTC",
                        "LUBy",
                        "UpdQtyInvoiceNoDTimeUTC",
                        "UpdQtyInvoiceNoBy",
                        "Remark",
                        "LogLUDTimeUTC",
                        "LogLUBy",
                        }
                    , new object[]{
                            new object[]{
                                strTInvoiceCode, // TInvoiceCode
                                objStartInvoiceNo, // StartInvoiceNo
                                objEndInvoiceNo, // EndInvoiceNo
                                dtimeSys.ToString("yyyy-MM-dd HH:mm:ss"), // LUDTimeUTC
                                strWAUserCode, // LUBy
                                dtimeSys.ToString("yyyy-MM-dd HH:mm:ss"), // UpdQtyInvoiceNoDTimeUTC
                                strWAUserCode, // UpdQtyInvoiceNoBy
                                strRemark, // Remark
                                dtimeSys.ToString("yyyy-MM-dd HH:mm:ss"), // LogLUDTimeUTC
                                strWAUserCode, // LogLUBy
								}
                        }
                    );

            }
            #endregion

            #region // SaveDB:
            {
                string zzB_Update_Invoice_TempInvoice_ClauseSet_zzE = @"
								t.LogLUDTimeUTC = f.LogLUDTimeUTC
								, t.LogLUBy = f.LogLUBy
								, t.LUDTimeUTC = f.LUDTimeUTC
								, t.LUBy = f.LUBy
								, t.UpdQtyInvoiceNoDTimeUTC = f.UpdQtyInvoiceNoDTimeUTC
								, t.UpdQtyInvoiceNoBy = f.UpdQtyInvoiceNoBy
								, t.StartInvoiceNo = f.StartInvoiceNo
								, t.EndInvoiceNo = f.EndInvoiceNo
                                , t.Remark = f.Remark
								";
                ////
                string zzB_Update_Invoice_TempInvoice_zzE = CmUtils.StringUtils.Replace(@"
							---- Invoice_TempInvoice:
							update t
							set 
								zzB_Update_Invoice_TempInvoice_ClauseSet_zzE
							from Invoice_TempInvoice t --//[mylock]
                                inner join #input_Invoice_TempInvoice f --//[mylock]
                                    on t.TInvoiceCode = f.TInvoiceCode
							where (1=1)
							;
						"
                    , "zzB_Update_Invoice_TempInvoice_ClauseSet_zzE", zzB_Update_Invoice_TempInvoice_ClauseSet_zzE
                    );
                ////
                string strSqlExec = CmUtils.StringUtils.Replace(@"
						----
						zzB_Update_Invoice_TempInvoice_zzE
			
						----
						"
                    , "zzB_Update_Invoice_TempInvoice_zzE", zzB_Update_Invoice_TempInvoice_zzE
                    );
                ////
                DataSet dsExec = _cf.db.ExecQuery(strSqlExec);
                ////
            }
            #endregion

            #region // Check (t.EndInvoiceNo - t.StartInvoiceNo) < t.QtyUsed:
            {
                string strSqlCheck = CmUtils.StringUtils.Replace(@"
						--- Check:
                        select 
	                        t.TInvoiceCode
	                        , t.StartInvoiceNo
	                        , t.EndInvoiceNo
	                        , t.QtyUsed
	                        , (t.EndInvoiceNo - t.StartInvoiceNo) QtyIssued
                        from Invoice_TempInvoice t --//[mylock]
	                        inner join #input_Invoice_TempInvoice f --//[mylock]
		                        on t.TInvoiceCode = f.TInvoiceCode
                        where(1=1)
	                        and (t.EndInvoiceNo - t.StartInvoiceNo) < t.QtyUsed
                        ;
						"
                    );
                ////
                DataTable dtCheck = _cf.db.ExecQuery(strSqlCheck).Tables[0];
                ////
                if (dtCheck.Rows.Count > 0)
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.strTInvoiceCode", strTInvoiceCode
                        , "Check.objStartInvoiceNo", objStartInvoiceNo
                        , "Check.objEndInvoiceNo", objEndInvoiceNo
                        , "Check.DB.QtyUsed", dtCheck.Rows[0]["QtyUsed"]
                        , "Check.Check.ConditionRaiseError", "(t.EndInvoiceNo - t.StartInvoiceNo) < t.QtyUsed"
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Invoice_TempInvoice_UpdQtyInvoiceNoX_InvalidValue
                        , null
                        , alParamsCoupleError.ToArray()
                        );
                }

            }
            #endregion

            #region // Check IsNull(Convert(int, t.LastInvoiceNo), 0) > t.EndInvoiceNo:
            {
                string strSqlCheck = CmUtils.StringUtils.Replace(@"
						--- Check:
                        select 
	                        t.TInvoiceCode
	                        , t.EndInvoiceNo
	                        , IsNull(Convert(int, t.LastInvoiceNo), 0) LastInvoiceNo
                        from Invoice_TempInvoice t --//[mylock]
	                        inner join #input_Invoice_TempInvoice f --//[mylock]
		                        on t.TInvoiceCode = f.TInvoiceCode
                        where(1=1)
	                        and IsNull(Convert(int, t.LastInvoiceNo), 0) > t.EndInvoiceNo
                        ;
						"
                    );
                ////
                DataTable dtCheck = _cf.db.ExecQuery(strSqlCheck).Tables[0];
                ////
                if (dtCheck.Rows.Count > 0)
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.strTInvoiceCode", strTInvoiceCode
                        , "Check.objEndInvoiceNo", objEndInvoiceNo
                        , "Check.DB.LastInvoiceNo", dtCheck.Rows[0]["LastInvoiceNo"]
                        , "Check.Check.ConditionRaiseError", "IsNull(Convert(int, t.LastInvoiceNo), 0) > t.EndInvoiceNo"
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Invoice_TempInvoice_UpdQtyInvoiceNoX_InvalidValue
                        , null
                        , alParamsCoupleError.ToArray()
                        );
                }

            }
            #endregion

            #region // Invoice_license_TotalQtyIssued:
            {
                Invoice_license_TotalQtyIssued(
                    ref alParamsCoupleError
                    , strMST // objMST
                    , dtimeSys // dtimeSys
                    , strWAUserCode // objUserCode
                    );
            }
            #endregion

            // Return Good:
            // MyCodeLabel_Done:
            // return;
            //TDALUtils.DBUtils.CommitSafety(_cf.db);
            //mdsFinal.AcceptChanges();
            //return mdsFinal;		
        }

        private void Invoice_TempInvoice_IssuedX(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            , DateTime dtimeSys
            ////
            , object objTInvoiceCode
            , object objEffDateStart
            , object objEffDateEnd
            , object objRemark
            )
        {
            #region // Temp:
            //int nTidSeq = 0;
            //bool bMyDebugSql = false;
            string strFunctionName = "Invoice_TempInvoice_IssuedX";
            //string strErrorCodeDefault = TError.ErrTCGQLTV.Form_Receipt_Save;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
                ////
                //, "objFlagIsDelete",objFlagIsDelete
				////
                , "objTInvoiceCode", objTInvoiceCode
                , "objEffDateStart", objEffDateStart
                , "objEffDateEnd", objEffDateEnd
                , "objRemark", objRemark
                });
            //ArrayList alPCErrEx = new ArrayList();
            ////
            Hashtable htParamsSql = new Hashtable();
            #endregion

            #region // Convert Input:
            //alParamsCoupleError.AddRange(new object[]{
            //    "Check.dsData", TJson.JsonConvert.SerializeObject(dsData)
            //    });
            #endregion

            #region // Refine and Check Input:
            ////
            //bool bIsDelete = CmUtils.StringUtils.StringEqual(objFlagIsDelete, TConst.Flag.Yes);
            ////
            string strTInvoiceCode = TUtils.CUtils.StdParam(objTInvoiceCode);
            string strEffDateStart = TUtils.CUtils.StdParam(objEffDateStart);
            string strEffDateEnd = "2100-01-01";
            string strRemark = string.Format("{0}", objRemark);
            string strMST = "";
            ////
            DataTable dtDB_Invoice_TempInvoice = null;
            {
                ////
                Invoice_TempInvoice_CheckDB(
                    ref alParamsCoupleError // alParamsCoupleError
                    , strTInvoiceCode // objShipNo
                    , TConst.Flag.Yes // strFlagExistToCheck
                    , TConst.TInvoiceStatus.Pending // strTInvoiceStatusListToCheck
                    , TConst.Flag.Active // strFlagActiveListToCheck
                    , out dtDB_Invoice_TempInvoice // dtDB_Invoice_TempInvoice
                    );
                ////
                strMST = TUtils.CUtils.StdParam(dtDB_Invoice_TempInvoice.Rows[0]["MST"]);

                myCache_ViewAbility_CheckAccessMSTWrite(
                    ref alParamsCoupleError // alParamsCoupleError
                    , strWAUserCode // strWAUserCode
                    , strMST // strMST
                    );
                ////
                Int64 nEndInvoiceNo = Convert.ToInt64(dtDB_Invoice_TempInvoice.Rows[0]["EndInvoiceNo"]);
                Int64 nStartInvoiceNo = Convert.ToInt64(dtDB_Invoice_TempInvoice.Rows[0]["StartInvoiceNo"]);
                ////
                if (nEndInvoiceNo == 0 || nStartInvoiceNo == 0)
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.strTInvoiceCode", strTInvoiceCode
                        , "Check.nStartInvoiceNo", nStartInvoiceNo
                        , "Check.nEndInvoiceNo", nEndInvoiceNo
                        , "Check.ErrConditionRaise", "(nEndInvoiceNo - nStartInvoiceNo)"
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Invoice_TempInvoice_IssuedX_InvalidEndInvoiceNoAndStatrInvoiceNo
                        , null
                        , alParamsCoupleError.ToArray()
                        );

                }
                ////
                if (dtimeSys.ToString("yyyy-MM-dd").CompareTo(strEffDateStart) < 0)
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.strTInvoiceCode", strTInvoiceCode
                        , "Check.dtimeSys", dtimeSys.ToString("yyyy-MM-dd")
                        , "Check.strEffDateStart", strEffDateStart
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Invoice_TempInvoice_IssuedX_InvalidIEffDateStartAfterSysDate
                        , null
                        , alParamsCoupleError.ToArray()
                        );
                }
            }
            #endregion

            #region // SaveTemp Invoice_TempInvoice:
            ////
            {
                TUtils.CUtils.MyBuildDBDT_Common(
                    _cf.db
                    , "#input_Invoice_TempInvoice"
                    , new object[]{
                        "TInvoiceCode", TConst.BizMix.Default_DBColType,
                        "EffDateStart", TConst.BizMix.Default_DBColType,
                        "EffDateEnd", TConst.BizMix.Default_DBColType,
                        "LUDTimeUTC", TConst.BizMix.Default_DBColType,
                        "LUBy", TConst.BizMix.Default_DBColType,
                        "IssuedDTimeUTC", TConst.BizMix.Default_DBColType,
                        "IssuedBy", TConst.BizMix.Default_DBColType,
                        "TInvoiceStatus", TConst.BizMix.Default_DBColType,
                        "Remark", TConst.BizMix.Default_DBColType,
                        "LogLUDTimeUTC", TConst.BizMix.Default_DBColType,
                        "LogLUBy", TConst.BizMix.Default_DBColType,
                        }
                    , new object[]{
                        new object[]{
                            strTInvoiceCode, // TInvoiceCode
                            strEffDateStart,// EffDateStart
                            strEffDateEnd, // EffDateEnd
                            dtimeSys.ToString("yyyy-MM-dd HH:mm:ss"), // LUDTimeUTC
                            strWAUserCode, // LUBy
                            dtimeSys.ToString("yyyy-MM-dd HH:mm:ss"), // IssuedDTimeUTC
                            strWAUserCode, // IssuedBy
                            TConst.TInvoiceStatus.Issued, // TInvoiceStatus
                            strRemark, // Remark
                            dtimeSys.ToString("yyyy-MM-dd HH:mm:ss"), // LogLUDTimeUTC
                            strWAUserCode, // LogLUBy
                            }
                        }
                    );
            }
            #endregion

            #region // SaveDB:
            {
                string zzB_Update_Invoice_TempInvoice_ClauseSet_zzE = @"
								t.LogLUDTimeUTC = f.LogLUDTimeUTC
								, t.LogLUBy = f.LogLUBy
								, t.LUDTimeUTC = f.LUDTimeUTC
								, t.LUBy = f.LUBy
								, t.IssuedDTimeUTC = f.IssuedDTimeUTC
								, t.IssuedBy = f.IssuedBy
								, t.EffDateStart = f.EffDateStart
								, t.EffDateEnd = f.EffDateEnd
                                , t.TInvoiceStatus = f.TInvoiceStatus
                                , t.Remark = f.Remark
								";
                ////
                string zzB_Update_Invoice_TempInvoice_zzE = CmUtils.StringUtils.Replace(@"
							---- Invoice_TempInvoice:
							update t
							set 
								zzB_Update_Invoice_TempInvoice_ClauseSet_zzE
							from Invoice_TempInvoice t --//[mylock]
                                inner join #input_Invoice_TempInvoice f --//[mylock]
                                    on t.TInvoiceCode = f.TInvoiceCode
							where (1=1)
							;
						"
                    , "zzB_Update_Invoice_TempInvoice_ClauseSet_zzE", zzB_Update_Invoice_TempInvoice_ClauseSet_zzE
                    );
                string strSqlExec = CmUtils.StringUtils.Replace(@"
						----
						zzB_Update_Invoice_TempInvoice_zzE
			
						----
						"
                    , "zzB_Update_Invoice_TempInvoice_zzE", zzB_Update_Invoice_TempInvoice_zzE
                    );
                ////
                DataSet dsExec = _cf.db.ExecQuery(strSqlExec);
                ////
            }
            #endregion

            #region // Invoice_license_TotalQtyIssued:
            {
                Invoice_license_TotalQtyIssued(
                    ref alParamsCoupleError
                    , strMST // objMST
                    , dtimeSys // dtimeSys
                    , strWAUserCode // objUserCode
                    );
            }
            #endregion

            // Return Good:
            // MyCodeLabel_Done:
            // return;
            //TDALUtils.DBUtils.CommitSafety(_cf.db);
            //mdsFinal.AcceptChanges();
            //return mdsFinal;		
        }

        private void Invoice_TempInvoice_InActiveX(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            , DateTime dtimeSys
            ////
            , object objTInvoiceCode
            , object objRemark
            )
        {
            #region // Temp:
            //int nTidSeq = 0;
            //bool bMyDebugSql = false;
            string strFunctionName = "Invoice_TempInvoice_InActiveX";
            //string strErrorCodeDefault = TError.ErrTCGQLTV.Form_Receipt_Save;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
                ////
                //, "objFlagIsDelete",objFlagIsDelete
				////
                , "objTInvoiceCode", objTInvoiceCode
                , "objRemark", objRemark
                });
            //ArrayList alPCErrEx = new ArrayList();
            ////
            Hashtable htParamsSql = new Hashtable();
            #endregion

            #region // Convert Input:
            //alParamsCoupleError.AddRange(new object[]{
            //    "Check.dsData", TJson.JsonConvert.SerializeObject(dsData)
            //    });
            #endregion

            #region // Refine and Check Input:
            ////
            //bool bIsDelete = CmUtils.StringUtils.StringEqual(objFlagIsDelete, TConst.Flag.Yes);
            ////
            string strTInvoiceCode = TUtils.CUtils.StdParam(objTInvoiceCode);
            string strRemark = string.Format("{0}", objRemark);
            ////
            DataTable dtDB_Invoice_TempInvoice = null;
            {
                ////
                Invoice_TempInvoice_CheckDB(
                    ref alParamsCoupleError // alParamsCoupleError
                    , strTInvoiceCode // objShipNo
                    , TConst.Flag.Yes // strFlagExistToCheck
                    , TConst.TInvoiceStatus.Issued // strTInvoiceStatusListToCheck
                    , TConst.Flag.Active // strFlagActiveListToCheck
                    , out dtDB_Invoice_TempInvoice // dtDB_Invoice_TempInvoice
                    );
                ////
                string strMST = TUtils.CUtils.StdParam(dtDB_Invoice_TempInvoice.Rows[0]["MST"]);

                myCache_ViewAbility_CheckAccessMSTWrite(
                    ref alParamsCoupleError // alParamsCoupleError
                    , strWAUserCode // strWAUserCode
                    , strMST // strMST
                    );
                ////
            }
            #endregion

            #region // SaveTemp Invoice_TempInvoice:
            ////
            {
                TUtils.CUtils.MyBuildDBDT_Common(
                    _cf.db
                    , "#input_Invoice_TempInvoice"
                    , new object[]{
                        "TInvoiceCode", TConst.BizMix.Default_DBColType,
                        "EffDateEnd", TConst.BizMix.Default_DBColType,
                        "LUDTimeUTC", TConst.BizMix.Default_DBColType,
                        "LUBy", TConst.BizMix.Default_DBColType,
                        "InActiveDTimeUTC", TConst.BizMix.Default_DBColType,
                        "InActiveBy", TConst.BizMix.Default_DBColType,
                        "Remark", TConst.BizMix.Default_DBColType,
                        "FlagActive", TConst.BizMix.Default_DBColType,
                        "LogLUDTimeUTC", TConst.BizMix.Default_DBColType,
                        "LogLUBy", TConst.BizMix.Default_DBColType,
                        }
                    , new object[]{
                        new object[]{
                            strTInvoiceCode, // TInvoiceCode
                            dtimeSys.ToString("yyyy-MM-dd HH:mm:ss"), // EffDateEnd
                            dtimeSys.ToString("yyyy-MM-dd HH:mm:ss"), // LUDTimeUTC
                            strWAUserCode, // LUBy
                            dtimeSys.ToString("yyyy-MM-dd HH:mm:ss"), // InActiveDTimeUTC
                            strWAUserCode, // InActiveBy
                            strRemark, // Remark
                            TConst.Flag.Inactive, // strFlagActive
                            dtimeSys.ToString("yyyy-MM-dd HH:mm:ss"), // LogLUDTimeUTC
                            strWAUserCode, // LogLUBy
                            }
                        }
                    );
            }
            #endregion

            #region // SaveDB:
            {
                string zzB_Update_Invoice_TempInvoice_ClauseSet_zzE = @"
								t.LogLUDTimeUTC = f.LogLUDTimeUTC
								, t.LogLUBy = f.LogLUBy
								, t.LUDTimeUTC = f.LUDTimeUTC
								, t.LUBy = f.LUBy
								, t.InActiveDTimeUTC = f.InActiveDTimeUTC
								, t.InActiveBy = f.InActiveBy
								, t.EffDateEnd = f.EffDateEnd
                                , t.Remark = f.Remark
                                , t.FlagActive = f.FlagActive
								";
                ////
                string zzB_Update_Invoice_TempInvoice_zzE = CmUtils.StringUtils.Replace(@"
							---- Invoice_TempInvoice:
							update t
							set 
								zzB_Update_Invoice_TempInvoice_ClauseSet_zzE
							from Invoice_TempInvoice t --//[mylock]
                                inner join #input_Invoice_TempInvoice f --//[mylock]
                                    on t.TInvoiceCode = f.TInvoiceCode
							where (1=1)
							;
						"
                    , "zzB_Update_Invoice_TempInvoice_ClauseSet_zzE", zzB_Update_Invoice_TempInvoice_ClauseSet_zzE
                    );
                ////
                string strSqlExec = CmUtils.StringUtils.Replace(@"
						----
						zzB_Update_Invoice_TempInvoice_zzE
			
						----
						"
                    , "zzB_Update_Invoice_TempInvoice_zzE", zzB_Update_Invoice_TempInvoice_zzE
                    );
                ////
                DataSet dsExec = _cf.db.ExecQuery(strSqlExec);
                ////
            }
            #endregion

            // Return Good:
            // MyCodeLabel_Done:
            // return;
            //TDALUtils.DBUtils.CommitSafety(_cf.db);
            //mdsFinal.AcceptChanges();
            //return mdsFinal;		
        }

        public DataSet Invoice_TempInvoice_Save(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            ////
            , object objFlagIsDelete
            ////
            , object objTInvoiceCode
            , object objMST
            , object objPaymentMethodCode
            , object objInvoiceType
            , object objTInvoiceName
            , object objFormNo
            , object objSign
            , object objNNTName
            , object objNNTAddress
            , object objLogoFilePath
            , object objTInvoiceBody
            , object objWatermarkFilePath
            , object objInvoiceTGroupCode
            , object objRemark
            )
        {
            #region // Temp:
            DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            //int nTidSeq = 0;
            DateTime dtimeSys = DateTime.UtcNow;
            string strFunctionName = "Invoice_TempInvoice_Save";
            string strErrorCodeDefault = TError.ErridnInventory.Invoice_TempInvoice_Save;
            alParamsCoupleError.AddRange(new object[]{
                    "strFunctionName", strFunctionName
                    , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
                    /////
                    , "objFlagIsDelete", objFlagIsDelete
			        ////
                    , "objTInvoiceCode", objTInvoiceCode
                    , "objMST", objMST
                    , "objPaymentMethodCode", objPaymentMethodCode
                    , "objInvoiceType", objInvoiceType
                    , "objTInvoiceName", objTInvoiceName
                    , "objFormno", objFormNo
                    , "objSign", objSign
                    , "objNNTName", objNNTName
                    , "objNNTAddress", objNNTAddress
                    , "objLogoFilePath", objLogoFilePath
                    , "objTInvoiceBody", objTInvoiceBody
                    , "objWatermarkFilePath", objWatermarkFilePath
                    , "objInvoiceTGroupCode", objInvoiceTGroupCode
                    , "objRemark", objRemark
                    });
            #endregion

            try
            {
                #region // Init:
                //_cf.db.LogUserId = _cf.sinf.strUserCode;
                _cf.db.BeginTransaction();

                // Write RequestLog:
                _cf.ProcessBizReq_OutSide(
                    strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    , alParamsCoupleError // alParamsCoupleError
                    );

                // Sys_User_CheckAuthentication:
                //Sys_User_CheckAuthentication(
                //    ref alParamsCoupleError
                //    , strWAUserCode
                //    , strWAUserPassword
                //    );

                // Check Access/Deny:
                Sys_Access_CheckDenyV30(
                    ref alParamsCoupleError
                    , strWAUserCode
                    , strFunctionName
                    );
                #endregion

                #region // Invoice_TempInvoice_SaveX:
                //DataSet dsGetData = null;
                {
                    Invoice_TempInvoice_SaveX(
                        strTid // strTid
                        , strGwUserCode // strGwUserCode
                        , strGwPassword // strGwPassword
                        , strWAUserCode // strWAUserCode
                        , strWAUserPassword // strWAUserPassword
                        , ref alParamsCoupleError // alParamsCoupleError
                        , dtimeSys // dtimeSys
                                   ////
                        , objFlagIsDelete // objFlagIsDelete
                                          ////
                        , objTInvoiceCode //  objTInvoiceCode
                        , objMST //   objMST
                        , objPaymentMethodCode //   objPaymentMethodCode
                        , objInvoiceType //   objInvoiceType
                        , objTInvoiceName //   objTInvoiceName
                        , objFormNo //   objFormNo
                        , objSign //   objSign
                        , objNNTName //   objNNTName
                        , objNNTAddress //   objNNTAddress
                        , objLogoFilePath //   objLogoFilePath
                        , objTInvoiceBody //   objTInvoiceBody
                        , objWatermarkFilePath //   objWatermarkFilePath
                        , objInvoiceTGroupCode // objInvoiceTGroupCode
                        , objRemark //   objRemark
                        );
                }
                ////
                //CmUtils.DataUtils.MoveDataTable(ref mdsFinal, ref dsGetData);
                #endregion

                // Return Good:
                TDALUtils.DBUtils.CommitSafety(_cf.db);
                mdsFinal.AcceptChanges();
                return mdsFinal;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Rollback:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);

                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsFinal
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Rollback and Release resources:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);
                TDALUtils.DBUtils.ReleaseAllSemaphore(_cf.db_Sys, true);

                // Write ReturnLog:
                _cf.ProcessBizReturn_OutSide(
                    ref mdsFinal // mdsFinal
                    , strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    );
                #endregion
            }
        }
        public DataSet Invoice_TempInvoice_UpdQtyInvoiceNo(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            ////
            , object objTInvoiceCode
            , object objStartInvoiceNo
            , object objEndInvoiceNo
            , object objRemark
            )
        {
            #region // Temp:
            DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            //int nTidSeq = 0;
            DateTime dtimeSys = DateTime.UtcNow;
            string strFunctionName = "Invoice_TempInvoice_UpdQtyInvoiceNo";
            string strErrorCodeDefault = TError.ErridnInventory.Invoice_TempInvoice_UpdQtyInvoiceNo;
            alParamsCoupleError.AddRange(new object[]{
                    "strFunctionName", strFunctionName
                    , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
                    /////
                    , "objTInvoiceCode", objTInvoiceCode
                    , "objStartInvoiceNo", objStartInvoiceNo
                    , "objEndInvoiceNo", objEndInvoiceNo
                    , "objRemark", objRemark
                    });
            #endregion

            try
            {
                #region // Init:
                //_cf.db.LogUserId = _cf.sinf.strUserCode;
                _cf.db.BeginTransaction();

                // Write RequestLog:
                _cf.ProcessBizReq_OutSide(
                    strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    , alParamsCoupleError // alParamsCoupleError
                    );

                // Sys_User_CheckAuthentication:
                //Sys_User_CheckAuthentication(
                //    ref alParamsCoupleError
                //    , strWAUserCode
                //    , strWAUserPassword
                //    );

                // Check Access/Deny:
                Sys_Access_CheckDenyV30(
                    ref alParamsCoupleError
                    , strWAUserCode
                    , strFunctionName
                    );
                #endregion

                #region // Invoice_TempInvoice_UpdQtyInvoiceNoX:
                //DataSet dsGetData = null;
                {
                    Invoice_TempInvoice_UpdQtyInvoiceNoX(
                        strTid // strTid
                        , strGwUserCode // strGwUserCode
                        , strGwPassword // strGwPassword
                        , strWAUserCode // strWAUserCode
                        , strWAUserPassword // strWAUserPassword
                        , ref alParamsCoupleError // alParamsCoupleError
                        , dtimeSys // dtimeSys
                                   ////
                        , objTInvoiceCode // objTInvoiceCode
                        , objStartInvoiceNo //  objStartInvoiceNo
                        , objEndInvoiceNo //  objEndInvoiceNo
                        , objRemark //  objRemark
                        );
                }
                ////
                //CmUtils.DataUtils.MoveDataTable(ref mdsFinal, ref dsGetData);
                #endregion

                // Return Good:
                TDALUtils.DBUtils.CommitSafety(_cf.db);
                mdsFinal.AcceptChanges();
                return mdsFinal;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Rollback:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);

                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsFinal
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Rollback and Release resources:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);
                TDALUtils.DBUtils.ReleaseAllSemaphore(_cf.db_Sys, true);

                // Write ReturnLog:
                _cf.ProcessBizReturn_OutSide(
                    ref mdsFinal // mdsFinal
                    , strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    );
                #endregion
            }
        }
        public DataSet Invoice_TempInvoice_Issued(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            ////
            , object objTInvoiceCode
            , object objEffDateStart
            //, object objEndInvoiceNo
            , object objRemark
            )
        {
            #region // Temp:
            DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            //int nTidSeq = 0;
            DateTime dtimeSys = DateTime.UtcNow;
            string strFunctionName = "Invoice_TempInvoice_Issued";
            string strErrorCodeDefault = TError.ErridnInventory.Invoice_TempInvoice_Issued;
            alParamsCoupleError.AddRange(new object[]{
                    "strFunctionName", strFunctionName
                    , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
                    /////
                    , "objTInvoiceCode", objTInvoiceCode
                    , "objEffDateStart", objEffDateStart
                    , "objRemark", objRemark
                    });
            #endregion

            try
            {
                #region // Init:
                //_cf.db.LogUserId = _cf.sinf.strUserCode;
                _cf.db.BeginTransaction();

                // Write RequestLog:
                _cf.ProcessBizReq_OutSide(
                    strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    , alParamsCoupleError // alParamsCoupleError
                    );

                // Sys_User_CheckAuthentication:
                //Sys_User_CheckAuthentication(
                //    ref alParamsCoupleError
                //    , strWAUserCode
                //    , strWAUserPassword
                //    );

                // Check Access/Deny:
                Sys_Access_CheckDenyV30(
                    ref alParamsCoupleError
                    , strWAUserCode
                    , strFunctionName
                    );
                #endregion

                #region // Invoice_TempInvoice_IssuedX:
                //DataSet dsGetData = null;
                {
                    Invoice_TempInvoice_IssuedX(
                        strTid // strTid
                        , strGwUserCode // strGwUserCode
                        , strGwPassword // strGwPassword
                        , strWAUserCode // strWAUserCode
                        , strWAUserPassword // strWAUserPassword
                        , ref alParamsCoupleError // alParamsCoupleError
                        , dtimeSys // dtimeSys
                                   ////
                        , objTInvoiceCode // objTInvoiceCode
                        , objEffDateStart //  objEffDateStart
                        , null // objEffDateEnd
                        , objRemark //  objRemark
                        );
                }
                ////
                //CmUtils.DataUtils.MoveDataTable(ref mdsFinal, ref dsGetData);
                #endregion

                // Return Good:
                TDALUtils.DBUtils.CommitSafety(_cf.db);
                mdsFinal.AcceptChanges();
                return mdsFinal;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Rollback:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);

                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsFinal
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Rollback and Release resources:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);
                TDALUtils.DBUtils.ReleaseAllSemaphore(_cf.db_Sys, true);

                // Write ReturnLog:
                _cf.ProcessBizReturn_OutSide(
                    ref mdsFinal // mdsFinal
                    , strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    );
                #endregion
            }
        }
        public DataSet Invoice_TempInvoice_InActive(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            ////
            , object objTInvoiceCode
            , object objRemark
            )
        {
            #region // Temp:
            DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            //int nTidSeq = 0;
            DateTime dtimeSys = DateTime.UtcNow;
            string strFunctionName = "Invoice_TempInvoice_InActive";
            string strErrorCodeDefault = TError.ErridnInventory.Invoice_TempInvoice_InActive;
            alParamsCoupleError.AddRange(new object[]{
                    "strFunctionName", strFunctionName
                    , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
                    /////
                    , "objTInvoiceCode", objTInvoiceCode
                    , "objRemark", objRemark
                    });
            #endregion

            try
            {
                #region // Init:
                //_cf.db.LogUserId = _cf.sinf.strUserCode;
                _cf.db.BeginTransaction();

                // Write RequestLog:
                _cf.ProcessBizReq_OutSide(
                    strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    , alParamsCoupleError // alParamsCoupleError
                    );

                // Sys_User_CheckAuthentication:
                //Sys_User_CheckAuthentication(
                //    ref alParamsCoupleError
                //    , strWAUserCode
                //    , strWAUserPassword
                //    );

                // Check Access/Deny:
                Sys_Access_CheckDenyV30(
                    ref alParamsCoupleError
                    , strWAUserCode
                    , strFunctionName
                    );
                #endregion

                #region // Invoice_TempInvoice_IssuedX:
                //DataSet dsGetData = null;
                {
                    Invoice_TempInvoice_InActiveX(
                        strTid // strTid
                        , strGwUserCode // strGwUserCode
                        , strGwPassword // strGwPassword
                        , strWAUserCode // strWAUserCode
                        , strWAUserPassword // strWAUserPassword
                        , ref alParamsCoupleError // alParamsCoupleError
                        , dtimeSys // dtimeSys
                                   ////
                        , objTInvoiceCode // objTInvoiceCode
                        , objRemark //  objRemark
                        );
                }
                ////
                //CmUtils.DataUtils.MoveDataTable(ref mdsFinal, ref dsGetData);
                #endregion

                // Return Good:
                TDALUtils.DBUtils.CommitSafety(_cf.db);
                mdsFinal.AcceptChanges();
                return mdsFinal;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Rollback:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);

                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsFinal
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Rollback and Release resources:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);
                TDALUtils.DBUtils.ReleaseAllSemaphore(_cf.db_Sys, true);

                // Write ReturnLog:
                _cf.ProcessBizReturn_OutSide(
                    ref mdsFinal // mdsFinal
                    , strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    );
                #endregion
            }
        }
        public DataSet WAS_Invoice_TempInvoice_Get(
            ref ArrayList alParamsCoupleError
            , RQ_Invoice_TempInvoice objRQ_Invoice_TempInvoice
            ////
            , out RT_Invoice_TempInvoice objRT_Invoice_TempInvoice
            )
        {
            #region // Temp:
            string strTid = objRQ_Invoice_TempInvoice.Tid;
            objRT_Invoice_TempInvoice = new RT_Invoice_TempInvoice();
            DataSet mdsResult = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            DateTime dtimeSys = DateTime.UtcNow;
            //DataSet mdsExec = null;
            //DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(objRQ_Invoice_TempInvoice.Tid);
            //int nTidSeq = 0;
            //bool bNeedTransaction = true;
            string strFunctionName = "Invoice_TempInvoice_Get";
            string strErrorCodeDefault = TError.ErridnInventory.Invoice_TempInvoice_Get;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
				});
            #endregion

            try
            {
                #region // Init:
                #endregion

                #region // Refine and Check Input:
                List<MySummaryTable> lst_MySummaryTable = new List<MySummaryTable>();
                List<Invoice_TempInvoice> lst_Invoice_TempInvoice = new List<Invoice_TempInvoice>();
                bool bGet_Invoice_TempInvoice = (objRQ_Invoice_TempInvoice.Rt_Cols_Invoice_TempInvoice != null && objRQ_Invoice_TempInvoice.Rt_Cols_Invoice_TempInvoice.Length > 0);
                #endregion

                #region // WS_Invoice_TempInvoice_Get:
                mdsResult = Invoice_TempInvoice_Get(
                    objRQ_Invoice_TempInvoice.Tid // strTid
                    , objRQ_Invoice_TempInvoice.GwUserCode // strGwUserCode
                    , objRQ_Invoice_TempInvoice.GwPassword // strGwPassword
                    , objRQ_Invoice_TempInvoice.WAUserCode // strUserCode
                    , objRQ_Invoice_TempInvoice.WAUserPassword // strUserPassword
                    , ref alParamsCoupleError // alParamsCoupleError
                                              //// Filter:
                    , objRQ_Invoice_TempInvoice.Ft_RecordStart // strFt_RecordStart
                    , objRQ_Invoice_TempInvoice.Ft_RecordCount // strFt_RecordCount
                    , objRQ_Invoice_TempInvoice.Ft_WhereClause // strFt_WhereClause
                                                               //// Return:
                    , objRQ_Invoice_TempInvoice.Rt_Cols_Invoice_TempInvoice // strRt_Cols_Invoice_TempInvoice
                    );
                #endregion

                #region // GetData:
                if (!CmUtils.CMyDataSet.HasError(mdsResult))
                {
                    ////
                    DataTable dt_MySummaryTable = mdsResult.Tables["MySummaryTable"].Copy();
                    lst_MySummaryTable = TUtils.DataTableCmUtils.ToListof<MySummaryTable>(dt_MySummaryTable);
                    objRT_Invoice_TempInvoice.MySummaryTable = lst_MySummaryTable[0];
                    ////
                    if (bGet_Invoice_TempInvoice)
                    {
                        ////
                        DataTable dt_Invoice_TempInvoice = mdsResult.Tables["Invoice_TempInvoice"].Copy();
                        lst_Invoice_TempInvoice = TUtils.DataTableCmUtils.ToListof<Invoice_TempInvoice>(dt_Invoice_TempInvoice);
                        objRT_Invoice_TempInvoice.Lst_Invoice_TempInvoice = lst_Invoice_TempInvoice;
                    }
                }
                #endregion

                // Return Good:
                return mdsResult;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsResult
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Write ReturnLog:
                //_cf.ProcessBizReturn(
                //	ref mdsResult // mdsFinal
                //	, strTid // strTid
                //	, strFunctionName // strFunctionName
                //	);
                #endregion
            }
        }

        public DataSet WAS_Invoice_TempInvoice_Save(
            ref ArrayList alParamsCoupleError
            , RQ_Invoice_TempInvoice objRQ_Invoice_TempInvoice
            ////
            , out RT_Invoice_TempInvoice objRT_Invoice_TempInvoice
            )
        {
            #region // Temp:
            string strTid = objRQ_Invoice_TempInvoice.Tid;
            objRT_Invoice_TempInvoice = new RT_Invoice_TempInvoice();
            DataSet mdsResult = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            DateTime dtimeSys = DateTime.UtcNow;
            //DataSet mdsExec = null;
            //DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(objRQ_Invoice_TempInvoice.Tid);
            //int nTidSeq = 0;
            //bool bNeedTransaction = true;
            string strFunctionName = "WAS_Invoice_TempInvoice_Save";
            string strErrorCodeDefault = TError.ErridnInventory.WAS_Invoice_TempInvoice_Save;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
				});
            #endregion

            try
            {
                #region // Init:
                #endregion

                #region // Refine and Check Input:
                List<Invoice_TempInvoice> lst_Invoice_TempInvoice = new List<Invoice_TempInvoice>();
                bool bGet_Invoice_TempInvoice = (objRQ_Invoice_TempInvoice.Rt_Cols_Invoice_TempInvoice != null && objRQ_Invoice_TempInvoice.Rt_Cols_Invoice_TempInvoice.Length > 0);
                #endregion

                #region // Invoice_TempInvoice_Save:
                mdsResult = Invoice_TempInvoice_Save(
                    objRQ_Invoice_TempInvoice.Tid // strTid
                    , objRQ_Invoice_TempInvoice.GwUserCode // strGwUserCode
                    , objRQ_Invoice_TempInvoice.GwPassword // strGwPassword
                    , objRQ_Invoice_TempInvoice.WAUserCode // strUserCode
                    , objRQ_Invoice_TempInvoice.WAUserPassword // strUserPassword
                    , ref alParamsCoupleError // alParamsCoupleError
                                              //// Filter:
                    , objRQ_Invoice_TempInvoice.FlagIsDelete // objFlagIsDelete
                                                             /////
                    , objRQ_Invoice_TempInvoice.Invoice_TempInvoice.TInvoiceCode // objTInvoiceCode
                    , objRQ_Invoice_TempInvoice.Invoice_TempInvoice.MST // objMST
                    , objRQ_Invoice_TempInvoice.Invoice_TempInvoice.PaymentMethodCode // objPaymentMethodCode
                    , objRQ_Invoice_TempInvoice.Invoice_TempInvoice.InvoiceType // objPaymentMethodCode
                    , objRQ_Invoice_TempInvoice.Invoice_TempInvoice.TInvoiceName // objTInvoiceName
                    , objRQ_Invoice_TempInvoice.Invoice_TempInvoice.FormNo // objFormNo
                    , objRQ_Invoice_TempInvoice.Invoice_TempInvoice.Sign // objSign
                    , objRQ_Invoice_TempInvoice.Invoice_TempInvoice.NNTName // objNNTName
                    , objRQ_Invoice_TempInvoice.Invoice_TempInvoice.NNTAddress // objNNTAddress
                    , objRQ_Invoice_TempInvoice.Invoice_TempInvoice.LogoFilePath // objLogoFilePath
                    , objRQ_Invoice_TempInvoice.Invoice_TempInvoice.TInvoiceBody // objTInvoiceBody
                    , objRQ_Invoice_TempInvoice.Invoice_TempInvoice.WatermarkFilePath // objWatermarkFilePath
                    , objRQ_Invoice_TempInvoice.Invoice_TempInvoice.InvoiceTGroupCode // objInvoiceTGroupCode
                    , objRQ_Invoice_TempInvoice.Invoice_TempInvoice.Remark // objRemark
                    );
                #endregion

                // Return Good:
                return mdsResult;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsResult
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Write ReturnLog:
                //_cf.ProcessBizReturn(
                //	ref mdsResult // mdsFinal
                //	, strTid // strTid
                //	, strFunctionName // strFunctionName
                //	);
                #endregion
            }
        }

        public DataSet WAS_Invoice_TempInvoice_UpdQtyInvoiceNo(
            ref ArrayList alParamsCoupleError
            , RQ_Invoice_TempInvoice objRQ_Invoice_TempInvoice
            ////
            , out RT_Invoice_TempInvoice objRT_Invoice_TempInvoice
            )
        {
            #region // Temp:
            string strTid = objRQ_Invoice_TempInvoice.Tid;
            objRT_Invoice_TempInvoice = new RT_Invoice_TempInvoice();
            DataSet mdsResult = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            DateTime dtimeSys = DateTime.UtcNow;
            //DataSet mdsExec = null;
            //DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(objRQ_Invoice_TempInvoice.Tid);
            //int nTidSeq = 0;
            //bool bNeedTransaction = true;
            string strFunctionName = "WAS_Invoice_TempInvoice_UpdQtyInvoiceNo";
            string strErrorCodeDefault = TError.ErridnInventory.WAS_Invoice_TempInvoice_UpdQtyInvoiceNo;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
				});
            #endregion

            try
            {
                #region // Init:
                #endregion

                #region // Refine and Check Input:
                List<Invoice_TempInvoice> lst_Invoice_TempInvoice = new List<Invoice_TempInvoice>();
                bool bGet_Invoice_TempInvoice = (objRQ_Invoice_TempInvoice.Rt_Cols_Invoice_TempInvoice != null && objRQ_Invoice_TempInvoice.Rt_Cols_Invoice_TempInvoice.Length > 0);
                #endregion

                #region // Invoice_TempInvoice_UpdQtyInvoiceNo:
                mdsResult = Invoice_TempInvoice_UpdQtyInvoiceNo(
                    objRQ_Invoice_TempInvoice.Tid // strTid
                    , objRQ_Invoice_TempInvoice.GwUserCode // strGwUserCode
                    , objRQ_Invoice_TempInvoice.GwPassword // strGwPassword
                    , objRQ_Invoice_TempInvoice.WAUserCode // strUserCode
                    , objRQ_Invoice_TempInvoice.WAUserPassword // strUserPassword
                    , ref alParamsCoupleError // alParamsCoupleError
                                              //// Filter:
                    , objRQ_Invoice_TempInvoice.Invoice_TempInvoice.TInvoiceCode // objTInvoiceCode
                    , objRQ_Invoice_TempInvoice.Invoice_TempInvoice.StartInvoiceNo // objStartInvoiceNo
                    , objRQ_Invoice_TempInvoice.Invoice_TempInvoice.EndInvoiceNo // objEndInvoiceNo
                    , objRQ_Invoice_TempInvoice.Invoice_TempInvoice.Remark // objRemark
                    );
                #endregion

                // Return Good:
                return mdsResult;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsResult
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Write ReturnLog:
                //_cf.ProcessBizReturn(
                //	ref mdsResult // mdsFinal
                //	, strTid // strTid
                //	, strFunctionName // strFunctionName
                //	);
                #endregion
            }
        }

        public DataSet WAS_Invoice_TempInvoice_Issued(
            ref ArrayList alParamsCoupleError
            , RQ_Invoice_TempInvoice objRQ_Invoice_TempInvoice
            ////
            , out RT_Invoice_TempInvoice objRT_Invoice_TempInvoice
            )
        {
            #region // Temp:
            string strTid = objRQ_Invoice_TempInvoice.Tid;
            objRT_Invoice_TempInvoice = new RT_Invoice_TempInvoice();
            DataSet mdsResult = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            DateTime dtimeSys = DateTime.UtcNow;
            //DataSet mdsExec = null;
            //DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(objRQ_Invoice_TempInvoice.Tid);
            //int nTidSeq = 0;
            //bool bNeedTransaction = true;
            string strFunctionName = "WAS_Invoice_TempInvoice_Issued";
            string strErrorCodeDefault = TError.ErridnInventory.WAS_Invoice_TempInvoice_Issued;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
				});
            #endregion

            try
            {
                #region // Init:
                #endregion

                #region // Refine and Check Input:
                List<Invoice_TempInvoice> lst_Invoice_TempInvoice = new List<Invoice_TempInvoice>();
                bool bGet_Invoice_TempInvoice = (objRQ_Invoice_TempInvoice.Rt_Cols_Invoice_TempInvoice != null && objRQ_Invoice_TempInvoice.Rt_Cols_Invoice_TempInvoice.Length > 0);
                #endregion

                #region // Invoice_TempInvoice_Issued:
                mdsResult = Invoice_TempInvoice_Issued(
                    objRQ_Invoice_TempInvoice.Tid // strTid
                    , objRQ_Invoice_TempInvoice.GwUserCode // strGwUserCode
                    , objRQ_Invoice_TempInvoice.GwPassword // strGwPassword
                    , objRQ_Invoice_TempInvoice.WAUserCode // strUserCode
                    , objRQ_Invoice_TempInvoice.WAUserPassword // strUserPassword
                    , ref alParamsCoupleError // alParamsCoupleError
                                              //// Filter:
                    , objRQ_Invoice_TempInvoice.Invoice_TempInvoice.TInvoiceCode // objTInvoiceCode
                    , objRQ_Invoice_TempInvoice.Invoice_TempInvoice.EffDateStart // objEffDateStart
                    , objRQ_Invoice_TempInvoice.Invoice_TempInvoice.Remark // objRemark
                    );
                #endregion

                // Return Good:
                return mdsResult;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsResult
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Write ReturnLog:
                //_cf.ProcessBizReturn(
                //	ref mdsResult // mdsFinal
                //	, strTid // strTid
                //	, strFunctionName // strFunctionName
                //	);
                #endregion
            }
        }

        public DataSet WAS_Invoice_TempInvoice_InActive(
            ref ArrayList alParamsCoupleError
            , RQ_Invoice_TempInvoice objRQ_Invoice_TempInvoice
            ////
            , out RT_Invoice_TempInvoice objRT_Invoice_TempInvoice
            )
        {
            #region // Temp:
            string strTid = objRQ_Invoice_TempInvoice.Tid;
            objRT_Invoice_TempInvoice = new RT_Invoice_TempInvoice();
            DataSet mdsResult = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            DateTime dtimeSys = DateTime.UtcNow;
            //DataSet mdsExec = null;
            //DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(objRQ_Invoice_TempInvoice.Tid);
            //int nTidSeq = 0;
            //bool bNeedTransaction = true;
            string strFunctionName = "WAS_Invoice_TempInvoice_InActive";
            string strErrorCodeDefault = TError.ErridnInventory.WAS_Invoice_TempInvoice_InActive;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
				});
            #endregion

            try
            {
                #region // Init:
                #endregion

                #region // Refine and Check Input:
                List<Invoice_TempInvoice> lst_Invoice_TempInvoice = new List<Invoice_TempInvoice>();
                bool bGet_Invoice_TempInvoice = (objRQ_Invoice_TempInvoice.Rt_Cols_Invoice_TempInvoice != null && objRQ_Invoice_TempInvoice.Rt_Cols_Invoice_TempInvoice.Length > 0);
                #endregion

                #region // Invoice_TempInvoice_InActive:
                mdsResult = Invoice_TempInvoice_InActive(
                    objRQ_Invoice_TempInvoice.Tid // strTid
                    , objRQ_Invoice_TempInvoice.GwUserCode // strGwUserCode
                    , objRQ_Invoice_TempInvoice.GwPassword // strGwPassword
                    , objRQ_Invoice_TempInvoice.WAUserCode // strUserCode
                    , objRQ_Invoice_TempInvoice.WAUserPassword // strUserPassword
                    , ref alParamsCoupleError // alParamsCoupleError
                                              //// Filter:
                    , objRQ_Invoice_TempInvoice.Invoice_TempInvoice.TInvoiceCode // objTInvoiceCode
                    , objRQ_Invoice_TempInvoice.Invoice_TempInvoice.Remark // objRemark
                    );
                #endregion

                // Return Good:
                return mdsResult;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsResult
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Write ReturnLog:
                //_cf.ProcessBizReturn(
                //	ref mdsResult // mdsFinal
                //	, strTid // strTid
                //	, strFunctionName // strFunctionName
                //	);
                #endregion
            }
        }

        private void Invoice_TempInvoice_SaveX_New20190701(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            , DateTime dtimeSys
            ////
            , object objFlagIsDelete
            ////
            , object objTInvoiceCode
            , object objMST
            , object objPaymentMethodCode
            , object objInvoiceType
            , object objTInvoiceName
            , object objFormNo
            , object objSign
            , object objNNTName
            , object objNNTAddress
            , object objNNTPhone
            , object objNNTFax
            , object objNNTEmail
            , object objNNTWebsite
            , object objNNTAccNo
            , object objNNTBankName
            , object objLogoFilePath
            , object objTInvoiceBody
            , object objWatermarkFilePath
            , object objInvoiceTGroupCode
            , object objRemark
            )
        {
            #region // Temp:
            //int nTidSeq = 0;
            //bool bMyDebugSql = false;
            string strFunctionName = "Invoice_TempInvoice_SaveX";
            //string strErrorCodeDefault = TError.ErrTCGQLTV.Form_Receipt_Save;
            alParamsCoupleError.AddRange(new object[]{
                    "strFunctionName", strFunctionName
                    , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
                    ////
                    , "objFlagIsDelete",objFlagIsDelete
				    ////
                    , "objTInvoiceCode", objTInvoiceCode
                    , "objMST", objMST
                    , "objPaymentMethodCode", objPaymentMethodCode
                    , "objInvoiceType", objInvoiceType
                    , "objTInvoiceName", objTInvoiceName
                    , "objFormno", objFormNo
                    , "objSign", objSign
                    , "objNNTName", objNNTName
                    , "objNNTAddress", objNNTAddress
                    , "objNNTPhone", objNNTPhone
                    , "objNNTFax", objNNTFax
                    , "objNNTEmail", objNNTEmail
                    , "objNNTWebsite", objNNTWebsite
                    , "objNNTAccNo", objNNTAccNo
                    , "objNNTBankName", objNNTBankName
                    , "objLogoFilePath", objLogoFilePath
                    , "objTInvoiceBody", objTInvoiceBody
                    , "objWatermarkFilePath", objWatermarkFilePath
                    , "objInvoiceTGroupCode", objInvoiceTGroupCode
                    , "objRemark", objRemark
                    });
            //ArrayList alPCErrEx = new ArrayList();
            ////
            Hashtable htParamsSql = new Hashtable();
            #endregion

            #region // Convert Input:
            //alParamsCoupleError.AddRange(new object[]{
            //    "Check.dsData", TJson.JsonConvert.SerializeObject(dsData)
            //    });
            #endregion

            #region // Refine and Check Input:
            ////
            bool bIsDelete = CmUtils.StringUtils.StringEqual(objFlagIsDelete, TConst.Flag.Yes);
            ////
            string strTInvoiceCode = TUtils.CUtils.StdParam(objTInvoiceCode);
            string strMST = TUtils.CUtils.StdParam(objMST);
            string strPaymentMethodCode = TUtils.CUtils.StdParam(objPaymentMethodCode);
            string strInvoiceType = TUtils.CUtils.StdParam(objInvoiceType);
            string strTInvoiceName = string.Format("{0}", objTInvoiceName);
            string strFormNo = TUtils.CUtils.StdParam(objFormNo);
            string strSign = string.Format("{0}", objSign);
            string strNNTName = string.Format("{0}", objNNTName);
            string strNNTAddress = string.Format("{0}", objNNTAddress);
            string strNNTPhone = string.Format("{0}", objNNTPhone);
            string strNNTFax = string.Format("{0}", objNNTFax);
            string strNNTEmail = string.Format("{0}", objNNTEmail);
            string strNNTWebsite = string.Format("{0}", objNNTWebsite);
            string strNNTAccNo = string.Format("{0}", objNNTAccNo);
            string strNNTBankName = string.Format("{0}", objNNTBankName);
            string strLogoFilePath = string.Format("{0}", objLogoFilePath);
            string strTInvoiceBody = string.Format("{0}", objTInvoiceBody);
            string strWatermarkFilePath = string.Format("{0}", objWatermarkFilePath);
            string strInvoiceTGroupCode = TUtils.CUtils.StdParam(objInvoiceTGroupCode);
            string strRemark = string.Format("{0}", objRemark);
            ////
            string strCreateDTimeUTC = null;
            string strCreateBy = null;
            ////
            DataTable dtDB_Invoice_TempInvoice = null;
            {
                ////
                if (strTInvoiceCode == null || strTInvoiceCode.Length < 1)
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.strTInvoiceCode", strTInvoiceCode
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Invoice_TempInvoice_SaveX_InvalidTInvoiceCode
                        , null
                        , alParamsCoupleError.ToArray()
                        );
                }
                ////
                Invoice_TempInvoice_CheckDB(
                    ref alParamsCoupleError // alParamsCoupleError
                    , strTInvoiceCode // objShipNo
                    , "" // strFlagExistToCheck
                    , "" // strTInvoiceStatusListToCheck
                    , "" // strFlagActiveListToCheck
                    , out dtDB_Invoice_TempInvoice // dtDB_Invoice_TempInvoice
                    );
                ////
                if (dtDB_Invoice_TempInvoice.Rows.Count < 1) // Chưa tồn tại
                {
                    if (bIsDelete)
                    {
                        goto MyCodeLabel_Done; // Thành công
                    }
                    else
                    {
                        // Nothing
                    }
                }
                else // Đã tồn tại Invoice_TempInvoice:
                {
                    if (!CmUtils.StringUtils.StringEqualIgnoreCase(dtDB_Invoice_TempInvoice.Rows[0]["TInvoiceStatus"], TConst.TInvoiceStatus.Pending))
                    {
                        alParamsCoupleError.AddRange(new object[]{
                            "Check.DB.TInvoiceStatus", dtDB_Invoice_TempInvoice.Rows[0]["TInvoiceStatus"]
                            , "Check.InputStatus.Expected", TConst.TInvoiceStatus.Pending
                            });
                        throw CmUtils.CMyException.Raise(
                            TError.ErridnInventory.Invoice_TempInvoice_SaveX_StatusNotMatched
                            , null
                            , alParamsCoupleError.ToArray()
                            );
                    }
                    else
                    {
                        strCreateDTimeUTC = TUtils.CUtils.StdDTime(dtDB_Invoice_TempInvoice.Rows[0]["CreateDTimeUTC"]);
                        strCreateBy = TUtils.CUtils.StdParam(dtDB_Invoice_TempInvoice.Rows[0]["CreateBy"]);
                    }
                }
                strCreateDTimeUTC = string.IsNullOrEmpty(strCreateDTimeUTC) ? dtimeSys.ToString("yyyy-MM-dd HH:mm:ss") : strCreateDTimeUTC;
                strCreateBy = string.IsNullOrEmpty(strCreateBy) ? strWAUserCode : strCreateBy;
                ////
                myCache_ViewAbility_CheckAccessMSTWrite(
                    ref alParamsCoupleError // alParamsCoupleError
                    , strWAUserCode // strWAUserCode
                    , strMST // strMST
                    );
                ////
                DataTable dtDB_Mst_PaymentMethods = null;

                Mst_PaymentMethods_CheckDB(
                    ref alParamsCoupleError // alParamsCoupleError
                    , strPaymentMethodCode // objPaymentMethodCode
                    , TConst.Flag.Yes // strFlagExistToCheck
                    , TConst.Flag.Active // strFlagActiveListToCheck
                    , out dtDB_Mst_PaymentMethods // dtDB_Mst_PaymentMethods
                    );
                ////
                DataTable dtDB_Mst_InvoiceType = null;

                Mst_InvoiceType_CheckDB(
                    ref alParamsCoupleError // alParamsCoupleError
                    , strInvoiceType // objPaymentMethodCode
                    , TConst.Flag.Yes // strFlagExistToCheck
                    , TConst.Flag.Active // strFlagActiveListToCheck
                    , out dtDB_Mst_InvoiceType // dtDB_Mst_InvoiceType
                    );
                ////
                if (strFormNo == null || strFormNo.Length < 1)
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.strFormNo", strFormNo
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Invoice_TempInvoice_SaveX_InvalidFormNo
                        , null
                        , alParamsCoupleError.ToArray()
                        );
                }
                ////
                Invoice_TempInvoice_CheckFormNo(
                    ref alParamsCoupleError // alParamsCoupleError
                    , strFormNo // objFormNo
                    , strMST // objMST
                    , strTInvoiceCode // objTInvoiceCode               
                    );
                ////
                Invoice_TempInvoice_CheckFormatFormNo(
                    ref alParamsCoupleError // alParamsCoupleError
                    , strFormNo // objFormNo           
                    );
                ////
                if (strSign == null || strSign.Length < 1)
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.strSign", strSign
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Invoice_TempInvoice_SaveX_InvalidSign
                        , null
                        , alParamsCoupleError.ToArray()
                        );
                }
                ////
                DateTime dtCreateInvoiceUTC = Convert.ToDateTime(strCreateDTimeUTC);

                Invoice_TempInvoice_CheckFormatSign(
                    ref alParamsCoupleError // alParamsCoupleError
                    , strSign // objFormNo
                    , dtCreateInvoiceUTC.ToString("yy")
                    );
                //string strFormNo_Calc = "";
                //GetFormNo(
                //    ref alParamsCoupleError // alParamsCoupleError
                //    , strInvoiceType  // strInvoiceType
                //    , strMST  // objMST
                //    , ref strFormNo_Calc // strFormNo_Calc
                //    );
                //////
                //if(!CmUtils.StringUtils.StringEqualIgnoreCase(strFormNo_Calc, strFormNo))
                //{
                //    alParamsCoupleError.AddRange(new object[]{
                //        "Check.strFormNo", strFormNo
                //        , "Check.FormNo.Expected", strFormNo_Calc
                //        });
                //    throw CmUtils.CMyException.Raise(
                //        TError.ErridnInventory.Invoice_TempInvoice_SaveX_InvalidFormNo
                //        , null
                //        , alParamsCoupleError.ToArray()
                //        );

                //}
                ////
                DataTable dtDB_Invoice_TempGroup = null;

                Invoice_TempGroup_CheckDB(
                    ref alParamsCoupleError // alParamsCoupleError
                    , strInvoiceTGroupCode // strInvoiceTGroupCode
                    , TConst.Flag.Yes // strFlagExistToCheck
                    , TConst.Flag.Active // strFlagActiveListToCheck
                    , out dtDB_Invoice_TempGroup // dtDB_Invoice_TempGroup
                    );
                ////
                if (!CmUtils.StringUtils.StringEqualIgnoreCase(dtDB_Invoice_TempGroup.Rows[0]["MST"], TConst.BizMix.MSTALL)
                    && !CmUtils.StringUtils.StringEqualIgnoreCase(dtDB_Invoice_TempGroup.Rows[0]["MST"], strMST))
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.strInvoiceTGroupCode", strInvoiceTGroupCode
                        , "Check.DB.TGroup.InvoiceTGroupCode", dtDB_Invoice_TempGroup.Rows[0]["InvoiceTGroupCode"]
                        , "Check.Input.strMST", strMST
                        , "Check.Expected.TGroup.MST", string.Format("{0} or {1", TConst.BizMix.MSTALL, strMST).Trim()
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Invoice_TempInvoice_SaveX_NNTNotUsedInvoiceTGroupCode
                        , null
                        , alParamsCoupleError.ToArray()
                        );

                }
                ////
            }
            #endregion

            #region // SaveTemp Invoice_Invoice:
            {
                ////
                TUtils.CUtils.MyBuildDBDT_Common(
                    _cf.db
                    , "#input_Invoice_TempInvoice"
                    , new object[]{
                        "TInvoiceCode", TConst.BizMix.Default_DBColType,
                        "NetworkID", TConst.BizMix.Default_DBColType,
                        "MST", TConst.BizMix.Default_DBColType,
                        "PaymentMethodCode", TConst.BizMix.Default_DBColType,
                        "InvoiceType", TConst.BizMix.Default_DBColType,
                        "TInvoiceName", TConst.BizMix.Default_DBColType,
                        "FormNo", TConst.BizMix.Default_DBColType,
                        "Sign", TConst.BizMix.Default_DBColType,
                        "EffDateStart", TConst.BizMix.Default_DBColType,
                        "EffDateEnd", TConst.BizMix.Default_DBColType,
                        "NNTName", TConst.BizMix.Default_DBColType,
                        "NNTAddress", TConst.BizMix.Default_DBColType,
                        "NNTPhone", TConst.BizMix.Default_DBColType,
                        "NNTFax", TConst.BizMix.Default_DBColType,
                        "NNTEmail", TConst.BizMix.Default_DBColType,
                        "NNTWebsite", TConst.BizMix.Default_DBColType,
                        "NNTAccNo", TConst.BizMix.Default_DBColType,
                        "NNTBankName", TConst.BizMix.Default_DBColType,
                        "LogoFilePath", TConst.BizMix.Max_DBCol,
                        "TInvoiceBody", TConst.BizMix.Max_DBCol,
                        "WatermarkFilePath", TConst.BizMix.Max_DBCol,
                        "InvoiceTGroupCode", TConst.BizMix.Max_DBCol,
                        "StartInvoiceNo", TConst.BizMix.Default_DBColType,
                        "EndInvoiceNo", TConst.BizMix.Default_DBColType,
                        "CreateDTimeUTC", TConst.BizMix.Default_DBColType,
                        "CreateBy", TConst.BizMix.Default_DBColType,
                        "LUDTimeUTC", TConst.BizMix.Default_DBColType,
                        "LUBy", TConst.BizMix.Default_DBColType,
                        "Remark", TConst.BizMix.Default_DBColType,
                        "TInvoiceStatus", TConst.BizMix.Default_DBColType,
                        "FlagActive", TConst.BizMix.Default_DBColType,
                        "UpdQtyInvoiceNoDTimeUTC", TConst.BizMix.Default_DBColType,
                        "UpdQtyInvoiceNoBy", TConst.BizMix.Default_DBColType,
                        "IssuedDTimeUTC", TConst.BizMix.Default_DBColType,
                        "Issuedby", TConst.BizMix.Default_DBColType,
                        "InActiveDTimeUTC", TConst.BizMix.Default_DBColType,
                        "InActiveBy", TConst.BizMix.Default_DBColType,
                        "LogLUDTimeUTC", TConst.BizMix.Default_DBColType,
                        "LogLUBy", TConst.BizMix.Default_DBColType,
                        }
                    , new object[]{
                            new object[]{
                                strTInvoiceCode, // TInvoiceCode
                                nNetworkID, // NetworkID
                                strMST, // strMST
                                strPaymentMethodCode, // PaymentMethodCode
                                strInvoiceType, // InvoiceType
                                strTInvoiceName, // TInvoiceName
                                strFormNo, // FormNo
                                strSign, // Sign
                                null, // EffDateStart
                                null, // EffDateEnd
                                strNNTName, // NNTName
                                strNNTAddress, // NNTAddress
                                strNNTPhone, // NNTPhone
                                strNNTFax, // NNTFax
                                strNNTEmail, // NNTEmail
                                strNNTWebsite, // NNTWebsite
                                strNNTAccNo, // NNTAccNo
                                strNNTBankName, // NNTBankName
                                strLogoFilePath, // LogoFilePath
                                strTInvoiceBody, // TInvoiceBody
                                strWatermarkFilePath, // WatermarkFilePath
                                strInvoiceTGroupCode, // InvoiceTGroupCode
                                0.0, // StartInvoiceNo
                                0.0, // EndInvoiceNo
                                strCreateDTimeUTC, // CreateDTimeUTC
                                strWAUserCode, // CreateBy
                                dtimeSys.ToString("yyyy-MM-dd HH:mm:ss"), // LUDTimeUTC
                                strWAUserCode, // LUBy
                                strRemark, // Remark
                                TConst.TInvoiceStatus.Pending, // TInvoiceStatus
                                TConst.Flag.Active, // FlagActive
                                null, // UpdQtyInvoiceNoDTimeUTC
                                null, // UpdQtyInvoiceNoBy
                                null, // IssuedDTimeUTC
                                null, // Issuedby
                                null, // InActiveDTimeUTC
                                null, // InActiveBy
                                dtimeSys.ToString("yyyy-MM-dd HH:mm:ss"), // LogLUDTimeUTC
                                strWAUserCode, // LogLUBy
								}
                        }
                    );

            }
            #endregion

            #region // SaveDB:
            {
                //// Clear All:
                {
                    string strSqlDelete = CmUtils.StringUtils.Replace(@"
							    ---- Invoice_TempInvoice:
							    delete t
							    from Invoice_TempInvoice t --//[mylock]
								    inner join #input_Invoice_TempInvoice f --//[mylock]
									    on t.TInvoiceCode = f.TInvoiceCode
							    where (1=1)
							    ;
						");
                    _cf.db.ExecQuery(
                        strSqlDelete
                        );
                }

                //// Insert All:
                if (!bIsDelete)
                {
                    #region // Insert:
                    {

                        ////
                        string zzzzClauseInsert_Invoice_TempInvoice_zSave = CmUtils.StringUtils.Replace(@"
                                ---- Invoice_TempInvoice:
                                insert into Invoice_TempInvoice
                                (	
	                                TInvoiceCode
	                                , NetworkID
	                                , MST
	                                , PaymentMethodCode
	                                , InvoiceType
	                                , TInvoiceName
	                                , FormNo
	                                , Sign
	                                , EffDateStart
	                                , EffDateEnd
	                                , NNTName
	                                , NNTAddress
                                    , NNTPhone
                                    , NNTFax
                                    , NNTEmail
                                    , NNTWebsite
                                    , NNTAccNo
                                    , NNTBankName
                                    , LogoFilePath
	                                , TInvoiceBody
	                                , WatermarkFilePath
	                                , InvoiceTGroupCode
	                                , StartInvoiceNo
	                                , EndInvoiceNo
	                                , CreateDTimeUTC
	                                , CreateBy
	                                , LUDTimeUTC
	                                , LUBy
	                                , Remark
	                                , TInvoiceStatus
	                                , FlagActive
	                                , UpdQtyInvoiceNoDTimeUTC
	                                , UpdQtyInvoiceNoBy
	                                , IssuedDTimeUTC
	                                , Issuedby
	                                , InActiveDTimeUTC
	                                , InActiveBy
	                                , LogLUDTimeUTC
	                                , LogLUBy
                                )
                                select
	                                t.TInvoiceCode
	                                , t.NetworkID
	                                , t.MST
	                                , t.PaymentMethodCode
	                                , t.InvoiceType
	                                , t.TInvoiceName
	                                , t.FormNo
	                                , t.Sign
	                                , t.EffDateStart
	                                , t.EffDateEnd
	                                , t.NNTName
	                                , t.NNTAddress
	                                , t.NNTPhone
	                                , t.NNTFax
	                                , t.NNTEmail
	                                , t.NNTWebsite
	                                , t.NNTAccNo
	                                , t.NNTBankName
	                                , t.LogoFilePath
	                                , t.TInvoiceBody
	                                , t.WatermarkFilePath
	                                , t.InvoiceTGroupCode
	                                , t.StartInvoiceNo
	                                , t.EndInvoiceNo
	                                , t.CreateDTimeUTC
	                                , t.CreateBy
	                                , t.LUDTimeUTC
	                                , t.LUBy
	                                , t.Remark
	                                , t.TInvoiceStatus
	                                , t.FlagActive
	                                , t.UpdQtyInvoiceNoDTimeUTC
	                                , t.UpdQtyInvoiceNoBy
	                                , t.IssuedDTimeUTC
	                                , t.Issuedby
	                                , t.InActiveDTimeUTC
	                                , t.InActiveBy
	                                , t.LogLUDTimeUTC
	                                , t.LogLUBy
                                from #input_Invoice_TempInvoice t --//[mylock]
                                ;
                            ");
                        string strSqlExec = CmUtils.StringUtils.Replace(@"
								----
								zzzzClauseInsert_Invoice_TempInvoice_zSave
			
								----
							"
                            , "zzzzClauseInsert_Invoice_TempInvoice_zSave", zzzzClauseInsert_Invoice_TempInvoice_zSave
                            );
                        ////
                        DataSet dsExec = _cf.db.ExecQuery(strSqlExec);
                        ////
                    }
                    #endregion
                }
            }
            #endregion

            #region //// Clear For Debug:.
            {
                ////
                string strSqlClearForDebug = CmUtils.StringUtils.Replace(@"
						---- Clear for Debug:
						drop table #input_Invoice_TempInvoice;
					");

                _cf.db.ExecQuery(
                    strSqlClearForDebug
                    );
                ////
            }
        #endregion

        // Return Good:
        MyCodeLabel_Done:
            return;
            //TDALUtils.DBUtils.CommitSafety(_cf.db);
            //mdsFinal.AcceptChanges();
            //return mdsFinal;		
        }

        public DataSet Invoice_TempInvoice_Save_New20190701(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            ////
            , object objFlagIsDelete
            ////
            , object objTInvoiceCode
            , object objMST
            , object objPaymentMethodCode
            , object objInvoiceType
            , object objTInvoiceName
            , object objFormNo
            , object objSign
            , object objNNTName
            , object objNNTAddress
            , object objNNTPhone
            , object objNNTFax
            , object objNNTEmail
            , object objNNTWebsite
            , object objNNTAccNo
            , object objNNTBankName
            , object objLogoFilePath
            , object objTInvoiceBody
            , object objWatermarkFilePath
            , object objInvoiceTGroupCode
            , object objRemark
            )
        {
            #region // Temp:
            DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            //int nTidSeq = 0;
            DateTime dtimeSys = DateTime.UtcNow;
            string strFunctionName = "Invoice_TempInvoice_Save";
            string strErrorCodeDefault = TError.ErridnInventory.Invoice_TempInvoice_Save;
            alParamsCoupleError.AddRange(new object[]{
                    "strFunctionName", strFunctionName
                    , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
                    /////
                    , "objFlagIsDelete", objFlagIsDelete
			        ////
                    , "objTInvoiceCode", objTInvoiceCode
                    , "objMST", objMST
                    , "objPaymentMethodCode", objPaymentMethodCode
                    , "objInvoiceType", objInvoiceType
                    , "objTInvoiceName", objTInvoiceName
                    , "objFormno", objFormNo
                    , "objSign", objSign
                    , "objNNTName", objNNTName
                    , "objNNTAddress", objNNTAddress
                    , "objNNTPhone", objNNTPhone
                    , "objNNTFax", objNNTFax
                    , "objNNTEmail", objNNTEmail
                    , "objNNTWebsite", objNNTWebsite
                    , "objNNTAccNo", objNNTAccNo
                    , "objNNTBankName", objNNTBankName
                    , "objLogoFilePath", objLogoFilePath
                    , "objTInvoiceBody", objTInvoiceBody
                    , "objWatermarkFilePath", objWatermarkFilePath
                    , "objInvoiceTGroupCode", objInvoiceTGroupCode
                    , "objRemark", objRemark
                    });
            #endregion

            try
            {
                #region // Init:
                //_cf.db.LogUserId = _cf.sinf.strUserCode;
                _cf.db.BeginTransaction();

                // Write RequestLog:
                _cf.ProcessBizReq_OutSide(
                    strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    , alParamsCoupleError // alParamsCoupleError
                    );

                // Sys_User_CheckAuthentication:
                //Sys_User_CheckAuthentication(
                //    ref alParamsCoupleError
                //    , strWAUserCode
                //    , strWAUserPassword
                //    );

                // Check Access/Deny:
                Sys_Access_CheckDenyV30(
                    ref alParamsCoupleError
                    , strWAUserCode
                    , strFunctionName
                    );
                #endregion

                #region // Invoice_TempInvoice_SaveX:
                //DataSet dsGetData = null;
                {
                    Invoice_TempInvoice_SaveX_New20190701(
                        strTid // strTid
                        , strGwUserCode // strGwUserCode
                        , strGwPassword // strGwPassword
                        , strWAUserCode // strWAUserCode
                        , strWAUserPassword // strWAUserPassword
                        , ref alParamsCoupleError // alParamsCoupleError
                        , dtimeSys // dtimeSys
                                   ////
                        , objFlagIsDelete // objFlagIsDelete
                                          ////
                        , objTInvoiceCode //  objTInvoiceCode
                        , objMST //   objMST
                        , objPaymentMethodCode //   objPaymentMethodCode
                        , objInvoiceType //   objInvoiceType
                        , objTInvoiceName //   objTInvoiceName
                        , objFormNo //   objFormNo
                        , objSign //   objSign
                        , objNNTName //   objNNTName
                        , objNNTAddress //   objNNTAddress
                        , objNNTPhone //   objNNTPhone
                        , objNNTFax //   objNNTFax
                        , objNNTEmail //   objNNTEmail
                        , objNNTWebsite //   objNNTWebsite
                        , objNNTAccNo //   objNNTAccNo
                        , objNNTBankName //   objNNTBankName
                        , objLogoFilePath //   objLogoFilePath
                        , objTInvoiceBody //   objTInvoiceBody
                        , objWatermarkFilePath //   objWatermarkFilePath
                        , objInvoiceTGroupCode // objInvoiceTGroupCode
                        , objRemark //   objRemark
                        );
                }
                ////
                //CmUtils.DataUtils.MoveDataTable(ref mdsFinal, ref dsGetData);
                #endregion

                // Return Good:
                TDALUtils.DBUtils.CommitSafety(_cf.db);
                mdsFinal.AcceptChanges();
                return mdsFinal;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Rollback:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);

                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsFinal
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Rollback and Release resources:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);
                TDALUtils.DBUtils.ReleaseAllSemaphore(_cf.db_Sys, true);

                // Write ReturnLog:
                _cf.ProcessBizReturn_OutSide(
                    ref mdsFinal // mdsFinal
                    , strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    );
                #endregion
            }
        }

        public DataSet WAS_Invoice_TempInvoice_Save_New20190701(
            ref ArrayList alParamsCoupleError
            , RQ_Invoice_TempInvoice objRQ_Invoice_TempInvoice
            ////
            , out RT_Invoice_TempInvoice objRT_Invoice_TempInvoice
            )
        {
            #region // Temp:
            string strTid = objRQ_Invoice_TempInvoice.Tid;
            objRT_Invoice_TempInvoice = new RT_Invoice_TempInvoice();
            DataSet mdsResult = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            DateTime dtimeSys = DateTime.UtcNow;
            //DataSet mdsExec = null;
            //DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(objRQ_Invoice_TempInvoice.Tid);
            //int nTidSeq = 0;
            //bool bNeedTransaction = true;
            string strFunctionName = "WAS_Invoice_TempInvoice_Save";
            string strErrorCodeDefault = TError.ErridnInventory.WAS_Invoice_TempInvoice_Save;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
				});
            #endregion

            try
            {
                #region // Init:
                #endregion

                #region // Refine and Check Input:
                List<Invoice_TempInvoice> lst_Invoice_TempInvoice = new List<Invoice_TempInvoice>();
                bool bGet_Invoice_TempInvoice = (objRQ_Invoice_TempInvoice.Rt_Cols_Invoice_TempInvoice != null && objRQ_Invoice_TempInvoice.Rt_Cols_Invoice_TempInvoice.Length > 0);
                #endregion

                #region // Invoice_TempInvoice_Save:
                mdsResult = Invoice_TempInvoice_Save_New20190701(
                    objRQ_Invoice_TempInvoice.Tid // strTid
                    , objRQ_Invoice_TempInvoice.GwUserCode // strGwUserCode
                    , objRQ_Invoice_TempInvoice.GwPassword // strGwPassword
                    , objRQ_Invoice_TempInvoice.WAUserCode // strUserCode
                    , objRQ_Invoice_TempInvoice.WAUserPassword // strUserPassword
                    , ref alParamsCoupleError // alParamsCoupleError
                                              //// Filter:
                    , objRQ_Invoice_TempInvoice.FlagIsDelete // objFlagIsDelete
                                                             /////
                    , objRQ_Invoice_TempInvoice.Invoice_TempInvoice.TInvoiceCode // objTInvoiceCode
                    , objRQ_Invoice_TempInvoice.Invoice_TempInvoice.MST // objMST
                    , objRQ_Invoice_TempInvoice.Invoice_TempInvoice.PaymentMethodCode // objPaymentMethodCode
                    , objRQ_Invoice_TempInvoice.Invoice_TempInvoice.InvoiceType // objPaymentMethodCode
                    , objRQ_Invoice_TempInvoice.Invoice_TempInvoice.TInvoiceName // objTInvoiceName
                    , objRQ_Invoice_TempInvoice.Invoice_TempInvoice.FormNo // objFormNo
                    , objRQ_Invoice_TempInvoice.Invoice_TempInvoice.Sign // objSign
                    , objRQ_Invoice_TempInvoice.Invoice_TempInvoice.NNTName // objNNTName
                    , objRQ_Invoice_TempInvoice.Invoice_TempInvoice.NNTAddress // objNNTAddress
                    , objRQ_Invoice_TempInvoice.Invoice_TempInvoice.NNTPhone // objNNTPhone
                    , objRQ_Invoice_TempInvoice.Invoice_TempInvoice.NNTFax // objNNTFax
                    , objRQ_Invoice_TempInvoice.Invoice_TempInvoice.NNTEmail // objNNTEmail
                    , objRQ_Invoice_TempInvoice.Invoice_TempInvoice.NNTWebsite // objNNTWebsite
                    , objRQ_Invoice_TempInvoice.Invoice_TempInvoice.NNTAccNo // objNNTAccNo
                    , objRQ_Invoice_TempInvoice.Invoice_TempInvoice.NNTBankName // objNNTBankName
                    , objRQ_Invoice_TempInvoice.Invoice_TempInvoice.LogoFilePath // objLogoFilePath
                    , objRQ_Invoice_TempInvoice.Invoice_TempInvoice.TInvoiceBody // objTInvoiceBody
                    , objRQ_Invoice_TempInvoice.Invoice_TempInvoice.WatermarkFilePath // objWatermarkFilePath
                    , objRQ_Invoice_TempInvoice.Invoice_TempInvoice.InvoiceTGroupCode // objInvoiceTGroupCode
                    , objRQ_Invoice_TempInvoice.Invoice_TempInvoice.Remark // objRemark
                    );
                #endregion

                // Return Good:
                return mdsResult;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsResult
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Write ReturnLog:
                //_cf.ProcessBizReturn(
                //	ref mdsResult // mdsFinal
                //	, strTid // strTid
                //	, strFunctionName // strFunctionName
                //	);
                #endregion
            }
        }

        public DataSet WAS_Invoice_TempInvoice_Issued_New20190919(
            ref ArrayList alParamsCoupleError
            , RQ_Invoice_TempInvoice objRQ_Invoice_TempInvoice
            ////
            , out RT_Invoice_TempInvoice objRT_Invoice_TempInvoice
            )
        {
            #region // Temp:
            string strTid = objRQ_Invoice_TempInvoice.Tid;
            objRT_Invoice_TempInvoice = new RT_Invoice_TempInvoice();
            DataSet mdsResult = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            DateTime dtimeSys = DateTime.UtcNow;
            //DataSet mdsExec = null;
            //DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(objRQ_Invoice_TempInvoice.Tid);
            //int nTidSeq = 0;
            //bool bNeedTransaction = true;
            string strFunctionName = "WAS_Invoice_TempInvoice_Issued";
            string strErrorCodeDefault = TError.ErridnInventory.WAS_Invoice_TempInvoice_Issued;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
				});
            #endregion

            try
            {
                #region // Init:
                #endregion

                #region // Refine and Check Input:
                List<Invoice_TempInvoice> lst_Invoice_TempInvoice = new List<Invoice_TempInvoice>();
                bool bGet_Invoice_TempInvoice = (objRQ_Invoice_TempInvoice.Rt_Cols_Invoice_TempInvoice != null && objRQ_Invoice_TempInvoice.Rt_Cols_Invoice_TempInvoice.Length > 0);
                #endregion

                #region // Invoice_TempInvoice_Issued:
                mdsResult = Invoice_TempInvoice_Issued_New20190919(
                    objRQ_Invoice_TempInvoice.Tid // strTid
                    , objRQ_Invoice_TempInvoice.GwUserCode // strGwUserCode
                    , objRQ_Invoice_TempInvoice.GwPassword // strGwPassword
                    , objRQ_Invoice_TempInvoice.WAUserCode // strUserCode
                    , objRQ_Invoice_TempInvoice.WAUserPassword // strUserPassword
                    , ref alParamsCoupleError // alParamsCoupleError
                                              //// Filter:
                    , objRQ_Invoice_TempInvoice.Invoice_TempInvoice.TInvoiceCode // objTInvoiceCode
                    , objRQ_Invoice_TempInvoice.Invoice_TempInvoice.TInvoiceFilePathXML // objTInvoiceFilePathXML
                    , objRQ_Invoice_TempInvoice.Invoice_TempInvoice.EffDateStart // objEffDateStart
                    , objRQ_Invoice_TempInvoice.Invoice_TempInvoice.Remark // objRemark
                    );
                #endregion

                // Return Good:
                return mdsResult;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsResult
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Write ReturnLog:
                //_cf.ProcessBizReturn(
                //	ref mdsResult // mdsFinal
                //	, strTid // strTid
                //	, strFunctionName // strFunctionName
                //	);
                #endregion
            }
        }

        public DataSet Invoice_TempInvoice_Issued_New20190919(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            ////
            , object objTInvoiceCode
            , object objTInvoiceFilePathXML
            , object objEffDateStart
            , object objRemark
            )
        {
            #region // Temp:
            DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            //int nTidSeq = 0;
            DateTime dtimeSys = DateTime.UtcNow;
            string strFunctionName = "Invoice_TempInvoice_Issued";
            string strErrorCodeDefault = TError.ErridnInventory.Invoice_TempInvoice_Issued;
            alParamsCoupleError.AddRange(new object[]{
                    "strFunctionName", strFunctionName
                    , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
                    /////
                    , "objTInvoiceCode", objTInvoiceCode
                    , "objTInvoiceFilePathXML", objTInvoiceFilePathXML
                    , "objEffDateStart", objEffDateStart
                    , "objRemark", objRemark
                    });
            #endregion

            try
            {
                #region // Init:
                //_cf.db.LogUserId = _cf.sinf.strUserCode;
                _cf.db.BeginTransaction();

                // Write RequestLog:
                _cf.ProcessBizReq_OutSide(
                    strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    , alParamsCoupleError // alParamsCoupleError
                    );

                // Sys_User_CheckAuthentication:
                //Sys_User_CheckAuthentication(
                //    ref alParamsCoupleError
                //    , strWAUserCode
                //    , strWAUserPassword
                //    );

                // Check Access/Deny:
                Sys_Access_CheckDenyV30(
                    ref alParamsCoupleError
                    , strWAUserCode
                    , strFunctionName
                    );
                #endregion

                #region // Invoice_TempInvoice_IssuedX:
                //DataSet dsGetData = null;
                {
                    Invoice_TempInvoice_IssuedX_New20190919(
                        strTid // strTid
                        , strGwUserCode // strGwUserCode
                        , strGwPassword // strGwPassword
                        , strWAUserCode // strWAUserCode
                        , strWAUserPassword // strWAUserPassword
                        , ref alParamsCoupleError // alParamsCoupleError
                        , dtimeSys // dtimeSys
                                   ////
                        , objTInvoiceCode // objTInvoiceCode
                        , objTInvoiceFilePathXML //  objTInvoiceFilePathXML
                        , objEffDateStart //  objEffDateStart
                        , null // objEffDateEnd
                        , objRemark //  objRemark
                        );
                }
                ////
                //CmUtils.DataUtils.MoveDataTable(ref mdsFinal, ref dsGetData);
                #endregion

                // Return Good:
                TDALUtils.DBUtils.CommitSafety(_cf.db);
                mdsFinal.AcceptChanges();
                return mdsFinal;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Rollback:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);

                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsFinal
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Rollback and Release resources:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);
                TDALUtils.DBUtils.ReleaseAllSemaphore(_cf.db_Sys, true);

                // Write ReturnLog:
                _cf.ProcessBizReturn_OutSide(
                    ref mdsFinal // mdsFinal
                    , strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    );
                #endregion
            }
        }

        private void Invoice_TempInvoice_IssuedX_New20190919(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            , DateTime dtimeSys
            ////
            , object objTInvoiceCode
            , object objTInvoiceFilePathXML
            , object objEffDateStart
            , object objEffDateEnd
            , object objRemark
            )
        {
            #region // Temp:
            //int nTidSeq = 0;
            //bool bMyDebugSql = false;
            string strFunctionName = "Invoice_TempInvoice_IssuedX";
            //string strErrorCodeDefault = TError.ErrTCGQLTV.Form_Receipt_Save;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
                ////
                //, "objFlagIsDelete",objFlagIsDelete
				////
                , "objTInvoiceCode", objTInvoiceCode
                , "objTInvoiceFilePathXML", objTInvoiceFilePathXML
                , "objEffDateStart", objEffDateStart
                , "objEffDateEnd", objEffDateEnd
                , "objRemark", objRemark
                });
            //ArrayList alPCErrEx = new ArrayList();
            ////
            Hashtable htParamsSql = new Hashtable();
            #endregion

            #region // Convert Input:
            //alParamsCoupleError.AddRange(new object[]{
            //    "Check.dsData", TJson.JsonConvert.SerializeObject(dsData)
            //    });
            #endregion

            #region // Refine and Check Input:
            ////
            //bool bIsDelete = CmUtils.StringUtils.StringEqual(objFlagIsDelete, TConst.Flag.Yes);
            ////
            string strTInvoiceCode = TUtils.CUtils.StdParam(objTInvoiceCode);
            string strTInvoiceFilePathXML = TUtils.CUtils.StdParam(objTInvoiceFilePathXML);
            string strEffDateStart = TUtils.CUtils.StdParam(objEffDateStart);
            string strEffDateEnd = "2100-01-01";
            string strRemark = string.Format("{0}", objRemark);
            string strMST = "";
            ////
            DataTable dtDB_Invoice_TempInvoice = null;
            {
                ////
                Invoice_TempInvoice_CheckDB(
                    ref alParamsCoupleError // alParamsCoupleError
                    , strTInvoiceCode // objShipNo
                    , TConst.Flag.Yes // strFlagExistToCheck
                    , TConst.TInvoiceStatus.Pending // strTInvoiceStatusListToCheck
                    , TConst.Flag.Active // strFlagActiveListToCheck
                    , out dtDB_Invoice_TempInvoice // dtDB_Invoice_TempInvoice
                    );
                ////
                strMST = TUtils.CUtils.StdParam(dtDB_Invoice_TempInvoice.Rows[0]["MST"]);

                myCache_ViewAbility_CheckAccessMSTWrite(
                    ref alParamsCoupleError // alParamsCoupleError
                    , strWAUserCode // strWAUserCode
                    , strMST // strMST
                    );
                ////
                Int64 nEndInvoiceNo = Convert.ToInt64(dtDB_Invoice_TempInvoice.Rows[0]["EndInvoiceNo"]);
                Int64 nStartInvoiceNo = Convert.ToInt64(dtDB_Invoice_TempInvoice.Rows[0]["StartInvoiceNo"]);
                ////
                if (nEndInvoiceNo == 0 || nStartInvoiceNo == 0)
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.strTInvoiceCode", strTInvoiceCode
                        , "Check.nStartInvoiceNo", nStartInvoiceNo
                        , "Check.nEndInvoiceNo", nEndInvoiceNo
                        , "Check.ErrConditionRaise", "(nEndInvoiceNo - nStartInvoiceNo)"
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Invoice_TempInvoice_IssuedX_InvalidEndInvoiceNoAndStatrInvoiceNo
                        , null
                        , alParamsCoupleError.ToArray()
                        );

                }
                ////
                if (dtimeSys.ToString("yyyy-MM-dd").CompareTo(strEffDateStart) < 0)
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.strTInvoiceCode", strTInvoiceCode
                        , "Check.dtimeSys", dtimeSys.ToString("yyyy-MM-dd")
                        , "Check.strEffDateStart", strEffDateStart
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Invoice_TempInvoice_IssuedX_InvalidIEffDateStartAfterSysDate
                        , null
                        , alParamsCoupleError.ToArray()
                        );
                }
            }
            #endregion

            #region // SaveTemp Invoice_TempInvoice:
            ////
            {
                TUtils.CUtils.MyBuildDBDT_Common(
                    _cf.db
                    , "#input_Invoice_TempInvoice"
                    , new object[]{
                        "TInvoiceCode", TConst.BizMix.Default_DBColType,
                        "TInvoiceFilePathXML", TConst.BizMix.Default_DBColType,
                        "EffDateStart", TConst.BizMix.Default_DBColType,
                        "EffDateEnd", TConst.BizMix.Default_DBColType,
                        "LUDTimeUTC", TConst.BizMix.Default_DBColType,
                        "LUBy", TConst.BizMix.Default_DBColType,
                        "IssuedDTimeUTC", TConst.BizMix.Default_DBColType,
                        "IssuedBy", TConst.BizMix.Default_DBColType,
                        "TInvoiceStatus", TConst.BizMix.Default_DBColType,
                        "Remark", TConst.BizMix.Default_DBColType,
                        "LogLUDTimeUTC", TConst.BizMix.Default_DBColType,
                        "LogLUBy", TConst.BizMix.Default_DBColType,
                        }
                    , new object[]{
                        new object[]{
                            strTInvoiceCode, // TInvoiceCode
                            strTInvoiceFilePathXML, // TInvoiceFilePathXML
                            strEffDateStart,// EffDateStart
                            strEffDateEnd, // EffDateEnd
                            dtimeSys.ToString("yyyy-MM-dd HH:mm:ss"), // LUDTimeUTC
                            strWAUserCode, // LUBy
                            dtimeSys.ToString("yyyy-MM-dd HH:mm:ss"), // IssuedDTimeUTC
                            strWAUserCode, // IssuedBy
                            TConst.TInvoiceStatus.Issued, // TInvoiceStatus
                            strRemark, // Remark
                            dtimeSys.ToString("yyyy-MM-dd HH:mm:ss"), // LogLUDTimeUTC
                            strWAUserCode, // LogLUBy
                            }
                        }
                    );
            }
            #endregion

            #region // SaveDB:
            {
                string zzB_Update_Invoice_TempInvoice_ClauseSet_zzE = @"
								t.LogLUDTimeUTC = f.LogLUDTimeUTC
								, t.LogLUBy = f.LogLUBy
								, t.LUDTimeUTC = f.LUDTimeUTC
								, t.LUBy = f.LUBy
								, t.IssuedDTimeUTC = f.IssuedDTimeUTC
								, t.IssuedBy = f.IssuedBy
								, t.EffDateStart = f.EffDateStart
								, t.EffDateEnd = f.EffDateEnd
								, t.TInvoiceFilePathXML = f.TInvoiceFilePathXML
                                , t.TInvoiceStatus = f.TInvoiceStatus
                                , t.Remark = f.Remark
								";
                ////
                string zzB_Update_Invoice_TempInvoice_zzE = CmUtils.StringUtils.Replace(@"
							---- Invoice_TempInvoice:
							update t
							set 
								zzB_Update_Invoice_TempInvoice_ClauseSet_zzE
							from Invoice_TempInvoice t --//[mylock]
                                inner join #input_Invoice_TempInvoice f --//[mylock]
                                    on t.TInvoiceCode = f.TInvoiceCode
							where (1=1)
							;
						"
                    , "zzB_Update_Invoice_TempInvoice_ClauseSet_zzE", zzB_Update_Invoice_TempInvoice_ClauseSet_zzE
                    );
                string strSqlExec = CmUtils.StringUtils.Replace(@"
						----
						zzB_Update_Invoice_TempInvoice_zzE
			
						----
						"
                    , "zzB_Update_Invoice_TempInvoice_zzE", zzB_Update_Invoice_TempInvoice_zzE
                    );
                ////
                DataSet dsExec = _cf.db.ExecQuery(strSqlExec);
                ////
            }
            #endregion

            #region // Invoice_license_TotalQtyIssued:
            {
                Invoice_license_TotalQtyIssued(
                    ref alParamsCoupleError
                    , strMST // objMST
                    , dtimeSys // dtimeSys
                    , strWAUserCode // objUserCode
                    );
            }
            #endregion

            // Return Good:
            // MyCodeLabel_Done:
            // return;
            //TDALUtils.DBUtils.CommitSafety(_cf.db);
            //mdsFinal.AcceptChanges();
            //return mdsFinal;		
        }
        #endregion

        #region // Invoice_Invoice:
        private void myCheck_Invoice_Invoice_InvoiceNo(
            ref ArrayList alParamsCoupleError
            , DateTime dtimeSys
            )
        {
            string strSqlcheckData = CmUtils.StringUtils.Replace(@"
                    ---- #tbl_Invoice_Invoice_Filter_Inv:
                    select 
                        t.InvoiceCode
                        , t.TInvoiceCode
                        , t.InvoiceNo
                        , iti.MST
                        , iti.FormNo -- Mẫu số hóa đơn
                        , iti.Sign -- Ký hiệu hóa đơn
                    into #tbl_Invoice_Invoice_Filter_Inv
                    from Invoice_Invoice t --//[mylock]
	                    left join Invoice_TempInvoice iti --//[mylock]
		                    on t.TInvoiceCode = iti.TInvoiceCode
                    where (1=1)
                        and t.InvoiceNo is not null
                    ; 

                    -- select null tbl_Invoice_Invoice_Filter_Inv, * from #tbl_Invoice_Invoice_Filter_Inv --//[mylock];

                    ---- #tbl_Invoice_Invoice_Total_Inv:
                    select 
                        t.MST
                        , t.FormNo
                        , t.Sign
                        , t.InvoiceNo
                        , Count(t.InvoiceNo) CountInvoiceNo
                    into #tbl_Invoice_Invoice_Total_Inv
                    from #tbl_Invoice_Invoice_Filter_Inv t --//[mylock]
                    where (1=1)
                    group by 
                        t.MST
                        , t.FormNo
                        , t.Sign
                        , t.InvoiceNo
                    ; 

                    -- select null tbl_Invoice_Invoice_Total_Inv, * from #tbl_Invoice_Invoice_Total_Inv --//[mylock];


                    ---- Return:
                    select 
                        t.*
                    from #tbl_Invoice_Invoice_Total_Inv t --//[mylock]
                    where (1=1)
                        and t.CountInvoiceNo > 1
                    ;

                    ---- Clear for Debug:
                    drop table #tbl_Invoice_Invoice_Filter_Inv;
                    drop table #tbl_Invoice_Invoice_Total_Inv;
                ");
            //
            DataTable dtCheck = _cf.db.ExecQuery(strSqlcheckData).Tables[0];
            if (dtCheck.Rows.Count > 0)
            {
                alParamsCoupleError.AddRange(new object[]{
                    "Check.MST", dtCheck.Rows[0]["MST"].ToString()
                    , "Check.FormNo", dtCheck.Rows[0]["FormNo"].ToString()
                    , "Check.Sign", dtCheck.Rows[0]["Sign"].ToString()
                    , "Check.InvoiceNo", dtCheck.Rows[0]["InvoiceNo"].ToString()
                    , "Check.CountInvoiceNo", dtCheck.Rows[0]["CountInvoiceNo"].ToString()
                    , "Check.ConditionRaiseError", "and t.CountInvoiceNo > 1"
                    });
                throw CmUtils.CMyException.Raise(
                    TError.ErridnInventory.myCheck_Invoice_Invoice_InvoiceNoNotUnique
                    , null
                    , alParamsCoupleError.ToArray()
                    );
            }
        }
        private void myCheck_Invoice_Invoice_RefNo(
            ref ArrayList alParamsCoupleError
            , DateTime dtimeSys
            ////
            , object objRefNo
            )
        {
            string strSqlcheckData = CmUtils.StringUtils.Replace(@"
                    ---- Group by:
                    select 
	                    t.RefNo
	                    , count(t.InvoiceCode) TotalQtyRefNo
                    from Invoice_Invoice t --//[mylock]
                    where(1=1)
	                    and t.RefNo is not null
	                    and t.RefNo = '@strRefNo'
						and t.SourceInvoiceCode not in('INVOICEADJ')
                    group by
	                    t.RefNo
                    ;
                "
                , "@strRefNo", objRefNo
                );
            //
            DataTable dtCheck = _cf.db.ExecQuery(strSqlcheckData).Tables[0];
            if (dtCheck.Rows.Count > 0)
            {
                Int32 nTotalQtyRefNo = Convert.ToUInt16(dtCheck.Rows[0]["TotalQtyRefNo"]);
                if (nTotalQtyRefNo > 1)
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.RefNo", dtCheck.Rows[0]["RefNo"].ToString()
                        , "Check.TotalQtyRefNo", dtCheck.Rows[0]["TotalQtyRefNo"].ToString()
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.myCheck_Invoice_Invoice_RefNo_ExistRefNo
                        , null
                        , alParamsCoupleError.ToArray()
                        );
                }
            }
        }

        private void myCheck_Invoice_Invoice_RefNo_New20190705(
            ref ArrayList alParamsCoupleError
            , DateTime dtimeSys
            ////
            , object zzzz_tbl_Invoice_Invoice_RefNo
            )
        {
            string strSqlcheckData = CmUtils.StringUtils.Replace(@"
                    ---- Group by:
                    select 
	                    t.RefNo
	                    , count(t.InvoiceCode) TotalQtyRefNo
                    from Invoice_Invoice t --//[mylock]
                        inner join zzzz_tbl_Invoice_Invoice_RefNo f --//[mylock]
                            on t.Refno = f.RefNo
                    where(1=1)
	                    and t.RefNo is not null
	                    --and t.RefNo = '@strRefNo'
						and t.SourceInvoiceCode not in('INVOICEADJ') -- Nâng cấp ngày 2019-08-02: vì 1 hóa đơn đã điều chỉnh không được phép điều chỉnh tiếp.
                            --svn://14.232.244.217:8035/idocNet/2018.5.TVAN/Docs/Design/2019.TVAN.HoaDonDT.NangCap.P2.xlsx. (Sheet: 20190918.HDDieuChinh)
                    group by
	                    t.RefNo
                    ;
                "
                , "zzzz_tbl_Invoice_Invoice_RefNo", zzzz_tbl_Invoice_Invoice_RefNo
                );
            //
            DataTable dtCheck = _cf.db.ExecQuery(strSqlcheckData).Tables[0];
            if (dtCheck.Rows.Count > 0)
            {
                Int32 nTotalQtyRefNo = Convert.ToUInt16(dtCheck.Rows[0]["TotalQtyRefNo"]);
                if (nTotalQtyRefNo > 1)
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.RefNo", dtCheck.Rows[0]["RefNo"].ToString()
                        , "Check.TotalQtyRefNo", dtCheck.Rows[0]["TotalQtyRefNo"].ToString()
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.myCheck_Invoice_Invoice_RefNo_ExistRefNo
                        , null
                        , alParamsCoupleError.ToArray()
                        );
                }
            }
        }
        private void myCheck_Invoice_Invoice_Total(
            ref ArrayList alParamsCoupleError
            , DateTime dtimeSys
            ////
            , object objInvoiceCode
            )
        {
            string strSqlcheckData = CmUtils.StringUtils.Replace(@"
                    ---- #tbl_Invoice_Invoice:
                    select 
	                    t.InvoiceCode
                    into #tbl_Invoice_Invoice
                    from Invoice_Invoice t --//[mylock]
                    where(1=1)
	                    and t.InvoiceCode = '@objInvoiceCode'
                    ;

                    --select null tbl_Invoice_Invoice, t.* from #tbl_Invoice_Invoice t --//[mylock];
                    --drop table #tbl_Invoice_Invoice;

                    ----- #tbl_Invoice_InvoiceMix_TotalQty:
                    select 
	                    t.InvoiceCode
	                    , Sum(t.Qty * t.UnitPrice) TotalValInvoice
	                    , Sum(t.Qty * t.UnitPrice * t.VATRate/100 ) TotalValVAT
                    into #tbl_Invoice_InvoiceMix_TotalQty
                    from Invoice_InvoicePrd t --//[mylock]
	                    inner join #tbl_Invoice_Invoice f --//[mylock]
		                    on t.InvoiceCode = f.InvoiceCode
                    where(1=1)
                    group by
	                    t.InvoiceCode
                    union 
                    select 
	                    t.InvoiceCode
	                    , Sum(t.Qty * t.UnitPrice) TotalValInvoice
	                    , Sum(t.Qty * t.UnitPrice * t.VATRate/100 ) TotalValVAT
                    from Invoice_InvoiceDtl t --//[mylock]
	                    inner join #tbl_Invoice_Invoice f --//[mylock]
		                    on t.InvoiceCode = f.InvoiceCode
                    where(1=1)
                    group by
	                    t.InvoiceCode
                    ;

                    --select null tbl_Invoice_InvoiceMix_TotalQty, t.* from #tbl_Invoice_InvoiceMix_TotalQty t --//[mylock];
                    --drop table #tbl_Invoice_InvoiceMix_TotalQty;

                    --- Check:
                    select 
	                    t.InvoiceCode
	                    , f.TotalValInvoice
	                    , f.TotalValVAT
	                    , (f.TotalValInvoice + f.TotalValVAT) TotalValPmt
	                    , k.TotalValInvoice input_TotalValInvoice
	                    , k.TotalValVAT input_TotalValVAT
	                    , k.TotalValPmt input_TotalValPmt
					--into #tbl_Invoice_Invoice_Total
                    from #tbl_Invoice_Invoice t --//[mylock]
	                    left join #tbl_Invoice_InvoiceMix_TotalQty f --//[mylock]
		                    on t.InvoiceCode = f.InvoiceCode
	                    inner join Invoice_Invoice k --//[mylock]
		                    on t.InvoiceCode = k.InvoiceCode
                    where(1=1)
	                    and  (
			                    (f.TotalValInvoice + f.TotalValVAT) != k.TotalValPmt
			                    or (f.TotalValInvoice != k.TotalValInvoice)
			                    or (f.TotalValVAT != k.TotalValVAT)
	                    )
                    ;

                    ---- Clear For Debug:
                    drop table #tbl_Invoice_Invoice;
                    drop table #tbl_Invoice_InvoiceMix_TotalQty;
                "
                , "@objInvoiceCode", objInvoiceCode
                );
            //
            DataTable dtCheck = _cf.db.ExecQuery(strSqlcheckData).Tables[0];
            if (dtCheck.Rows.Count > 0)
            {
                alParamsCoupleError.AddRange(new object[]{
                    "Check.InvoiceCode", dtCheck.Rows[0]["InvoiceCode"]
                    , "Check.Calc.TotalValInvoice", dtCheck.Rows[0]["TotalValInvoice"]
                    , "Check.Calc.TotalValVAT", dtCheck.Rows[0]["TotalValVAT"]
                    , "Check.Calc.TotalValPmt", dtCheck.Rows[0]["TotalValPmt"]
                    , "Check.input_TotalValInvoice", dtCheck.Rows[0]["input_TotalValInvoice"]
                    , "Check.input_TotalValVAT", dtCheck.Rows[0]["input_TotalValVAT"]
                    , "Check.input_TotalValPmt", dtCheck.Rows[0]["input_TotalValPmt"]
                    });
                throw CmUtils.CMyException.Raise(
                    TError.ErridnInventory.myCheck_Invoice_Invoice_Total_InvalidValue
                    , null
                    , alParamsCoupleError.ToArray()
                    );
            }
        }

        private void myCheck_Invoice_Invoice_Total_New20190705(
            ref ArrayList alParamsCoupleError
            , DateTime dtimeSys
            ////
            , object zzzz_tbl_Invoice_Invoice_RefNo
            )
        {
            string strSqlcheckData = CmUtils.StringUtils.Replace(@"
                    ---- #tbl_Invoice_Invoice:
                    select 
	                    t.InvoiceCode
                    into #tbl_Invoice_Invoice
                    from Invoice_Invoice t --//[mylock]
                        inner join zzzz_tbl_Invoice_Invoice_RefNo f --//[mylock]
                            on t.InvoiceCode = f.InvoiceCode
                    where(1=1)
	                    ---and t.InvoiceCode = '@objInvoiceCode'
                    ;

                    --select null tbl_Invoice_Invoice, t.* from #tbl_Invoice_Invoice t --//[mylock];
                    --drop table #tbl_Invoice_Invoice;

                    ----- #tbl_Invoice_InvoiceMix_TotalQty:
                    select 
	                    t.InvoiceCode
	                    , Sum(t.Qty * t.UnitPrice) TotalValInvoice
	                    , Sum(t.Qty * t.UnitPrice * t.VATRate/100 ) TotalValVAT
                    into #tbl_Invoice_InvoiceMix_TotalQty
                    from Invoice_InvoiceDtl t --//[mylock]
	                    inner join #tbl_Invoice_Invoice f --//[mylock]
		                    on t.InvoiceCode = f.InvoiceCode
                    where(1=1)
                    group by
	                    t.InvoiceCode
                    ;

                    --select null tbl_Invoice_InvoiceMix_TotalQty, t.* from #tbl_Invoice_InvoiceMix_TotalQty t --//[mylock];
                    --drop table #tbl_Invoice_InvoiceMix_TotalQty;

                    --- Check:
                    select 
	                    t.InvoiceCode
	                    , f.TotalValInvoice
	                    , f.TotalValVAT
	                    , (f.TotalValInvoice + f.TotalValVAT) TotalValPmt
	                    , k.TotalValInvoice input_TotalValInvoice
	                    , k.TotalValVAT input_TotalValVAT
	                    , k.TotalValPmt input_TotalValPmt
					--into #tbl_Invoice_Invoice_Total
                    from #tbl_Invoice_Invoice t --//[mylock]
	                    left join #tbl_Invoice_InvoiceMix_TotalQty f --//[mylock]
		                    on t.InvoiceCode = f.InvoiceCode
	                    inner join Invoice_Invoice k --//[mylock]
		                    on t.InvoiceCode = k.InvoiceCode
                    where(1=1)
	                    and  (
			                    ABS((f.TotalValInvoice + f.TotalValVAT) - k.TotalValPmt) > @Default_Epsilon
			                    or (ABS(f.TotalValInvoice - k.TotalValInvoice) > @Default_Epsilon )
			                    or (ABS(f.TotalValVAT - k.TotalValVAT) >  @Default_Epsilon)
	                    )
                    ;

                    ---- Clear For Debug:
                    drop table #tbl_Invoice_Invoice;
                    drop table #tbl_Invoice_InvoiceMix_TotalQty;
                "
                , "@Default_Epsilon", TConst.BizMix.Default_Epsilon // 0.000001
                , "zzzz_tbl_Invoice_Invoice_RefNo", zzzz_tbl_Invoice_Invoice_RefNo
                );
            //
            DataTable dtCheck = _cf.db.ExecQuery(strSqlcheckData).Tables[0];
            if (dtCheck.Rows.Count > 0)
            {
                alParamsCoupleError.AddRange(new object[]{
                    "Check.InvoiceCode", dtCheck.Rows[0]["InvoiceCode"]
                    , "Check.Calc.TotalValInvoice", dtCheck.Rows[0]["TotalValInvoice"]
                    , "Check.Calc.TotalValVAT", dtCheck.Rows[0]["TotalValVAT"]
                    , "Check.Calc.TotalValPmt", dtCheck.Rows[0]["TotalValPmt"]
                    , "Check.input_TotalValInvoice", dtCheck.Rows[0]["input_TotalValInvoice"]
                    , "Check.input_TotalValVAT", dtCheck.Rows[0]["input_TotalValVAT"]
                    , "Check.input_TotalValPmt", dtCheck.Rows[0]["input_TotalValPmt"]
                    });
                throw CmUtils.CMyException.Raise(
                    TError.ErridnInventory.myCheck_Invoice_Invoice_Total_InvalidValue
                    , null
                    , alParamsCoupleError.ToArray()
                    );
            }
        }

        private void myCheck_Invoice_InvoiceDtl_Total(
            ref ArrayList alParamsCoupleError
            , DateTime dtimeSys
            ////
            , object zzzz_tbl_Invoice_Invoice_RefNo
            )
        {
            string strSqlcheckData = CmUtils.StringUtils.Replace(@"
                    ---- #tbl_Invoice_Invoice:
                    select 
	                    t.InvoiceCode
                    into #tbl_Invoice_Invoice
                    from Invoice_Invoice t --//[mylock]
                        inner join zzzz_tbl_Invoice_Invoice_RefNo f --//[mylock]
                            on t.InvoiceCode = f.InvoiceCode
                    where(1=1)
	                    ---and t.InvoiceCode = '@objInvoiceCode'
                    ;

                    --select null tbl_Invoice_Invoice, t.* from #tbl_Invoice_Invoice t --//[mylock];
                    --drop table #tbl_Invoice_Invoice;

                    ----- #tbl_Invoice_InvoiceMix_TotalQty:
                    select 
	                    t.InvoiceCode
						, t.Idx
	                    , Sum(t.Qty * t.UnitPrice) TotalValInvoice
	                    , Sum(t.Qty * t.UnitPrice * t.VATRate/100 ) TotalValVAT
                    into #tbl_Invoice_InvoiceDtl_TotalQty
                    from Invoice_InvoiceDtl t --//[mylock]
	                    inner join #tbl_Invoice_Invoice f --//[mylock]
		                    on t.InvoiceCode = f.InvoiceCode
                    where(1=1)
                    group by
	                    t.InvoiceCode
						, t.Idx
                    ;

                    --select null tbl_Invoice_InvoiceMix_TotalQty, t.* from #tbl_Invoice_InvoiceMix_TotalQty t --//[mylock];
                    --drop table #tbl_Invoice_InvoiceMix_TotalQty;

                    --- Check:
                    select 
	                    t.InvoiceCode
						, t.Idx
						, t.ValInvoice input_ValInvoice
						, t.ValTax input_ValTax
						, f.TotalValInvoice calc_ValInvoice
						, f.TotalValVAT Calc_ValTax
					into #tbl_Invoice_Invoice_Check
                    from Invoice_InvoiceDtl t --//[mylock]
	                    left join #tbl_Invoice_InvoiceDtl_TotalQty f --//[mylock]
		                    on t.InvoiceCode = f.InvoiceCode
								and t.Idx = f.Idx
                    where(1=1)
                    ;

					--- Return:
					select 
						t.*
					from #tbl_Invoice_Invoice_Check t --//[mylock]
					where(1=1)
						and ABS(t.input_ValInvoice - t.calc_ValInvoice) > @Default_Epsilon
						and ABS(t.input_ValTax - t.Calc_ValTax) > @Default_Epsilon

                    ---- Clear For Debug:
                    drop table #tbl_Invoice_Invoice;
					drop table #tbl_Invoice_InvoiceDtl_TotalQty;
					drop table #tbl_Invoice_Invoice_Check;
                "
                , "@Default_Epsilon", TConst.BizMix.Default_Epsilon // 0.000001
                , "zzzz_tbl_Invoice_Invoice_RefNo", zzzz_tbl_Invoice_Invoice_RefNo
                );
            //
            DataTable dtCheck = _cf.db.ExecQuery(strSqlcheckData).Tables[0];
            if (dtCheck.Rows.Count > 0)
            {
                alParamsCoupleError.AddRange(new object[]{
                    "Check.InvoiceCode", dtCheck.Rows[0]["InvoiceCode"]
                    , "Check.Idx", dtCheck.Rows[0]["Idx"]
                    , "Check.input_ValInvoice", dtCheck.Rows[0]["input_ValInvoice"]
                    , "Check.Calc.calc_ValInvoice", dtCheck.Rows[0]["calc_ValInvoice"]
                    , "Check.input_ValTax", dtCheck.Rows[0]["input_ValTax"]
                    , "Check.Calc.Calc_ValTax", dtCheck.Rows[0]["Calc_ValTax"]
                    });
                throw CmUtils.CMyException.Raise(
                    TError.ErridnInventory.myCheck_Invoice_InvoiceDtl_Total_InvalidValue
                    , null
                    , alParamsCoupleError.ToArray()
                    );
            }
        }
        private void myCheck_Invoice_Invoice_Total_New20190805(
            ref ArrayList alParamsCoupleError
            , DateTime dtimeSys
            ////
            , object zzzz_tbl_Invoice_Invoice_RefNo
            )
        {
            string strSqlcheckData = CmUtils.StringUtils.Replace(@"
                    ---- #tbl_Invoice_Invoice:
                    select 
	                    t.InvoiceCode
                    into #tbl_Invoice_Invoice
                    from Invoice_Invoice t --//[mylock]
                        inner join zzzz_tbl_Invoice_Invoice_RefNo f --//[mylock]
                            on t.InvoiceCode = f.InvoiceCode
                    where(1=1)
	                    ---and t.InvoiceCode = '@objInvoiceCode'
                    ;

                    --select null tbl_Invoice_Invoice, t.* from #tbl_Invoice_Invoice t --//[mylock];
                    --drop table #tbl_Invoice_Invoice;

                    ----- #tbl_Invoice_InvoiceMix_TotalQty:
                    select 
	                    t.InvoiceCode
	                    , Sum(Round((t.Qty * t.UnitPrice), 0)) TotalValInvoice
	                    , Sum(Round((t.Qty * t.UnitPrice * t.VATRate/100 ), 0)) TotalValVAT
                    into #tbl_Invoice_InvoiceMix_TotalQty
                    from Invoice_InvoiceDtl t --//[mylock]
	                    inner join #tbl_Invoice_Invoice f --//[mylock]
		                    on t.InvoiceCode = f.InvoiceCode
                    where(1=1)
                    group by
	                    t.InvoiceCode
                    ;

                    --select null tbl_Invoice_InvoiceMix_TotalQty, t.* from #tbl_Invoice_InvoiceMix_TotalQty t --//[mylock];
                    --drop table #tbl_Invoice_InvoiceMix_TotalQty;

                    --- Check:
                    select 
	                    t.InvoiceCode
	                    , f.TotalValInvoice
	                    , f.TotalValVAT
	                    , (f.TotalValInvoice + f.TotalValVAT) TotalValPmt
	                    , k.TotalValInvoice input_TotalValInvoice
	                    , k.TotalValVAT input_TotalValVAT
	                    , k.TotalValPmt input_TotalValPmt
					--into #tbl_Invoice_Invoice_Total
                    from #tbl_Invoice_Invoice t --//[mylock]
	                    left join #tbl_Invoice_InvoiceMix_TotalQty f --//[mylock]
		                    on t.InvoiceCode = f.InvoiceCode
	                    inner join Invoice_Invoice k --//[mylock]
		                    on t.InvoiceCode = k.InvoiceCode
                    where(1=1)
	                    and  (
			                    ((f.TotalValInvoice + f.TotalValVAT) != k.TotalValPmt)
			                    or (f.TotalValInvoice != k.TotalValInvoice)
			                    or (f.TotalValVAT != k.TotalValVAT)
	                    )
                    ;

                    ---- Clear For Debug:
                    drop table #tbl_Invoice_Invoice;
                    drop table #tbl_Invoice_InvoiceMix_TotalQty;
                "
                //, "@Default_Epsilon", TConst.BizMix.Default_Epsilon // 0.000001
                , "zzzz_tbl_Invoice_Invoice_RefNo", zzzz_tbl_Invoice_Invoice_RefNo
                );
            //
            DataTable dtCheck = _cf.db.ExecQuery(strSqlcheckData).Tables[0];
            if (dtCheck.Rows.Count > 0)
            {
                alParamsCoupleError.AddRange(new object[]{
                    "Check.InvoiceCode", dtCheck.Rows[0]["InvoiceCode"]
                    , "Check.Calc.TotalValInvoice", dtCheck.Rows[0]["TotalValInvoice"]
                    , "Check.Calc.TotalValVAT", dtCheck.Rows[0]["TotalValVAT"]
                    , "Check.Calc.TotalValPmt", dtCheck.Rows[0]["TotalValPmt"]
                    , "Check.input_TotalValInvoice", dtCheck.Rows[0]["input_TotalValInvoice"]
                    , "Check.input_TotalValVAT", dtCheck.Rows[0]["input_TotalValVAT"]
                    , "Check.input_TotalValPmt", dtCheck.Rows[0]["input_TotalValPmt"]
                    });
                throw CmUtils.CMyException.Raise(
                    TError.ErridnInventory.myCheck_Invoice_Invoice_Total_InvalidValue
                    , null
                    , alParamsCoupleError.ToArray()
                    );
            }
        }

        private void myCheck_Invoice_InvoiceDtl_Total_New20190805(
            ref ArrayList alParamsCoupleError
            , DateTime dtimeSys
            ////
            , object zzzz_tbl_Invoice_Invoice_RefNo
            )
        {
            string strSqlcheckData = CmUtils.StringUtils.Replace(@"
                    ---- #tbl_Invoice_Invoice:
                    select 
	                    t.InvoiceCode
                    into #tbl_Invoice_Invoice
                    from Invoice_Invoice t --//[mylock]
                        inner join zzzz_tbl_Invoice_Invoice_RefNo f --//[mylock]
                            on t.InvoiceCode = f.InvoiceCode
                    where(1=1)
	                    ---and t.InvoiceCode = '@objInvoiceCode'
                    ;

                    --select null tbl_Invoice_Invoice, t.* from #tbl_Invoice_Invoice t --//[mylock];
                    --drop table #tbl_Invoice_Invoice;

                    ----- #tbl_Invoice_InvoiceMix_TotalQty:
                    select 
	                    t.InvoiceCode
						, t.Idx
	                    , Sum(Round((t.Qty * t.UnitPrice), 0)) TotalValInvoice
	                    , Sum(Round((t.Qty * t.UnitPrice * t.VATRate/100 ), 0)) TotalValVAT
                    into #tbl_Invoice_InvoiceDtl_TotalQty
                    from Invoice_InvoiceDtl t --//[mylock]
	                    inner join #tbl_Invoice_Invoice f --//[mylock]
		                    on t.InvoiceCode = f.InvoiceCode
                    where(1=1)
                    group by
	                    t.InvoiceCode
						, t.Idx
                    ;

                    --select null tbl_Invoice_InvoiceMix_TotalQty, t.* from #tbl_Invoice_InvoiceMix_TotalQty t --//[mylock];
                    --drop table #tbl_Invoice_InvoiceMix_TotalQty;

                    --- Check:
                    select 
	                    t.InvoiceCode
						, t.Idx
						, t.ValInvoice input_ValInvoice
						, t.ValTax input_ValTax
						, f.TotalValInvoice calc_ValInvoice
						, f.TotalValVAT Calc_ValTax
					into #tbl_Invoice_Invoice_Check
                    from Invoice_InvoiceDtl t --//[mylock]
	                    left join #tbl_Invoice_InvoiceDtl_TotalQty f --//[mylock]
		                    on t.InvoiceCode = f.InvoiceCode
								and t.Idx = f.Idx
                    where(1=1)
                    ;

					--- Return:
					select 
						t.*
					from #tbl_Invoice_Invoice_Check t --//[mylock]
					where(1=1)
						and (t.input_ValInvoice != t.calc_ValInvoice)
						or (t.input_ValTax != t.Calc_ValTax)

                    ---- Clear For Debug:
                    drop table #tbl_Invoice_Invoice;
					drop table #tbl_Invoice_InvoiceDtl_TotalQty;
					drop table #tbl_Invoice_Invoice_Check;
                "
                //, "@Default_Epsilon", TConst.BizMix.Default_Epsilon // 0.000001
                , "zzzz_tbl_Invoice_Invoice_RefNo", zzzz_tbl_Invoice_Invoice_RefNo
                );
            //
            DataTable dtCheck = _cf.db.ExecQuery(strSqlcheckData).Tables[0];
            if (dtCheck.Rows.Count > 0)
            {
                alParamsCoupleError.AddRange(new object[]{
                    "Check.InvoiceCode", dtCheck.Rows[0]["InvoiceCode"]
                    , "Check.Idx", dtCheck.Rows[0]["Idx"]
                    , "Check.input_ValInvoice", dtCheck.Rows[0]["input_ValInvoice"]
                    , "Check.Calc.calc_ValInvoice", dtCheck.Rows[0]["calc_ValInvoice"]
                    , "Check.input_ValTax", dtCheck.Rows[0]["input_ValTax"]
                    , "Check.Calc.Calc_ValTax", dtCheck.Rows[0]["Calc_ValTax"]
                    });
                throw CmUtils.CMyException.Raise(
                    TError.ErridnInventory.myCheck_Invoice_InvoiceDtl_Total_InvalidValue
                    , null
                    , alParamsCoupleError.ToArray()
                    );
            }
        }


        //// Check: 

        private void myCheck_Invoice_Invoice_Total_New20190905_Old(
            ref ArrayList alParamsCoupleError
            , DateTime dtimeSys
            ////
            , object zzzz_tbl_Invoice_Invoice_RefNo
            )
        {
            string strSqlcheckData = CmUtils.StringUtils.Replace(@"
                    select 
	                    t.InvoiceCode
						, k.VATType
                    into #tbl_Invoice_Invoice
                    from Invoice_Invoice t --//[mylock]
                        inner join zzzz_tbl_Invoice_Invoice_RefNo f --//[mylock]
                            on t.InvoiceCode = f.InvoiceCode
                        inner join Invoice_TempInvoice g --//[mylock]
                            on t.TInvoiceCode = g.TInvoiceCode
                        inner join Invoice_TempGroup k --//[mylock]
                            on g.InvoiceTGroupCode = k.InvoiceTGroupCode
                    where(1=1)
	                    ---and t.InvoiceCode = '@objInvoiceCode'
                    ;

                    --select null tbl_Invoice_Invoice, t.* from #tbl_Invoice_Invoice t --//[mylock];
                    --drop table #tbl_Invoice_Invoice;

                    ----- #tbl_Invoice_InvoiceMix_TotalQty:
                    select 
	                    t.InvoiceCode
						, (case
							when f.VATType = 'NVAT' then Sum(Round((t.Qty * t.UnitPrice), 0)) -- làm tròn từng rows
							else Round(Sum(t.Qty * t.UnitPrice), 0) -- làm tròn theo tổng
						end ) TotalValInvoice
						-----
						, (case
							when f.VATType = 'NVAT' then Sum(Round((t.Qty * t.UnitPrice * t.VATRate/100 ), 0)) -- làm tròn từng rows
							else Round(Sum(t.Qty * t.UnitPrice * t.VATRate/100 ), 0) -- làm tròn theo tổng
						end ) TotalValVAT
                    into #tbl_Invoice_InvoiceMix_TotalQty
                    from Invoice_InvoiceDtl t --//[mylock]
	                    inner join #tbl_Invoice_Invoice f --//[mylock]
		                    on t.InvoiceCode = f.InvoiceCode
                    where(1=1)
                    group by
	                    t.InvoiceCode
						, f.VATType
                    ;

                    --select null tbl_Invoice_InvoiceMix_TotalQty, t.* from #tbl_Invoice_InvoiceMix_TotalQty t --//[mylock];
                    --drop table #tbl_Invoice_InvoiceMix_TotalQty;

                    select 
	                    t.InvoiceCode
	                    , f.TotalValInvoice
	                    , f.TotalValVAT
	                    , (f.TotalValInvoice + f.TotalValVAT) TotalValPmt
	                    , k.TotalValInvoice input_TotalValInvoice
	                    , k.TotalValVAT input_TotalValVAT
	                    , k.TotalValPmt input_TotalValPmt
						, (case
								when k.TotalValPmt/1000000 > 10 then k.TotalValPmt/1000000
								else 10
							end)  Delta
					into #tbl_Invoice_Invoice_Total
                    from #tbl_Invoice_Invoice t --//[mylock]
	                    left join #tbl_Invoice_InvoiceMix_TotalQty f --//[mylock]
		                    on t.InvoiceCode = f.InvoiceCode
	                    inner join Invoice_Invoice k --//[mylock]
		                    on t.InvoiceCode = k.InvoiceCode
                    where(1=1)
					;
					
                    --- Check:
					select 
						t.*
					from #tbl_Invoice_Invoice_Total t --//[mylock]
					where(1=1)
	                    and  (
			                    (ABS(t.TotalValInvoice + t.TotalValVAT - t.TotalValPmt) > t.Delta)
			                    or (ABS(t.TotalValInvoice - t.TotalValInvoice) > t.Delta)
			                    or (ABS(t.TotalValVAT - t.TotalValVAT) > t.Delta)
	                    )
                    ;

                    ---- Clear For Debug:
                    drop table #tbl_Invoice_Invoice;
                    drop table #tbl_Invoice_Invoice_Total;
                    drop table #tbl_Invoice_InvoiceMix_TotalQty;
                "
                //, "@Default_Epsilon", TConst.BizMix.Default_Epsilon // 0.000001
                , "zzzz_tbl_Invoice_Invoice_RefNo", zzzz_tbl_Invoice_Invoice_RefNo
                );
            //
            DataTable dtCheck = _cf.db.ExecQuery(strSqlcheckData).Tables[0];
            if (dtCheck.Rows.Count > 0)
            {
                alParamsCoupleError.AddRange(new object[]{
                    "Check.InvoiceCode", dtCheck.Rows[0]["InvoiceCode"]
                    , "Check.Calc.TotalValInvoice", dtCheck.Rows[0]["TotalValInvoice"]
                    , "Check.Calc.TotalValVAT", dtCheck.Rows[0]["TotalValVAT"]
                    , "Check.Calc.TotalValPmt", dtCheck.Rows[0]["TotalValPmt"]
                    , "Check.input_TotalValInvoice", dtCheck.Rows[0]["input_TotalValInvoice"]
                    , "Check.input_TotalValVAT", dtCheck.Rows[0]["input_TotalValVAT"]
                    , "Check.input_TotalValPmt", dtCheck.Rows[0]["input_TotalValPmt"]
                    });
                throw CmUtils.CMyException.Raise(
                    TError.ErridnInventory.myCheck_Invoice_Invoice_Total_InvalidValue
                    , null
                    , alParamsCoupleError.ToArray()
                    );
            }
        }

        private void myCheck_Invoice_InvoiceDtl_Total_New20190905_Old(
            ref ArrayList alParamsCoupleError
            , DateTime dtimeSys
            ////
            , object zzzz_tbl_Invoice_Invoice_RefNo
            )
        {
            string strSqlcheckData = CmUtils.StringUtils.Replace(@"
                    select 
	                    t.InvoiceCode
						, k.VATType
                    into #tbl_Invoice_Invoice
                    from Invoice_Invoice t --//[mylock]
                        inner join zzzz_tbl_Invoice_Invoice_RefNo f --//[mylock]
                            on t.InvoiceCode = f.InvoiceCode
                        inner join Invoice_TempInvoice g --//[mylock]
                            on t.TInvoiceCode = g.TInvoiceCode
                        inner join Invoice_TempGroup k --//[mylock]
                            on g.InvoiceTGroupCode = k.InvoiceTGroupCode
                    where(1=1)
	                    ---and t.InvoiceCode = '@objInvoiceCode'
                    ;

                    --select null tbl_Invoice_Invoice, t.* from #tbl_Invoice_Invoice t --//[mylock];
                    --drop table #tbl_Invoice_Invoice;

                    ----- #tbl_Invoice_InvoiceMix_TotalQty:
                    select 
	                    t.InvoiceCode
						, t.Idx
						, (case
							when f.VATType = 'NVAT' then Sum(Round((t.Qty * t.UnitPrice), 0)) -- làm tròn từng rows
							else Round(Sum(t.Qty * t.UnitPrice), 0) -- làm tròn theo tổng
						end ) TotalValInvoice
						-----
						, (case
							when f.VATType = 'NVAT' then Sum(Round((t.Qty * t.UnitPrice * t.VATRate/100 ), 0)) -- làm tròn từng rows
							else Round(Sum(t.Qty * t.UnitPrice * t.VATRate/100 ), 0) -- làm tròn theo tổng
						end ) TotalValVAT
                    into #tbl_Invoice_InvoiceDtl_TotalQty
                    from Invoice_InvoiceDtl t --//[mylock]
	                    inner join #tbl_Invoice_Invoice f --//[mylock]
		                    on t.InvoiceCode = f.InvoiceCode
                    where(1=1)
                    group by
	                    t.InvoiceCode
						, t.Idx
						, f.VATType
                    ;

                    --select null tbl_Invoice_InvoiceMix_TotalQty, t.* from #tbl_Invoice_InvoiceMix_TotalQty t --//[mylock];
                    --drop table #tbl_Invoice_InvoiceMix_TotalQty;

                    --- Check:
                    select 
	                    t.InvoiceCode
						, t.Idx
						, t.ValInvoice input_ValInvoice
						, t.ValTax input_ValTax
						, f.TotalValInvoice calc_ValInvoice
						, f.TotalValVAT Calc_ValTax
						, (case
								when t.ValInvoice/1000000 > 10 then t.ValInvoice/1000000
								else 10
							end)  Delta_ValInvoice
						, (case
								when t.ValTax/1000000 > 10 then t.ValTax/1000000
								else 10
							end)  Delta_ValTax
					into #tbl_Invoice_Invoice_Check
                    from Invoice_InvoiceDtl t --//[mylock]
	                    left join #tbl_Invoice_InvoiceDtl_TotalQty f --//[mylock]
		                    on t.InvoiceCode = f.InvoiceCode
								and t.Idx = f.Idx
                    where(1=1)
                    ;

					--- Return:
					select 
						t.*
					from #tbl_Invoice_Invoice_Check t --//[mylock]
					where(1=1)
						and (ABS(t.input_ValInvoice - t.calc_ValInvoice) > t.Delta_ValInvoice)
						or (ABS(t.input_ValTax - t.Calc_ValTax) > t.Delta_ValTax)
					;

                    ---- Clear For Debug:
                    drop table #tbl_Invoice_Invoice;
					drop table #tbl_Invoice_InvoiceDtl_TotalQty;
					drop table #tbl_Invoice_Invoice_Check;
                "
                //, "@Default_Epsilon", TConst.BizMix.Default_Epsilon // 0.000001
                , "zzzz_tbl_Invoice_Invoice_RefNo", zzzz_tbl_Invoice_Invoice_RefNo
                );
            //
            DataTable dtCheck = _cf.db.ExecQuery(strSqlcheckData).Tables[0];
            if (dtCheck.Rows.Count > 0)
            {
                alParamsCoupleError.AddRange(new object[]{
                    "Check.InvoiceCode", dtCheck.Rows[0]["InvoiceCode"]
                    , "Check.Idx", dtCheck.Rows[0]["Idx"]
                    , "Check.input_ValInvoice", dtCheck.Rows[0]["input_ValInvoice"]
                    , "Check.Calc.calc_ValInvoice", dtCheck.Rows[0]["calc_ValInvoice"]
                    , "Check.input_ValTax", dtCheck.Rows[0]["input_ValTax"]
                    , "Check.Calc.Calc_ValTax", dtCheck.Rows[0]["Calc_ValTax"]
                    });
                throw CmUtils.CMyException.Raise(
                    TError.ErridnInventory.myCheck_Invoice_InvoiceDtl_Total_InvalidValue
                    , null
                    , alParamsCoupleError.ToArray()
                    );
            }
        }


        //// 2019-09-18: A Hương nâng cấp check làm tròn trong thiết kế: "svn://192.168.1.199:8035/idocNet/2018.5.TVAN/Docs/Design/2019.TVAN.HoaDonDT.Design.P2.xlsx" - sheet UI.Std.
        private void myCheck_Invoice_Invoice_Total_New20190905(
            ref ArrayList alParamsCoupleError
            , DateTime dtimeSys
            ////
            , object zzzz_tbl_Invoice_Invoice_RefNo
            )
        {
            string strSqlcheckData = CmUtils.StringUtils.Replace(@"
                    select 
	                    t.InvoiceCode
						, k.VATType
                    into #tbl_Invoice_Invoice
                    from Invoice_Invoice t --//[mylock]
                        inner join zzzz_tbl_Invoice_Invoice_RefNo f --//[mylock]
                            on t.InvoiceCode = f.InvoiceCode
                        inner join Invoice_TempInvoice g --//[mylock]
                            on t.TInvoiceCode = g.TInvoiceCode
                        inner join Invoice_TempGroup k --//[mylock]
                            on g.InvoiceTGroupCode = k.InvoiceTGroupCode
                    where(1=1)
	                    ---and t.InvoiceCode = '@objInvoiceCode'
                    ;

                    --select null tbl_Invoice_Invoice, t.* from #tbl_Invoice_Invoice t --//[mylock];
                    --drop table #tbl_Invoice_Invoice;

                    ----- #tbl_Invoice_InvoiceMix_TotalQty:
                    select 
	                    t.InvoiceCode
						, (case
							when f.VATType = 'NVAT' then Sum(Round((t.Qty * t.UnitPrice), 0)) -- làm tròn từng rows
							else Round(Sum(t.Qty * t.UnitPrice), 0) -- làm tròn theo tổng
						end ) TotalValInvoice
						-----
						, (case
							when f.VATType = 'NVAT' then Sum(Round((t.Qty * t.UnitPrice * t.VATRate/100 ), 0)) -- làm tròn từng rows
							else Round(Sum(t.Qty * t.UnitPrice * t.VATRate/100 ), 0) -- làm tròn theo tổng
						end ) TotalValVAT
                    into #tbl_Invoice_InvoiceMix_TotalQty
                    from Invoice_InvoiceDtl t --//[mylock]
	                    inner join #tbl_Invoice_Invoice f --//[mylock]
		                    on t.InvoiceCode = f.InvoiceCode
                    where(1=1)
                    group by
	                    t.InvoiceCode
						, f.VATType
                    ;

                    --select null tbl_Invoice_InvoiceMix_TotalQty, t.* from #tbl_Invoice_InvoiceMix_TotalQty t --//[mylock];
                    --drop table #tbl_Invoice_InvoiceMix_TotalQty;

                    select 
	                    t.InvoiceCode
	                    , f.TotalValInvoice
	                    , f.TotalValVAT
	                    , (f.TotalValInvoice + f.TotalValVAT) TotalValPmt
	                    , k.TotalValInvoice input_TotalValInvoice
	                    , k.TotalValVAT input_TotalValVAT
	                    , k.TotalValPmt input_TotalValPmt
						, (case
								when k.TotalValPmt/1000000 > 10 then k.TotalValPmt/1000000
								else 10
							end)  Delta
					into #tbl_Invoice_Invoice_Total
                    from #tbl_Invoice_Invoice t --//[mylock]
	                    left join #tbl_Invoice_InvoiceMix_TotalQty f --//[mylock]
		                    on t.InvoiceCode = f.InvoiceCode
	                    inner join Invoice_Invoice k --//[mylock]
		                    on t.InvoiceCode = k.InvoiceCode
                    where(1=1)
					;
					
                    --- Check:
					select 
						t.*
					from #tbl_Invoice_Invoice_Total t --//[mylock]
					where(1=1)
	                    and  (
			                    (ABS(t.input_TotalValPmt - t.TotalValPmt) > t.Delta)
			                    or (ABS(t.input_TotalValInvoice - t.TotalValInvoice) > t.Delta)
			                    or (ABS(t.input_TotalValVAT - t.TotalValVAT) > t.Delta)
	                    )
                    ;

                    ---- Clear For Debug:
                    drop table #tbl_Invoice_Invoice;
                    drop table #tbl_Invoice_Invoice_Total;
                    drop table #tbl_Invoice_InvoiceMix_TotalQty;
                "
                //, "@Default_Epsilon", TConst.BizMix.Default_Epsilon // 0.000001
                , "zzzz_tbl_Invoice_Invoice_RefNo", zzzz_tbl_Invoice_Invoice_RefNo
                );
            //
            DataTable dtCheck = _cf.db.ExecQuery(strSqlcheckData).Tables[0];
            if (dtCheck.Rows.Count > 0)
            {
                alParamsCoupleError.AddRange(new object[]{
                    "Check.InvoiceCode", dtCheck.Rows[0]["InvoiceCode"]
                    , "Check.Calc.TotalValInvoice", dtCheck.Rows[0]["TotalValInvoice"]
                    , "Check.Calc.TotalValVAT", dtCheck.Rows[0]["TotalValVAT"]
                    , "Check.Calc.TotalValPmt", dtCheck.Rows[0]["TotalValPmt"]
                    , "Check.input_TotalValInvoice", dtCheck.Rows[0]["input_TotalValInvoice"]
                    , "Check.input_TotalValVAT", dtCheck.Rows[0]["input_TotalValVAT"]
                    , "Check.input_TotalValPmt", dtCheck.Rows[0]["input_TotalValPmt"]
                    });
                throw CmUtils.CMyException.Raise(
                    TError.ErridnInventory.myCheck_Invoice_Invoice_Total_InvalidValue
                    , null
                    , alParamsCoupleError.ToArray()
                    );
            }
        }

        private void myCheck_Invoice_InvoiceDtl_Total_New20190905(
            ref ArrayList alParamsCoupleError
            , DateTime dtimeSys
            ////
            , object zzzz_tbl_Invoice_Invoice_RefNo
            )
        {
            string strSqlcheckData = CmUtils.StringUtils.Replace(@"
                    -- #tbl_Invoice_Invoice:
                    select 
	                    t.InvoiceCode
						, k.VATType
                    into #tbl_Invoice_Invoice
                    from Invoice_Invoice t --//[mylock]
                        inner join zzzz_tbl_Invoice_Invoice_RefNo f --//[mylock]
                            on t.InvoiceCode = f.InvoiceCode
                        inner join Invoice_TempInvoice g --//[mylock]
                            on t.TInvoiceCode = g.TInvoiceCode
                        inner join Invoice_TempGroup k --//[mylock]
                            on g.InvoiceTGroupCode = k.InvoiceTGroupCode
                    where(1=1)
						--and t.InvoiceCode = '0005K39B00QBP2'
                    ;

                    --select null tbl_Invoice_Invoice, t.* from #tbl_Invoice_Invoice t --//[mylock];
                    --drop table #tbl_Invoice_Invoice;


                    ----- #tbl_Invoice_InvoiceDtl_1VAT:
                    select 
	                    t.InvoiceCode
						--, t.Idx
						, t.VATType
						, Round(Sum(f.Qty * f.UnitPrice), 0) calc_TotalValInvoice -- làm tròn theo tổng
						-----
						, Round(Sum(f.Qty * f.UnitPrice * f.VATRate/100 ), 0) calc_TotalValTax -- làm tròn theo tổng
						, g.TotalValInvoice input_TotalValInvoice
						, g.TotalValVAT input_TotalValTax
						, (case
								when (g.TotalValInvoice/1000000 >= 10) then g.TotalValInvoice/1000000
								else 10
							end)  Delta_TotalValInvoice
						, (case
								when (g.TotalValVAT/1000000 >= 10) then g.TotalValVAT/1000000
								else 10
							end)  Delta_TotalValTax
					into #tbl_Invoice_InvoiceDtl_1VAT
                    from #tbl_Invoice_Invoice t --//[mylock]
	                    left join Invoice_InvoiceDtl f --//[mylock]
		                    on t.InvoiceCode = f.InvoiceCode
	                    inner join Invoice_Invoice g --//[mylock]
		                    on t.InvoiceCode = g.InvoiceCode
                    where(1=1)
						and t.VATType = '1VAT'
                    group by
	                    t.InvoiceCode
						--, t.Idx
						, t.VATType
						, g.TotalValInvoice
						, g.TotalValVAT
                    ;

                    --select null tbl_Invoice_InvoiceDtl_1VAT, t.* from #tbl_Invoice_InvoiceDtl_1VAT t --//[mylock];
                    --drop table #tbl_Invoice_InvoiceDtl_1VAT;


                    ----- #tbl_Invoice_InvoiceDtl_NVAT:
                    select 
	                    t.InvoiceCode
						, f.Idx
						, t.VATType
						, Round((f.Qty * f.UnitPrice), 0) calc_ValInvoice -- làm tròn từng rows
						-----
						, Round((f.Qty * f.UnitPrice * f.VATRate/100 ), 0) calc_ValTax -- làm tròn từng rows
						, f.ValInvoice input_ValInvoice
						, f.ValTax input_ValTax
						, (case
								when (f.ValInvoice/1000000 >= 1) then f.ValInvoice/1000000
								--when (t.ValTax/1000000 < 1) then 1
								else 1
							end)  Delta_ValInvoice
						, (case
							when (f.ValTax/1000000 >= 1) then f.ValTax/1000000
							else 1
						end)  Delta_ValTax
					into #tbl_Invoice_InvoiceDtl_NVAT
                    from #tbl_Invoice_Invoice t --//[mylock]
	                    left join Invoice_InvoiceDtl f --//[mylock]
		                    on t.InvoiceCode = f.InvoiceCode
                    where(1=1)
						and t.VATType = 'NVAT'
					;

					--select null tbl_Invoice_InvoiceDtl_NVAT, t.* from #tbl_Invoice_InvoiceDtl_NVAT t --//[mylock];
                    --drop table #tbl_Invoice_InvoiceDtl_NVAT;


                    ----- #tbl_Invoice_InvoiceDtl_Total_NVAT:
                    select 
	                    t.InvoiceCode
						--, t.Idx
						, t.VATType
						, f.TotalValInvoice input_TtValInvoice
						, f.TotalValVAT input_TtValTax
						, Sum(t.calc_ValInvoice) calc_TtValInvoice
						, Sum(t.calc_ValTax) calc_TtValTax
						, (case
								when (Sum(t.input_ValInvoice)/1000000 >= 10) then Sum(t.input_ValInvoice)/1000000
								else 10
							end)  Delta_TtValInvoice
						, (case
								when (Sum(t.input_ValTax)/1000000 >= 10) then Sum(t.input_ValTax)/1000000
								else 10
							end)  Delta_TtValTax
                    into #tbl_Invoice_InvoiceDtl_Total_NVAT
                    from #tbl_Invoice_InvoiceDtl_NVAT t --//[mylock]
	                    inner join Invoice_Invoice f --//[mylock]
		                    on t.InvoiceCode = f.InvoiceCode
                    where(1=1) 
					group by
	                    t.InvoiceCode
						--, t.Idx
						, t.VATType
						, f.TotalValInvoice
						, f.TotalValVAT
                    ;

                    --select null tbl_Invoice_InvoiceDtl_Total_NVAT, t.* from #tbl_Invoice_InvoiceDtl_Total_NVAT t --//[mylock];
                    --drop table #tbl_Invoice_InvoiceDtl_Total_NVAT;
					
                    ----- #tbl_Invoice_InvoiceDtl_Check:
					select 
						t.InvoiceCode
						, t.VATType
						, t.calc_TotalValInvoice calc_ValInvoice
						, t.calc_TotalValTax calc_ValTax
						, t.input_TotalValInvoice input_ValInvoice
						, t.input_TotalValTax input_ValTax
						, t.Delta_TotalValInvoice delta_ValInvoice
						, t.Delta_TotalValTax delta_ValTax
					into #tbl_Invoice_InvoiceDtl_Check
					from #tbl_Invoice_InvoiceDtl_1VAT t --//[mylock]
					union all
					select 
						f.InvoiceCode
						, f.VATType
						, f.calc_ValInvoice
						, f.calc_ValTax
						, f.input_ValInvoice
						, f.input_ValTax
						, f.Delta_ValInvoice
						, f.Delta_ValTax
					from #tbl_Invoice_InvoiceDtl_NVAT f --//[mylock]
					union all
					select 
						g.InvoiceCode
						, g.VATType
						, g.calc_TtValInvoice
						, g.calc_TtValTax
						, g.input_TtValInvoice
						, g.input_TtValTax
						, g.Delta_TtValInvoice
						, g.Delta_TtValTax
					from #tbl_Invoice_InvoiceDtl_Total_NVAT g --//[mylock]
					where (1=1)
					;
					
                    --select null tbl_Invoice_InvoiceDtl_Check, t.* from #tbl_Invoice_InvoiceDtl_Check t --//[mylock];
                    --drop table #tbl_Invoice_InvoiceDtl_Check;
					
					---Return:
					select 
						t.*
					from #tbl_Invoice_InvoiceDtl_Check t --//[mylock]
					where(1=1)
						and (ABS(Isnull(t.input_ValInvoice, 0) - Isnull(t.calc_ValInvoice , 0)) > t.delta_ValInvoice)
						or (ABS(Isnull(t.input_ValTax, 0) - Isnull(t.calc_ValTax, 0)) > t.delta_ValTax)
					;

                    ---- Clear For Debug:
                    drop table #tbl_Invoice_Invoice;
					drop table #tbl_Invoice_InvoiceDtl_1VAT;
					drop table #tbl_Invoice_InvoiceDtl_NVAT;
					drop table #tbl_Invoice_InvoiceDtl_Total_NVAT;
					drop table #tbl_Invoice_InvoiceDtl_Check;
                "
                //, "@Default_Epsilon", TConst.BizMix.Default_Epsilon // 0.000001
                , "zzzz_tbl_Invoice_Invoice_RefNo", zzzz_tbl_Invoice_Invoice_RefNo
                );
            //
            DataTable dtCheck = _cf.db.ExecQuery(strSqlcheckData).Tables[0];
            if (dtCheck.Rows.Count > 0)
            {
                alParamsCoupleError.AddRange(new object[]{
                    "Check.InvoiceCode", dtCheck.Rows[0]["InvoiceCode"]
                    , "Check.input_ValInvoice", dtCheck.Rows[0]["input_ValInvoice"]
                    , "Check.Calc.calc_ValInvoice", dtCheck.Rows[0]["calc_ValInvoice"]
                    , "Check.input_ValTax", dtCheck.Rows[0]["input_ValTax"]
                    , "Check.Calc.Calc_ValTax", dtCheck.Rows[0]["Calc_ValTax"]
                    });
                throw CmUtils.CMyException.Raise(
                    TError.ErridnInventory.myCheck_Invoice_InvoiceDtl_Total_InvalidValue
                    , null
                    , alParamsCoupleError.ToArray()
                    );
            }
        }

        private void myCheck_OS_Invoice_Invoice_CheckMasterPrd(
            ref ArrayList alParamsCoupleError
            , DateTime dtimeSys
            , string strTid
            ////
            , object zzzz_tbl_Invoice_Invoice_RefNo
            )
        {
            string strSqlcheckData = CmUtils.StringUtils.Replace(@"                    
                    ---- #tbl_Invoice_Invoice:
                    select 
	                    t.InvoiceCode
                    into #tbl_Invoice_Invoice
                    from Invoice_Invoice t --//[mylock]
                        inner join zzzz_tbl_Invoice_Invoice_RefNo f --//[mylock]
                            on t.InvoiceCode = f.InvoiceCode
                    where(1=1)
	                    ---and t.InvoiceCode = '@objInvoiceCode'
                    ;

                    --- Return 
                    select 
	                    z.OrgID
	                    , t.SpecCode
	                    , '1' FlagExist
	                    , '1' FlagActive
                    from Invoice_InvoiceDtl t --//[mylock]
	                    inner join #tbl_Invoice_Invoice f --//[mylock]
		                    on t.InvoiceCode = f.InvoiceCode
	                    inner join Invoice_Invoice k --//[mylock]
		                    on f.InvoiceCode = k.InvoiceCode
	                    inner join Mst_NNT z --//[mylock]
		                    on k.MST = z.MST
                    where(1=1)
	                    and t.SpecCode is not null
	                    and t.ProductID is null
                    ;

                    ---- 
                    select 
	                    z.OrgID
	                    , t.SpecCode
						, t.ProductID
	                    , '1' FlagExist
	                    , null ProductIDStatus
                    from Invoice_InvoiceDtl t --//[mylock]
	                    inner join #tbl_Invoice_Invoice f --//[mylock]
		                    on t.InvoiceCode = f.InvoiceCode
	                    inner join Invoice_Invoice k --//[mylock]
		                    on f.InvoiceCode = k.InvoiceCode
	                    inner join Mst_NNT z --//[mylock]
		                    on k.MST = z.MST
                    where(1=1)
	                    and t.SpecCode is not null
	                    and t.ProductID is not null
                    ;

                    drop table #tbl_Invoice_Invoice;
                "
                , "@Default_Epsilon", TConst.BizMix.Default_Epsilon // 0.000001
                , "zzzz_tbl_Invoice_Invoice_RefNo", zzzz_tbl_Invoice_Invoice_RefNo
                );
            ////
            DataSet dsData = _cf.db.ExecQuery(strSqlcheckData);
            {
                dsData.Tables[0].TableName = "Mst_Spec";
                dsData.Tables[1].TableName = "Prd_ProductID";
            }
            ////
            DataTable dt_Mst_Spec_Check = dsData.Tables["Mst_Spec"].Copy();
            DataTable dt_Prd_ProductID_Check = dsData.Tables["Prd_ProductID"].Copy();
            ////
            if (dt_Mst_Spec_Check.Rows.Count > 0)
            {
                #region // Call Func:
                RT_OS_PrdCenter_Mst_Spec objRT_OS_PrdCenter_Mst_Spec = null;
                {
                    #region // Init:
                    List<OS_PrdCenter_Mst_Spec> LstOS_PrdCenter_Mst_SpecFiles = new List<OS_PrdCenter_Mst_Spec>();
                    {
                        ////
                        DataTable dt_Mst_SpecImage = dsData.Tables["Mst_Spec"].Copy();
                        LstOS_PrdCenter_Mst_SpecFiles = TUtils.DataTableCmUtils.ToListof<OS_PrdCenter_Mst_Spec>(dt_Mst_SpecImage);
                        ////

                    }
                    ////
                    #endregion

                    #region // WA_Mst_Spec_Get:
                    RQ_OS_PrdCenter_Mst_Spec objRQ_OS_PrdCenter_Mst_Spec = new RQ_OS_PrdCenter_Mst_Spec()
                    {
                        WAUserCode = strOS_ProductCentrer_WAUserCode,
                        WAUserPassword = strOS_ProductCentrer_WAUserPassword,
                        GwUserCode = strOS_ProductCentrer_GwUserCode,
                        GwPassword = strOS_ProductCentrer_GwPassword,
                        Tid = strTid,
                        Lst_Mst_Spec = LstOS_PrdCenter_Mst_SpecFiles
                    };
                    ////
                    try
                    {
                        objRT_OS_PrdCenter_Mst_Spec = OS_PrdCenter_Mst_SpecService.Instance.WA_OS_PrdCenter_Mst_Spec_CheckListDB(objRQ_OS_PrdCenter_Mst_Spec);

                    }
                    catch (Exception cex)
                    {
                        TUtils.CProcessExc.BizShowException(
                            ref alParamsCoupleError // alParamsCoupleError
                            , cex // cex
                            );

                        throw CmUtils.CMyException.Raise(
                            TError.ErridnInventory.CmSys_InvalidOutSite
                            , null
                            , alParamsCoupleError.ToArray()
                            );
                    }
                    ////
                    #endregion
                }
                #endregion
            }
            //// Bỏ check do Mẫu của HTC sẽ không nhập ProductID tại master (anh @Đức, Hương NV chốt  2019-07-10)
            if (dt_Prd_ProductID_Check.Rows.Count > 0)
            {
                #region // Call Func:
                //RT_OS_PrdCenter_Prd_ProductID objRT_OS_PrdCenter_Prd_ProductID = null;
                //{
                //    #region // Init:
                //    List<OS_PrdCenter_Prd_ProductID> LstOS_PrdCenter_Prd_ProductID = new List<OS_PrdCenter_Prd_ProductID>();
                //    {
                //        ////
                //        DataTable dt_Prd_ProductID = dsData.Tables["Prd_ProductID"].Copy();
                //        LstOS_PrdCenter_Prd_ProductID = TUtils.DataTableCmUtils.ToListof<OS_PrdCenter_Prd_ProductID>(dt_Prd_ProductID);
                //        ////

                //    }
                //    ////
                //    #endregion

                //    #region // WA_Prd_ProductID_Get:
                //    RQ_OS_PrdCenter_Prd_ProductID objRQ_OS_PrdCenter_Prd_ProductID = new RQ_OS_PrdCenter_Prd_ProductID()
                //    {
                //        WAUserCode = strOS_ProductCentrer_WAUserCode,
                //        WAUserPassword = strOS_ProductCentrer_WAUserPassword,
                //        GwUserCode = strOS_ProductCentrer_GwUserCode,
                //        GwPassword = strOS_ProductCentrer_GwPassword,
                //        Tid = strTid,
                //        Lst_Prd_ProductID = LstOS_PrdCenter_Prd_ProductID
                //    };
                //    ////
                //    try
                //    {
                //        objRT_OS_PrdCenter_Prd_ProductID = OS_PrdCenter_Prd_ProductIDService.Instance.WA_OS_PrdCenter_Prd_ProductID_CheckListDB(objRQ_OS_PrdCenter_Prd_ProductID);

                //    }
                //    catch (Exception cex)
                //    {
                //        TUtils.CProcessExc.BizShowException(
                //            ref alParamsCoupleError // alParamsCoupleError
                //            , cex // cex
                //            );

                //        throw CmUtils.CMyException.Raise(
                //            TError.ErridnInventory.CmSys_InvalidOutSite
                //            , null
                //            , alParamsCoupleError.ToArray()
                //            );
                //    }
                //    ////
                //    #endregion
                //}
                #endregion
            }
        }

        private void myCheck_OS_Invoice_Invoice_CheckMasterPrd_NotConfirm(
            ref ArrayList alParamsCoupleError
            , DateTime dtimeSys
            , string strTid
            ////
            , object zzzz_tbl_Invoice_Invoice_RefNo
            )
        {
            string strSqlcheckData = CmUtils.StringUtils.Replace(@"                    
                    ---- #tbl_Invoice_Invoice:
                    select 
	                    t.InvoiceCode
                    into #tbl_Invoice_Invoice
                    from Invoice_Invoice t --//[mylock]
                        inner join zzzz_tbl_Invoice_Invoice_RefNo f --//[mylock]
                            on t.InvoiceCode = f.InvoiceCode
                    where(1=1)
	                    ---and t.InvoiceCode = '@objInvoiceCode'
                    ;

                    --- Return 
                    select 
	                    z.OrgID
	                    , t.SpecCode
	                    , '1' FlagExist
	                    , '1' FlagActive
                    from Invoice_InvoiceDtl t --//[mylock]
	                    inner join #tbl_Invoice_Invoice f --//[mylock]
		                    on t.InvoiceCode = f.InvoiceCode
	                    inner join Invoice_Invoice k --//[mylock]
		                    on f.InvoiceCode = k.InvoiceCode
	                    inner join Mst_NNT z --//[mylock]
		                    on k.MST = z.MST
                    where(1=1)
	                    and t.SpecCode is not null
	                    and t.ProductID is null
                    ;

                    ---- 
                    select 
	                    z.OrgID
	                    , t.SpecCode
						, t.ProductID
	                    , '1' FlagExist
	                    , null ProductIDStatus
                    from Invoice_InvoiceDtl t --//[mylock]
	                    inner join #tbl_Invoice_Invoice f --//[mylock]
		                    on t.InvoiceCode = f.InvoiceCode
	                    inner join Invoice_Invoice k --//[mylock]
		                    on f.InvoiceCode = k.InvoiceCode
	                    inner join Mst_NNT z --//[mylock]
		                    on k.MST = z.MST
                    where(1=1)
	                    and t.SpecCode is not null
	                    and t.ProductID is not null
                    ;

                    drop table #tbl_Invoice_Invoice;
                "
                , "@Default_Epsilon", TConst.BizMix.Default_Epsilon // 0.000001
                , "zzzz_tbl_Invoice_Invoice_RefNo", zzzz_tbl_Invoice_Invoice_RefNo
                );
            ////
            DataSet dsData = _cf.db.ExecQuery(strSqlcheckData);
            {
                dsData.Tables[0].TableName = "Mst_Spec";
                dsData.Tables[1].TableName = "Prd_ProductID";
            }
            ////
            DataTable dt_Mst_Spec_Check = dsData.Tables["Mst_Spec"].Copy();
            DataTable dt_Prd_ProductID_Check = dsData.Tables["Prd_ProductID"].Copy();
            ////
            if (dt_Mst_Spec_Check.Rows.Count > 0)
            {
                #region // Call Func:
                RT_OS_PrdCenter_Mst_Spec objRT_OS_PrdCenter_Mst_Spec = null;
                {
                    #region // Init:
                    List<OS_PrdCenter_Mst_Spec> LstOS_PrdCenter_Mst_SpecFiles = new List<OS_PrdCenter_Mst_Spec>();
                    {
                        ////
                        DataTable dt_Mst_SpecImage = dsData.Tables["Mst_Spec"].Copy();
                        LstOS_PrdCenter_Mst_SpecFiles = TUtils.DataTableCmUtils.ToListof<OS_PrdCenter_Mst_Spec>(dt_Mst_SpecImage);
                        ////

                    }
                    ////
                    #endregion

                    #region // WA_Mst_Spec_Get:
                    RQ_OS_PrdCenter_Mst_Spec objRQ_OS_PrdCenter_Mst_Spec = new RQ_OS_PrdCenter_Mst_Spec()
                    {
                        WAUserCode = strOS_ProductCentrer_WAUserCode,
                        WAUserPassword = strOS_ProductCentrer_WAUserPassword,
                        GwUserCode = strOS_ProductCentrer_GwUserCode,
                        GwPassword = strOS_ProductCentrer_GwPassword,
                        Tid = strTid,
                        Lst_Mst_Spec = LstOS_PrdCenter_Mst_SpecFiles
                    };
                    ////
                    try
                    {
                        objRT_OS_PrdCenter_Mst_Spec = OS_PrdCenter_Mst_SpecService.Instance.WA_OS_PrdCenter_Mst_Spec_CheckListDB(objRQ_OS_PrdCenter_Mst_Spec);

                    }
                    catch (Exception cex)
                    {
                        TUtils.CProcessExc.BizShowException(
                            ref alParamsCoupleError // alParamsCoupleError
                            , cex // cex
                            );

                        throw CmUtils.CMyException.Raise(
                            TError.ErridnInventory.CmSys_InvalidOutSite
                            , null
                            , alParamsCoupleError.ToArray()
                            );
                    }
                    ////
                    #endregion
                }
                #endregion
            }
            //// Bỏ check do Mẫu của HTC sẽ không nhập ProductID tại master (anh @Đức, Hương NV chốt  2019-07-10)
            if (dt_Prd_ProductID_Check.Rows.Count > 0)
            {
                #region // Call Func:
                //RT_OS_PrdCenter_Prd_ProductID objRT_OS_PrdCenter_Prd_ProductID = null;
                //{
                //    #region // Init:
                //    List<OS_PrdCenter_Prd_ProductID> LstOS_PrdCenter_Prd_ProductID = new List<OS_PrdCenter_Prd_ProductID>();
                //    {
                //        ////
                //        DataTable dt_Prd_ProductID = dsData.Tables["Prd_ProductID"].Copy();
                //        LstOS_PrdCenter_Prd_ProductID = TUtils.DataTableCmUtils.ToListof<OS_PrdCenter_Prd_ProductID>(dt_Prd_ProductID);
                //        ////

                //    }
                //    ////
                //    #endregion

                //    #region // WA_Prd_ProductID_Get:
                //    RQ_OS_PrdCenter_Prd_ProductID objRQ_OS_PrdCenter_Prd_ProductID = new RQ_OS_PrdCenter_Prd_ProductID()
                //    {
                //        WAUserCode = strOS_ProductCentrer_WAUserCode,
                //        WAUserPassword = strOS_ProductCentrer_WAUserPassword,
                //        GwUserCode = strOS_ProductCentrer_GwUserCode,
                //        GwPassword = strOS_ProductCentrer_GwPassword,
                //        Tid = strTid,
                //        Lst_Prd_ProductID = LstOS_PrdCenter_Prd_ProductID
                //    };
                //    ////
                //    try
                //    {
                //        objRT_OS_PrdCenter_Prd_ProductID = OS_PrdCenter_Prd_ProductIDService.Instance.WA_OS_PrdCenter_Prd_ProductID_CheckListDB(objRQ_OS_PrdCenter_Prd_ProductID);

                //    }
                //    catch (Exception cex)
                //    {
                //        TUtils.CProcessExc.BizShowException(
                //            ref alParamsCoupleError // alParamsCoupleError
                //            , cex // cex
                //            );

                //        throw CmUtils.CMyException.Raise(
                //            TError.ErridnInventory.CmSys_InvalidOutSite
                //            , null
                //            , alParamsCoupleError.ToArray()
                //            );
                //    }
                //    ////
                //    #endregion
                //}
                #endregion
            }
        }
        private void Invoice_Invoice_CheckDB(
            ref ArrayList alParamsCoupleError
            , object objInvoiceCode
            , string strFlagExistToCheck
            , string strInvoiceStatusListToCheck
            , out DataTable dtDB_Invoice_Invoice
            )
        {
            // GetInfo:
            string strSqlExec = CmUtils.StringUtils.Replace(@"
					select top 1
						t.*
					from Invoice_Invoice t --//[mylock]
					where (1=1)
						and t.InvoiceCode = @objInvoiceCode
					;
				");
            dtDB_Invoice_Invoice = _cf.db.ExecQuery(
                strSqlExec
                , "@objInvoiceCode", objInvoiceCode
                ).Tables[0];
            dtDB_Invoice_Invoice.TableName = "Invoice_Invoice";

            // strFlagExistToCheck:
            if (strFlagExistToCheck.Length > 0)
            {
                if (CmUtils.StringUtils.StringEqual(strFlagExistToCheck, TConst.Flag.Active) && dtDB_Invoice_Invoice.Rows.Count < 1)
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.InvoiceCode", objInvoiceCode
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Invoice_Invoice_CheckDB_InvoiceNotFound
                        , null
                        , alParamsCoupleError.ToArray()
                        );
                }
                if (CmUtils.StringUtils.StringEqual(strFlagExistToCheck, TConst.Flag.Inactive) && dtDB_Invoice_Invoice.Rows.Count > 0)
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.InvoiceCode", objInvoiceCode
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Invoice_Invoice_CheckDB_InvoiceExist
                        , null
                        , alParamsCoupleError.ToArray()
                        );
                }
            }

            // strInvoiceStatusListToCheck:
            if (strInvoiceStatusListToCheck.Length > 0 && !strInvoiceStatusListToCheck.Contains(Convert.ToString(dtDB_Invoice_Invoice.Rows[0]["InvoiceStatus"])))
            {
                alParamsCoupleError.AddRange(new object[]{
                    "Check.InvoiceCode", objInvoiceCode
                    , "Check.strInvoiceStatusListToCheck", strInvoiceStatusListToCheck
                    , "DB.InvoiceStatus", dtDB_Invoice_Invoice.Rows[0]["InvoiceStatus"]
                    });
                throw CmUtils.CMyException.Raise(
                    TError.ErridnInventory.Invoice_Invoice_CheckDB_CheckDB_InvoiceStatusNotMatched
                    , null
                    , alParamsCoupleError.ToArray()
                    );
            }
        }

        public DataSet WAS_Invoice_Invoice_Cancel(
           ref ArrayList alParamsCoupleError
           , RQ_Invoice_Invoice objRQ_Invoice_Invoice
           ////
           , out RT_Invoice_Invoice objRT_Invoice_Invoice
           )
        {
            #region // Temp:
            string strTid = objRQ_Invoice_Invoice.Tid;
            objRT_Invoice_Invoice = new RT_Invoice_Invoice();
            DataSet mdsResult = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            DateTime dtimeSys = DateTime.UtcNow;
            //DataSet mdsExec = null;
            //DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(objRQ_Invoice_Invoice.Tid);
            //int nTidSeq = 0;
            //bool bNeedTransaction = true;
            string strFunctionName = "WAS_Invoice_Invoice_Cancel";
            string strErrorCodeDefault = TError.ErridnInventory.WAS_Invoice_Invoice_Cancel;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
                });
            #endregion

            try
            {
                #region // Init:
                #endregion

                #region // Refine and Check Input:
                //List<Invoice_Invoice> lst_Invoice_Invoice = new List<Invoice_Invoice>();
                //DataSet dsData = new DataSet();
                //{
                //    ////
                //    DataTable dt_Transaction_KeKhaiThue = TUtils.DataTableCmUtils.ToDataTable<Transaction_KeKhaiThue>(objRQ_Mst_NNT.Lst_Transaction_KeKhaiThue, "Transaction_KeKhaiThue");
                //    dsData.Tables.Add(dt_Transaction_KeKhaiThue);
                //}
                #endregion

                #region // Invoice_Invoice_Cancel:
                mdsResult = Invoice_Invoice_Cancel(
                    objRQ_Invoice_Invoice.Tid // strTid
                    , objRQ_Invoice_Invoice.GwUserCode // strGwUserCode
                    , objRQ_Invoice_Invoice.GwPassword // strGwPassword
                    , objRQ_Invoice_Invoice.WAUserCode // strUserCode
                    , objRQ_Invoice_Invoice.WAUserPassword // strUserPassword
                    , ref alParamsCoupleError // alParamsCoupleError
                                              ////
                    , objRQ_Invoice_Invoice.Invoice_Invoice.InvoiceCode // objInvoiceCode
                    , objRQ_Invoice_Invoice.Invoice_Invoice.Remark // objRemark
                    );
                #endregion

                // Return Good:
                return mdsResult;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsResult
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Write ReturnLog:
                //_cf.ProcessBizReturn(
                //	ref mdsResult // mdsFinal
                //	, strTid // strTid
                //	, strFunctionName // strFunctionName
                //	);
                #endregion
            }
        }

        public DataSet Invoice_Invoice_Cancel(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            ////
            , object objInvoiceCode
            , object objRemark
            )
        {
            #region // Temp:
            DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            //int nTidSeq = 0;
            DateTime dtimeSys = DateTime.UtcNow;
            string strFunctionName = "Invoice_Invoice_Cancel";
            string strErrorCodeDefault = TError.ErridnInventory.Invoice_Invoice_Cancel;
            alParamsCoupleError.AddRange(new object[]{
                    "strFunctionName", strFunctionName
                    , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
			        ////
					, "objInvoiceCode", objInvoiceCode
                    , "objRemark", objRemark
                    });
            #endregion

            try
            {
                #region // Init:
                //_cf.db.LogUserId = _cf.sinf.strUserCode;
                _cf.db.BeginTransaction();

                // Write RequestLog:
                _cf.ProcessBizReq_OutSide(
                    strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    , alParamsCoupleError // alParamsCoupleError
                    );

                // Sys_User_CheckAuthentication:
                //Sys_User_CheckAuthentication(
                //    ref alParamsCoupleError
                //    , strWAUserCode
                //    , strWAUserPassword
                //    );

                // Check Access/Deny:
                Sys_Access_CheckDenyV30(
                    ref alParamsCoupleError
                    , strWAUserCode
                    , strFunctionName
                    );
                #endregion

                #region // Invoice_Invoice_CancelX:
                //DataSet dsGetData = null;
                {
                    Invoice_Invoice_CancelX_New20190705(
                        strTid // strTid
                        , strGwUserCode // strGwUserCode
                        , strGwPassword // strGwPassword
                        , strWAUserCode // strWAUserCode
                        , strWAUserPassword // strWAUserPassword
                        , ref alParamsCoupleError // alParamsCoupleError
                        , dtimeSys // dtimeSys
                                   ////
                        , objInvoiceCode // objInvoiceCode
                        , objRemark // objRemark
                        );
                }
                ////
                //CmUtils.DataUtils.MoveDataTable(ref mdsFinal, ref dsGetData);
                #endregion

                // Return Good:
                TDALUtils.DBUtils.CommitSafety(_cf.db);
                mdsFinal.AcceptChanges();
                return mdsFinal;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Rollback:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);

                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsFinal
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Rollback and Release resources:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);
                TDALUtils.DBUtils.ReleaseAllSemaphore(_cf.db_Sys, true);

                // Write ReturnLog:
                _cf.ProcessBizReturn_OutSide(
                    ref mdsFinal // mdsFinal
                    , strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    );
                #endregion
            }
        }

        private void Invoice_Invoice_CancelX(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            , DateTime dtimeSys
            //// 
            , object objInvoiceCode
            , object objRemark
           )
        {
            #region // Temp:
            //int nTidSeq = 0;
            //bool bMyDebugSql = false;
            string strFunctionName = "Invoice_Invoice_CancelX";
            //string strErrorCodeDefault = TError.ErrHTCNM.Invoice_Invoice_CancelX;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
				, "objInvoiceCode", objInvoiceCode
                , "objRemark", objRemark
                });
            //ArrayList alPCErrEx = new ArrayList();
            ////
            Hashtable htParamsSql = new Hashtable();
            #endregion

            #region // Convert Input:
            //alParamsCoupleError.AddRange(new object[]{
            //    "Check.dsData", TJson.JsonConvert.SerializeObject(dsData)
            //    });

            // drAbilityOfUser:
            DataRow drAbilityOfUser = Sys_User_GetAbilityViewOfUser(strWAUserCode);
            zzzzClauseSelect_Mst_NNT_ViewAbility_Get(
                drAbilityOfUser // drAbilityOfUser
                , ref alParamsCoupleError // alParamsCoupleError
                );
            #endregion

            #region // Refine and Check Input Invoice_Invoice:
            ////
            string strInvoiceCode = TUtils.CUtils.StdParam(objInvoiceCode);
            string strRemark = string.Format("{0}", objRemark).Trim();
            ////
            DataTable dtDB_Invoice_Invoice = null;
            {
                Invoice_Invoice_CheckDB(
                    ref alParamsCoupleError // alParamsCoupleError
                    , strInvoiceCode // objInvoiceCode
                    , TConst.Flag.Yes // strFlagExistToCheck
                    , "PENDING, APPROVED" // strInvoiceStatusListToCheck
                    , out dtDB_Invoice_Invoice // dtDB_Invoice_Invoice
                    );

                string strInvoiceStatus = dtDB_Invoice_Invoice.Rows[0]["InvoiceStatus"].ToString();
                string strInvoiceNo = dtDB_Invoice_Invoice.Rows[0]["InvoiceNo"].ToString();
                ////
                if (CmUtils.StringUtils.StringEqualIgnoreCase(strInvoiceStatus, TConst.InvoiceStatus.Pending))
                {
                    if (string.IsNullOrEmpty(strInvoiceNo))
                    {
                        alParamsCoupleError.AddRange(new object[]{
                            "Check.InvoiceCode", strInvoiceCode
                            , "Check.InvoiceNo", strInvoiceNo
                            , "Check.InvoiceStatus", strInvoiceNo
                            });
                        throw CmUtils.CMyException.Raise(
                            TError.ErridnInventory.Invoice_Invoice_Cancel_InvoiceNoIsNotNull
                            , null
                            , alParamsCoupleError.ToArray()
                            );
                    }
                }
                ////
                //           string strSqlCheck_Invoice_InvoiceDtl = CmUtils.StringUtils.Replace(@"
                //	select top 1
                //		t.*
                //	from Invoice_InvoiceDtl t --//[mylock]
                //	where (1=1)
                //		and t.InvoiceCode = '@strInvoiceCode'
                //	;
                //"
                //               , "@strInvoiceCode", strInvoiceCode
                //               );

                //           DataTable dtDB_Check_Invoice_InvoiceDtl = _cf.db.ExecQuery(strSqlCheck_Invoice_InvoiceDtl).Tables[0];
                //           ////
                //           if (dtDB_Check_Invoice_InvoiceDtl.Rows.Count < 1)
                //           {
                //               alParamsCoupleError.AddRange(new object[]{
                //                   "Check.strInvoiceCode", strInvoiceCode
                //                   });
                //               throw CmUtils.CMyException.Raise(
                //                   TError.ErridnInventory.Invoice_Invoice_Cancel_InvoiceDtlNotFound
                //                   , null
                //                   , alParamsCoupleError.ToArray()
                //                   );
                //           }
                //           ////
                string strMST = TUtils.CUtils.StdParam(dtDB_Invoice_Invoice.Rows[0]["MST"]);
                if (!CmUtils.StringUtils.StringEqualIgnoreCase(drAbilityOfUser["MST"], strMST))
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.DB.NNT.MST", drAbilityOfUser["MST"]
                        , "Check.strMST", strMST
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Invoice_Invoice_Cancel_InvalidMST
                        , null
                        , alParamsCoupleError.ToArray()
                        );

                }
            }
            #endregion

            #region // SaveTemp Invoice_Invoice:
            {
                ////
                TUtils.CUtils.MyBuildDBDT_Common(
                    _cf.db
                    , "#input_Invoice_Invoice"
                    , TConst.BizMix.Default_DBColType // strDefaultType
                    , new object[]{
                        "InvoiceCode"
                        , "Remark"
                        , "InvoiceStatus"
                        , "CancelDTimeUTC"
                        , "CancelBy"
                        , "LogLUDTimeUTC"
                        , "LogLUBy"
                        }
                    , new object[]{
                            new object[]{
                                strInvoiceCode, // InvoiceCode
								strRemark, // Remark
								TConst.InvoiceStatus.Canceled, // InvoiceStatus
                                dtimeSys.ToString("yyyy-MM-dd HH:mm:ss"), // CancelDTimeUTC
                                strWAUserCode, // CancelBy
                                dtimeSys.ToString("yyyy-MM-dd HH:mm:ss"), // LogLUDTimeUTC
                                strWAUserCode, // LogLUBy
								}
                        }
                    );

            }
            #endregion

            #region // SaveDB:
            {
                ////
                string zzB_Update_Invoice_Invoice_ClauseSet_zzE = @"
						t.LogLUDTimeUTC = f.LogLUDTimeUTC
						, t.LogLUBy = f.LogLUBy
						, t.CancelDTimeUTC = f.CancelDTimeUTC
						, t.CancelBy = f.CancelBy
						, t.InvoiceStatus = f.InvoiceStatus
						, t.Remark = f.Remark
						";
                ////
                string zzB_Update_Invoice_InvoiceDtl_ClauseSet_zzE = @"
						t.LogLUDTimeUTC = f.LogLUDTimeUTC
						, t.LogLUBy = f.LogLUBy
						, t.InvoiceDtlStatus = f.InvoiceStatus
						";
                ////
                string zzB_Update_Invoice_InvoicePrd_ClauseSet_zzE = @"
						t.LogLUDTimeUTC = f.LogLUDTimeUTC
						, t.LogLUBy = f.LogLUBy
						, t.InvoicePrdStatus = f.InvoiceStatus
						";
                ////
                string zzB_Update_Invoice_Invoice_zzE = CmUtils.StringUtils.Replace(@"
						---- Invoice_Invoice:
						update t
						set 
							zzB_Update_Invoice_Invoice_ClauseSet_zzE
						from Invoice_Invoice t --//[mylock]
							inner join #input_Invoice_Invoice f --//[mylock]
								on t.InvoiceCode = f.InvoiceCode
						where (1=1)
						;
					"
                    , "zzB_Update_Invoice_Invoice_ClauseSet_zzE", zzB_Update_Invoice_Invoice_ClauseSet_zzE
                    );
                ////
                string zzB_Update_Invoice_InvoiceDtl_zzE = CmUtils.StringUtils.Replace(@"
                            ---- #tbl_Invoice_InvoiceDtl_Temp: 
                            select 
                                t.InvoiceCode
                                , t.SpecCode
                                , f.InvoiceStatus
                                , f.LogLUDTimeUTC
                                , f.LogLUBy
                            into #tbl_Invoice_InvoiceDtl_Temp
							from Invoice_InvoiceDtl t --//[mylock]
							    inner join #input_Invoice_Invoice f --//[mylock]
								    on t.InvoiceCode = f.InvoiceCode
							where (1=1)
							;

                            ---- Update:
							update t
							set 
								zzB_Update_Invoice_InvoiceDtl_ClauseSet_zzE
							from Invoice_InvoiceDtl t --//[mylock]
							    inner join #tbl_Invoice_InvoiceDtl_Temp f --//[mylock]
								    on t.InvoiceCode = f.InvoiceCode
								        and t.SpecCode = f.SpecCode
							where (1=1)
							;
						"
                        , "zzB_Update_Invoice_InvoiceDtl_ClauseSet_zzE", zzB_Update_Invoice_InvoiceDtl_ClauseSet_zzE
                        );
                ////
                string zzB_Update_Invoice_InvoicePrd_zzE = CmUtils.StringUtils.Replace(@"
                        ---- #tbl_Invoice_InvoicePrd_Temp: 
                        select 
                            t.InvoiceCode
                            , t.ProductID
                            , t.SpecCode
                            , f.InvoiceStatus
                            , f.LogLUDTimeUTC
                            , f.LogLUBy
                        into #tbl_Invoice_InvoicePrd_Temp
						from Invoice_InvoicePrd t --//[mylock]
							inner join #input_Invoice_Invoice f --//[mylock]
								on t.InvoiceCode = f.InvoiceCode
						where (1=1)
						;

                        ---- Update:
						update t
						set 
							zzB_Update_Invoice_InvoicePrd_ClauseSet_zzE
						from Invoice_InvoicePrd t --//[mylock]
							inner join #tbl_Invoice_InvoicePrd_Temp f --//[mylock]
								on t.InvoiceCode = f.InvoiceCode
								    and t.ProductID = f.ProductID
								    and t.SpecCode = f.SpecCode
						where (1=1)
						;
					"
                    , "zzB_Update_Invoice_InvoicePrd_ClauseSet_zzE", zzB_Update_Invoice_InvoicePrd_ClauseSet_zzE
                    );
                ////
                string strSql_SaveOnDB = CmUtils.StringUtils.Replace(@"
						----
						zzB_Update_Invoice_Invoice_zzE
                        ----
						zzB_Update_Invoice_InvoiceDtl_zzE
                        ----
						zzB_Update_Invoice_InvoicePrd_zzE
                        ----
					"
                    , "zzB_Update_Invoice_Invoice_zzE", zzB_Update_Invoice_Invoice_zzE
                    , "zzB_Update_Invoice_InvoiceDtl_zzE", zzB_Update_Invoice_InvoiceDtl_zzE
                    , "zzB_Update_Invoice_InvoicePrd_zzE", zzB_Update_Invoice_InvoicePrd_zzE
                    );

                DataSet dsDB_Check = _cf.db.ExecQuery(
                    strSql_SaveOnDB
                    );
            }
            #endregion

            #region //// Clear For Debug:
            {
                ////
                string strSqlClearForDebug = CmUtils.StringUtils.Replace(@"
						---- Clear for Debug:
						drop table #input_Invoice_Invoice; 
						drop table #tbl_Invoice_InvoiceDtl_Temp;
						drop table #tbl_Invoice_InvoicePrd_Temp;
					");

                _cf.db.ExecQuery(
                    strSqlClearForDebug
                    );
                ////
            }
            #endregion

        }

        public DataSet WAS_Invoice_Invoice_Approved(
           ref ArrayList alParamsCoupleError
           , RQ_Invoice_Invoice objRQ_Invoice_Invoice
           ////
           , out RT_Invoice_Invoice objRT_Invoice_Invoice
           )
        {
            #region // Temp:
            string strTid = objRQ_Invoice_Invoice.Tid;
            objRT_Invoice_Invoice = new RT_Invoice_Invoice();
            DataSet mdsResult = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            DateTime dtimeSys = DateTime.UtcNow;
            //DataSet mdsExec = null;
            //DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(objRQ_Invoice_Invoice.Tid);
            //int nTidSeq = 0;
            //bool bNeedTransaction = true;
            string strFunctionName = "WAS_Invoice_Invoice_Approved";
            string strErrorCodeDefault = TError.ErridnInventory.WAS_Invoice_Invoice_Approved;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
                });
            #endregion

            try
            {
                #region // Init:
                #endregion

                #region // Refine and Check Input:
                //List<Invoice_Invoice> lst_Invoice_Invoice = new List<Invoice_Invoice>();
                //DataSet dsData = new DataSet();
                //{
                //    ////
                //    DataTable dt_Transaction_KeKhaiThue = TUtils.DataTableCmUtils.ToDataTable<Transaction_KeKhaiThue>(objRQ_Mst_NNT.Lst_Transaction_KeKhaiThue, "Transaction_KeKhaiThue");
                //    dsData.Tables.Add(dt_Transaction_KeKhaiThue);
                //}
                #endregion

                #region // Invoice_Invoice_Approved:
                mdsResult = Invoice_Invoice_Approved(
                    objRQ_Invoice_Invoice.Tid // strTid
                    , objRQ_Invoice_Invoice.GwUserCode // strGwUserCode
                    , objRQ_Invoice_Invoice.GwPassword // strGwPassword
                    , objRQ_Invoice_Invoice.WAUserCode // strUserCode
                    , objRQ_Invoice_Invoice.WAUserPassword // strUserPassword
                    , ref alParamsCoupleError // alParamsCoupleError
                                              ////
                    , objRQ_Invoice_Invoice.Invoice_Invoice.InvoiceCode // objInvoiceCode
                                                                        //, objRQ_Invoice_Invoice.Invoice_Invoice.InvoiceFileSpec // objInvoiceFileSpec
                    , objRQ_Invoice_Invoice.Invoice_Invoice.InvoiceFilePath // objInvoiceFilePath
                    , objRQ_Invoice_Invoice.Invoice_Invoice.InvoicePDFFilePath // objInvoicePDFFilePath
                    , objRQ_Invoice_Invoice.Invoice_Invoice.Remark // objRemark
                    );
                #endregion

                // Return Good:
                return mdsResult;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsResult
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Write ReturnLog:
                //_cf.ProcessBizReturn(
                //	ref mdsResult // mdsFinal
                //	, strTid // strTid
                //	, strFunctionName // strFunctionName
                //	);
                #endregion
            }
        }

        public DataSet Invoice_Invoice_Approved(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            ////
            , object objInvoiceCode
            //, object objInvoiceFileSpec
            , object objInvoiceFilePath
            , object objInvoicePDFFilePath
            , object objRemark
            )
        {
            #region // Temp:
            DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            //int nTidSeq = 0;
            DateTime dtimeSys = DateTime.UtcNow;
            string strFunctionName = "Invoice_Invoice_Approved";
            string strErrorCodeDefault = TError.ErridnInventory.Invoice_Invoice_Approved;
            alParamsCoupleError.AddRange(new object[]{
                    "strFunctionName", strFunctionName
                    , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
			        ////
					, "objInvoiceCode", objInvoiceCode
                    , "objInvoiceFilePath", objInvoiceFilePath
                    , "objInvoicePDFFilePath", objInvoicePDFFilePath
                    , "objRemark", objRemark
                    });
            #endregion

            try
            {
                #region // Init:
                //_cf.db.LogUserId = _cf.sinf.strUserCode;
                _cf.db.BeginTransaction();

                // Write RequestLog:
                _cf.ProcessBizReq_OutSide(
                    strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    , alParamsCoupleError // alParamsCoupleError
                    );

                // Sys_User_CheckAuthentication:
                //Sys_User_CheckAuthentication(
                //    ref alParamsCoupleError
                //    , strWAUserCode
                //    , strWAUserPassword
                //    );

                // Check Access/Deny:
                Sys_Access_CheckDenyV30(
                    ref alParamsCoupleError
                    , strWAUserCode
                    , strFunctionName
                    );
                #endregion

                #region // Invoice_Invoice_ApprovedX:
                //DataSet dsGetData = null;
                {
                    Invoice_Invoice_ApprovedX_New20190705(
                        strTid // strTid
                        , strGwUserCode // strGwUserCode
                        , strGwPassword // strGwPassword
                        , strWAUserCode // strWAUserCode
                        , strWAUserPassword // strWAUserPassword
                        , ref alParamsCoupleError // alParamsCoupleError
                        , dtimeSys // dtimeSys
                                   ////
                        , objInvoiceCode // objInvoiceCode
                                         //, objInvoiceFileSpec // objInvoiceFileSpec
                        , objInvoiceFilePath // objInvoiceFilePath
                        , objInvoicePDFFilePath // objInvoicePDFFilePath
                        , objRemark // objRemark
                        );
                }
                ////
                //CmUtils.DataUtils.MoveDataTable(ref mdsFinal, ref dsGetData);
                #endregion

                // Return Good:
                TDALUtils.DBUtils.CommitSafety(_cf.db);
                mdsFinal.AcceptChanges();
                return mdsFinal;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Rollback:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);

                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsFinal
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Rollback and Release resources:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);
                TDALUtils.DBUtils.ReleaseAllSemaphore(_cf.db_Sys, true);

                // Write ReturnLog:
                _cf.ProcessBizReturn_OutSide(
                    ref mdsFinal // mdsFinal
                    , strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    );
                #endregion
            }
        }

        private void Invoice_Invoice_ApprovedX(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            , DateTime dtimeSys
            //// 
            , object objInvoiceCode
            //, object objInvoiceFileSpec
            , object objInvoiceFilePath
            , object objInvoicePDFFilePath
            , object objRemark
           )
        {
            #region // Temp:
            //int nTidSeq = 0;
            //bool bMyDebugSql = false;
            string strFunctionName = "Invoice_Invoice_ApprovedX";
            //string strErrorCodeDefault = TError.ErrHTCNM.Invoice_Invoice_ApprovedX;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
				, "objInvoiceCode", objInvoiceCode
                , "objRemark", objRemark
                });
            //ArrayList alPCErrEx = new ArrayList();
            ////
            Hashtable htParamsSql = new Hashtable();
            #endregion

            #region // Convert Input: 
            // drAbilityOfUser:
            DataRow drAbilityOfUser = Sys_User_GetAbilityViewOfUser(strWAUserCode);
            zzzzClauseSelect_Mst_NNT_ViewAbility_Get(
                drAbilityOfUser // drAbilityOfUser
                , ref alParamsCoupleError // alParamsCoupleError
                );
            #endregion

            #region // Refine and Check Input Invoice_Invoice:
            ////
            string strInvoiceCode = TUtils.CUtils.StdParam(objInvoiceCode);
            string strInvoiceFilePath = string.Format("{0}", objInvoiceFilePath).Trim();
            string strInvoicePDFFilePath = string.Format("{0}", objInvoicePDFFilePath).Trim();
            string strRemark = string.Format("{0}", objRemark).Trim();
            ////
            DataTable dtDB_Invoice_Invoice = null;
            {
                Invoice_Invoice_CheckDB(
                    ref alParamsCoupleError // alParamsCoupleError
                    , strInvoiceCode // objInvoiceCode
                    , TConst.Flag.Yes // strFlagExistToCheck
                    , TConst.InvoiceStatus.Pending // strInvoiceStatusListToCheck
                    , out dtDB_Invoice_Invoice // dtDB_Invoice_Invoice
                    );

                //string strInvoiceStatus = dtDB_Invoice_Invoice.Rows[0]["InvoiceStatus"].ToString();
                string strInvoiceNo = dtDB_Invoice_Invoice.Rows[0]["InvoiceNo"].ToString();
                ////
                if (string.IsNullOrEmpty(strInvoiceNo))
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.InvoiceCode", strInvoiceCode
                        , "Check.InvoiceNo", strInvoiceNo
                        //, "Check.InvoiceStatus", strInvoiceStatus
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Invoice_Invoice_Approved_InvoiceNoIsNotNull
                        , null
                        , alParamsCoupleError.ToArray()
                        );
                }
                /////
                string strMST = TUtils.CUtils.StdParam(dtDB_Invoice_Invoice.Rows[0]["MST"]);
                if (!CmUtils.StringUtils.StringEqualIgnoreCase(drAbilityOfUser["MST"], strMST))
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.DB.NNT.MST", drAbilityOfUser["MST"]
                        , "Check.strMST", strMST
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Invoice_Invoice_Approved_InvalidMST
                        , null
                        , alParamsCoupleError.ToArray()
                        );

                }
            }
            #endregion

            #region // SaveTemp Invoice_Invoice:
            {
                ////
                TUtils.CUtils.MyBuildDBDT_Common(
                    _cf.db
                    , "#input_Invoice_Invoice"
                    , TConst.BizMix.Default_DBColType // strDefaultType
                    , new object[]{
                        "InvoiceCode"
                        , "InvoiceFileSpec"
                        , "InvoiceFilePath"
                        , "InvoicePDFFilePath"
                        , "Remark"
                        , "InvoiceStatus"
                        , "ApprDTimeUTC"
                        , "ApprBy"
                        , "LogLUDTimeUTC"
                        , "LogLUBy"
                        }
                    , new object[]{
                            new object[]{
                                strInvoiceCode, // InvoiceCode
                                null, //objInvoiceFileSpec, // InvoiceFileSpec
                                strInvoiceFilePath, // InvoiceFilePath
                                strInvoicePDFFilePath, // InvoicePDFFilePath
								strRemark, // Remark
								TConst.InvoiceStatus.Approved, // InvoiceStatus
                                dtimeSys.ToString("yyyy-MM-dd HH:mm:ss"), // ApprDTimeUTC
                                strWAUserCode, // ApprBy
                                dtimeSys.ToString("yyyy-MM-dd HH:mm:ss"), // LogLUDTimeUTC
                                strWAUserCode, // LogLUBy
								}
                        }
                    );

            }
            #endregion

            #region // SaveDB:
            {
                ////
                string zzB_Update_Invoice_Invoice_ClauseSet_zzE = @"
						t.LogLUDTimeUTC = f.LogLUDTimeUTC
						, t.LogLUBy = f.LogLUBy
						, t.ApprDTimeUTC = f.ApprDTimeUTC
						, t.ApprBy = f.ApprBy
						, t.InvoiceStatus = f.InvoiceStatus
						, t.InvoiceFileSpec = f.InvoiceFileSpec
						, t.InvoiceFilePath = f.InvoiceFilePath
						, t.InvoicePDFFilePath = f.InvoicePDFFilePath
						, t.Remark = f.Remark
						";
                ////
                string zzB_Update_Invoice_InvoiceDtl_ClauseSet_zzE = @"
						t.LogLUDTimeUTC = f.LogLUDTimeUTC
						, t.LogLUBy = f.LogLUBy
						, t.InvoiceDtlStatus = f.InvoiceStatus
						";
                ////
                string zzB_Update_Invoice_InvoicePrd_ClauseSet_zzE = @"
						t.LogLUDTimeUTC = f.LogLUDTimeUTC
						, t.LogLUBy = f.LogLUBy
						, t.InvoicePrdStatus = f.InvoiceStatus
						";
                ////
                string zzB_Update_Invoice_Invoice_zzE = CmUtils.StringUtils.Replace(@"
						---- Invoice_Invoice:
						update t
						set 
							zzB_Update_Invoice_Invoice_ClauseSet_zzE
						from Invoice_Invoice t --//[mylock]
							inner join #input_Invoice_Invoice f --//[mylock]
								on t.InvoiceCode = f.InvoiceCode
						where (1=1)
						;
					"
                    , "zzB_Update_Invoice_Invoice_ClauseSet_zzE", zzB_Update_Invoice_Invoice_ClauseSet_zzE
                    );
                ////
                string zzB_Update_Invoice_InvoiceDtl_zzE = CmUtils.StringUtils.Replace(@"
                    ---- #tbl_Invoice_InvoiceDtl_Temp: 
                    select 
                        t.InvoiceCode
                        , t.SpecCode
                        , f.InvoiceStatus
                        , f.LogLUDTimeUTC
                        , f.LogLUBy
                    into #tbl_Invoice_InvoiceDtl_Temp
					from Invoice_InvoiceDtl t --//[mylock]
						inner join #input_Invoice_Invoice f --//[mylock]
							on t.InvoiceCode = f.InvoiceCode
					where (1=1)
					;

                    ---- Update:
					update t
					set 
						zzB_Update_Invoice_InvoiceDtl_ClauseSet_zzE
					from Invoice_InvoiceDtl t --//[mylock]
						inner join #tbl_Invoice_InvoiceDtl_Temp f --//[mylock]
							on t.InvoiceCode = f.InvoiceCode
								and t.SpecCode = f.SpecCode
					where (1=1)
					;
				"
                , "zzB_Update_Invoice_InvoiceDtl_ClauseSet_zzE", zzB_Update_Invoice_InvoiceDtl_ClauseSet_zzE
                );
                ////
                string zzB_Update_Invoice_InvoicePrd_zzE = CmUtils.StringUtils.Replace(@"
                        ---- #tbl_Invoice_InvoicePrd_Temp: 
                        select 
                            t.InvoiceCode
                            , t.ProductID
                            , t.SpecCode
                            , f.InvoiceStatus
                            , f.LogLUDTimeUTC
                            , f.LogLUBy
                        into #tbl_Invoice_InvoicePrd_Temp
						from Invoice_InvoicePrd t --//[mylock]
							inner join #input_Invoice_Invoice f --//[mylock]
								on t.InvoiceCode = f.InvoiceCode
						where (1=1)
						;

                        ---- Update:
						update t
						set 
							zzB_Update_Invoice_InvoicePrd_ClauseSet_zzE
						from Invoice_InvoicePrd t --//[mylock]
							inner join #tbl_Invoice_InvoicePrd_Temp f --//[mylock]
								on t.InvoiceCode = f.InvoiceCode
								    and t.ProductID = f.ProductID
								    and t.SpecCode = f.SpecCode
						where (1=1)
						;
					"
                    , "zzB_Update_Invoice_InvoicePrd_ClauseSet_zzE", zzB_Update_Invoice_InvoicePrd_ClauseSet_zzE
                    );
                ////
                string strSql_SaveOnDB = CmUtils.StringUtils.Replace(@"
						----
						zzB_Update_Invoice_Invoice_zzE
                        ----
						zzB_Update_Invoice_InvoiceDtl_zzE
                        ----
						zzB_Update_Invoice_InvoicePrd_zzE
                        ----
					"
                    , "zzB_Update_Invoice_Invoice_zzE", zzB_Update_Invoice_Invoice_zzE
                    , "zzB_Update_Invoice_InvoiceDtl_zzE", zzB_Update_Invoice_InvoiceDtl_zzE
                    , "zzB_Update_Invoice_InvoicePrd_zzE", zzB_Update_Invoice_InvoicePrd_zzE
                   );

                DataSet dsDB_Check = _cf.db.ExecQuery(
                    strSql_SaveOnDB
                    );
            }
            #endregion

            #region //// Clear For Debug:
            {
                ////
                string strSqlClearForDebug = CmUtils.StringUtils.Replace(@"
						---- Clear for Debug:
						drop table #input_Invoice_Invoice; 
						drop table #tbl_Invoice_InvoiceDtl_Temp;
						drop table #tbl_Invoice_InvoicePrd_Temp;
					");

                _cf.db.ExecQuery(
                    strSqlClearForDebug
                    );
                ////
            }
            #endregion

        }

        public DataSet WAS_Invoice_Invoice_Issued(
           ref ArrayList alParamsCoupleError
           , RQ_Invoice_Invoice objRQ_Invoice_Invoice
           ////
           , out RT_Invoice_Invoice objRT_Invoice_Invoice
           )
        {
            #region // Temp:
            string strTid = objRQ_Invoice_Invoice.Tid;
            objRT_Invoice_Invoice = new RT_Invoice_Invoice();
            DataSet mdsResult = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            DateTime dtimeSys = DateTime.UtcNow;
            //DataSet mdsExec = null;
            //DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(objRQ_Invoice_Invoice.Tid);
            //int nTidSeq = 0;
            //bool bNeedTransaction = true;
            string strFunctionName = "WAS_Invoice_Invoice_Issued";
            string strErrorCodeDefault = TError.ErridnInventory.WAS_Invoice_Invoice_Issued;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
				, "Lst_Email_BatchSendEmailTo", TJson.JsonConvert.SerializeObject(objRQ_Invoice_Invoice.Lst_Email_BatchSendEmailTo)
                , "Lst_Email_BatchSendEmailCC", TJson.JsonConvert.SerializeObject(objRQ_Invoice_Invoice.Lst_Email_BatchSendEmailCC)
                , "Lst_Email_BatchSendEmailBCC", TJson.JsonConvert.SerializeObject(objRQ_Invoice_Invoice.Lst_Email_BatchSendEmailBCC)
                , "Lst_Email_BatchSendEmailFileAttach", TJson.JsonConvert.SerializeObject(objRQ_Invoice_Invoice.Lst_Email_BatchSendEmailFileAttach)
                });
            #endregion

            try
            {
                #region // Init:
                #endregion

                #region // Refine and Check Input:
                //List<Invoice_Invoice> lst_Invoice_Invoice = new List<Invoice_Invoice>();
                DataSet dsData = new DataSet();
                {
                    ////
                    if (objRQ_Invoice_Invoice.Lst_Email_BatchSendEmailTo == null)
                        objRQ_Invoice_Invoice.Lst_Email_BatchSendEmailTo = new List<Email_BatchSendEmailTo>();
                    {
                        DataTable dt_Email_BatchSendEmailTo = TUtils.DataTableCmUtils.ToDataTable<Email_BatchSendEmailTo>(objRQ_Invoice_Invoice.Lst_Email_BatchSendEmailTo, "Email_BatchSendEmailTo");
                        dsData.Tables.Add(dt_Email_BatchSendEmailTo);
                    }
                    ////
                    if (objRQ_Invoice_Invoice.Lst_Email_BatchSendEmailCC == null)
                        objRQ_Invoice_Invoice.Lst_Email_BatchSendEmailCC = new List<Email_BatchSendEmailCC>();
                    {
                        DataTable dt_Email_BatchSendEmailCC = TUtils.DataTableCmUtils.ToDataTable<Email_BatchSendEmailCC>(objRQ_Invoice_Invoice.Lst_Email_BatchSendEmailCC, "Email_BatchSendEmailCC");
                        dsData.Tables.Add(dt_Email_BatchSendEmailCC);

                    }
                    ////
                    if (objRQ_Invoice_Invoice.Lst_Email_BatchSendEmailBCC == null)
                        objRQ_Invoice_Invoice.Lst_Email_BatchSendEmailBCC = new List<Email_BatchSendEmailBCC>();
                    {
                        DataTable dt_Email_BatchSendEmailBCC = TUtils.DataTableCmUtils.ToDataTable<Email_BatchSendEmailBCC>(objRQ_Invoice_Invoice.Lst_Email_BatchSendEmailBCC, "Email_BatchSendEmailBCC");
                        dsData.Tables.Add(dt_Email_BatchSendEmailBCC);

                    }
                    ////
                    if (objRQ_Invoice_Invoice.Lst_Email_BatchSendEmailFileAttach == null)
                        objRQ_Invoice_Invoice.Lst_Email_BatchSendEmailFileAttach = new List<Email_BatchSendEmailFileAttach>();
                    {
                        DataTable dt_Email_BatchSendEmailFileAttach = TUtils.DataTableCmUtils.ToDataTable<Email_BatchSendEmailFileAttach>(objRQ_Invoice_Invoice.Lst_Email_BatchSendEmailFileAttach, "Email_BatchSendEmailFileAttach");
                        dsData.Tables.Add(dt_Email_BatchSendEmailFileAttach);

                    }
                    ////
                    if (objRQ_Invoice_Invoice.Email_BatchSendEmail == null)
                        objRQ_Invoice_Invoice.Email_BatchSendEmail = new Email_BatchSendEmail();
                }
                #endregion

                #region // Invoice_Invoice_Issued:
                mdsResult = Invoice_Invoice_Issued(
                    objRQ_Invoice_Invoice.Tid // strTid
                    , objRQ_Invoice_Invoice.GwUserCode // strGwUserCode
                    , objRQ_Invoice_Invoice.GwPassword // strGwPassword
                    , objRQ_Invoice_Invoice.WAUserCode // strUserCode
                    , objRQ_Invoice_Invoice.WAUserPassword // strUserPassword
                    , ref alParamsCoupleError // alParamsCoupleError
                                              ////
                    , objRQ_Invoice_Invoice.Invoice_Invoice.InvoiceCode // objInvoiceCode
                    , objRQ_Invoice_Invoice.Invoice_Invoice.EmailSend // objEmailSend
                    , objRQ_Invoice_Invoice.Invoice_Invoice.Remark // objRemark
                                                                   ////
                    , objRQ_Invoice_Invoice.Email_BatchSendEmail.Subject // objSubject						 
                    , objRQ_Invoice_Invoice.Email_BatchSendEmail.BodyText // objBodyText
                    , objRQ_Invoice_Invoice.Email_BatchSendEmail.BodyHTML // objBodyHTML
                    , dsData // dsData
                    );
                #endregion

                // Return Good:
                return mdsResult;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsResult
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Write ReturnLog:
                //_cf.ProcessBizReturn(
                //	ref mdsResult // mdsFinal
                //	, strTid // strTid
                //	, strFunctionName // strFunctionName
                //	);
                #endregion
            }
        }

        public DataSet Invoice_Invoice_Issued(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            ////
            , object objInvoiceCode
            , object objEmailSend
            , object objRemark
            ////
            , object objSubject
            , object objBodyText
            , object objBodyHTML
            , DataSet dsData
            )
        {
            #region // Temp:
            DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            //int nTidSeq = 0;
            DateTime dtimeSys = DateTime.UtcNow;
            string strFunctionName = "Invoice_Invoice_Issued";
            string strErrorCodeDefault = TError.ErridnInventory.Invoice_Invoice_Issued;
            alParamsCoupleError.AddRange(new object[]{
                    "strFunctionName", strFunctionName
                    , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
			        ////
					, "objInvoiceCode", objInvoiceCode
                    , "objEmailSend", objEmailSend
                    , "objRemark", objRemark
			        ////
					, "objSubject", objSubject
                    , "objBodyText", objBodyText
                    , "objBodyHTML", objBodyHTML
                    });
            #endregion

            try
            {
                #region // Init:
                //_cf.db.LogUserId = _cf.sinf.strUserCode;
                _cf.db.BeginTransaction();

                // Write RequestLog:
                _cf.ProcessBizReq_OutSide(
                    strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    , alParamsCoupleError // alParamsCoupleError
                    );

                // Sys_User_CheckAuthentication:
                //Sys_User_CheckAuthentication(
                //    ref alParamsCoupleError
                //    , strWAUserCode
                //    , strWAUserPassword
                //    );

                // Check Access/Deny:
                Sys_Access_CheckDenyV30(
                    ref alParamsCoupleError
                    , strWAUserCode
                    , strFunctionName
                    );
                #endregion

                #region // Invoice_Invoice_IssuedX:
                ////DataSet dsGetData = null;
                {
                    Invoice_Invoice_IssuedX_New20190905(
                        strTid // strTid
                        , strGwUserCode // strGwUserCode
                        , strGwPassword // strGwPassword
                        , strWAUserCode // strWAUserCode
                        , strWAUserPassword // strWAUserPassword
                        , ref alParamsCoupleError // alParamsCoupleError
                        , dtimeSys // dtimeSys
                                   ////
                        , objInvoiceCode // objInvoiceCode
                        , objEmailSend // objEmailSend
                        , objRemark // objRemark
                        );
                }
                ////
                //CmUtils.DataUtils.MoveDataTable(ref mdsFinal, ref dsGetData);
                #endregion

                #region // Email_BatchSendEmail_SaveAndSendX:
                {
                    Email_BatchSendEmail_SaveAndSendX(
                        strTid // strTid
                        , strGwUserCode // strGwUserCode
                        , strGwPassword // strGwPassword
                        , strWAUserCode // strWAUserCode
                        , strWAUserPassword // strWAUserPassword
                        , ref alParamsCoupleError // alParamsCoupleError
                        , dtimeSys // dtimeSys
                                   ////
                        , objSubject // objSubject
                        , objBodyText // objBodyText
                        , objBodyHTML // objBodyHTML
                        , dsData // dsData
                        );
                }
                #endregion

                // Return Good:
                TDALUtils.DBUtils.CommitSafety(_cf.db);
                mdsFinal.AcceptChanges();
                return mdsFinal;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Rollback:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);

                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsFinal
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Rollback and Release resources:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);
                TDALUtils.DBUtils.ReleaseAllSemaphore(_cf.db_Sys, true);

                // Write ReturnLog:
                _cf.ProcessBizReturn_OutSide(
                    ref mdsFinal // mdsFinal
                    , strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    );
                #endregion
            }
        }

        public DataSet OS3A_Invoice_Invoice_Issued_UpdFlagPushOutSite(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            ////
            , object objInvoiceCode
            ////
            )
        {
            #region // Temp:
            DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            //int nTidSeq = 0;
            DateTime dtimeSys = DateTime.UtcNow;
            string strFunctionName = "OS3A_Invoice_Invoice_Issued_UpdFlagPushOutSite";
            string strErrorCodeDefault = TError.ErridnInventory.OS3A_Invoice_Invoice_Issued_UpdFlagPushOutSite;
            alParamsCoupleError.AddRange(new object[]{
                    "strFunctionName", strFunctionName
                    , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
			        ////
					, "objInvoiceCode", objInvoiceCode
                    });
            #endregion

            try
            {
                #region // Init:
                //_cf.db.LogUserId = _cf.sinf.strUserCode;
                _cf.db.BeginTransaction();

                // Write RequestLog:
                _cf.ProcessBizReq_OutSide(
                    strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    , alParamsCoupleError // alParamsCoupleError
                    );

                // Sys_User_CheckAuthentication:
                //Sys_User_CheckAuthentication(
                //    ref alParamsCoupleError
                //    , strWAUserCode
                //    , strWAUserPassword
                //    );

                //// Check Access/Deny:
                //Sys_Access_CheckDenyV30(
                //    ref alParamsCoupleError
                //    , strWAUserCode
                //    , strFunctionName
                //    );
                #endregion

                #region // Invoice_Invoice_IssuedX:
                ////DataSet dsGetData = null;
                {
                    Invoice_Invoice_UpdFlagPushOutSiteX(
                        strTid // strTid
                        , strGwUserCode // strGwUserCode
                        , strGwPassword // strGwPassword
                        , strWAUserCode // strWAUserCode
                        , strWAUserPassword // strWAUserPassword
                        , ref alParamsCoupleError // alParamsCoupleError
                        , dtimeSys // dtimeSys
                                   ////
                        , objInvoiceCode // objInvoiceCode
                        );
                }
                #endregion

                // Return Good:
                TDALUtils.DBUtils.CommitSafety(_cf.db);
                mdsFinal.AcceptChanges();
                return mdsFinal;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Rollback:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);

                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsFinal
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Rollback and Release resources:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);
                TDALUtils.DBUtils.ReleaseAllSemaphore(_cf.db_Sys, true);

                // Write ReturnLog:
                _cf.ProcessBizReturn_OutSide(
                    ref mdsFinal // mdsFinal
                    , strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    );
                #endregion
            }
        }

        public DataSet WAS_OS3A_Invoice_Invoice_Issued_UpdFlagPushOutSite(
           ref ArrayList alParamsCoupleError
           , RQ_OS3A_TVAN_Invoice_Invoice objRQ_OS3A_TVAN_Invoice_Invoice
           ////
           , out RT_OS3A_TVAN_Invoice_Invoice objRT_OS3A_TVAN_Invoice_Invoice
           )
        {
            #region // Temp:
            string strTid = objRQ_OS3A_TVAN_Invoice_Invoice.Tid;
            objRT_OS3A_TVAN_Invoice_Invoice = new RT_OS3A_TVAN_Invoice_Invoice();
            DataSet mdsResult = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            DateTime dtimeSys = DateTime.UtcNow;
            //DataSet mdsExec = null;
            //DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(objRQ_Invoice_Invoice.Tid);
            //int nTidSeq = 0;
            //bool bNeedTransaction = true;
            string strFunctionName = "WAS_OS3A_Invoice_Invoice_Issued_UpdFlagPushOutSite";
            string strErrorCodeDefault = TError.ErridnInventory.WAS_OS3A_Invoice_Invoice_Issued_UpdFlagPushOutSite;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
                });
            #endregion

            try
            {
                #region // Init:
                #endregion

                #region // Refine and Check Input:
                //List<Invoice_Invoice> lst_Invoice_Invoice = new List<Invoice_Invoice>();
                //DataSet dsData = new DataSet();
                //{
                //    ////
                //    DataTable dt_Transaction_KeKhaiThue = TUtils.DataTableCmUtils.ToDataTable<Transaction_KeKhaiThue>(objRQ_Mst_NNT.Lst_Transaction_KeKhaiThue, "Transaction_KeKhaiThue");
                //    dsData.Tables.Add(dt_Transaction_KeKhaiThue);
                //}
                #endregion

                #region // Invoice_Invoice_Issued_UpdFlagPushOutSite:
                mdsResult = OS3A_Invoice_Invoice_Issued_UpdFlagPushOutSite(
                    objRQ_OS3A_TVAN_Invoice_Invoice.Tid // strTid
                    , objRQ_OS3A_TVAN_Invoice_Invoice.GwUserCode // strGwUserCode
                    , objRQ_OS3A_TVAN_Invoice_Invoice.GwPassword // strGwPassword
                    , objRQ_OS3A_TVAN_Invoice_Invoice.WAUserCode // strUserCode
                    , objRQ_OS3A_TVAN_Invoice_Invoice.WAUserPassword // strUserPassword
                    , ref alParamsCoupleError // alParamsCoupleError
                                              ////
                    , objRQ_OS3A_TVAN_Invoice_Invoice.InvoiceCode // objInvoiceCode
                    );
                #endregion

                // Return Good:
                return mdsResult;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsResult
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Write ReturnLog:
                //_cf.ProcessBizReturn(
                //	ref mdsResult // mdsFinal
                //	, strTid // strTid
                //	, strFunctionName // strFunctionName
                //	);
                #endregion
            }
        }

        private void Invoice_Invoice_IssuedX(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            , DateTime dtimeSys
            //// 
            , object objInvoiceCode
            , object objEmailSend
            , object objRemark
           )
        {
            #region // Temp:
            //int nTidSeq = 0;
            //bool bMyDebugSql = false;
            string strFunctionName = "Invoice_Invoice_IssuedX";
            //string strErrorCodeDefault = TError.ErrHTCNM.Invoice_Invoice_IssuedX;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
                });
            //ArrayList alPCErrEx = new ArrayList();
            ////
            Hashtable htParamsSql = new Hashtable();
            #endregion

            #region // Convert Input:
            // drAbilityOfUser:
            DataRow drAbilityOfUser = Sys_User_GetAbilityViewOfUser(strWAUserCode);
            zzzzClauseSelect_Mst_NNT_ViewAbility_Get(
                drAbilityOfUser // drAbilityOfUser
                , ref alParamsCoupleError // alParamsCoupleError
                );

            #endregion

            #region // Refine and Check Input Invoice_Invoice:
            ////
            string strInvoiceCode = TUtils.CUtils.StdParam(objInvoiceCode);
            string strEmailSend = string.Format("{0}", objEmailSend).Trim();
            string strRemark = string.Format("{0}", objRemark).Trim();
            ////
            DataTable dtDB_Invoice_Invoice = null;
            {
                Invoice_Invoice_CheckDB(
                    ref alParamsCoupleError // alParamsCoupleError
                    , strInvoiceCode // objInvoiceCode
                    , TConst.Flag.Yes // strFlagExistToCheck
                    , TConst.InvoiceStatus.Approved // strInvoiceStatusListToCheck
                    , out dtDB_Invoice_Invoice // dtDB_Invoice_Invoice
                    );
                ////
                string strMST = TUtils.CUtils.StdParam(dtDB_Invoice_Invoice.Rows[0]["MST"]);
                if (!CmUtils.StringUtils.StringEqualIgnoreCase(drAbilityOfUser["MST"], strMST))
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.DB.NNT.MST", drAbilityOfUser["MST"]
                        , "Check.strMST", strMST
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Invoice_Invoice_Issued_InvalidMST
                        , null
                        , alParamsCoupleError.ToArray()
                        );

                }
                ////
                //           string strSqlCheck_Invoice_InvoiceDtl = CmUtils.StringUtils.Replace(@"
                //	select top 1
                //		t.*
                //	from Invoice_InvoiceDtl t --//[mylock]
                //	where (1=1)
                //		and t.InvoiceCode = '@strInvoiceCode'
                //	;
                //"
                //               , "@strInvoiceCode", strInvoiceCode
                //               );

                //           DataTable dtDB_Check_Invoice_InvoiceDtl = _cf.db.ExecQuery(strSqlCheck_Invoice_InvoiceDtl).Tables[0];
                //           ////
                //           if (dtDB_Check_Invoice_InvoiceDtl.Rows.Count < 1)
                //           {
                //               alParamsCoupleError.AddRange(new object[]{
                //                   "Check.strInvoiceCode", strInvoiceCode
                //                   });
                //               throw CmUtils.CMyException.Raise(
                //                   TError.ErridnInventory.Invoice_Invoice_Issued_InvoiceDtlNotFound
                //                   , null
                //                   , alParamsCoupleError.ToArray()
                //                   );
                //           }
            }
            #endregion

            #region // SaveTemp Invoice_Invoice:
            {
                ////
                TUtils.CUtils.MyBuildDBDT_Common(
                    _cf.db
                    , "#input_Invoice_Invoice"
                    , TConst.BizMix.Default_DBColType // strDefaultType
                    , new object[]{
                        "InvoiceCode"
                        , "EmailSend"
                        , "Remark"
                        , "InvoiceStatus"
                        , "SendEmailDTimeUTC"
                        , "SendEmailBy"
                        , "IssuedDTimeUTC"
                        , "IssuedBy"
                        , "LogLUDTimeUTC"
                        , "LogLUBy"
                        }
                    , new object[]{
                            new object[]{
                                strInvoiceCode, // InvoiceCode
								strEmailSend, // EmailSend
								strRemark, // Remark
								TConst.InvoiceStatus.Issued, // InvoiceStatus
                                dtimeSys.ToString("yyyy-MM-dd HH:mm:ss"), // SendEmailDTimeUTC
                                strWAUserCode, // SendEmailBy
                                dtimeSys.ToString("yyyy-MM-dd HH:mm:ss"), // IssuedDTimeUTC
                                strWAUserCode, // IssuedBy
                                dtimeSys.ToString("yyyy-MM-dd HH:mm:ss"), // LogLUDTimeUTC
                                strWAUserCode, // LogLUBy
								}
                        }
                    );

            }
            #endregion

            #region // SaveDB:
            {
                ////
                string zzB_Update_Invoice_Invoice_ClauseSet_zzE = @"
						t.LogLUDTimeUTC = f.LogLUDTimeUTC
						, t.LogLUBy = f.LogLUBy
						, t.IssuedDTimeUTC = f.IssuedDTimeUTC
						, t.IssuedBy = f.IssuedBy
						, t.SendEmailDTimeUTC = f.SendEmailDTimeUTC
						, t.SendEmailBy = f.SendEmailBy
						, t.InvoiceStatus = f.InvoiceStatus
						, t.EmailSend = f.EmailSend
						, t.Remark = f.Remark
						";
                ////
                string zzB_Update_Invoice_InvoiceDtl_ClauseSet_zzE = @"
						t.LogLUDTimeUTC = f.LogLUDTimeUTC
						, t.LogLUBy = f.LogLUBy
						, t.InvoiceDtlStatus = f.InvoiceStatus
						";
                ////
                string zzB_Update_Invoice_InvoicePrd_ClauseSet_zzE = @"
						t.LogLUDTimeUTC = f.LogLUDTimeUTC
						, t.LogLUBy = f.LogLUBy
						, t.InvoicePrdStatus = f.InvoiceStatus
						";
                ////
                string zzB_Update_Invoice_Invoice_zzE = CmUtils.StringUtils.Replace(@"
						---- Invoice_Invoice:
						update t
						set 
							zzB_Update_Invoice_Invoice_ClauseSet_zzE
						from Invoice_Invoice t --//[mylock]
							inner join #input_Invoice_Invoice f --//[mylock]
								on t.InvoiceCode = f.InvoiceCode
						where (1=1)
						;
					"
                    , "zzB_Update_Invoice_Invoice_ClauseSet_zzE", zzB_Update_Invoice_Invoice_ClauseSet_zzE
                    );
                ////
                string zzB_Update_Invoice_InvoiceDtl_zzE = CmUtils.StringUtils.Replace(@"
                            ---- #tbl_Invoice_InvoiceDtl_Temp: 
                            select 
                                t.InvoiceCode
                                , t.SpecCode
                                , f.InvoiceStatus
                                , f.LogLUDTimeUTC
                                , f.LogLUBy
                            into #tbl_Invoice_InvoiceDtl_Temp
							from Invoice_InvoiceDtl t --//[mylock]
							    inner join #input_Invoice_Invoice f --//[mylock]
								    on t.InvoiceCode = f.InvoiceCode
							where (1=1)
							;

                            ---- Update:
							update t
							set 
								zzB_Update_Invoice_InvoiceDtl_ClauseSet_zzE
							from Invoice_InvoiceDtl t --//[mylock]
							    inner join #tbl_Invoice_InvoiceDtl_Temp f --//[mylock]
								    on t.InvoiceCode = f.InvoiceCode
								        and t.SpecCode = f.SpecCode
							where (1=1)
							;
						"
                        , "zzB_Update_Invoice_InvoiceDtl_ClauseSet_zzE", zzB_Update_Invoice_InvoiceDtl_ClauseSet_zzE
                        );
                ////				
                string zzB_Update_Invoice_InvoicePrd_zzE = CmUtils.StringUtils.Replace(@"
                        ---- #tbl_Invoice_InvoicePrd_Temp: 
                        select 
                            t.InvoiceCode
                            , t.ProductID
                            , t.SpecCode
                            , f.InvoiceStatus
                            , f.LogLUDTimeUTC
                            , f.LogLUBy
                        into #tbl_Invoice_InvoicePrd_Temp
						from Invoice_InvoicePrd t --//[mylock]
							inner join #input_Invoice_Invoice f --//[mylock]
								on t.InvoiceCode = f.InvoiceCode
						where (1=1)
						;

                        ---- Update:
						update t
						set 
							zzB_Update_Invoice_InvoicePrd_ClauseSet_zzE
						from Invoice_InvoicePrd t --//[mylock]
							inner join #tbl_Invoice_InvoicePrd_Temp f --//[mylock]
								on t.InvoiceCode = f.InvoiceCode
								    and t.ProductID = f.ProductID
								    and t.SpecCode = f.SpecCode
						where (1=1)
						;
					"
                    , "zzB_Update_Invoice_InvoicePrd_ClauseSet_zzE", zzB_Update_Invoice_InvoicePrd_ClauseSet_zzE
                    );
                ////
                string strSql_SaveOnDB = CmUtils.StringUtils.Replace(@"
						----
						zzB_Update_Invoice_Invoice_zzE
                        ----
						zzB_Update_Invoice_InvoiceDtl_zzE
                        ----
						zzB_Update_Invoice_InvoicePrd_zzE
                        ----
					"
                    , "zzB_Update_Invoice_Invoice_zzE", zzB_Update_Invoice_Invoice_zzE
                    , "zzB_Update_Invoice_InvoiceDtl_zzE", zzB_Update_Invoice_InvoiceDtl_zzE
                    , "zzB_Update_Invoice_InvoicePrd_zzE", zzB_Update_Invoice_InvoicePrd_zzE
                    );

                DataSet dsDB_Check = _cf.db.ExecQuery(
                    strSql_SaveOnDB
                    );
            }
            #endregion

            #region //// Clear For Debug:
            {
                ////
                string strSqlClearForDebug = CmUtils.StringUtils.Replace(@"
						---- Clear for Debug:
						drop table #input_Invoice_Invoice;
						drop table #tbl_Invoice_InvoiceDtl_Temp;
						drop table #tbl_Invoice_InvoicePrd_Temp;
					");

                _cf.db.ExecQuery(
                    strSqlClearForDebug
                    );
                ////
            }
            #endregion

        }

        private void Invoice_Invoice_UpdFlagPushOutSiteX(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            , DateTime dtimeSys
            //// 
            , object objInvoiceCode
           )
        {
            #region // Temp:
            //int nTidSeq = 0;
            //bool bMyDebugSql = false;
            string strFunctionName = "Invoice_Invoice_UpdFlagPushOutSiteX";
            //string strErrorCodeDefault = TError.ErrHTCNM.Invoice_Invoice_IssuedX;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
                , "objInvoiceCode", objInvoiceCode
                });
            //ArrayList alPCErrEx = new ArrayList();
            ////
            Hashtable htParamsSql = new Hashtable();
            #endregion

            #region // Convert Input:
            // drAbilityOfUser:
            //DataRow drAbilityOfUser = Sys_User_GetAbilityViewOfUser(strWAUserCode);
            //zzzzClauseSelect_Mst_NNT_ViewAbility_Get(
            //    drAbilityOfUser // drAbilityOfUser
            //    , ref alParamsCoupleError // alParamsCoupleError
            //    );

            #endregion

            #region // Refine and Check Input Invoice_Invoice:
            ////
            string strInvoiceCode = TUtils.CUtils.StdParam(objInvoiceCode);
            ////
            DataTable dtDB_Invoice_Invoice = null;
            {
                Invoice_Invoice_CheckDB(
                    ref alParamsCoupleError // alParamsCoupleError
                    , strInvoiceCode // objInvoiceCode
                    , TConst.Flag.Yes // strFlagExistToCheck
                    , "ISSUED, DELETED" // strInvoiceStatusListToCheck
                    , out dtDB_Invoice_Invoice // dtDB_Invoice_Invoice
                    );
                ////
                string strFlagPushOutSite = TUtils.CUtils.StdDTime(dtDB_Invoice_Invoice.Rows[0]["FlagPushOutSite"]);
                ////
                if (!string.IsNullOrEmpty(strFlagPushOutSite))
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.InvoiceCode", objInvoiceCode
                        , "Check.DB.FlagPushOutSite", strFlagPushOutSite
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Invoice_Invoice_Issued_UpdFlagPushOutSiteX_ExistFlagPushOutSite
                        , null
                        , alParamsCoupleError.ToArray()
                        );

                }
            }
            #endregion

            #region // SaveTemp Invoice_Invoice:
            {
                ////
                TUtils.CUtils.MyBuildDBDT_Common(
                    _cf.db
                    , "#input_Invoice_Invoice"
                    , TConst.BizMix.Default_DBColType // strDefaultType
                    , new object[]{
                        "InvoiceCode"
                        , "FlagPushOutSite"
                        , "LogLUDTimeUTC"
                        , "LogLUBy"
                        }
                    , new object[]{
                            new object[]{
                                strInvoiceCode, // InvoiceCode
                                dtimeSys.ToString("yyyy-MM-dd HH:mm:ss"), // FlagPushOutSite
                                dtimeSys.ToString("yyyy-MM-dd HH:mm:ss"), // LogLUDTimeUTC
                                strWAUserCode, // LogLUBy
								}
                        }
                    );

            }
            #endregion

            #region // SaveDB:
            {
                ////
                string zzB_Update_Invoice_Invoice_ClauseSet_zzE = @"
						t.LogLUDTimeUTC = f.LogLUDTimeUTC
						, t.LogLUBy = f.LogLUBy
						, t.FlagPushOutSite = f.FlagPushOutSite
						";
                ////
                string zzB_Update_Invoice_Invoice_zzE = CmUtils.StringUtils.Replace(@"
						---- Invoice_Invoice:
						update t
						set 
							zzB_Update_Invoice_Invoice_ClauseSet_zzE
						from Invoice_Invoice t --//[mylock]
							inner join #input_Invoice_Invoice f --//[mylock]
								on t.InvoiceCode = f.InvoiceCode
						where (1=1)
						;
					"
                    , "zzB_Update_Invoice_Invoice_ClauseSet_zzE", zzB_Update_Invoice_Invoice_ClauseSet_zzE
                    );
                ////
                string strSql_SaveOnDB = CmUtils.StringUtils.Replace(@"
						----
						zzB_Update_Invoice_Invoice_zzE
                        ----
					"
                    , "zzB_Update_Invoice_Invoice_zzE", zzB_Update_Invoice_Invoice_zzE
                    );

                DataSet dsDB_Check = _cf.db.ExecQuery(
                    strSql_SaveOnDB
                    );
            }
            #endregion

            #region //// Clear For Debug:
            {
                ////
                string strSqlClearForDebug = CmUtils.StringUtils.Replace(@"
						---- Clear for Debug:
						drop table #input_Invoice_Invoice;
					");

                _cf.db.ExecQuery(
                    strSqlClearForDebug
                    );
                ////
            }
            #endregion

        }

        public DataSet WAS_Invoice_Invoice_Deleted(
           ref ArrayList alParamsCoupleError
           , RQ_Invoice_Invoice objRQ_Invoice_Invoice
           ////
           , out RT_Invoice_Invoice objRT_Invoice_Invoice
           )
        {
            #region // Temp:
            string strTid = objRQ_Invoice_Invoice.Tid;
            objRT_Invoice_Invoice = new RT_Invoice_Invoice();
            DataSet mdsResult = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            DateTime dtimeSys = DateTime.UtcNow;
            //DataSet mdsExec = null;
            //DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(objRQ_Invoice_Invoice.Tid);
            //int nTidSeq = 0;
            //bool bNeedTransaction = true;
            string strFunctionName = "WAS_Invoice_Invoice_Deleted";
            string strErrorCodeDefault = TError.ErridnInventory.WAS_Invoice_Invoice_Deleted;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
                });
            #endregion

            try
            {
                #region // Init:
                #endregion

                #region // Refine and Check Input:
                //List<Invoice_Invoice> lst_Invoice_Invoice = new List<Invoice_Invoice>();
                //DataSet dsData = new DataSet();
                //{
                //    ////
                //    DataTable dt_Transaction_KeKhaiThue = TUtils.DataTableCmUtils.ToDataTable<Transaction_KeKhaiThue>(objRQ_Mst_NNT.Lst_Transaction_KeKhaiThue, "Transaction_KeKhaiThue");
                //    dsData.Tables.Add(dt_Transaction_KeKhaiThue);
                //}
                #endregion

                #region // Invoice_Invoice_Deleted:
                mdsResult = Invoice_Invoice_Deleted(
                    objRQ_Invoice_Invoice.Tid // strTid
                    , objRQ_Invoice_Invoice.GwUserCode // strGwUserCode
                    , objRQ_Invoice_Invoice.GwPassword // strGwPassword
                    , objRQ_Invoice_Invoice.WAUserCode // strUserCode
                    , objRQ_Invoice_Invoice.WAUserPassword // strUserPassword
                    , ref alParamsCoupleError // alParamsCoupleError
                                              ////
                    , objRQ_Invoice_Invoice.Invoice_Invoice.InvoiceCode // objInvoiceCode
                    , objRQ_Invoice_Invoice.Invoice_Invoice.InvoicePDFFilePath // objInvoicePDFFilePath
                    , objRQ_Invoice_Invoice.Invoice_Invoice.Remark // objRemark
                    );
                #endregion

                // Return Good:
                return mdsResult;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsResult
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Write ReturnLog:
                //_cf.ProcessBizReturn(
                //	ref mdsResult // mdsFinal
                //	, strTid // strTid
                //	, strFunctionName // strFunctionName
                //	);
                #endregion
            }
        }

        public DataSet Invoice_Invoice_Deleted(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            ////
            , object objInvoiceCode
            , object objInvoicePDFFilePath
            , object objRemark
            )
        {
            #region // Temp:
            DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            //int nTidSeq = 0;
            DateTime dtimeSys = DateTime.UtcNow;
            string strFunctionName = "Invoice_Invoice_Approved";
            string strErrorCodeDefault = TError.ErridnInventory.Invoice_Invoice_Approved;
            alParamsCoupleError.AddRange(new object[]{
                    "strFunctionName", strFunctionName
                    , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
			        ////
					, "objInvoiceCode", objInvoiceCode
                    , "objInvoicePDFFilePath", objInvoicePDFFilePath
                    , "objRemark", objRemark
                    });
            #endregion

            try
            {
                #region // Init:
                //_cf.db.LogUserId = _cf.sinf.strUserCode;
                _cf.db.BeginTransaction();

                // Write RequestLog:
                _cf.ProcessBizReq_OutSide(
                    strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    , alParamsCoupleError // alParamsCoupleError
                    );

                // Sys_User_CheckAuthentication:
                //Sys_User_CheckAuthentication(
                //    ref alParamsCoupleError
                //    , strWAUserCode
                //    , strWAUserPassword
                //    );

                // Check Access/Deny:
                Sys_Access_CheckDenyV30(
                    ref alParamsCoupleError
                    , strWAUserCode
                    , strFunctionName
                    );
                #endregion

                #region // Invoice_Invoice_ApprovedX:
                //DataSet dsGetData = null;
                {
                    Invoice_Invoice_DeletedX_New20190705(
                        strTid // strTid
                        , strGwUserCode // strGwUserCode
                        , strGwPassword // strGwPassword
                        , strWAUserCode // strWAUserCode
                        , strWAUserPassword // strWAUserPassword
                        , ref alParamsCoupleError // alParamsCoupleError
                        , dtimeSys // dtimeSys
                                   ////
                        , objInvoiceCode // objInvoiceCode
                        , objInvoicePDFFilePath // objInvoicePDFFilePath
                        , objRemark // objRemark
                        );
                }
                ////
                //CmUtils.DataUtils.MoveDataTable(ref mdsFinal, ref dsGetData);
                #endregion

                // Return Good:
                TDALUtils.DBUtils.CommitSafety(_cf.db);
                mdsFinal.AcceptChanges();
                return mdsFinal;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Rollback:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);

                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsFinal
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Rollback and Release resources:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);
                TDALUtils.DBUtils.ReleaseAllSemaphore(_cf.db_Sys, true);

                // Write ReturnLog:
                _cf.ProcessBizReturn_OutSide(
                    ref mdsFinal // mdsFinal
                    , strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    );
                #endregion
            }
        }

        private void Invoice_Invoice_DeletedX(
           string strTid
           , string strGwUserCode
           , string strGwPassword
           , string strWAUserCode
           , string strWAUserPassword
           , ref ArrayList alParamsCoupleError
           , DateTime dtimeSys
            //// 
            , object objInvoiceCode
            , object objInvoicePDFFilePath
            , object objRemark
          )
        {
            #region // Temp:
            //int nTidSeq = 0;
            //bool bMyDebugSql = false;
            string strFunctionName = "Invoice_Invoice_DeletedX";
            //string strErrorCodeDefault = TError.ErrHTCNM.Invoice_Invoice_DeletedX;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
                , "objInvoiceCode", objInvoiceCode
                , "objInvoicePDFFilePath", objInvoicePDFFilePath
                , "objRemark", objRemark
                });
            //ArrayList alPCErrEx = new ArrayList();
            ////
            Hashtable htParamsSql = new Hashtable();
            #endregion

            #region // Convert Input:
            // drAbilityOfUser:
            DataRow drAbilityOfUser = Sys_User_GetAbilityViewOfUser(strWAUserCode);
            zzzzClauseSelect_Mst_NNT_ViewAbility_Get(
                drAbilityOfUser // drAbilityOfUser
                , ref alParamsCoupleError // alParamsCoupleError
                );

            #endregion

            #region // Refine and Check Input Invoice_Invoice:
            ////
            string strInvoiceCode = TUtils.CUtils.StdParam(objInvoiceCode);
            string strInvoicePDFFilePath = string.Format("{0}", objInvoicePDFFilePath).Trim();
            string strRemark = string.Format("{0}", objRemark).Trim();
            ////
            DataTable dtDB_Invoice_Invoice = null;
            {
                Invoice_Invoice_CheckDB(
                    ref alParamsCoupleError // alParamsCoupleError
                    , strInvoiceCode // objInvoiceCode
                    , TConst.Flag.Yes // strFlagExistToCheck
                    , TConst.InvoiceStatus.Issued // strInvoiceStatusListToCheck
                    , out dtDB_Invoice_Invoice // dtDB_Invoice_Invoice
                    );

                ////
                string strMST = TUtils.CUtils.StdParam(dtDB_Invoice_Invoice.Rows[0]["MST"]);
                if (!CmUtils.StringUtils.StringEqualIgnoreCase(drAbilityOfUser["MST"], strMST))
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.DB.NNT.MST", drAbilityOfUser["MST"]
                        , "Check.strMST", strMST
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Invoice_Invoice_Deleted_InvalidMST
                        , null
                        , alParamsCoupleError.ToArray()
                        );

                }
                //           string strSqlCheck_Invoice_InvoiceDtl = CmUtils.StringUtils.Replace(@"
                //	select top 1
                //		t.*
                //	from Invoice_InvoiceDtl t --//[mylock]
                //	where (1=1)
                //		and t.InvoiceCode = '@strInvoiceCode'
                //	;
                //"
                //               , "@strInvoiceCode", strInvoiceCode
                //               );

                //           DataTable dtDB_Check_Invoice_InvoiceDtl = _cf.db.ExecQuery(strSqlCheck_Invoice_InvoiceDtl).Tables[0];
                //           ////
                //           if (dtDB_Check_Invoice_InvoiceDtl.Rows.Count < 1)
                //           {
                //               alParamsCoupleError.AddRange(new object[]{
                //                   "Check.strInvoiceCode", strInvoiceCode
                //                   });
                //               throw CmUtils.CMyException.Raise(
                //                   TError.ErridnInventory.Invoice_Invoice_Deleted_InvoiceDtlNotFound
                //                   , null
                //                   , alParamsCoupleError.ToArray()
                //                   );
                //           }
            }
            #endregion

            #region // SaveTemp Invoice_Invoice:
            {
                ////
                TUtils.CUtils.MyBuildDBDT_Common(
                    _cf.db
                    , "#input_Invoice_Invoice"
                    , TConst.BizMix.Default_DBColType // strDefaultType
                    , new object[]{
                        "InvoiceCode"
                        , "InvoicePDFFilePath"
                        , "Remark"
                        , "InvoiceStatus"
                        , "DeleteDTimeUTC"
                        , "DeleteBy"
                        , "LogLUDTimeUTC"
                        , "LogLUBy"
                        }
                    , new object[]{
                            new object[]{
                                strInvoiceCode, // InvoiceCode
                                strInvoicePDFFilePath, // InvoicePDFFilePath
								strRemark, // Remark
								TConst.InvoiceStatus.Deleted, // InvoiceStatus
                                dtimeSys.ToString("yyyy-MM-dd HH:mm:ss"), // DeleteDTimeUTC
                                strWAUserCode, // DeleteBy
                                dtimeSys.ToString("yyyy-MM-dd HH:mm:ss"), // LogLUDTimeUTC
                                strWAUserCode, // LogLUBy
								}
                        }
                    );

            }
            #endregion

            #region // SaveDB:
            {
                ////
                string zzB_Update_Invoice_Invoice_ClauseSet_zzE = @"
						t.LogLUDTimeUTC = f.LogLUDTimeUTC
						, t.LogLUBy = f.LogLUBy
						, t.DeleteDTimeUTC = f.DeleteDTimeUTC
						, t.DeleteBy = f.DeleteBy
						, t.InvoiceStatus = f.InvoiceStatus						
                        , t.InvoicePDFFilePath = f.InvoicePDFFilePath
						, t.Remark = f.Remark
						";
                ////
                string zzB_Update_Invoice_InvoiceDtl_ClauseSet_zzE = @"
						t.LogLUDTimeUTC = f.LogLUDTimeUTC
						, t.LogLUBy = f.LogLUBy
						, t.InvoiceDtlStatus = f.InvoiceStatus
						";
                ////
                string zzB_Update_Invoice_InvoicePrd_ClauseSet_zzE = @"
						t.LogLUDTimeUTC = f.LogLUDTimeUTC
						, t.LogLUBy = f.LogLUBy
						, t.InvoicePrdStatus = f.InvoiceStatus
						";
                ////
                string zzB_Update_Invoice_Invoice_zzE = CmUtils.StringUtils.Replace(@"
						---- Invoice_Invoice:
						update t
						set 
							zzB_Update_Invoice_Invoice_ClauseSet_zzE
						from Invoice_Invoice t --//[mylock]
							inner join #input_Invoice_Invoice f --//[mylock]
								on t.InvoiceCode = f.InvoiceCode
						where (1=1)
						;
					"
                    , "zzB_Update_Invoice_Invoice_ClauseSet_zzE", zzB_Update_Invoice_Invoice_ClauseSet_zzE
                    );
                ////
                string zzB_Update_Invoice_InvoiceDtl_zzE = CmUtils.StringUtils.Replace(@"
                        ---- #tbl_Invoice_InvoiceDtl_Temp: 
                        select 
                            t.InvoiceCode
                            , t.SpecCode
                            , f.InvoiceStatus
                            , f.LogLUDTimeUTC
                            , f.LogLUBy
                        into #tbl_Invoice_InvoiceDtl_Temp
						from Invoice_InvoiceDtl t --//[mylock]
							inner join #input_Invoice_Invoice f --//[mylock]
								on t.InvoiceCode = f.InvoiceCode
						where (1=1)
						;

                        ---- Update:
						update t
						set 
							zzB_Update_Invoice_InvoiceDtl_ClauseSet_zzE
						from Invoice_InvoiceDtl t --//[mylock]
							inner join #tbl_Invoice_InvoiceDtl_Temp f --//[mylock]
								on t.InvoiceCode = f.InvoiceCode
								    and t.SpecCode = f.SpecCode
						where (1=1)
						;
					"
                    , "zzB_Update_Invoice_InvoiceDtl_ClauseSet_zzE", zzB_Update_Invoice_InvoiceDtl_ClauseSet_zzE
                    );
                ////
                string zzB_Update_Invoice_InvoicePrd_zzE = CmUtils.StringUtils.Replace(@"
                        ---- #tbl_Invoice_InvoicePrd_Temp: 
                        select 
                            t.InvoiceCode
                            , t.ProductID
                            , t.SpecCode
                            , f.InvoiceStatus
                            , f.LogLUDTimeUTC
                            , f.LogLUBy
                        into #tbl_Invoice_InvoicePrd_Temp
						from Invoice_InvoicePrd t --//[mylock]
							inner join #input_Invoice_Invoice f --//[mylock]
								on t.InvoiceCode = f.InvoiceCode
						where (1=1)
						;

                        ---- Update:
						update t
						set 
							zzB_Update_Invoice_InvoicePrd_ClauseSet_zzE
						from Invoice_InvoicePrd t --//[mylock]
							inner join #tbl_Invoice_InvoicePrd_Temp f --//[mylock]
								on t.InvoiceCode = f.InvoiceCode
								    and t.ProductID = f.ProductID
								    and t.SpecCode = f.SpecCode
						where (1=1)
						;
					"
                    , "zzB_Update_Invoice_InvoicePrd_ClauseSet_zzE", zzB_Update_Invoice_InvoicePrd_ClauseSet_zzE
                    );
                ////
                string strSql_SaveOnDB = CmUtils.StringUtils.Replace(@"
						----
						zzB_Update_Invoice_Invoice_zzE
                        ----
						zzB_Update_Invoice_InvoiceDtl_zzE
                        ----
						zzB_Update_Invoice_InvoicePrd_zzE
                        ----
					"
                    , "zzB_Update_Invoice_Invoice_zzE", zzB_Update_Invoice_Invoice_zzE
                    , "zzB_Update_Invoice_InvoiceDtl_zzE", zzB_Update_Invoice_InvoiceDtl_zzE
                    , "zzB_Update_Invoice_InvoicePrd_zzE", zzB_Update_Invoice_InvoicePrd_zzE
                    );

                DataSet dsDB_Check = _cf.db.ExecQuery(
                    strSql_SaveOnDB
                    );
            }
            #endregion

            #region //// Clear For Debug:
            {
                ////
                string strSqlClearForDebug = CmUtils.StringUtils.Replace(@"
						---- Clear for Debug:
						drop table #input_Invoice_Invoice;
						drop table #tbl_Invoice_InvoiceDtl_Temp;
						drop table #tbl_Invoice_InvoicePrd_Temp;
					");

                _cf.db.ExecQuery(
                    strSqlClearForDebug
                    );
                ////
            }
            #endregion
        }

        public DataSet WAS_Invoice_Invoice_AllocatedInv(
           ref ArrayList alParamsCoupleError
           , RQ_Invoice_Invoice objRQ_Invoice_Invoice
           ////
           , out RT_Invoice_Invoice objRT_Invoice_Invoice
           )
        {
            #region // Temp:
            string strTid = objRQ_Invoice_Invoice.Tid;
            objRT_Invoice_Invoice = new RT_Invoice_Invoice();
            DataSet mdsResult = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            DateTime dtimeSys = DateTime.UtcNow;
            //DataSet mdsExec = null;
            //DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(objRQ_Invoice_Invoice.Tid);
            //int nTidSeq = 0;
            //bool bNeedTransaction = true;
            string strFunctionName = "WAS_Invoice_Invoice_AllocatedInv";
            string strErrorCodeDefault = TError.ErridnInventory.WAS_Invoice_Invoice_AllocatedInv;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
                });
            #endregion

            try
            {
                #region // Init:
                #endregion

                #region // Refine and Check Input:
                //List<Invoice_Invoice> lst_Invoice_Invoice = new List<Invoice_Invoice>();
                //DataSet dsData = new DataSet();
                //{
                //    ////
                //    DataTable dt_Transaction_KeKhaiThue = TUtils.DataTableCmUtils.ToDataTable<Transaction_KeKhaiThue>(objRQ_Mst_NNT.Lst_Transaction_KeKhaiThue, "Transaction_KeKhaiThue");
                //    dsData.Tables.Add(dt_Transaction_KeKhaiThue);
                //}
                #endregion

                #region // Invoice_Invoice_AllocatedInv:
                mdsResult = Invoice_Invoice_AllocatedInv(
                    objRQ_Invoice_Invoice.Tid // strTid
                    , objRQ_Invoice_Invoice.GwUserCode // strGwUserCode
                    , objRQ_Invoice_Invoice.GwPassword // strGwPassword
                    , objRQ_Invoice_Invoice.WAUserCode // strUserCode
                    , objRQ_Invoice_Invoice.WAUserPassword // strUserPassword
                    , ref alParamsCoupleError // alParamsCoupleError
                                              ////
                    , objRQ_Invoice_Invoice.Invoice_Invoice.InvoiceCode // objInvoiceCode
                    , objRQ_Invoice_Invoice.Invoice_Invoice.InvoiceDateUTC // objInvoiceDateUTC
                    );
                #endregion

                // Return Good:
                return mdsResult;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsResult
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Write ReturnLog:
                //_cf.ProcessBizReturn(
                //	ref mdsResult // mdsFinal
                //	, strTid // strTid
                //	, strFunctionName // strFunctionName
                //	);
                #endregion
            }
        }

        public DataSet Invoice_Invoice_AllocatedInv(
           string strTid
           , string strGwUserCode
           , string strGwPassword
           , string strWAUserCode
           , string strWAUserPassword
           , ref ArrayList alParamsCoupleError
           ////
           , object objInvoiceCode
           , object objInvoiceDateUTC
           )
        {
            #region // Temp:
            DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            //int nTidSeq = 0;
            DateTime dtimeSys = DateTime.UtcNow;
            string strFunctionName = "Invoice_Invoice_AllocatedInv";
            string strErrorCodeDefault = TError.ErridnInventory.Invoice_Invoice_AllocatedInv;
            alParamsCoupleError.AddRange(new object[]{
                    "strFunctionName", strFunctionName
                    , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
			        ////
					, "objInvoiceCode", objInvoiceCode
                    , "objInvoiceDateUTC", objInvoiceDateUTC
                    });
            #endregion

            try
            {
                #region // Init:
                //_cf.db.LogUserId = _cf.sinf.strUserCode;
                _cf.db.BeginTransaction();

                // Write RequestLog:
                _cf.ProcessBizReq_OutSide(
                    strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    , alParamsCoupleError // alParamsCoupleError
                    );

                // Sys_User_CheckAuthentication:
                //Sys_User_CheckAuthentication(
                //    ref alParamsCoupleError
                //    , strWAUserCode
                //    , strWAUserPassword
                //    );

                // Check Access/Deny:
                Sys_Access_CheckDenyV30(
                    ref alParamsCoupleError
                    , strWAUserCode
                    , strFunctionName
                    );
                #endregion

                #region // Invoice_Invoice_AllocatedInvX:
                //DataSet dsGetData = null;
                {
                    Invoice_Invoice_AllocatedInvX_New20190917(
                        strTid // strTid
                        , strGwUserCode // strGwUserCode
                        , strGwPassword // strGwPassword
                        , strWAUserCode // strWAUserCode
                        , strWAUserPassword // strWAUserPassword
                        , ref alParamsCoupleError // alParamsCoupleError
                        , dtimeSys // dtimeSys
                                   ////
                        , objInvoiceCode // objInvoiceCode
                        , objInvoiceDateUTC // objInvoiceDateUTC
                        );
                }
                ////
                //CmUtils.DataUtils.MoveDataTable(ref mdsFinal, ref dsGetData);
                #endregion

                // Return Good:
                TDALUtils.DBUtils.CommitSafety(_cf.db);
                mdsFinal.AcceptChanges();
                return mdsFinal;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Rollback:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);

                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsFinal
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Rollback and Release resources:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);
                TDALUtils.DBUtils.ReleaseAllSemaphore(_cf.db_Sys, true);

                // Write ReturnLog:
                _cf.ProcessBizReturn_OutSide(
                    ref mdsFinal // mdsFinal
                    , strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    );
                #endregion
            }
        }

        private void Invoice_Invoice_AllocatedInvX(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            , DateTime dtimeSys
            //// 
            , object objInvoiceCode
            , object objInvoiceDateUTC
          )
        {
            #region // Temp:
            //int nTidSeq = 0;
            //bool bMyDebugSql = false;
            string strFunctionName = "Invoice_Invoice_AllocatedInv";
            //string strErrorCodeDefault = TError.ErrHTCNM.Invoice_Invoice_AllocatedInv;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
                });
            //ArrayList alPCErrEx = new ArrayList();
            ////
            Hashtable htParamsSql = new Hashtable();
            #endregion

            #region // Convert Input:
            // drAbilityOfUser:
            DataRow drAbilityOfUser = Sys_User_GetAbilityViewOfUser(strWAUserCode);
            zzzzClauseSelect_Mst_NNT_ViewAbility_Get(
                drAbilityOfUser // drAbilityOfUser
                , ref alParamsCoupleError // alParamsCoupleError
                );
            #endregion

            #region //// Refine and Check Input Invoice_Invoice:
            ////
            string strInvoiceCode = TUtils.CUtils.StdParam(objInvoiceCode);
            string strInvoiceDateUTC = TUtils.CUtils.StdDate(objInvoiceDateUTC);
            double dblInvoiceNo = 0.0;
            double dblQtyUsedNext = 0.0;
            string strInvoiceNo = null;
            string strTInvoiceCode = null;
            ////
            DataTable dtDB_Invoice_Invoice = null;
            DataTable dtDB_Invoice_TempInvoice = null;
            string strMST = "";
            {
                Invoice_Invoice_CheckDB(
                    ref alParamsCoupleError // alParamsCoupleError
                    , strInvoiceCode // objInvoiceCode
                    , TConst.Flag.Yes // strFlagExistToCheck
                    , TConst.InvoiceStatus.Pending // strInvoiceStatusListToCheck
                    , out dtDB_Invoice_Invoice // dtDB_Invoice_Invoice
                    );
                ////
                strMST = TUtils.CUtils.StdParam(dtDB_Invoice_Invoice.Rows[0]["MST"]);

                myCache_ViewAbility_CheckAccessMSTWrite(
                    ref alParamsCoupleError // alParamsCoupleError
                    , strWAUserCode // strWAUserCode
                    , strMST // strMST
                    );
                ////
                ////
                string strInvoiceNoDB = dtDB_Invoice_Invoice.Rows[0]["InvoiceNo"].ToString();
                if (!string.IsNullOrEmpty(strInvoiceNoDB))
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.strInvoiceCode", strInvoiceCode
                        , "Check.DB.InvoiceNo", strInvoiceNoDB
                        , "Check.InvoiceNo.Expected", "is null"
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Invoice_Invoice_AllocatedInv_NotAllowAllocatedInv
                        , null
                        , alParamsCoupleError.ToArray()
                        );
                }
                ////
                if (string.IsNullOrEmpty(strInvoiceDateUTC))
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.strInvoiceCode", strInvoiceCode
                        , "Check.strInvoiceDateUTC", strInvoiceDateUTC
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Invoice_Invoice_AllocatedInv_InvoiceDateUTCIsNotNull
                        , null
                        , alParamsCoupleError.ToArray()
                        );
                }
                //// Ngày hóa đơn >= Ngày hóa đơn trc đó đc cấp phát số HĐ
                strTInvoiceCode = dtDB_Invoice_Invoice.Rows[0]["TInvoiceCode"].ToString();

                Invoice_TempInvoice_CheckDB(
                    ref alParamsCoupleError // alParamsCoupleError
                    , strTInvoiceCode // objTInvoiceCode
                    , TConst.Flag.Yes // strFlagExistToCheck
                    , "" // strTInvoiceStatusListToCheck
                    , TConst.Flag.Active // strFlagActiveListToCheck
                    , out dtDB_Invoice_TempInvoice // dtDB_Invoice_TempInvoice
                    );

                ////
                string strLastInvoiceDateUTC = dtDB_Invoice_TempInvoice.Rows[0]["LastInvoiceDateUTC"].ToString();
                if (!string.IsNullOrEmpty(strLastInvoiceDateUTC))
                {
                    if (strInvoiceDateUTC.CompareTo(strLastInvoiceDateUTC) < 0)
                    {
                        alParamsCoupleError.AddRange(new object[]{
                            "Check.strInvoiceCode", strInvoiceCode
                            , "Check.DB.TInvoiceCode", strTInvoiceCode
                            , "Check.DB.LastInvoiceDateUTC", strLastInvoiceDateUTC
                            , "Check.strInvoiceDateUTC", strInvoiceDateUTC
                            });
                        throw CmUtils.CMyException.Raise(
                            TError.ErridnInventory.Invoice_Invoice_AllocatedInv_InvalidInvoiceDateUTCBeforeLastInvoiceDateUTC
                            , null
                            , alParamsCoupleError.ToArray()
                            );
                    }
                }
                //// ThomPTT 20190606 Báo lỗi: Ngày hóa đơn phải sau Ngày phát hành mẫu
                string strstrEffDateStart = dtDB_Invoice_TempInvoice.Rows[0]["EffDateStart"].ToString();
                if (strInvoiceDateUTC.CompareTo(strstrEffDateStart) < 0)
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.strInvoiceCode", strInvoiceCode
                        , "Check.DB.TInvoiceCode", strTInvoiceCode
                        , "Check.DB.EffDateStart", strstrEffDateStart
                        , "Check.strInvoiceDateUTC", strInvoiceDateUTC
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Invoice_Invoice_AllocatedInv_InvalidInvoiceDateUTCBeforeEffDateStart
                        , null
                        , alParamsCoupleError.ToArray()
                        );
                }
                //// ngày hóa đơn không được là ngày tương lai
                if (strInvoiceDateUTC.CompareTo(dtimeSys.ToString("yyyy-MM-dd")) > 0)
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.strInvoiceCode", strInvoiceCode
                        , "Check.DB.TInvoiceCode", strTInvoiceCode
                        , "Check.SysDate", dtimeSys.ToString("yyyy-MM-dd")
                        , "Check.strInvoiceDateUTC", strInvoiceDateUTC
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Invoice_Invoice_AllocatedInv_InvaliInvoiceDateUTCAfterSysDate
                        , null
                        , alParamsCoupleError.ToArray()
                        );
                }
                ////
                //if (!CmUtils.StringUtils.StringEqualIgnoreCase(drAbilityOfUser["MST"], strMST))
                //{
                //    alParamsCoupleError.AddRange(new object[]{
                //        "Check.DB.NNT.MST", drAbilityOfUser["MST"]
                //        , "Check.strMST", strMST
                //        });
                //    throw CmUtils.CMyException.Raise(
                //        TError.ErridnInventory.Invoice_Invoice_AllocatedInv_InvalidMST
                //        , null
                //        , alParamsCoupleError.ToArray()
                //        );

                //}
                //           string strSqlCheck_Invoice_InvoiceDtl = CmUtils.StringUtils.Replace(@"
                //	select top 1
                //		t.*
                //	from Invoice_InvoiceDtl t --//[mylock]
                //	where (1=1)
                //		and t.InvoiceCode = '@strInvoiceCode'
                //	;
                //"
                //               , "@strInvoiceCode", strInvoiceCode
                //               );

                //           DataTable dtDB_Check_Invoice_InvoiceDtl = _cf.db.ExecQuery(strSqlCheck_Invoice_InvoiceDtl).Tables[0];
                //           ////
                //           if (dtDB_Check_Invoice_InvoiceDtl.Rows.Count < 1)
                //           {
                //               alParamsCoupleError.AddRange(new object[]{
                //                   "Check.strInvoiceCode", strInvoiceCode
                //                   });
                //               throw CmUtils.CMyException.Raise(
                //                   TError.ErridnInventory.Invoice_Invoice_AllocatedInv_InvoiceDtlNotFound
                //                   , null
                //                   , alParamsCoupleError.ToArray()
                //                   );
                //           }
            }
            #endregion

            #region //// Cấp phát số hóa đơn:
            ////
            double dblStartInvoiceNo = Convert.ToDouble(dtDB_Invoice_TempInvoice.Rows[0]["StartInvoiceNo"].ToString());
            double dblQtyUsed = Convert.ToDouble(dtDB_Invoice_TempInvoice.Rows[0]["QtyUsed"].ToString());
            //dblInvoiceNo = dblStartInvoiceNo + dblQtyUsed + 1;
            dblInvoiceNo = dblStartInvoiceNo + dblQtyUsed;
            dblQtyUsedNext = dblQtyUsed + 1;
            strInvoiceNo = string.Format("{0:0000000}", dblInvoiceNo); //  Convert.ToString(dblInvoiceNo);
            ////
            #endregion

            #region //// SaveTemp Invoice_Invoice:
            {
                ////
                TUtils.CUtils.MyBuildDBDT_Common(
                    _cf.db
                    , "#input_Invoice_Invoice"
                    , TConst.BizMix.Default_DBColType // strDefaultType
                    , new object[]{
                        "InvoiceCode"
                        , "InvoiceNo"
                        , "InvoiceDateUTC"
                        , "InvoiceNoDTimeUTC"
                        , "InvoiceNoBy"
                        , "LogLUDTimeUTC"
                        , "LogLUBy"
                        }
                    , new object[]{
                        new object[]{
                            strInvoiceCode, // InvoiceCode
                			strInvoiceNo, // InvoiceNo
                			strInvoiceDateUTC, // InvoiceDateUTC
                            dtimeSys.ToString("yyyy-MM-dd HH:mm:ss"), // InvoiceNoDTimeUTC
                            strWAUserCode, // InvoiceNoBy
                            dtimeSys.ToString("yyyy-MM-dd HH:mm:ss"), // LogLUDTimeUTC
                            strWAUserCode, // LogLUBy
                			}
                        }
                    );

            }
            #endregion

            #region // SaveDB:
            {
                ////
                string zzB_Update_Invoice_Invoice_ClauseSet_zzE = @"
            	        t.LogLUDTimeUTC = f.LogLUDTimeUTC
            	        , t.LogLUBy = f.LogLUBy
            	        , t.InvoiceNoDTimeUTC = f.InvoiceNoDTimeUTC
            	        , t.InvoiceNoBy = f.InvoiceNoBy
            	        , t.InvoiceNo = f.InvoiceNo
            	        , t.InvoiceDateUTC = f.InvoiceDateUTC
            	        ";
                ////
                string zzB_Update_Invoice_Invoice_zzE = CmUtils.StringUtils.Replace(@"
            	        ---- Invoice_Invoice:
            	        update t
            	        set 
            		        zzB_Update_Invoice_Invoice_ClauseSet_zzE
            	        from Invoice_Invoice t --//[mylock]
            		        inner join #input_Invoice_Invoice f --//[mylock]
            			        on t.InvoiceCode = f.InvoiceCode
            	        where (1=1)
            	        ;
                    "
                    , "zzB_Update_Invoice_Invoice_ClauseSet_zzE", zzB_Update_Invoice_Invoice_ClauseSet_zzE
                    );
                ////
                string strSql_SaveOnDB = CmUtils.StringUtils.Replace(@"
            	        ----
            	        zzB_Update_Invoice_Invoice_zzE
                                        ----
                    "
                    , "zzB_Update_Invoice_Invoice_zzE", zzB_Update_Invoice_Invoice_zzE
                    );

                DataSet dsDB_Check = _cf.db.ExecQuery(
                    strSql_SaveOnDB
                    );
            }
            #endregion

            #region // Update Invoice_TempInvoice:
            {
                // Init:
                ArrayList alColumnEffective = new ArrayList();
                string strFN = "";
                DataRow drDB = dtDB_Invoice_TempInvoice.Rows[0];
                strFN = "LastInvoiceNo"; drDB[strFN] = strInvoiceNo; alColumnEffective.Add(strFN);
                strFN = "LastInvoiceDateUTC"; drDB[strFN] = strInvoiceDateUTC; alColumnEffective.Add(strFN);
                strFN = "QtyUsed"; drDB[strFN] = dblQtyUsedNext; alColumnEffective.Add(strFN);
                strFN = "LogLUDTimeUTC"; drDB[strFN] = dtimeSys.ToString("yyyy-MM-dd HH:mm:ss"); alColumnEffective.Add(strFN);
                strFN = "LogLUBy"; drDB[strFN] = strWAUserCode; alColumnEffective.Add(strFN);

                // Save:
                _cf.db.SaveData(
                    "Invoice_TempInvoice"
                    , dtDB_Invoice_TempInvoice
                    , alColumnEffective.ToArray()
                    );
            }
            #endregion

            #region // Port Check1: StartInvoiceNo <= Số HD hiện tại <= EndInvoiceNo.
            {
                myCheck_Invoice_TempInvoice_InvoiceNo(
                    ref alParamsCoupleError // alParamsCoupleError
                    , dtimeSys // dtimeSys
                               ////
                    , strTInvoiceCode // strTInvoiceCode
                    );
            }
            #endregion

            #region // Port Check 2: Số HD là duy nhất trên hệ thống theo:  ( Mẫu số HĐ  + Ký hiệu HĐ + MST).
            {
                myCheck_Invoice_Invoice_InvoiceNo(
                    ref alParamsCoupleError // alParamsCoupleError
                    , dtimeSys // dtimeSys
                    );
            }
            #endregion

            #region // Invoice_license_TotalQtyUsed: ThomPTT.
            {
                Invoice_license_TotalQtyUsed(
                    ref alParamsCoupleError // alParamsCoupleError
                    , strMST // objMST
                    , dtimeSys // dtimeSys
                    , strWAUserCode // objUserCode
                    );
            }
            #endregion 

            #region //// Clear for Debug:
            {
                ////
                string strSqlClearForDebug = CmUtils.StringUtils.Replace(@"
            	        ---- Clear for Debug:
            	        drop table #input_Invoice_Invoice;
            	        drop table #tbl_Mst_NNT_ViewAbility;

                    ");

                _cf.db.ExecQuery(
                    strSqlClearForDebug
                    );
                ////
            }
            #endregion
        }

        private void Invoice_Invoice_AllocatedInvX_New20190917(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            , DateTime dtimeSys
            //// 
            , object objInvoiceCode
            , object objInvoiceDateUTC
            )
        {
            #region // Temp:
            //int nTidSeq = 0;
            //bool bMyDebugSql = false;
            string strFunctionName = "Invoice_Invoice_AllocatedInv";
            //string strErrorCodeDefault = TError.ErrHTCNM.Invoice_Invoice_AllocatedInv;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
                });
            //ArrayList alPCErrEx = new ArrayList();
            ////
            Hashtable htParamsSql = new Hashtable();
            #endregion

            #region // Convert Input:
            // drAbilityOfUser:
            DataRow drAbilityOfUser = Sys_User_GetAbilityViewOfUser(strWAUserCode);
            zzzzClauseSelect_Mst_NNT_ViewAbility_Get(
                drAbilityOfUser // drAbilityOfUser
                , ref alParamsCoupleError // alParamsCoupleError
                );
            #endregion

            #region //// Refine and Check Input Invoice_Invoice:
            ////
            string strInvoiceCode = TUtils.CUtils.StdParam(objInvoiceCode);
            string strInvoiceDateUTC = TUtils.CUtils.StdDate(objInvoiceDateUTC);
            double dblInvoiceNo = 0.0;
            double dblQtyUsedNext = 0.0;
            string strInvoiceNo = null;
            string strTInvoiceCode = null;
            ////
            DataTable dtDB_Invoice_Invoice = null;
            DataTable dtDB_Invoice_TempInvoice = null;
            DataTable dtGen_Invoice_TempInvoice = null;
            string strMST = "";
            {
                Invoice_Invoice_CheckDB(
                    ref alParamsCoupleError // alParamsCoupleError
                    , strInvoiceCode // objInvoiceCode
                    , TConst.Flag.Yes // strFlagExistToCheck
                    , TConst.InvoiceStatus.Pending // strInvoiceStatusListToCheck
                    , out dtDB_Invoice_Invoice // dtDB_Invoice_Invoice
                    );
                ////
                strMST = TUtils.CUtils.StdParam(dtDB_Invoice_Invoice.Rows[0]["MST"]);

                myCache_ViewAbility_CheckAccessMSTWrite(
                    ref alParamsCoupleError // alParamsCoupleError
                    , strWAUserCode // strWAUserCode
                    , strMST // strMST
                    );
                ////
                ////
                string strInvoiceNoDB = dtDB_Invoice_Invoice.Rows[0]["InvoiceNo"].ToString();
                if (!string.IsNullOrEmpty(strInvoiceNoDB))
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.strInvoiceCode", strInvoiceCode
                        , "Check.DB.InvoiceNo", strInvoiceNoDB
                        , "Check.InvoiceNo.Expected", "is null"
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Invoice_Invoice_AllocatedInv_NotAllowAllocatedInv
                        , null
                        , alParamsCoupleError.ToArray()
                        );
                }
                ////
                if (string.IsNullOrEmpty(strInvoiceDateUTC))
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.strInvoiceCode", strInvoiceCode
                        , "Check.strInvoiceDateUTC", strInvoiceDateUTC
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Invoice_Invoice_AllocatedInv_InvoiceDateUTCIsNotNull
                        , null
                        , alParamsCoupleError.ToArray()
                        );
                }
                //// Ngày hóa đơn >= Ngày hóa đơn trc đó đc cấp phát số HĐ
                strTInvoiceCode = dtDB_Invoice_Invoice.Rows[0]["TInvoiceCode"].ToString();

                Invoice_TempInvoice_CheckDB(
                    ref alParamsCoupleError // alParamsCoupleError
                    , strTInvoiceCode // objTInvoiceCode
                    , TConst.Flag.Yes // strFlagExistToCheck
                    , "" // strTInvoiceStatusListToCheck
                    , TConst.Flag.Active // strFlagActiveListToCheck
                    , out dtDB_Invoice_TempInvoice // dtDB_Invoice_TempInvoice
                    );

                ////
                string strLastInvoiceDateUTC = dtDB_Invoice_TempInvoice.Rows[0]["LastInvoiceDateUTC"].ToString();
                if (!string.IsNullOrEmpty(strLastInvoiceDateUTC))
                {
                    if (strInvoiceDateUTC.CompareTo(strLastInvoiceDateUTC) < 0)
                    {
                        alParamsCoupleError.AddRange(new object[]{
                            "Check.strInvoiceCode", strInvoiceCode
                            , "Check.DB.TInvoiceCode", strTInvoiceCode
                            , "Check.DB.LastInvoiceDateUTC", strLastInvoiceDateUTC
                            , "Check.strInvoiceDateUTC", strInvoiceDateUTC
                            });
                        throw CmUtils.CMyException.Raise(
                            TError.ErridnInventory.Invoice_Invoice_AllocatedInv_InvalidInvoiceDateUTCBeforeLastInvoiceDateUTC
                            , null
                            , alParamsCoupleError.ToArray()
                            );
                    }
                }
                //// ThomPTT 20190606 Báo lỗi: Ngày hóa đơn phải sau Ngày phát hành mẫu
                string strstrEffDateStart = dtDB_Invoice_TempInvoice.Rows[0]["EffDateStart"].ToString();
                if (strInvoiceDateUTC.CompareTo(strstrEffDateStart) < 0)
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.strInvoiceCode", strInvoiceCode
                        , "Check.DB.TInvoiceCode", strTInvoiceCode
                        , "Check.DB.EffDateStart", strstrEffDateStart
                        , "Check.strInvoiceDateUTC", strInvoiceDateUTC
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Invoice_Invoice_AllocatedInv_InvalidInvoiceDateUTCBeforeEffDateStart
                        , null
                        , alParamsCoupleError.ToArray()
                        );
                }
                //// ngày hóa đơn không được là ngày tương lai
                if (strInvoiceDateUTC.CompareTo(dtimeSys.ToString("yyyy-MM-dd")) > 0)
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.strInvoiceCode", strInvoiceCode
                        , "Check.DB.TInvoiceCode", strTInvoiceCode
                        , "Check.SysDate", dtimeSys.ToString("yyyy-MM-dd")
                        , "Check.strInvoiceDateUTC", strInvoiceDateUTC
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Invoice_Invoice_AllocatedInv_InvaliInvoiceDateUTCAfterSysDate
                        , null
                        , alParamsCoupleError.ToArray()
                        );
                }
                ////
                //if (!CmUtils.StringUtils.StringEqualIgnoreCase(drAbilityOfUser["MST"], strMST))
                //{
                //    alParamsCoupleError.AddRange(new object[]{
                //        "Check.DB.NNT.MST", drAbilityOfUser["MST"]
                //        , "Check.strMST", strMST
                //        });
                //    throw CmUtils.CMyException.Raise(
                //        TError.ErridnInventory.Invoice_Invoice_AllocatedInv_InvalidMST
                //        , null
                //        , alParamsCoupleError.ToArray()
                //        );

                //}
                //           string strSqlCheck_Invoice_InvoiceDtl = CmUtils.StringUtils.Replace(@"
                //	select top 1
                //		t.*
                //	from Invoice_InvoiceDtl t --//[mylock]
                //	where (1=1)
                //		and t.InvoiceCode = '@strInvoiceCode'
                //	;
                //"
                //               , "@strInvoiceCode", strInvoiceCode
                //               );

                //           DataTable dtDB_Check_Invoice_InvoiceDtl = _cf.db.ExecQuery(strSqlCheck_Invoice_InvoiceDtl).Tables[0];
                //           ////
                //           if (dtDB_Check_Invoice_InvoiceDtl.Rows.Count < 1)
                //           {
                //               alParamsCoupleError.AddRange(new object[]{
                //                   "Check.strInvoiceCode", strInvoiceCode
                //                   });
                //               throw CmUtils.CMyException.Raise(
                //                   TError.ErridnInventory.Invoice_Invoice_AllocatedInv_InvoiceDtlNotFound
                //                   , null
                //                   , alParamsCoupleError.ToArray()
                //                   );
                //           }
            }
            #endregion

            #region //// Cấp phát số hóa đơn:
            //////
            //double dblStartInvoiceNo = Convert.ToDouble(dtDB_Invoice_TempInvoice.Rows[0]["StartInvoiceNo"].ToString());
            //double dblQtyUsed = Convert.ToDouble(dtDB_Invoice_TempInvoice.Rows[0]["QtyUsed"].ToString());
            ////dblInvoiceNo = dblStartInvoiceNo + dblQtyUsed + 1;
            //dblInvoiceNo = dblStartInvoiceNo + dblQtyUsed;
            //dblQtyUsedNext = dblQtyUsed + 1;
            //strInvoiceNo = string.Format("{0:0000000}", dblInvoiceNo); //  Convert.ToString(dblInvoiceNo);
            //														   ////
            #endregion

            #region // Invoice_TempInvoice:
            {
                //// Lock.
                string strSqlUpdDB_Invoice_TempInvoice = CmUtils.StringUtils.Replace(@"
						---- Invoice_TempInvoice:
						update t
						set
							t.LogLUBy = '@strLogLUBy'
						from Invoice_TempInvoice t --//[mylock]
						where (1=1)
							and t.TInvoiceCode = '@strTInvoiceCode'
						;
						
					"
                    , "@strLogLUBy", strWAUserCode
                    , "@strTInvoiceCode", strTInvoiceCode
                    );

                _cf.db.ExecQuery(strSqlUpdDB_Invoice_TempInvoice);
                ////
                string strSqlGetDB_Invoice_TempInvoice = CmUtils.StringUtils.Replace(@"
						---- Invoice_TempInvoice:
						select 
							t.*
						from Invoice_TempInvoice t
						where (1=1)
							and t.TInvoiceCode = '@strTInvoiceCode'
						;
						
					"
                    , "@strTInvoiceCode", strTInvoiceCode
                    );

                dtGen_Invoice_TempInvoice = _cf.db.ExecQuery(strSqlGetDB_Invoice_TempInvoice).Tables[0];
            }
            #endregion

            #region // Update Invoice_TempInvoice:
            {
                // Init:
                ArrayList alColumnEffective = new ArrayList();
                string strFN = "";
                DataRow drDB = dtDB_Invoice_TempInvoice.Rows[0];
                double dblStartInvoiceNo = Convert.ToDouble(dtGen_Invoice_TempInvoice.Rows[0]["StartInvoiceNo"].ToString());
                double dblQtyUsed = Convert.ToDouble(dtGen_Invoice_TempInvoice.Rows[0]["QtyUsed"].ToString());
                //dblInvoiceNo = dblStartInvoiceNo + dblQtyUsed + 1;
                dblInvoiceNo = dblStartInvoiceNo + dblQtyUsed;
                dblQtyUsedNext = dblQtyUsed + 1;
                strInvoiceNo = string.Format("{0:0000000}", dblInvoiceNo); //  Convert.ToString(dblInvoiceNo);
                strFN = "LastInvoiceNo"; drDB[strFN] = strInvoiceNo; alColumnEffective.Add(strFN);
                strFN = "LastInvoiceDateUTC"; drDB[strFN] = strInvoiceDateUTC; alColumnEffective.Add(strFN);
                strFN = "QtyUsed"; drDB[strFN] = dblQtyUsedNext; alColumnEffective.Add(strFN);
                strFN = "LogLUDTimeUTC"; drDB[strFN] = dtimeSys.ToString("yyyy-MM-dd HH:mm:ss"); alColumnEffective.Add(strFN);
                strFN = "LogLUBy"; drDB[strFN] = strWAUserCode; alColumnEffective.Add(strFN);

                // Save:
                _cf.db.SaveData(
                    "Invoice_TempInvoice"
                    , dtDB_Invoice_TempInvoice
                    , alColumnEffective.ToArray()
                    );
            }
            #endregion

            #region //// SaveTemp Invoice_Invoice:
            {
                ////
                TUtils.CUtils.MyBuildDBDT_Common(
                    _cf.db
                    , "#input_Invoice_Invoice"
                    , TConst.BizMix.Default_DBColType // strDefaultType
                    , new object[]{
                        "InvoiceCode"
                        , "InvoiceNo"
                        , "InvoiceDateUTC"
                        , "InvoiceNoDTimeUTC"
                        , "InvoiceNoBy"
                        , "LogLUDTimeUTC"
                        , "LogLUBy"
                        }
                    , new object[]{
                        new object[]{
                            strInvoiceCode, // InvoiceCode
                			strInvoiceNo, // InvoiceNo
                			strInvoiceDateUTC, // InvoiceDateUTC
                            dtimeSys.ToString("yyyy-MM-dd HH:mm:ss"), // InvoiceNoDTimeUTC
                            strWAUserCode, // InvoiceNoBy
                            dtimeSys.ToString("yyyy-MM-dd HH:mm:ss"), // LogLUDTimeUTC
                            strWAUserCode, // LogLUBy
                			}
                        }
                    );

            }
            #endregion

            #region // SaveDB:
            {
                ////
                string zzB_Update_Invoice_Invoice_ClauseSet_zzE = @"
            	        t.LogLUDTimeUTC = f.LogLUDTimeUTC
            	        , t.LogLUBy = f.LogLUBy
            	        , t.InvoiceNoDTimeUTC = f.InvoiceNoDTimeUTC
            	        , t.InvoiceNoBy = f.InvoiceNoBy
            	        , t.InvoiceNo = f.InvoiceNo
            	        , t.InvoiceDateUTC = f.InvoiceDateUTC
            	        ";
                ////
                string zzB_Update_Invoice_Invoice_zzE = CmUtils.StringUtils.Replace(@"
            	        ---- Invoice_Invoice:
            	        update t
            	        set 
            		        zzB_Update_Invoice_Invoice_ClauseSet_zzE
            	        from Invoice_Invoice t --//[mylock]
            		        inner join #input_Invoice_Invoice f --//[mylock]
            			        on t.InvoiceCode = f.InvoiceCode
            	        where (1=1)
            	        ;
                    "
                    , "zzB_Update_Invoice_Invoice_ClauseSet_zzE", zzB_Update_Invoice_Invoice_ClauseSet_zzE
                    );
                ////
                string strSql_SaveOnDB = CmUtils.StringUtils.Replace(@"
            	        ----
            	        zzB_Update_Invoice_Invoice_zzE
                                        ----
                    "
                    , "zzB_Update_Invoice_Invoice_zzE", zzB_Update_Invoice_Invoice_zzE
                    );

                DataSet dsDB_Check = _cf.db.ExecQuery(
                    strSql_SaveOnDB
                    );
            }
            #endregion

            #region // Port Check1: StartInvoiceNo <= Số HD hiện tại <= EndInvoiceNo.
            {
                myCheck_Invoice_TempInvoice_InvoiceNo(
                    ref alParamsCoupleError // alParamsCoupleError
                    , dtimeSys // dtimeSys
                               ////
                    , strTInvoiceCode // strTInvoiceCode
                    );
            }
            #endregion

            #region // Port Check 2: Số HD là duy nhất trên hệ thống theo:  ( Mẫu số HĐ  + Ký hiệu HĐ + MST).
            {
                myCheck_Invoice_Invoice_InvoiceNo(
                    ref alParamsCoupleError // alParamsCoupleError
                    , dtimeSys // dtimeSys
                    );
            }
            #endregion

            #region // Invoice_license_TotalQtyUsed: ThomPTT.
            {
                Invoice_license_TotalQtyUsed(
                    ref alParamsCoupleError // alParamsCoupleError
                    , strMST // objMST
                    , dtimeSys // dtimeSys
                    , strWAUserCode // objUserCode
                    );
            }
            #endregion

            #region //// Clear for Debug:
            {
                ////
                string strSqlClearForDebug = CmUtils.StringUtils.Replace(@"
            	        ---- Clear for Debug:
            	        drop table #input_Invoice_Invoice;
            	        drop table #tbl_Mst_NNT_ViewAbility;

                    ");

                _cf.db.ExecQuery(
                    strSqlClearForDebug
                    );
                ////
            }
            #endregion
        }

        // Thực hiện kí và phát hành luôn, đồng thời cấp phát số.
        public DataSet WAS_Invoice_Invoice_AllocatedAndApprovedAndIssued(
          ref ArrayList alParamsCoupleError
          , RQ_Invoice_Invoice objRQ_Invoice_Invoice
          ////
          , out RT_Invoice_Invoice objRT_Invoice_Invoice
          )
        {
            #region // Temp:
            string strTid = objRQ_Invoice_Invoice.Tid;
            objRT_Invoice_Invoice = new RT_Invoice_Invoice();
            DataSet mdsResult = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            DateTime dtimeSys = DateTime.UtcNow;
            //DataSet mdsExec = null;
            //DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(objRQ_Invoice_Invoice.Tid);
            //int nTidSeq = 0;
            //bool bNeedTransaction = true;
            string strFunctionName = "WAS_Invoice_Invoice_AllocatedAndApprovedAndIssued";
            string strErrorCodeDefault = TError.ErridnInventory.WAS_Invoice_Invoice_AllocatedAndApprovedAndIssued;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
                });
            #endregion

            try
            {
                #region // Init:
                #endregion

                #region // Refine and Check Input:
                //List<Invoice_Invoice> lst_Invoice_Invoice = new List<Invoice_Invoice>();
                DataSet dsData = new DataSet();
                {
                    ////
                    if (objRQ_Invoice_Invoice.Lst_Email_BatchSendEmailTo == null)
                        objRQ_Invoice_Invoice.Lst_Email_BatchSendEmailTo = new List<Email_BatchSendEmailTo>();
                    {
                        DataTable dt_Email_BatchSendEmailTo = TUtils.DataTableCmUtils.ToDataTable<Email_BatchSendEmailTo>(objRQ_Invoice_Invoice.Lst_Email_BatchSendEmailTo, "Email_BatchSendEmailTo");
                        dsData.Tables.Add(dt_Email_BatchSendEmailTo);
                    }
                    ////
                    if (objRQ_Invoice_Invoice.Lst_Email_BatchSendEmailCC == null)
                        objRQ_Invoice_Invoice.Lst_Email_BatchSendEmailCC = new List<Email_BatchSendEmailCC>();
                    {
                        DataTable dt_Email_BatchSendEmailCC = TUtils.DataTableCmUtils.ToDataTable<Email_BatchSendEmailCC>(objRQ_Invoice_Invoice.Lst_Email_BatchSendEmailCC, "Email_BatchSendEmailCC");
                        dsData.Tables.Add(dt_Email_BatchSendEmailCC);

                    }
                    ////
                    if (objRQ_Invoice_Invoice.Lst_Email_BatchSendEmailBCC == null)
                        objRQ_Invoice_Invoice.Lst_Email_BatchSendEmailBCC = new List<Email_BatchSendEmailBCC>();
                    {
                        DataTable dt_Email_BatchSendEmailBCC = TUtils.DataTableCmUtils.ToDataTable<Email_BatchSendEmailBCC>(objRQ_Invoice_Invoice.Lst_Email_BatchSendEmailBCC, "Email_BatchSendEmailBCC");
                        dsData.Tables.Add(dt_Email_BatchSendEmailBCC);

                    }
                    ////
                    if (objRQ_Invoice_Invoice.Lst_Email_BatchSendEmailFileAttach == null)
                        objRQ_Invoice_Invoice.Lst_Email_BatchSendEmailFileAttach = new List<Email_BatchSendEmailFileAttach>();
                    {
                        DataTable dt_Email_BatchSendEmailFileAttach = TUtils.DataTableCmUtils.ToDataTable<Email_BatchSendEmailFileAttach>(objRQ_Invoice_Invoice.Lst_Email_BatchSendEmailFileAttach, "Email_BatchSendEmailFileAttach");
                        dsData.Tables.Add(dt_Email_BatchSendEmailFileAttach);

                    }
                    ////
                    if (objRQ_Invoice_Invoice.Email_BatchSendEmail == null)
                        objRQ_Invoice_Invoice.Email_BatchSendEmail = new Email_BatchSendEmail();
                }
                #endregion

                #region // Invoice_Invoice_AllocatedAndApprovedAndIssued:
                mdsResult = Invoice_Invoice_AllocatedAndApprovedAndIssued(
                    objRQ_Invoice_Invoice.Tid // strTid
                    , objRQ_Invoice_Invoice.GwUserCode // strGwUserCode
                    , objRQ_Invoice_Invoice.GwPassword // strGwPassword
                    , objRQ_Invoice_Invoice.WAUserCode // strUserCode
                    , objRQ_Invoice_Invoice.WAUserPassword // strUserPassword
                    , ref alParamsCoupleError // alParamsCoupleError
                                              ////
                    , objRQ_Invoice_Invoice.Invoice_Invoice.InvoiceCode // objInvoiceCode
                    , objRQ_Invoice_Invoice.Invoice_Invoice.InvoiceDateUTC // objInvoiceDateUTC 
                                                                           //, objRQ_Invoice_Invoice.Invoice_Invoice.InvoiceFileSpec // objInvoiceFileSpec
                    , objRQ_Invoice_Invoice.Invoice_Invoice.InvoiceFilePath // objInvoiceFilePath
                    , objRQ_Invoice_Invoice.Invoice_Invoice.InvoicePDFFilePath // objInvoicePDFFilePath
                    , objRQ_Invoice_Invoice.Invoice_Invoice.EmailSend // objEmailSend
                    , objRQ_Invoice_Invoice.Invoice_Invoice.Remark // objRemark
                                                                   ////
                    , objRQ_Invoice_Invoice.Email_BatchSendEmail.Subject // objSubject						 
                    , objRQ_Invoice_Invoice.Email_BatchSendEmail.BodyText // objBodyText
                    , objRQ_Invoice_Invoice.Email_BatchSendEmail.BodyHTML // objBodyHTML
                    , dsData // dsData
                    );
                #endregion

                // Return Good:
                return mdsResult;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsResult
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Write ReturnLog:
                //_cf.ProcessBizReturn(
                //	ref mdsResult // mdsFinal
                //	, strTid // strTid
                //	, strFunctionName // strFunctionName
                //	);
                #endregion
            }
        }

        public DataSet Invoice_Invoice_AllocatedAndApprovedAndIssued(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            ////
            , object objInvoiceCode
            , object objInvoiceDateUTC
            //, object objInvoiceFileSpec
            , object objInvoiceFilePath
            , object objInvoicePDFFilePath
            , object objEmailSend
            , object objRemark
            ////
            , object objSubject
            , object objBodyText
            , object objBodyHTML
            , DataSet dsData
            )
        {
            #region // Temp:
            DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            //int nTidSeq = 0;
            DateTime dtimeSys = DateTime.UtcNow;
            string strFunctionName = "Invoice_Invoice_AllocatedAndApprovedAndIssued";
            string strErrorCodeDefault = TError.ErridnInventory.Invoice_Invoice_AllocatedAndApprovedAndIssued;
            alParamsCoupleError.AddRange(new object[]{
                    "strFunctionName", strFunctionName
                    , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
			        ////
					, "objInvoiceCode", objInvoiceCode
                    , "objInvoiceDateUTC", objInvoiceDateUTC
                    , "objInvoiceFilePath", objInvoiceFilePath
                    , "objInvoicePDFFilePath", objInvoicePDFFilePath
                    , "objEmailSend", objEmailSend
                    , "objRemark", objRemark
                    ////
                    , "objSubject", objSubject
                    , "objBodyText", objBodyText
                    , "objBodyHTML", objBodyHTML
                    });
            #endregion

            try
            {
                #region // Init:
                //_cf.db.LogUserId = _cf.sinf.strUserCode;
                _cf.db.BeginTransaction();

                // Write RequestLog:
                _cf.ProcessBizReq_OutSide(
                    strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    , alParamsCoupleError // alParamsCoupleError
                    );

                // Sys_User_CheckAuthentication:
                //Sys_User_CheckAuthentication(
                //    ref alParamsCoupleError
                //    , strWAUserCode
                //    , strWAUserPassword
                //    );

                // Check Access/Deny:
                Sys_Access_CheckDenyV30(
                    ref alParamsCoupleError
                    , strWAUserCode
                    , strFunctionName
                    );
                #endregion

                #region // Invoice_Invoice_AllocatedInvX:
                //DataSet dsGetData = null;
                {
                    Invoice_Invoice_AllocatedInvX(
                        strTid // strTid
                        , strGwUserCode // strGwUserCode
                        , strGwPassword // strGwPassword
                        , strWAUserCode // strWAUserCode
                        , strWAUserPassword // strWAUserPassword
                        , ref alParamsCoupleError // alParamsCoupleError
                        , dtimeSys // dtimeSys
                                   ////
                        , objInvoiceCode // objInvoiceCode
                        , objInvoiceDateUTC // objInvoiceDateUTC
                        );
                }
                ////
                //CmUtils.DataUtils.MoveDataTable(ref mdsFinal, ref dsGetData);
                #endregion

                #region // Invoice_Invoice_ApprovedX:
                //DataSet dsGetData = null;
                {
                    Invoice_Invoice_ApprovedX_New20190705(
                        strTid // strTid
                        , strGwUserCode // strGwUserCode
                        , strGwPassword // strGwPassword
                        , strWAUserCode // strWAUserCode
                        , strWAUserPassword // strWAUserPassword
                        , ref alParamsCoupleError // alParamsCoupleError
                        , dtimeSys // dtimeSys
                                   ////
                        , objInvoiceCode // objInvoiceCode
                                         //, objInvoiceFileSpec // objInvoiceFileSpec
                        , objInvoiceFilePath // objInvoiceFilePath
                        , objInvoicePDFFilePath // objInvoicePDFFilePath
                        , objRemark // objRemark
                        );
                }
                ////
                //CmUtils.DataUtils.MoveDataTable(ref mdsFinal, ref dsGetData);
                #endregion

                #region // Invoice_Invoice_IssuedX:
                //DataSet dsGetData = null;
                {
                    Invoice_Invoice_IssuedX_New20190705(
                        strTid // strTid
                        , strGwUserCode // strGwUserCode
                        , strGwPassword // strGwPassword
                        , strWAUserCode // strWAUserCode
                        , strWAUserPassword // strWAUserPassword
                        , ref alParamsCoupleError // alParamsCoupleError
                        , dtimeSys // dtimeSys
                                   ////
                        , objInvoiceCode // objInvoiceCode
                        , objEmailSend // objEmailSend
                        , objRemark // objRemark
                        );
                }
                ////
                //CmUtils.DataUtils.MoveDataTable(ref mdsFinal, ref dsGetData);
                #endregion

                #region // Email_BatchSendEmail_SaveAndSendX:
                {
                    Email_BatchSendEmail_SaveAndSendX(
                    strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // strWAUserCode
                    , strWAUserPassword // strWAUserPassword
                    , ref alParamsCoupleError // alParamsCoupleError
                    , dtimeSys // dtimeSys
                               ////
                    , objSubject // objSubject
                    , objBodyText // objBodyText
                    , objBodyHTML // objBodyHTML
                    , dsData // dsData
                    );
                }
                #endregion

                // Return Good:
                TDALUtils.DBUtils.CommitSafety(_cf.db);
                mdsFinal.AcceptChanges();
                return mdsFinal;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Rollback:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);

                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsFinal
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Rollback and Release resources:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);
                TDALUtils.DBUtils.ReleaseAllSemaphore(_cf.db_Sys, true);

                // Write ReturnLog:
                _cf.ProcessBizReturn_OutSide(
                    ref mdsFinal // mdsFinal
                    , strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    );
                #endregion
            }
        }
        public void Invoice_Invoice_GetX(
            ref ArrayList alParamsCoupleError
            , DateTime dtimeTDateTime
            , string strTid
            , string strWAUserCode
            ////
            //// Filter:
            , string strFt_RecordStart
            , string strFt_RecordCount
            , string strFt_WhereClause
            //// Return:
            , string strRt_Cols_Invoice_Invoice
            , string strRt_Cols_Invoice_InvoiceDtl
            , string strRt_Cols_Invoice_InvoicePrd
            , string strRt_Cols_Invoice_InvoiceVAT
            ////
            , out DataSet dsGetData
            )
        {
            #region // Temp:
            string strFunctionName = "Invoice_Invoice_GetX";
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName // FunctionName
				, "dtimeTDateTime", dtimeTDateTime // dtimeTDateTime
                ////
				, "strFt_RecordStart", strFt_RecordStart // strFt_RecordStart
				, "strFt_RecordCount", strFt_RecordCount // strFt_RecordCount
				, "strFt_WhereClause", strFt_WhereClause // strFt_WhereClause
                ////
                , "strRt_Cols_Invoice_Invoice", strRt_Cols_Invoice_Invoice // strRt_Cols_Invoice_Invoice
                , "strRt_Cols_Invoice_InvoiceDtl", strRt_Cols_Invoice_InvoiceDtl // strRt_Cols_Invoice_InvoiceDtl
                , "strRt_Cols_Invoice_InvoicePrd", strRt_Cols_Invoice_InvoicePrd // strRt_Cols_Invoice_InvoicePrd
                , "strRt_Cols_Invoice_InvoiceVAT", strRt_Cols_Invoice_InvoiceVAT // strRt_Cols_Invoice_InvoiceVAT
                });
            #endregion

            #region // Check:
            //// Refine:
            long nFilterRecordStart = Convert.ToInt64(strFt_RecordStart);
            long nFilterRecordEnd = nFilterRecordStart + Convert.ToInt64(strFt_RecordCount) - 1;
            bool bGet_Invoice_Invoice = (strRt_Cols_Invoice_Invoice != null && strRt_Cols_Invoice_Invoice.Length > 0);
            bool bGet_Invoice_InvoiceDtl = (strRt_Cols_Invoice_InvoiceDtl != null && strRt_Cols_Invoice_InvoiceDtl.Length > 0);
            bool bGet_Invoice_InvoicePrd = (strRt_Cols_Invoice_InvoicePrd != null && strRt_Cols_Invoice_InvoicePrd.Length > 0);
            bool bGet_Invoice_InvoiceVAT = (strRt_Cols_Invoice_InvoiceVAT != null && strRt_Cols_Invoice_InvoiceVAT.Length > 0);

            //// drAbilityOfUser:
            //DataRow drAbilityOfUser = myCache_ViewAbility_GetUserInfo(strWAUserCode);

            #endregion

            #region // Build Sql:
            ////
            ArrayList alParamsCoupleSql = new ArrayList();
            alParamsCoupleSql.AddRange(new object[] {
                    "@nFilterRecordStart", nFilterRecordStart
                    , "@nFilterRecordEnd", nFilterRecordEnd
                    });
            ////		
            // drAbilityOfUser:
            DataRow drAbilityOfUser = Sys_User_GetAbilityViewOfUser(strWAUserCode);
            zzzzClauseSelect_Mst_NNT_ViewAbility_Get(
                drAbilityOfUser // drAbilityOfUser
                , ref alParamsCoupleError // alParamsCoupleError
                );
            string strSqlGetData = CmUtils.StringUtils.Replace(@"
						---- #tbl_Invoice_Invoice_Filter_Draft:
						select distinct
							identity(bigint, 0, 1) MyIdxSeq
							, ii.InvoiceCode
							, ii.CreateDTimeUTC
						into #tbl_Invoice_Invoice_Filter_Draft
						from Invoice_Invoice ii --//[mylock]
                            inner join #tbl_Mst_NNT_ViewAbility t_MstNNT_View --//[mylock]
                                on ii.MST = t_MstNNT_View.MST
							left join Mst_PaymentMethods mpm --//[mylock]
								on ii.PaymentMethodCode = mpm.PaymentMethodCode
							left join Mst_CustomerNNT mcnnt --//[mylock]
								on ii.CustomerNNTCode = mcnnt.CustomerNNTCode
									and ii.MST = mcnnt.MST
							left join Invoice_TempInvoice iti --//[mylock]
								on ii.TInvoiceCode = iti.TInvoiceCode
	                        left join Mst_SourceInvoice msi --//[mylock]
		                        on ii.SourceInvoiceCode = msi.SourceInvoiceCode
						where (1=1)
							zzB_Where_strFilter_zzE
						order by ii.CreateDTimeUTC desc
						;

						---- Summary:
						select Count(0) MyCount from #tbl_Invoice_Invoice_Filter_Draft t --//[mylock]
						;

						---- #tbl_Invoice_Invoice_Filter:
						select
							t.*
						into #tbl_Invoice_Invoice_Filter
						from #tbl_Invoice_Invoice_Filter_Draft t --//[mylock]
						where
							(t.MyIdxSeq >= @nFilterRecordStart)
							and (t.MyIdxSeq <= @nFilterRecordEnd)
						;

						-------- Invoice_Invoice ------:
						zzB_Select_Invoice_Invoice_zzE
						--------------------------------

						-------- Invoice_InvoiceDtl ------:
						zzB_Select_Invoice_InvoiceDtl_zzE
						-----------------------------------

						-------- Invoice_InvoicePrd ------:
						zzB_Select_Invoice_InvoicePrd_zzE
						-----------------------------------

						-------- Invoice_InvoiceVAT ------:
						zzB_Select_Invoice_InvoiceVAT_zzE
						-----------------------------------

						---- Clear for debug:
						--drop table #tbl_Invoice_Invoice_Filter_Draft;
						--drop table #tbl_Invoice_Invoice_Filter;
					"
                );
            ////
            string zzB_Select_Invoice_Invoice_zzE = "-- Nothing.";
            if (bGet_Invoice_Invoice)
            {
                #region // bGet_Invoice_Invoice:
                zzB_Select_Invoice_Invoice_zzE = CmUtils.StringUtils.Replace(@"
							---- Invoice_Invoice:
							select
								t.MyIdxSeq
								, ii.*
								----
								, mpm.PaymentMethodCode mpm_PaymentMethodCode
								, mpm.PaymentMethodName mpm_PaymentMethodName
								----
								, mcnnt.CustomerNNTCode mcnnt_CustomerNNTCode
								, mcnnt.CustomerNNTName mcnnt_CustomerNNTName
								, mcnnt.CustomerNNTAddress mcnnt_CustomerNNTAddress
								, mcnnt.CustomerNNTEmail mcnnt_CustomerNNTEmail
								, mcnnt.CustomerMST mcnnt_CustomerMST
								, mcnnt.ContactEmail mcnnt_ContactEmail
								----
								, iti.TInvoiceCode iti_TInvoiceCode
								, iti.TInvoiceName iti_TInvoiceName
								, iti.LogoFilePath iti_LogoFilePath
								, iti.WatermarkFilePath iti_WatermarkFilePath
								, iti.InvoiceTGroupCode iti_InvoiceTGroupCode
								, iti.InvoiceType iti_InvoiceType
								, iti.Sign iti_Sign
								, iti.FormNo iti_FormNo
                                ----
	                            , msi.SourceInvoiceCode msi_SourceInvoiceCode
	                            , msi.SourceInvoiceName msi_SourceInvoiceName
                                ----
	                            , itg.InvoiceTGroupCode itg_InvoiceTGroupCode
	                            , itg.Spec_Prd_Type itg_Spec_Prd_Type
							from #tbl_Invoice_Invoice_Filter t --//[mylock]
								inner join Invoice_Invoice ii --//[mylock]
									on t.InvoiceCode = ii.InvoiceCode
								left join Mst_PaymentMethods mpm --//[mylock]
									on ii.PaymentMethodCode = mpm.PaymentMethodCode
								left join Mst_CustomerNNT mcnnt --//[mylock]
									on ii.CustomerNNTCode = mcnnt.CustomerNNTCode
										and ii.MST = mcnnt.MST
								left join Invoice_TempInvoice iti --//[mylock]
									on ii.TInvoiceCode = iti.TInvoiceCode
	                            left join Mst_SourceInvoice msi --//[mylock]
		                            on ii.SourceInvoiceCode = msi.SourceInvoiceCode
								left join Invoice_TempGroup itg --//[mylock]
									on iti.InvoiceTGroupCode = itg.InvoiceTGroupCode
							order by t.MyIdxSeq asc
							;
						"
                    );
                #endregion
            }
            ////
            string zzB_Select_Invoice_InvoiceVAT_zzE = "-- Nothing.";
            if (bGet_Invoice_InvoiceVAT)
            {
                #region // bGet_Invoice_InvoiceVAT:
                zzB_Select_Invoice_InvoiceVAT_zzE = CmUtils.StringUtils.Replace(@"							
							--- Invoice_InvoiceVAT:
							select 
								t.InvoiceCode
								, t.VATRateCode
								, t.VATRate
								, sum (t.Qty * t.UnitPrice) TotalValInvoice
								, sum (t.Qty * t.UnitPrice * t.VATRate/100) TotalValVAT
								, sum(t.Qty * t.UnitPrice + t.Qty * t.UnitPrice * t.VATRate/100) TotalValPmt
							from Invoice_InvoicePrd t --//[mylock]
								inner join #tbl_Invoice_Invoice_Filter ii --//[mylock]
									on t.InvoiceCode = ii.InvoiceCode
							where(1=1)
							group by
								t.InvoiceCode
								, t.VATRateCode
								, t.VATRate
							union  
							select 
								t.InvoiceCode
								, t.VATRateCode
								, t.VATRate
								, sum (t.Qty * t.UnitPrice) TotalValInvoice
								, sum (t.Qty * t.UnitPrice * t.VATRate/100) TotalValVAT
								, sum(t.Qty * t.UnitPrice + t.Qty * t.UnitPrice * t.VATRate/100) TotalValPmt
							from Invoice_InvoiceDtl t --//[mylock]
								inner join #tbl_Invoice_Invoice_Filter ii --//[mylock]
									on t.InvoiceCode = ii.InvoiceCode
							where(1=1)
							group by
								t.InvoiceCode
								, t.VATRateCode
								, t.VATRate
							;
						"
                    );
                #endregion
            }
            ////
            string zzB_Select_Invoice_InvoiceDtl_zzE = "-- Nothing.";

            if (bGet_Invoice_InvoiceDtl)
            {
                #region // bGet_Invoice_InvoiceDtl:
                zzB_Select_Invoice_InvoiceDtl_zzE = CmUtils.StringUtils.Replace(@"
							---- Invoice_InvoiceDtl:
							select
								t.MyIdxSeq
								, iidt.*
							from #tbl_Invoice_Invoice_Filter t --//[mylock]
								inner join Invoice_Invoice ii --//[mylock]
									on t.InvoiceCode = ii.InvoiceCode
								inner join Invoice_InvoiceDtl iidt --//[mylock]
									on t.InvoiceCode = iidt.InvoiceCode
							order by t.MyIdxSeq asc
							;
						"
                    );
                #endregion
            }
            ////
            string zzB_Select_Invoice_InvoicePrd_zzE = "-- Nothing.";

            if (bGet_Invoice_InvoicePrd)
            {
                #region // bGet_Invoice_InvoicePrd:
                zzB_Select_Invoice_InvoicePrd_zzE = CmUtils.StringUtils.Replace(@"
							---- Invoice_InvoicePrd:
							select
								t.MyIdxSeq
								, iiprd.*
							from #tbl_Invoice_Invoice_Filter t --//[mylock]
								inner join Invoice_Invoice ii --//[mylock]
									on t.InvoiceCode = ii.InvoiceCode
								inner join Invoice_InvoicePrd iiprd --//[mylock]
									on t.InvoiceCode = iiprd.InvoiceCode
							order by t.MyIdxSeq asc
							;
						"
                    );
                #endregion
            }
            ////
            string zzB_Where_strFilter_zzE = "";
            {
                Hashtable htSpCols = new Hashtable();
                {
                    #region // htSpCols:
                    ////
                    TUtils.CUtils.MyBuildHTSupportedColumns(
                        _cf.db // db
                        , ref htSpCols // htSupportedColumns
                        , "Invoice_Invoice" // strTableNameDB
                        , "Invoice_Invoice." // strPrefixStd
                        , "ii." // strPrefixAlias
                        );
                    ////
                    TUtils.CUtils.MyBuildHTSupportedColumns(
                        _cf.db // db
                        , ref htSpCols // htSupportedColumns
                        , "Mst_CustomerNNT" // strTableNameDB
                        , "Mst_CustomerNNT." // strPrefixStd
                        , "mcnnt." // strPrefixAlias
                        );
                    ////
                    TUtils.CUtils.MyBuildHTSupportedColumns(
                        _cf.db // db
                        , ref htSpCols // htSupportedColumns
                        , "Invoice_TempInvoice" // strTableNameDB
                        , "Invoice_TempInvoice." // strPrefixStd
                        , "iti." // strPrefixAlias
                        );
                    ////
                    #endregion
                }
                zzB_Where_strFilter_zzE = CmUtils.SqlUtils.BuildWhere(
                    htSpCols // htSpCols
                    , strFt_WhereClause // strClause
                    , "@p_" // strParamPrefix
                    , ref alParamsCoupleSql // alParamsCoupleSql
                    );
                zzB_Where_strFilter_zzE = (zzB_Where_strFilter_zzE.Length <= 0 ? "" : string.Format(" and ({0})", zzB_Where_strFilter_zzE));
                alParamsCoupleError.AddRange(new object[]{
                        "zzB_Where_strFilter_zzE", zzB_Where_strFilter_zzE
                        });
            }
            ////
            strSqlGetData = CmUtils.StringUtils.Replace(
                strSqlGetData
                , "zzB_Where_strFilter_zzE", zzB_Where_strFilter_zzE
                , "zzB_Select_Invoice_Invoice_zzE", zzB_Select_Invoice_Invoice_zzE
                , "zzB_Select_Invoice_InvoiceDtl_zzE", zzB_Select_Invoice_InvoiceDtl_zzE
                , "zzB_Select_Invoice_InvoicePrd_zzE", zzB_Select_Invoice_InvoicePrd_zzE
                , "zzB_Select_Invoice_InvoiceVAT_zzE", zzB_Select_Invoice_InvoiceVAT_zzE
                );
            #endregion

            #region // Get Data:
            dsGetData = _cf.db.ExecQuery(
                strSqlGetData
                , alParamsCoupleSql.ToArray()
                );
            int nIdxTable = 0;
            dsGetData.Tables[nIdxTable++].TableName = "MySummaryTable";
            if (bGet_Invoice_Invoice)
            {
                dsGetData.Tables[nIdxTable++].TableName = "Invoice_Invoice";
            }
            if (bGet_Invoice_InvoiceDtl)
            {
                dsGetData.Tables[nIdxTable++].TableName = "Invoice_InvoiceDtl";
            }
            if (bGet_Invoice_InvoicePrd)
            {
                dsGetData.Tables[nIdxTable++].TableName = "Invoice_InvoicePrd";
            }
            if (bGet_Invoice_InvoiceVAT)
            {
                dsGetData.Tables[nIdxTable++].TableName = "Invoice_InvoiceVAT";
            }
            #endregion

            #region // Get Mst_Spec:
            DataTable dt_ListSpecCode = new DataTable();
            DataSet dsGetData_Mst_Spec = new DataSet();
            DataTable dt_Invoice_InvoiceDtl = new DataTable();
            if (bGet_Invoice_InvoiceDtl
                && dsGetData.Tables["Invoice_InvoiceDtl"].Rows.Count > 0)
            {
                #region // Invoice_InvoiceDtl:
                {
                    // Upload:
                    TUtils.CUtils.MyBuildDBDT_Common(
                        _cf.db // db
                            , "#input_Invoice_InvoiceDtl" // strTableName
                            , new object[] {
                                    "InvoiceCode", TConst.BizMix.Default_DBColType
                                    , "SpecCode", TConst.BizMix.Default_DBColType
                                    , "NetworkID", TConst.BizMix.Default_DBColType
                                    , "VATRateCode", TConst.BizMix.Default_DBColType
                                    , "VATRate", "float"
                                    , "UnitCode", TConst.BizMix.Default_DBColType
                                    , "UnitPrice", TConst.BizMix.Default_DBColType
                                    , "Qty", "float"
                                    , "InvoiceDtlStatus", TConst.BizMix.Default_DBColType
                                    , "LogLUDTimeUTC", TConst.BizMix.Default_DBColType
                                    , "LogLUBy", TConst.BizMix.Default_DBColType
                                } // arrSingleStructure
                            , dsGetData.Tables["Invoice_InvoiceDtl"] // dtData
                        );

                }
                #endregion

                #region  // Get Mst_Spec:
                DataTable dt_OS_PrdCenter_Mst_Spec = new DataTable();
                {
                    ////
                    string strSqlGetListSpecCode = CmUtils.StringUtils.Replace(@"
                                ---- #tbl_Mst_Spec_Filter:
                                select distinct
	                                t.SpecCode
									, mnnt.OrgID
                                into #tbl_Mst_Spec_Filter
                                from #input_Invoice_InvoiceDtl t --//[mylock]
									inner join Invoice_Invoice ii --//[mylock]
										on t.InvoiceCode = ii.InvoiceCode
									inner join Mst_NNT mnnt --//[mylock]
										on ii.MST = mnnt.MST
                                where(1=1)
                                ;

                                --select t.* from  #tbl_Mst_Spec_Filter t;

                                --- Return:
                                select 
                                STUFF(( 
		                                SELECT ',' + f.SpecCode
		                                FROM #tbl_Mst_Spec_Filter f --//[mylock]
		                                WHERE(1=1)
		                                FOR
		                                XML PATH('')
		                                ), 1, 1, ''
                                    ) AS SpecCode							
                               ,  STUFF(( 
		                                SELECT ',' + f.OrgID
		                                FROM #tbl_Mst_Spec_Filter f --//[mylock]
		                                WHERE(1=1)
		                                FOR
		                                XML PATH('')
		                                ), 1, 1, ''
                                    ) AS OrgID
                                into #tbl_List
                                ;

                                select t.* from #tbl_List t --//[mylock]
                                where(1=1)
                                    and t.OrgID is not null
                                ;
                                --- Clear For Debug:
                                drop table #tbl_Mst_Spec_Filter;
                                drop table #tbl_List;						       
					        ");
                    DataSet ds = _cf.db.ExecQuery(
                        strSqlGetListSpecCode
                        );
                    dt_ListSpecCode = ds.Tables[0];
                    ////
                    if (dt_ListSpecCode.Rows.Count > 0)
                    {
                        #region // Refine and Check Input:
                        List<MySummaryTable> lst_MySummaryTable = new List<MySummaryTable>();
                        List<OS_PrdCenter_Mst_Spec> lst_Mst_Spec = new List<OS_PrdCenter_Mst_Spec>();
                        List<OS_PrdCenter_Mst_SpecImage> lst_Mst_SpecImage = new List<OS_PrdCenter_Mst_SpecImage>();
                        List<OS_PrdCenter_Mst_SpecFiles> lst_Mst_SpecFiles = new List<OS_PrdCenter_Mst_SpecFiles>();
                        ////
                        string strRt_Cols_Mst_Spec = "*";
                        string strRt_Cols_Mst_SpecImage = "";
                        string strRt_Cols_Mst_SpecFiles = "";
                        ////
                        bool bGet_Mst_Spec = (strRt_Cols_Mst_Spec != null && strRt_Cols_Mst_Spec.Length > 0);
                        bool bGet_Mst_SpecImage = (strRt_Cols_Mst_SpecImage != null && strRt_Cols_Mst_SpecImage.Length > 0);
                        bool bGet_Mst_SpecFiles = (strRt_Cols_Mst_SpecFiles != null && strRt_Cols_Mst_SpecFiles.Length > 0);
                        ////
                        string strFt_WhereClause_MstSpec = ""; //
                        if (dt_ListSpecCode.Rows.Count > 0)
                        {
                            string strListSpecCode = dt_ListSpecCode.Rows[0]["SpecCode"].ToString().Trim();
                            string strListOrgID = dt_ListSpecCode.Rows[0]["OrgID"].ToString().Trim();

                            strFt_WhereClause_MstSpec = string.Format("Mst_Spec.SpecCode in '{0}' and Mst_Spec.OrgID in '{1}'", strListSpecCode, strListOrgID);
                        }
                        //strFt_WhereClause_MstSpec = string.Format("Mst_Spec.SpecCode in '{0}' and Mst_Spec.OrgID in '{2}'", dt_ListSpecCode.Rows[0]["SpecCode"].ToString().Trim(), dt_ListSpecCode.Rows[0]["OrgID"].ToString().Trim());
                        #endregion

                        #region // Call Func:
                        RT_OS_PrdCenter_Mst_Spec objRT_OS_PrdCenter_Mst_Spec = null;
                        {
                            string strOrgID = TUtils.CUtils.StdParam(drAbilityOfUser["MNNTOrgID"]);
                            #region // WA_Mst_Spec_Get:
                            RQ_OS_PrdCenter_Mst_Spec objRQ_OS_PrdCenter_Mst_Spec = new RQ_OS_PrdCenter_Mst_Spec()
                            {
                                WAUserCode = strOS_ProductCentrer_WAUserCode,
                                WAUserPassword = strOS_ProductCentrer_WAUserPassword,
                                GwUserCode = strOS_ProductCentrer_GwUserCode,
                                GwPassword = strOS_ProductCentrer_GwPassword,
                                OrgID = "0",
                                Tid = strTid,
                                Rt_Cols_Mst_Spec = strRt_Cols_Mst_Spec,
                                Rt_Cols_Mst_SpecImage = strRt_Cols_Mst_SpecImage,
                                Rt_Cols_Mst_SpecFiles = strRt_Cols_Mst_SpecFiles,
                                Ft_RecordStart = strFt_RecordStart,
                                Ft_RecordCount = strFt_RecordCount,
                                Ft_WhereClause = strFt_WhereClause_MstSpec
                            };
                            ////
                            try
                            {
                                objRT_OS_PrdCenter_Mst_Spec = OS_PrdCenter_Mst_SpecService.Instance.WA_OS_PrdCenter_Mst_Spec_Get(objRQ_OS_PrdCenter_Mst_Spec);

                            }
                            catch (Exception cex)
                            {
                                TUtils.CProcessExc.BizShowException(
                                    ref alParamsCoupleError // alParamsCoupleError
                                    , cex // cex
                                    );

                                throw CmUtils.CMyException.Raise(
                                    TError.ErridnInventory.CmSys_InvalidOutSite
                                    , null
                                    , alParamsCoupleError.ToArray()
                                    );
                            }
                            ////
                            #endregion
                        }
                        #endregion

                        #region // GetData:
                        DataSet dsGetData_MstSpec = new DataSet();
                        {
                            ////
                            DataTable dt_MySummaryTable = new DataTable();
                            List<MySummaryTable> lstMySummaryTable = new List<MySummaryTable>();
                            lstMySummaryTable.Add(objRT_OS_PrdCenter_Mst_Spec.MySummaryTable);
                            dt_MySummaryTable = TUtils.DataTableCmUtils.ToDataTable<MySummaryTable>(lstMySummaryTable, "MySummaryTable");
                            dsGetData_MstSpec.Tables.Add(dt_MySummaryTable.Copy());

                            ////
                            if (bGet_Mst_Spec)
                            {
                                ////
                                DataTable dt_Mst_Spec = new DataTable();
                                dt_Mst_Spec = TUtils.DataTableCmUtils.ToDataTable<OS_PrdCenter_Mst_Spec>(objRT_OS_PrdCenter_Mst_Spec.Lst_Mst_Spec, "Mst_Spec");
                                dsGetData_MstSpec.Tables.Add(dt_Mst_Spec.Copy());
                                dt_OS_PrdCenter_Mst_Spec = dt_Mst_Spec;
                            }
                            ////
                            if (bGet_Mst_SpecImage)
                            {
                                //////
                                DataTable dt_Mst_SpecImage = new DataTable();
                                dt_Mst_SpecImage = TUtils.DataTableCmUtils.ToDataTable<OS_PrdCenter_Mst_SpecImage>(objRT_OS_PrdCenter_Mst_Spec.Lst_Mst_SpecImage, "Mst_SpecImage");
                                dsGetData_MstSpec.Tables.Add(dt_Mst_SpecImage.Copy());
                            }
                            ////
                            if (bGet_Mst_SpecFiles)
                            {
                                //////
                                DataTable dt_Mst_SpecFiles = new DataTable();
                                dt_Mst_SpecFiles = TUtils.DataTableCmUtils.ToDataTable<OS_PrdCenter_Mst_SpecFiles>(objRT_OS_PrdCenter_Mst_Spec.Lst_Mst_SpecFiles, "Mst_SpecFiles");
                                dsGetData_MstSpec.Tables.Add(dt_Mst_SpecFiles.Copy());
                            }
                        }
                        ////
                        #endregion
                    }

                }
                #endregion

                #region // Get input_Mst_Spec:
                if (dt_OS_PrdCenter_Mst_Spec.Rows.Count > 0)
                {
                    #region //// SaveTemp Mst_SpecFiles:
                    {
                        TUtils.CUtils.MyBuildDBDT_Common(
                            _cf.db
                            , "#input_Mst_Spec"
                            , new object[]{
                                    "OrgID", TConst.BizMix.Default_DBColType,
                                    "SpecCode", TConst.BizMix.Default_DBColType,
                                    "NetworkID", TConst.BizMix.Default_DBColType,
                                    "SpecName", TConst.BizMix.Default_DBColType,
                                    "SpecDesc", TConst.BizMix.Default_DBColType,
                                    "ModelCode", TConst.BizMix.Default_DBColType,
                                    "SpecType1", TConst.BizMix.Default_DBColType,
                                    "SpecType2", TConst.BizMix.Default_DBColType,
                                    "Color", TConst.BizMix.Default_DBColType,
                                    "FlagHasSerial", TConst.BizMix.Default_DBColType,
                                    "FlagHasLOT", TConst.BizMix.Default_DBColType,
                                    "DefaultUnitCode", TConst.BizMix.Default_DBColType,
                                    "StandardUnitCode", TConst.BizMix.Default_DBColType,
                                    "Remark", TConst.BizMix.Default_DBColType,
                                    "FlagActive", TConst.BizMix.Default_DBColType,
                                    "CustomField1", TConst.BizMix.Default_DBColType,
                                    "CustomField2", TConst.BizMix.Default_DBColType,
                                    "CustomField3", TConst.BizMix.Default_DBColType,
                                    "CustomField4", TConst.BizMix.Default_DBColType,
                                    "CustomField5", TConst.BizMix.Default_DBColType,
                                    "CustomField6", TConst.BizMix.Default_DBColType,
                                    "CustomField7", TConst.BizMix.Default_DBColType,
                                    "CustomField8", TConst.BizMix.Default_DBColType,
                                    "CustomField9", TConst.BizMix.Default_DBColType,
                                    "CustomField10", TConst.BizMix.Default_DBColType,
                                    "LogLUDTimeUTC", TConst.BizMix.Default_DBColType,
                                    "LogLUBy", TConst.BizMix.Default_DBColType,
                                }
                            , dt_OS_PrdCenter_Mst_Spec
                            );
                    }
                    #endregion

                    #region // bGet_Invoice_InvoiceDtl:
                    string zzB_Select_Invoice_InvoiceDtl_MapSpecName_zzE = "--- Nothing.";
                    zzB_Select_Invoice_InvoiceDtl_MapSpecName_zzE = CmUtils.StringUtils.Replace(@"
                                ---- Invoice_InvoiceDtl:
                                select
	                                iidt.*
	                                , ms.SpecCode ms_SpecCode
	                                , ms.SpecName ms_SpecName
                                from #input_Invoice_InvoiceDtl t --//[mylock]
	                                left join Invoice_InvoiceDtl iidt --//[mylock]
		                                on t.InvoiceCode = iidt.InvoiceCode
			                                and t.SpecCode = iidt.SpecCode
	                                left join #input_Mst_Spec ms --//[mylock]
		                                on t.SpecCode = ms.SpecCode
                                    left join Invoice_Invoice ii --//[mylock]
                                        on t.InvoiceCode = ii.InvoiceCode
                                    left join Mst_NNT mnnt --//[mylock]
                                        on ii.MST = mnnt.MST
                                where(1=1)
                                    and ms.OrgID = mnnt.OrgID
                                ;
						    "
                        );
                    ////

                    string strSqlGetData_Invoice_InvoiceDtl_MapSpecName = CmUtils.StringUtils.Replace(@"
						        -------- Invoice_InvoiceDtl ------:
						        zzB_Select_Invoice_InvoiceDtl_MapSpecName_zzE
						        ---------------------------------------------
                            "
                        );
                    ////
                    strSqlGetData_Invoice_InvoiceDtl_MapSpecName = CmUtils.StringUtils.Replace(
                        strSqlGetData_Invoice_InvoiceDtl_MapSpecName
                        , "zzB_Select_Invoice_InvoiceDtl_MapSpecName_zzE", zzB_Select_Invoice_InvoiceDtl_MapSpecName_zzE
                        );
                    ////
                    dsGetData_Mst_Spec = _cf.db.ExecQuery(
                        strSqlGetData_Invoice_InvoiceDtl_MapSpecName
                        , alParamsCoupleSql.ToArray()
                        );
                    ////
                    #endregion
                }
                #endregion

            }
            #endregion

            #region // Get Prd_ProductID:
            DataTable dt_ListProductID = new DataTable();
            DataSet dsGetData_Prd_ProductID = new DataSet();
            DataTable dt_Invoice_InvoicePrd = new DataTable();
            if (bGet_Invoice_InvoicePrd)
            {
                #region // Invoice_InvoicePrd:
                {
                    // Upload:
                    TUtils.CUtils.MyBuildDBDT_Common(
                        _cf.db // db
                            , "#input_Invoice_InvoicePrd" // strTableName
                            , new object[] {
                                    "InvoiceCode", TConst.BizMix.Default_DBColType
                                    , "ProductID", TConst.BizMix.Default_DBColType
                                    , "SpecCode", TConst.BizMix.Default_DBColType
                                    , "NetworkID", TConst.BizMix.Default_DBColType
                                    , "VATRateCode", TConst.BizMix.Default_DBColType
                                    , "VATRate", "float"
                                    , "UnitCode", TConst.BizMix.Default_DBColType
                                    , "UnitPrice", TConst.BizMix.Default_DBColType
                                    , "Qty", "float"
                                    , "InvoicePrdStatus", TConst.BizMix.Default_DBColType
                                    , "LogLUDTimeUTC", TConst.BizMix.Default_DBColType
                                    , "LogLUBy", TConst.BizMix.Default_DBColType
                                } // arrSingleStructure
                            , dsGetData.Tables["Invoice_InvoicePrd"] // dtData
                        );

                }
                #endregion

                #region  // Get Mst_Spec:
                DataTable dt_OS_PrdCenter_Prd_ProductID = new DataTable();
                {
                    ////
                    string strSqlGetListProductID = CmUtils.StringUtils.Replace(@"
                                ---- #tbl_Prd_ProductID_Filter:
                                select distinct
	                                t.ProductID
									, t.SpecCode
									, mnnt.OrgID
                                into #tbl_Prd_ProductID_Filter
                                from #input_Invoice_InvoicePrd t --//[mylock]
									inner join Invoice_Invoice ii --//[mylock]
										on t.InvoiceCode = ii.InvoiceCode
									inner join Mst_NNT mnnt --//[mylock]
										on ii.MST = mnnt.MST
                                where(1=1)
                                ;

                                --- Return:
                                select 
                                STUFF(( 
		                                SELECT ',' + f.SpecCode
		                                FROM #tbl_Prd_ProductID_Filter f --//[mylock]
		                                WHERE(1=1)
		                                FOR
		                                XML PATH('')
		                                ), 1, 1, ''
                                    ) AS SpecCode
								, 
                                STUFF(( 
		                                SELECT ',' + f.ProductID
		                                FROM #tbl_Prd_ProductID_Filter f --//[mylock]
		                                WHERE(1=1)
		                                FOR
		                                XML PATH('')
		                                ), 1, 1, ''
                                    ) AS ProductID									
                               ,  STUFF(( 
		                                SELECT ',' + f.OrgID
		                                FROM #tbl_Prd_ProductID_Filter f --//[mylock]
		                                WHERE(1=1)
		                                FOR
		                                XML PATH('')
		                                ), 1, 1, ''
                                    ) AS OrgID
                                into #tbl_List
                                ;

                                select t.* from #tbl_List t --//[mylock]
                                where(1=1)
                                    and t.OrgID is not null
                                ;
                                --- Clear For Debug:
                                drop table #tbl_Prd_ProductID_Filter;
                                drop table #tbl_List;					       
					        ");
                    dt_ListProductID = _cf.db.ExecQuery(
                        strSqlGetListProductID
                        ).Tables[0];
                    ////
                    if (dt_ListProductID.Rows.Count > 0)
                    {
                        #region // Refine and Check Input:
                        List<MySummaryTable> lst_MySummaryTable = new List<MySummaryTable>();
                        List<OS_PrdCenter_Prd_ProductID> lst_Mst_Spec = new List<OS_PrdCenter_Prd_ProductID>();
                        ////
                        string strRt_Cols_Prd_ProductID = "*";
                        ////
                        bool bGet_Prd_ProductID = (strRt_Cols_Prd_ProductID != null && strRt_Cols_Prd_ProductID.Length > 0);
                        ////
                        string strFt_WhereClause_MstSpec = "";
                        if (dt_ListProductID.Rows.Count > 0)
                            strFt_WhereClause_MstSpec = string.Format("Prd_ProductID.SpecCode in '{0}' and Prd_ProductID.ProductID in '{1}' and Prd_ProductID.OrgID in '{2}'", dt_ListProductID.Rows[0]["SpecCode"].ToString().Trim(), dt_ListProductID.Rows[0]["ProductID"].ToString().Trim(), dt_ListProductID.Rows[0]["OrgID"].ToString().Trim());
                        #endregion

                        #region // Call Func:
                        RT_OS_PrdCenter_Prd_ProductID objRT_OS_PrdCenter_Prd_ProductID = null;
                        {
                            string strOrgID = TUtils.CUtils.StdParam(drAbilityOfUser["MNNTOrgID"]);
                            #region // WA_Prd_ProductID_Get:
                            RQ_OS_PrdCenter_Prd_ProductID objRQ_OS_PrdCenter_Prd_ProductID = new RQ_OS_PrdCenter_Prd_ProductID()
                            {
                                WAUserCode = strOS_ProductCentrer_WAUserCode,
                                WAUserPassword = strOS_ProductCentrer_WAUserPassword,
                                GwUserCode = strOS_ProductCentrer_GwUserCode,
                                GwPassword = strOS_ProductCentrer_GwPassword,
                                OrgID = "0",
                                Tid = strTid,
                                Rt_Cols_Prd_ProductID = strRt_Cols_Prd_ProductID,
                                Ft_RecordStart = strFt_RecordStart,
                                Ft_RecordCount = strFt_RecordCount,
                                Ft_WhereClause = strFt_WhereClause_MstSpec
                            };
                            ////
                            try
                            {
                                objRT_OS_PrdCenter_Prd_ProductID = OS_PrdCenter_Prd_ProductIDService.Instance.WA_OS_PrdCenter_Prd_ProductID_Get(objRQ_OS_PrdCenter_Prd_ProductID);

                            }
                            catch (Exception cex)
                            {
                                TUtils.CProcessExc.BizShowException(
                                    ref alParamsCoupleError // alParamsCoupleError
                                    , cex // cex
                                    );

                                throw CmUtils.CMyException.Raise(
                                    TError.ErridnInventory.CmSys_InvalidOutSite
                                    , null
                                    , alParamsCoupleError.ToArray()
                                    );
                            }
                            ////
                            #endregion
                        }
                        #endregion

                        #region // GetData:
                        DataSet dsGetData_MstSpec = new DataSet();
                        {
                            ////
                            DataTable dt_MySummaryTable = new DataTable();
                            List<MySummaryTable> lstMySummaryTable = new List<MySummaryTable>();
                            lstMySummaryTable.Add(objRT_OS_PrdCenter_Prd_ProductID.MySummaryTable);
                            dt_MySummaryTable = TUtils.DataTableCmUtils.ToDataTable<MySummaryTable>(lstMySummaryTable, "MySummaryTable");
                            dsGetData_MstSpec.Tables.Add(dt_MySummaryTable.Copy());

                            ////
                            if (bGet_Prd_ProductID)
                            {
                                ////
                                DataTable dt_Prd_ProductID = new DataTable();
                                dt_Prd_ProductID = TUtils.DataTableCmUtils.ToDataTable<OS_PrdCenter_Prd_ProductID>(objRT_OS_PrdCenter_Prd_ProductID.Lst_Prd_ProductID, "Prd_ProductID");
                                dsGetData_MstSpec.Tables.Add(dt_Prd_ProductID.Copy());
                                dt_OS_PrdCenter_Prd_ProductID = dt_Prd_ProductID;
                            }
                            ////
                        }
                        ////
                        #endregion
                    }

                }
                #endregion

                #region // Get Prd_ProductID:
                if (dt_OS_PrdCenter_Prd_ProductID.Rows.Count > 0)
                {
                    #region //// SaveTemp Prd_ProductID:
                    {
                        TUtils.CUtils.MyBuildDBDT_Common(
                            _cf.db
                            , "#input_Prd_ProductID"
                            , new object[]{
                                    "OrgID", TConst.BizMix.Default_DBColType,
                                    "ProductID", TConst.BizMix.Default_DBColType,
                                    "SpecCode", TConst.BizMix.Default_DBColType,
                                    "PrdCustomFieldCode", TConst.BizMix.Default_DBColType,
                                    "ProductionDate", TConst.BizMix.Default_DBColType,
                                    "LOTNo", TConst.BizMix.Default_DBColType,
                                    "BuyDate", TConst.BizMix.Default_DBColType,
                                    "SecretNo", TConst.BizMix.Default_DBColType,
                                    "WarrantyStartDate", TConst.BizMix.Default_DBColType,
                                    "WarrantyExpiredDate", TConst.BizMix.Default_DBColType,
                                    "WarrantyDuration", TConst.BizMix.Default_DBColType,
                                    "RefNo1", TConst.BizMix.Default_DBColType,
                                    "RefBiz1", TConst.BizMix.Default_DBColType,
                                    "RefNo2", TConst.BizMix.Default_DBColType,
                                    "RefBiz2", TConst.BizMix.Default_DBColType,
                                    "RefNo3", TConst.BizMix.Default_DBColType,
                                    "RefBiz3", TConst.BizMix.Default_DBColType,
                                    "Buyer", TConst.BizMix.Default_DBColType,
                                    "ProductIDStatus", TConst.BizMix.Default_DBColType,
                                    "CustomField1", TConst.BizMix.Default_DBColType,
                                    "CustomField2", TConst.BizMix.Default_DBColType,
                                    "CustomField3", TConst.BizMix.Default_DBColType,
                                    "CustomField4", TConst.BizMix.Default_DBColType,
                                    "CustomField5", TConst.BizMix.Default_DBColType,
                                    "LogLUDTimeUTC", TConst.BizMix.Default_DBColType,
                                    "LogLUBy", TConst.BizMix.Default_DBColType,
                                    "ms_SpecCode", TConst.BizMix.Default_DBColType,
                                    "ms_SpecName", TConst.BizMix.Default_DBColType,
                                    "ms_SpecDesc", TConst.BizMix.Default_DBColType,
                                    "ppidc_PrdCustomFieldCode", TConst.BizMix.Default_DBColType,
                                    "ppidc_PrdCustomFieldName", TConst.BizMix.Default_DBColType,
                                    "mm_ModelCode", TConst.BizMix.Default_DBColType,
                                    "mb_BrandCode", TConst.BizMix.Default_DBColType,
                                    "mb_BrandName", TConst.BizMix.Default_DBColType,
                                    "msp_UnitCode", TConst.BizMix.Default_DBColType,
                                    //"msp_BuyPrice", TConst.BizMix.Default_DBColType,
                                    "ms_CustomField1", TConst.BizMix.Default_DBColType,
                                }
                            , dt_OS_PrdCenter_Prd_ProductID
                            );
                    }
                    #endregion

                    #region // bGet_Invoice_InvoicePrd:
                    string zzB_Select_Invoice_InvoicePrd_MapPrd_zzE = "--- Nothing.";
                    zzB_Select_Invoice_InvoicePrd_MapPrd_zzE = CmUtils.StringUtils.Replace(@"
							    ---- Invoice_InvoicePrd:
							    select
								    iiprd.*
								    -----
								    , ppid.ms_SpecCode ms_SpecCode
								    , ppid.ms_SpecName ms_SpecName
								    , ppid.ms_SpecDesc ms_SpecDesc
								    -----
								    , ppid.ppidc_PrdCustomFieldCode ppidc_PrdCustomFieldCode
								    , ppid.ppidc_PrdCustomFieldName ppidc_PrdCustomFieldName
								    , ppid.CustomField1 ppidc_CustomField1
								    , ppid.CustomField2 ppidc_CustomField2
								    , ppid.ProductionDate ppidc_ProductionDate
								    -----
								    , ppid.mm_ModelCode mm_ModelCode
								    -----
								    , ppid.mb_BrandCode mb_BrandCode
								    , ppid.mb_BrandName ms_BrandName
								    -----
								    , ppid.msp_UnitCode msp_UnitCode
								    --, ppid.msp_BuyPrice msp_BuyPrice
								    , ppid.CustomField2 ppid_CustomField2
								    , ppid.ms_CustomField1 ms_CustomField1
							    from #input_Invoice_InvoicePrd t --//[mylock]
								    left join Invoice_InvoicePrd iiprd --//[mylock]
									    on t.InvoiceCode = iiprd.InvoiceCode
									        and t.ProductID = iiprd.ProductID
									        and t.SpecCode = iiprd.SpecCode
								    left join #input_Prd_ProductID ppid --//[mylock]
									    on t.ProductID = ppid.ProductID
									        and t.SpecCode = ppid.SpecCode
                                    left join Invoice_Invoice ii --//[mylock]
                                        on t.InvoiceCode = ii.InvoiceCode
                                    left join Mst_NNT mnnt --//[mylock]
                                        on ii.MST = mnnt.MST
                                where(1=1)
                                    and ppid.OrgID = mnnt.OrgID
							    ;
						    "
                        );
                    ////

                    string strSqlGetData_Invoice_InvoicePrd_MapPrd = CmUtils.StringUtils.Replace(@"
						        -------- Invoice_InvoicePrd -----------:
						        zzB_Select_Invoice_InvoicePrd_MapPrd_zzE
						        ----------------------------------------
                            "
                        );
                    ////
                    strSqlGetData_Invoice_InvoicePrd_MapPrd = CmUtils.StringUtils.Replace(
                        zzB_Select_Invoice_InvoicePrd_MapPrd_zzE
                        , "zzB_Select_Invoice_InvoicePrd_MapPrd_zzE", zzB_Select_Invoice_InvoicePrd_MapPrd_zzE
                        );
                    ////
                    dsGetData_Prd_ProductID = _cf.db.ExecQuery(
                        strSqlGetData_Invoice_InvoicePrd_MapPrd
                        , alParamsCoupleSql.ToArray()
                        );
                    ////
                    #endregion
                }
                #endregion

            }
            #endregion

            #region // Get Data:
            DataSet dsReturn = new DataSet();
            dsReturn.Tables.Add(dsGetData.Tables["MySummaryTable"].Copy());
            //dsGetData.Tables[nIdxTable++].TableName = "MySummaryTable";
            if (bGet_Invoice_Invoice)
            {
                dsReturn.Tables.Add(dsGetData.Tables["Invoice_Invoice"].Copy());
            }
            if (bGet_Invoice_InvoiceDtl)
            {
                if (dsGetData_Mst_Spec.Tables.Count > 0)
                {
                    /////
                    DataTable dt_Invoice_InvoiceDtl_MapSpec = dsGetData_Mst_Spec.Tables[0];
                    /////
                    dt_Invoice_InvoiceDtl_MapSpec.TableName = "Invoice_InvoiceDtl";
                    dsReturn.Tables.Add(dt_Invoice_InvoiceDtl_MapSpec.Copy());
                    ////
                }
                else
                {
                    dsReturn.Tables.Add(dsGetData.Tables["Invoice_InvoiceDtl"].Copy());
                }
            }
            if (bGet_Invoice_InvoicePrd)
            {
                if (dsGetData_Prd_ProductID.Tables.Count > 0)
                {
                    /////
                    DataTable dt_Invoice_InvoicePrd_MapPrd = dsGetData_Prd_ProductID.Tables[0];
                    /////
                    dt_Invoice_InvoicePrd_MapPrd.TableName = "Invoice_InvoicePrd";
                    dsReturn.Tables.Add(dt_Invoice_InvoicePrd_MapPrd.Copy());
                    ////
                }
                else
                {
                    dsReturn.Tables.Add(dsGetData.Tables["Invoice_InvoicePrd"].Copy());
                }
            }
            dsGetData = dsReturn;
            #endregion
        }
        public void Invoice_Invoice_GetX_New20190705(
            ref ArrayList alParamsCoupleError
            , DateTime dtimeTDateTime
            , string strTid
            , string strWAUserCode
            ////
            //// Filter:
            , string strFt_RecordStart
            , string strFt_RecordCount
            , string strFt_WhereClause
            //// Return:
            , string strRt_Cols_Invoice_Invoice
            , string strRt_Cols_Invoice_InvoiceDtl
            //, string strRt_Cols_Invoice_InvoicePrd
            //, string strRt_Cols_Invoice_InvoiceVAT
            ////
            , out DataSet dsGetData
            )
        {
            #region // Temp:
            string strFunctionName = "Invoice_Invoice_GetX";
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName // FunctionName
				, "dtimeTDateTime", dtimeTDateTime // dtimeTDateTime
                ////
				, "strFt_RecordStart", strFt_RecordStart // strFt_RecordStart
				, "strFt_RecordCount", strFt_RecordCount // strFt_RecordCount
				, "strFt_WhereClause", strFt_WhereClause // strFt_WhereClause
                ////
                , "strRt_Cols_Invoice_Invoice", strRt_Cols_Invoice_Invoice // strRt_Cols_Invoice_Invoice
                , "strRt_Cols_Invoice_InvoiceDtl", strRt_Cols_Invoice_InvoiceDtl // strRt_Cols_Invoice_InvoiceDtl
                //, "strRt_Cols_Invoice_InvoicePrd", strRt_Cols_Invoice_InvoicePrd // strRt_Cols_Invoice_InvoicePrd
                //, "strRt_Cols_Invoice_InvoiceVAT", strRt_Cols_Invoice_InvoiceVAT // strRt_Cols_Invoice_InvoiceVAT
                });
            #endregion

            #region // Check:
            //// Refine:
            long nFilterRecordStart = Convert.ToInt64(strFt_RecordStart);
            long nFilterRecordEnd = nFilterRecordStart + Convert.ToInt64(strFt_RecordCount) - 1;
            bool bGet_Invoice_Invoice = (strRt_Cols_Invoice_Invoice != null && strRt_Cols_Invoice_Invoice.Length > 0);
            bool bGet_Invoice_InvoiceDtl = (strRt_Cols_Invoice_InvoiceDtl != null && strRt_Cols_Invoice_InvoiceDtl.Length > 0);
            //bool bGet_Invoice_InvoicePrd = (strRt_Cols_Invoice_InvoicePrd != null && strRt_Cols_Invoice_InvoicePrd.Length > 0);
            //bool bGet_Invoice_InvoiceVAT = (strRt_Cols_Invoice_InvoiceVAT != null && strRt_Cols_Invoice_InvoiceVAT.Length > 0);

            //// drAbilityOfUser:
            //DataRow drAbilityOfUser = myCache_ViewAbility_GetUserInfo(strWAUserCode);

            #endregion

            #region // Build Sql:
            ////
            ArrayList alParamsCoupleSql = new ArrayList();
            alParamsCoupleSql.AddRange(new object[] {
                    "@nFilterRecordStart", nFilterRecordStart
                    , "@nFilterRecordEnd", nFilterRecordEnd
                    });
            ////		
            // drAbilityOfUser:
            DataRow drAbilityOfUser = Sys_User_GetAbilityViewOfUser(strWAUserCode);
            zzzzClauseSelect_Mst_NNT_ViewAbility_Get(
                drAbilityOfUser // drAbilityOfUser
                , ref alParamsCoupleError // alParamsCoupleError
                );
            string strSqlGetData = CmUtils.StringUtils.Replace(@"
						---- #tbl_Invoice_Invoice_Filter_Draft:
						select distinct
							identity(bigint, 0, 1) MyIdxSeq
							, ii.InvoiceCode
							, ii.CreateDTimeUTC
						into #tbl_Invoice_Invoice_Filter_Draft
						from Invoice_Invoice ii --//[mylock]
                            inner join #tbl_Mst_NNT_ViewAbility t_MstNNT_View --//[mylock]
                                on ii.MST = t_MstNNT_View.MST
							left join Mst_PaymentMethods mpm --//[mylock]
								on ii.PaymentMethodCode = mpm.PaymentMethodCode
							left join Mst_CustomerNNT mcnnt --//[mylock]
								on ii.CustomerNNTCode = mcnnt.CustomerNNTCode
									and ii.MST = mcnnt.MST
							left join Invoice_TempInvoice iti --//[mylock]
								on ii.TInvoiceCode = iti.TInvoiceCode
	                        left join Mst_SourceInvoice msi --//[mylock]
		                        on ii.SourceInvoiceCode = msi.SourceInvoiceCode
						where (1=1)
							zzB_Where_strFilter_zzE
						order by ii.CreateDTimeUTC desc
						;

						---- Summary:
						select Count(0) MyCount from #tbl_Invoice_Invoice_Filter_Draft t --//[mylock]
						;

						---- #tbl_Invoice_Invoice_Filter:
						select
							t.*
						into #tbl_Invoice_Invoice_Filter
						from #tbl_Invoice_Invoice_Filter_Draft t --//[mylock]
						where
							(t.MyIdxSeq >= @nFilterRecordStart)
							and (t.MyIdxSeq <= @nFilterRecordEnd)
						;

						-------- Invoice_Invoice ------:
						zzB_Select_Invoice_Invoice_zzE
						--------------------------------

						-------- Invoice_InvoiceDtl ------:
						zzB_Select_Invoice_InvoiceDtl_zzE
						-----------------------------------

						---- Clear for debug:
						--drop table #tbl_Invoice_Invoice_Filter_Draft;
						--drop table #tbl_Invoice_Invoice_Filter;
					"
                );
            ////
            string zzB_Select_Invoice_Invoice_zzE = "-- Nothing.";
            if (bGet_Invoice_Invoice)
            {
                #region // bGet_Invoice_Invoice:
                zzB_Select_Invoice_Invoice_zzE = CmUtils.StringUtils.Replace(@"
							--- #tbl_VATRAT:
							select 
								t.InvoiceCode
								, (
									select top 1
										f.VATRateCode
									from Invoice_InvoiceDtl f --//[mylock]
									where(1=1)
										and f.InvoiceCode = t.InvoiceCode
								) VATRateCode
								, (
									select top 1
										f.VATRate
									from Invoice_InvoiceDtl f --//[mylock]
									where(1=1)
										and f.InvoiceCode = t.InvoiceCode
								) VATRate
							into #tbl_VATRAT
							from #tbl_Invoice_Invoice_Filter t --//[mylock]
							where(1=1)
							;

							---- Invoice_Invoice:
							select
								t.MyIdxSeq
								, ii.*
								----
								, mpm.PaymentMethodCode mpm_PaymentMethodCode
								, mpm.PaymentMethodName mpm_PaymentMethodName
								----
								, mcnnt.CustomerNNTCode mcnnt_CustomerNNTCode
								, mcnnt.CustomerNNTName mcnnt_CustomerNNTName
								, mcnnt.CustomerNNTAddress mcnnt_CustomerNNTAddress
								, mcnnt.CustomerNNTEmail mcnnt_CustomerNNTEmail
								, mcnnt.CustomerMST mcnnt_CustomerMST
								, mcnnt.ContactEmail mcnnt_ContactEmail
								----
								, iti.TInvoiceCode iti_TInvoiceCode
								, iti.TInvoiceName iti_TInvoiceName
								, iti.LogoFilePath iti_LogoFilePath
								, iti.WatermarkFilePath iti_WatermarkFilePath
								, iti.InvoiceTGroupCode iti_InvoiceTGroupCode
								, iti.InvoiceType iti_InvoiceType
								, iti.Sign iti_Sign
								, iti.FormNo iti_FormNo
                                ----
	                            , msi.SourceInvoiceCode msi_SourceInvoiceCode
	                            , msi.SourceInvoiceName msi_SourceInvoiceName
                                ----
	                            , itg.InvoiceTGroupCode itg_InvoiceTGroupCode
	                            , itg.Spec_Prd_Type itg_Spec_Prd_Type
								, f.VATRateCode 
								, f.VATRate 
							from #tbl_Invoice_Invoice_Filter t --//[mylock]
								inner join Invoice_Invoice ii --//[mylock]
									on t.InvoiceCode = ii.InvoiceCode
								left join Mst_PaymentMethods mpm --//[mylock]
									on ii.PaymentMethodCode = mpm.PaymentMethodCode
								left join Mst_CustomerNNT mcnnt --//[mylock]
									on ii.CustomerNNTCode = mcnnt.CustomerNNTCode
										and ii.MST = mcnnt.MST
								left join Invoice_TempInvoice iti --//[mylock]
									on ii.TInvoiceCode = iti.TInvoiceCode
	                            left join Mst_SourceInvoice msi --//[mylock]
		                            on ii.SourceInvoiceCode = msi.SourceInvoiceCode
								left join Invoice_TempGroup itg --//[mylock]
									on iti.InvoiceTGroupCode = itg.InvoiceTGroupCode
								left join #tbl_VATRAT f --//[mylock]
									on t.InvoiceCode = f.InvoiceCode
							order by t.MyIdxSeq asc
							;
						"
                    );
                #endregion
            }
            ////
            string zzB_Select_Invoice_InvoiceDtl_zzE = "-- Nothing.";

            if (bGet_Invoice_InvoiceDtl)
            {
                #region // bGet_Invoice_InvoiceDtl:
                zzB_Select_Invoice_InvoiceDtl_zzE = CmUtils.StringUtils.Replace(@"
							---- Invoice_InvoiceDtl:
							select
								t.MyIdxSeq
								, iidt.*
							from #tbl_Invoice_Invoice_Filter t --//[mylock]
								inner join Invoice_Invoice ii --//[mylock]
									on t.InvoiceCode = ii.InvoiceCode
								inner join Invoice_InvoiceDtl iidt --//[mylock]
									on t.InvoiceCode = iidt.InvoiceCode
							order by t.MyIdxSeq asc
									, iidt.SpecCode asc
									, iidt.SpecName asc
							;
						"
                    );
                #endregion
            }
            ////
            string zzB_Where_strFilter_zzE = "";
            {
                Hashtable htSpCols = new Hashtable();
                {
                    #region // htSpCols:
                    ////
                    TUtils.CUtils.MyBuildHTSupportedColumns(
                        _cf.db // db
                        , ref htSpCols // htSupportedColumns
                        , "Invoice_Invoice" // strTableNameDB
                        , "Invoice_Invoice." // strPrefixStd
                        , "ii." // strPrefixAlias
                        );
                    ////
                    TUtils.CUtils.MyBuildHTSupportedColumns(
                        _cf.db // db
                        , ref htSpCols // htSupportedColumns
                        , "Mst_CustomerNNT" // strTableNameDB
                        , "Mst_CustomerNNT." // strPrefixStd
                        , "mcnnt." // strPrefixAlias
                        );
                    ////
                    TUtils.CUtils.MyBuildHTSupportedColumns(
                        _cf.db // db
                        , ref htSpCols // htSupportedColumns
                        , "Invoice_TempInvoice" // strTableNameDB
                        , "Invoice_TempInvoice." // strPrefixStd
                        , "iti." // strPrefixAlias
                        );
                    ////
                    #endregion
                }
                zzB_Where_strFilter_zzE = CmUtils.SqlUtils.BuildWhere(
                    htSpCols // htSpCols
                    , strFt_WhereClause // strClause
                    , "@p_" // strParamPrefix
                    , ref alParamsCoupleSql // alParamsCoupleSql
                    );
                zzB_Where_strFilter_zzE = (zzB_Where_strFilter_zzE.Length <= 0 ? "" : string.Format(" and ({0})", zzB_Where_strFilter_zzE));
                alParamsCoupleError.AddRange(new object[]{
                        "zzB_Where_strFilter_zzE", zzB_Where_strFilter_zzE
                        });
            }
            ////
            strSqlGetData = CmUtils.StringUtils.Replace(
                strSqlGetData
                , "zzB_Where_strFilter_zzE", zzB_Where_strFilter_zzE
                , "zzB_Select_Invoice_Invoice_zzE", zzB_Select_Invoice_Invoice_zzE
                , "zzB_Select_Invoice_InvoiceDtl_zzE", zzB_Select_Invoice_InvoiceDtl_zzE
                );
            #endregion

            #region // Get Data:
            dsGetData = _cf.db.ExecQuery(
                strSqlGetData
                , alParamsCoupleSql.ToArray()
                );
            int nIdxTable = 0;
            dsGetData.Tables[nIdxTable++].TableName = "MySummaryTable";
            if (bGet_Invoice_Invoice)
            {
                dsGetData.Tables[nIdxTable++].TableName = "Invoice_Invoice";
            }
            if (bGet_Invoice_InvoiceDtl)
            {
                dsGetData.Tables[nIdxTable++].TableName = "Invoice_InvoiceDtl";
            }
            #endregion
        }

        public void Invoice_Invoice_GetX_New20191110(
            ref ArrayList alParamsCoupleError
            , DateTime dtimeTDateTime
            , string strTid
            , string strWAUserCode
            ////
            //// Filter:
            , string strFt_RecordStart
            , string strFt_RecordCount
            , string strFt_WhereClause
            //// Return:
            , string strRt_Cols_Invoice_Invoice
            , string strRt_Cols_Invoice_InvoiceDtl
            //, string strRt_Cols_Invoice_InvoicePrd
            //, string strRt_Cols_Invoice_InvoiceVAT
            ////
            , out DataSet dsGetData
            )
        {
            #region // Temp:
            string strFunctionName = "Invoice_Invoice_GetX";
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName // FunctionName
				, "dtimeTDateTime", dtimeTDateTime // dtimeTDateTime
                ////
				, "strFt_RecordStart", strFt_RecordStart // strFt_RecordStart
				, "strFt_RecordCount", strFt_RecordCount // strFt_RecordCount
				, "strFt_WhereClause", strFt_WhereClause // strFt_WhereClause
                ////
                , "strRt_Cols_Invoice_Invoice", strRt_Cols_Invoice_Invoice // strRt_Cols_Invoice_Invoice
                , "strRt_Cols_Invoice_InvoiceDtl", strRt_Cols_Invoice_InvoiceDtl // strRt_Cols_Invoice_InvoiceDtl
                //, "strRt_Cols_Invoice_InvoicePrd", strRt_Cols_Invoice_InvoicePrd // strRt_Cols_Invoice_InvoicePrd
                //, "strRt_Cols_Invoice_InvoiceVAT", strRt_Cols_Invoice_InvoiceVAT // strRt_Cols_Invoice_InvoiceVAT
                });
            #endregion

            #region // Check:
            //// Refine:
            long nFilterRecordStart = Convert.ToInt64(strFt_RecordStart);
            long nFilterRecordEnd = nFilterRecordStart + Convert.ToInt64(strFt_RecordCount) - 1;
            bool bGet_Invoice_Invoice = (strRt_Cols_Invoice_Invoice != null && strRt_Cols_Invoice_Invoice.Length > 0);
            bool bGet_Invoice_InvoiceDtl = (strRt_Cols_Invoice_InvoiceDtl != null && strRt_Cols_Invoice_InvoiceDtl.Length > 0);
            //bool bGet_Invoice_InvoicePrd = (strRt_Cols_Invoice_InvoicePrd != null && strRt_Cols_Invoice_InvoicePrd.Length > 0);
            //bool bGet_Invoice_InvoiceVAT = (strRt_Cols_Invoice_InvoiceVAT != null && strRt_Cols_Invoice_InvoiceVAT.Length > 0);

            //// drAbilityOfUser:
            //DataRow drAbilityOfUser = myCache_ViewAbility_GetUserInfo(strWAUserCode);

            #endregion

            #region // Build Sql:
            ////
            ArrayList alParamsCoupleSql = new ArrayList();
            alParamsCoupleSql.AddRange(new object[] {
                    "@nFilterRecordStart", nFilterRecordStart
                    , "@nFilterRecordEnd", nFilterRecordEnd
                    });
            ////		
            // drAbilityOfUser:
            DataRow drAbilityOfUser = Sys_User_GetAbilityViewOfUser(strWAUserCode);
            zzzzClauseSelect_Mst_NNT_ViewAbility_Get(
                drAbilityOfUser // drAbilityOfUser
                , ref alParamsCoupleError // alParamsCoupleError
                );
            string strSqlGetData = CmUtils.StringUtils.Replace(@"
						---- #tbl_Invoice_Invoice_Filter_Draft:
						select distinct
							identity(bigint, 0, 1) MyIdxSeq
							, ii.InvoiceCode
							, ii.CreateDTimeUTC
						into #tbl_Invoice_Invoice_Filter_Draft
						from Invoice_Invoice ii --//[mylock]
                            inner join #tbl_Mst_NNT_ViewAbility t_MstNNT_View --//[mylock]
                                on ii.MST = t_MstNNT_View.MST
							left join Mst_PaymentMethods mpm --//[mylock]
								on ii.PaymentMethodCode = mpm.PaymentMethodCode
							left join Mst_CustomerNNT mcnnt --//[mylock]
								on ii.CustomerNNTCode = mcnnt.CustomerNNTCode
									and ii.MST = mcnnt.MST
							left join Invoice_TempInvoice iti --//[mylock]
								on ii.TInvoiceCode = iti.TInvoiceCode
	                        left join Mst_SourceInvoice msi --//[mylock]
		                        on ii.SourceInvoiceCode = msi.SourceInvoiceCode
						where (1=1)
							zzB_Where_strFilter_zzE
						order by ii.CreateDTimeUTC desc
						;

						---- Summary:
						select Count(0) MyCount from #tbl_Invoice_Invoice_Filter_Draft t --//[mylock]
						;

						---- #tbl_Invoice_Invoice_Filter:
						select
							t.*
						into #tbl_Invoice_Invoice_Filter
						from #tbl_Invoice_Invoice_Filter_Draft t --//[mylock]
						where
							(t.MyIdxSeq >= @nFilterRecordStart)
							and (t.MyIdxSeq <= @nFilterRecordEnd)
						;

						-------- Invoice_Invoice ------:
						zzB_Select_Invoice_Invoice_zzE
						--------------------------------

						-------- Invoice_InvoiceDtl ------:
						zzB_Select_Invoice_InvoiceDtl_zzE
						-----------------------------------

						---- Clear for debug:
						--drop table #tbl_Invoice_Invoice_Filter_Draft;
						--drop table #tbl_Invoice_Invoice_Filter;
					"
                );
            ////
            string zzB_Select_Invoice_Invoice_zzE = "-- Nothing.";
            if (bGet_Invoice_Invoice)
            {
                #region // bGet_Invoice_Invoice:
                zzB_Select_Invoice_Invoice_zzE = CmUtils.StringUtils.Replace(@"
							--- #tbl_VATRAT:
							select 
								t.InvoiceCode
								, (
									select top 1
										f.VATRateCode
									from Invoice_InvoiceDtl f --//[mylock]
									where(1=1)
										and f.InvoiceCode = t.InvoiceCode
								) VATRateCode
								, (
									select top 1
										f.VATRate
									from Invoice_InvoiceDtl f --//[mylock]
									where(1=1)
										and f.InvoiceCode = t.InvoiceCode
								) VATRate
							into #tbl_VATRAT
							from #tbl_Invoice_Invoice_Filter t --//[mylock]
							where(1=1)
							;

							---- Invoice_Invoice:
							select
								t.MyIdxSeq
								, ii.*
								----
								, mpm.PaymentMethodCode mpm_PaymentMethodCode
								, mpm.PaymentMethodName mpm_PaymentMethodName
								----
								, mcnnt.CustomerNNTCode mcnnt_CustomerNNTCode
								, mcnnt.CustomerNNTName mcnnt_CustomerNNTName
								, mcnnt.CustomerNNTAddress mcnnt_CustomerNNTAddress
								, mcnnt.CustomerNNTEmail mcnnt_CustomerNNTEmail
								, mcnnt.CustomerMST mcnnt_CustomerMST
								, mcnnt.ContactEmail mcnnt_ContactEmail
								----
								, iti.TInvoiceCode iti_TInvoiceCode
								, iti.TInvoiceName iti_TInvoiceName
								, iti.LogoFilePath iti_LogoFilePath
								, iti.WatermarkFilePath iti_WatermarkFilePath
								, iti.InvoiceTGroupCode iti_InvoiceTGroupCode
								, iti.InvoiceType iti_InvoiceType
								, iti.Sign iti_Sign
								, iti.FormNo iti_FormNo
                                ----
	                            , msi.SourceInvoiceCode msi_SourceInvoiceCode
	                            , msi.SourceInvoiceName msi_SourceInvoiceName
                                ----
	                            , itg.InvoiceTGroupCode itg_InvoiceTGroupCode
	                            , itg.Spec_Prd_Type itg_Spec_Prd_Type
                                , itg.VATType itg_VATType
								, f.VATRateCode 
								, f.VATRate 
							from #tbl_Invoice_Invoice_Filter t --//[mylock]
								inner join Invoice_Invoice ii --//[mylock]
									on t.InvoiceCode = ii.InvoiceCode
								left join Mst_PaymentMethods mpm --//[mylock]
									on ii.PaymentMethodCode = mpm.PaymentMethodCode
								left join Mst_CustomerNNT mcnnt --//[mylock]
									on ii.CustomerNNTCode = mcnnt.CustomerNNTCode
										and ii.MST = mcnnt.MST
								left join Invoice_TempInvoice iti --//[mylock]
									on ii.TInvoiceCode = iti.TInvoiceCode
	                            left join Mst_SourceInvoice msi --//[mylock]
		                            on ii.SourceInvoiceCode = msi.SourceInvoiceCode
								left join Invoice_TempGroup itg --//[mylock]
									on iti.InvoiceTGroupCode = itg.InvoiceTGroupCode
								left join #tbl_VATRAT f --//[mylock]
									on t.InvoiceCode = f.InvoiceCode
							order by t.MyIdxSeq asc
							;
						"
                    );
                #endregion
            }
            ////
            string zzB_Select_Invoice_InvoiceDtl_zzE = "-- Nothing.";

            if (bGet_Invoice_InvoiceDtl)
            {
                #region // bGet_Invoice_InvoiceDtl:
                zzB_Select_Invoice_InvoiceDtl_zzE = CmUtils.StringUtils.Replace(@"
							---- Invoice_InvoiceDtl:
							select
								t.MyIdxSeq
								, iidt.*
								, mvr.VATDesc
							from #tbl_Invoice_Invoice_Filter t --//[mylock]
								inner join Invoice_Invoice ii --//[mylock]
									on t.InvoiceCode = ii.InvoiceCode
								inner join Invoice_InvoiceDtl iidt --//[mylock]
									on t.InvoiceCode = iidt.InvoiceCode
								inner join dbo.Mst_VATRate mvr --//[mylock]
									on iidt.VATRateCode = mvr.VATRateCode
							order by t.MyIdxSeq asc
									, iidt.SpecCode asc
									, iidt.SpecName asc
							;
						"
                    );
                #endregion
            }
            ////
            string zzB_Where_strFilter_zzE = "";
            {
                Hashtable htSpCols = new Hashtable();
                {
                    #region // htSpCols:
                    ////
                    TUtils.CUtils.MyBuildHTSupportedColumns(
                        _cf.db // db
                        , ref htSpCols // htSupportedColumns
                        , "Invoice_Invoice" // strTableNameDB
                        , "Invoice_Invoice." // strPrefixStd
                        , "ii." // strPrefixAlias
                        );
                    ////
                    TUtils.CUtils.MyBuildHTSupportedColumns(
                        _cf.db // db
                        , ref htSpCols // htSupportedColumns
                        , "Mst_CustomerNNT" // strTableNameDB
                        , "Mst_CustomerNNT." // strPrefixStd
                        , "mcnnt." // strPrefixAlias
                        );
                    ////
                    TUtils.CUtils.MyBuildHTSupportedColumns(
                        _cf.db // db
                        , ref htSpCols // htSupportedColumns
                        , "Invoice_TempInvoice" // strTableNameDB
                        , "Invoice_TempInvoice." // strPrefixStd
                        , "iti." // strPrefixAlias
                        );
                    ////
                    #endregion
                }
                zzB_Where_strFilter_zzE = CmUtils.SqlUtils.BuildWhere(
                    htSpCols // htSpCols
                    , strFt_WhereClause // strClause
                    , "@p_" // strParamPrefix
                    , ref alParamsCoupleSql // alParamsCoupleSql
                    );
                zzB_Where_strFilter_zzE = (zzB_Where_strFilter_zzE.Length <= 0 ? "" : string.Format(" and ({0})", zzB_Where_strFilter_zzE));
                alParamsCoupleError.AddRange(new object[]{
                        "zzB_Where_strFilter_zzE", zzB_Where_strFilter_zzE
                        });
            }
            ////
            strSqlGetData = CmUtils.StringUtils.Replace(
                strSqlGetData
                , "zzB_Where_strFilter_zzE", zzB_Where_strFilter_zzE
                , "zzB_Select_Invoice_Invoice_zzE", zzB_Select_Invoice_Invoice_zzE
                , "zzB_Select_Invoice_InvoiceDtl_zzE", zzB_Select_Invoice_InvoiceDtl_zzE
                );
            #endregion

            #region // Get Data:
            dsGetData = _cf.db.ExecQuery(
                strSqlGetData
                , alParamsCoupleSql.ToArray()
                );
            int nIdxTable = 0;
            dsGetData.Tables[nIdxTable++].TableName = "MySummaryTable";
            if (bGet_Invoice_Invoice)
            {
                dsGetData.Tables[nIdxTable++].TableName = "Invoice_Invoice";
            }
            if (bGet_Invoice_InvoiceDtl)
            {
                dsGetData.Tables[nIdxTable++].TableName = "Invoice_InvoiceDtl";
            }
            #endregion
        }

        public DataSet Invoice_Invoice_GetNoSession(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            //// Filter:
            , string strFt_RecordStart
            , string strFt_RecordCount
            , string strFt_WhereClause
            //// Return:
            , string strRt_Cols_Invoice_Invoice
            , string strRt_Cols_Invoice_InvoiceDtl
            , string strRt_Cols_Invoice_InvoicePrd
            , string strRt_Cols_Invoice_InvoiceVAT
            )
        {
            #region // Temp:
            DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            //int nTidSeq = 0;
            DateTime dtimeSys = DateTime.UtcNow;
            bool bNeedTransaction = true;
            string strFunctionName = "Invoice_Invoice_GetNoSession";
            string strErrorCodeDefault = TError.ErridnInventory.Invoice_Invoice_GetNoSession;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				//// Filter
				, "strFt_RecordStart", strFt_RecordStart
                , "strFt_RecordCount", strFt_RecordCount
                , "strFt_WhereClause", strFt_WhereClause
				//// Return
				, "strRt_Cols_Invoice_Invoice", strRt_Cols_Invoice_Invoice
                , "strRt_Cols_Invoice_InvoiceDtl", strRt_Cols_Invoice_InvoiceDtl
                , "strRt_Cols_Invoice_InvoicePrd", strRt_Cols_Invoice_InvoicePrd
                , "strRt_Cols_Invoice_InvoiceVAT", strRt_Cols_Invoice_InvoiceVAT
                });
            #endregion

            try
            {
                #region // Init:
                //_cf.db.LogUserId = _cf.sinf.strUserCode;
                if (bNeedTransaction) _cf.db.BeginTransaction();

                // Write RequestLog:
                _cf.ProcessBizReq_OutSide(
                    strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    , alParamsCoupleError // alParamsCoupleError
                    );

                //// Sys_User_CheckAuthentication:
                //Sys_User_CheckAuthentication(
                //    ref alParamsCoupleError
                //    , strWAUserCode
                //    , strWAUserPassword
                //    );

                //// Check Access/Deny:
                //Sys_Access_CheckDenyV30(
                //    ref alParamsCoupleError
                //    , strWAUserCode
                //    , strFunctionName
                //    );
                #endregion

                #region // Invoice_Invoice_GetX:
                DataSet dsGetData = new DataSet();
                {
                    Invoice_Invoice_GetX(
                        ref alParamsCoupleError // alParamsCoupleError
                        , dtimeSys // dtimeSys
                        , strTid // strTid
                        , strWAUserCode // strWAUserCode
                                        ////
                        , strFt_RecordStart // strFt_RecordStart
                        , strFt_RecordCount // strFt_RecordCount
                        , strFt_WhereClause // strFt_WhereClause
                                            ////
                        , strRt_Cols_Invoice_Invoice // strRt_Cols_Invoice_Invoice
                        , strRt_Cols_Invoice_InvoiceDtl // strRt_Cols_Invoice_InvoiceDtl
                        , strRt_Cols_Invoice_InvoicePrd // strRt_Cols_Invoice_InvoicePrd
                        , strRt_Cols_Invoice_InvoiceVAT // strRt_Cols_Invoice_InvoiceVAT
                                                        /////
                        , out dsGetData // dsGetData
                        );
                }
                #endregion

                #region // Get Data:
                CmUtils.DataUtils.MoveDataTable(ref mdsFinal, ref dsGetData);
                #endregion

                // Return Good:
                TDALUtils.DBUtils.RollbackSafety(_cf.db); // Always Rollback.
                mdsFinal.AcceptChanges();
                return mdsFinal;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Rollback:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);

                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsFinal
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Rollback and Release resources:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);
                TDALUtils.DBUtils.ReleaseAllSemaphore(_cf.db_Sys, true);

                // Write ReturnLog:
                _cf.ProcessBizReturn_OutSide(
                    ref mdsFinal // mdsFinal
                    , strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    );
                #endregion
            }
        }


        public DataSet Invoice_Invoice_GetNoSession_New20190705(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            //// Filter:
            , string strFt_RecordStart
            , string strFt_RecordCount
            , string strFt_WhereClause
            //// Return:
            , string strRt_Cols_Invoice_Invoice
            , string strRt_Cols_Invoice_InvoiceDtl
            //, string strRt_Cols_Invoice_InvoicePrd
            //, string strRt_Cols_Invoice_InvoiceVAT
            )
        {
            #region // Temp:
            DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            //int nTidSeq = 0;
            DateTime dtimeSys = DateTime.UtcNow;
            bool bNeedTransaction = true;
            string strFunctionName = "Invoice_Invoice_GetNoSession";
            string strErrorCodeDefault = TError.ErridnInventory.Invoice_Invoice_GetNoSession;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				//// Filter
				, "strFt_RecordStart", strFt_RecordStart
                , "strFt_RecordCount", strFt_RecordCount
                , "strFt_WhereClause", strFt_WhereClause
				//// Return
				, "strRt_Cols_Invoice_Invoice", strRt_Cols_Invoice_Invoice
                , "strRt_Cols_Invoice_InvoiceDtl", strRt_Cols_Invoice_InvoiceDtl
                //, "strRt_Cols_Invoice_InvoicePrd", strRt_Cols_Invoice_InvoicePrd
                //, "strRt_Cols_Invoice_InvoiceVAT", strRt_Cols_Invoice_InvoiceVAT
                });
            #endregion

            try
            {
                #region // Init:
                //_cf.db.LogUserId = _cf.sinf.strUserCode;
                if (bNeedTransaction) _cf.db.BeginTransaction();

                // Write RequestLog:
                _cf.ProcessBizReq_OutSide(
                    strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    , alParamsCoupleError // alParamsCoupleError
                    );

                // Sys_User_CheckAuthentication:
                //Sys_User_CheckAuthentication(
                //    ref alParamsCoupleError
                //    , strWAUserCode
                //    , strWAUserPassword
                //    );

                //// Check Access/Deny:
                //Sys_Access_CheckDenyV30(
                //    ref alParamsCoupleError
                //    , strWAUserCode
                //    , strFunctionName
                //    );
                #endregion

                #region // Invoice_Invoice_GetX:
                DataSet dsGetData = new DataSet();
                {
                    Invoice_Invoice_GetX_New20190705(
                        ref alParamsCoupleError // alParamsCoupleError
                        , dtimeSys // dtimeSys
                        , strTid // strTid
                        , strWAUserCode // strWAUserCode
                                        ////
                        , strFt_RecordStart // strFt_RecordStart
                        , strFt_RecordCount // strFt_RecordCount
                        , strFt_WhereClause // strFt_WhereClause
                                            ////
                        , strRt_Cols_Invoice_Invoice // strRt_Cols_Invoice_Invoice
                        , strRt_Cols_Invoice_InvoiceDtl // strRt_Cols_Invoice_InvoiceDtl
                                                        //, strRt_Cols_Invoice_InvoicePrd // strRt_Cols_Invoice_InvoicePrd
                                                        //, strRt_Cols_Invoice_InvoiceVAT // strRt_Cols_Invoice_InvoiceVAT
                                                        /////
                        , out dsGetData // dsGetData
                        );
                }
                #endregion

                #region // Get Data:
                CmUtils.DataUtils.MoveDataTable(ref mdsFinal, ref dsGetData);
                #endregion

                // Return Good:
                TDALUtils.DBUtils.RollbackSafety(_cf.db); // Always Rollback.
                mdsFinal.AcceptChanges();
                return mdsFinal;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Rollback:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);

                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsFinal
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Rollback and Release resources:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);
                TDALUtils.DBUtils.ReleaseAllSemaphore(_cf.db_Sys, true);

                // Write ReturnLog:
                _cf.ProcessBizReturn_OutSide(
                    ref mdsFinal // mdsFinal
                    , strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    );
                #endregion
            }
        }
        public DataSet Invoice_Invoice_Get(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            //// Filter:
            , string strFt_RecordStart
            , string strFt_RecordCount
            , string strFt_WhereClause
            //// Return:
            , string strRt_Cols_Invoice_Invoice
            , string strRt_Cols_Invoice_InvoiceDtl
            , string strRt_Cols_Invoice_InvoicePrd
            , string strRt_Cols_Invoice_InvoiceVAT
            )
        {
            #region // Temp:
            DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            //int nTidSeq = 0;
            DateTime dtimeSys = DateTime.UtcNow;
            bool bNeedTransaction = true;
            string strFunctionName = "Invoice_Invoice_Get";
            string strErrorCodeDefault = TError.ErridnInventory.Invoice_Invoice_Get;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				//// Filter
				, "strFt_RecordStart", strFt_RecordStart
                , "strFt_RecordCount", strFt_RecordCount
                , "strFt_WhereClause", strFt_WhereClause
				//// Return
				, "strRt_Cols_Invoice_Invoice", strRt_Cols_Invoice_Invoice
                , "strRt_Cols_Invoice_InvoiceDtl", strRt_Cols_Invoice_InvoiceDtl
                , "strRt_Cols_Invoice_InvoicePrd", strRt_Cols_Invoice_InvoicePrd
                , "strRt_Cols_Invoice_InvoiceVAT", strRt_Cols_Invoice_InvoiceVAT
                });
            #endregion

            try
            {
                #region // Init:
                //_cf.db.LogUserId = _cf.sinf.strUserCode;
                if (bNeedTransaction) _cf.db.BeginTransaction();

                // Write RequestLog:
                _cf.ProcessBizReq_OutSide(
                    strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    , alParamsCoupleError // alParamsCoupleError
                    );

                // Sys_User_CheckAuthentication:
                //Sys_User_CheckAuthentication(
                //    ref alParamsCoupleError
                //    , strWAUserCode
                //    , strWAUserPassword
                //    );

                // Check Access/Deny:
                Sys_Access_CheckDenyV30(
                    ref alParamsCoupleError
                    , strWAUserCode
                    , strFunctionName
                    );
                #endregion

                #region // Invoice_Invoice_GetX:
                DataSet dsGetData = new DataSet();
                {
                    Invoice_Invoice_GetX(
                        ref alParamsCoupleError // alParamsCoupleError
                        , dtimeSys // dtimeSys
                        , strTid // strTid
                        , strWAUserCode // strWAUserCode
                                        ////
                        , strFt_RecordStart // strFt_RecordStart
                        , strFt_RecordCount // strFt_RecordCount
                        , strFt_WhereClause // strFt_WhereClause
                                            ////
                        , strRt_Cols_Invoice_Invoice // strRt_Cols_Invoice_Invoice
                        , strRt_Cols_Invoice_InvoiceDtl // strRt_Cols_Invoice_InvoiceDtl
                        , strRt_Cols_Invoice_InvoicePrd // strRt_Cols_Invoice_InvoicePrd
                        , strRt_Cols_Invoice_InvoiceVAT // strRt_Cols_Invoice_InvoiceVAT
                                                        /////
                        , out dsGetData // dsGetData
                        );
                }
                #endregion

                #region // Get Data:
                CmUtils.DataUtils.MoveDataTable(ref mdsFinal, ref dsGetData);
                #endregion

                // Return Good:
                TDALUtils.DBUtils.RollbackSafety(_cf.db); // Always Rollback.
                mdsFinal.AcceptChanges();
                return mdsFinal;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Rollback:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);

                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsFinal
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Rollback and Release resources:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);
                TDALUtils.DBUtils.ReleaseAllSemaphore(_cf.db_Sys, true);

                // Write ReturnLog:
                _cf.ProcessBizReturn_OutSide(
                    ref mdsFinal // mdsFinal
                    , strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    );
                #endregion
            }
        }

        public DataSet Invoice_Invoice_Get_New20190705(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            //// Filter:
            , string strFt_RecordStart
            , string strFt_RecordCount
            , string strFt_WhereClause
            //// Return:
            , string strRt_Cols_Invoice_Invoice
            , string strRt_Cols_Invoice_InvoiceDtl
            //, string strRt_Cols_Invoice_InvoicePrd
            //, string strRt_Cols_Invoice_InvoiceVAT
            )
        {
            #region // Temp:
            DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            Stopwatch stopWatchFunc = new Stopwatch();
            //int nTidSeq = 0;
            DateTime dtimeSys = DateTime.UtcNow;
            bool bNeedTransaction = true;
            string strFunctionName = "Invoice_Invoice_Get";
            string strErrorCodeDefault = TError.ErridnInventory.Invoice_Invoice_Get;
            ArrayList alParamsCoupleSW = new ArrayList();
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				//// Filter
				, "strFt_RecordStart", strFt_RecordStart
                , "strFt_RecordCount", strFt_RecordCount
                , "strFt_WhereClause", strFt_WhereClause
				//// Return
				, "strRt_Cols_Invoice_Invoice", strRt_Cols_Invoice_Invoice
                , "strRt_Cols_Invoice_InvoiceDtl", strRt_Cols_Invoice_InvoiceDtl
                //, "strRt_Cols_Invoice_InvoicePrd", strRt_Cols_Invoice_InvoicePrd
                //, "strRt_Cols_Invoice_InvoiceVAT", strRt_Cols_Invoice_InvoiceVAT
                });
            #endregion

            try
            {
                #region // SW:				
                stopWatchFunc.Start();
                alParamsCoupleSW.AddRange(new object[]{
                    "strFunctionName", strFunctionName
                    , "stopWatchFunc.Start", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
                    });
                #endregion

                #region // Init:
                //_cf.db.LogUserId = _cf.sinf.strUserCode;
                if (bNeedTransaction) _cf.db.BeginTransaction();

                // Write RequestLog:
                _cf.ProcessBizReq_OutSide(
                    strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    , alParamsCoupleError // alParamsCoupleError
                    );

                // Sys_User_CheckAuthentication:
                //Sys_User_CheckAuthentication(
                //    ref alParamsCoupleError
                //    , strWAUserCode
                //    , strWAUserPassword
                //    );

                // Check Access/Deny:
                Sys_Access_CheckDenyV30(
                    ref alParamsCoupleError
                    , strWAUserCode
                    , strFunctionName
                    );
                #endregion

                #region // Invoice_Invoice_GetX:
                DataSet dsGetData = new DataSet();
                {
                    Invoice_Invoice_GetX_New20191110(
                        ref alParamsCoupleError // alParamsCoupleError
                        , dtimeSys // dtimeSys
                        , strTid // strTid
                        , strWAUserCode // strWAUserCode
                                        ////
                        , strFt_RecordStart // strFt_RecordStart
                        , strFt_RecordCount // strFt_RecordCount
                        , strFt_WhereClause // strFt_WhereClause
                                            ////
                        , strRt_Cols_Invoice_Invoice // strRt_Cols_Invoice_Invoice
                        , strRt_Cols_Invoice_InvoiceDtl // strRt_Cols_Invoice_InvoiceDtl
                                                        /////
                        , out dsGetData // dsGetData
                        );
                }
                #endregion

                #region // Get Data:
                CmUtils.DataUtils.MoveDataTable(ref mdsFinal, ref dsGetData);
                #endregion

                // Return Good:
                TDALUtils.DBUtils.RollbackSafety(_cf.db); // Always Rollback.
                mdsFinal.AcceptChanges();
                return mdsFinal;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Rollback:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);

                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsFinal
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Rollback and Release resources:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);
                TDALUtils.DBUtils.ReleaseAllSemaphore(_cf.db_Sys, true);

                stopWatchFunc.Stop();
                alParamsCoupleSW.AddRange(new object[]{
                    "strFunctionName", strFunctionName
                    , "stopWatchFunc.Stop", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
                    , "stopWatchFunc.ElapsedMilliseconds", stopWatchFunc.ElapsedMilliseconds
                    });

                // Write ReturnLog:
                _cf.ProcessBizReturn_OutSide(
                    ref mdsFinal // mdsFinal
                    , strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    , alParamsCoupleSW // alParamsCoupleSW
                    );
                #endregion
            }
        }
        public DataSet WAS_Invoice_Invoice_Get(
            ref ArrayList alParamsCoupleError
            , RQ_Invoice_Invoice objRQ_Invoice_Invoice
            ////
            , out RT_Invoice_Invoice objRT_Invoice_Invoice
            )
        {
            #region // Temp:
            string strTid = objRQ_Invoice_Invoice.Tid;
            objRT_Invoice_Invoice = new RT_Invoice_Invoice();
            DataSet mdsResult = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            DateTime dtimeSys = DateTime.UtcNow;
            //DataSet mdsExec = null;
            //DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(objRQ_Invoice_Invoice.Tid);
            //int nTidSeq = 0;
            //bool bNeedTransaction = true;
            string strFunctionName = "Invoice_Invoice_Get";
            string strErrorCodeDefault = TError.ErridnInventory.Invoice_Invoice_Get;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
				});
            #endregion

            try
            {
                #region // Init:
                #endregion

                #region // Refine and Check Input:
                List<MySummaryTable> lst_MySummaryTable = new List<MySummaryTable>();
                List<Invoice_Invoice> lst_Invoice_Invoice = new List<Invoice_Invoice>();
                List<Invoice_InvoiceDtl> lst_Invoice_InvoiceDtl = new List<Invoice_InvoiceDtl>();
                List<Invoice_InvoicePrd> lst_Invoice_InvoicePrd = new List<Invoice_InvoicePrd>();
                /////
                bool bGet_Invoice_Invoice = (objRQ_Invoice_Invoice.Rt_Cols_Invoice_Invoice != null && objRQ_Invoice_Invoice.Rt_Cols_Invoice_Invoice.Length > 0);
                bool bGet_Invoice_InvoiceDtl = (objRQ_Invoice_Invoice.Rt_Cols_Invoice_InvoiceDtl != null && objRQ_Invoice_Invoice.Rt_Cols_Invoice_InvoiceDtl.Length > 0);
                bool bGet_Invoice_InvoicePrd = (objRQ_Invoice_Invoice.Rt_Cols_Invoice_InvoicePrd != null && objRQ_Invoice_Invoice.Rt_Cols_Invoice_InvoicePrd.Length > 0);
                #endregion

                #region // WS_Invoice_Invoice_Get:
                mdsResult = Invoice_Invoice_Get(
                    objRQ_Invoice_Invoice.Tid // strTid
                    , objRQ_Invoice_Invoice.GwUserCode // strGwUserCode
                    , objRQ_Invoice_Invoice.GwPassword // strGwPassword
                    , objRQ_Invoice_Invoice.WAUserCode // strUserCode
                    , objRQ_Invoice_Invoice.WAUserPassword // strUserPassword
                    , ref alParamsCoupleError // alParamsCoupleError
                                              //// Filter:
                    , objRQ_Invoice_Invoice.Ft_RecordStart // strFt_RecordStart
                    , objRQ_Invoice_Invoice.Ft_RecordCount // strFt_RecordCount
                    , objRQ_Invoice_Invoice.Ft_WhereClause // strFt_WhereClause
                                                           //// Return:
                    , objRQ_Invoice_Invoice.Rt_Cols_Invoice_Invoice // strRt_Cols_Invoice_Invoice
                    , objRQ_Invoice_Invoice.Rt_Cols_Invoice_InvoiceDtl // Rt_Cols_Invoice_InvoiceDtl
                    , objRQ_Invoice_Invoice.Rt_Cols_Invoice_InvoicePrd // Rt_Cols_Invoice_InvoicePrd
                    , objRQ_Invoice_Invoice.Rt_Cols_Invoice_InvoiceVAT // Rt_Cols_Invoice_InvoiceVAT
                    );
                #endregion

                #region // GetData:
                if (!CmUtils.CMyDataSet.HasError(mdsResult))
                {
                    ////
                    DataTable dt_MySummaryTable = mdsResult.Tables["MySummaryTable"].Copy();
                    lst_MySummaryTable = TUtils.DataTableCmUtils.ToListof<MySummaryTable>(dt_MySummaryTable);
                    objRT_Invoice_Invoice.MySummaryTable = lst_MySummaryTable[0];
                    ////
                    ////
                    if (bGet_Invoice_Invoice)
                    {
                        ////
                        DataTable dt_Invoice_Invoice = mdsResult.Tables["Invoice_Invoice"].Copy();
                        lst_Invoice_Invoice = TUtils.DataTableCmUtils.ToListof<Invoice_Invoice>(dt_Invoice_Invoice);
                        objRT_Invoice_Invoice.Lst_Invoice_Invoice = lst_Invoice_Invoice;
                    }
                    ////
                    if (bGet_Invoice_InvoiceDtl)
                    {
                        ////
                        DataTable dt_Invoice_InvoiceDtl = mdsResult.Tables["Invoice_InvoiceDtl"].Copy();
                        lst_Invoice_InvoiceDtl = TUtils.DataTableCmUtils.ToListof<Invoice_InvoiceDtl>(dt_Invoice_InvoiceDtl);
                        objRT_Invoice_Invoice.Lst_Invoice_InvoiceDtl = lst_Invoice_InvoiceDtl;
                    }
                    ////
                    if (bGet_Invoice_InvoicePrd)
                    {
                        ////
                        DataTable dt_Invoice_InvoicePrd = mdsResult.Tables["Invoice_InvoicePrd"].Copy();
                        lst_Invoice_InvoicePrd = TUtils.DataTableCmUtils.ToListof<Invoice_InvoicePrd>(dt_Invoice_InvoicePrd);
                        objRT_Invoice_Invoice.Lst_Invoice_InvoicePrd = lst_Invoice_InvoicePrd;
                    }
                }
                #endregion

                // Return Good:
                return mdsResult;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsResult
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Write ReturnLog:
                //_cf.ProcessBizReturn(
                //	ref mdsResult // mdsFinal
                //	, strTid // strTid
                //	, strFunctionName // strFunctionName
                //	);
                #endregion
            }
        }

        public DataSet WAS_Invoice_Invoice_Get_New20190705(
            ref ArrayList alParamsCoupleError
            , RQ_Invoice_Invoice objRQ_Invoice_Invoice
            ////
            , out RT_Invoice_Invoice objRT_Invoice_Invoice
            )
        {
            #region // Temp:
            string strTid = objRQ_Invoice_Invoice.Tid;
            objRT_Invoice_Invoice = new RT_Invoice_Invoice();
            DataSet mdsResult = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            DateTime dtimeSys = DateTime.UtcNow;
            //DataSet mdsExec = null;
            //DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(objRQ_Invoice_Invoice.Tid);
            //int nTidSeq = 0;
            //bool bNeedTransaction = true;
            string strFunctionName = "Invoice_Invoice_Get";
            string strErrorCodeDefault = TError.ErridnInventory.Invoice_Invoice_Get;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
				});
            #endregion

            try
            {
                #region // Init:
                #endregion

                #region // Refine and Check Input:
                List<MySummaryTable> lst_MySummaryTable = new List<MySummaryTable>();
                List<Invoice_Invoice> lst_Invoice_Invoice = new List<Invoice_Invoice>();
                List<Invoice_InvoiceDtl> lst_Invoice_InvoiceDtl = new List<Invoice_InvoiceDtl>();
                List<Invoice_InvoicePrd> lst_Invoice_InvoicePrd = new List<Invoice_InvoicePrd>();
                /////
                bool bGet_Invoice_Invoice = (objRQ_Invoice_Invoice.Rt_Cols_Invoice_Invoice != null && objRQ_Invoice_Invoice.Rt_Cols_Invoice_Invoice.Length > 0);
                bool bGet_Invoice_InvoiceDtl = (objRQ_Invoice_Invoice.Rt_Cols_Invoice_InvoiceDtl != null && objRQ_Invoice_Invoice.Rt_Cols_Invoice_InvoiceDtl.Length > 0);
                //bool bGet_Invoice_InvoicePrd = (objRQ_Invoice_Invoice.Rt_Cols_Invoice_InvoicePrd != null && objRQ_Invoice_Invoice.Rt_Cols_Invoice_InvoicePrd.Length > 0);
                #endregion

                #region // WS_Invoice_Invoice_Get:
                mdsResult = Invoice_Invoice_Get_New20190705(
                    objRQ_Invoice_Invoice.Tid // strTid
                    , objRQ_Invoice_Invoice.GwUserCode // strGwUserCode
                    , objRQ_Invoice_Invoice.GwPassword // strGwPassword
                    , objRQ_Invoice_Invoice.WAUserCode // strUserCode
                    , objRQ_Invoice_Invoice.WAUserPassword // strUserPassword
                    , ref alParamsCoupleError // alParamsCoupleError
                                              //// Filter:
                    , objRQ_Invoice_Invoice.Ft_RecordStart // strFt_RecordStart
                    , objRQ_Invoice_Invoice.Ft_RecordCount // strFt_RecordCount
                    , objRQ_Invoice_Invoice.Ft_WhereClause // strFt_WhereClause
                                                           //// Return:
                    , objRQ_Invoice_Invoice.Rt_Cols_Invoice_Invoice // strRt_Cols_Invoice_Invoice
                    , objRQ_Invoice_Invoice.Rt_Cols_Invoice_InvoiceDtl // Rt_Cols_Invoice_InvoiceDtl
                                                                       //, objRQ_Invoice_Invoice.Rt_Cols_Invoice_InvoicePrd // Rt_Cols_Invoice_InvoicePrd
                                                                       //, objRQ_Invoice_Invoice.Rt_Cols_Invoice_InvoiceVAT // Rt_Cols_Invoice_InvoiceVAT
                    );
                #endregion

                #region // GetData:
                if (!CmUtils.CMyDataSet.HasError(mdsResult))
                {
                    ////
                    DataTable dt_MySummaryTable = mdsResult.Tables["MySummaryTable"].Copy();
                    lst_MySummaryTable = TUtils.DataTableCmUtils.ToListof<MySummaryTable>(dt_MySummaryTable);
                    objRT_Invoice_Invoice.MySummaryTable = lst_MySummaryTable[0];
                    ////
                    ////
                    if (bGet_Invoice_Invoice)
                    {
                        ////
                        DataTable dt_Invoice_Invoice = mdsResult.Tables["Invoice_Invoice"].Copy();
                        lst_Invoice_Invoice = TUtils.DataTableCmUtils.ToListof<Invoice_Invoice>(dt_Invoice_Invoice);
                        objRT_Invoice_Invoice.Lst_Invoice_Invoice = lst_Invoice_Invoice;
                    }
                    ////
                    if (bGet_Invoice_InvoiceDtl)
                    {
                        ////
                        DataTable dt_Invoice_InvoiceDtl = mdsResult.Tables["Invoice_InvoiceDtl"].Copy();
                        lst_Invoice_InvoiceDtl = TUtils.DataTableCmUtils.ToListof<Invoice_InvoiceDtl>(dt_Invoice_InvoiceDtl);
                        objRT_Invoice_Invoice.Lst_Invoice_InvoiceDtl = lst_Invoice_InvoiceDtl;
                    }
                    ////
                    //if (bGet_Invoice_InvoicePrd)
                    //{
                    //    ////
                    //    DataTable dt_Invoice_InvoicePrd = mdsResult.Tables["Invoice_InvoicePrd"].Copy();
                    //    lst_Invoice_InvoicePrd = TUtils.DataTableCmUtils.ToListof<Invoice_InvoicePrd>(dt_Invoice_InvoicePrd);
                    //    objRT_Invoice_Invoice.Lst_Invoice_InvoicePrd = lst_Invoice_InvoicePrd;
                    //}
                }
                #endregion

                // Return Good:
                return mdsResult;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsResult
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Write ReturnLog:
                //_cf.ProcessBizReturn(
                //	ref mdsResult // mdsFinal
                //	, strTid // strTid
                //	, strFunctionName // strFunctionName
                //	);
                #endregion
            }
        }

        public DataSet WAS_Invoice_Invoice_GetNoSession(
            ref ArrayList alParamsCoupleError
            , RQ_Invoice_Invoice objRQ_Invoice_Invoice
            ////
            , out RT_Invoice_Invoice objRT_Invoice_Invoice
            )
        {
            #region // Temp:
            string strTid = objRQ_Invoice_Invoice.Tid;
            objRT_Invoice_Invoice = new RT_Invoice_Invoice();
            DataSet mdsResult = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            DateTime dtimeSys = DateTime.UtcNow;
            //DataSet mdsExec = null;
            //DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(objRQ_Invoice_Invoice.Tid);
            //int nTidSeq = 0;
            //bool bNeedTransaction = true;
            string strFunctionName = "WAS_Invoice_Invoice_GetNoSession";
            string strErrorCodeDefault = TError.ErridnInventory.WAS_Invoice_Invoice_GetNoSession;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
				});
            #endregion

            try
            {
                #region // Init:
                #endregion

                #region // Refine and Check Input:
                List<MySummaryTable> lst_MySummaryTable = new List<MySummaryTable>();
                List<Invoice_Invoice> lst_Invoice_Invoice = new List<Invoice_Invoice>();
                List<Invoice_InvoiceDtl> lst_Invoice_InvoiceDtl = new List<Invoice_InvoiceDtl>();
                List<Invoice_InvoicePrd> lst_Invoice_InvoicePrd = new List<Invoice_InvoicePrd>();
                /////
                bool bGet_Invoice_Invoice = (objRQ_Invoice_Invoice.Rt_Cols_Invoice_Invoice != null && objRQ_Invoice_Invoice.Rt_Cols_Invoice_Invoice.Length > 0);
                bool bGet_Invoice_InvoiceDtl = (objRQ_Invoice_Invoice.Rt_Cols_Invoice_InvoiceDtl != null && objRQ_Invoice_Invoice.Rt_Cols_Invoice_InvoiceDtl.Length > 0);
                bool bGet_Invoice_InvoicePrd = (objRQ_Invoice_Invoice.Rt_Cols_Invoice_InvoicePrd != null && objRQ_Invoice_Invoice.Rt_Cols_Invoice_InvoicePrd.Length > 0);
                #endregion

                #region // WS_Invoice_Invoice_Get:
                mdsResult = Invoice_Invoice_GetNoSession(
                    objRQ_Invoice_Invoice.Tid // strTid
                    , objRQ_Invoice_Invoice.GwUserCode // strGwUserCode
                    , objRQ_Invoice_Invoice.GwPassword // strGwPassword
                    , objRQ_Invoice_Invoice.WAUserCode // strUserCode
                    , objRQ_Invoice_Invoice.WAUserPassword // strUserPassword
                    , ref alParamsCoupleError // alParamsCoupleError
                                              //// Filter:
                    , objRQ_Invoice_Invoice.Ft_RecordStart // strFt_RecordStart
                    , objRQ_Invoice_Invoice.Ft_RecordCount // strFt_RecordCount
                    , objRQ_Invoice_Invoice.Ft_WhereClause // strFt_WhereClause
                                                           //// Return:
                    , objRQ_Invoice_Invoice.Rt_Cols_Invoice_Invoice // strRt_Cols_Invoice_Invoice
                    , objRQ_Invoice_Invoice.Rt_Cols_Invoice_InvoiceDtl // Rt_Cols_Invoice_InvoiceDtl
                    , objRQ_Invoice_Invoice.Rt_Cols_Invoice_InvoicePrd // Rt_Cols_Invoice_InvoicePrd
                    , objRQ_Invoice_Invoice.Rt_Cols_Invoice_InvoiceVAT // Rt_Cols_Invoice_InvoiceVAT
                    );
                #endregion

                #region // GetData:
                if (!CmUtils.CMyDataSet.HasError(mdsResult))
                {
                    ////
                    DataTable dt_MySummaryTable = mdsResult.Tables["MySummaryTable"].Copy();
                    lst_MySummaryTable = TUtils.DataTableCmUtils.ToListof<MySummaryTable>(dt_MySummaryTable);
                    objRT_Invoice_Invoice.MySummaryTable = lst_MySummaryTable[0];
                    ////
                    ////
                    if (bGet_Invoice_Invoice)
                    {
                        ////
                        DataTable dt_Invoice_Invoice = mdsResult.Tables["Invoice_Invoice"].Copy();
                        lst_Invoice_Invoice = TUtils.DataTableCmUtils.ToListof<Invoice_Invoice>(dt_Invoice_Invoice);
                        objRT_Invoice_Invoice.Lst_Invoice_Invoice = lst_Invoice_Invoice;
                    }
                    ////
                    if (bGet_Invoice_InvoiceDtl)
                    {
                        ////
                        DataTable dt_Invoice_InvoiceDtl = mdsResult.Tables["Invoice_InvoiceDtl"].Copy();
                        lst_Invoice_InvoiceDtl = TUtils.DataTableCmUtils.ToListof<Invoice_InvoiceDtl>(dt_Invoice_InvoiceDtl);
                        objRT_Invoice_Invoice.Lst_Invoice_InvoiceDtl = lst_Invoice_InvoiceDtl;
                    }
                    ////
                    if (bGet_Invoice_InvoicePrd)
                    {
                        ////
                        DataTable dt_Invoice_InvoicePrd = mdsResult.Tables["Invoice_InvoicePrd"].Copy();
                        lst_Invoice_InvoicePrd = TUtils.DataTableCmUtils.ToListof<Invoice_InvoicePrd>(dt_Invoice_InvoicePrd);
                        objRT_Invoice_Invoice.Lst_Invoice_InvoicePrd = lst_Invoice_InvoicePrd;
                    }
                }
                #endregion

                // Return Good:
                return mdsResult;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsResult
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Write ReturnLog:
                //_cf.ProcessBizReturn(
                //	ref mdsResult // mdsFinal
                //	, strTid // strTid
                //	, strFunctionName // strFunctionName
                //	);
                #endregion
            }
        }


        public DataSet WAS_Invoice_Invoice_GetNoSession_New20190705(
            ref ArrayList alParamsCoupleError
            , RQ_Invoice_Invoice objRQ_Invoice_Invoice
            ////
            , out RT_Invoice_Invoice objRT_Invoice_Invoice
            )
        {
            #region // Temp:
            string strTid = objRQ_Invoice_Invoice.Tid;
            objRT_Invoice_Invoice = new RT_Invoice_Invoice();
            DataSet mdsResult = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            DateTime dtimeSys = DateTime.UtcNow;
            //DataSet mdsExec = null;
            //DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(objRQ_Invoice_Invoice.Tid);
            //int nTidSeq = 0;
            //bool bNeedTransaction = true;
            string strFunctionName = "WAS_Invoice_Invoice_GetNoSession";
            string strErrorCodeDefault = TError.ErridnInventory.WAS_Invoice_Invoice_GetNoSession;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
				});
            #endregion

            try
            {
                #region // Init:
                #endregion

                #region // Refine and Check Input:
                List<MySummaryTable> lst_MySummaryTable = new List<MySummaryTable>();
                List<Invoice_Invoice> lst_Invoice_Invoice = new List<Invoice_Invoice>();
                List<Invoice_InvoiceDtl> lst_Invoice_InvoiceDtl = new List<Invoice_InvoiceDtl>();
                List<Invoice_InvoicePrd> lst_Invoice_InvoicePrd = new List<Invoice_InvoicePrd>();
                /////
                bool bGet_Invoice_Invoice = (objRQ_Invoice_Invoice.Rt_Cols_Invoice_Invoice != null && objRQ_Invoice_Invoice.Rt_Cols_Invoice_Invoice.Length > 0);
                bool bGet_Invoice_InvoiceDtl = (objRQ_Invoice_Invoice.Rt_Cols_Invoice_InvoiceDtl != null && objRQ_Invoice_Invoice.Rt_Cols_Invoice_InvoiceDtl.Length > 0);
                bool bGet_Invoice_InvoicePrd = (objRQ_Invoice_Invoice.Rt_Cols_Invoice_InvoicePrd != null && objRQ_Invoice_Invoice.Rt_Cols_Invoice_InvoicePrd.Length > 0);
                #endregion

                #region // WS_Invoice_Invoice_Get:
                mdsResult = Invoice_Invoice_GetNoSession_New20190705(
                    objRQ_Invoice_Invoice.Tid // strTid
                    , objRQ_Invoice_Invoice.GwUserCode // strGwUserCode
                    , objRQ_Invoice_Invoice.GwPassword // strGwPassword
                    , objRQ_Invoice_Invoice.WAUserCode // strUserCode
                    , objRQ_Invoice_Invoice.WAUserPassword // strUserPassword
                    , ref alParamsCoupleError // alParamsCoupleError
                                              //// Filter:
                    , objRQ_Invoice_Invoice.Ft_RecordStart // strFt_RecordStart
                    , objRQ_Invoice_Invoice.Ft_RecordCount // strFt_RecordCount
                    , objRQ_Invoice_Invoice.Ft_WhereClause // strFt_WhereClause
                                                           //// Return:
                    , objRQ_Invoice_Invoice.Rt_Cols_Invoice_Invoice // strRt_Cols_Invoice_Invoice
                    , objRQ_Invoice_Invoice.Rt_Cols_Invoice_InvoiceDtl // Rt_Cols_Invoice_InvoiceDtl
                                                                       //, objRQ_Invoice_Invoice.Rt_Cols_Invoice_InvoicePrd // Rt_Cols_Invoice_InvoicePrd
                                                                       //, objRQ_Invoice_Invoice.Rt_Cols_Invoice_InvoiceVAT // Rt_Cols_Invoice_InvoiceVAT
                    );
                #endregion

                #region // GetData:
                if (!CmUtils.CMyDataSet.HasError(mdsResult))
                {
                    ////
                    DataTable dt_MySummaryTable = mdsResult.Tables["MySummaryTable"].Copy();
                    lst_MySummaryTable = TUtils.DataTableCmUtils.ToListof<MySummaryTable>(dt_MySummaryTable);
                    objRT_Invoice_Invoice.MySummaryTable = lst_MySummaryTable[0];
                    ////
                    ////
                    if (bGet_Invoice_Invoice)
                    {
                        ////
                        DataTable dt_Invoice_Invoice = mdsResult.Tables["Invoice_Invoice"].Copy();
                        lst_Invoice_Invoice = TUtils.DataTableCmUtils.ToListof<Invoice_Invoice>(dt_Invoice_Invoice);
                        objRT_Invoice_Invoice.Lst_Invoice_Invoice = lst_Invoice_Invoice;
                    }
                    ////
                    if (bGet_Invoice_InvoiceDtl)
                    {
                        ////
                        DataTable dt_Invoice_InvoiceDtl = mdsResult.Tables["Invoice_InvoiceDtl"].Copy();
                        lst_Invoice_InvoiceDtl = TUtils.DataTableCmUtils.ToListof<Invoice_InvoiceDtl>(dt_Invoice_InvoiceDtl);
                        objRT_Invoice_Invoice.Lst_Invoice_InvoiceDtl = lst_Invoice_InvoiceDtl;
                    }
                    ////
                    //if (bGet_Invoice_InvoicePrd)
                    //{
                    //    ////
                    //    DataTable dt_Invoice_InvoicePrd = mdsResult.Tables["Invoice_InvoicePrd"].Copy();
                    //    lst_Invoice_InvoicePrd = TUtils.DataTableCmUtils.ToListof<Invoice_InvoicePrd>(dt_Invoice_InvoicePrd);
                    //    objRT_Invoice_Invoice.Lst_Invoice_InvoicePrd = lst_Invoice_InvoicePrd;
                    //}
                }
                #endregion

                // Return Good:
                return mdsResult;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsResult
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Write ReturnLog:
                //_cf.ProcessBizReturn(
                //	ref mdsResult // mdsFinal
                //	, strTid // strTid
                //	, strFunctionName // strFunctionName
                //	);
                #endregion
            }
        }
        public DataSet WAS_Invoice_Invoice_ForSearch(
            ref ArrayList alParamsCoupleError
            , RQ_Invoice_Invoice objRQ_Invoice_Invoice
            ////
            , out RT_Invoice_Invoice objRT_Invoice_Invoice
            )
        {
            #region // Temp:
            string strTid = objRQ_Invoice_Invoice.Tid;
            objRT_Invoice_Invoice = new RT_Invoice_Invoice();
            DataSet mdsResult = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            DateTime dtimeSys = DateTime.UtcNow;
            //DataSet mdsExec = null;
            //DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(objRQ_Invoice_Invoice.Tid);
            //int nTidSeq = 0;
            //bool bNeedTransaction = true;
            string strFunctionName = "Invoice_Invoice_Get";
            string strErrorCodeDefault = TError.ErridnInventory.Invoice_Invoice_Get;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
				});
            #endregion

            try
            {
                #region // Init:
                #endregion

                #region // Refine and Check Input:
                List<MySummaryTable> lst_MySummaryTable = new List<MySummaryTable>();
                List<Invoice_Invoice> lst_Invoice_Invoice = new List<Invoice_Invoice>();
                List<Invoice_InvoiceDtl> lst_Invoice_InvoiceDtl = new List<Invoice_InvoiceDtl>();
                List<Invoice_InvoicePrd> lst_Invoice_InvoicePrd = new List<Invoice_InvoicePrd>();
                /////
                bool bGet_Invoice_Invoice = (objRQ_Invoice_Invoice.Rt_Cols_Invoice_Invoice != null && objRQ_Invoice_Invoice.Rt_Cols_Invoice_Invoice.Length > 0);
                bool bGet_Invoice_InvoiceDtl = (objRQ_Invoice_Invoice.Rt_Cols_Invoice_InvoiceDtl != null && objRQ_Invoice_Invoice.Rt_Cols_Invoice_InvoiceDtl.Length > 0);
                bool bGet_Invoice_InvoicePrd = (objRQ_Invoice_Invoice.Rt_Cols_Invoice_InvoicePrd != null && objRQ_Invoice_Invoice.Rt_Cols_Invoice_InvoicePrd.Length > 0);
                #endregion

                #region // WS_Invoice_Invoice_Get:
                mdsResult = Invoice_Invoice_Get(
                    objRQ_Invoice_Invoice.Tid // strTid
                    , objRQ_Invoice_Invoice.GwUserCode // strGwUserCode
                    , objRQ_Invoice_Invoice.GwPassword // strGwPassword
                    , objRQ_Invoice_Invoice.WAUserCode // strUserCode
                    , objRQ_Invoice_Invoice.WAUserPassword // strUserPassword
                    , ref alParamsCoupleError // alParamsCoupleError
                                              //// Filter:
                    , objRQ_Invoice_Invoice.Ft_RecordStart // strFt_RecordStart
                    , objRQ_Invoice_Invoice.Ft_RecordCount // strFt_RecordCount
                    , objRQ_Invoice_Invoice.Ft_WhereClause // strFt_WhereClause
                                                           //// Return:
                    , objRQ_Invoice_Invoice.Rt_Cols_Invoice_Invoice // strRt_Cols_Invoice_Invoice
                    , objRQ_Invoice_Invoice.Rt_Cols_Invoice_InvoiceDtl // Rt_Cols_Invoice_InvoiceDtl
                    , objRQ_Invoice_Invoice.Rt_Cols_Invoice_InvoicePrd // Rt_Cols_Invoice_InvoicePrd
                    , objRQ_Invoice_Invoice.Rt_Cols_Invoice_InvoiceVAT // Rt_Cols_Invoice_InvoiceVAT
                    );
                #endregion

                #region // GetData:
                if (!CmUtils.CMyDataSet.HasError(mdsResult))
                {
                    ////
                    DataTable dt_MySummaryTable = mdsResult.Tables["MySummaryTable"].Copy();
                    lst_MySummaryTable = TUtils.DataTableCmUtils.ToListof<MySummaryTable>(dt_MySummaryTable);
                    objRT_Invoice_Invoice.MySummaryTable = lst_MySummaryTable[0];
                    ////
                    ////
                    if (bGet_Invoice_Invoice)
                    {
                        ////
                        DataTable dt_Invoice_Invoice = mdsResult.Tables["Invoice_Invoice"].Copy();
                        lst_Invoice_Invoice = TUtils.DataTableCmUtils.ToListof<Invoice_Invoice>(dt_Invoice_Invoice);
                        objRT_Invoice_Invoice.Lst_Invoice_Invoice = lst_Invoice_Invoice;
                    }
                    ////
                    if (bGet_Invoice_InvoiceDtl)
                    {
                        ////
                        DataTable dt_Invoice_InvoiceDtl = mdsResult.Tables["Invoice_InvoiceDtl"].Copy();
                        lst_Invoice_InvoiceDtl = TUtils.DataTableCmUtils.ToListof<Invoice_InvoiceDtl>(dt_Invoice_InvoiceDtl);
                        objRT_Invoice_Invoice.Lst_Invoice_InvoiceDtl = lst_Invoice_InvoiceDtl;
                    }
                    ////
                    if (bGet_Invoice_InvoicePrd)
                    {
                        ////
                        DataTable dt_Invoice_InvoicePrd = mdsResult.Tables["Invoice_InvoicePrd"].Copy();
                        lst_Invoice_InvoicePrd = TUtils.DataTableCmUtils.ToListof<Invoice_InvoicePrd>(dt_Invoice_InvoicePrd);
                        objRT_Invoice_Invoice.Lst_Invoice_InvoicePrd = lst_Invoice_InvoicePrd;
                    }
                }
                #endregion

                // Return Good:
                return mdsResult;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsResult
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Write ReturnLog:
                //_cf.ProcessBizReturn(
                //	ref mdsResult // mdsFinal
                //	, strTid // strTid
                //	, strFunctionName // strFunctionName
                //	);
                #endregion
            }
        }
        private void Invoice_Invoice_SaveX(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            , DateTime dtimeSys
            ////
            , object objFlagIsDelete
            ////
            , object objInvoiceCode
            , object objRefNo
            , object objInvoiceAdjType
            , object objMST
            , object objSourceInvoiceCode
            , object objPaymentMethodCode
            , object objCustomerNNTCode
            , object objCustomerNNTName
            , object objCustomerNNTAddress
            , object objCustomerNNTPhone
            , object objCustomerNNTBankName
            , object objCustomerNNTEmail
            , object objCustomerNNTAccNo
            , object objCustomerNNTBuyerName
            , object objCustomerMST
            , object objTInvoiceCode
            , object objInvoiceDateUTC
            , object objTotalValInvoice
            , object objTotalValVAT
            , object objTotalValPmt
            , object objRemark
            ////
            , DataSet dsData
            )
        {
            #region // Temp:
            //int nTidSeq = 0;
            //bool bMyDebugSql = false;
            string strFunctionName = "Invoice_Invoice_SaveX";
            //string strErrorCodeDefault = TError.ErridnInventory.Invoice_Invoice_SaveX;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
                ////
                , "objFlagIsDelete",objFlagIsDelete
				////
                , "objInvoiceCode", objInvoiceCode
                , "objRefNo", objRefNo
                , "objInvoiceAdjType", objInvoiceAdjType
                , "objMST", objMST
                , "objSourceInvoiceCode", objSourceInvoiceCode
                , "objPaymentMethodCode", objPaymentMethodCode
                , "objCustomerNNTCode", objCustomerNNTCode
                , "objCustomerNNTName", objCustomerNNTName
                , "objCustomerNNTAddress", objCustomerNNTAddress
                , "objCustomerNNTPhone", objCustomerNNTPhone
                , "objCustomerNNTBankName", objCustomerNNTBankName
                , "objCustomerNNTEmail", objCustomerNNTEmail
                , "objCustomerNNTAccNo", objCustomerNNTAccNo
                , "objCustomerNNTBuyerName", objCustomerNNTBuyerName
                , "objCustomerMST", objCustomerMST
                , "objTInvoiceCode", objTInvoiceCode
                , "objInvoiceDateUTC", objInvoiceDateUTC
                , "objTotalValInvoice", objTotalValInvoice
                , "objTotalValVAT", objTotalValVAT
                , "obTotalValPmt", objTotalValPmt
                , "objRemark", objRemark
                });
            //ArrayList alPCErrEx = new ArrayList();
            ////
            Hashtable htParamsSql = new Hashtable();
            #endregion

            #region // Convert Input:
            //DataSet dsData = TUtils.CUtils.StdDS(arrobjDSData);
            //if (dsData == null) dsData = new DataSet("dsData");
            //dsData.AcceptChanges();
            alParamsCoupleError.AddRange(new object[]{
                "Check.dsData", CmUtils.XmlUtils.DataSet2XmlSimple(dsData)
                });
            #endregion

            #region // Refine and Check Input:
            ////
            DataRow drAbilityOfUser = Sys_User_GetAbilityViewOfUser(strWAUserCode);
            ////
            bool bIsDelete = CmUtils.StringUtils.StringEqual(objFlagIsDelete, TConst.Flag.Yes);
            ////
            string strInvoiceCode = TUtils.CUtils.StdParam(objInvoiceCode);
            string strRefNo = TUtils.CUtils.StdParam(objRefNo);
            string strInvoiceAdjType = TUtils.CUtils.StdParam(objInvoiceAdjType);
            string strMST = TUtils.CUtils.StdParam(objMST);
            string strSourceInvoiceCode = TUtils.CUtils.StdParam(objSourceInvoiceCode);
            string strPaymentMethodCode = TUtils.CUtils.StdParam(objPaymentMethodCode);
            string strCustomerNNTCode = TUtils.CUtils.StdParam(objCustomerNNTCode);
            string strCustomerNNTName = string.Format("{0}", objCustomerNNTName);
            string strCustomerNNTAddress = string.Format("{0}", objCustomerNNTAddress);
            string strCustomerNNTPhone = string.Format("{0}", objCustomerNNTPhone);
            string strCustomerNNTBankName = string.Format("{0}", objCustomerNNTBankName);
            string strCustomerNNTEmail = string.Format("{0}", objCustomerNNTEmail);
            string strCustomerNNTAccNo = string.Format("{0}", objCustomerNNTAccNo);
            string strCustomerNNTBuyerName = string.Format("{0}", objCustomerNNTBuyerName);
            string strCustomerMST = string.Format("{0}", objCustomerMST);
            string strTInvoiceCode = TUtils.CUtils.StdParam(objTInvoiceCode);
            string strInvoiceDateUTC = TUtils.CUtils.StdDate(objInvoiceDateUTC);
            string strRemark = string.Format("{0}", objRemark);
            //objTotalValInvoice = 0.0;
            //objTotalValVAT = 0.0;
            //objTotalValPmt = 0.0;
            ////
            string strCreateDTimeUTC = null;
            string strCreateBy = null;
            string strSpec_Prd_Type = null;
            ////
            DataTable dtDB_Invoice_Invoice = null;
            {
                ////
                if (strInvoiceCode == null || strInvoiceCode.Length < 1)
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.strTInvoiceCode", strTInvoiceCode
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Invoice_Invoice_SaveX_InvalidInvoiceCode
                        , null
                        , alParamsCoupleError.ToArray()
                        );
                }
                ////
                Invoice_Invoice_CheckDB(
                    ref alParamsCoupleError // alParamsCoupleError
                    , strInvoiceCode // objShipNo
                    , "" // strFlagExistToCheck
                    , "" // strInvoiceStatusListToCheck
                    , out dtDB_Invoice_Invoice // dtDB_Invoice_Invoice
                    );
                ////
                if (dtDB_Invoice_Invoice.Rows.Count < 1) // Chưa tồn tại
                {
                    if (bIsDelete)
                    {
                        goto MyCodeLabel_Done; // Thành công
                    }
                    else
                    {
                        //// Nothing
                    }
                }
                else // Đã tồn tại Invoice_TempInvoice:
                {
                    if (!CmUtils.StringUtils.StringEqualIgnoreCase(dtDB_Invoice_Invoice.Rows[0]["InvoiceStatus"], TConst.TInvoiceStatus.Pending))
                    {
                        alParamsCoupleError.AddRange(new object[]{
                            "Check.DB.InvoiceStatus", dtDB_Invoice_Invoice.Rows[0]["InvoiceStatus"]
                            , "Check.InputStatus.Expected", TConst.InvoiceStatus.Pending
                            });
                        throw CmUtils.CMyException.Raise(
                            TError.ErridnInventory.Invoice_Invoice_SaveX_StatusNotMatched
                            , null
                            , alParamsCoupleError.ToArray()
                            );
                    }
                    else
                    {
                        strCreateDTimeUTC = TUtils.CUtils.StdDTime(dtDB_Invoice_Invoice.Rows[0]["CreateDTimeUTC"]);
                        strCreateBy = TUtils.CUtils.StdParam(dtDB_Invoice_Invoice.Rows[0]["CreateBy"]);
                    }
                    ///// Đã cấp số hóa đơn thì không được Xóa.
                    if (!string.IsNullOrEmpty(dtDB_Invoice_Invoice.Rows[0]["InvoiceNo"].ToString())
                        && bIsDelete)
                    {
                        alParamsCoupleError.AddRange(new object[]{
                            "Check.strTInvoiceCode", strTInvoiceCode
                            , "Check.objFlagIsDelete", objFlagIsDelete
                            , "Check.strInvoiceNo", dtDB_Invoice_Invoice.Rows[0]["InvoiceNo"]
                            });
                        throw CmUtils.CMyException.Raise(
                            TError.ErridnInventory.Invoice_Invoice_SaveX_ExistInvoiceNo
                            , null
                            , alParamsCoupleError.ToArray()
                            );
                    }
                    ////
                }
                strCreateDTimeUTC = string.IsNullOrEmpty(strCreateDTimeUTC) ? dtimeSys.ToString("yyyy-MM-dd HH:mm:ss") : strCreateDTimeUTC;
                strCreateBy = string.IsNullOrEmpty(strCreateBy) ? strWAUserCode : strCreateBy;
                ////
                if (CmUtils.StringUtils.StringEqualIgnoreCase(TConst.InvoiceAdjType.AdjInCrease, objInvoiceAdjType)
                    || CmUtils.StringUtils.StringEqualIgnoreCase(TConst.InvoiceAdjType.AdjDescrease, objInvoiceAdjType))
                {
                    if (string.IsNullOrEmpty(strRefNo))
                    {
                        alParamsCoupleError.AddRange(new object[]{
                            "Check.strRefNo", strRefNo
                            , "Check.InvoiceAdjType", objInvoiceAdjType
                            , "Check.RefNo.Expected", "Is Not null"
                            });
                        throw CmUtils.CMyException.Raise(
                            TError.ErridnInventory.Invoice_Invoice_SaveX_InvoiceAdjTypeIsNotNull
                            , null
                            , alParamsCoupleError.ToArray()
                            );

                    }
                }
                ////
                if (!string.IsNullOrEmpty(strRefNo))
                {
                    if (CmUtils.StringUtils.StringEqualIgnoreCase(TConst.SourceInvoiceCode.InvoiceReplace, objSourceInvoiceCode))
                    //// 
                    {
                        ////
                        DataTable dtDB_Invoice_Invoice_RefNo = null;

                        Invoice_Invoice_CheckDB(
                            ref alParamsCoupleError // alParamsCoupleError
                            , strRefNo // objInvoiceCode
                            , TConst.Flag.Yes // strFlagExistToCheck
                            , TConst.InvoiceStatus.Deleted // strInvoiceStatusListToCheck
                            , out dtDB_Invoice_Invoice_RefNo // dtDB_Invoice_Invoice_RefNo
                            );
                        ////
                        if (bIsDelete)
                        {
                            alParamsCoupleError.AddRange(new object[]{
                                "Check.strTInvoiceCode", strTInvoiceCode
                                , "Check.objFlagIsDelete", objFlagIsDelete
                                , "Check.objSourceInvoiceCode", objSourceInvoiceCode
                                });
                            throw CmUtils.CMyException.Raise(
                                TError.ErridnInventory.Invoice_Invoice_SaveX_NotDelete
                                , null
                                , alParamsCoupleError.ToArray()
                                );
                        }
                        ////
                    }
                    else if (CmUtils.StringUtils.StringEqualIgnoreCase(TConst.SourceInvoiceCode.InvoiceADJ, objSourceInvoiceCode))
                    {
                        DataTable dtDB_Invoice_Invoice_RefNo = null;

                        Invoice_Invoice_CheckDB(
                            ref alParamsCoupleError // alParamsCoupleError
                            , strRefNo // objInvoiceCode
                            , TConst.Flag.Yes // strFlagExistToCheck
                            , TConst.InvoiceStatus.Issued // strInvoiceStatusListToCheck
                            , out dtDB_Invoice_Invoice_RefNo // dtDB_Invoice_Invoice_RefNo
                            );
                        ////

                    }
                    else
                    {
                        DataTable dtDB_Invoice_Invoice_RefNo = null;

                        Invoice_Invoice_CheckDB(
                            ref alParamsCoupleError // alParamsCoupleError
                            , strRefNo // objInvoiceCode
                            , TConst.Flag.Yes // strFlagExistToCheck
                            , "" // strInvoiceStatusListToCheck
                            , out dtDB_Invoice_Invoice_RefNo // dtDB_Invoice_Invoice_RefNo
                            );
                        ////

                    }

                }
                ////
                DataTable dtDB_Mst_NNT = null;

                Mst_NNT_CheckDB(
                    ref alParamsCoupleError // alParamsCoupleError
                    , strMST // objNNTType
                    , TConst.Flag.Yes // strFlagExistToCheck
                    , TConst.Flag.Active // strFlagActiveListToCheck
                    , "" // strTCTStatusListToCheck
                    , out dtDB_Mst_NNT // dtDB_Mst_NNT
                    );
                ////
                DataTable dtDB_Mst_PaymentMethods = null;

                Mst_PaymentMethods_CheckDB(
                    ref alParamsCoupleError // alParamsCoupleError
                    , strPaymentMethodCode // objPaymentMethodCode
                    , TConst.Flag.Yes // strFlagExistToCheck
                    , TConst.Flag.Active // strFlagActiveListToCheck
                    , out dtDB_Mst_PaymentMethods // dtDB_Mst_PaymentMethods
                    );
                ////
                DataTable dtDB_Mst_SourceInvoice = null;

                Mst_SourceInvoice_CheckDB(
                    ref alParamsCoupleError // alParamsCoupleError
                    , strSourceInvoiceCode // objSourceInvoiceCode
                    , TConst.Flag.Yes // strFlagExistToCheck
                    , TConst.Flag.Active // strFlagActiveListToCheck
                    , out dtDB_Mst_SourceInvoice // dtDB_Mst_SourceInvoice
                    );
                ////
                DataTable dtDB_Mst_PamentMethods = null;

                Mst_PaymentMethods_CheckDB(
                    ref alParamsCoupleError // alParamsCoupleError
                    , strPaymentMethodCode // objPaymentMethodCode
                    , TConst.Flag.Yes // strFlagExistToCheck
                    , TConst.Flag.Active // strFlagActiveListToCheck
                    , out dtDB_Mst_PamentMethods // dtDB_Mst_SourceInvoice
                    );
                ////
                DataTable dtDB_Invoice_TempInvoice = null;

                Invoice_TempInvoice_CheckDB(
                    ref alParamsCoupleError // alParamsCoupleError
                    , strTInvoiceCode // objTInvoiceCode
                    , TConst.Flag.Yes // strFlagExistToCheck
                    , TConst.TInvoiceStatus.Issued // strTInvoiceStatusListToCheck
                    , TConst.Flag.Active // strFlagActiveListToCheck
                    , out dtDB_Invoice_TempInvoice // dtDB_Invoice_TempInvoice
                    );
                ////
                DataTable dtDB_Invoice_TempGroup = null;

                Invoice_TempGroup_CheckDB(
                    ref alParamsCoupleError // alParamsCoupleError
                    , dtDB_Invoice_TempInvoice.Rows[0]["InvoiceTGroupCode"] // objInvoiceTGroupCode
                    , TConst.Flag.Yes // strFlagExistToCheck
                    , TConst.Flag.Active // strFlagActiveListToCheck
                    , out dtDB_Invoice_TempGroup // dtDB_Invoice_TempGroup
                    );
                ////
                strSpec_Prd_Type = TUtils.CUtils.StdParam(dtDB_Invoice_TempGroup.Rows[0]["Spec_Prd_Type"]);
                ////
                if (!CmUtils.StringUtils.StringEqualIgnoreCase(drAbilityOfUser["MST"], dtDB_Invoice_TempInvoice.Rows[0]["MST"]))
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.DB.NNT.MST", drAbilityOfUser["MST"]
                        , "Check.Invoice_TempInvoice.MST", dtDB_Invoice_TempInvoice.Rows[0]["MST"]
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Invoice_Invoice_SaveX_InvalidMSTOfNNTAndTempInvoice
                        , null
                        , alParamsCoupleError.ToArray()
                        );

                }
                ////
                Int64 nStartInvoiceNo = Convert.ToInt64(dtDB_Invoice_TempInvoice.Rows[0]["StartInvoiceNo"]);
                Int64 nEndInvoiceNo = Convert.ToInt64(dtDB_Invoice_TempInvoice.Rows[0]["EndInvoiceNo"]);
                Int64 nQtyUsed = Convert.ToInt64(dtDB_Invoice_TempInvoice.Rows[0]["QtyUsed"]);
                ///
                if ((nEndInvoiceNo - nStartInvoiceNo + 1 - nQtyUsed) < 1)
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.strTInvoiceCode", strTInvoiceCode
                        , "Check.DB.StartInvoiceNo", nStartInvoiceNo
                        , "Check.DB.EndInvoiceNo", nEndInvoiceNo
                        , "Check.DB.QtyUsed", nQtyUsed
                        , "Check.ErrConditionRaise", "((nEndInvoiceNo - nStartInvoiceNo - nQtyUsed)< 1)"
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Invoice_Invoice_SaveX_InvalidQtyIssueRemain
                        , null
                        , alParamsCoupleError.ToArray()
                        );

                }
                ////
                string strLastInvoiceDateUTC = dtDB_Invoice_TempInvoice.Rows[0]["LastInvoiceDateUTC"].ToString();
                if (!string.IsNullOrEmpty(strLastInvoiceDateUTC) && !string.IsNullOrEmpty(strInvoiceDateUTC) && !bIsDelete)
                {
                    if (strInvoiceDateUTC.CompareTo(strLastInvoiceDateUTC) < 0)
                    {
                        alParamsCoupleError.AddRange(new object[]{
                            "Check.strInvoiceCode", strInvoiceCode
                            , "Check.DB.TInvoiceCode", strTInvoiceCode
                            , "Check.DB.LastInvoiceDateUTC", strLastInvoiceDateUTC
                            , "Check.strInvoiceDateUTC", strInvoiceDateUTC
                            });
                        throw CmUtils.CMyException.Raise(
                            TError.ErridnInventory.Invoice_Invoice_SaveX_InvalidInvoiceDateUTCBeforeLastInvoiceDateUTC
                            , null
                            , alParamsCoupleError.ToArray()
                            );
                    }
                }
                ////
                if (!bIsDelete)
                {
                    if (strInvoiceDateUTC.CompareTo(dtimeSys.ToString("yyyy-MM-dd")) > 0)
                    {
                        alParamsCoupleError.AddRange(new object[]{
                            "Check.strInvoiceCode", strInvoiceCode
                            , "Check.DB.TInvoiceCode", strTInvoiceCode
                            , "Check.SysDate", dtimeSys.ToString("yyyy-MM-dd")
                            , "Check.strInvoiceDateUTC", strInvoiceDateUTC
                            });
                        throw CmUtils.CMyException.Raise(
                            TError.ErridnInventory.Invoice_Invoice_SaveX_Input_Invoice_InvaliInvoiceDateUTCAfterSysDate
                            , null
                            , alParamsCoupleError.ToArray()
                            );
                    }
                    ////
                }
                ////
                DataTable dtDB_Mst_CustomerNNT = null;

                Mst_CustomerNNT_CheckDB(
                    ref alParamsCoupleError // alParamsCoupleError
                    , objCustomerNNTCode // strCustomerNNTCode
                    , objMST // strMST
                    , TConst.Flag.Yes // strFlagExistToCheck
                    , TConst.Flag.Active // strFlagActiveListToCheck
                    , out dtDB_Mst_CustomerNNT // dtDB_Invoice_TempInvoice
                    );
                ////
                if (!CmUtils.StringUtils.StringEqualIgnoreCase(drAbilityOfUser["MST"], strMST))
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.DB.NNT.MST", drAbilityOfUser["MST"]
                        , "Check.strMST", strMST
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Invoice_Invoice_SaveX_InvalidMSTOfNNTAndCustomer
                        , null
                        , alParamsCoupleError.ToArray()
                        );

                }
            }
            #endregion

            #region // SaveTemp Invoice_Invoice:
            {
                ////
                TUtils.CUtils.MyBuildDBDT_Common(
                    _cf.db
                    , "#input_Invoice_Invoice"
                    //, TConst.BizMix.Default_DBColType // strDefaultType
                    , new object[]{
                        "InvoiceCode", TConst.BizMix.Default_DBColType,
                        "NetworkID", TConst.BizMix.Default_DBColType,
                        "RefNo", TConst.BizMix.Default_DBColType,
                        "InvoiceAdjType", TConst.BizMix.Default_DBColType,
                        "MST", TConst.BizMix.Default_DBColType,
                        "SourceInvoiceCode", TConst.BizMix.Default_DBColType,
                        "PaymentMethodCode", TConst.BizMix.Default_DBColType,
                        "CustomerNNTCode", TConst.BizMix.Default_DBColType,
                        "CustomerNNTName", TConst.BizMix.Default_DBColType,
                        "CustomerNNTAddress", TConst.BizMix.Default_DBColType,
                        "CustomerNNTPhone", TConst.BizMix.Default_DBColType,
                        "CustomerNNTBankName", TConst.BizMix.Default_DBColType,
                        "CustomerNNTEmail", TConst.BizMix.Default_DBColType,
                        "CustomerNNTAccNo", TConst.BizMix.Default_DBColType,
                        "CustomerNNTBuyerName", TConst.BizMix.Default_DBColType,
                        "CustomerMST", TConst.BizMix.Default_DBColType,
                        "TInvoiceCode", TConst.BizMix.Default_DBColType,
                        "InvoiceNo", TConst.BizMix.Default_DBColType,
                        "InvoiceDateUTC", TConst.BizMix.Default_DBColType,
                        "EmailSend", TConst.BizMix.Default_DBColType,
                        "InvoiceFilePath", TConst.BizMix.Default_DBColType,
                        "TotalValInvoice", TConst.BizMix.Default_DBColType,
                        "TotalValVAT", TConst.BizMix.Default_DBColType,
                        "TotalValPmt", TConst.BizMix.Default_DBColType,
                        "CreateDTimeUTC", TConst.BizMix.Default_DBColType,
                        "CreateBy", TConst.BizMix.Default_DBColType,
                        "InvoiceNoDTimeUTC", TConst.BizMix.Default_DBColType,
                        "InvoiceNoBy", TConst.BizMix.Default_DBColType,
                        "SignDTimeUTC", TConst.BizMix.Default_DBColType,
                        "SignBy", TConst.BizMix.Default_DBColType,
                        "ApprDTimeUTC", TConst.BizMix.Default_DBColType,
                        "ApprBy", TConst.BizMix.Default_DBColType,
                        "CancelDTimeUTC", TConst.BizMix.Default_DBColType,
                        "CancelBy", TConst.BizMix.Default_DBColType,
                        "SendEmailDTimeUTC", TConst.BizMix.Default_DBColType,
                        "SendEmailBy", TConst.BizMix.Default_DBColType,
                        "IssuedDTimeUTC", TConst.BizMix.Default_DBColType,
                        "IssuedBy", TConst.BizMix.Default_DBColType,
                        "DeleteDTimeUTC", TConst.BizMix.Default_DBColType,
                        "DeleteBy", TConst.BizMix.Default_DBColType,
                        "ChangeDTimeUTC", TConst.BizMix.Default_DBColType,
                        "ChangeBy", TConst.BizMix.Default_DBColType,
                        "LUDTimeUTC", TConst.BizMix.Default_DBColType,
                        "LUBy", TConst.BizMix.Default_DBColType,
                        "Remark", TConst.BizMix.Default_DBColType,
                        "FlagChange", TConst.BizMix.Default_DBColType,
                        "InvoiceStatus", TConst.BizMix.Default_DBColType,
                        "LogLUDTimeUTC", TConst.BizMix.Default_DBColType,
                        "LogLUBy", TConst.BizMix.Default_DBColType,
                        }
                    , new object[]{
                            new object[]{
                                strInvoiceCode, // InvoiceCode
                                nNetworkID, // NetworkID
                                strRefNo, // RefNo
                                strInvoiceAdjType, // InvoiceAdjType
                                strMST, // MST
                                strSourceInvoiceCode, // SourceInvoiceCode
                                strPaymentMethodCode, // PaymentMethodCode
                                strCustomerNNTCode, // CustomerNNTCode
                                strCustomerNNTName, // CustomerNNTName
                                strCustomerNNTAddress, // CustomerNNTAddress
                                strCustomerNNTPhone, // CustomerNNTPhone
                                strCustomerNNTBankName, // CustomerNNTBankName
                                strCustomerNNTEmail, // CustomerNNTEmail
                                strCustomerNNTAccNo, // CustomerNNTAccNo
                                strCustomerNNTBuyerName, // CustomerNNTBuyerName
                                strCustomerMST, // CustomerMST
                                strTInvoiceCode, // TInvoiceCode
                                null, // InvoiceNo
                                strInvoiceDateUTC, // InvoiceDateUTC
                                null, // EmailSend
                                null, // InvoiceFilePath
                                objTotalValInvoice, // TotalValInvoice
                                objTotalValVAT, // TotalValVAT
                                objTotalValPmt, // TotalValPmt
                                strCreateDTimeUTC, // CreateDTimeUTC
                                strCreateBy, // CreateBy
                                null, // InvoiceNoDTimeUTC
                                null, // InvoiceBy
                                null, // SignDTimeUTC
                                null, // SignBy
                                null, // ApprDTimeUTC
                                null, // ApprBy
                                null, // CancelDTimeUTC
                                null, // CancelBy
                                null, // SendEmailDTimeUTC
                                null, // SendEmailBy
                                null, // IssuedDTimeUTC
                                null, // IssuedBy
                                null, // DeleteDTimeUTC
                                null, // DeleteBy
                                null, // ChangeDTimeUTC
                                null, // ChangeBy
                                dtimeSys.ToString("yyyy-MM-dd HH:mm:ss"), // LUDTimeUTC
                                strWAUserCode, // LogLUBy
                                strRemark, // Remark
                                TConst.Flag.Active, // FlagChange
                                TConst.InvoiceStatus.Pending, // InvoiceStatus
                                dtimeSys.ToString("yyyy-MM-dd HH:mm:ss"), // LogLUDTimeUTC
                                strWAUserCode // LogLUBy
                                }
                        }
                    );

            }
            #endregion

            #region //// Refine and Check Input Invoice_InvoiceDtl:
            ////
            DataTable dtInput_Invoice_InvoiceDtl = null;
            if (!bIsDelete)
            {
                ////
                string strTableCheck = "Invoice_InvoiceDtl";
                ////
                if (!dsData.Tables.Contains(strTableCheck))
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.TableName", strTableCheck
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Invoice_Invoice_SaveX_Input_InvoiceDtlTblNotFound
                        , null
                        , alParamsCoupleError.ToArray()
                        );
                }
                dtInput_Invoice_InvoiceDtl = dsData.Tables[strTableCheck];
                ////
                ///
                if (CmUtils.StringUtils.StringEqualIgnoreCase(strSpec_Prd_Type, TConst.Spec_Prd_Type.Spec))
                {
                    if (dtInput_Invoice_InvoiceDtl.Rows.Count < 1)
                    {
                        alParamsCoupleError.AddRange(new object[]{
                            "Check.TableName", strTableCheck
                            });
                        throw CmUtils.CMyException.Raise(
                            TError.ErridnInventory.Invoice_Invoice_SaveX_Input_InvoiceDtlTblInvalid
                            , null
                            , alParamsCoupleError.ToArray()
                            );
                    }

                }
                ////
                TUtils.CUtils.StdDataInTable(
                    dtInput_Invoice_InvoiceDtl // dtData
                    , "StdParam", "SpecCode" // arrstrCouple
                    , "StdParam", "VATRateCode" // arrstrCouple
                    , "float", "VATRate" // arrstrCouple
                    , "StdParam", "UnitCode" // arrstrCouple
                    , "float", "UnitPrice" // arrstrCouple
                    , "float", "Qty" // arrstrCouple
                    );
                ////
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_InvoiceDtl, "InvoiceCode", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_InvoiceDtl, "NetworkID", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_InvoiceDtl, "InvoiceDtlStatus", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_InvoiceDtl, "LogLUDTimeUTC", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_InvoiceDtl, "LogLUBy", typeof(object));
                ////
                for (int nScan = 0; nScan < dtInput_Invoice_InvoiceDtl.Rows.Count; nScan++)
                {
                    ////
                    DataRow drScan = dtInput_Invoice_InvoiceDtl.Rows[nScan];
                    ////
                    string strVATRateCode = TUtils.CUtils.StdParam(drScan["VATRateCode"]);
                    ////
                    DataTable dtDB_Mst_VATRate = null;
                    if (!string.IsNullOrEmpty(strVATRateCode))
                    {
                        ////
                        Mst_VATRate_CheckDB(
                            ref alParamsCoupleError
                            , drScan["VATRateCode"] // objVATRateCode
                            , TConst.Flag.Yes // strFlagExistToCheck
                            , TConst.Flag.Active // strFlagActiveListToCheck
                            , out dtDB_Mst_VATRate // dtDB_Mst_VATRate
                            );
                        ////

                    }
                    drScan["InvoiceCode"] = strInvoiceCode;
                    drScan["NetworkID"] = nNetworkID;
                    drScan["InvoiceDtlStatus"] = TConst.InvoiceStatus.Pending;
                    drScan["LogLUDTimeUTC"] = dtimeSys.ToString("yyyy-MM-dd HH:mm:ss");
                    drScan["LogLUBy"] = strWAUserCode;
                    ////
                }
            }
            #endregion

            #region //// SaveTemp Invoice_InvoiceDtl:
            if (!bIsDelete)
            {
                // Upload:
                TUtils.CUtils.MyBuildDBDT_Common(
                    _cf.db // db
                    , "#input_Invoice_InvoiceDtl" // strTableName
                    , new object[] {
                            "InvoiceCode", TConst.BizMix.Default_DBColType
                            , "SpecCode", TConst.BizMix.Default_DBColType
                            , "NetworkID", TConst.BizMix.Default_DBColType
                            , "VATRateCode", TConst.BizMix.Default_DBColType
                            , "VATRate", "float"
                            , "UnitCode", TConst.BizMix.Default_DBColType
                            , "UnitPrice", TConst.BizMix.Default_DBColType
                            , "Qty", "float"
                            , "InvoiceDtlStatus", TConst.BizMix.Default_DBColType
                            , "LogLUDTimeUTC", TConst.BizMix.Default_DBColType
                            , "LogLUBy", TConst.BizMix.Default_DBColType
                        } // arrSingleStructure
                    , dtInput_Invoice_InvoiceDtl // dtData
                );
            }
            #endregion

            #region //// Refine and Check Input Invoice_InvoicePrd:
            ////
            DataTable dtInput_Invoice_InvoicePrd = null;
            if (!bIsDelete)
            {
                ////
                string strTableCheck = "Invoice_InvoicePrd";
                ////
                if (!dsData.Tables.Contains(strTableCheck))
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.TableName", strTableCheck
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Invoice_Invoice_SaveX_InputInvoice_InvoicePrdTblNotFound
                        , null
                        , alParamsCoupleError.ToArray()
                        );
                }
                dtInput_Invoice_InvoicePrd = dsData.Tables[strTableCheck];
                ////
                if (CmUtils.StringUtils.StringEqualIgnoreCase(strSpec_Prd_Type, TConst.Spec_Prd_Type.Product_Id))
                {
                    if (dtInput_Invoice_InvoicePrd.Rows.Count < 1)
                    {
                        alParamsCoupleError.AddRange(new object[]{
                            "Check.TableName", strTableCheck
                            });
                        throw CmUtils.CMyException.Raise(
                            TError.ErridnInventory.Invoice_Invoice_SaveX_Input_InvoicePrdTblInvalid
                            , null
                            , alParamsCoupleError.ToArray()
                            );
                    }

                }
                ////
                TUtils.CUtils.StdDataInTable(
                    dtInput_Invoice_InvoicePrd // dtData
                    , "StdParam", "SpecCode" // arrstrCouple
                    , "StdParam", "ProductID" // arrstrCouple
                    , "StdParam", "VATRateCode" // arrstrCouple
                    , "float", "VATRate" // arrstrCouple
                    , "StdParam", "UnitCode" // arrstrCouple
                    , "float", "UnitPrice" // arrstrCouple
                    , "float", "Qty" // arrstrCouple
                    );
                ////
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_InvoicePrd, "InvoiceCode", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_InvoicePrd, "NetworkID", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_InvoicePrd, "InvoicePrdStatus", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_InvoicePrd, "LogLUDTimeUTC", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_InvoicePrd, "LogLUBy", typeof(object));
                ////
                for (int nScan = 0; nScan < dtInput_Invoice_InvoicePrd.Rows.Count; nScan++)
                {
                    ////
                    DataRow drScan = dtInput_Invoice_InvoicePrd.Rows[nScan];
                    ////
                    string strVATRateCode = TUtils.CUtils.StdParam(drScan["VATRateCode"]);
                    ////
                    DataTable dtDB_Mst_VATRate = null;
                    if (!string.IsNullOrEmpty(strVATRateCode))
                    {
                        ////
                        Mst_VATRate_CheckDB(
                            ref alParamsCoupleError
                            , drScan["VATRateCode"] // objVATRateCode
                            , TConst.Flag.Yes // strFlagExistToCheck
                            , TConst.Flag.Active // strFlagActiveListToCheck
                            , out dtDB_Mst_VATRate // dtDB_Mst_VATRate
                            );
                        ////

                    }
                    drScan["InvoiceCode"] = strInvoiceCode;
                    drScan["NetworkID"] = nNetworkID;
                    drScan["InvoicePrdStatus"] = TConst.InvoiceStatus.Pending;
                    drScan["LogLUDTimeUTC"] = dtimeSys.ToString("yyyy-MM-dd HH:mm:ss");
                    drScan["LogLUBy"] = strWAUserCode;
                    ////
                }
            }
            #endregion

            #region //// SaveTemp Invoice_InvoicePrd:
            if (!bIsDelete)
            {
                // Upload:
                TUtils.CUtils.MyBuildDBDT_Common(
                    _cf.db // db
                    , "#input_Invoice_InvoicePrd" // strTableName
                    , new object[] {
                            "InvoiceCode", TConst.BizMix.Default_DBColType
                            , "ProductID", TConst.BizMix.Default_DBColType
                            , "SpecCode", TConst.BizMix.Default_DBColType
                            , "NetworkID", TConst.BizMix.Default_DBColType
                            , "VATRateCode", TConst.BizMix.Default_DBColType
                            , "VATRate", "float"
                            , "UnitCode", TConst.BizMix.Default_DBColType
                            , "UnitPrice", TConst.BizMix.Default_DBColType
                            , "Qty", "float"
                            , "InvoicePrdStatus", TConst.BizMix.Default_DBColType
                            , "LogLUDTimeUTC", TConst.BizMix.Default_DBColType
                            , "LogLUBy", TConst.BizMix.Default_DBColType
                        } // arrSingleStructure
                    , dtInput_Invoice_InvoicePrd // dtData
                );
            }
            #endregion

            #region // SaveDB:
            {
                //// Clear All:
                {
                    string strSqlDelete = CmUtils.StringUtils.Replace(@"
                            select t.* from #input_Invoice_Invoice t
                            ---- #tbl_Invoice_TempInvoiceDtl:
                            select 
                                t.InvoiceCode
                                , t.SpecCode
                            into #tbl_Invoice_InvoiceDtl
                            from Invoice_InvoiceDtl t --//[mylock]
	                            inner join #input_Invoice_Invoice f --//[mylock]
		                            on t.InvoiceCode = f.InvoiceCode
                            where (1=1)
                            ;

                            --- Delete:
                            ---- Invoice_InvoiceDtl:
                            delete t 
                            from Invoice_InvoiceDtl t --//[mylock]
	                            inner join #tbl_Invoice_InvoiceDtl f --//[mylock]
		                            on t.InvoiceCode = f.InvoiceCode
		                                and t.SpecCode = f.SpecCode
                            where (1=1)
                            ;

                            ---- #tbl_Invoice_InvoicePrd:
                            select 
                                t.InvoiceCode
                                , t.ProductID
                                , t.SpecCode
                            into #tbl_Invoice_InvoicePrd
                            from Invoice_InvoicePrd t --//[mylock]
	                            inner join #input_Invoice_Invoice f --//[mylock]
		                            on t.InvoiceCode = f.InvoiceCode
                            where (1=1)
                            ;

                            --- Delete:
                            ---- Invoice_InvoicePrd:
                            delete t 
                            from Invoice_InvoicePrd t --//[mylock]
	                            inner join #tbl_Invoice_InvoicePrd f --//[mylock]
		                            on t.InvoiceCode = f.InvoiceCode
		                                and t.ProductID = f.ProductID
		                                and t.SpecCode = f.SpecCode
                            where (1=1)
                            ;

                            ---- Invoice_Invoice:
                            delete t
                            from Invoice_Invoice t --//[mylock]
	                            inner join #input_Invoice_Invoice f --//[mylock]
		                            on t.InvoiceCode = f.InvoiceCode
                            where (1=1)
                            ;

                            --- Clear For Debug:
                            drop table #tbl_Invoice_InvoiceDtl;
							");
                    DataSet dtDB = _cf.db.ExecQuery(
                        strSqlDelete
                        );
                }

                //// Insert All:
                if (!bIsDelete)
                {
                    #region // Insert:
                    {
                        ////
                        string zzzzClauseInsert_Invoice_Invoice_zSave = CmUtils.StringUtils.Replace(@"
                                ---- Invoice_TempInvoice:                                
                                insert into Invoice_Invoice(
	                                InvoiceCode
	                                , NetworkID
	                                , RefNo
	                                , InvoiceAdjType
	                                , MST
	                                , SourceInvoiceCode
	                                , PaymentMethodCode
	                                , CustomerNNTCode
	                                , CustomerNNTName
	                                , CustomerNNTAddress
	                                , CustomerNNTPhone
	                                , CustomerNNTBankName
	                                , CustomerNNTEmail
	                                , CustomerNNTAccNo
	                                , CustomerNNTBuyerName
	                                , CustomerMST
	                                , TInvoiceCode
	                                , InvoiceNo
	                                , InvoiceDateUTC
	                                , EmailSend
	                                , InvoiceFilePath
	                                , TotalValInvoice
	                                , TotalValVAT
	                                , TotalValPmt
	                                , CreateDTimeUTC
	                                , CreateBy
	                                , InvoiceNoDTimeUTC
	                                , InvoiceNoBy
	                                , SignDTimeUTC
	                                , SignBy
	                                , ApprDTimeUTC
	                                , ApprBy
	                                , CancelDTimeUTC
	                                , CancelBy
	                                , SendEmailDTimeUTC
	                                , SendEmailBy
	                                , IssuedDTimeUTC
	                                , IssuedBy
	                                , DeleteDTimeUTC
	                                , DeleteBy
	                                , ChangeDTimeUTC
	                                , ChangeBy
	                                , LUDTimeUTC
	                                , LUBy
	                                , Remark
	                                , FlagChange
	                                , InvoiceStatus
	                                , LogLUDTimeUTC
	                                , LogLUBy
                                )
                                select 
	                                t.InvoiceCode
	                                , t.NetworkID
	                                , t.RefNo
	                                , t.InvoiceAdjType
	                                , t.MST
	                                , t.SourceInvoiceCode
	                                , t.PaymentMethodCode
	                                , t.CustomerNNTCode
	                                , t.CustomerNNTName
	                                , t.CustomerNNTAddress
	                                , t.CustomerNNTPhone
	                                , t.CustomerNNTBankName
	                                , t.CustomerNNTEmail
	                                , t.CustomerNNTAccNo
	                                , t.CustomerNNTBuyerName
	                                , t.CustomerMST
	                                , t.TInvoiceCode
	                                , t.InvoiceNo
	                                , t.InvoiceDateUTC
	                                , t.EmailSend
	                                , t.InvoiceFilePath
	                                , t.TotalValInvoice
	                                , t.TotalValVAT
	                                , t.TotalValPmt
	                                , t.CreateDTimeUTC
	                                , t.CreateBy
	                                , t.InvoiceNoDTimeUTC
	                                , t.InvoiceNoBy
	                                , t.SignDTimeUTC
	                                , t.SignBy
	                                , t.ApprDTimeUTC
	                                , t.ApprBy
	                                , t.CancelDTimeUTC
	                                , t.CancelBy
	                                , t.SendEmailDTimeUTC
	                                , t.SendEmailBy
	                                , t.IssuedDTimeUTC
	                                , t.IssuedBy
	                                , t.DeleteDTimeUTC
	                                , t.DeleteBy
	                                , t.ChangeDTimeUTC
	                                , t.ChangeBy
	                                , t.LUDTimeUTC
	                                , t.LUBy
	                                , t.Remark
	                                , t.FlagChange
	                                , t.InvoiceStatus
	                                , t.LogLUDTimeUTC
	                                , t.LogLUBy
                                from #input_Invoice_Invoice t --//[mylock]
                            ");
                        /////
                        string zzzzClauseInsert_Invoice_InvoiceDtl_zSave = CmUtils.StringUtils.Replace(@"
                                ---- Invoice_InvoiceDtl:  
                                insert into Invoice_InvoiceDtl(
	                                InvoiceCode
	                                , SpecCode
	                                , NetworkID
	                                , VATRateCode
	                                , VATRate
	                                , UnitCode
	                                , UnitPrice
	                                , Qty
	                                , InvoiceDtlStatus
	                                , LogLUDTimeUTC
	                                , LogLUBy
                                )
                                select 
	                                t.InvoiceCode
	                                , t.SpecCode
	                                , t.NetworkID
	                                , t.VATRateCode
	                                , t.VATRate
	                                , t.UnitCode
	                                , t.UnitPrice
	                                , t.Qty
	                                , t.InvoiceDtlStatus
	                                , t.LogLUDTimeUTC
	                                , t.LogLUBy
                                from #input_Invoice_InvoiceDtl t
                            ");

                        /////
                        string zzzzClauseInsert_Invoice_InvoicePrd_zSave = CmUtils.StringUtils.Replace(@"
                                ---- Invoice_InvoicePrd:  
                                insert into Invoice_InvoicePrd(
	                                InvoiceCode
	                                , ProductID
	                                , SpecCode
	                                , NetworkID
	                                , VATRateCode
	                                , VATRate
	                                , UnitCode
	                                , UnitPrice
	                                , Qty
	                                , InvoicePrdStatus
	                                , LogLUDTimeUTC
	                                , LogLUBy
                                )
                                select 
	                                t.InvoiceCode
	                                , t.ProductID
	                                , t.SpecCode
	                                , t.NetworkID
	                                , t.VATRateCode
	                                , t.VATRate
	                                , t.UnitCode
	                                , t.UnitPrice
	                                , t.Qty
	                                , t.InvoicePrdStatus
	                                , t.LogLUDTimeUTC
	                                , t.LogLUBy
                                from #input_Invoice_InvoicePrd t
                            ");
                        string strSqlExec = CmUtils.StringUtils.Replace(@"
								----
								zzzzClauseInsert_Invoice_Invoice_zSave			
								----
								zzzzClauseInsert_Invoice_InvoiceDtl_zSave			
								----
								zzzzClauseInsert_Invoice_InvoicePrd_zSave			
								----
							"
                            , "zzzzClauseInsert_Invoice_Invoice_zSave", zzzzClauseInsert_Invoice_Invoice_zSave
                            , "zzzzClauseInsert_Invoice_InvoiceDtl_zSave", zzzzClauseInsert_Invoice_InvoiceDtl_zSave
                            , "zzzzClauseInsert_Invoice_InvoicePrd_zSave", zzzzClauseInsert_Invoice_InvoicePrd_zSave
                            );
                        ////
                        DataSet dsExec = _cf.db.ExecQuery(strSqlExec);
                        ////
                    }
                    #endregion
                }
            }
            #endregion

            #region // Check One RefNo:
            if (!bIsDelete)
            {
                ////
                if (!string.IsNullOrEmpty(strRefNo))
                {
                    myCheck_Invoice_Invoice_RefNo(
                        ref alParamsCoupleError // alParamsCoupleError
                        , dtimeSys // dtimeSys
                        , strRefNo // strRefNo
                        );

                }
                ////
            }
            #endregion

            #region // myCheck_Invoice_Invoice_Total:
            if (!bIsDelete)
            {
                myCheck_Invoice_Invoice_Total(
                    ref alParamsCoupleError // alParamsCoupleError
                    , dtimeSys // dtimeSys
                    , objInvoiceCode // objInvoiceCode
                    );
            }
            #endregion

            #region //// Clear For Debug:.
            if (!bIsDelete)
            {
                ////
                string strSqlClearForDebug = CmUtils.StringUtils.Replace(@"
						---- Clear for Debug:
						drop table #input_Invoice_Invoice;
						drop table #input_Invoice_InvoiceDtl;
					");

                _cf.db.ExecQuery(
                    strSqlClearForDebug
                    );
                ////
            }
            else
            {
                ////
                string strSqlClearForDebug = CmUtils.StringUtils.Replace(@"
						---- Clear for Debug:
						drop table #input_Invoice_Invoice;
					");

                _cf.db.ExecQuery(
                    strSqlClearForDebug
                    );
                ////

            }
        #endregion

        // Return Good:
        MyCodeLabel_Done:
            return;
            //TDALUtils.DBUtils.CommitSafety(_cf.db);
            //mdsFinal.AcceptChanges();
            //return mdsFinal;		
        }
        private void Invoice_Invoice_SaveX_New20190703(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            , DateTime dtimeSys
            ////
            , object objFlagIsDelete
            ////
            , DataSet dsData
            )
        {
            #region // Temp:
            //int nTidSeq = 0;
            //bool bMyDebugSql = false;
            string strFunctionName = "Invoice_Invoice_SaveAllX";
            //string strErrorCodeDefault = TError.ErridnInventory.Invoice_Invoice_SaveAllX;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
                ////
                , "objFlagIsDelete",objFlagIsDelete
				////
                });
            //ArrayList alPCErrEx = new ArrayList();
            ////
            Hashtable htParamsSql = new Hashtable();
            #endregion

            #region // Convert Input:
            //DataSet dsData = TUtils.CUtils.StdDS(arrobjDSData);
            //if (dsData == null) dsData = new DataSet("dsData");
            //dsData.AcceptChanges();
            alParamsCoupleError.AddRange(new object[]{
                "Check.dsData", CmUtils.XmlUtils.DataSet2XmlSimple(dsData)
                });
            #endregion

            #region // Refine and Check Input:
            ////
            DataRow drAbilityOfUser = Sys_User_GetAbilityViewOfUser(strWAUserCode);
            ////
            bool bIsDelete = CmUtils.StringUtils.StringEqual(objFlagIsDelete, TConst.Flag.Yes);
            ////
            string strMST = TUtils.CUtils.StdParam(drAbilityOfUser["MNNTMST"]);
            #endregion

            #region // Refine and Check Input Invoice_Invoice:
            ////
            DataTable dtInput_Invoice_Invoice = null;
            {
                ////
                string strTableCheck = "Invoice_Invoice";
                ////
                if (!dsData.Tables.Contains(strTableCheck))
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.TableName", strTableCheck
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Invoice_Invoice_SaveX_Input_InvoiceTblNotFound
                        , null
                        , alParamsCoupleError.ToArray()
                        );
                }
                dtInput_Invoice_Invoice = dsData.Tables[strTableCheck];
                ////
                if (dtInput_Invoice_Invoice.Rows.Count < 1)
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.TableName", strTableCheck
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Invoice_Invoice_SaveX_Input_InvoiceTblInvalid
                        , null
                        , alParamsCoupleError.ToArray()
                        );
                }
                ////
                TUtils.CUtils.StdDataInTable(
                    dtInput_Invoice_Invoice // dtData
                    , "StdParam", "InvoiceCode" // arrstrCouple
                    , "StdParam", "MST" // arrstrCouple
                    , "StdParam", "NetworkID" // arrstrCouple
                    , "StdParam", "RefNo" // arrstrCouple
                    , "StdParam", "FormNo" // arrstrCouple
                    , "StdParam", "Sign" // arrstrCouple
                    , "StdParam", "SourceInvoiceCode" // arrstrCouple
                    , "StdParam", "InvoiceAdjType" // arrstrCouple
                    , "StdParam", "PaymentMethodCode" // arrstrCouple
                    , "StdParam", "CustomerNNTCode" // arrstrCouple
                    , "StdParam", "CustomerNNTName" // arrstrCouple
                    , "StdParam", "CustomerNNTAddress" // arrstrCouple
                    , "StdParam", "CustomerNNTPhone" // arrstrCouple
                    , "StdParam", "CustomerNNTBankName" // arrstrCouple
                    , "StdParam", "CustomerNNTEmail" // arrstrCouple
                    , "StdParam", "CustomerNNTAccNo" // arrstrCouple
                    , "StdParam", "CustomerNNTBuyerName" // arrstrCouple
                    , "StdParam", "CustomerMST" // arrstrCouple
                    , "StdParam", "TInvoiceCode" // arrstrCouple
                    , "StdParam", "InvoiceNo" // arrstrCouple
                    , "StdParam", "InvoiceDateUTC" // arrstrCouple
                                                   //, "StdParam", "EmailSend" // arrstrCouple
                    , "StdParam", "InvoiceFileSpec" // arrstrCouple
                    , "StdParam", "InvoiceFilePath" // arrstrCouple
                    , "StdParam", "InvoicePDFFilePath" // arrstrCouple
                    , "float", "TotalValInvoice" // arrstrCouple
                    , "float", "TotalValVAT" // arrstrCouple
                    , "float", "TotalValPmt" // arrstrCouple
                    , "StdParam", "InvoiceVerifyCQTCode" // arrstrCouple
                    , "StdParam", "CurrencyCode" // arrstrCouple
                    , "float", "CurrencyRate" // arrstrCouple
                    , "float", "ValGoodsNotTaxable" // arrstrCouple
                    , "float", "ValGoodsNotChargeTax" // arrstrCouple
                    , "float", "ValGoodsVAT5" // arrstrCouple
                    , "float", "ValVAT5" // arrstrCouple
                    , "float", "ValGoodsVAT10" // arrstrCouple
                    , "float", "ValVAT10" // arrstrCouple
                    , "StdParam", "NNTFullName" // arrstrCouple
                    , "StdParam", "NNTFullAdress" // arrstrCouple
                    , "StdParam", "NNTPhone" // arrstrCouple
                    , "StdParam", "NNTFax" // arrstrCouple
                    , "StdParam", "NNTEmail" // arrstrCouple
                    , "StdParam", "NNTWebsite" // arrstrCouple
                    , "StdParam", "NNTAccNo" // arrstrCouple
                    , "StdParam", "NNTBankName" // arrstrCouple
                    , "StdParam", "Remark" // arrstrCouple
                    , "StdParam", "InvoiceCF1" // arrstrCouple
                    , "StdParam", "InvoiceCF2" // arrstrCouple
                    , "StdParam", "InvoiceCF3" // arrstrCouple
                    , "StdParam", "InvoiceCF4" // arrstrCouple
                    , "StdParam", "InvoiceCF5" // arrstrCouple
                    , "StdParam", "InvoiceCF6" // arrstrCouple
                    , "StdParam", "InvoiceCF7" // arrstrCouple
                    , "StdParam", "InvoiceCF8" // arrstrCouple
                    , "StdParam", "InvoiceCF9" // arrstrCouple
                    , "StdParam", "InvoiceCF10" // arrstrCouple
                    );
                ////
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_Invoice, "EmailSend", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_Invoice, "CreateDTimeUTC", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_Invoice, "CreateBy", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_Invoice, "InvoiceNoDTimeUTC", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_Invoice, "InvoiceNoBy", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_Invoice, "SignDTimeUTC", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_Invoice, "SignBy", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_Invoice, "ApprDTimeUTC", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_Invoice, "ApprBy", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_Invoice, "CancelDTimeUTC", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_Invoice, "CancelBy", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_Invoice, "SendEmailDTimeUTC", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_Invoice, "SendEmailBy", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_Invoice, "IssuedDTimeUTC", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_Invoice, "IssuedBy", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_Invoice, "DeleteDTimeUTC", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_Invoice, "DeleteBy", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_Invoice, "ChangeDTimeUTC", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_Invoice, "ChangeBy", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_Invoice, "LUDTimeUTC", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_Invoice, "LUBy", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_Invoice, "FlagChange", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_Invoice, "FlagPushOutSite", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_Invoice, "InvoiceStatus", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_Invoice, "LogLUDTimeUTC", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_Invoice, "LogLUBy", typeof(object));
            }
            #endregion

            #region //// SaveTemp Invoice_Invoice For Check:
            //if (!bIsDelete)
            {
                // Upload:
                TUtils.CUtils.MyBuildDBDT_Common(
                    _cf.db // db
                    , "#input_Invoice_Invoice" // strTableName
                    , new object[] {
                            "InvoiceCode", TConst.BizMix.Default_DBColType
                            , "MST", TConst.BizMix.Default_DBColType
                            , "NetworkID", TConst.BizMix.Default_DBColType
                            , "RefNo", TConst.BizMix.Default_DBColType
                            , "FormNo", TConst.BizMix.Default_DBColType
                            , "Sign", TConst.BizMix.Default_DBColType
                            , "SourceInvoiceCode", TConst.BizMix.Default_DBColType
                            , "InvoiceAdjType", TConst.BizMix.Default_DBColType
                            , "PaymentMethodCode", TConst.BizMix.Default_DBColType
                            , "CustomerNNTCode", TConst.BizMix.Default_DBColType
                            , "CustomerNNTName", TConst.BizMix.Default_DBColType
                            , "CustomerNNTAddress", TConst.BizMix.Default_DBColType
                            , "CustomerNNTPhone", TConst.BizMix.Default_DBColType
                            , "CustomerNNTBankName", TConst.BizMix.Default_DBColType
                            , "CustomerNNTEmail", TConst.BizMix.Default_DBColType
                            , "CustomerNNTAccNo", TConst.BizMix.Default_DBColType
                            , "CustomerNNTBuyerName", TConst.BizMix.Default_DBColType
                            , "CustomerMST", TConst.BizMix.Default_DBColType
                            , "TInvoiceCode", TConst.BizMix.Default_DBColType
                            , "InvoiceNo", TConst.BizMix.Default_DBColType
                            , "InvoiceDateUTC", TConst.BizMix.Default_DBColType
                            , "EmailSend", TConst.BizMix.Default_DBColType
                            , "InvoiceFileSpec", TConst.BizMix.Default_DBColType
                            , "InvoiceFilePath", TConst.BizMix.Default_DBColType
                            , "InvoicePDFFilePath", TConst.BizMix.Default_DBColType
                            , "TotalValInvoice", "float"
                            , "TotalValVAT", "float"
                            , "TotalValPmt", "float"
                            , "CreateDTimeUTC", TConst.BizMix.Default_DBColType
                            , "CreateBy", TConst.BizMix.Default_DBColType
                            , "InvoiceNoDTimeUTC", TConst.BizMix.Default_DBColType
                            , "InvoiceNoBy", TConst.BizMix.Default_DBColType
                            , "SignDTimeUTC", TConst.BizMix.Default_DBColType
                            , "SignBy", TConst.BizMix.Default_DBColType
                            , "ApprDTimeUTC", TConst.BizMix.Default_DBColType
                            , "ApprBy", TConst.BizMix.Default_DBColType
                            , "CancelDTimeUTC", TConst.BizMix.Default_DBColType
                            , "CancelBy", TConst.BizMix.Default_DBColType
                            , "SendEmailDTimeUTC", TConst.BizMix.Default_DBColType
                            , "SendEmailBy", TConst.BizMix.Default_DBColType
                            , "IssuedDTimeUTC", TConst.BizMix.Default_DBColType
                            , "IssuedBy", TConst.BizMix.Default_DBColType
                            , "DeleteDTimeUTC", TConst.BizMix.Default_DBColType
                            , "DeleteBy", TConst.BizMix.Default_DBColType
                            , "ChangeDTimeUTC", TConst.BizMix.Default_DBColType
                            , "ChangeBy", TConst.BizMix.Default_DBColType
                            , "InvoiceVerifyCQTCode", TConst.BizMix.Default_DBColType
                            , "CurrencyCode", TConst.BizMix.Default_DBColType
                            , "CurrencyRate", TConst.BizMix.Default_DBColType
                            , "ValGoodsNotTaxable", "float"
                            , "ValGoodsNotChargeTax", "float"
                            , "ValGoodsVAT5", "float"
                            , "ValVAT5", "float"
                            , "ValGoodsVAT10", "float"
                            , "ValVAT10", "float"
                            , "NNTFullName", TConst.BizMix.Default_DBColType
                            , "NNTFullAdress", TConst.BizMix.Default_DBColType
                            , "NNTPhone", TConst.BizMix.Default_DBColType
                            , "NNTFax", TConst.BizMix.Default_DBColType
                            , "NNTEmail", TConst.BizMix.Default_DBColType
                            , "NNTWebsite", TConst.BizMix.Default_DBColType
                            , "NNTAccNo", TConst.BizMix.Default_DBColType
                            , "NNTBankName", TConst.BizMix.Default_DBColType
                            , "LUDTimeUTC", TConst.BizMix.Default_DBColType
                            , "LUBy", TConst.BizMix.Default_DBColType
                            , "Remark", TConst.BizMix.Default_DBColType
                            , "InvoiceCF1", TConst.BizMix.Default_DBColType
                            , "InvoiceCF2", TConst.BizMix.Default_DBColType
                            , "InvoiceCF3", TConst.BizMix.Default_DBColType
                            , "InvoiceCF4", TConst.BizMix.Default_DBColType
                            , "InvoiceCF5", TConst.BizMix.Default_DBColType
                            , "InvoiceCF6", TConst.BizMix.Default_DBColType
                            , "InvoiceCF7", TConst.BizMix.Default_DBColType
                            , "InvoiceCF8", TConst.BizMix.Default_DBColType
                            , "InvoiceCF9", TConst.BizMix.Default_DBColType
                            , "InvoiceCF10", TConst.BizMix.Default_DBColType
                            , "FlagChange", TConst.BizMix.Default_DBColType
                            , "FlagPushOutSite", TConst.BizMix.Default_DBColType
                            , "FlagDeleteOutSite", TConst.BizMix.Default_DBColType
                            , "InvoiceStatus", TConst.BizMix.Default_DBColType
                            , "LogLUDTimeUTC", TConst.BizMix.Default_DBColType
                            , "LogLUBy", TConst.BizMix.Default_DBColType
                        } // arrSingleStructure
                    , dtInput_Invoice_Invoice // dtData
                );
            }
            #endregion

            #region /// Refine and check Input Invoice_Invoice:
            {
                #region ----// Check InvalidInvoiceCode:
                {
                    string strSql_CheckInvalidInvoiceCode = CmUtils.StringUtils.Replace(@"
                            --- Check:
                            select distinct 
                                t.InvoiceCode
                            from #input_Invoice_Invoice t --//[mylock]
                            where(1=1)
                                and (t.InvoiceCode is null or LTRIM(RTRIM(t.InvoiceCode)) = '')
                            ;
						");
                    DataTable dt_CheckInvalidInvoiceCode = _cf.db.ExecQuery(
                        strSql_CheckInvalidInvoiceCode
                        ).Tables[0];
                    /////
                    if (dt_CheckInvalidInvoiceCode.Rows.Count > 0)
                    {
                        alParamsCoupleError.AddRange(new object[]{
                            "Check.ErrConditionalRaise", "(t.InvoiceCode is null or LTRIM(RTRIM(t.InvoiceCode)) = '')"
                            , "Check.NumberRows", dt_CheckInvalidInvoiceCode.Rows.Count
                            });
                        throw CmUtils.CMyException.Raise(
                            TError.ErridnInventory.Invoice_Invoice_SaveX_InvalidInvoiceCode
                            , null
                            , alParamsCoupleError.ToArray()
                            );
                    }
                    ////
                }
                #endregion

                #region ----// Check InvalidInvoiceStatus:
                {
                    string strSql_CheckInvalidInvoiceCode = CmUtils.StringUtils.Replace(@"
                            --- #tbl_Invoice_Invoice_ForSTUFF:
                            select distinct 
                                t.InvoiceCode
                            into #tbl_Invoice_Invoice_ForSTUFF
                            from #input_Invoice_Invoice t --//[mylock]
                                inner join Invoice_Invoice f --//[mylock]
                                    on t.InvoiceCode = f.InvoiceCode
                            where(1=1)
                                and f.InvoiceStatus not in ('PENDING') 
                            ;

                            --- Return:					
                            select 
                                STUFF(( 
		                            SELECT ',' + f.InvoiceCode
		                            FROM #tbl_Invoice_Invoice_ForSTUFF f --//[mylock]
		                            WHERE(1=1)
		                            FOR
		                            XML PATH('')
		                            ), 1, 1, ''
                                ) AS ListInvoiceCode
                            where(1=1)
                            ;

                            --- Clear For Debug:
                            drop table #tbl_Invoice_Invoice_ForSTUFF;
						");
                    DataTable dt_CheckInvalidInvoiceCode = _cf.db.ExecQuery(
                        strSql_CheckInvalidInvoiceCode
                        ).Tables[0];
                    /////
                    if (dt_CheckInvalidInvoiceCode.Rows.Count > 0)
                    {
                        string strListInvoiceCode = TUtils.CUtils.StdParam(dt_CheckInvalidInvoiceCode.Rows[0]["ListInvoiceCode"]);
                        /////
                        if (!string.IsNullOrEmpty(strListInvoiceCode))
                        {
                            if (bIsDelete)
                            {
                                goto MyCodeLabel_Done; // Thành công
                            }
                            else // if (!string.IsNullOrEmpty(strListInvoiceCode))
                            {
                                alParamsCoupleError.AddRange(new object[]{
                                    "Check.ErrConditionalRaise", "f.InvoiceStatus not in ('PENDING')"
                                    , "Check.strListInvoiceCode", strListInvoiceCode
                                    });
                                throw CmUtils.CMyException.Raise(
                                    TError.ErridnInventory.Invoice_Invoice_SaveX_StatusNotMatched
                                    , null
                                    , alParamsCoupleError.ToArray()
                                    );

                            }
                        }
                        /////
                    }
                    ////
                }
                #endregion

                #region ----// Đã cấp số hóa đơn thì không được Xóa:
                if (bIsDelete)
                {
                    string strSql_CheckInvalidInvoiceCode = CmUtils.StringUtils.Replace(@"
                            --- #tbl_Invoice_Invoice_ForSTUFF:
                            select distinct 
                                t.InvoiceCode
                            into #tbl_Invoice_Invoice_ForSTUFF
                            from #input_Invoice_Invoice t --//[mylock]
                                inner join Invoice_Invoice f --//[mylock]
                                    on t.InvoiceCode = f.InvoiceCode
                            where(1=1)
                                and f.InvoiceNo is not null 
                            ;

                            --- Return:					
                            select 
                                STUFF(( 
		                            SELECT ',' + f.InvoiceCode
		                            FROM #tbl_Invoice_Invoice_ForSTUFF f --//[mylock]
		                            WHERE(1=1)
		                            FOR
		                            XML PATH('')
		                            ), 1, 1, ''
                                ) AS ListInvoiceCode
                            where(1=1)
                            ;

                            --- Clear For Debug:
                            drop table #tbl_Invoice_Invoice_ForSTUFF;
						");
                    DataTable dt_CheckInvalidInvoiceCode = _cf.db.ExecQuery(
                        strSql_CheckInvalidInvoiceCode
                        ).Tables[0];
                    /////
                    if (dt_CheckInvalidInvoiceCode.Rows.Count > 0)
                    {
                        /////
                        string strListInvoiceCode = TUtils.CUtils.StdParam(dt_CheckInvalidInvoiceCode.Rows[0]["ListInvoiceCode"]);
                        ////
                        if (!string.IsNullOrEmpty(strListInvoiceCode))
                        {
                            alParamsCoupleError.AddRange(new object[]{
                                "Check.ErrConditionalRaise", "f.InvoiceNo is not null "
                                , "Check.strListInvoiceCode", strListInvoiceCode
                                });
                            throw CmUtils.CMyException.Raise(
                                TError.ErridnInventory.Invoice_Invoice_SaveX_ExistInvoiceNo
                                , null
                                , alParamsCoupleError.ToArray()
                                );

                        }
                    }
                    ////
                }
                #endregion

                #region ----// Nếu là hóa đơn điều chỉnh thì RefNo không được Null:
                if (!bIsDelete)
                {
                    string strSql_CheckInvalidInvoiceCode = CmUtils.StringUtils.Replace(@"
                            --- #tbl_Invoice_Invoice_ForSTUFF:
                            select distinct 
                                t.InvoiceCode
                            into #tbl_Invoice_Invoice_ForSTUFF
                            from #input_Invoice_Invoice t --//[mylock]
                            where(1=1)
                                and t.RefNo is null
                                and t.InvoiceAdjType in ('@strADJINCREASE', '@strADJDESCREASE')
                            ;

                            --- Return:					
                            select 
                                STUFF(( 
		                            SELECT ',' + f.InvoiceCode
		                            FROM #tbl_Invoice_Invoice_ForSTUFF f --//[mylock]
		                            WHERE(1=1)
		                            FOR
		                            XML PATH('')
		                            ), 1, 1, ''
                                ) AS ListInvoiceCode
                            where(1=1)
                            ;

                            --- Clear For Debug:
                            drop table #tbl_Invoice_Invoice_ForSTUFF;
						"
                        , "@strADJINCREASE", TConst.InvoiceAdjType.AdjInCrease
                        , "@strADJINCREASE", TConst.InvoiceAdjType.AdjDescrease
                        );
                    DataTable dt_CheckInvalidInvoiceCode = _cf.db.ExecQuery(
                        strSql_CheckInvalidInvoiceCode
                        ).Tables[0];
                    /////
                    if (dt_CheckInvalidInvoiceCode.Rows.Count > 0)
                    {
                        string strListInvoiceCode = TUtils.CUtils.StdParam(dt_CheckInvalidInvoiceCode.Rows[0]["ListInvoiceCode"]);
                        /////
                        if (!string.IsNullOrEmpty(strListInvoiceCode))
                        {
                            alParamsCoupleError.AddRange(new object[]{
                                "Check.ErrConditionalRaise", "and t.InvoiceAdjType in ('@strADJINCREASE', '@strADJDESCREASE') and t.RefNo is null"
                                , "Check.strListInvoiceCode", strListInvoiceCode
                                });
                            throw CmUtils.CMyException.Raise(
                                TError.ErridnInventory.Invoice_Invoice_SaveX_InvoiceAdjTypeIsNotNull
                                , null
                                , alParamsCoupleError.ToArray()
                                );
                        }
                        /////
                    }
                    ////
                }
                #endregion

                #region ----// Nếu là hóa đơn thay thế:
                {
                    #region ----// Nếu là hóa đơn thay thế thì RefNo không được Null:
                    {
                        string strSql_CheckInvalidInvoiceCode = CmUtils.StringUtils.Replace(@"
                                --- #tbl_Invoice_Invoice_ForSTUFF:
                                select distinct 
                                    t.RefNo
                                into #tbl_Invoice_Invoice_ForSTUFF
                                from #input_Invoice_Invoice t --//[mylock]
                                where(1=1)
                                    and t.SourceInvoiceCode in ('@strInvoiceReplace') 
                                    and (t.RefNo is null or LTRIM(RTRIM(t.RefNo)) = '')
                                ;

                                --- Return:					
                                select 
                                    STUFF(( 
		                                SELECT ',' + f.RefNo
		                                FROM #tbl_Invoice_Invoice_ForSTUFF f --//[mylock]
		                                WHERE(1=1)
		                                FOR
		                                XML PATH('')
		                                ), 1, 1, ''
                                    ) AS ListRefNo
                                where(1=1)
                                ;

                                --- Clear For Debug:
                                drop table #tbl_Invoice_Invoice_ForSTUFF;
						    "
                            , "@strInvoiceReplace", TConst.SourceInvoiceCode.InvoiceReplace
                            );
                        DataTable dt_CheckInvalidInvoiceCode = _cf.db.ExecQuery(
                            strSql_CheckInvalidInvoiceCode
                            ).Tables[0];
                        /////
                        if (dt_CheckInvalidInvoiceCode.Rows.Count > 0)
                        {
                            /////
                            string strListRefNo = TUtils.CUtils.StdParam(dt_CheckInvalidInvoiceCode.Rows[0]["ListRefNo"]);
                            ////
                            if (!string.IsNullOrEmpty(strListRefNo))
                            {
                                alParamsCoupleError.AddRange(new object[]{
                                    "Check.ErrConditionalRaise", "and t.SourceInvoiceCode in ('@strInvoiceReplace') and (t.RefNo is null or LTRIM(RTRIM(t.RefNo)) = '')"
                                    , "Check.strListRefNo", strListRefNo
                                    });
                                throw CmUtils.CMyException.Raise(
                                    TError.ErridnInventory.Invoice_Invoice_SaveX_Input_Invoice_InvalidRefNo
                                    , null
                                    , alParamsCoupleError.ToArray()
                                    );

                            }
                        }
                        ////
                    }
                    #endregion

                    #region ----// RefNo ở trạng thái Deleted:
                    {
                        string strSql_CheckInvalidInvoiceCode = CmUtils.StringUtils.Replace(@"
                                --- #tbl_Invoice_Invoice_ForSTUFF:
                                select distinct 
                                    t.RefNo
                                into #tbl_Invoice_Invoice_ForSTUFF
                                from #input_Invoice_Invoice t --//[mylock]
                                    left join Invoice_Invoice f --//[mylock]
                                        on t.RefNo = f.InvoiceCode
                                where(1=1)
                                    and t.SourceInvoiceCode in ('@strInvoiceReplace') 
                                    and (f.InvoiceStatus not in ('DELETED', 'ISSUED')) 
                                ;

                                --- Return:					
                                select 
                                    STUFF(( 
		                                SELECT ',' + f.RefNo
		                                FROM #tbl_Invoice_Invoice_ForSTUFF f --//[mylock]
		                                WHERE(1=1)
		                                FOR
		                                XML PATH('')
		                                ), 1, 1, ''
                                    ) AS ListRefNo
                                where(1=1)
                                ;

                                --- Clear For Debug:
                                drop table #tbl_Invoice_Invoice_ForSTUFF;
						    "
                            , "@strInvoiceReplace", TConst.SourceInvoiceCode.InvoiceReplace
                            );
                        DataTable dt_CheckInvalidInvoiceCode = _cf.db.ExecQuery(
                            strSql_CheckInvalidInvoiceCode
                            ).Tables[0];
                        /////
                        if (dt_CheckInvalidInvoiceCode.Rows.Count > 0)
                        {
                            /////
                            string strListRefNo = TUtils.CUtils.StdParam(dt_CheckInvalidInvoiceCode.Rows[0]["ListRefNo"]);
                            ////
                            if (!string.IsNullOrEmpty(strListRefNo))
                            {
                                alParamsCoupleError.AddRange(new object[]{
                                    "Check.ErrConditionalRaise", "and t.SourceInvoiceCode in ('@strInvoiceReplace')  and (f.InvoiceStatus not in ('DELETED', 'ISSUED')) "
                                    , "Check.strListRefNo", strListRefNo
                                    });
                                throw CmUtils.CMyException.Raise(
                                    TError.ErridnInventory.Invoice_Invoice_SaveX_Input_Invoice_InvalidInvoiceStatusRefNo
                                    , null
                                    , alParamsCoupleError.ToArray()
                                    );

                            }
                        }
                        ////
                    }
                    #endregion

                    #region ----// Không cho phép xóa hóa đơn thay thế:
                    if (bIsDelete)
                    {
                        string strSql_CheckInvalidInvoiceCode = CmUtils.StringUtils.Replace(@"
                                --- #tbl_Invoice_Invoice_ForSTUFF:
                                select distinct 
                                    t.RefNo
                                into #tbl_Invoice_Invoice_ForSTUFF
                                from #input_Invoice_Invoice t --//[mylock]
                                where(1=1)
                                ;

                                --- Return:					
                                select 
                                    STUFF(( 
		                                SELECT ',' + f.RefNo
		                                FROM #tbl_Invoice_Invoice_ForSTUFF f --//[mylock]
		                                WHERE(1=1)
		                                FOR
		                                XML PATH('')
		                                ), 1, 1, ''
                                    ) AS ListRefNo
                                where(1=1)
                                ;

                                --- Clear For Debug:
                                drop table #tbl_Invoice_Invoice_ForSTUFF;
						    "
                            , "@strInvoiceReplace", TConst.SourceInvoiceCode.InvoiceReplace
                            );
                        DataTable dt_CheckInvalidInvoiceCode = _cf.db.ExecQuery(
                            strSql_CheckInvalidInvoiceCode
                            ).Tables[0];
                        /////
                        if (dt_CheckInvalidInvoiceCode.Rows.Count > 0)
                        {
                            /////
                            string strListRefNo = TUtils.CUtils.StdParam(dt_CheckInvalidInvoiceCode.Rows[0]["ListRefNo"]);
                            ////
                            if (!string.IsNullOrEmpty(strListRefNo))
                            {
                                alParamsCoupleError.AddRange(new object[]{
                                    "Check.strListRefNo", strListRefNo
                                    });
                                throw CmUtils.CMyException.Raise(
                                    TError.ErridnInventory.Invoice_Invoice_SaveX_NotDelete
                                    , null
                                    , alParamsCoupleError.ToArray()
                                    );

                            }
                        }
                        ////
                    }
                    #endregion
                }
                #endregion

                #region ----// Check Mst_NNT:
                {
                    string strSql_CheckMstNNT = CmUtils.StringUtils.Replace(@"
                            --- #tbl_Invoice_Invoice_ForSTUFF:
                            select distinct 
	                            t.MST
                            into #tbl_Invoice_Invoice_ForSTUFF_Exist
                            from #input_Invoice_Invoice t --//[mylock]
	                            left join Mst_NNT f --//[mylock]
		                            on t.MST = f.MST
                            where(1=1)
	                            and f.MST is null
                            ;

                            --- #tbl_Invoice_Invoice_ForSTUFF_Active:
                            select distinct 
	                            t.MST
                            into #tbl_Invoice_Invoice_ForSTUFF_Active
                            from #input_Invoice_Invoice t --//[mylock]
	                            left join Mst_NNT f --//[mylock]
		                            on t.MST = f.MST
                            where(1=1)
	                            and f.FlagActive = '0'
                            ;

                            --- Return:					
                            select 
                                STUFF(( 
		                            SELECT ',' + f.MST
		                            FROM #tbl_Invoice_Invoice_ForSTUFF_Exist f --//[mylock]
		                            WHERE(1=1)
		                            FOR
		                            XML PATH('')
		                            ), 1, 1, ''
                                ) AS ListMST
                            where(1=1)
                            ;

                            --- Return:					
                            select 
                                STUFF(( 
		                            SELECT ',' + f.MST
		                            FROM #tbl_Invoice_Invoice_ForSTUFF_Active f --//[mylock]
		                            WHERE(1=1)
		                            FOR
		                            XML PATH('')
		                            ), 1, 1, ''
                                ) AS ListMST
                            where(1=1)
                            ;

                            --- Clear For Debug:
                            drop table #tbl_Invoice_Invoice_ForSTUFF_Exist;
                            drop table #tbl_Invoice_Invoice_ForSTUFF_Active;
						");
                    DataSet ds_CheckMstNNT = _cf.db.ExecQuery(
                        strSql_CheckMstNNT
                        );
                    ////
                    DataTable dt_Invoice_Invoice_ForSTUFF_Exist = ds_CheckMstNNT.Tables[0];
                    DataTable dt_Invoice_Invoice_ForSTUFF_Active = ds_CheckMstNNT.Tables[1];
                    /////
                    if (dt_Invoice_Invoice_ForSTUFF_Exist.Rows.Count > 0)
                    {
                        string strListMST = TUtils.CUtils.StdParam(dt_Invoice_Invoice_ForSTUFF_Exist.Rows[0]["ListMST"]);
                        /////
                        if (!string.IsNullOrEmpty(strListMST))
                        {
                            alParamsCoupleError.AddRange(new object[]{
                                "Check.ErrConditionalRaise", "Mst_NNT.MST is null"
                                , "Check.strListMST", strListMST
                                });
                            throw CmUtils.CMyException.Raise(
                                TError.ErridnInventory.Invoice_Invoice_SaveX_Invalid_MstNNT_NotFound
                                , null
                                , alParamsCoupleError.ToArray()
                                );
                        }
                        /////
                    }
                    ////
                    if (dt_Invoice_Invoice_ForSTUFF_Active.Rows.Count > 0)
                    {
                        string strListMST = TUtils.CUtils.StdParam(dt_Invoice_Invoice_ForSTUFF_Active.Rows[0]["ListMST"]);
                        /////
                        if (!string.IsNullOrEmpty(strListMST))
                        {
                            alParamsCoupleError.AddRange(new object[]{
                                "Check.ErrConditionalRaise", "Mst_NNT.FlagActive = '0'"
                                , "Check.strListMST", strListMST
                                });
                            throw CmUtils.CMyException.Raise(
                                TError.ErridnInventory.Invoice_Invoice_SaveX_Invalid_MstNNT_FlagActive
                                , null
                                , alParamsCoupleError.ToArray()
                                );
                        }
                        /////
                    }
                    ////
                }
                #endregion

                #region ----// Check Mst_PaymentMethods:
                {
                    string strSql_CheckPaymentMethods = CmUtils.StringUtils.Replace(@"
                            --- #tbl_Invoice_Invoice_ForSTUFF:
                            select distinct 
	                            t.PaymentMethodCode
                            into #tbl_Invoice_Invoice_ForSTUFF_Exist
                            from #input_Invoice_Invoice t --//[mylock]
	                            left join Mst_PaymentMethods f --//[mylock]
		                            on t.PaymentMethodCode = f.PaymentMethodCode
                            where(1=1)
	                            and f.PaymentMethodCode is null
                            ;

                            --- #tbl_Invoice_Invoice_ForSTUFF_Active:
                            select distinct 
	                            t.PaymentMethodCode
                            into #tbl_Invoice_Invoice_ForSTUFF_Active
                            from #input_Invoice_Invoice t --//[mylock]
	                            left join Mst_PaymentMethods f --//[mylock]
		                            on t.PaymentMethodCode = f.PaymentMethodCode
                            where(1=1)
	                            and f.FlagActive = '0'
                            ;

                            --- Return:					
                            select 
                                STUFF(( 
		                            SELECT ',' + f.PaymentMethodCode
		                            FROM #tbl_Invoice_Invoice_ForSTUFF_Exist f --//[mylock]
		                            WHERE(1=1)
		                            FOR
		                            XML PATH('')
		                            ), 1, 1, ''
                                ) AS ListPaymentMethodCode
                            where(1=1)
                            ;

                            --- Return:					
                            select 
                                STUFF(( 
		                            SELECT ',' + f.PaymentMethodCode
		                            FROM #tbl_Invoice_Invoice_ForSTUFF_Active f --//[mylock]
		                            WHERE(1=1)
		                            FOR
		                            XML PATH('')
		                            ), 1, 1, ''
                                ) AS ListPaymentMethodCode
                            where(1=1)
                            ;

                            --- Clear For Debug:
                            drop table #tbl_Invoice_Invoice_ForSTUFF_Exist;
                            drop table #tbl_Invoice_Invoice_ForSTUFF_Active;
						");
                    DataSet ds_CheckMst_PaymentMethods = _cf.db.ExecQuery(
                        strSql_CheckPaymentMethods
                        );
                    ////
                    DataTable dt_Invoice_Invoice_ForSTUFF_Exist = ds_CheckMst_PaymentMethods.Tables[0];
                    DataTable dt_Invoice_Invoice_ForSTUFF_Active = ds_CheckMst_PaymentMethods.Tables[1];
                    /////
                    if (dt_Invoice_Invoice_ForSTUFF_Exist.Rows.Count > 0)
                    {
                        string strListPaymentMethodCode = TUtils.CUtils.StdParam(dt_Invoice_Invoice_ForSTUFF_Exist.Rows[0]["ListPaymentMethodCode"]);
                        /////
                        if (!string.IsNullOrEmpty(strListPaymentMethodCode))
                        {
                            alParamsCoupleError.AddRange(new object[]{
                                "Check.ErrConditionalRaise", "Mst_PaymentMethods.PaymentMethodCode is null"
                                , "Check.strListPaymentMethodCode", strListPaymentMethodCode
                                });
                            throw CmUtils.CMyException.Raise(
                                TError.ErridnInventory.Invoice_Invoice_SaveX_Invalid_PaymentMethods_NotFound
                                , null
                                , alParamsCoupleError.ToArray()
                                );
                        }
                        /////
                    }
                    ////
                    if (dt_Invoice_Invoice_ForSTUFF_Active.Rows.Count > 0)
                    {
                        string strListPaymentMethodCode = TUtils.CUtils.StdParam(dt_Invoice_Invoice_ForSTUFF_Active.Rows[0]["ListPaymentMethodCode"]);
                        /////
                        if (!string.IsNullOrEmpty(strListPaymentMethodCode))
                        {
                            alParamsCoupleError.AddRange(new object[]{
                                "Check.ErrConditionalRaise", "Mst_PaymentMethods.FlagActive = '0'"
                                , "Check.strListPaymentMethodCode", strListPaymentMethodCode
                                });
                            throw CmUtils.CMyException.Raise(
                                TError.ErridnInventory.Invoice_Invoice_SaveX_Invalid_PaymentMethods_FlagActive
                                , null
                                , alParamsCoupleError.ToArray()
                                );
                        }
                        /////
                    }
                    ////
                }
                #endregion

                #region ----// Check Mst_SourceInvoice:
                {
                    string strSql_CheckMst_SourceInvoice = CmUtils.StringUtils.Replace(@"
                            --- #tbl_Invoice_Invoice_ForSTUFF:
                            select distinct 
	                            t.SourceInvoiceCode
                            into #tbl_Invoice_Invoice_ForSTUFF_Exist
                            from #input_Invoice_Invoice t --//[mylock]
	                            left join Mst_SourceInvoice f --//[mylock]
		                            on t.SourceInvoiceCode = f.SourceInvoiceCode
                            where(1=1)
	                            and f.SourceInvoiceCode is null
                            ;

                            --- #tbl_Invoice_Invoice_ForSTUFF_Active:
                            select distinct 
	                            t.SourceInvoiceCode
                            into #tbl_Invoice_Invoice_ForSTUFF_Active
                            from #input_Invoice_Invoice t --//[mylock]
	                            left join Mst_SourceInvoice f --//[mylock]
		                            on t.SourceInvoiceCode = f.SourceInvoiceCode
                            where(1=1)
	                            and f.FlagActive = '0'
                            ;

                            --- Return:					
                            select 
                                STUFF(( 
		                            SELECT ',' + f.SourceInvoiceCode
		                            FROM #tbl_Invoice_Invoice_ForSTUFF_Exist f --//[mylock]
		                            WHERE(1=1)
		                            FOR
		                            XML PATH('')
		                            ), 1, 1, ''
                                ) AS ListSourceInvoiceCode
                            where(1=1)
                            ;

                            --- Return:					
                            select 
                                STUFF(( 
		                            SELECT ',' + f.SourceInvoiceCode
		                            FROM #tbl_Invoice_Invoice_ForSTUFF_Active f --//[mylock]
		                            WHERE(1=1)
		                            FOR
		                            XML PATH('')
		                            ), 1, 1, ''
                                ) AS ListSourceInvoiceCode
                            where(1=1)
                            ;

                            --- Clear For Debug:
                            drop table #tbl_Invoice_Invoice_ForSTUFF_Exist;
                            drop table #tbl_Invoice_Invoice_ForSTUFF_Active;
						");
                    DataSet ds_CheckMst_PaymentMethods = _cf.db.ExecQuery(
                        strSql_CheckMst_SourceInvoice
                        );
                    ////
                    DataTable dt_Invoice_Invoice_ForSTUFF_Exist = ds_CheckMst_PaymentMethods.Tables[0];
                    DataTable dt_Invoice_Invoice_ForSTUFF_Active = ds_CheckMst_PaymentMethods.Tables[1];
                    /////
                    if (dt_Invoice_Invoice_ForSTUFF_Exist.Rows.Count > 0)
                    {
                        string strListSourceInvoiceCode = TUtils.CUtils.StdParam(dt_Invoice_Invoice_ForSTUFF_Exist.Rows[0]["ListSourceInvoiceCode"]);
                        /////
                        if (!string.IsNullOrEmpty(strListSourceInvoiceCode))
                        {
                            alParamsCoupleError.AddRange(new object[]{
                                "Check.ErrConditionalRaise", "Mst_SourceInvoice.SourceInvoiceCode is null"
                                , "Check.strListSourceInvoiceCode", strListSourceInvoiceCode
                                });
                            throw CmUtils.CMyException.Raise(
                                TError.ErridnInventory.Invoice_Invoice_SaveX_Invalid_SourceInvoice_NotFound
                                , null
                                , alParamsCoupleError.ToArray()
                                );
                        }
                        /////
                    }
                    ////
                    if (dt_Invoice_Invoice_ForSTUFF_Active.Rows.Count > 0)
                    {
                        string strListSourceInvoiceCode = TUtils.CUtils.StdParam(dt_Invoice_Invoice_ForSTUFF_Active.Rows[0]["ListSourceInvoiceCode"]);
                        /////
                        if (!string.IsNullOrEmpty(strListSourceInvoiceCode))
                        {
                            alParamsCoupleError.AddRange(new object[]{
                                "Check.ErrConditionalRaise", "Mst_SourceInvoice.FlagActive = '0'"
                                , "Check.strListPaymentMethodCode", strListSourceInvoiceCode
                                });
                            throw CmUtils.CMyException.Raise(
                                TError.ErridnInventory.Invoice_Invoice_SaveX_Invalid_SourceInvoice_FlagActive
                                , null
                                , alParamsCoupleError.ToArray()
                                );
                        }
                        /////
                    }
                    ////
                }
                #endregion

                #region ----// Check Invoice_TempInvoice:
                {
                    string strSql_CheckInvoice_TempInvoice = CmUtils.StringUtils.Replace(@"
                            --- #tbl_Invoice_Invoice_ForSTUFF_Exist:
                            select distinct 
	                            t.TInvoiceCode
                            into #tbl_Invoice_Invoice_ForSTUFF_Exist
                            from #input_Invoice_Invoice t --//[mylock]
	                            left join Invoice_TempInvoice f --//[mylock]
		                            on t.TInvoiceCode = f.TInvoiceCode
                            where(1=1)
	                            and f.TInvoiceCode is null
                            ;

                            --- #tbl_Invoice_Invoice_ForSTUFF_Active:
                            select distinct 
	                            t.TInvoiceCode
                            into #tbl_Invoice_Invoice_ForSTUFF_Active
                            from #input_Invoice_Invoice t --//[mylock]
	                            left join Invoice_TempInvoice f --//[mylock]
		                            on t.TInvoiceCode = f.TInvoiceCode
                            where(1=1)
	                            and f.TInvoiceStatus not in ('ISSUED')
                            ;

                            --- Return:					
                            select 
                                STUFF(( 
		                            SELECT ',' + f.TInvoiceCode
		                            FROM #tbl_Invoice_Invoice_ForSTUFF_Exist f --//[mylock]
		                            WHERE(1=1)
		                            FOR
		                            XML PATH('')
		                            ), 1, 1, ''
                                ) AS ListTInvoiceCode
                            where(1=1)
                            ;

                            --- Return:					
                            select 
                                STUFF(( 
		                            SELECT ',' + f.TInvoiceCode
		                            FROM #tbl_Invoice_Invoice_ForSTUFF_Active f --//[mylock]
		                            WHERE(1=1)
		                            FOR
		                            XML PATH('')
		                            ), 1, 1, ''
                                ) AS ListTInvoiceCode
                            where(1=1)
                            ;

                            --- Clear For Debug:
                            drop table #tbl_Invoice_Invoice_ForSTUFF_Exist;
                            drop table #tbl_Invoice_Invoice_ForSTUFF_Active;
						");
                    DataSet ds_CheckInvoice_TempInvoice = _cf.db.ExecQuery(
                        strSql_CheckInvoice_TempInvoice
                        );
                    ////
                    DataTable dt_Invoice_Invoice_ForSTUFF_Exist = ds_CheckInvoice_TempInvoice.Tables[0];
                    DataTable dt_Invoice_Invoice_ForSTUFF_Active = ds_CheckInvoice_TempInvoice.Tables[1];
                    /////
                    if (dt_Invoice_Invoice_ForSTUFF_Exist.Rows.Count > 0)
                    {
                        string strListTInvoiceCode = TUtils.CUtils.StdParam(dt_Invoice_Invoice_ForSTUFF_Exist.Rows[0]["ListTInvoiceCode"]);
                        /////
                        if (!string.IsNullOrEmpty(strListTInvoiceCode))
                        {
                            alParamsCoupleError.AddRange(new object[]{
                                "Check.ErrConditionalRaise", "Invoice_TempInvoice.TInvoiceCode is null"
                                , "Check.strListTInvoiceCode", strListTInvoiceCode
                                });
                            throw CmUtils.CMyException.Raise(
                                TError.ErridnInventory.Invoice_Invoice_SaveX_Invalid_TempInvoice_NotFound
                                , null
                                , alParamsCoupleError.ToArray()
                                );
                        }
                        /////
                    }
                    ////
                    if (dt_Invoice_Invoice_ForSTUFF_Active.Rows.Count > 0)
                    {
                        string strListTInvoiceCode = TUtils.CUtils.StdParam(dt_Invoice_Invoice_ForSTUFF_Active.Rows[0]["ListTInvoiceCode"]);
                        /////
                        if (!string.IsNullOrEmpty(strListTInvoiceCode))
                        {
                            alParamsCoupleError.AddRange(new object[]{
                                "Check.ErrConditionalRaise", "Invoice_TempInvoice.TInvoiceStatus not in ('ISSUED')"
                                , "Check.strListTInvoiceCode", strListTInvoiceCode
                                });
                            throw CmUtils.CMyException.Raise(
                                TError.ErridnInventory.Invoice_Invoice_SaveX_Invalid_TempInvoice_StatusNotMatch
                                , null
                                , alParamsCoupleError.ToArray()
                                );
                        }
                        /////
                    }
                    ////
                }
                #endregion

                #region ----// Check SL hóa đơn sử dụng:
                {
                    string strSql_CheckInvoice_TempInvoice = CmUtils.StringUtils.Replace(@"
                            --- #tbl_Invoice_TempInvoice:
                            select distinct 
	                            t.TInvoiceCode
                            into #tbl_Invoice_TempInvoice
                            from #input_Invoice_Invoice t --//[mylock]
	                            inner join Invoice_TempInvoice f --//[mylock]
		                            on t.TInvoiceCode = t.TInvoiceCode
                            where(1=1)
                            ;

							---- Return:
							select 
								t.TInvoiceCode
								, f.EndInvoiceNo
								, f.StartInvoiceNo
								, f.QtyUsed
								, (f.EndInvoiceNo - f.StartInvoiceNo + 1 - f.QtyUsed) QtyRemain
							from #tbl_Invoice_TempInvoice t --//[mylock]
								inner join Invoice_TempInvoice f --//[mylock]
									on t.TInvoiceCode = f.TInvoiceCode
							where(1=1)
								and (f.EndInvoiceNo - f.StartInvoiceNo + 1 - f.QtyUsed) < 1
							;

                            --- Clear For Debug:
                            drop table #tbl_Invoice_TempInvoice;
						");
                    DataSet ds_Invoice_TempInvoice = _cf.db.ExecQuery(
                        strSql_CheckInvoice_TempInvoice
                        );
                    ////
                    DataTable dt_Invoice_TempInvoice = ds_Invoice_TempInvoice.Tables[0];
                    /////
                    if (dt_Invoice_TempInvoice.Rows.Count > 0)
                    {
                        alParamsCoupleError.AddRange(new object[]{
                            "Check.strTInvoiceCode", dt_Invoice_TempInvoice.Rows[0]["TInvoiceCode"]
                            , "Check.DB.StartInvoiceNo", dt_Invoice_TempInvoice.Rows[0]["StartInvoiceNo"]
                            , "Check.DB.EndInvoiceNo", dt_Invoice_TempInvoice.Rows[0]["EndInvoiceNo"]
                            , "Check.DB.QtyUsed",  dt_Invoice_TempInvoice.Rows[0]["QtyUsed"]
                            , "Check.ErrConditionRaise", "((nEndInvoiceNo - nStartInvoiceNo - nQtyUsed)< 1)"
                            });
                        throw CmUtils.CMyException.Raise(
                            TError.ErridnInventory.Invoice_Invoice_SaveX_Invalid_SourceInvoice_NotFound
                            , null
                            , alParamsCoupleError.ToArray()
                            );
                    }
                    ////
                }
                #endregion
            }
            #endregion

            #region // Build Invoice_Invoice:
            {
                string strSql_Build = CmUtils.StringUtils.Replace(@"
                        ----- #tbl_Invoice_Invoice_Build:
                        select 
	                        t.InvoiceCode
	                        , t.MST
	                        , t.NetworkID
	                        , t.RefNo
	                        , t.FormNo
	                        , t.Sign
	                        , t.SourceInvoiceCode
	                        , t.InvoiceAdjType
	                        , t.PaymentMethodCode
	                        , t.CustomerNNTCode
	                        , t.CustomerNNTName
	                        , t.CustomerNNTAddress
	                        , t.CustomerNNTPhone
	                        , t.CustomerNNTBankName
	                        , t.CustomerNNTEmail
	                        , t.CustomerNNTAccNo
	                        , t.CustomerNNTBuyerName
	                        , t.CustomerMST
	                        , t.TInvoiceCode
	                        , t.InvoiceNo
	                        , t.InvoiceDateUTC
	                        , t.EmailSend
	                        , t.InvoiceFileSpec
	                        , t.InvoiceFilePath
	                        , null InvoicePDFFilePath
	                        , t.TotalValInvoice
	                        , t.TotalValVAT
	                        , t.TotalValPmt
	                        , IsNull(f.CreateDTimeUTC, '@strLogLUDTimeUTC') CreateDTimeUTC --t.CreateDTimeUTC
	                        , IsNull(f.CreateBy, '@strLogLUBy') CreateBy --t.CreateBy
	                        , t.InvoiceNoDTimeUTC
	                        , t.InvoiceNoBy
	                        , t.SignDTimeUTC
	                        , t.SignBy
	                        , t.ApprDTimeUTC
	                        , t.ApprBy
	                        , t.CancelDTimeUTC
	                        , t.CancelBy
	                        , t.SendEmailDTimeUTC
	                        , t.SendEmailBy
	                        , t.IssuedDTimeUTC
	                        , t.IssuedBy
	                        , t.DeleteDTimeUTC
	                        , t.DeleteBy
	                        , t.ChangeDTimeUTC
	                        , t.ChangeBy
	                        , t.InvoiceVerifyCQTCode
	                        , t.CurrencyCode
	                        , t.CurrencyRate
	                        , t.ValGoodsNotTaxable
	                        , t.ValGoodsNotChargeTax
	                        , t.ValGoodsVAT5
	                        , t.ValVAT5
	                        , t.ValGoodsVAT10
	                        , t.ValVAT10
	                        , t.NNTFullName
	                        , t.NNTFullAdress
	                        , t.NNTPhone
	                        , t.NNTFax
	                        , t.NNTEmail
	                        , t.NNTWebsite
	                        , t.NNTAccNo
	                        , t.NNTBankName
	                        , '@strLogLUDTimeUTC' LUDTimeUTC --t.LUDTimeUTC
	                        , '@strLogLUBy' LUBy --t.LUBy
	                        , t.Remark
	                        , t.InvoiceCF1
	                        , t.InvoiceCF2
	                        , t.InvoiceCF3
	                        , t.InvoiceCF4
	                        , t.InvoiceCF5
	                        , t.InvoiceCF6
	                        , t.InvoiceCF7
	                        , t.InvoiceCF8
	                        , t.InvoiceCF9
	                        , t.InvoiceCF10
	                        , '1' FlagChange --t.FlagChange
	                        , null FlagPushOutSite -- t.FlagPushOutSite
	                        , null FlagDeleteOutSite -- t.FlagDeleteOutSite
	                        , '@strInvoiceStatus' InvoiceStatus --t.InvoiceStatus
	                        , '@strLogLUDTimeUTC' LogLUDTimeUTC --t.LogLUDTimeUTC
	                        , '@strLogLUBy' LogLUBy --t.LogLUBy
                        into #tbl_Invoice_Invoice_Build
                        from #input_Invoice_Invoice t --//[mylock]
                            left join Invoice_Invoice f --//[mylock]
                                on t.InvoiceCode = f.InvoiceCode
                        where(1=1)
                        ;

                        select null tbl_Invoice_Invoice_Build, t.* from #tbl_Invoice_Invoice_Build t --//[mylock];
                    ;"
                    , "@strInvoiceStatus", TConst.InvoiceStatus.Pending
                    , "@strLogLUDTimeUTC", dtimeSys.ToString("yyyy-MM-dd hh:mm:ss")
                    , "@strLogLUBy", strWAUserCode
                    );
                DataTable dt_Build = _cf.db.ExecQuery(
                    strSql_Build
                    ).Tables[0];
                /////
            }
            #endregion

            #region //// Refine and Check Input Invoice_InvoiceDtl:
            ////
            DataTable dtInput_Invoice_InvoiceDtl = null;
            if (!bIsDelete)
            {
                ////
                string strTableCheck = "Invoice_InvoiceDtl";
                ////
                if (!dsData.Tables.Contains(strTableCheck))
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.TableName", strTableCheck
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Invoice_Invoice_SaveX_Input_InvoiceDtlTblNotFound
                        , null
                        , alParamsCoupleError.ToArray()
                        );
                }
                dtInput_Invoice_InvoiceDtl = dsData.Tables[strTableCheck];
                ////

                if (dtInput_Invoice_InvoiceDtl.Rows.Count < 1)
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.TableName", strTableCheck
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Invoice_Invoice_SaveX_Input_InvoiceDtlTblInvalid
                        , null
                        , alParamsCoupleError.ToArray()
                        );
                }
                ////
                TUtils.CUtils.StdDataInTable(
                    dtInput_Invoice_InvoiceDtl // dtData
                    , "StdParam", "InvoiceCode" // arrstrCouple
                    , "StdParam", "Idx" // arrstrCouple
                    , "StdParam", "NetworkID" // arrstrCouple
                    , "StdParam", "SpecCode" // arrstrCouple
                    , "", "SpecName" // arrstrCouple
                    , "StdParam", "ProductID" // arrstrCouple
                    , "", "ProductName" // arrstrCouple
                    , "StdParam", "VATRateCode" // arrstrCouple
                    , "float", "VATRate" // arrstrCouple
                    , "StdParam", "UnitCode" // arrstrCouple
                    , "", "UnitName" // arrstrCouple
                    , "StdParam", "UnitPrice" // arrstrCouple
                    , "float", "Qty" // arrstrCouple
                    , "float", "ValInvoice" // arrstrCouple
                    , "float", "ValTax" // arrstrCouple
                    , "StdParam", "InventoryCode" // arrstrCouple
                    , "float", "DiscountRate" // arrstrCouple
                    , "float", "ValDiscount" // arrstrCouple
                    , "", "Remark" // arrstrCouple
                    , "", "InvoiceDCF1" // arrstrCouple
                    , "", "InvoiceDCF2" // arrstrCouple
                    , "", "InvoiceDCF3" // arrstrCouple
                    , "", "InvoiceDCF4" // arrstrCouple
                    , "", "InvoiceDCF5" // arrstrCouple
                    );
                ////
                //TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_InvoiceDtl, "InvoiceCode", typeof(object));
                //TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_InvoiceDtl, "NetworkID", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_InvoiceDtl, "InvoiceDtlStatus", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_InvoiceDtl, "LogLUDTimeUTC", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_InvoiceDtl, "LogLUBy", typeof(object));
                ////////
            }
            #endregion

            #region //// SaveTemp Invoice_InvoiceDtl For Check:
            if (!bIsDelete)
            {
                // Upload:
                TUtils.CUtils.MyBuildDBDT_Common(
                    _cf.db // db
                    , "#input_Invoice_InvoiceDtl" // strTableName
                    , new object[] {
                            "InvoiceCode", TConst.BizMix.Default_DBColType
                            , "Idx", TConst.BizMix.Default_DBColType
                            , "NetworkID", TConst.BizMix.Default_DBColType
                            , "SpecCode", TConst.BizMix.Default_DBColType
                            , "SpecName", TConst.BizMix.Default_DBColType
                            , "ProductID", TConst.BizMix.Default_DBColType
                            , "ProductName", TConst.BizMix.Default_DBColType
                            , "VATRateCode", TConst.BizMix.Default_DBColType
                            , "VATRate", "float"
                            , "UnitCode", TConst.BizMix.Default_DBColType
                            , "UnitName", TConst.BizMix.Default_DBColType
                            , "UnitPrice", "float"
                            , "Qty", "float"
                            , "ValInvoice", "float"
                            , "ValTax", "float"
                            , "InventoryCode", TConst.BizMix.Default_DBColType
                            , "DiscountRate", "float"
                            , "ValDiscount", "float"
                            , "InvoiceDtlStatus", TConst.BizMix.Default_DBColType
                            , "Remark", TConst.BizMix.Default_DBColType
                            , "InvoiceDCF1", TConst.BizMix.Default_DBColType
                            , "InvoiceDCF2", TConst.BizMix.Default_DBColType
                            , "InvoiceDCF3", TConst.BizMix.Default_DBColType
                            , "InvoiceDCF4", TConst.BizMix.Default_DBColType
                            , "InvoiceDCF5", TConst.BizMix.Default_DBColType
                            , "LogLUDTimeUTC", TConst.BizMix.Default_DBColType
                            , "LogLUBy", TConst.BizMix.Default_DBColType
                        } // arrSingleStructure
                    , dtInput_Invoice_InvoiceDtl // dtData
                );
            }
            #endregion

            #region // Refine and Check Input Invoice_InvoiceDtl:
            if (!bIsDelete)
            {
                #region ----// Check ProductID + SpecCode là duy nhất:
                {
                    string strSql_CheckProducID = CmUtils.StringUtils.Replace(@"                            
                            ---- #tbl_Invoice_InvoiceDtl_TotalProductID:
                            select 
	                            t.InvoiceCode
	                            , t.SpecCode
	                            , t.ProductID
	                            , count(0) QtyProductID
                            into #tbl_Invoice_InvoiceDtl_TotalProductID
                            from #input_Invoice_InvoiceDtl t --//[mylock]
                            where(1=1)
	                            and t.ProductID is not null
                            group by 
	                            t.InvoiceCode
	                            , t.SpecCode
	                            , t.ProductID
                            ;

                            ---- Return:
                            select top 1
	                            t.InvoiceCode
	                            , t.ProductID
	                            , t.SpecCode
	                            , t.QtyProductID
                            from #tbl_Invoice_InvoiceDtl_TotalProductID t --//[mylock]
                            where(1=1)
	                            and t.QtyProductID > 1
                            ;

                            -- Clear For Debug:
                            drop table #tbl_Invoice_InvoiceDtl_TotalProductID;

						");
                    DataTable dt_CheckProductID = _cf.db.ExecQuery(
                        strSql_CheckProducID
                        ).Tables[0];
                    /////
                    if (dt_CheckProductID.Rows.Count > 0)
                    {
                        alParamsCoupleError.AddRange(new object[]{
                            "Check.ErrConditionalRaise", "t.QtyProductID > 1"
                            //, "Check.NumberRows", dt_CheckProductID.Rows.Count
                            , "Check.InvoiceCode", dt_CheckProductID.Rows[0]["InvoiceCode"]
                            , "Check.SpecCode", dt_CheckProductID.Rows[0]["SpecCode"]
                            , "Check.ProductID", dt_CheckProductID.Rows[0]["ProductID"]
                            , "Check.QtyProductID", dt_CheckProductID.Rows[0]["QtyProductID"]
                            });
                        throw CmUtils.CMyException.Raise(
                            TError.ErridnInventory.Invoice_Invoice_SaveX_Input_InvoiceDtl_ProductIDDuplicate
                            , null
                            , alParamsCoupleError.ToArray()
                            );
                    }
                    ////
                }
                #endregion

                #region ----// Check SpecCode là duy nhất:
                {
                    string strSql_CheckSpec = CmUtils.StringUtils.Replace(@"                         
                            ---- #tbl_Invoice_InvoiceDtl_TotalSpec:
                            select 
	                            t.InvoiceCode
	                            , t.SpecCode
	                            , count(0) QtySpecCode
                            into #tbl_Invoice_InvoiceDtl_TotalSpec
                            from #input_Invoice_InvoiceDtl t --//[mylock]
                            where(1=1)
	                            and t.ProductID is null
								and t.SpecCode is not null
                            group by 
	                            t.InvoiceCode
	                            , t.SpecCode
                            ;

                            ---- Return:
                            select top 1
	                            t.InvoiceCode
	                            , t.SpecCode
	                            , t.QtySpecCode
                            from #tbl_Invoice_InvoiceDtl_TotalSpec t --//[mylock]
                            where(1=1)
	                            and t.QtySpecCode > 1
                            ;

                            -- Clear For Debug:
                            drop table #tbl_Invoice_InvoiceDtl_TotalSpec;

						");
                    DataTable dt_CheckSpecCode = _cf.db.ExecQuery(
                        strSql_CheckSpec
                        ).Tables[0];
                    /////
                    if (dt_CheckSpecCode.Rows.Count > 0)
                    {
                        alParamsCoupleError.AddRange(new object[]{
                            "Check.ErrConditionalRaise", "t.QtyProductID > 1"
                            //, "Check.NumberRows", dt_CheckProductID.Rows.Count
                            , "Check.InvoiceCode", dt_CheckSpecCode.Rows[0]["InvoiceCode"]
                            , "Check.SpecCode", dt_CheckSpecCode.Rows[0]["SpecCode"]
                            , "Check.QtySpecCode", dt_CheckSpecCode.Rows[0]["QtySpecCode"]
                            });
                        throw CmUtils.CMyException.Raise(
                            TError.ErridnInventory.Invoice_Invoice_SaveX_Input_InvoiceDtl_SpecCodeDuplicate
                            , null
                            , alParamsCoupleError.ToArray()
                            );
                    }
                    ////
                }
                #endregion

            }
            #endregion

            #region // Build Invoice_InvoiceDtl:
            if (!bIsDelete)
            {
                string strSql_Build = CmUtils.StringUtils.Replace(@"
                        ----- #tbl_Invoice_InvoiceDtl_Build:
                        select 
	                        t.InvoiceCode
							, Row_Number() over( partition by t.InvoiceCode order by t.Idx desc) Idx 
							--, Row_Number() over (order by t.Idx desc) Idx 
	                        --, t.Idx
	                        , t.NetworkID
	                        , t.SpecCode
	                        , t.SpecName
	                        , t.ProductID
	                        , t.ProductName
	                        , t.VATRateCode
	                        , t.VATRate
	                        , t.UnitCode
	                        , t.UnitName
	                        , t.UnitPrice
	                        , t.Qty
	                        , t.ValInvoice
	                        , t.ValTax
	                        , t.InventoryCode
	                        , t.DiscountRate
	                        , t.ValDiscount
	                        , '@strInvoiceStatus' InvoiceDtlStatus --t.InvoiceDtlStatus
	                        , t.Remark
	                        , t.InvoiceDCF1
	                        , t.InvoiceDCF2
	                        , t.InvoiceDCF3
	                        , t.InvoiceDCF4
	                        , t.InvoiceDCF5
	                        , '@strLogLUDTimeUTC' LogLUDTimeUTC --t.LogLUDTimeUTC
	                        , '@strLogLUBy' LogLUBy --t.LogLUBy
                        into #tbl_Invoice_InvoiceDtl_Build
                        from #input_Invoice_InvoiceDtl t --//[mylock]

                        select null tbl_Invoice_InvoiceDtl_Build, t.* from #tbl_Invoice_InvoiceDtl_Build t --//[mylock];
                    ;"
                    , "@strInvoiceStatus", TConst.InvoiceStatus.Pending
                    , "@strLogLUDTimeUTC", dtimeSys.ToString("yyyy-MM-dd")
                    , "@strLogLUBy", strWAUserCode
                    );
                DataTable dt_Build = _cf.db.ExecQuery(
                    strSql_Build
                    ).Tables[0];
                /////
            }
            #endregion

            #region // SaveDB:
            {
                //// Clear All:
                {
                    string strSqlDelete = CmUtils.StringUtils.Replace(@"
                            ---- #tbl_Invoice_InvoiceDtl:
                            select 
                                t.InvoiceCode
                                , t.Idx
                            into #tbl_Invoice_InvoiceDtl
                            from Invoice_InvoiceDtl t --//[mylock]
	                            inner join #input_Invoice_Invoice f --//[mylock]
		                            on t.InvoiceCode = f.InvoiceCode
                            where (1=1)
                            ;

                            --- Delete:
                            ---- Invoice_InvoiceDtl:
                            delete t 
                            from Invoice_InvoiceDtl t --//[mylock]
	                            inner join #tbl_Invoice_InvoiceDtl f --//[mylock]
		                            on t.InvoiceCode = f.InvoiceCode
		                                and t.Idx = f.Idx
                            where (1=1)
                            ;

                            ---- Invoice_Invoice:
                            delete t
                            from Invoice_Invoice t --//[mylock]
	                            inner join #input_Invoice_Invoice f --//[mylock]
		                            on t.InvoiceCode = f.InvoiceCode
                            where (1=1)
                            ;

                            --- Clear For Debug:
                            drop table #tbl_Invoice_InvoiceDtl;
						");
                    DataSet dtDB = _cf.db.ExecQuery(
                        strSqlDelete
                        );
                }

                //// Insert All:
                if (!bIsDelete)
                {
                    #region // Insert:
                    {
                        ////
                        string zzzzClauseInsert_Invoice_Invoice_zSave = CmUtils.StringUtils.Replace(@"
                                ---- Invoice_Invoice:                                
                                insert into Invoice_Invoice(
	                                InvoiceCode
	                                , MST
	                                , NetworkID
	                                , RefNo
	                                , FormNo
	                                , Sign
	                                , SourceInvoiceCode
	                                , InvoiceAdjType
	                                , PaymentMethodCode
	                                , CustomerNNTCode
	                                , CustomerNNTName
	                                , CustomerNNTAddress
	                                , CustomerNNTPhone
	                                , CustomerNNTBankName
	                                , CustomerNNTEmail
	                                , CustomerNNTAccNo
	                                , CustomerNNTBuyerName
	                                , CustomerMST
	                                , TInvoiceCode
	                                , InvoiceNo
	                                , InvoiceDateUTC
	                                , EmailSend
	                                , InvoiceFileSpec
	                                , InvoiceFilePath
	                                , InvoicePDFFilePath
	                                , TotalValInvoice
	                                , TotalValVAT
	                                , TotalValPmt
	                                , CreateDTimeUTC
	                                , CreateBy
	                                , InvoiceNoDTimeUTC
	                                , InvoiceNoBy
	                                , SignDTimeUTC
	                                , SignBy
	                                , ApprDTimeUTC
	                                , ApprBy
	                                , CancelDTimeUTC
	                                , CancelBy
	                                , SendEmailDTimeUTC
	                                , SendEmailBy
	                                , IssuedDTimeUTC
	                                , IssuedBy
	                                , DeleteDTimeUTC
	                                , DeleteBy
	                                , ChangeDTimeUTC
	                                , ChangeBy
	                                , InvoiceVerifyCQTCode
	                                , CurrencyCode
	                                , CurrencyRate
	                                , ValGoodsNotTaxable
	                                , ValGoodsNotChargeTax
	                                , ValGoodsVAT5
	                                , ValVAT5
	                                , ValGoodsVAT10
	                                , ValVAT10
	                                , NNTFullName
	                                , NNTFullAdress
	                                , NNTPhone
	                                , NNTFax
	                                , NNTEmail
	                                , NNTWebsite
	                                , NNTAccNo
	                                , NNTBankName
	                                , LUDTimeUTC
	                                , LUBy
	                                , Remark
	                                , InvoiceCF1
	                                , InvoiceCF2
	                                , InvoiceCF3
	                                , InvoiceCF4
	                                , InvoiceCF5
	                                , InvoiceCF6
	                                , InvoiceCF7
	                                , InvoiceCF8
	                                , InvoiceCF9
	                                , InvoiceCF10
	                                , FlagChange
	                                , FlagPushOutSite
	                                , FlagDeleteOutSite
	                                , InvoiceStatus
	                                , LogLUDTimeUTC
	                                , LogLUBy
                                )
                                select 
	                                t.InvoiceCode
	                                , t.MST
	                                , t.NetworkID
	                                , t.RefNo
	                                , t.FormNo
	                                , t.Sign
	                                , t.SourceInvoiceCode
	                                , t.InvoiceAdjType
	                                , t.PaymentMethodCode
	                                , t.CustomerNNTCode
	                                , t.CustomerNNTName
	                                , t.CustomerNNTAddress
	                                , t.CustomerNNTPhone
	                                , t.CustomerNNTBankName
	                                , t.CustomerNNTEmail
	                                , t.CustomerNNTAccNo
	                                , t.CustomerNNTBuyerName
	                                , t.CustomerMST
	                                , t.TInvoiceCode
	                                , t.InvoiceNo
	                                , t.InvoiceDateUTC
	                                , t.EmailSend
	                                , t.InvoiceFileSpec
	                                , t.InvoiceFilePath
	                                , t.InvoicePDFFilePath
	                                , t.TotalValInvoice
	                                , t.TotalValVAT
	                                , t.TotalValPmt
	                                , t.CreateDTimeUTC
	                                , t.CreateBy
	                                , t.InvoiceNoDTimeUTC
	                                , t.InvoiceNoBy
	                                , t.SignDTimeUTC
	                                , t.SignBy
	                                , t.ApprDTimeUTC
	                                , t.ApprBy
	                                , t.CancelDTimeUTC
	                                , t.CancelBy
	                                , t.SendEmailDTimeUTC
	                                , t.SendEmailBy
	                                , t.IssuedDTimeUTC
	                                , t.IssuedBy
	                                , t.DeleteDTimeUTC
	                                , t.DeleteBy
	                                , t.ChangeDTimeUTC
	                                , t.ChangeBy
	                                , t.InvoiceVerifyCQTCode
	                                , t.CurrencyCode
	                                , t.CurrencyRate
	                                , t.ValGoodsNotTaxable
	                                , t.ValGoodsNotChargeTax
	                                , t.ValGoodsVAT5
	                                , t.ValVAT5
	                                , t.ValGoodsVAT10
	                                , t.ValVAT10
	                                , t.NNTFullName
	                                , t.NNTFullAdress
	                                , t.NNTPhone
	                                , t.NNTFax
	                                , t.NNTEmail
	                                , t.NNTWebsite
	                                , t.NNTAccNo
	                                , t.NNTBankName
	                                , t.LUDTimeUTC
	                                , t.LUBy
	                                , t.Remark
	                                , t.InvoiceCF1
	                                , t.InvoiceCF2
	                                , t.InvoiceCF3
	                                , t.InvoiceCF4
	                                , t.InvoiceCF5
	                                , t.InvoiceCF6
	                                , t.InvoiceCF7
	                                , t.InvoiceCF8
	                                , t.InvoiceCF9
	                                , t.InvoiceCF10
	                                , t.FlagChange
	                                , t.FlagPushOutSite
	                                , t.FlagDeleteOutSite
	                                , t.InvoiceStatus
	                                , t.LogLUDTimeUTC
	                                , t.LogLUBy
                                from #tbl_Invoice_Invoice_Build t --//[mylock]
                            ");
                        /////
                        string zzzzClauseInsert_Invoice_InvoiceDtl_zSave = CmUtils.StringUtils.Replace(@"
                                ---- Invoice_InvoiceDtl:  
                                insert into Invoice_InvoiceDtl(
	                                InvoiceCode
	                                , Idx
	                                , NetworkID
	                                , SpecCode
	                                , SpecName
	                                , ProductID
	                                , ProductName
	                                , VATRateCode
	                                , VATRate
	                                , UnitCode
	                                , UnitName
	                                , UnitPrice
	                                , Qty
	                                , ValInvoice
	                                , ValTax
	                                , InventoryCode
	                                , DiscountRate
	                                , ValDiscount
	                                , InvoiceDtlStatus
	                                , Remark
	                                , InvoiceDCF1
	                                , InvoiceDCF2
	                                , InvoiceDCF3
	                                , InvoiceDCF4
	                                , InvoiceDCF5
	                                , LogLUDTimeUTC
	                                , LogLUBy
                                )
                                select 
	                                t.InvoiceCode
	                                , t.Idx
	                                , t.NetworkID
	                                , t.SpecCode
	                                , t.SpecName
	                                , t.ProductID
	                                , t.ProductName
	                                , t.VATRateCode
	                                , t.VATRate
	                                , t.UnitCode
	                                , t.UnitName
	                                , t.UnitPrice
	                                , t.Qty
	                                , t.ValInvoice
	                                , t.ValTax
	                                , t.InventoryCode
	                                , t.DiscountRate
	                                , t.ValDiscount
	                                , t.InvoiceDtlStatus
	                                , t.Remark
	                                , t.InvoiceDCF1
	                                , t.InvoiceDCF2
	                                , t.InvoiceDCF3
	                                , t.InvoiceDCF4
	                                , t.InvoiceDCF5
	                                , t.LogLUDTimeUTC
	                                , t.LogLUBy
                                from #tbl_Invoice_InvoiceDtl_Build t
                            ");

                        /////
                        string strSqlExec = CmUtils.StringUtils.Replace(@"
								----
								zzzzClauseInsert_Invoice_Invoice_zSave			
								----
								zzzzClauseInsert_Invoice_InvoiceDtl_zSave			
								----
							"
                            , "zzzzClauseInsert_Invoice_Invoice_zSave", zzzzClauseInsert_Invoice_Invoice_zSave
                            , "zzzzClauseInsert_Invoice_InvoiceDtl_zSave", zzzzClauseInsert_Invoice_InvoiceDtl_zSave
                            );
                        ////
                        DataSet dsExec = _cf.db.ExecQuery(strSqlExec);
                        ////
                    }
                    #endregion
                }
            }
            #endregion

            #region // Check One RefNo:
            if (!bIsDelete)
            {
                myCheck_Invoice_Invoice_RefNo_New20190705(
                    ref alParamsCoupleError // alParamsCoupleError
                    , dtimeSys // dtimeSys
                    , "#tbl_Invoice_Invoice_Build"  //zzzz_tbl_Invoice_Invoice_RefNo
                    );
            }
            #endregion

            #region // myCheck_Invoice_Invoice_Total:
            if (!bIsDelete)
            {
                myCheck_Invoice_Invoice_Total_New20190705(
                    ref alParamsCoupleError // alParamsCoupleError
                    , dtimeSys // dtimeSys
                    , "#tbl_Invoice_Invoice_Build"  //zzzz_tbl_Invoice_Invoice_RefNo
                    );
                ////
                myCheck_Invoice_InvoiceDtl_Total(
                    ref alParamsCoupleError // alParamsCoupleError
                    , dtimeSys // dtimeSys
                    , "#tbl_Invoice_Invoice_Build"  //zzzz_tbl_Invoice_Invoice_RefNo
                    );
            }
            #endregion

            #region // myCheck_OS_Invoice_Invoice_CheckMasterPrd:
            if (!bIsDelete)
            {
                myCheck_OS_Invoice_Invoice_CheckMasterPrd(
                    ref alParamsCoupleError  //alParamsCoupleError
                    , dtimeSys  //dtimeSys
                    , strTid  //strTid
                    , "#tbl_Invoice_Invoice_Build"  //zzzz_tbl_Invoice_Invoice_RefNo
                    );
            }
            #endregion

            #region //// Clear For Debug:
            if (!bIsDelete)
            {
                ////
                string strSqlClearForDebug = CmUtils.StringUtils.Replace(@"
						---- Clear for Debug:
						drop table #input_Invoice_Invoice;
						drop table #input_Invoice_InvoiceDtl;
					");

                _cf.db.ExecQuery(
                    strSqlClearForDebug
                    );
                ////
            }
            else
            {
                ////
                string strSqlClearForDebug = CmUtils.StringUtils.Replace(@"
						---- Clear for Debug:
						drop table #input_Invoice_Invoice;
					");

                _cf.db.ExecQuery(
                    strSqlClearForDebug
                    );
                ////

            }
        #endregion

        // Return Good:
        MyCodeLabel_Done:
            return;
            //TDALUtils.DBUtils.CommitSafety(_cf.db);
            //mdsFinal.AcceptChanges();
            //return mdsFinal;		
        }
        public DataSet Invoice_Invoice_Save_Replace(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            ////
            , object objFlagIsDelete
            ////
            , object objInvoiceCode
            , object objRefNo
            , object objMST
            , object objPaymentMethodCode
            , object objCustomerNNTCode
            , object objCustomerNNTName
            , object objCustomerNNTAddress
            , object objCustomerNNTPhone
            , object objCustomerNNTBankName
            , object objCustomerNNTEmail
            , object objCustomerNNTAccNo
            , object objCustomerNNTBuyerName
            , object objCustomerMST
            , object objTInvoiceCode
            , object objInvoiceDateUTC
            , object objTotalValInvoice
            , object objTotalValVAT
            , object objTotalValPmt
            , object objRemark
            ////
            , object objInvoicePDFFilePath // Lưu FilePatch cho RefNo  chốt HuwongNV 20190613
                                           ////
            , DataSet dataSet
            )
        {
            #region // Temp:
            DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            //int nTidSeq = 0;
            DateTime dtimeSys = DateTime.UtcNow;
            string strFunctionName = "Invoice_Invoice_Save_Replace";
            string strErrorCodeDefault = TError.ErridnInventory.Invoice_Invoice_Save_Replace;
            alParamsCoupleError.AddRange(new object[]{
                    "strFunctionName", strFunctionName
                    , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
                    /////
                    , "objFlagIsDelete", objFlagIsDelete
			        ////
                    , "objInvoiceCode", objInvoiceCode
                    , "objRefNo", objRefNo
                    , "objMST", objMST
                    , "objPaymentMethodCode", objPaymentMethodCode
                    , "objCustomerNNTCode", objCustomerNNTCode
                    , "objCustomerNNTName", objCustomerNNTName
                    , "objCustomerNNTAddress", objCustomerNNTAddress
                    , "objCustomerNNTPhone", objCustomerNNTPhone
                    , "objCustomerNNTBankName", objCustomerNNTBankName
                    , "objCustomerNNTEmail", objCustomerNNTEmail
                    , "objCustomerNNTAccNo", objCustomerNNTAccNo
                    , "objCustomerNNTBuyerName", objCustomerNNTBuyerName
                    , "objCustomerMST", objCustomerMST
                    , "objTInvoiceCode", objTInvoiceCode
                    , "objInvoiceDateUTC", objInvoiceDateUTC
                    , "objTotalValInvoice", objTotalValInvoice
                    , "objTotalValVAT", objTotalValVAT
                    , "objTotalValPmt", objTotalValPmt
                    , "objRemark", objRemark
                    ////
                    , "objInvoicePDFFilePath", objInvoicePDFFilePath 
                    ////
                    });
            #endregion

            try
            {
                #region // Init:
                //_cf.db.LogUserId = _cf.sinf.strUserCode;
                _cf.db.BeginTransaction();

                // Write RequestLog:
                _cf.ProcessBizReq_OutSide(
                    strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    , alParamsCoupleError // alParamsCoupleError
                    );

                // Sys_User_CheckAuthentication:
                //Sys_User_CheckAuthentication(
                //    ref alParamsCoupleError
                //    , strWAUserCode
                //    , strWAUserPassword
                //    );

                // Check Access/Deny:
                Sys_Access_CheckDenyV30(
                    ref alParamsCoupleError
                    , strWAUserCode
                    , strFunctionName
                    );
                #endregion

                #region // Refine and check:
                ////
                bool bIsDelete = CmUtils.StringUtils.StringEqual(objFlagIsDelete, TConst.Flag.Yes);
                #endregion

                #region // Invoice_Invoice_DeletedX:
                if (!bIsDelete)
                {
                    DataTable dtDB_Invoice_Invoice = null;

                    Invoice_Invoice_CheckDB(
                        ref alParamsCoupleError // alParamsCoupleError
                        , objRefNo // objInvoiceCode
                        , TConst.Flag.Yes // strFlagExistToCheck
                        , "" // strInvoiceStatusListToCheck
                        , out dtDB_Invoice_Invoice // dtDB_Invoice_Invoice
                        );

                    ////
                    if (!CmUtils.StringUtils.StringEqualIgnoreCase(dtDB_Invoice_Invoice.Rows[0]["InvoiceStatus"], TConst.InvoiceStatus.Deleted))
                    {
                        ///
                        Invoice_Invoice_DeletedX(
                            strTid // strTid
                            , strGwUserCode // strGwUserCode
                            , strGwPassword // strGwPassword
                            , strWAUserCode // strWAUserCode
                            , strWAUserPassword // strWAUserPassword
                            , ref alParamsCoupleError // alParamsCoupleError
                            , dtimeSys // dtimeSys
                                       ////
                            , objRefNo // objInvoiceCode
                            , objInvoicePDFFilePath // objInvoicePDFFilePath
                            , objRemark // objRemark
                            );
                        ////
                    }
                }
                ////
                //CmUtils.DataUtils.MoveDataTable(ref mdsFinal, ref dsGetData);
                #endregion

                #region // Invoice_Invoice_SaveX:
                //DataSet dsGetData = null;
                {
                    Invoice_Invoice_SaveX(
                        strTid // strTid
                        , strGwUserCode // strGwUserCode
                        , strGwPassword // strGwPassword
                        , strWAUserCode // strWAUserCode
                        , strWAUserPassword // strWAUserPassword
                        , ref alParamsCoupleError // alParamsCoupleError
                        , dtimeSys // dtimeSys
                                   ////
                        , objFlagIsDelete // objFlagIsDelete
                                          ////
                        , objInvoiceCode // objInvoiceCode
                        , objRefNo // objRefNo
                        , TConst.InvoiceAdjType.Normal // objInvoiceAdjType
                        , objMST // objMST
                        , TConst.SourceInvoiceCode.InvoiceReplace // objSourceInvoiceCode
                        , objPaymentMethodCode // objPaymentMethodCode
                        , objCustomerNNTCode // objCustomerNNTCode
                        , objCustomerNNTName // objCustomerNNTName
                        , objCustomerNNTAddress // objCustomerNNTAddress
                        , objCustomerNNTPhone // objCustomerNNTPhone
                        , objCustomerNNTBankName // objCustomerNNTBankName
                        , objCustomerNNTEmail // objCustomerNNTEmail
                        , objCustomerNNTAccNo // objCustomerNNTAccNo
                        , objCustomerNNTBuyerName // objCustomerNNTBuyerName
                        , objCustomerMST // objCustomerMST
                        , objTInvoiceCode // objTInvoiceCode
                        , objInvoiceDateUTC // objInvoiceDateUTC
                        , objTotalValInvoice // objTotalValInvoice
                        , objTotalValVAT // objTotalValVAT
                        , objTotalValPmt // objTotalValPmt
                        , objRemark // objRemark
                                    ////
                        , dataSet // dataSet
                        );
                }
                ////
                //CmUtils.DataUtils.MoveDataTable(ref mdsFinal, ref dsGetData);
                #endregion

                // Return Good:
                TDALUtils.DBUtils.CommitSafety(_cf.db);
                mdsFinal.AcceptChanges();
                return mdsFinal;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Rollback:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);

                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsFinal
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Rollback and Release resources:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);
                TDALUtils.DBUtils.ReleaseAllSemaphore(_cf.db_Sys, true);

                // Write ReturnLog:
                _cf.ProcessBizReturn_OutSide(
                    ref mdsFinal // mdsFinal
                    , strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    );
                #endregion
            }
        }
        public DataSet Invoice_Invoice_Save_Replace_New20190705(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            ////
            , object objFlagIsDelete
            , object objFlagIsCheckInvoiceTotal
            ////
            , object objSubject
            , object objBodyText
            , object objBodyHTML
            ////
            , DataSet dataSet

            )
        {
            #region // Temp:
            DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            //int nTidSeq = 0;
            DateTime dtimeSys = DateTime.UtcNow;
            string strFunctionName = "Invoice_Invoice_Save_Replace";
            string strErrorCodeDefault = TError.ErridnInventory.Invoice_Invoice_Save_Replace;
            alParamsCoupleError.AddRange(new object[]{
                    "strFunctionName", strFunctionName
                    , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
                    /////
                    , "objFlagIsDelete", objFlagIsDelete
			        ////
                    , "objSubject", objSubject
                    , "objBodyText", objBodyText
                    , "objBodyHTML", objBodyHTML
                    ////
                    });
            #endregion

            try
            {
                #region // Init:
                //_cf.db.LogUserId = _cf.sinf.strUserCode;
                _cf.db.BeginTransaction();

                // Write RequestLog:
                _cf.ProcessBizReq_OutSide(
                    strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    , alParamsCoupleError // alParamsCoupleError
                    );

                // Sys_User_CheckAuthentication:
                //Sys_User_CheckAuthentication(
                //    ref alParamsCoupleError
                //    , strWAUserCode
                //    , strWAUserPassword
                //    );

                // Check Access/Deny:
                Sys_Access_CheckDenyV30(
                    ref alParamsCoupleError
                    , strWAUserCode
                    , strFunctionName
                    );
                #endregion

                #region // Refine and check:
                ////
                bool bIsDelete = CmUtils.StringUtils.StringEqual(objFlagIsDelete, TConst.Flag.Yes);
                #endregion

                #region // Invoice_Invoice_SaveX:
                //DataSet dsGetData = null;
                {
                    Invoice_Invoice_SaveX_New20191101(
                        strTid // strTid
                        , strGwUserCode // strGwUserCode
                        , strGwPassword // strGwPassword
                        , strWAUserCode // strWAUserCode
                        , strWAUserPassword // strWAUserPassword
                        , ref alParamsCoupleError // alParamsCoupleError
                        , dtimeSys // dtimeSys
                                   ////
                        , objFlagIsDelete // objFlagIsDelete
                        , objFlagIsCheckInvoiceTotal
                        ////
                        , dataSet // dataSet
                        );
                }
                ////
                //CmUtils.DataUtils.MoveDataTable(ref mdsFinal, ref dsGetData);
                #endregion

                #region // Invoice_Invoice_DeletedX:
                if (!bIsDelete)
                {
                    /////
                    #region // Convert Input:
                    //DataSet dsData = TUtils.CUtils.StdDS(arrobjDSData);
                    //if (dsData == null) dsData = new DataSet("dsData");
                    //dsData.AcceptChanges();
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.dataSet", CmUtils.XmlUtils.DataSet2XmlSimple(dataSet)
                        });
                    #endregion

                    #region // Refine and Check Input Invoice_Invoice:
                    ////
                    DataTable dtInput_Invoice_Invoice = null;
                    {
                        ////
                        string strTableCheck = "Invoice_Invoice";
                        ////
                        if (!dataSet.Tables.Contains(strTableCheck))
                        {
                            alParamsCoupleError.AddRange(new object[]{
                                "Check.TableName", strTableCheck
                                });
                            throw CmUtils.CMyException.Raise(
                                TError.ErridnInventory.Invoice_Invoice_SaveX_Input_InvoiceTblNotFound
                                , null
                                , alParamsCoupleError.ToArray()
                                );
                        }
                        dtInput_Invoice_Invoice = dataSet.Tables[strTableCheck];
                        ////
                        if (dtInput_Invoice_Invoice.Rows.Count < 1)
                        {
                            alParamsCoupleError.AddRange(new object[]{
                                "Check.TableName", strTableCheck
                                });
                            throw CmUtils.CMyException.Raise(
                                TError.ErridnInventory.Invoice_Invoice_SaveX_Input_InvoiceTblInvalid
                                , null
                                , alParamsCoupleError.ToArray()
                                );
                        }
                        ////
                    }
                    /////
                    TUtils.CUtils.StdDataInTable(
                        dtInput_Invoice_Invoice // dtData
                        , "StdParam", "InvoiceCode" // arrstrCouple
                        , "StdParam", "RefNo" // arrstrCouple
                        , "StdParam", "InvoicePDFFilePath" // arrstrCouple
                        , "StdParam", "Remark" // arrstrCouple
                        , "", "AttachedDelFilePath" // arrstrCouple
                        , "", "DeleteReason" // arrstrCouple
                        );
                    ////
                    #endregion
                    ////
                    object objInvoiceCode = dtInput_Invoice_Invoice.Rows[0]["InvoiceCode"];
                    object objRefNo = dtInput_Invoice_Invoice.Rows[0]["RefNo"];
                    object objRemark = dtInput_Invoice_Invoice.Rows[0]["Remark"];
                    object objInvoicePDFFilePath = dtInput_Invoice_Invoice.Rows[0]["InvoicePDFFilePath"];
                    object objAttachedDelFilePath = dtInput_Invoice_Invoice.Rows[0]["AttachedDelFilePath"];
                    object objDeleteReason = dtInput_Invoice_Invoice.Rows[0]["DeleteReason"];
                    ////
                    DataTable dtDB_Invoice_Invoice = null;

                    Invoice_Invoice_CheckDB(
                        ref alParamsCoupleError // alParamsCoupleError
                        , objRefNo // objInvoiceCode
                        , TConst.Flag.Yes // strFlagExistToCheck
                        , "" // strInvoiceStatusListToCheck
                        , out dtDB_Invoice_Invoice // dtDB_Invoice_Invoice
                        );

                    ////
                    if (!CmUtils.StringUtils.StringEqualIgnoreCase(dtDB_Invoice_Invoice.Rows[0]["InvoiceStatus"], TConst.InvoiceStatus.Deleted))
                    {
                        ///
                        #region // Invoice_Invoice_DeletedX_New20190715:
                        Invoice_Invoice_DeletedX_New20190715(
                            strTid // strTid
                            , strGwUserCode // strGwUserCode
                            , strGwPassword // strGwPassword
                            , strWAUserCode // strWAUserCode
                            , strWAUserPassword // strWAUserPassword
                            , ref alParamsCoupleError // alParamsCoupleError
                            , dtimeSys // dtimeSys
                                       ////
                            , objRefNo // objInvoiceCode
                            , objInvoicePDFFilePath // objInvoicePDFFilePath
                            , objAttachedDelFilePath // objAttachedDelFilePath
                            , objDeleteReason // objDeleteReason
                            , objRemark // objRemark
                            );
                        ////
                        #endregion
                        ///
                        #region // Email_BatchSendEmail_SaveAndSendX:
                        {
                            Email_BatchSendEmail_SaveAndSendX(
                                strTid // strTid
                                , strGwUserCode // strGwUserCode
                                , strGwPassword // strGwPassword
                                , strWAUserCode // strWAUserCode
                                , strWAUserPassword // strWAUserPassword
                                , ref alParamsCoupleError // alParamsCoupleError
                                , dtimeSys // dtimeSys
                                           ////
                                , objSubject // objSubject
                                , objBodyText // objBodyText
                                , objBodyHTML // objBodyHTML
                                , dataSet // dsData
                                );
                        }
                        #endregion
                    }
                }
                ////
                //CmUtils.DataUtils.MoveDataTable(ref mdsFinal, ref dsGetData);
                #endregion

                // Return Good:
                TDALUtils.DBUtils.CommitSafety(_cf.db);
                mdsFinal.AcceptChanges();
                return mdsFinal;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Rollback:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);

                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsFinal
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Rollback and Release resources:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);
                TDALUtils.DBUtils.ReleaseAllSemaphore(_cf.db_Sys, true);

                // Write ReturnLog:
                _cf.ProcessBizReturn_OutSide_3A(
                    ref mdsFinal // mdsFinal
                    , strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    , alParamsCoupleError // alParamsCoupleError
                    );
                #endregion
            }
        }

        public DataSet Invoice_Invoice_Save_Replace_New20191112(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            ////
            , object objFlagIsDelete
            , object objFlagIsCheckInvoiceTotal
            ////
            , object objSubject
            , object objBodyText
            , object objBodyHTML
            ////
            , DataSet dataSet

            )
        {
            #region // Temp:
            DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            //int nTidSeq = 0;
            DateTime dtimeSys = DateTime.UtcNow;
            string strFunctionName = "Invoice_Invoice_Save_Replace";
            string strErrorCodeDefault = TError.ErridnInventory.Invoice_Invoice_Save_Replace;
            alParamsCoupleError.AddRange(new object[]{
                    "strFunctionName", strFunctionName
                    , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
                    /////
                    , "objFlagIsDelete", objFlagIsDelete
			        ////
                    , "objSubject", objSubject
                    , "objBodyText", objBodyText
                    , "objBodyHTML", objBodyHTML
                    ////
                    });
            #endregion

            try
            {
                #region // Init:
                //_cf.db.LogUserId = _cf.sinf.strUserCode;
                _cf.db.BeginTransaction();

                // Write RequestLog:
                _cf.ProcessBizReq_OutSide(
                    strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    , alParamsCoupleError // alParamsCoupleError
                    );

                // Sys_User_CheckAuthentication:
                //Sys_User_CheckAuthentication(
                //    ref alParamsCoupleError
                //    , strWAUserCode
                //    , strWAUserPassword
                //    );

                // Check Access/Deny:
                Sys_Access_CheckDenyV30(
                    ref alParamsCoupleError
                    , strWAUserCode
                    , strFunctionName
                    );
                #endregion

                #region // Refine and check:
                ////
                bool bIsDelete = CmUtils.StringUtils.StringEqual(objFlagIsDelete, TConst.Flag.Yes);
                #endregion

                #region // Invoice_Invoice_SaveX:
                //DataSet dsGetData = null;
                {
                    Invoice_Invoice_SaveX_New20191112(
                        strTid // strTid
                        , strGwUserCode // strGwUserCode
                        , strGwPassword // strGwPassword
                        , strWAUserCode // strWAUserCode
                        , strWAUserPassword // strWAUserPassword
                        , ref alParamsCoupleError // alParamsCoupleError
                        , dtimeSys // dtimeSys
                                   ////
                        , objFlagIsDelete // objFlagIsDelete
                        , objFlagIsCheckInvoiceTotal
                        ////
                        , dataSet // dataSet
                        );
                }
                ////
                //CmUtils.DataUtils.MoveDataTable(ref mdsFinal, ref dsGetData);
                #endregion

                #region // Invoice_Invoice_DeletedX:
                if (!bIsDelete)
                {
                    /////
                    #region // Convert Input:
                    //DataSet dsData = TUtils.CUtils.StdDS(arrobjDSData);
                    //if (dsData == null) dsData = new DataSet("dsData");
                    //dsData.AcceptChanges();
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.dataSet", CmUtils.XmlUtils.DataSet2XmlSimple(dataSet)
                        });
                    #endregion

                    #region // Refine and Check Input Invoice_Invoice:
                    ////
                    DataTable dtInput_Invoice_Invoice = null;
                    {
                        ////
                        string strTableCheck = "Invoice_Invoice";
                        ////
                        if (!dataSet.Tables.Contains(strTableCheck))
                        {
                            alParamsCoupleError.AddRange(new object[]{
                                "Check.TableName", strTableCheck
                                });
                            throw CmUtils.CMyException.Raise(
                                TError.ErridnInventory.Invoice_Invoice_SaveX_Input_InvoiceTblNotFound
                                , null
                                , alParamsCoupleError.ToArray()
                                );
                        }
                        dtInput_Invoice_Invoice = dataSet.Tables[strTableCheck];
                        ////
                        if (dtInput_Invoice_Invoice.Rows.Count < 1)
                        {
                            alParamsCoupleError.AddRange(new object[]{
                                "Check.TableName", strTableCheck
                                });
                            throw CmUtils.CMyException.Raise(
                                TError.ErridnInventory.Invoice_Invoice_SaveX_Input_InvoiceTblInvalid
                                , null
                                , alParamsCoupleError.ToArray()
                                );
                        }
                        ////
                    }
                    /////
                    TUtils.CUtils.StdDataInTable(
                        dtInput_Invoice_Invoice // dtData
                        , "StdParam", "InvoiceCode" // arrstrCouple
                        , "StdParam", "RefNo" // arrstrCouple
                        , "StdParam", "InvoicePDFFilePath" // arrstrCouple
                        , "StdParam", "Remark" // arrstrCouple
                        , "", "AttachedDelFilePath" // arrstrCouple
                        , "", "DeleteReason" // arrstrCouple
                        );
                    ////
                    #endregion
                    ////
                    object objInvoiceCode = dtInput_Invoice_Invoice.Rows[0]["InvoiceCode"];
                    object objRefNo = dtInput_Invoice_Invoice.Rows[0]["RefNo"];
                    object objRemark = dtInput_Invoice_Invoice.Rows[0]["Remark"];
                    object objInvoicePDFFilePath = dtInput_Invoice_Invoice.Rows[0]["InvoicePDFFilePath"];
                    //object objAttachedDelFilePath = dtInput_Invoice_Invoice.Rows[0]["AttachedDelFilePath"];
                    //object objDeleteReason = dtInput_Invoice_Invoice.Rows[0]["DeleteReason"];
                    ////
                    DataTable dtDB_Invoice_Invoice = null;

                    Invoice_Invoice_CheckDB(
                        ref alParamsCoupleError // alParamsCoupleError
                        , objRefNo // objInvoiceCode
                        , TConst.Flag.Yes // strFlagExistToCheck
                        , "" // strInvoiceStatusListToCheck
                        , out dtDB_Invoice_Invoice // dtDB_Invoice_Invoice
                        );

                    ////
                    if (!CmUtils.StringUtils.StringEqualIgnoreCase(dtDB_Invoice_Invoice.Rows[0]["InvoiceStatus"], TConst.InvoiceStatus.Deleted))
                    {
                        ///
                        #region // Invoice_Invoice_DeletedX_New20190715:
                        Invoice_Invoice_DeletedX_New20191112(
                            strTid // strTid
                            , strGwUserCode // strGwUserCode
                            , strGwPassword // strGwPassword
                            , strWAUserCode // strWAUserCode
                            , strWAUserPassword // strWAUserPassword
                            , ref alParamsCoupleError // alParamsCoupleError
                            , dtimeSys // dtimeSys
                                       ////
                            , objRefNo // objInvoiceCode
                            , objInvoicePDFFilePath // objInvoicePDFFilePath
                            //, objAttachedDelFilePath // objAttachedDelFilePath
                            //, objDeleteReason // objDeleteReason
                            , objRemark // objRemark
                            );
                        ////
                        #endregion
                        ///
                        #region // Email_BatchSendEmail_SaveAndSendX:
                        {
                            Email_BatchSendEmail_SaveAndSendX(
                                strTid // strTid
                                , strGwUserCode // strGwUserCode
                                , strGwPassword // strGwPassword
                                , strWAUserCode // strWAUserCode
                                , strWAUserPassword // strWAUserPassword
                                , ref alParamsCoupleError // alParamsCoupleError
                                , dtimeSys // dtimeSys
                                           ////
                                , objSubject // objSubject
                                , objBodyText // objBodyText
                                , objBodyHTML // objBodyHTML
                                , dataSet // dsData
                                );
                        }
                        #endregion
                    }
                }
                ////
                //CmUtils.DataUtils.MoveDataTable(ref mdsFinal, ref dsGetData);
                #endregion

                // Return Good:
                TDALUtils.DBUtils.CommitSafety(_cf.db);
                mdsFinal.AcceptChanges();
                return mdsFinal;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Rollback:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);

                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsFinal
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Rollback and Release resources:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);
                TDALUtils.DBUtils.ReleaseAllSemaphore(_cf.db_Sys, true);

                // Write ReturnLog:
                _cf.ProcessBizReturn_OutSide_3A(
                    ref mdsFinal // mdsFinal
                    , strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    , alParamsCoupleError // alParamsCoupleError
                    );
                #endregion
            }
        }

        public DataSet Invoice_Invoice_Save_Adj(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            ////
            , object objFlagIsDelete
            ////
            , object objInvoiceCode
            , object objRefNo
            , object objInvoiceAdjType
            , object objMST
            , object objPaymentMethodCode
            , object objCustomerNNTCode
            , object objCustomerNNTName
            , object objCustomerNNTAddress
            , object objCustomerNNTPhone
            , object objCustomerNNTBankName
            , object objCustomerNNTEmail
            , object objCustomerNNTAccNo
            , object objCustomerNNTBuyerName
            , object objCustomerMST
            , object objTInvoiceCode
            , object objInvoiceDateUTC
            , object objTotalValInvoice
            , object objTotalValVAT
            , object obTotalValPmt
            , object objRemark
            ////
            , DataSet dsData
            )
        {
            #region // Temp:
            DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            //int nTidSeq = 0;
            DateTime dtimeSys = DateTime.UtcNow;
            string strFunctionName = "Invoice_Invoice_Save_Adj";
            string strErrorCodeDefault = TError.ErridnInventory.Invoice_Invoice_Save_Adj;
            alParamsCoupleError.AddRange(new object[]{
                    "strFunctionName", strFunctionName
                    , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
                    /////
                    , "objFlagIsDelete", objFlagIsDelete
			        ////
                    , "objInvoiceCode", objInvoiceCode
                    , "objRefNo", objRefNo
                    , "objMST", objMST
                    , "objPaymentMethodCode", objPaymentMethodCode
                    , "objCustomerNNTCode", objCustomerNNTCode
                    , "objCustomerNNTName", objCustomerNNTName
                    , "objCustomerNNTAddress", objCustomerNNTAddress
                    , "objCustomerNNTPhone", objCustomerNNTPhone
                    , "objCustomerNNTBankName", objCustomerNNTBankName
                    , "objCustomerNNTEmail", objCustomerNNTEmail
                    , "objCustomerNNTAccNo", objCustomerNNTAccNo
                    , "objCustomerNNTBuyerName", objCustomerNNTBuyerName
                    , "objCustomerMST", objCustomerMST
                    , "objTInvoiceCode", objTInvoiceCode
                    , "objInvoiceDateUTC", objInvoiceDateUTC
                    , "objRemark", objRemark
                    });
            #endregion

            try
            {
                #region // Init:
                //_cf.db.LogUserId = _cf.sinf.strUserCode;
                _cf.db.BeginTransaction();

                // Write RequestLog:
                _cf.ProcessBizReq_OutSide(
                    strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    , alParamsCoupleError // alParamsCoupleError
                    );

                // Sys_User_CheckAuthentication:
                //Sys_User_CheckAuthentication(
                //    ref alParamsCoupleError
                //    , strWAUserCode
                //    , strWAUserPassword
                //    );

                // Check Access/Deny:
                Sys_Access_CheckDenyV30(
                    ref alParamsCoupleError
                    , strWAUserCode
                    , strFunctionName
                    );
                #endregion

                #region // Invoice_Invoice_SaveX:
                //DataSet dsGetData = null;
                {
                    Invoice_Invoice_SaveX(
                        strTid // strTid
                        , strGwUserCode // strGwUserCode
                        , strGwPassword // strGwPassword
                        , strWAUserCode // strWAUserCode
                        , strWAUserPassword // strWAUserPassword
                        , ref alParamsCoupleError // alParamsCoupleError
                        , dtimeSys // dtimeSys
                                   ////
                        , objFlagIsDelete // objFlagIsDelete
                                          ////
                        , objInvoiceCode // objInvoiceCode
                        , objRefNo // objRefNo
                        , objInvoiceAdjType // objInvoiceAdjType
                        , objMST // objMST
                        , TConst.SourceInvoiceCode.InvoiceADJ // objSourceInvoiceCode
                        , objPaymentMethodCode // objPaymentMethodCode
                        , objCustomerNNTCode // objCustomerNNTCode
                        , objCustomerNNTName // objCustomerNNTName
                        , objCustomerNNTAddress // objCustomerNNTAddress
                        , objCustomerNNTPhone // objCustomerNNTPhone
                        , objCustomerNNTBankName // objCustomerNNTBankName
                        , objCustomerNNTEmail // objCustomerNNTEmail
                        , objCustomerNNTAccNo // objCustomerNNTAccNo
                        , objCustomerNNTBuyerName // objCustomerNNTBuyerName
                        , objCustomerMST // objCustomerMST
                        , objTInvoiceCode // objTInvoiceCode
                        , objInvoiceDateUTC // objInvoiceDateUTC
                        , objTotalValInvoice // objTotalValInvoice
                        , objTotalValVAT // objTotalValVAT
                        , obTotalValPmt // obTotalValPmt
                        , objRemark // objRemark
                                    ////
                        , dsData // dsData
                        );
                }
                ////
                //CmUtils.DataUtils.MoveDataTable(ref mdsFinal, ref dsGetData);
                #endregion

                // Return Good:
                TDALUtils.DBUtils.CommitSafety(_cf.db);
                mdsFinal.AcceptChanges();
                return mdsFinal;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Rollback:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);

                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsFinal
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Rollback and Release resources:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);
                TDALUtils.DBUtils.ReleaseAllSemaphore(_cf.db_Sys, true);

                // Write ReturnLog:
                _cf.ProcessBizReturn_OutSide(
                    ref mdsFinal // mdsFinal
                    , strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    );
                #endregion
            }
        }

        public DataSet Invoice_Invoice_Save_Adj_New20190705(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            ////
            , object objFlagIsDelete
            , object objFlagIsCheckInvoiceTotal
            ////
            , DataSet dsData
            )
        {
            #region // Temp:
            DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            //int nTidSeq = 0;
            DateTime dtimeSys = DateTime.UtcNow;
            string strFunctionName = "Invoice_Invoice_Save_Adj";
            string strErrorCodeDefault = TError.ErridnInventory.Invoice_Invoice_Save_Adj;
            alParamsCoupleError.AddRange(new object[]{
                    "strFunctionName", strFunctionName
                    , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
                    /////
                    , "objFlagIsDelete", objFlagIsDelete
			        ////
                    });
            #endregion

            try
            {
                #region // Init:
                //_cf.db.LogUserId = _cf.sinf.strUserCode;
                _cf.db.BeginTransaction();

                // Write RequestLog:
                _cf.ProcessBizReq_OutSide(
                    strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    , alParamsCoupleError // alParamsCoupleError
                    );

                // Sys_User_CheckAuthentication:
                //Sys_User_CheckAuthentication(
                //    ref alParamsCoupleError
                //    , strWAUserCode
                //    , strWAUserPassword
                //    );

                // Check Access/Deny:
                Sys_Access_CheckDenyV30(
                    ref alParamsCoupleError
                    , strWAUserCode
                    , strFunctionName
                    );
                #endregion

                #region // Refine and check:
                ////
                bool bIsDelete = CmUtils.StringUtils.StringEqual(objFlagIsDelete, TConst.Flag.Yes);
                #endregion

                #region // Refine and check:
                DataTable dtDB_Invoice_Invoice_Root = null;
                if (!bIsDelete)
                {
                    /////
                    #region // Convert Input:
                    //DataSet dsData = TUtils.CUtils.StdDS(arrobjDSData);
                    //if (dsData == null) dsData = new DataSet("dsData");
                    //dsData.AcceptChanges();
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.dsData", CmUtils.XmlUtils.DataSet2XmlSimple(dsData)
                        });
                    #endregion

                    #region // Refine and Check Input Invoice_Invoice:
                    ////
                    DataTable dtInput_Invoice_Invoice = null;
                    {
                        ////
                        string strTableCheck = "Invoice_Invoice";
                        ////
                        if (!dsData.Tables.Contains(strTableCheck))
                        {
                            alParamsCoupleError.AddRange(new object[]{
                                "Check.TableName", strTableCheck
                                });
                            throw CmUtils.CMyException.Raise(
                                TError.ErridnInventory.Invoice_Invoice_SaveX_Input_InvoiceTblNotFound
                                , null
                                , alParamsCoupleError.ToArray()
                                );
                        }
                        dtInput_Invoice_Invoice = dsData.Tables[strTableCheck];
                        ////
                        if (dtInput_Invoice_Invoice.Rows.Count < 1)
                        {
                            alParamsCoupleError.AddRange(new object[]{
                                "Check.TableName", strTableCheck
                                });
                            throw CmUtils.CMyException.Raise(
                                TError.ErridnInventory.Invoice_Invoice_SaveX_Input_InvoiceTblInvalid
                                , null
                                , alParamsCoupleError.ToArray()
                                );
                        }
                        ////
                    }
                    /////
                    TUtils.CUtils.StdDataInTable(
                        dtInput_Invoice_Invoice // dtData
                        , "StdParam", "InvoiceCode" // arrstrCouple
                        , "StdParam", "RefNo" // arrstrCouple
                        , "", "AttachedDelFilePath" // arrstrCouple
                        , "", "DeleteReason" // arrstrCouple
                        );
                    ////
                    #endregion
                    ////
                    object objInvoiceCode = dtInput_Invoice_Invoice.Rows[0]["InvoiceCode"];
                    object objRefNo = dtInput_Invoice_Invoice.Rows[0]["RefNo"];
                    object objAttachedDelFilePath = dtInput_Invoice_Invoice.Rows[0]["AttachedDelFilePath"];
                    object objDeleteReason = dtInput_Invoice_Invoice.Rows[0]["DeleteReason"];

                    string strDeleteReason = Convert.ToString(objDeleteReason);
                    ////
                    Invoice_Invoice_CheckDB(
                        ref alParamsCoupleError // alParamsCoupleError
                        , objInvoiceCode // objInvoiceCode
                        , "" // strFlagExistToCheck
                        , "" // strInvoiceStatusListToCheck
                        , out dtDB_Invoice_Invoice_Root // dtDB_Invoice_Invoice
                        );
                    ////
                }
                ////
                //CmUtils.DataUtils.MoveDataTable(ref mdsFinal, ref dsGetData);
                #endregion

                #region // Invoice_Invoice_SaveX:
                //DataSet dsGetData = null;
                {
                    Invoice_Invoice_SaveX_New20191101(
                        strTid // strTid
                        , strGwUserCode // strGwUserCode
                        , strGwPassword // strGwPassword
                        , strWAUserCode // strWAUserCode
                        , strWAUserPassword // strWAUserPassword
                        , ref alParamsCoupleError // alParamsCoupleError
                        , dtimeSys // dtimeSys
                                   ////
                        , objFlagIsDelete // objFlagIsDelete
                        , objFlagIsCheckInvoiceTotal
                                          ////
                        , dsData // dsData
                        );
                }
                ////
                //CmUtils.DataUtils.MoveDataTable(ref mdsFinal, ref dsGetData);
                #endregion

                #region // Invoice_Invoice_AdjX:
                if (!bIsDelete)
                {
                    /////
                    #region // Convert Input:
                    //DataSet dsData = TUtils.CUtils.StdDS(arrobjDSData);
                    //if (dsData == null) dsData = new DataSet("dsData");
                    //dsData.AcceptChanges();
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.dsData", CmUtils.XmlUtils.DataSet2XmlSimple(dsData)
                        });
                    #endregion

                    #region // Refine and Check Input Invoice_Invoice:
                    ////
                    DataTable dtInput_Invoice_Invoice = null;
                    {
                        ////
                        string strTableCheck = "Invoice_Invoice";
                        ////
                        if (!dsData.Tables.Contains(strTableCheck))
                        {
                            alParamsCoupleError.AddRange(new object[]{
                                "Check.TableName", strTableCheck
                                });
                            throw CmUtils.CMyException.Raise(
                                TError.ErridnInventory.Invoice_Invoice_SaveX_Input_InvoiceTblNotFound
                                , null
                                , alParamsCoupleError.ToArray()
                                );
                        }
                        dtInput_Invoice_Invoice = dsData.Tables[strTableCheck];
                        ////
                        if (dtInput_Invoice_Invoice.Rows.Count < 1)
                        {
                            alParamsCoupleError.AddRange(new object[]{
                                "Check.TableName", strTableCheck
                                });
                            throw CmUtils.CMyException.Raise(
                                TError.ErridnInventory.Invoice_Invoice_SaveX_Input_InvoiceTblInvalid
                                , null
                                , alParamsCoupleError.ToArray()
                                );
                        }
                        ////
                    }
                    /////
                    TUtils.CUtils.StdDataInTable(
                        dtInput_Invoice_Invoice // dtData
                        , "StdParam", "InvoiceCode" // arrstrCouple
                        , "StdParam", "RefNo" // arrstrCouple
                        , "", "AttachedDelFilePath" // arrstrCouple
                        , "", "DeleteReason" // arrstrCouple
                        );
                    ////
                    #endregion
                    ////
                    object objInvoiceCode = dtInput_Invoice_Invoice.Rows[0]["InvoiceCode"];
                    object objRefNo = dtInput_Invoice_Invoice.Rows[0]["RefNo"];
                    object objAttachedDelFilePath = dtInput_Invoice_Invoice.Rows[0]["AttachedDelFilePath"];
                    object objDeleteReason = dtInput_Invoice_Invoice.Rows[0]["DeleteReason"];

                    string strDeleteReason = Convert.ToString(objDeleteReason);
                    ////
                    DataTable dtDB_Invoice_Invoice = null;

                    Invoice_Invoice_CheckDB(
                        ref alParamsCoupleError // alParamsCoupleError
                        , objRefNo // objInvoiceCode
                        , TConst.Flag.Yes // strFlagExistToCheck
                        , TConst.InvoiceStatus.Issued // strInvoiceStatusListToCheck
                        , out dtDB_Invoice_Invoice // dtDB_Invoice_Invoice
                        );
                    //if (strDeleteReason == null || strDeleteReason.Length < 1)
                    //if (string.IsNullOrEmpty(strDeleteReason))

                    //if (CmUtils.StringUtils.StringEqualIgnoreCase(dtDB_Invoice_Invoice.Rows[0]["InvoiceStatus"], TConst.InvoiceStatus.Issued))
                    if (dtDB_Invoice_Invoice_Root.Rows.Count < 1)
                    {
                        #region // Invoice_Invoice_Upd_AdjX_New20190802:
                        Invoice_Invoice_Upd_AdjX_New20190802(
                        strTid // strTid
                        , strGwUserCode // strGwUserCode
                        , strGwPassword // strGwPassword
                        , strWAUserCode // strWAUserCode
                        , strWAUserPassword // strWAUserPassword
                        , ref alParamsCoupleError // alParamsCoupleError
                        , dtimeSys // dtimeSys
                                   ////
                        , objInvoiceCode // objInvoiceCode
                        , objAttachedDelFilePath // objAttachedDelFilePath
                        , objDeleteReason // objDeleteReason
                        );
                        ////
                        #endregion
                    }
                }
                ////
                //CmUtils.DataUtils.MoveDataTable(ref mdsFinal, ref dsGetData);
                #endregion

                // Return Good:
                TDALUtils.DBUtils.CommitSafety(_cf.db);
                mdsFinal.AcceptChanges();
                return mdsFinal;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Rollback:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);

                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsFinal
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Rollback and Release resources:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);
                TDALUtils.DBUtils.ReleaseAllSemaphore(_cf.db_Sys, true);

                // Write ReturnLog:
                _cf.ProcessBizReturn_OutSide(
                    ref mdsFinal // mdsFinal
                    , strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    );
                #endregion
            }
        }

        public DataSet Invoice_Invoice_Save_Adj_New20191112(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            ////
            , object objFlagIsDelete
            , object objFlagIsCheckInvoiceTotal
            ////
            , DataSet dsData
            )
        {
            #region // Temp:
            DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            //int nTidSeq = 0;
            DateTime dtimeSys = DateTime.UtcNow;
            string strFunctionName = "Invoice_Invoice_Save_Adj";
            string strErrorCodeDefault = TError.ErridnInventory.Invoice_Invoice_Save_Adj;
            alParamsCoupleError.AddRange(new object[]{
                    "strFunctionName", strFunctionName
                    , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
                    /////
                    , "objFlagIsDelete", objFlagIsDelete
			        ////
                    });
            #endregion

            try
            {
                #region // Init:
                //_cf.db.LogUserId = _cf.sinf.strUserCode;
                _cf.db.BeginTransaction();

                // Write RequestLog:
                _cf.ProcessBizReq_OutSide(
                    strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    , alParamsCoupleError // alParamsCoupleError
                    );

                // Sys_User_CheckAuthentication:
                //Sys_User_CheckAuthentication(
                //    ref alParamsCoupleError
                //    , strWAUserCode
                //    , strWAUserPassword
                //    );

                // Check Access/Deny:
                Sys_Access_CheckDenyV30(
                    ref alParamsCoupleError
                    , strWAUserCode
                    , strFunctionName
                    );
                #endregion

                #region // Refine and check:
                ////
                bool bIsDelete = CmUtils.StringUtils.StringEqual(objFlagIsDelete, TConst.Flag.Yes);
                #endregion

                #region // Refine and check:
                DataTable dtDB_Invoice_Invoice_Root = null;
                if (!bIsDelete)
                {
                    /////
                    #region // Convert Input:
                    //DataSet dsData = TUtils.CUtils.StdDS(arrobjDSData);
                    //if (dsData == null) dsData = new DataSet("dsData");
                    //dsData.AcceptChanges();
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.dsData", CmUtils.XmlUtils.DataSet2XmlSimple(dsData)
                        });
                    #endregion

                    #region // Refine and Check Input Invoice_Invoice:
                    ////
                    DataTable dtInput_Invoice_Invoice = null;
                    {
                        ////
                        string strTableCheck = "Invoice_Invoice";
                        ////
                        if (!dsData.Tables.Contains(strTableCheck))
                        {
                            alParamsCoupleError.AddRange(new object[]{
                                "Check.TableName", strTableCheck
                                });
                            throw CmUtils.CMyException.Raise(
                                TError.ErridnInventory.Invoice_Invoice_SaveX_Input_InvoiceTblNotFound
                                , null
                                , alParamsCoupleError.ToArray()
                                );
                        }
                        dtInput_Invoice_Invoice = dsData.Tables[strTableCheck];
                        ////
                        if (dtInput_Invoice_Invoice.Rows.Count < 1)
                        {
                            alParamsCoupleError.AddRange(new object[]{
                                "Check.TableName", strTableCheck
                                });
                            throw CmUtils.CMyException.Raise(
                                TError.ErridnInventory.Invoice_Invoice_SaveX_Input_InvoiceTblInvalid
                                , null
                                , alParamsCoupleError.ToArray()
                                );
                        }
                        ////
                    }
                    /////
                    TUtils.CUtils.StdDataInTable(
                        dtInput_Invoice_Invoice // dtData
                        , "StdParam", "InvoiceCode" // arrstrCouple
                        , "StdParam", "RefNo" // arrstrCouple
                        , "", "AttachedDelFilePath" // arrstrCouple
                        , "", "DeleteReason" // arrstrCouple
                        );
                    ////
                    #endregion
                    ////
                    object objInvoiceCode = dtInput_Invoice_Invoice.Rows[0]["InvoiceCode"];
                    object objRefNo = dtInput_Invoice_Invoice.Rows[0]["RefNo"];
                    object objAttachedDelFilePath = dtInput_Invoice_Invoice.Rows[0]["AttachedDelFilePath"];
                    object objDeleteReason = dtInput_Invoice_Invoice.Rows[0]["DeleteReason"];

                    string strDeleteReason = Convert.ToString(objDeleteReason);
                    ////
                    Invoice_Invoice_CheckDB(
                        ref alParamsCoupleError // alParamsCoupleError
                        , objInvoiceCode // objInvoiceCode
                        , "" // strFlagExistToCheck
                        , "" // strInvoiceStatusListToCheck
                        , out dtDB_Invoice_Invoice_Root // dtDB_Invoice_Invoice
                        );
                    ////
                }
                ////
                //CmUtils.DataUtils.MoveDataTable(ref mdsFinal, ref dsGetData);
                #endregion

                #region // Invoice_Invoice_SaveX:
                //DataSet dsGetData = null;
                {
                    Invoice_Invoice_SaveX_New20191112(
                        strTid // strTid
                        , strGwUserCode // strGwUserCode
                        , strGwPassword // strGwPassword
                        , strWAUserCode // strWAUserCode
                        , strWAUserPassword // strWAUserPassword
                        , ref alParamsCoupleError // alParamsCoupleError
                        , dtimeSys // dtimeSys
                                   ////
                        , objFlagIsDelete // objFlagIsDelete
                        , objFlagIsCheckInvoiceTotal
                        ////
                        , dsData // dsData
                        );
                }
                ////
                //CmUtils.DataUtils.MoveDataTable(ref mdsFinal, ref dsGetData);
                #endregion

                #region // Invoice_Invoice_AdjX:
                if (!bIsDelete)
                {
                    /////
                    #region // Convert Input:
                    //DataSet dsData = TUtils.CUtils.StdDS(arrobjDSData);
                    //if (dsData == null) dsData = new DataSet("dsData");
                    //dsData.AcceptChanges();
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.dsData", CmUtils.XmlUtils.DataSet2XmlSimple(dsData)
                        });
                    #endregion

                    #region // Refine and Check Input Invoice_Invoice:
                    ////
                    DataTable dtInput_Invoice_Invoice = null;
                    {
                        ////
                        string strTableCheck = "Invoice_Invoice";
                        ////
                        if (!dsData.Tables.Contains(strTableCheck))
                        {
                            alParamsCoupleError.AddRange(new object[]{
                                "Check.TableName", strTableCheck
                                });
                            throw CmUtils.CMyException.Raise(
                                TError.ErridnInventory.Invoice_Invoice_SaveX_Input_InvoiceTblNotFound
                                , null
                                , alParamsCoupleError.ToArray()
                                );
                        }
                        dtInput_Invoice_Invoice = dsData.Tables[strTableCheck];
                        ////
                        if (dtInput_Invoice_Invoice.Rows.Count < 1)
                        {
                            alParamsCoupleError.AddRange(new object[]{
                                "Check.TableName", strTableCheck
                                });
                            throw CmUtils.CMyException.Raise(
                                TError.ErridnInventory.Invoice_Invoice_SaveX_Input_InvoiceTblInvalid
                                , null
                                , alParamsCoupleError.ToArray()
                                );
                        }
                        ////
                    }
                    /////
                    TUtils.CUtils.StdDataInTable(
                        dtInput_Invoice_Invoice // dtData
                        , "StdParam", "InvoiceCode" // arrstrCouple
                        , "StdParam", "RefNo" // arrstrCouple
                        , "", "AttachedDelFilePath" // arrstrCouple
                        , "", "DeleteReason" // arrstrCouple
                        );
                    ////
                    #endregion
                    ////
                    object objInvoiceCode = dtInput_Invoice_Invoice.Rows[0]["InvoiceCode"];
                    object objRefNo = dtInput_Invoice_Invoice.Rows[0]["RefNo"];
                    object objAttachedDelFilePath = dtInput_Invoice_Invoice.Rows[0]["AttachedDelFilePath"];
                    object objDeleteReason = dtInput_Invoice_Invoice.Rows[0]["DeleteReason"];

                    string strDeleteReason = Convert.ToString(objDeleteReason);
                    ////
                    DataTable dtDB_Invoice_Invoice = null;

                    Invoice_Invoice_CheckDB(
                        ref alParamsCoupleError // alParamsCoupleError
                        , objRefNo // objInvoiceCode
                        , TConst.Flag.Yes // strFlagExistToCheck
                        , TConst.InvoiceStatus.Issued // strInvoiceStatusListToCheck
                        , out dtDB_Invoice_Invoice // dtDB_Invoice_Invoice
                        );
                    //if (strDeleteReason == null || strDeleteReason.Length < 1)
                    //if (string.IsNullOrEmpty(strDeleteReason))

                    //if (CmUtils.StringUtils.StringEqualIgnoreCase(dtDB_Invoice_Invoice.Rows[0]["InvoiceStatus"], TConst.InvoiceStatus.Issued))
                    if (dtDB_Invoice_Invoice_Root.Rows.Count < 1)
                    {
                        #region // Invoice_Invoice_Upd_AdjX_New20190802:
                        Invoice_Invoice_Upd_AdjX_New20191112(
                        strTid // strTid
                        , strGwUserCode // strGwUserCode
                        , strGwPassword // strGwPassword
                        , strWAUserCode // strWAUserCode
                        , strWAUserPassword // strWAUserPassword
                        , ref alParamsCoupleError // alParamsCoupleError
                        , dtimeSys // dtimeSys
                                   ////
                        , objInvoiceCode // objInvoiceCode
                        //, objAttachedDelFilePath // objAttachedDelFilePath
                        //, objDeleteReason // objDeleteReason
                        );
                        ////
                        #endregion
                    }
                }
                ////
                //CmUtils.DataUtils.MoveDataTable(ref mdsFinal, ref dsGetData);
                #endregion

                // Return Good:
                TDALUtils.DBUtils.CommitSafety(_cf.db);
                mdsFinal.AcceptChanges();
                return mdsFinal;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Rollback:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);

                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsFinal
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Rollback and Release resources:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);
                TDALUtils.DBUtils.ReleaseAllSemaphore(_cf.db_Sys, true);

                // Write ReturnLog:
                _cf.ProcessBizReturn_OutSide(
                    ref mdsFinal // mdsFinal
                    , strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    );
                #endregion
            }
        }

        public DataSet Invoice_Invoice_Save_Root_New20190704(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            ////
            , object objFlagIsDelete
            ////
            , object objInvoiceCode
            , object objRefNo
            , object objMST
            , object objPaymentMethodCode
            , object objCustomerNNTCode
            , object objCustomerNNTName
            , object objCustomerNNTAddress
            , object objCustomerNNTPhone
            , object objCustomerNNTBankName
            , object objCustomerNNTEmail
            , object objCustomerNNTAccNo
            , object objCustomerNNTBuyerName
            , object objCustomerMST
            , object objTInvoiceCode
            , object objInvoiceDateUTC
            , object objTotalValInvoice
            , object objTotalValVAT
            , object obTotalValPmt
            , object objRemark
            ////
            , DataSet dsData
            )
        {
            #region // Temp:
            DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            //int nTidSeq = 0;
            DateTime dtimeSys = DateTime.UtcNow;
            string strFunctionName = "Invoice_Invoice_Save_Root";
            string strErrorCodeDefault = TError.ErridnInventory.Invoice_Invoice_Save_Root;
            alParamsCoupleError.AddRange(new object[]{
                    "strFunctionName", strFunctionName
                    , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
                    /////
                    , "objFlagIsDelete", objFlagIsDelete
			        ////
                    , "objInvoiceCode", objInvoiceCode
                    , "objRefNo", objRefNo
                    , "objMST", objMST
                    , "objPaymentMethodCode", objPaymentMethodCode
                    , "objCustomerNNTCode", objCustomerNNTCode
                    , "objCustomerNNTName", objCustomerNNTName
                    , "objCustomerNNTAddress", objCustomerNNTAddress
                    , "objCustomerNNTPhone", objCustomerNNTPhone
                    , "objCustomerNNTBankName", objCustomerNNTBankName
                    , "objCustomerNNTEmail", objCustomerNNTEmail
                    , "objCustomerNNTAccNo", objCustomerNNTAccNo
                    , "objCustomerNNTBuyerName", objCustomerNNTBuyerName
                    , "objCustomerMST", objCustomerMST
                    , "objTInvoiceCode", objTInvoiceCode
                    , "objInvoiceDateUTC", objInvoiceDateUTC
                    , "objTotalValInvoice", objTotalValInvoice
                    , "objTotalValVAT", objTotalValVAT
                    , "obTotalValPmt", obTotalValPmt
                    , "objRemark", objRemark
                    });
            #endregion

            try
            {
                #region // Init:
                //_cf.db.LogUserId = _cf.sinf.strUserCode;
                _cf.db.BeginTransaction();

                // Write RequestLog:
                _cf.ProcessBizReq_OutSide(
                    strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    , alParamsCoupleError // alParamsCoupleError
                    );

                // Sys_User_CheckAuthentication:
                //Sys_User_CheckAuthentication(
                //    ref alParamsCoupleError
                //    , strWAUserCode
                //    , strWAUserPassword
                //    );

                // Check Access/Deny:
                Sys_Access_CheckDenyV30(
                    ref alParamsCoupleError
                    , strWAUserCode
                    , strFunctionName
                    );
                #endregion

                #region // Invoice_Invoice_SaveX:
                //DataSet dsGetData = null;
                {

                    Invoice_Invoice_SaveX(
                        strTid // strTid
                        , strGwUserCode // strGwUserCode
                        , strGwPassword // strGwPassword
                        , strWAUserCode // strWAUserCode
                        , strWAUserPassword // strWAUserPassword
                        , ref alParamsCoupleError // alParamsCoupleError
                        , dtimeSys // dtimeSys
                                   ////
                        , objFlagIsDelete // objFlagIsDelete
                                          ////
                        , objInvoiceCode // objInvoiceCode
                        , objRefNo // objRefNo
                        , TConst.InvoiceAdjType.Normal // objInvoiceAdjType
                        , objMST // objMST
                        , TConst.SourceInvoiceCode.InvoiceRoot // objSourceInvoiceCode
                        , objPaymentMethodCode // objPaymentMethodCode
                        , objCustomerNNTCode // objCustomerNNTCode
                        , objCustomerNNTName // objCustomerNNTName
                        , objCustomerNNTAddress // objCustomerNNTAddress
                        , objCustomerNNTPhone // objCustomerNNTPhone
                        , objCustomerNNTBankName // objCustomerNNTBankName
                        , objCustomerNNTEmail // objCustomerNNTEmail
                        , objCustomerNNTAccNo // objCustomerNNTAccNo
                        , objCustomerNNTBuyerName // objCustomerNNTBuyerName
                        , objCustomerMST // objCustomerMST
                        , objTInvoiceCode // objTInvoiceCode
                        , objInvoiceDateUTC // objInvoiceDateUTC
                        , objTotalValInvoice // objTotalValInvoice
                        , objTotalValVAT // objTotalValVAT
                        , obTotalValPmt // obTotalValPmt
                        , objRemark // objRemark
                                    ////
                        , dsData // dsData
                        );
                }
                ////
                //CmUtils.DataUtils.MoveDataTable(ref mdsFinal, ref dsGetData);
                #endregion

                // Return Good:
                TDALUtils.DBUtils.CommitSafety(_cf.db);
                mdsFinal.AcceptChanges();
                return mdsFinal;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Rollback:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);

                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsFinal
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Rollback and Release resources:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);
                TDALUtils.DBUtils.ReleaseAllSemaphore(_cf.db_Sys, true);

                // Write ReturnLog:
                _cf.ProcessBizReturn_OutSide(
                    ref mdsFinal // mdsFinal
                    , strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    );
                #endregion
            }
        }

        public DataSet Invoice_Invoice_Save_Adj_New20191109(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            ////
            , object objFlagIsDelete
            ////
            , DataSet dsData
            )
        {
            #region // Temp:
            DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            //int nTidSeq = 0;
            DateTime dtimeSys = DateTime.UtcNow;
            string strFunctionName = "Invoice_Invoice_Save_Adj";
            string strErrorCodeDefault = TError.ErridnInventory.Invoice_Invoice_Save_Adj;
            alParamsCoupleError.AddRange(new object[]{
                    "strFunctionName", strFunctionName
                    , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
                    /////
                    , "objFlagIsDelete", objFlagIsDelete
			        ////
                    });
            #endregion

            try
            {
                #region // Init:
                //_cf.db.LogUserId = _cf.sinf.strUserCode;
                _cf.db.BeginTransaction();

                // Write RequestLog:
                _cf.ProcessBizReq_OutSide(
                    strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    , alParamsCoupleError // alParamsCoupleError
                    );

                // Sys_User_CheckAuthentication:
                //Sys_User_CheckAuthentication(
                //    ref alParamsCoupleError
                //    , strWAUserCode
                //    , strWAUserPassword
                //    );

                // Check Access/Deny:
                Sys_Access_CheckDenyV30(
                    ref alParamsCoupleError
                    , strWAUserCode
                    , strFunctionName
                    );
                #endregion

                #region // Refine and check:
                ////
                bool bIsDelete = CmUtils.StringUtils.StringEqual(objFlagIsDelete, TConst.Flag.Yes);
                #endregion

                #region // Refine and check:
                DataTable dtDB_Invoice_Invoice_Root = null;
                if (!bIsDelete)
                {
                    /////
                    #region // Convert Input:
                    //DataSet dsData = TUtils.CUtils.StdDS(arrobjDSData);
                    //if (dsData == null) dsData = new DataSet("dsData");
                    //dsData.AcceptChanges();
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.dsData", CmUtils.XmlUtils.DataSet2XmlSimple(dsData)
                        });
                    #endregion

                    #region // Refine and Check Input Invoice_Invoice:
                    ////
                    DataTable dtInput_Invoice_Invoice = null;
                    {
                        ////
                        string strTableCheck = "Invoice_Invoice";
                        ////
                        if (!dsData.Tables.Contains(strTableCheck))
                        {
                            alParamsCoupleError.AddRange(new object[]{
                                "Check.TableName", strTableCheck
                                });
                            throw CmUtils.CMyException.Raise(
                                TError.ErridnInventory.Invoice_Invoice_SaveX_Input_InvoiceTblNotFound
                                , null
                                , alParamsCoupleError.ToArray()
                                );
                        }
                        dtInput_Invoice_Invoice = dsData.Tables[strTableCheck];
                        ////
                        if (dtInput_Invoice_Invoice.Rows.Count < 1)
                        {
                            alParamsCoupleError.AddRange(new object[]{
                                "Check.TableName", strTableCheck
                                });
                            throw CmUtils.CMyException.Raise(
                                TError.ErridnInventory.Invoice_Invoice_SaveX_Input_InvoiceTblInvalid
                                , null
                                , alParamsCoupleError.ToArray()
                                );
                        }
                        ////
                    }
                    /////
                    TUtils.CUtils.StdDataInTable(
                        dtInput_Invoice_Invoice // dtData
                        , "StdParam", "InvoiceCode" // arrstrCouple
                        , "StdParam", "RefNo" // arrstrCouple
                        , "", "AttachedDelFilePath" // arrstrCouple
                        , "", "DeleteReason" // arrstrCouple
                        );
                    ////
                    #endregion
                    ////
                    object objInvoiceCode = dtInput_Invoice_Invoice.Rows[0]["InvoiceCode"];
                    object objRefNo = dtInput_Invoice_Invoice.Rows[0]["RefNo"];
                    object objAttachedDelFilePath = dtInput_Invoice_Invoice.Rows[0]["AttachedDelFilePath"];
                    object objDeleteReason = dtInput_Invoice_Invoice.Rows[0]["DeleteReason"];

                    string strDeleteReason = Convert.ToString(objDeleteReason);
                    ////
                    Invoice_Invoice_CheckDB(
                        ref alParamsCoupleError // alParamsCoupleError
                        , objInvoiceCode // objInvoiceCode
                        , "" // strFlagExistToCheck
                        , "" // strInvoiceStatusListToCheck
                        , out dtDB_Invoice_Invoice_Root // dtDB_Invoice_Invoice
                        );
                    ////
                }
                ////
                //CmUtils.DataUtils.MoveDataTable(ref mdsFinal, ref dsGetData);
                #endregion

                #region // Invoice_Invoice_SaveX:
                //DataSet dsGetData = null;
                {
                    Invoice_Invoice_SaveX_New20190802(
                        strTid // strTid
                        , strGwUserCode // strGwUserCode
                        , strGwPassword // strGwPassword
                        , strWAUserCode // strWAUserCode
                        , strWAUserPassword // strWAUserPassword
                        , ref alParamsCoupleError // alParamsCoupleError
                        , dtimeSys // dtimeSys
                                   ////
                        , objFlagIsDelete // objFlagIsDelete
                                          ////
                        , dsData // dsData
                        );
                }
                ////
                //CmUtils.DataUtils.MoveDataTable(ref mdsFinal, ref dsGetData);
                #endregion

                #region // Invoice_Invoice_AdjX:
                if (!bIsDelete)
                {
                    /////
                    #region // Convert Input:
                    //DataSet dsData = TUtils.CUtils.StdDS(arrobjDSData);
                    //if (dsData == null) dsData = new DataSet("dsData");
                    //dsData.AcceptChanges();
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.dsData", CmUtils.XmlUtils.DataSet2XmlSimple(dsData)
                        });
                    #endregion

                    #region // Refine and Check Input Invoice_Invoice:
                    ////
                    DataTable dtInput_Invoice_Invoice = null;
                    {
                        ////
                        string strTableCheck = "Invoice_Invoice";
                        ////
                        if (!dsData.Tables.Contains(strTableCheck))
                        {
                            alParamsCoupleError.AddRange(new object[]{
                                "Check.TableName", strTableCheck
                                });
                            throw CmUtils.CMyException.Raise(
                                TError.ErridnInventory.Invoice_Invoice_SaveX_Input_InvoiceTblNotFound
                                , null
                                , alParamsCoupleError.ToArray()
                                );
                        }
                        dtInput_Invoice_Invoice = dsData.Tables[strTableCheck];
                        ////
                        if (dtInput_Invoice_Invoice.Rows.Count < 1)
                        {
                            alParamsCoupleError.AddRange(new object[]{
                                "Check.TableName", strTableCheck
                                });
                            throw CmUtils.CMyException.Raise(
                                TError.ErridnInventory.Invoice_Invoice_SaveX_Input_InvoiceTblInvalid
                                , null
                                , alParamsCoupleError.ToArray()
                                );
                        }
                        ////
                    }
                    /////
                    TUtils.CUtils.StdDataInTable(
                        dtInput_Invoice_Invoice // dtData
                        , "StdParam", "InvoiceCode" // arrstrCouple
                        , "StdParam", "RefNo" // arrstrCouple
                        , "", "AttachedDelFilePath" // arrstrCouple
                        , "", "DeleteReason" // arrstrCouple
                        );
                    ////
                    #endregion
                    ////
                    object objInvoiceCode = dtInput_Invoice_Invoice.Rows[0]["InvoiceCode"];
                    object objRefNo = dtInput_Invoice_Invoice.Rows[0]["RefNo"];
                    object objAttachedDelFilePath = dtInput_Invoice_Invoice.Rows[0]["AttachedDelFilePath"];
                    object objDeleteReason = dtInput_Invoice_Invoice.Rows[0]["DeleteReason"];

                    string strDeleteReason = Convert.ToString(objDeleteReason);
                    ////
                    DataTable dtDB_Invoice_Invoice = null;

                    Invoice_Invoice_CheckDB(
                        ref alParamsCoupleError // alParamsCoupleError
                        , objRefNo // objInvoiceCode
                        , TConst.Flag.Yes // strFlagExistToCheck
                        , TConst.InvoiceStatus.Issued // strInvoiceStatusListToCheck
                        , out dtDB_Invoice_Invoice // dtDB_Invoice_Invoice
                        );
                    //if (strDeleteReason == null || strDeleteReason.Length < 1)
                    //if (string.IsNullOrEmpty(strDeleteReason))

                    //if (CmUtils.StringUtils.StringEqualIgnoreCase(dtDB_Invoice_Invoice.Rows[0]["InvoiceStatus"], TConst.InvoiceStatus.Issued))
                    if (dtDB_Invoice_Invoice_Root.Rows.Count < 1)
                    {
                        #region // Invoice_Invoice_Upd_AdjX_New20190802:
                        Invoice_Invoice_Upd_AdjX_New20190802(
                        strTid // strTid
                        , strGwUserCode // strGwUserCode
                        , strGwPassword // strGwPassword
                        , strWAUserCode // strWAUserCode
                        , strWAUserPassword // strWAUserPassword
                        , ref alParamsCoupleError // alParamsCoupleError
                        , dtimeSys // dtimeSys
                                   ////
                        , objInvoiceCode // objInvoiceCode
                        , objAttachedDelFilePath // objAttachedDelFilePath
                        , objDeleteReason // objDeleteReason
                        );
                        ////
                        #endregion
                    }
                }
                ////
                //CmUtils.DataUtils.MoveDataTable(ref mdsFinal, ref dsGetData);
                #endregion

                // Return Good:
                TDALUtils.DBUtils.CommitSafety(_cf.db);
                mdsFinal.AcceptChanges();
                return mdsFinal;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Rollback:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);

                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsFinal
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Rollback and Release resources:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);
                TDALUtils.DBUtils.ReleaseAllSemaphore(_cf.db_Sys, true);

                // Write ReturnLog:
                _cf.ProcessBizReturn_OutSide(
                    ref mdsFinal // mdsFinal
                    , strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    );
                #endregion
            }
        }

        public DataSet Invoice_Invoice_Save_Root(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            ////
            , object objFlagIsDelete
            ////
            , object objInvoiceCode
            , object objRefNo
            , object objMST
            , object objPaymentMethodCode
            , object objCustomerNNTCode
            , object objCustomerNNTName
            , object objCustomerNNTAddress
            , object objCustomerNNTPhone
            , object objCustomerNNTBankName
            , object objCustomerNNTEmail
            , object objCustomerNNTAccNo
            , object objCustomerNNTBuyerName
            , object objCustomerMST
            , object objTInvoiceCode
            , object objInvoiceDateUTC
            , object objTotalValInvoice
            , object objTotalValVAT
            , object obTotalValPmt
            , object objRemark
            ////
            , DataSet dsData
            )
        {
            #region // Temp:
            DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            //int nTidSeq = 0;
            DateTime dtimeSys = DateTime.UtcNow;
            string strFunctionName = "Invoice_Invoice_Save_Root";
            string strErrorCodeDefault = TError.ErridnInventory.Invoice_Invoice_Save_Root;
            alParamsCoupleError.AddRange(new object[]{
                    "strFunctionName", strFunctionName
                    , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
                    /////
                    , "objFlagIsDelete", objFlagIsDelete
			        ////
                    , "objInvoiceCode", objInvoiceCode
                    , "objRefNo", objRefNo
                    , "objMST", objMST
                    , "objPaymentMethodCode", objPaymentMethodCode
                    , "objCustomerNNTCode", objCustomerNNTCode
                    , "objCustomerNNTName", objCustomerNNTName
                    , "objCustomerNNTAddress", objCustomerNNTAddress
                    , "objCustomerNNTPhone", objCustomerNNTPhone
                    , "objCustomerNNTBankName", objCustomerNNTBankName
                    , "objCustomerNNTEmail", objCustomerNNTEmail
                    , "objCustomerNNTAccNo", objCustomerNNTAccNo
                    , "objCustomerNNTBuyerName", objCustomerNNTBuyerName
                    , "objCustomerMST", objCustomerMST
                    , "objTInvoiceCode", objTInvoiceCode
                    , "objInvoiceDateUTC", objInvoiceDateUTC
                    , "objTotalValInvoice", objTotalValInvoice
                    , "objTotalValVAT", objTotalValVAT
                    , "obTotalValPmt", obTotalValPmt
                    , "objRemark", objRemark
                    });
            #endregion

            try
            {
                #region // Init:
                //_cf.db.LogUserId = _cf.sinf.strUserCode;
                _cf.db.BeginTransaction();

                // Write RequestLog:
                _cf.ProcessBizReq_OutSide(
                    strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    , alParamsCoupleError // alParamsCoupleError
                    );

                // Sys_User_CheckAuthentication:
                //Sys_User_CheckAuthentication(
                //    ref alParamsCoupleError
                //    , strWAUserCode
                //    , strWAUserPassword
                //    );

                // Check Access/Deny:
                Sys_Access_CheckDenyV30(
                    ref alParamsCoupleError
                    , strWAUserCode
                    , strFunctionName
                    );
                #endregion

                #region // Invoice_Invoice_SaveX:
                //DataSet dsGetData = null;
                {

                    Invoice_Invoice_SaveX(
                        strTid // strTid
                        , strGwUserCode // strGwUserCode
                        , strGwPassword // strGwPassword
                        , strWAUserCode // strWAUserCode
                        , strWAUserPassword // strWAUserPassword
                        , ref alParamsCoupleError // alParamsCoupleError
                        , dtimeSys // dtimeSys
                                   ////
                        , objFlagIsDelete // objFlagIsDelete
                                          ////
                        , objInvoiceCode // objInvoiceCode
                        , objRefNo // objRefNo
                        , TConst.InvoiceAdjType.Normal // objInvoiceAdjType
                        , objMST // objMST
                        , TConst.SourceInvoiceCode.InvoiceRoot // objSourceInvoiceCode
                        , objPaymentMethodCode // objPaymentMethodCode
                        , objCustomerNNTCode // objCustomerNNTCode
                        , objCustomerNNTName // objCustomerNNTName
                        , objCustomerNNTAddress // objCustomerNNTAddress
                        , objCustomerNNTPhone // objCustomerNNTPhone
                        , objCustomerNNTBankName // objCustomerNNTBankName
                        , objCustomerNNTEmail // objCustomerNNTEmail
                        , objCustomerNNTAccNo // objCustomerNNTAccNo
                        , objCustomerNNTBuyerName // objCustomerNNTBuyerName
                        , objCustomerMST // objCustomerMST
                        , objTInvoiceCode // objTInvoiceCode
                        , objInvoiceDateUTC // objInvoiceDateUTC
                        , objTotalValInvoice // objTotalValInvoice
                        , objTotalValVAT // objTotalValVAT
                        , obTotalValPmt // obTotalValPmt
                        , objRemark // objRemark
                                    ////
                        , dsData // dsData
                        );
                }
                ////
                //CmUtils.DataUtils.MoveDataTable(ref mdsFinal, ref dsGetData);
                #endregion

                // Return Good:
                TDALUtils.DBUtils.CommitSafety(_cf.db);
                mdsFinal.AcceptChanges();
                return mdsFinal;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Rollback:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);

                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsFinal
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Rollback and Release resources:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);
                TDALUtils.DBUtils.ReleaseAllSemaphore(_cf.db_Sys, true);

                // Write ReturnLog:
                _cf.ProcessBizReturn_OutSide(
                    ref mdsFinal // mdsFinal
                    , strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    );
                #endregion
            }
        }

        public DataSet Invoice_Invoice_Save_Root_New20190704(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            ////
            , object objFlagIsDelete
            , object objFlagIsCheckInvoiceTotal
            ////
            , DataSet dsData
            )
        {
            #region // Temp:
            DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            Stopwatch stopWatchFunc = new Stopwatch();
            //int nTidSeq = 0;
            DateTime dtimeSys = DateTime.UtcNow;
            string strFunctionName = "Invoice_Invoice_Save_Root";
            string strErrorCodeDefault = TError.ErridnInventory.Invoice_Invoice_Save_Root;
            ArrayList alParamsCoupleSW = new ArrayList();
            alParamsCoupleError.AddRange(new object[]{
                    "strFunctionName", strFunctionName
                    , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
                    /////
                    , "objFlagIsDelete", objFlagIsDelete
			        ////
                    });
            #endregion

            try
            {
                #region // SW:				
                stopWatchFunc.Start();
                alParamsCoupleSW.AddRange(new object[]{
                    "strFunctionName", strFunctionName
                    , "stopWatchFunc.Start", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
                    });
                #endregion

                #region // Init:
                //_cf.db.LogUserId = _cf.sinf.strUserCode;
                _cf.db.BeginTransaction();

                // Write RequestLog:
                _cf.ProcessBizReq_OutSide(
                    strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    , alParamsCoupleError // alParamsCoupleError
                    );

                // Sys_User_CheckAuthentication:
                //Sys_User_CheckAuthentication(
                //    ref alParamsCoupleError
                //    , strWAUserCode
                //    , strWAUserPassword
                //    );

                // Check Access/Deny:
                Sys_Access_CheckDenyV30(
                    ref alParamsCoupleError
                    , strWAUserCode
                    , strFunctionName
                    );
                #endregion

                #region // Invoice_Invoice_SaveX:
                //DataSet dsGetData = null;
                {
                    // Invoice_Invoice_SaveX_New20191016
                    Invoice_Invoice_SaveX_New20191101(
                        strTid // strTid
                        , strGwUserCode // strGwUserCode
                        , strGwPassword // strGwPassword
                        , strWAUserCode // strWAUserCode
                        , strWAUserPassword // strWAUserPassword
                        , ref alParamsCoupleError // alParamsCoupleError
                        , dtimeSys // dtimeSys
                                   ////
                        , objFlagIsDelete // objFlagIsDelete
                        , objFlagIsCheckInvoiceTotal // objFlagIsCheckInvoiceTotal
                        ////
                        , dsData // dsData
                        );
                }
                ////
                //CmUtils.DataUtils.MoveDataTable(ref mdsFinal, ref dsGetData);
                #endregion

                // Return Good:
                TDALUtils.DBUtils.CommitSafety(_cf.db);
                mdsFinal.AcceptChanges();
                return mdsFinal;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Rollback:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);

                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsFinal
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Rollback and Release resources:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);
                TDALUtils.DBUtils.ReleaseAllSemaphore(_cf.db_Sys, true);

                stopWatchFunc.Stop();
                alParamsCoupleSW.AddRange(new object[]{
                    "strFunctionName", strFunctionName
                    , "stopWatchFunc.Stop", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
                    , "stopWatchFunc.ElapsedMilliseconds", stopWatchFunc.ElapsedMilliseconds
                    });

                // Write ReturnLog:
                _cf.ProcessBizReturn_OutSide(
                    ref mdsFinal // mdsFinal
                    , strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    , alParamsCoupleSW // alParamsCoupleSW
                    );
                #endregion
            }
        }

        public DataSet WAS_Invoice_Invoice_Save_Root(
            ref ArrayList alParamsCoupleError
            , RQ_Invoice_Invoice objRQ_Invoice_Invoice
            ////
            , out RT_Invoice_Invoice objRT_Invoice_Invoice
            )
        {
            #region // Temp:
            string strTid = objRQ_Invoice_Invoice.Tid;
            objRT_Invoice_Invoice = new RT_Invoice_Invoice();
            DataSet mdsResult = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            DateTime dtimeSys = DateTime.UtcNow;
            //DataSet mdsExec = null;
            //DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(objRQ_Invoice_Invoice.Tid);
            //int nTidSeq = 0;
            //bool bNeedTransaction = true;
            string strFunctionName = "WAS_Invoice_Invoice_Save_Root";
            string strErrorCodeDefault = TError.ErridnInventory.WAS_Invoice_Invoice_Save_Root;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
                , "FlagIsDelete", objRQ_Invoice_Invoice.FlagIsDelete
                , "Lst_Invoice_InvoiceDtl", TJson.JsonConvert.SerializeObject(objRQ_Invoice_Invoice.Lst_Invoice_InvoiceDtl)
                });
            #endregion

            try
            {
                #region // Init:
                #endregion

                #region // Refine and Check Input:
                List<Invoice_Invoice> lst_Invoice_Invoice = new List<Invoice_Invoice>();
                #endregion

                #region // Refine and Check Input:
                ////
                DataSet dsData = new DataSet();
                {
                    ////
                    DataTable dt_Invoice_InvoiceDtl = TUtils.DataTableCmUtils.ToDataTable<Invoice_InvoiceDtl>(objRQ_Invoice_Invoice.Lst_Invoice_InvoiceDtl, "Invoice_InvoiceDtl");
                    dsData.Tables.Add(dt_Invoice_InvoiceDtl);
                    ////
                    DataTable dt_Invoice_InvoicePrd = TUtils.DataTableCmUtils.ToDataTable<Invoice_InvoicePrd>(objRQ_Invoice_Invoice.Lst_Invoice_InvoicePrd, "Invoice_InvoicePrd");
                    dsData.Tables.Add(dt_Invoice_InvoicePrd);

                }
                #endregion

                #region // WS_Invoice_Invoice_Create:
                mdsResult = Invoice_Invoice_Save_Root(
                    objRQ_Invoice_Invoice.Tid // strTid
                    , objRQ_Invoice_Invoice.GwUserCode // strGwUserCode
                    , objRQ_Invoice_Invoice.GwPassword // strGwPassword
                    , objRQ_Invoice_Invoice.WAUserCode // strUserCode
                    , objRQ_Invoice_Invoice.WAUserPassword // strUserPassword
                    , ref alParamsCoupleError // alParamsCoupleError
                                              ////
                    , objRQ_Invoice_Invoice.FlagIsDelete // objFlagIsDelete
                                                         ////
                    , objRQ_Invoice_Invoice.Invoice_Invoice.InvoiceCode // objInvoiceCode
                    , objRQ_Invoice_Invoice.Invoice_Invoice.RefNo // objRefNo
                    , objRQ_Invoice_Invoice.Invoice_Invoice.MST // objMST
                    , objRQ_Invoice_Invoice.Invoice_Invoice.PaymentMethodCode // objPaymentMethodCode
                    , objRQ_Invoice_Invoice.Invoice_Invoice.CustomerNNTCode // objCustomerNNTCode
                    , objRQ_Invoice_Invoice.Invoice_Invoice.CustomerNNTName // objCustomerNNTName
                    , objRQ_Invoice_Invoice.Invoice_Invoice.CustomerNNTAddress // objCustomerNNTAddress
                    , objRQ_Invoice_Invoice.Invoice_Invoice.CustomerNNTPhone // objCustomerNNTPhone
                    , objRQ_Invoice_Invoice.Invoice_Invoice.CustomerNNTBankName // objCustomerNNTBankName
                    , objRQ_Invoice_Invoice.Invoice_Invoice.CustomerNNTEmail // objCustomerNNTEmail
                    , objRQ_Invoice_Invoice.Invoice_Invoice.CustomerNNTAccNo // objCustomerNNTAccNo
                    , objRQ_Invoice_Invoice.Invoice_Invoice.CustomerNNTBuyerName // objCustomerNNTBuyerName
                    , objRQ_Invoice_Invoice.Invoice_Invoice.CustomerMST // objCustomerMST
                    , objRQ_Invoice_Invoice.Invoice_Invoice.TInvoiceCode // objTInvoiceCode
                    , objRQ_Invoice_Invoice.Invoice_Invoice.InvoiceDateUTC // objInvoiceDateUTC
                    , objRQ_Invoice_Invoice.Invoice_Invoice.TotalValInvoice // TotalValInvoice
                    , objRQ_Invoice_Invoice.Invoice_Invoice.TotalValVAT // TotalValVAT
                    , objRQ_Invoice_Invoice.Invoice_Invoice.TotalValPmt // TotalValPmt
                    , objRQ_Invoice_Invoice.Invoice_Invoice.Remark // objRemark
                                                                   ////
                    , dsData // dsData
                    );
                #endregion

                // Return Good:
                return mdsResult;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsResult
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Write ReturnLog:
                //_cf.ProcessBizReturn(
                //	ref mdsResult // mdsFinal
                //	, strTid // strTid
                //	, strFunctionName // strFunctionName
                //	);
                #endregion
            }
        }


        public DataSet WAS_Invoice_Invoice_Save_Root_Neww20190705(
            ref ArrayList alParamsCoupleError
            , RQ_Invoice_Invoice objRQ_Invoice_Invoice
            ////
            , out RT_Invoice_Invoice objRT_Invoice_Invoice
            )
        {
            #region // Temp:
            string strTid = objRQ_Invoice_Invoice.Tid;
            objRT_Invoice_Invoice = new RT_Invoice_Invoice();
            DataSet mdsResult = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            DateTime dtimeSys = DateTime.UtcNow;
            //DataSet mdsExec = null;
            //DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(objRQ_Invoice_Invoice.Tid);
            //int nTidSeq = 0;
            //bool bNeedTransaction = true;
            string strFunctionName = "WAS_Invoice_Invoice_Save_Root";
            string strErrorCodeDefault = TError.ErridnInventory.WAS_Invoice_Invoice_Save_Root;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
                , "FlagIsDelete", objRQ_Invoice_Invoice.FlagIsDelete
                , "Lst_Invoice_Invoice", TJson.JsonConvert.SerializeObject(objRQ_Invoice_Invoice.Lst_Invoice_Invoice)
                , "Lst_Invoice_InvoiceDtl", TJson.JsonConvert.SerializeObject(objRQ_Invoice_Invoice.Lst_Invoice_InvoiceDtl)
                });
            #endregion

            try
            {
                #region // Init:
                #endregion

                #region // Refine and Check Input:
                List<Invoice_Invoice> lst_Invoice_Invoice = new List<Invoice_Invoice>();
                #endregion

                #region // Refine and Check Input:
                ////
                DataSet dsData = new DataSet();
                {
                    ////
                    DataTable dt_Invoice_Invoice = TUtils.DataTableCmUtils.ToDataTable<Invoice_Invoice>(objRQ_Invoice_Invoice.Lst_Invoice_Invoice, "Invoice_Invoice");
                    dsData.Tables.Add(dt_Invoice_Invoice);
                    ////
                    DataTable dt_Invoice_InvoiceDtl = TUtils.DataTableCmUtils.ToDataTable<Invoice_InvoiceDtl>(objRQ_Invoice_Invoice.Lst_Invoice_InvoiceDtl, "Invoice_InvoiceDtl");
                    dsData.Tables.Add(dt_Invoice_InvoiceDtl);
                    ////

                }
                #endregion

                #region // WS_Invoice_Invoice_Create: 
                // Invoice_Invoice_Save_Root_New20190704
                mdsResult = Invoice_Invoice_Save_Root_New20190704(
                    objRQ_Invoice_Invoice.Tid // strTid
                    , objRQ_Invoice_Invoice.GwUserCode // strGwUserCode
                    , objRQ_Invoice_Invoice.GwPassword // strGwPassword
                    , objRQ_Invoice_Invoice.WAUserCode // strUserCode
                    , objRQ_Invoice_Invoice.WAUserPassword // strUserPassword
                    , ref alParamsCoupleError // alParamsCoupleError
                                              ////
                    , objRQ_Invoice_Invoice.FlagIsDelete // objFlagIsDelete
                    , objRQ_Invoice_Invoice.FlagIsCheckInvoiceTotal //FlagIsCheckInvoiceTotal
                    ////
                    , dsData // dsData
                    );
                #endregion

                // Return Good:
                return mdsResult;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsResult
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Write ReturnLog:
                //_cf.ProcessBizReturn(
                //	ref mdsResult // mdsFinal
                //	, strTid // strTid
                //	, strFunctionName // strFunctionName
                //	);
                #endregion
            }
        }
        public DataSet WAS_Invoice_Invoice_Save_Adj(
            ref ArrayList alParamsCoupleError
            , RQ_Invoice_Invoice objRQ_Invoice_Invoice
            ////
            , out RT_Invoice_Invoice objRT_Invoice_Invoice
            )
        {
            #region // Temp:
            string strTid = objRQ_Invoice_Invoice.Tid;
            objRT_Invoice_Invoice = new RT_Invoice_Invoice();
            DataSet mdsResult = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            DateTime dtimeSys = DateTime.UtcNow;
            //DataSet mdsExec = null;
            //DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(objRQ_Invoice_Invoice.Tid);
            //int nTidSeq = 0;
            //bool bNeedTransaction = true;
            string strFunctionName = "WAS_Invoice_Invoice_Save_Adj";
            string strErrorCodeDefault = TError.ErridnInventory.WAS_Invoice_Invoice_Save_Adj;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
                , "FlagIsDelete", objRQ_Invoice_Invoice.FlagIsDelete
                , "Lst_Invoice_InvoiceDtl", TJson.JsonConvert.SerializeObject(objRQ_Invoice_Invoice.Lst_Invoice_InvoiceDtl)
                , "Lst_Invoice_InvoicePrd", TJson.JsonConvert.SerializeObject(objRQ_Invoice_Invoice.Lst_Invoice_InvoicePrd)
                });
            #endregion

            try
            {
                #region // Init:
                #endregion

                #region // Refine and Check Input:
                List<Invoice_Invoice> lst_Invoice_Invoice = new List<Invoice_Invoice>();
                #endregion

                #region // Refine and Check Input:
                ////
                DataSet dsData = new DataSet();
                {
                    ////
                    DataTable dt_Invoice_InvoiceDtl = TUtils.DataTableCmUtils.ToDataTable<Invoice_InvoiceDtl>(objRQ_Invoice_Invoice.Lst_Invoice_InvoiceDtl, "Invoice_InvoiceDtl");
                    dsData.Tables.Add(dt_Invoice_InvoiceDtl);
                    ////
                    DataTable dt_Invoice_InvoicePrd = TUtils.DataTableCmUtils.ToDataTable<Invoice_InvoicePrd>(objRQ_Invoice_Invoice.Lst_Invoice_InvoicePrd, "Invoice_InvoicePrd");
                    dsData.Tables.Add(dt_Invoice_InvoicePrd);

                }
                #endregion

                #region // Invoice_Invoice_Save_Adj:
                mdsResult = Invoice_Invoice_Save_Adj(
                    objRQ_Invoice_Invoice.Tid // strTid
                    , objRQ_Invoice_Invoice.GwUserCode // strGwUserCode
                    , objRQ_Invoice_Invoice.GwPassword // strGwPassword
                    , objRQ_Invoice_Invoice.WAUserCode // strUserCode
                    , objRQ_Invoice_Invoice.WAUserPassword // strUserPassword
                    , ref alParamsCoupleError // alParamsCoupleError
                                              ////
                    , objRQ_Invoice_Invoice.FlagIsDelete // objFlagIsDelete
                                                         ////
                    , objRQ_Invoice_Invoice.Invoice_Invoice.InvoiceCode // objInvoiceCode
                    , objRQ_Invoice_Invoice.Invoice_Invoice.RefNo // objRefNo
                    , objRQ_Invoice_Invoice.Invoice_Invoice.InvoiceAdjType // objInvoiceAdjType
                    , objRQ_Invoice_Invoice.Invoice_Invoice.MST // objMST
                    , objRQ_Invoice_Invoice.Invoice_Invoice.PaymentMethodCode // objPaymentMethodCode
                    , objRQ_Invoice_Invoice.Invoice_Invoice.CustomerNNTCode // objCustomerNNTCode
                    , objRQ_Invoice_Invoice.Invoice_Invoice.CustomerNNTName // objCustomerNNTName
                    , objRQ_Invoice_Invoice.Invoice_Invoice.CustomerNNTAddress // objCustomerNNTAddress
                    , objRQ_Invoice_Invoice.Invoice_Invoice.CustomerNNTPhone // objCustomerNNTPhone
                    , objRQ_Invoice_Invoice.Invoice_Invoice.CustomerNNTBankName // objCustomerNNTBankName
                    , objRQ_Invoice_Invoice.Invoice_Invoice.CustomerNNTEmail // objCustomerNNTEmail
                    , objRQ_Invoice_Invoice.Invoice_Invoice.CustomerNNTAccNo // objCustomerNNTAccNo
                    , objRQ_Invoice_Invoice.Invoice_Invoice.CustomerNNTBuyerName // objCustomerNNTBuyerName
                    , objRQ_Invoice_Invoice.Invoice_Invoice.CustomerMST // objCustomerMST
                    , objRQ_Invoice_Invoice.Invoice_Invoice.TInvoiceCode // objTInvoiceCode
                    , objRQ_Invoice_Invoice.Invoice_Invoice.InvoiceDateUTC // objInvoiceDateUTC
                    , objRQ_Invoice_Invoice.Invoice_Invoice.TotalValInvoice // TotalValInvoice
                    , objRQ_Invoice_Invoice.Invoice_Invoice.TotalValVAT // TotalValVAT
                    , objRQ_Invoice_Invoice.Invoice_Invoice.TotalValPmt // TotalValPmt
                    , objRQ_Invoice_Invoice.Invoice_Invoice.Remark // objRemark
                                                                   ////
                    , dsData // dsData
                    );
                #endregion

                // Return Good:
                return mdsResult;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsResult
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Write ReturnLog:
                //_cf.ProcessBizReturn(
                //	ref mdsResult // mdsFinal
                //	, strTid // strTid
                //	, strFunctionName // strFunctionName
                //	);
                #endregion
            }
        }


        public DataSet WAS_Invoice_Invoice_Save_Adj_New20190705(
            ref ArrayList alParamsCoupleError
            , RQ_Invoice_Invoice objRQ_Invoice_Invoice
            ////
            , out RT_Invoice_Invoice objRT_Invoice_Invoice
            )
        {
            #region // Temp:
            string strTid = objRQ_Invoice_Invoice.Tid;
            objRT_Invoice_Invoice = new RT_Invoice_Invoice();
            DataSet mdsResult = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            DateTime dtimeSys = DateTime.UtcNow;
            //DataSet mdsExec = null;
            //DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(objRQ_Invoice_Invoice.Tid);
            //int nTidSeq = 0;
            //bool bNeedTransaction = true;
            string strFunctionName = "WAS_Invoice_Invoice_Save_Adj";
            string strErrorCodeDefault = TError.ErridnInventory.WAS_Invoice_Invoice_Save_Adj;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
                , "FlagIsDelete", objRQ_Invoice_Invoice.FlagIsDelete
                , "Lst_Invoice_Invoice", TJson.JsonConvert.SerializeObject(objRQ_Invoice_Invoice.Lst_Invoice_Invoice)
                , "Lst_Invoice_InvoiceDtl", TJson.JsonConvert.SerializeObject(objRQ_Invoice_Invoice.Lst_Invoice_InvoiceDtl)
                });
            #endregion

            try
            {
                #region // Init:
                #endregion

                #region // Refine and Check Input:
                List<Invoice_Invoice> lst_Invoice_Invoice = new List<Invoice_Invoice>();
                #endregion

                #region // Refine and Check Input:
                ////
                DataSet dsData = new DataSet();
                {
                    ////
                    DataTable dt_Invoice_Invoice = TUtils.DataTableCmUtils.ToDataTable<Invoice_Invoice>(objRQ_Invoice_Invoice.Lst_Invoice_Invoice, "Invoice_Invoice");
                    dsData.Tables.Add(dt_Invoice_Invoice);
                    ////
                    DataTable dt_Invoice_InvoiceDtl = TUtils.DataTableCmUtils.ToDataTable<Invoice_InvoiceDtl>(objRQ_Invoice_Invoice.Lst_Invoice_InvoiceDtl, "Invoice_InvoiceDtl");
                    dsData.Tables.Add(dt_Invoice_InvoiceDtl);

                }
                #endregion

                #region // Invoice_Invoice_Save_Adj:
                mdsResult = Invoice_Invoice_Save_Adj_New20191112(
                    objRQ_Invoice_Invoice.Tid // strTid
                    , objRQ_Invoice_Invoice.GwUserCode // strGwUserCode
                    , objRQ_Invoice_Invoice.GwPassword // strGwPassword
                    , objRQ_Invoice_Invoice.WAUserCode // strUserCode
                    , objRQ_Invoice_Invoice.WAUserPassword // strUserPassword
                    , ref alParamsCoupleError // alParamsCoupleError
                                              ////
                    , objRQ_Invoice_Invoice.FlagIsDelete // objFlagIsDelete
                    , objRQ_Invoice_Invoice.FlagIsCheckInvoiceTotal
                    ////
                    , dsData // dsData
                    );
                #endregion

                // Return Good:
                return mdsResult;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsResult
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Write ReturnLog:
                //_cf.ProcessBizReturn(
                //	ref mdsResult // mdsFinal
                //	, strTid // strTid
                //	, strFunctionName // strFunctionName
                //	);
                #endregion
            }
        }

        public DataSet WAS_Invoice_Invoice_Save_Adj_New20190802(
            ref ArrayList alParamsCoupleError
            , RQ_Invoice_Invoice objRQ_Invoice_Invoice
            ////
            , out RT_Invoice_Invoice objRT_Invoice_Invoice
            )
        {
            #region // Temp:
            string strTid = objRQ_Invoice_Invoice.Tid;
            objRT_Invoice_Invoice = new RT_Invoice_Invoice();
            DataSet mdsResult = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            DateTime dtimeSys = DateTime.UtcNow;
            //DataSet mdsExec = null;
            //DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(objRQ_Invoice_Invoice.Tid);
            //int nTidSeq = 0;
            //bool bNeedTransaction = true;
            string strFunctionName = "WAS_Invoice_Invoice_Save_Adj";
            string strErrorCodeDefault = TError.ErridnInventory.WAS_Invoice_Invoice_Save_Adj;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
                , "FlagIsDelete", objRQ_Invoice_Invoice.FlagIsDelete
                , "Lst_Invoice_InvoiceDtl", TJson.JsonConvert.SerializeObject(objRQ_Invoice_Invoice.Lst_Invoice_InvoiceDtl)
                , "Lst_Invoice_InvoicePrd", TJson.JsonConvert.SerializeObject(objRQ_Invoice_Invoice.Lst_Invoice_InvoicePrd)
                });
            #endregion

            try
            {
                #region // Init:
                #endregion

                #region // Refine and Check Input:
                List<Invoice_Invoice> lst_Invoice_Invoice = new List<Invoice_Invoice>();
                #endregion

                #region // Refine and Check Input:
                ////
                DataSet dsData = new DataSet();
                {
                    ////
                    DataTable dt_Invoice_Invoice = TUtils.DataTableCmUtils.ToDataTable<Invoice_Invoice>(objRQ_Invoice_Invoice.Lst_Invoice_Invoice, "Invoice_Invoice");
                    dsData.Tables.Add(dt_Invoice_Invoice);
                    ////
                    DataTable dt_Invoice_InvoiceDtl = TUtils.DataTableCmUtils.ToDataTable<Invoice_InvoiceDtl>(objRQ_Invoice_Invoice.Lst_Invoice_InvoiceDtl, "Invoice_InvoiceDtl");
                    dsData.Tables.Add(dt_Invoice_InvoiceDtl);

                }
                #endregion

                #region // Invoice_Invoice_Save_Adj:
                mdsResult = Invoice_Invoice_Save_Adj_New20190705(
                    objRQ_Invoice_Invoice.Tid // strTid
                    , objRQ_Invoice_Invoice.GwUserCode // strGwUserCode
                    , objRQ_Invoice_Invoice.GwPassword // strGwPassword
                    , objRQ_Invoice_Invoice.WAUserCode // strUserCode
                    , objRQ_Invoice_Invoice.WAUserPassword // strUserPassword
                    , ref alParamsCoupleError // alParamsCoupleError
                                              ////
                    , objRQ_Invoice_Invoice.FlagIsDelete // objFlagIsDelete
                    , objRQ_Invoice_Invoice.FlagIsCheckInvoiceTotal
                                                         ////
                    , dsData // dsData
                    );
                #endregion

                // Return Good:
                return mdsResult;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsResult
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Write ReturnLog:
                //_cf.ProcessBizReturn(
                //	ref mdsResult // mdsFinal
                //	, strTid // strTid
                //	, strFunctionName // strFunctionName
                //	);
                #endregion
            }
        }
        public DataSet WAS_Invoice_Invoice_Save_Replace(
            ref ArrayList alParamsCoupleError
            , RQ_Invoice_Invoice objRQ_Invoice_Invoice
            ////
            , out RT_Invoice_Invoice objRT_Invoice_Invoice
            )
        {
            #region // Temp:
            string strTid = objRQ_Invoice_Invoice.Tid;
            objRT_Invoice_Invoice = new RT_Invoice_Invoice();
            DataSet mdsResult = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            DateTime dtimeSys = DateTime.UtcNow;
            //DataSet mdsExec = null;
            //DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(objRQ_Invoice_Invoice.Tid);
            //int nTidSeq = 0;
            //bool bNeedTransaction = true;
            string strFunctionName = "WAS_Invoice_Invoice_Save_Replace";
            string strErrorCodeDefault = TError.ErridnInventory.WAS_Invoice_Invoice_Save_Replace;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
                , "FlagIsDelete", objRQ_Invoice_Invoice.FlagIsDelete
                , "Lst_Invoice_InvoiceDtl", TJson.JsonConvert.SerializeObject(objRQ_Invoice_Invoice.Lst_Invoice_InvoiceDtl)
                });
            #endregion

            try
            {
                #region // Init:
                #endregion

                #region // Refine and Check Input:
                List<Invoice_Invoice> lst_Invoice_Invoice = new List<Invoice_Invoice>();
                #endregion

                #region // Refine and Check Input:
                ////
                DataSet dsData = new DataSet();
                {
                    ////
                    DataTable dt_Invoice_InvoiceDtl = TUtils.DataTableCmUtils.ToDataTable<Invoice_InvoiceDtl>(objRQ_Invoice_Invoice.Lst_Invoice_InvoiceDtl, "Invoice_InvoiceDtl");
                    dsData.Tables.Add(dt_Invoice_InvoiceDtl);
                    ////
                    DataTable dt_Invoice_InvoicePrd = TUtils.DataTableCmUtils.ToDataTable<Invoice_InvoicePrd>(objRQ_Invoice_Invoice.Lst_Invoice_InvoicePrd, "Invoice_InvoicePrd");
                    dsData.Tables.Add(dt_Invoice_InvoicePrd);

                }
                #endregion

                #region // Invoice_Invoice_Save_Replace:
                mdsResult = Invoice_Invoice_Save_Replace(
                    objRQ_Invoice_Invoice.Tid // strTid
                    , objRQ_Invoice_Invoice.GwUserCode // strGwUserCode
                    , objRQ_Invoice_Invoice.GwPassword // strGwPassword
                    , objRQ_Invoice_Invoice.WAUserCode // strUserCode
                    , objRQ_Invoice_Invoice.WAUserPassword // strUserPassword
                    , ref alParamsCoupleError // alParamsCoupleError
                                              ////
                    , objRQ_Invoice_Invoice.FlagIsDelete // objFlagIsDelete
                                                         ////
                    , objRQ_Invoice_Invoice.Invoice_Invoice.InvoiceCode // objInvoiceCode
                    , objRQ_Invoice_Invoice.Invoice_Invoice.RefNo // objRefNo
                    , objRQ_Invoice_Invoice.Invoice_Invoice.MST // objMST
                    , objRQ_Invoice_Invoice.Invoice_Invoice.PaymentMethodCode // objPaymentMethodCode
                    , objRQ_Invoice_Invoice.Invoice_Invoice.CustomerNNTCode // objCustomerNNTCode
                    , objRQ_Invoice_Invoice.Invoice_Invoice.CustomerNNTName // objCustomerNNTName
                    , objRQ_Invoice_Invoice.Invoice_Invoice.CustomerNNTAddress // objCustomerNNTAddress
                    , objRQ_Invoice_Invoice.Invoice_Invoice.CustomerNNTPhone // objCustomerNNTPhone
                    , objRQ_Invoice_Invoice.Invoice_Invoice.CustomerNNTBankName // objCustomerNNTBankName
                    , objRQ_Invoice_Invoice.Invoice_Invoice.CustomerNNTEmail // objCustomerNNTEmail
                    , objRQ_Invoice_Invoice.Invoice_Invoice.CustomerNNTAccNo // objCustomerNNTAccNo
                    , objRQ_Invoice_Invoice.Invoice_Invoice.CustomerNNTBuyerName // objCustomerNNTBuyerName
                    , objRQ_Invoice_Invoice.Invoice_Invoice.CustomerMST // objCustomerMST
                    , objRQ_Invoice_Invoice.Invoice_Invoice.TInvoiceCode // objTInvoiceCode
                    , objRQ_Invoice_Invoice.Invoice_Invoice.InvoiceDateUTC // objInvoiceDateUTC
                    , objRQ_Invoice_Invoice.Invoice_Invoice.TotalValInvoice // TotalValInvoice
                    , objRQ_Invoice_Invoice.Invoice_Invoice.TotalValVAT // TotalValVAT
                    , objRQ_Invoice_Invoice.Invoice_Invoice.TotalValPmt // TotalValPmt
                    , objRQ_Invoice_Invoice.Invoice_Invoice.Remark // objRemark
                                                                   ////
                                                                   ///
                    , objRQ_Invoice_Invoice.Invoice_Invoice.InvoicePDFFilePath // objInvoicePDFFilePath
                    , dsData // dsData
                    );
                #endregion

                // Return Good:
                return mdsResult;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsResult
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Write ReturnLog:
                //_cf.ProcessBizReturn(
                //	ref mdsResult // mdsFinal
                //	, strTid // strTid
                //	, strFunctionName // strFunctionName
                //	);
                #endregion
            }
        }


        public DataSet WAS_Invoice_Invoice_Save_Replace_New20190705(
            ref ArrayList alParamsCoupleError
            , RQ_Invoice_Invoice objRQ_Invoice_Invoice
            ////
            , out RT_Invoice_Invoice objRT_Invoice_Invoice
            )
        {
            #region // Temp:
            string strTid = objRQ_Invoice_Invoice.Tid;
            objRT_Invoice_Invoice = new RT_Invoice_Invoice();
            DataSet mdsResult = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            DateTime dtimeSys = DateTime.UtcNow;
            //DataSet mdsExec = null;
            //DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(objRQ_Invoice_Invoice.Tid);
            //int nTidSeq = 0;
            //bool bNeedTransaction = true;
            string strFunctionName = "WAS_Invoice_Invoice_Save_Replace";
            string strErrorCodeDefault = TError.ErridnInventory.WAS_Invoice_Invoice_Save_Replace;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
                , "FlagIsDelete", objRQ_Invoice_Invoice.FlagIsDelete
                , "Lst_Invoice_Invoice", TJson.JsonConvert.SerializeObject(objRQ_Invoice_Invoice.Lst_Invoice_Invoice)
                , "Lst_Invoice_InvoiceDtl", TJson.JsonConvert.SerializeObject(objRQ_Invoice_Invoice.Lst_Invoice_InvoiceDtl)
                });
            #endregion

            try
            {
                #region // Init:
                #endregion

                #region // Refine and Check Input:
                List<Invoice_Invoice> lst_Invoice_Invoice = new List<Invoice_Invoice>();
                #endregion

                #region // Refine and Check Input:
                ////
                DataSet dsData = new DataSet();
                {
                    ////
                    if (objRQ_Invoice_Invoice.Lst_Invoice_Invoice == null)
                        objRQ_Invoice_Invoice.Lst_Invoice_Invoice = new List<Invoice_Invoice>();
                    {
                        DataTable dt_Invoice_Invoice = TUtils.DataTableCmUtils.ToDataTable<Invoice_Invoice>(objRQ_Invoice_Invoice.Lst_Invoice_Invoice, "Invoice_Invoice");
                        dsData.Tables.Add(dt_Invoice_Invoice);
                    }

                    ////
                    if (objRQ_Invoice_Invoice.Lst_Invoice_InvoiceDtl == null)
                        objRQ_Invoice_Invoice.Lst_Invoice_InvoiceDtl = new List<Invoice_InvoiceDtl>();
                    {

                        DataTable dt_Invoice_InvoiceDtl = TUtils.DataTableCmUtils.ToDataTable<Invoice_InvoiceDtl>(objRQ_Invoice_Invoice.Lst_Invoice_InvoiceDtl, "Invoice_InvoiceDtl");
                        dsData.Tables.Add(dt_Invoice_InvoiceDtl);
                    }

                    ////
                    if (objRQ_Invoice_Invoice.Lst_Email_BatchSendEmailTo == null)
                        objRQ_Invoice_Invoice.Lst_Email_BatchSendEmailTo = new List<Email_BatchSendEmailTo>();
                    {
                        DataTable dt_Email_BatchSendEmailTo = TUtils.DataTableCmUtils.ToDataTable<Email_BatchSendEmailTo>(objRQ_Invoice_Invoice.Lst_Email_BatchSendEmailTo, "Email_BatchSendEmailTo");
                        dsData.Tables.Add(dt_Email_BatchSendEmailTo);
                    }
                    ////
                    if (objRQ_Invoice_Invoice.Lst_Email_BatchSendEmailCC == null)
                        objRQ_Invoice_Invoice.Lst_Email_BatchSendEmailCC = new List<Email_BatchSendEmailCC>();
                    {
                        DataTable dt_Email_BatchSendEmailCC = TUtils.DataTableCmUtils.ToDataTable<Email_BatchSendEmailCC>(objRQ_Invoice_Invoice.Lst_Email_BatchSendEmailCC, "Email_BatchSendEmailCC");
                        dsData.Tables.Add(dt_Email_BatchSendEmailCC);

                    }
                    ////
                    if (objRQ_Invoice_Invoice.Lst_Email_BatchSendEmailBCC == null)
                        objRQ_Invoice_Invoice.Lst_Email_BatchSendEmailBCC = new List<Email_BatchSendEmailBCC>();
                    {
                        DataTable dt_Email_BatchSendEmailBCC = TUtils.DataTableCmUtils.ToDataTable<Email_BatchSendEmailBCC>(objRQ_Invoice_Invoice.Lst_Email_BatchSendEmailBCC, "Email_BatchSendEmailBCC");
                        dsData.Tables.Add(dt_Email_BatchSendEmailBCC);

                    }
                    ////
                    if (objRQ_Invoice_Invoice.Lst_Email_BatchSendEmailFileAttach == null)
                        objRQ_Invoice_Invoice.Lst_Email_BatchSendEmailFileAttach = new List<Email_BatchSendEmailFileAttach>();
                    {
                        DataTable dt_Email_BatchSendEmailFileAttach = TUtils.DataTableCmUtils.ToDataTable<Email_BatchSendEmailFileAttach>(objRQ_Invoice_Invoice.Lst_Email_BatchSendEmailFileAttach, "Email_BatchSendEmailFileAttach");
                        dsData.Tables.Add(dt_Email_BatchSendEmailFileAttach);

                    }
                    ////
                    if (objRQ_Invoice_Invoice.Email_BatchSendEmail == null)
                        objRQ_Invoice_Invoice.Email_BatchSendEmail = new Email_BatchSendEmail();

                }
                #endregion

                #region // Refine and Check Input Mail:
                alParamsCoupleError.AddRange(new object[]{
                    "strFunctionName", strFunctionName
                    , "Lst_Email_BatchSendEmailTo", TJson.JsonConvert.SerializeObject(objRQ_Invoice_Invoice.Lst_Email_BatchSendEmailTo)
                    , "Lst_Email_BatchSendEmailCC", TJson.JsonConvert.SerializeObject(objRQ_Invoice_Invoice.Lst_Email_BatchSendEmailCC)
                    , "Lst_Email_BatchSendEmailBCC", TJson.JsonConvert.SerializeObject(objRQ_Invoice_Invoice.Lst_Email_BatchSendEmailBCC)
                    , "Lst_Email_BatchSendEmailFileAttach", TJson.JsonConvert.SerializeObject(objRQ_Invoice_Invoice.Lst_Email_BatchSendEmailFileAttach)
                    , "Email_BatchSendEmail", TJson.JsonConvert.SerializeObject(objRQ_Invoice_Invoice.Email_BatchSendEmail)
                    });
                #endregion

                #region // Invoice_Invoice_Save_Replace:
                mdsResult = Invoice_Invoice_Save_Replace_New20191112(
                    objRQ_Invoice_Invoice.Tid // strTid
                    , objRQ_Invoice_Invoice.GwUserCode // strGwUserCode
                    , objRQ_Invoice_Invoice.GwPassword // strGwPassword
                    , objRQ_Invoice_Invoice.WAUserCode // strUserCode
                    , objRQ_Invoice_Invoice.WAUserPassword // strUserPassword
                    , ref alParamsCoupleError // alParamsCoupleError
                                              ////
                    , objRQ_Invoice_Invoice.FlagIsDelete // objFlagIsDelete
                    , objRQ_Invoice_Invoice.FlagIsCheckInvoiceTotal
                                                         ////
                    , objRQ_Invoice_Invoice.Email_BatchSendEmail.Subject // objSubject						 
                    , objRQ_Invoice_Invoice.Email_BatchSendEmail.BodyText // objBodyText
                    , objRQ_Invoice_Invoice.Email_BatchSendEmail.BodyHTML // objBodyHTML
                                                                          ////
                    , dsData // dsData
                    );
                #endregion

                // Return Good:
                return mdsResult;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsResult
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Write ReturnLog:
                //_cf.ProcessBizReturn(
                //	ref mdsResult // mdsFinal
                //	, strTid // strTid
                //	, strFunctionName // strFunctionName
                //	);
                #endregion
            }
        }

        public DataSet WAS_Invoice_Invoice_Deleted_New20190816(
            ref ArrayList alParamsCoupleError
            , RQ_Invoice_Invoice objRQ_Invoice_Invoice
            ////
            , out RT_Invoice_Invoice objRT_Invoice_Invoice
            )
        {
            #region // Temp:
            string strTid = objRQ_Invoice_Invoice.Tid;
            objRT_Invoice_Invoice = new RT_Invoice_Invoice();
            DataSet mdsResult = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            DateTime dtimeSys = DateTime.UtcNow;
            //DataSet mdsExec = null;
            //DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(objRQ_Invoice_Invoice.Tid);
            //int nTidSeq = 0;
            //bool bNeedTransaction = true;
            string strFunctionName = "WAS_Invoice_Invoice_Save_Delete";
            string strErrorCodeDefault = TError.ErridnInventory.WAS_Invoice_Invoice_Deleted;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
                , "FlagIsDelete", objRQ_Invoice_Invoice.FlagIsDelete
                , "Lst_Invoice_Invoice", TJson.JsonConvert.SerializeObject(objRQ_Invoice_Invoice.Lst_Invoice_Invoice)
                , "Lst_Invoice_InvoiceDtl", TJson.JsonConvert.SerializeObject(objRQ_Invoice_Invoice.Lst_Invoice_InvoiceDtl)
                });
            #endregion

            try
            {
                #region // Init:
                #endregion

                #region // Refine and Check Input:
                List<Invoice_Invoice> lst_Invoice_Invoice = new List<Invoice_Invoice>();
                #endregion

                #region // Refine and Check Input:
                ////
                DataSet dsData = new DataSet();
                {
                    ////
                    if (objRQ_Invoice_Invoice.Lst_Invoice_Invoice == null)
                        objRQ_Invoice_Invoice.Lst_Invoice_Invoice = new List<Invoice_Invoice>();
                    {
                        DataTable dt_Invoice_Invoice = TUtils.DataTableCmUtils.ToDataTable<Invoice_Invoice>(objRQ_Invoice_Invoice.Lst_Invoice_Invoice, "Invoice_Invoice");
                        dsData.Tables.Add(dt_Invoice_Invoice);
                    }

                    ////
                    if (objRQ_Invoice_Invoice.Lst_Invoice_InvoiceDtl == null)
                        objRQ_Invoice_Invoice.Lst_Invoice_InvoiceDtl = new List<Invoice_InvoiceDtl>();
                    {

                        DataTable dt_Invoice_InvoiceDtl = TUtils.DataTableCmUtils.ToDataTable<Invoice_InvoiceDtl>(objRQ_Invoice_Invoice.Lst_Invoice_InvoiceDtl, "Invoice_InvoiceDtl");
                        dsData.Tables.Add(dt_Invoice_InvoiceDtl);
                    }

                    ////
                    if (objRQ_Invoice_Invoice.Lst_Email_BatchSendEmailTo == null)
                        objRQ_Invoice_Invoice.Lst_Email_BatchSendEmailTo = new List<Email_BatchSendEmailTo>();
                    {
                        DataTable dt_Email_BatchSendEmailTo = TUtils.DataTableCmUtils.ToDataTable<Email_BatchSendEmailTo>(objRQ_Invoice_Invoice.Lst_Email_BatchSendEmailTo, "Email_BatchSendEmailTo");
                        dsData.Tables.Add(dt_Email_BatchSendEmailTo);
                    }
                    ////
                    if (objRQ_Invoice_Invoice.Lst_Email_BatchSendEmailCC == null)
                        objRQ_Invoice_Invoice.Lst_Email_BatchSendEmailCC = new List<Email_BatchSendEmailCC>();
                    {
                        DataTable dt_Email_BatchSendEmailCC = TUtils.DataTableCmUtils.ToDataTable<Email_BatchSendEmailCC>(objRQ_Invoice_Invoice.Lst_Email_BatchSendEmailCC, "Email_BatchSendEmailCC");
                        dsData.Tables.Add(dt_Email_BatchSendEmailCC);

                    }
                    ////
                    if (objRQ_Invoice_Invoice.Lst_Email_BatchSendEmailBCC == null)
                        objRQ_Invoice_Invoice.Lst_Email_BatchSendEmailBCC = new List<Email_BatchSendEmailBCC>();
                    {
                        DataTable dt_Email_BatchSendEmailBCC = TUtils.DataTableCmUtils.ToDataTable<Email_BatchSendEmailBCC>(objRQ_Invoice_Invoice.Lst_Email_BatchSendEmailBCC, "Email_BatchSendEmailBCC");
                        dsData.Tables.Add(dt_Email_BatchSendEmailBCC);

                    }
                    ////
                    if (objRQ_Invoice_Invoice.Lst_Email_BatchSendEmailFileAttach == null)
                        objRQ_Invoice_Invoice.Lst_Email_BatchSendEmailFileAttach = new List<Email_BatchSendEmailFileAttach>();
                    {
                        DataTable dt_Email_BatchSendEmailFileAttach = TUtils.DataTableCmUtils.ToDataTable<Email_BatchSendEmailFileAttach>(objRQ_Invoice_Invoice.Lst_Email_BatchSendEmailFileAttach, "Email_BatchSendEmailFileAttach");
                        dsData.Tables.Add(dt_Email_BatchSendEmailFileAttach);

                    }
                    ////
                    if (objRQ_Invoice_Invoice.Email_BatchSendEmail == null)
                        objRQ_Invoice_Invoice.Email_BatchSendEmail = new Email_BatchSendEmail();

                }
                #endregion

                #region // Refine and Check Input Mail:
                alParamsCoupleError.AddRange(new object[]{
                    "strFunctionName", strFunctionName
                    , "Lst_Email_BatchSendEmailTo", TJson.JsonConvert.SerializeObject(objRQ_Invoice_Invoice.Lst_Email_BatchSendEmailTo)
                    , "Lst_Email_BatchSendEmailCC", TJson.JsonConvert.SerializeObject(objRQ_Invoice_Invoice.Lst_Email_BatchSendEmailCC)
                    , "Lst_Email_BatchSendEmailBCC", TJson.JsonConvert.SerializeObject(objRQ_Invoice_Invoice.Lst_Email_BatchSendEmailBCC)
                    , "Lst_Email_BatchSendEmailFileAttach", TJson.JsonConvert.SerializeObject(objRQ_Invoice_Invoice.Lst_Email_BatchSendEmailFileAttach)
                    , "Email_BatchSendEmail", TJson.JsonConvert.SerializeObject(objRQ_Invoice_Invoice.Email_BatchSendEmail)
                    });
                #endregion

                #region // Invoice_Invoice_Deleted:
                mdsResult = Invoice_Invoice_Deleted_New20190816(
                    objRQ_Invoice_Invoice.Tid // strTid
                    , objRQ_Invoice_Invoice.GwUserCode // strGwUserCode
                    , objRQ_Invoice_Invoice.GwPassword // strGwPassword
                    , objRQ_Invoice_Invoice.WAUserCode // strUserCode
                    , objRQ_Invoice_Invoice.WAUserPassword // strUserPassword
                    , ref alParamsCoupleError // alParamsCoupleError
                                              ////
                    , objRQ_Invoice_Invoice.FlagIsDelete // objFlagIsDelete
                                                         ////
                    , objRQ_Invoice_Invoice.Email_BatchSendEmail.Subject // objSubject						 
                    , objRQ_Invoice_Invoice.Email_BatchSendEmail.BodyText // objBodyText
                    , objRQ_Invoice_Invoice.Email_BatchSendEmail.BodyHTML // objBodyHTML
                                                                          ////
                    , dsData // dsData
                    );
                #endregion

                // Return Good:
                return mdsResult;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsResult
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Write ReturnLog:
                //_cf.ProcessBizReturn(
                //	ref mdsResult // mdsFinal
                //	, strTid // strTid
                //	, strFunctionName // strFunctionName
                //	);
                #endregion
            }
        }

        public DataSet Invoice_Invoice_Deleted_New20190816(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            ////
            , object objFlagIsDelete
            ////
            , object objSubject
            , object objBodyText
            , object objBodyHTML
            ////
            , DataSet dataSet

            )
        {
            #region // Temp:
            DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            //int nTidSeq = 0;
            DateTime dtimeSys = DateTime.UtcNow;
            string strFunctionName = "Invoice_Invoice_Deleted";
            string strErrorCodeDefault = TError.ErridnInventory.Invoice_Invoice_Deleted;
            alParamsCoupleError.AddRange(new object[]{
                    "strFunctionName", strFunctionName
                    , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
                    /////
                    , "objFlagIsDelete", objFlagIsDelete
			        ////
                    , "objSubject", objSubject
                    , "objBodyText", objBodyText
                    , "objBodyHTML", objBodyHTML
                    ////
                    });
            #endregion

            try
            {
                #region // Init:
                //_cf.db.LogUserId = _cf.sinf.strUserCode;
                _cf.db.BeginTransaction();

                // Write RequestLog:
                _cf.ProcessBizReq_OutSide(
                    strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    , alParamsCoupleError // alParamsCoupleError
                    );

                // Sys_User_CheckAuthentication:
                //Sys_User_CheckAuthentication(
                //    ref alParamsCoupleError
                //    , strWAUserCode
                //    , strWAUserPassword
                //    );

                // Check Access/Deny:
                Sys_Access_CheckDenyV30(
                    ref alParamsCoupleError
                    , strWAUserCode
                    , strFunctionName
                    );
                #endregion

                #region // Refine and check:
                ////
                bool bIsDelete = CmUtils.StringUtils.StringEqual(objFlagIsDelete, TConst.Flag.Yes);
                #endregion

                #region // Invoice_Invoice_DeletedX:
                if (!bIsDelete)
                {
                    /////
                    #region // Convert Input:
                    //DataSet dsData = TUtils.CUtils.StdDS(arrobjDSData);
                    //if (dsData == null) dsData = new DataSet("dsData");
                    //dsData.AcceptChanges();
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.dataSet", CmUtils.XmlUtils.DataSet2XmlSimple(dataSet)
                        });
                    #endregion

                    #region // Refine and Check Input Invoice_Invoice:
                    ////
                    DataTable dtInput_Invoice_Invoice = null;
                    {
                        ////
                        string strTableCheck = "Invoice_Invoice";
                        ////
                        if (!dataSet.Tables.Contains(strTableCheck))
                        {
                            alParamsCoupleError.AddRange(new object[]{
                                "Check.TableName", strTableCheck
                                });
                            throw CmUtils.CMyException.Raise(
                                TError.ErridnInventory.Invoice_Invoice_SaveX_Input_InvoiceTblNotFound
                                , null
                                , alParamsCoupleError.ToArray()
                                );
                        }
                        dtInput_Invoice_Invoice = dataSet.Tables[strTableCheck];
                        ////
                        if (dtInput_Invoice_Invoice.Rows.Count < 1)
                        {
                            alParamsCoupleError.AddRange(new object[]{
                                "Check.TableName", strTableCheck
                                });
                            throw CmUtils.CMyException.Raise(
                                TError.ErridnInventory.Invoice_Invoice_SaveX_Input_InvoiceTblInvalid
                                , null
                                , alParamsCoupleError.ToArray()
                                );
                        }
                        ////
                    }
                    /////
                    TUtils.CUtils.StdDataInTable(
                        dtInput_Invoice_Invoice // dtData
                        , "StdParam", "InvoiceCode" // arrstrCouple
                        , "StdParam", "InvoicePDFFilePath" // arrstrCouple
                        , "StdParam", "Remark" // arrstrCouple
                        , "", "AttachedDelFilePath" // arrstrCouple
                        , "", "DeleteReason" // arrstrCouple
                        );
                    ////
                    #endregion
                    ////
                    object objInvoiceCode = dtInput_Invoice_Invoice.Rows[0]["InvoiceCode"];
                    object objRemark = dtInput_Invoice_Invoice.Rows[0]["Remark"];
                    object objInvoicePDFFilePath = dtInput_Invoice_Invoice.Rows[0]["InvoicePDFFilePath"];
                    object objAttachedDelFilePath = dtInput_Invoice_Invoice.Rows[0]["AttachedDelFilePath"];
                    object objDeleteReason = dtInput_Invoice_Invoice.Rows[0]["DeleteReason"];
                    ////
                    DataTable dtDB_Invoice_Invoice = null;

                    Invoice_Invoice_CheckDB(
                        ref alParamsCoupleError // alParamsCoupleError
                        , objInvoiceCode // objInvoiceCode
                        , TConst.Flag.Yes // strFlagExistToCheck
                        , TConst.InvoiceStatus.Issued // strInvoiceStatusListToCheck
                        , out dtDB_Invoice_Invoice // dtDB_Invoice_Invoice
                        );

                    ////
                    if (!CmUtils.StringUtils.StringEqualIgnoreCase(dtDB_Invoice_Invoice.Rows[0]["InvoiceStatus"], TConst.InvoiceStatus.Deleted))
                    {
                        ///
                        #region // Invoice_Invoice_DeletedX:
                        Invoice_Invoice_DeletedX_New20190715(
                            strTid // strTid
                            , strGwUserCode // strGwUserCode
                            , strGwPassword // strGwPassword
                            , strWAUserCode // strWAUserCode
                            , strWAUserPassword // strWAUserPassword
                            , ref alParamsCoupleError // alParamsCoupleError
                            , dtimeSys // dtimeSys
                                       ////
                            , objInvoiceCode // objInvoiceCode
                            , objInvoicePDFFilePath // objInvoicePDFFilePath
                            , objAttachedDelFilePath // objAttachedDelFilePath
                            , objDeleteReason // objDeleteReason
                            , objRemark // objRemark
                            );
                        ////
                        #endregion
                        ///
                        #region // Email_BatchSendEmail_SaveAndSendX:
                        {
                            Email_BatchSendEmail_SaveAndSendX(
                                strTid // strTid
                                , strGwUserCode // strGwUserCode
                                , strGwPassword // strGwPassword
                                , strWAUserCode // strWAUserCode
                                , strWAUserPassword // strWAUserPassword
                                , ref alParamsCoupleError // alParamsCoupleError
                                , dtimeSys // dtimeSys
                                           ////
                                , objSubject // objSubject
                                , objBodyText // objBodyText
                                , objBodyHTML // objBodyHTML
                                , dataSet // dsData
                                );
                        }
                        #endregion
                    }
                }
                ////
                //CmUtils.DataUtils.MoveDataTable(ref mdsFinal, ref dsGetData);
                #endregion

                // Return Good:
                TDALUtils.DBUtils.CommitSafety(_cf.db);
                mdsFinal.AcceptChanges();
                return mdsFinal;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Rollback:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);

                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsFinal
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Rollback and Release resources:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);
                TDALUtils.DBUtils.ReleaseAllSemaphore(_cf.db_Sys, true);

                // Write ReturnLog:
                _cf.ProcessBizReturn_OutSide_3A(
                    ref mdsFinal // mdsFinal
                    , strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    , alParamsCoupleError // alParamsCoupleError
                    );
                #endregion
            }
        }

        public DataSet WAS_Invoice_Invoice_UpdAfterAllocated(
            ref ArrayList alParamsCoupleError
            , RQ_Invoice_Invoice objRQ_Invoice_Invoice
            ////
            , out RT_Invoice_Invoice objRT_Invoice_Invoice
            )
        {
            #region // Temp:
            string strTid = objRQ_Invoice_Invoice.Tid;
            objRT_Invoice_Invoice = new RT_Invoice_Invoice();
            DataSet mdsResult = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            DateTime dtimeSys = DateTime.UtcNow;
            //DataSet mdsExec = null;
            //DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(objRQ_Invoice_Invoice.Tid);
            //int nTidSeq = 0;
            //bool bNeedTransaction = true;
            string strFunctionName = "WAS_Invoice_Invoice_UpdAfterAllocated";
            string strErrorCodeDefault = TError.ErridnInventory.WAS_Invoice_Invoice_UpdAfterAllocated;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
                , "FlagIsDelete", objRQ_Invoice_Invoice.FlagIsDelete
                , "Invoice_Invoice", TJson.JsonConvert.SerializeObject(objRQ_Invoice_Invoice.Invoice_Invoice)
                , "Lst_Invoice_InvoiceDtl", TJson.JsonConvert.SerializeObject(objRQ_Invoice_Invoice.Lst_Invoice_InvoiceDtl)
                });
            #endregion

            try
            {
                #region // Init:
                #endregion

                #region // Refine and Check Input:
                //List<Invoice_InvoiceDtl> lst_Invoice_InvoiceDtl = new List<Invoice_InvoiceDtl>();
                #endregion

                #region // Refine and Check Input:
                ////
                DataSet dsData = new DataSet();
                {
                    ////
                    if (objRQ_Invoice_Invoice.Lst_Invoice_Invoice == null)
                        objRQ_Invoice_Invoice.Lst_Invoice_Invoice = new List<Invoice_Invoice>();
                    {
                        DataTable dt_Invoice_Invoice = TUtils.DataTableCmUtils.ToDataTable<Invoice_Invoice>(objRQ_Invoice_Invoice.Lst_Invoice_Invoice, "Invoice_Invoice");
                        dsData.Tables.Add(dt_Invoice_Invoice);
                    }

                    ////
                    if (objRQ_Invoice_Invoice.Lst_Invoice_InvoiceDtl == null)
                        objRQ_Invoice_Invoice.Lst_Invoice_InvoiceDtl = new List<Invoice_InvoiceDtl>();
                    {

                        DataTable dt_Invoice_InvoiceDtl = TUtils.DataTableCmUtils.ToDataTable<Invoice_InvoiceDtl>(objRQ_Invoice_Invoice.Lst_Invoice_InvoiceDtl, "Invoice_InvoiceDtl");
                        dsData.Tables.Add(dt_Invoice_InvoiceDtl);
                    }

                }
                #endregion

                #region // Invoice_Invoice_UpdAfterAllocated:
                mdsResult = Invoice_Invoice_UpdAfterAllocated(
                    objRQ_Invoice_Invoice.Tid // strTid
                    , objRQ_Invoice_Invoice.GwUserCode // strGwUserCode
                    , objRQ_Invoice_Invoice.GwPassword // strGwPassword
                    , objRQ_Invoice_Invoice.WAUserCode // strUserCode
                    , objRQ_Invoice_Invoice.WAUserPassword // strUserPassword
                    , ref alParamsCoupleError // alParamsCoupleError
                                              ////
                    , objRQ_Invoice_Invoice.Invoice_Invoice.InvoiceCode
                    , objRQ_Invoice_Invoice.Invoice_Invoice.PaymentMethodCode
                    , objRQ_Invoice_Invoice.Invoice_Invoice.CustomerNNTCode
                    , objRQ_Invoice_Invoice.Invoice_Invoice.CustomerNNTName
                    , objRQ_Invoice_Invoice.Invoice_Invoice.CustomerNNTAddress
                    , objRQ_Invoice_Invoice.Invoice_Invoice.CustomerNNTPhone
                    , objRQ_Invoice_Invoice.Invoice_Invoice.CustomerNNTBankName
                    , objRQ_Invoice_Invoice.Invoice_Invoice.CustomerNNTEmail
                    , objRQ_Invoice_Invoice.Invoice_Invoice.CustomerNNTAccNo
                    , objRQ_Invoice_Invoice.Invoice_Invoice.CustomerNNTBuyerName
                    , objRQ_Invoice_Invoice.Invoice_Invoice.CustomerMST
                    , objRQ_Invoice_Invoice.Invoice_Invoice.InvoiceDateUTC
                    , objRQ_Invoice_Invoice.Invoice_Invoice.TotalValInvoice
                    , objRQ_Invoice_Invoice.Invoice_Invoice.TotalValVAT
                    , objRQ_Invoice_Invoice.Invoice_Invoice.TotalValPmt
                    , objRQ_Invoice_Invoice.Invoice_Invoice.ValGoodsNotTaxable
                    , objRQ_Invoice_Invoice.Invoice_Invoice.ValGoodsNotChargeTax
                    , objRQ_Invoice_Invoice.Invoice_Invoice.ValGoodsVAT5
                    , objRQ_Invoice_Invoice.Invoice_Invoice.ValVAT5
                    , objRQ_Invoice_Invoice.Invoice_Invoice.ValGoodsVAT10
                    , objRQ_Invoice_Invoice.Invoice_Invoice.ValVAT10
                    ////
                    , dsData // dsData
                    );
                #endregion

                // Return Good:
                return mdsResult;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsResult
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Write ReturnLog:
                //_cf.ProcessBizReturn(
                //	ref mdsResult // mdsFinal
                //	, strTid // strTid
                //	, strFunctionName // strFunctionName
                //	);
                #endregion
            }
        }

        public DataSet Invoice_Invoice_UpdAfterAllocated(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            ////
            , object objInvoiceCode
            , object objPaymentMethodCode
            , object objCustomerNNTCode
            , object objCustomerNNTName
            , object objCustomerNNTAddress
            , object objCustomerNNTPhone
            , object objCustomerNNTBankName
            , object objCustomerNNTEmail
            , object objCustomerNNTAccNo
            , object objCustomerNNTBuyerName
            , object objCustomerMST
            , object objInvoiceDateUTC
            , object objTotalValInvoice
            , object objTotalValVAT
            , object objTotalValPmt
            , object objValGoodsNotTaxable
            , object objValGoodsNotChargeTax
            , object objValGoodsVAT5
            , object objValVAT5
            , object objValGoodsVAT10
            , object objValVAT10
            ////
            , DataSet dsData
            ////
            //, object objFt_Cols_Upd
            )
        {
            #region // Temp:
            DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            //int nTidSeq = 0;
            DateTime dtimeSys = DateTime.UtcNow;
            string strFunctionName = "Invoice_Invoice_UpdAfterAllocated";
            string strErrorCodeDefault = TError.ErridnInventory.Invoice_Invoice_UpdAfterAllocated;
            alParamsCoupleError.AddRange(new object[]{
                    "strFunctionName", strFunctionName
                    , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
			        ////
				    //, "objFt_Cols_Upd", objFt_Cols_Upd
                    });
            #endregion

            try
            {
                #region // Init:
                //_cf.db.LogUserId = _cf.sinf.strUserCode;
                _cf.db.BeginTransaction();

                // Write RequestLog:
                _cf.ProcessBizReq_OutSide(
                    strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    , alParamsCoupleError // alParamsCoupleError
                    );

                // Sys_User_CheckAuthentication:
                //Sys_User_CheckAuthentication(
                //    ref alParamsCoupleError
                //    , strWAUserCode
                //    , strWAUserPassword
                //    );

                // Check Access/Deny:
                Sys_Access_CheckDenyV30(
                    ref alParamsCoupleError
                    , strWAUserCode
                    , strFunctionName
                    );
                #endregion

                #region // Invoice_Invoice_UpdAfterAllocated:
                //DataSet dsGetData = null;
                {

                    Invoice_Invoice_UpdAfterAllocatedX(
                        strTid // strTid
                        , strGwUserCode // strGwUserCode
                        , strGwPassword // strGwPassword
                        , strWAUserCode // strWAUserCode
                        , strWAUserPassword // strWAUserPassword
                        , ref alParamsCoupleError // alParamsCoupleError
                        , dtimeSys // dtimeSys
                                   ////
                        , objInvoiceCode
                        , objPaymentMethodCode
                        , objCustomerNNTCode
                        , objCustomerNNTName
                        , objCustomerNNTAddress
                        , objCustomerNNTPhone
                        , objCustomerNNTBankName
                        , objCustomerNNTEmail
                        , objCustomerNNTAccNo
                        , objCustomerNNTBuyerName
                        , objCustomerMST
                        , objInvoiceDateUTC
                        , objTotalValInvoice
                        , objTotalValVAT
                        , objTotalValPmt
                        , objValGoodsNotTaxable
                        , objValGoodsNotChargeTax
                        , objValGoodsVAT5
                        , objValVAT5
                        , objValGoodsVAT10
                        , objValVAT10
                        ////
                        , dsData // dsData
                        );
                }
                ////
                //CmUtils.DataUtils.MoveDataTable(ref mdsFinal, ref dsGetData);
                #endregion

                // Return Good:
                TDALUtils.DBUtils.CommitSafety(_cf.db);
                mdsFinal.AcceptChanges();
                return mdsFinal;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Rollback:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);

                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsFinal
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Rollback and Release resources:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);
                TDALUtils.DBUtils.ReleaseAllSemaphore(_cf.db_Sys, true);

                // Write ReturnLog:
                _cf.ProcessBizReturn_OutSide(
                    ref mdsFinal // mdsFinal
                    , strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    );
                #endregion
            }
        }
        
        private void Invoice_Invoice_UpdAfterAllocatedX(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            , DateTime dtimeSys
            ////
            , object objInvoiceCode
            , object objPaymentMethodCode
            , object objCustomerNNTCode
            , object objCustomerNNTName
            , object objCustomerNNTAddress
            , object objCustomerNNTPhone
            , object objCustomerNNTBankName
            , object objCustomerNNTEmail
            , object objCustomerNNTAccNo
            , object objCustomerNNTBuyerName
            , object objCustomerMST
            , object objInvoiceDateUTC
            , object objTotalValInvoice
            , object objTotalValVAT
            , object objTotalValPmt
            , object objValGoodsNotTaxable
            , object objValGoodsNotChargeTax
            , object objValGoodsVAT5
            , object objValVAT5
            , object objValGoodsVAT10
            , object objValVAT10
            ////
            , DataSet dsData
            ////
            //, object objFt_Cols_Upd
            )
        {
            #region // Temp:
            //int nTidSeq = 0;
            //bool bMyDebugSql = false;
            string strFunctionName = "Invoice_Invoice_UpdAfterAllocatedX";
            //string strErrorCodeDefault = TError.ErridnInventory.OS_Invoice_InvoiceTemp_SaveAllX;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
                ////
				, "objInvoiceCode", objInvoiceCode
                , "objPaymentMethodCode", objPaymentMethodCode
                , "objCustomerNNTCode", objCustomerNNTCode
                , "objCustomerNNTName", objCustomerNNTName
                , "objCustomerNNTAddress", objCustomerNNTAddress
                , "objCustomerNNTPhone", objCustomerNNTPhone
                , "objCustomerNNTBankName", objCustomerNNTBankName
                , "objCustomerNNTEmail", objCustomerNNTEmail
                , "objCustomerNNTAccNo", objCustomerNNTAccNo
                , "objCustomerNNTBuyerName", objCustomerNNTBuyerName
                , "objCustomerMST", objCustomerMST
                , "objInvoiceDateUTC", objInvoiceDateUTC
                , "objTotalValInvoice", objTotalValInvoice
                , "objTotalValVAT", objTotalValVAT
                , "objTotalValPmt", objTotalValPmt
                , "objValGoodsNotTaxable", objValGoodsNotTaxable
                , "objValGoodsNotChargeTax", objValGoodsNotChargeTax
                , "objValGoodsVAT5", objValGoodsVAT5
                , "objValVAT5", objValVAT5
                , "objValGoodsVAT10", objValGoodsVAT10
                , "objValVAT10", objValVAT10
                });
            //ArrayList alPCErrEx = new ArrayList();
            ////
            Hashtable htParamsSql = new Hashtable();
            #endregion

            #region // Convert Input:
            alParamsCoupleError.AddRange(new object[]{
                "Check.dsData", CmUtils.XmlUtils.DataSet2XmlSimple(dsData)
                });
            #endregion

            #region // Refine and Check Input:
            ////
            string strInvoiceCode = TUtils.CUtils.StdParam(objInvoiceCode);
            string strPaymentMethodCode = TUtils.CUtils.StdParam(objPaymentMethodCode);
            string strCustomerNNTCode = TUtils.CUtils.StdParam(objCustomerNNTCode);
            string strCustomerNNTName = string.Format("{0}", objCustomerNNTName).Trim();
            string strCustomerNNTAddress = string.Format("{0}", objCustomerNNTAddress).Trim();
            string strCustomerNNTPhone = string.Format("{0}", objCustomerNNTPhone).Trim();
            string strCustomerNNTBankName = string.Format("{0}", objCustomerNNTBankName).Trim();
            string strCustomerNNTEmail = string.Format("{0}", objCustomerNNTEmail).Trim();
            string strCustomerNNTAccNo = string.Format("{0}", objCustomerNNTAccNo).Trim();
            string strCustomerNNTBuyerName = string.Format("{0}", objCustomerNNTBuyerName).Trim();
            string strCustomerMST = TUtils.CUtils.StdParam(objCustomerMST);
            string strInvoiceDateUTC = TUtils.CUtils.StdDate(objInvoiceDateUTC);

            double dblTotalValInvoice = Convert.ToDouble(objTotalValInvoice);
            double dblTotalValVAT = Convert.ToDouble(objTotalValVAT);
            double dblTotalValPmt = Convert.ToDouble(objTotalValPmt);
            double dblValGoodsNotTaxable = Convert.ToDouble(objValGoodsNotTaxable);
            double dblValGoodsNotChargeTax = Convert.ToDouble(objValGoodsNotChargeTax);
            double dblValGoodsVAT5 = Convert.ToDouble(objValGoodsVAT5);
            double dblValVAT5 = Convert.ToDouble(objValVAT5);
            double dblValGoodsVAT10 = Convert.ToDouble(objValGoodsVAT10);
            double dblValVAT10 = Convert.ToDouble(objValVAT10);
            ////
            DataTable dtDB_Invoice_Invoice = null;
            {
                Invoice_Invoice_CheckDB(
                ref alParamsCoupleError // alParamsCoupleError
                , strInvoiceCode // objStationCCCode
                , TConst.Flag.Yes // strFlagExistToCheck
                , TConst.InvoiceStatus.Pending // strFlagActiveListToCheck
                , out dtDB_Invoice_Invoice // dtDB_Invoice_Invoice
                );
                ////
                string strMST = TUtils.CUtils.StdParam(dtDB_Invoice_Invoice.Rows[0]["MST"]);
                string strTInvoiceCode = TUtils.CUtils.StdParam(dtDB_Invoice_Invoice.Rows[0]["TInvoiceCode"]);
                double dblInvoiceNo = Convert.ToDouble(dtDB_Invoice_Invoice.Rows[0]["InvoiceNo"]);
                string strSourceInvoiceCode = TUtils.CUtils.StdParam(dtDB_Invoice_Invoice.Rows[0]["SourceInvoiceCode"]);
                // Check SourceInvoiceCode = INVOICEROOT:
                if (!CmUtils.StringUtils.StringEqualIgnoreCase(strSourceInvoiceCode, TConst.SourceInvoiceCode.InvoiceRoot))
                {
                    alParamsCoupleError.AddRange(new object[]{
                            "Check.strSourceInvoiceCode", strSourceInvoiceCode
                            });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Invoice_Invoice_UpdAfterAllocatedX_SourceInvoiceCode
                        , null
                        , alParamsCoupleError.ToArray()
                        );
                }
                // Check InvoiceNo not null:
                {
                    string strInvoiceNo = TUtils.CUtils.StdParam(dblInvoiceNo);

                    if (strInvoiceNo == null || strInvoiceNo.Length < 1)
                    {
                        alParamsCoupleError.AddRange(new object[]{
                                "Check.strInvoiceNo", strInvoiceNo
                                });
                        throw CmUtils.CMyException.Raise(
                            TError.ErridnInventory.Invoice_Invoice_UpdAfterAllocatedX_InvalidInvoiceNo
                            , null
                            , alParamsCoupleError.ToArray()
                            );
                    }
                }

                // Check PaymentMethodCode not null:

                DataTable dtDB_Mst_PaymentMethods = null;

                Mst_PaymentMethods_CheckDB(
                    ref alParamsCoupleError // alParamsCoupleError
                    , strPaymentMethodCode // objPaymentMethodCode
                    , TConst.Flag.Yes // strFlagExistToCheck
                    , TConst.Flag.Active // strFlagActiveListToCheck
                    , out dtDB_Mst_PaymentMethods // dtDB_Mst_PaymentMethods
                    );

                //// ngày hóa đơn không được là ngày tương lai
                if (strInvoiceDateUTC.CompareTo(dtimeSys.ToString("yyyy-MM-dd")) > 0)
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.strInvoiceCode", strInvoiceCode
                        , "Check.SysDate", dtimeSys.ToString("yyyy-MM-dd")
                        , "Check.strInvoiceDateUTC", strInvoiceDateUTC
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Invoice_Invoice_UpdAfterAllocatedX_InvaliInvoiceDateUTCAfterSysDate
                        , null
                        , alParamsCoupleError.ToArray()
                        );
                }
                ////
                // Check InvoiceDateUTC:
                {
                    string strSqlCheckInvoiceDateUTC = CmUtils.StringUtils.Replace(@"
						        ---- Clear for Debug:
                                select
	                                t.InvoiceCode
	                                , t.TInvoiceCode
	                                , t.InvoiceNo Before_InvoiceNo
	                                , t.InvoiceDateUTC Before_InvoiceDateUTC
                                into #tbl_Invoice_Invoice_CheckBefore
                                from Invoice_Invoice t --//[mylock]
                                where (1=1)
	                                and t.TInvoiceCode = '@strTInvoiceCode'
	                                and t.InvoiceNo = ('@strInvoiceNo' - 1)
	                                --and (t.InvoiceNo = ('@strInvoiceNo' - 1) or t.InvoiceNo = ('@strInvoiceNo' + 1))
                                ;

                                --select null tbl_Invoice_Invoice_CheckBefore, * from #tbl_Invoice_Invoice_CheckBefore t --//[mylock];
                                --drop table #tbl_Invoice_Invoice_CheckBefore;

                                select
	                                t.InvoiceCode
	                                , t.TInvoiceCode
	                                , t.InvoiceNo Last_InvoiceNo
	                                , t.InvoiceDateUTC Last_InvoiceDateUTC
                                into #tbl_Invoice_Invoice_CheckLast
                                from Invoice_Invoice t --//[mylock]
                                where (1=1)
	                                and t.TInvoiceCode = '@strTInvoiceCode'
	                                and t.InvoiceNo = ('@strInvoiceNo' + 1)  -- or t.InvoiceNo = ('@strInvoiceNo' + 1))
                                ;

                                --select null tbl_Invoice_Invoice_CheckLast, * from #tbl_Invoice_Invoice_CheckLast t --//[mylock];
                                --drop table #tbl_Invoice_Invoice_CheckLast;


                                --- Check1:
                                select
	                                t.*
                                    , f.Before_InvoiceDateUTC
                                from Invoice_Invoice t --//[mylock]
	                                left join #tbl_Invoice_Invoice_CheckBefore f --//[mylock]
		                                on t.TInvoiceCode = f.TInvoiceCode
                                where (1=1)
	                                and t.InvoiceCode = '@strInvoiceCode'
	                                and f.Before_InvoiceDateUTC > '@strInvoiceDateUTC'
                                ;

                                --- Check2:
								select
	                                t.*
                                    , g.Last_InvoiceDateUTC
                                from Invoice_Invoice t --//[mylock]
	                                left join #tbl_Invoice_Invoice_CheckLast g --//[mylock]
		                                on t.TInvoiceCode = g.TInvoiceCode
                                where (1=1)
	                                and t.InvoiceCode = '@strInvoiceCode'
	                                and g.Last_InvoiceDateUTC < '@strInvoiceDateUTC'
                                ;

                                ---- Clear For Debug:
                                drop table #tbl_Invoice_Invoice_CheckBefore;
                                drop table #tbl_Invoice_Invoice_CheckLast;
					        "
                        , "@strTInvoiceCode", strTInvoiceCode
                        , "@strInvoiceNo", dblInvoiceNo
                        , "@strInvoiceDateUTC", strInvoiceDateUTC
                        , "@strInvoiceCode", strInvoiceCode
                        , "@strSysDate", dtimeSys.ToString("yyyy-MM-dd")
                        );

                    ////
                    DataTable dtCheck1 = _cf.db.ExecQuery(strSqlCheckInvoiceDateUTC).Tables[0];
                    if (dtCheck1.Rows.Count > 0)
                    {
                        alParamsCoupleError.AddRange(new object[]{
                                "Check.InvoiceCode", dtCheck1.Rows[0]["InvoiceCode"]
                                , "Check.Before_InvoiceDateUTC", dtCheck1.Rows[0]["Before_InvoiceDateUTC"]
                                });
                        throw CmUtils.CMyException.Raise(
                            TError.ErridnInventory.Invoice_Invoice_UpdAfterAllocatedX_Invalid_Before_InvoiceDateUTC
                            , null
                            , alParamsCoupleError.ToArray()
                            );
                    }
                    ////
                    DataTable dtCheck2 = _cf.db.ExecQuery(strSqlCheckInvoiceDateUTC).Tables[1];
                    if (dtCheck2.Rows.Count > 0)
                    {
                        alParamsCoupleError.AddRange(new object[]{
                                "Check.InvoiceCode", dtCheck2.Rows[0]["InvoiceCode"]
                                , "Check.Last_InvoiceDateUTC", dtCheck2.Rows[0]["Last_InvoiceDateUTC"]
                                });
                        throw CmUtils.CMyException.Raise(
                            TError.ErridnInventory.Invoice_Invoice_UpdAfterAllocatedX_Invalid_Last_InvoiceDateUTC
                            , null
                            , alParamsCoupleError.ToArray()
                            );
                    }
                    ////
                }

                ////
                DataTable dtDB_Mst_CustomerNNT = null;

                Mst_CustomerNNT_CheckDB(
                    ref alParamsCoupleError // alParamsCoupleError
                    , strCustomerNNTCode // objCustomerNNTCode
                    , strMST // objStationCCCode
                    , TConst.Flag.Yes // strFlagExistToCheck
                    , TConst.Flag.Active // strFlagActiveListToCheck
                    , out dtDB_Mst_CustomerNNT // dtDB_Mst_CustomerNNT
                    );
                ////
            }

            #endregion

            #region //// SaveTemp Invoice_Invoice:
            {
                TUtils.CUtils.MyBuildDBDT_Common(
                    _cf.db
                    , "#input_Invoice_Invoice"
                    , new object[]{
                        "InvoiceCode", TConst.BizMix.Default_DBColType,
                        "PaymentMethodCode", TConst.BizMix.Default_DBColType,
                        "CustomerNNTCode", TConst.BizMix.Default_DBColType,
                        "CustomerNNTName", TConst.BizMix.Default_DBColType,
                        "CustomerNNTAddress", TConst.BizMix.Default_DBColType,
                        "CustomerNNTPhone", TConst.BizMix.Default_DBColType,
                        "CustomerNNTBankName", TConst.BizMix.Default_DBColType,
                        "CustomerNNTEmail", TConst.BizMix.Default_DBColType,
                        "CustomerNNTAccNo", TConst.BizMix.Default_DBColType,
                        "CustomerNNTBuyerName", TConst.BizMix.Default_DBColType,
                        "CustomerMST", TConst.BizMix.Default_DBColType,
                        "InvoiceDateUTC", TConst.BizMix.Default_DBColType,
                        "TotalValInvoice", TConst.BizMix.Default_DBColType,
                        "TotalValVAT", TConst.BizMix.Default_DBColType,
                        "TotalValPmt", TConst.BizMix.Default_DBColType,
                        "ValGoodsNotTaxable", TConst.BizMix.Default_DBColType,
                        "ValGoodsNotChargeTax", TConst.BizMix.Default_DBColType,
                        "ValGoodsVAT5", TConst.BizMix.Default_DBColType,
                        "ValVAT5", TConst.BizMix.Default_DBColType,
                        "ValGoodsVAT10", TConst.BizMix.Default_DBColType,
                        "ValVAT10", TConst.BizMix.Default_DBColType,
                        "LogLUDTimeUTC", TConst.BizMix.Default_DBColType,
                        "LogLUBy", TConst.BizMix.Default_DBColType,
                        }
                    , new object[]{
                        new object[]{
                            strInvoiceCode, // InvoiceCode
                            strPaymentMethodCode, // PaymentMethodCode
                            strCustomerNNTCode, // CustomerNNTCode
							strCustomerNNTName, // CustomerNNTName
							strCustomerNNTAddress, // CustomerNNTAddress
							strCustomerNNTPhone, // CustomerNNTPhone
							strCustomerNNTBankName, // strCustomerNNTBankName
							strCustomerNNTEmail, // strCustomerNNTEmail
							strCustomerNNTAccNo, // strCustomerNNTAccNo
							strCustomerNNTBuyerName, // strCustomerNNTBuyerName
							strCustomerMST, // strCustomerMST
							strInvoiceDateUTC, // strInvoiceDateUTC
							dblTotalValInvoice, // dblTotalValInvoice
							dblTotalValVAT, // dblTotalValVAT
							dblTotalValPmt, // dblTotalValPmt
							dblValGoodsNotTaxable, // dblValGoodsNotTaxable
							dblValGoodsNotChargeTax, // dblValGoodsNotChargeTax
							dblValGoodsVAT5, // dblValGoodsVAT5
							dblValVAT5, // dblValVAT5
							dblValGoodsVAT10, // dblValGoodsVAT10
							dblValVAT10, // dblValVAT10
							dtimeSys.ToString("yyyy-MM-dd HH:mm:ss"), // LogLUDTime
							strWAUserCode, // LogLUBy
							}
                        }
                    );
            }
            #endregion

            #region // Refine and CheckInvoice_InvoiceDtl:

            ////
            DataTable dtInput_Invoice_InvoiceDtl = null;
            ////
            {
                ////
                string strTableCheck = "Invoice_InvoiceDtl";
                ////
                if (!dsData.Tables.Contains(strTableCheck))
                {
                    alParamsCoupleError.AddRange(new object[]{
                            "Check.TableName", strTableCheck
                            });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Invoice_Invoice_UpdAfterAllocatedX_Input_Invoice_InvoicetblNotFound
                        , null
                        , alParamsCoupleError.ToArray()
                        );
                }
                dtInput_Invoice_InvoiceDtl = dsData.Tables[strTableCheck];
                ////
                if (dtInput_Invoice_InvoiceDtl.Rows.Count < 1)
                {
                    alParamsCoupleError.AddRange(new object[]{
                            "Check.TableName", strTableCheck
                            });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Invoice_Invoice_UpdAfterAllocatedX_Input_Invoice_InvoicetblInvalid
                        , null
                        , alParamsCoupleError.ToArray()
                        );
                }
                ////
                TUtils.CUtils.StdDataInTable(
                    dtInput_Invoice_InvoiceDtl // dtData
                    , "StdParam", "InvoiceCode" // arrstrCouple
                    , "StdParam", "Idx" // arrstrCouple
                    , "StdParam", "NetworkID" // arrstrCouple
                    , "StdParam", "SpecCode" // arrstrCouple
                    , "", "SpecName" // arrstrCouple
                    , "StdParam", "ProductID" // arrstrCouple
                    , "", "ProductName" // arrstrCouple
                    , "StdParam", "VATRateCode" // arrstrCouple
                    , "float", "VATRate" // arrstrCouple
                    , "StdParam", "UnitCode" // arrstrCouple
                    , "", "UnitName" // arrstrCouple
                    , "float", "UnitPrice" // arrstrCouple
                    , "float", "Qty" // arrstrCouple
                    , "float", "ValInvoice" // arrstrCouple
                    , "float", "ValTax" // arrstrCouple
                    , "StdParam", "InventoryCode" // arrstrCouple
                    , "float", "DiscountRate" // arrstrCouple
                    , "float", "ValDiscount" // arrstrCouple
                    , "", "Remark" // arrstrCouple
                    , "", "InvoiceDCF1" // arrstrCouple
                    , "", "InvoiceDCF2" // arrstrCouple
                    , "", "InvoiceDCF3" // arrstrCouple
                    , "", "InvoiceDCF4" // arrstrCouple
                    , "", "InvoiceDCF5" // arrstrCouple
                    );

                //TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_InvoiceDtl, "InvoiceCode", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_InvoiceDtl, "LogLUDTimeUTC", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_InvoiceDtl, "LogLUBy", typeof(object));
                
                }
            #endregion

            #region //SaveTemp Invoice_InvoiceDtl:
            {
                // Upload:
                TUtils.CUtils.MyBuildDBDT_Common(
                    _cf.db // db
                    , "#input_Invoice_InvoiceDtl" // strTableName
                    , new object[] {
                            "InvoiceCode", TConst.BizMix.Default_DBColType
                            , "Idx", TConst.BizMix.Default_DBColType
                            , "NetworkID", TConst.BizMix.Default_DBColType
                            , "SpecCode", TConst.BizMix.Default_DBColType
                            , "SpecName", TConst.BizMix.Default_DBColType
                            , "ProductID", TConst.BizMix.Default_DBColType
                            , "ProductName", TConst.BizMix.Default_DBColType
                            , "VATRateCode", TConst.BizMix.Default_DBColType
                            , "VATRate", "float"
                            , "UnitCode", TConst.BizMix.Default_DBColType
                            , "UnitName", TConst.BizMix.Default_DBColType
                            , "UnitPrice", "float"
                            , "Qty", "float"
                            , "ValInvoice", "float"
                            , "ValTax", "float"
                            , "InventoryCode", TConst.BizMix.Default_DBColType
                            , "DiscountRate", "float"
                            , "ValDiscount", "float"
                            , "InvoiceDtlStatus", TConst.BizMix.Default_DBColType
                            , "Remark", TConst.BizMix.Default_DBColType
                            , "InvoiceDCF1", TConst.BizMix.Default_DBColType
                            , "InvoiceDCF2", TConst.BizMix.Default_DBColType
                            , "InvoiceDCF3", TConst.BizMix.Default_DBColType
                            , "InvoiceDCF4", TConst.BizMix.Default_DBColType
                            , "InvoiceDCF5", TConst.BizMix.Default_DBColType
                            , "LogLUDTimeUTC", TConst.BizMix.Default_DBColType
                            , "LogLUBy", TConst.BizMix.Default_DBColType
                            } // arrSingleStructure
                    , dtInput_Invoice_InvoiceDtl // dtData
                );
            }
            #endregion

            #region // Refine and Check Input Invoice_InvoiceDtl:
            {
                #region ----// Check ProductID + SpecCode là duy nhất:
                {
                    string strSql_CheckProducID = CmUtils.StringUtils.Replace(@"                            
                            ---- #tbl_Invoice_InvoiceDtl_TotalProductID:
                            select 
	                            t.InvoiceCode
	                            , t.SpecCode
	                            , t.ProductID
	                            , count(0) QtyProductID
                            into #tbl_Invoice_InvoiceDtl_TotalProductID
                            from #input_Invoice_InvoiceDtl t --//[mylock]
                            where(1=1)
	                            and t.ProductID is not null
                            group by 
	                            t.InvoiceCode
	                            , t.SpecCode
	                            , t.ProductID
                            ;

                            ---- Return:
                            select top 1
	                            t.InvoiceCode
	                            , t.ProductID
	                            , t.SpecCode
	                            , t.QtyProductID
                            from #tbl_Invoice_InvoiceDtl_TotalProductID t --//[mylock]
                            where(1=1)
	                            and t.QtyProductID > 1
                            ;

                            -- Clear For Debug:
                            drop table #tbl_Invoice_InvoiceDtl_TotalProductID;

						");
                    DataTable dt_CheckProductID = _cf.db.ExecQuery(
                        strSql_CheckProducID
                        ).Tables[0];
                    /////
                    if (dt_CheckProductID.Rows.Count > 0)
                    {
                        alParamsCoupleError.AddRange(new object[]{
                            "Check.ErrConditionalRaise", "t.QtyProductID > 1"
                            //, "Check.NumberRows", dt_CheckProductID.Rows.Count
                            , "Check.InvoiceCode", dt_CheckProductID.Rows[0]["InvoiceCode"]
                            , "Check.SpecCode", dt_CheckProductID.Rows[0]["SpecCode"]
                            , "Check.ProductID", dt_CheckProductID.Rows[0]["ProductID"]
                            , "Check.QtyProductID", dt_CheckProductID.Rows[0]["QtyProductID"]
                            });
                        throw CmUtils.CMyException.Raise(
                            TError.ErridnInventory.Invoice_Invoice_SaveX_Input_InvoiceDtl_ProductIDDuplicate
                            , null
                            , alParamsCoupleError.ToArray()
                            );
                    }
                    ////
                }
                #endregion

                #region ----// Check SpecCode là duy nhất:
                {
                    string strSql_CheckSpec = CmUtils.StringUtils.Replace(@"                         
                            ---- #tbl_Invoice_InvoiceDtl_TotalSpec:
                            select 
	                            t.InvoiceCode
	                            , t.SpecCode
	                            , count(0) QtySpecCode
                            into #tbl_Invoice_InvoiceDtl_TotalSpec
                            from #input_Invoice_InvoiceDtl t --//[mylock]
                            where(1=1)
	                            and t.ProductID is null
								and t.SpecCode is not null
                            group by 
	                            t.InvoiceCode
	                            , t.SpecCode
                            ;

                            ---- Return:
                            select top 1
	                            t.InvoiceCode
	                            , t.SpecCode
	                            , t.QtySpecCode
                            from #tbl_Invoice_InvoiceDtl_TotalSpec t --//[mylock]
                            where(1=1)
	                            and t.QtySpecCode > 1
                            ;

                            -- Clear For Debug:
                            drop table #tbl_Invoice_InvoiceDtl_TotalSpec;

						");
                    DataTable dt_CheckSpecCode = _cf.db.ExecQuery(
                        strSql_CheckSpec
                        ).Tables[0];
                    /////
                    if (dt_CheckSpecCode.Rows.Count > 0)
                    {
                        alParamsCoupleError.AddRange(new object[]{
                            "Check.ErrConditionalRaise", "t.QtyProductID > 1"
                            //, "Check.NumberRows", dt_CheckProductID.Rows.Count
                            , "Check.InvoiceCode", dt_CheckSpecCode.Rows[0]["InvoiceCode"]
                            , "Check.SpecCode", dt_CheckSpecCode.Rows[0]["SpecCode"]
                            , "Check.QtySpecCode", dt_CheckSpecCode.Rows[0]["QtySpecCode"]
                            });
                        throw CmUtils.CMyException.Raise(
                            TError.ErridnInventory.Invoice_Invoice_UpdAfterAllocatedX_Input_InvoiceDtl_SpecCodeDuplicate
                            , null
                            , alParamsCoupleError.ToArray()
                            );
                    }
                    ////
                }
                #endregion

            }
            #endregion

            #region // Build Invoice_InvoiceDtl:
            {
                string strSql_Build = CmUtils.StringUtils.Replace(@"
                        ----- #tbl_Invoice_InvoiceDtl_Build:
                        select 
	                        t.InvoiceCode
							, Row_Number() over( partition by t.InvoiceCode order by t.Idx asc) Idx 
							--, Row_Number() over (order by t.Idx desc) Idx 
	                        --, t.Idx
	                        , t.NetworkID
	                        , t.SpecCode
	                        , t.SpecName
	                        , t.ProductID
	                        , t.ProductName
	                        , t.VATRateCode
	                        , t.VATRate
	                        , t.UnitCode
	                        , t.UnitName
	                        , t.UnitPrice
	                        , t.Qty
	                        , t.ValInvoice
	                        , t.ValTax
	                        , t.InventoryCode
	                        , t.DiscountRate
	                        , t.ValDiscount
	                        , '@strInvoiceStatus' InvoiceDtlStatus --t.InvoiceDtlStatus
	                        , t.Remark
	                        , t.InvoiceDCF1
	                        , t.InvoiceDCF2
	                        , t.InvoiceDCF3
	                        , t.InvoiceDCF4
	                        , t.InvoiceDCF5
	                        , '@strLogLUDTimeUTC' LogLUDTimeUTC --t.LogLUDTimeUTC
	                        , '@strLogLUBy' LogLUBy --t.LogLUBy
                        into #tbl_Invoice_InvoiceDtl_Build
                        from #input_Invoice_InvoiceDtl t --//[mylock]

                        select null tbl_Invoice_InvoiceDtl_Build, t.* from #tbl_Invoice_InvoiceDtl_Build t --//[mylock];
                    ;"
                    , "@strInvoiceStatus", TConst.InvoiceStatus.Pending
                    , "@strLogLUDTimeUTC", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
                    , "@strLogLUBy", strWAUserCode
                    );
                DataTable dt_Build = _cf.db.ExecQuery(
                    strSql_Build
                    ).Tables[0];
                /////
            }
            #endregion

            #region //// SaveDB:

            //// Clear All: clear all bang Invoice_InvoiceDtl
            {
                string strSqlDelete = CmUtils.StringUtils.Replace(@"
                            --- Delete:
                            ---- Invoice_InvoiceDtl:
                            delete t 
                            from Invoice_InvoiceDtl t --//[mylock]
	                            inner join #input_Invoice_InvoiceDtl f --//[mylock]
		                            on t.InvoiceCode = f.InvoiceCode
		                                --and t.Idx = f.Idx
                            where (1=1)
                            ;
                            --- Clear For Debug:
						");
                DataSet dtDB = _cf.db.ExecQuery(
                    strSqlDelete
                    );
            }
            //// Insert All:
            {
                ////
                string zzB_Update_Invoice_Invoice_ClauseSet_zzE = @"
							t.LogLUDTimeUTC = f.LogLUDTimeUTC
							, t.LogLUBy = f.LogLUBy
							, t.PaymentMethodCode = f.PaymentMethodCode
							, t.CustomerNNTCode = f.CustomerNNTCode
							, t.CustomerNNTName = f.CustomerNNTName
							, t.CustomerNNTAddress = f.CustomerNNTAddress
							, t.CustomerNNTPhone = f.CustomerNNTPhone
							, t.CustomerNNTBankName = f.CustomerNNTBankName
							, t.CustomerNNTEmail = f.CustomerNNTEmail
							, t.CustomerNNTAccNo = f.CustomerNNTAccNo
							, t.CustomerNNTBuyerName = f.CustomerNNTBuyerName
							, t.CustomerMST = f.CustomerMST
							, t.InvoiceDateUTC = f.InvoiceDateUTC
							, t.TotalValInvoice = f.TotalValInvoice
							, t.TotalValVAT = f.TotalValVAT
							, t.TotalValPmt = f.TotalValPmt
							, t.ValGoodsNotTaxable = f.ValGoodsNotTaxable
							, t.ValGoodsNotChargeTax = f.ValGoodsNotChargeTax
							, t.ValGoodsVAT5 = f.ValGoodsVAT5
							, t.ValVAT5 = f.ValVAT5
							, t.ValGoodsVAT10 = f.ValGoodsVAT10
							, t.ValVAT10 = f.ValVAT10
							";
                ////
                string zzB_Update_Invoice_Invoice_zzE = CmUtils.StringUtils.Replace(@"
							---- Invoice_Invoice:
							update t
							set
								zzB_Update_Invoice_Invoice_ClauseSet_zzE
							from Invoice_Invoice t --//[mylock]
								inner join #input_Invoice_Invoice f --//[mylock]
									on t.InvoiceCode = f.InvoiceCode
							;
						"
                    , "zzB_Update_Invoice_Invoice_ClauseSet_zzE", zzB_Update_Invoice_Invoice_ClauseSet_zzE
                    );
                ////
                string zzzzClauseInsert_Invoice_InvoiceDtl_zSave = CmUtils.StringUtils.Replace(@"
						---- Invoice_InvoiceDtl:  
                                insert into Invoice_InvoiceDtl(
	                                InvoiceCode
	                                , Idx
	                                , NetworkID
	                                , SpecCode
	                                , SpecName
	                                , ProductID
	                                , ProductName
	                                , VATRateCode
	                                , VATRate
	                                , UnitCode
	                                , UnitName
	                                , UnitPrice
	                                , Qty
	                                , ValInvoice
	                                , ValTax
	                                , InventoryCode
	                                , DiscountRate
	                                , ValDiscount
	                                , InvoiceDtlStatus
	                                , Remark
	                                , InvoiceDCF1
	                                , InvoiceDCF2
	                                , InvoiceDCF3
	                                , InvoiceDCF4
	                                , InvoiceDCF5
	                                , LogLUDTimeUTC
	                                , LogLUBy
                                )
                                select 
	                                t.InvoiceCode
	                                , t.Idx
	                                , t.NetworkID
	                                , t.SpecCode
	                                , t.SpecName
	                                , t.ProductID
	                                , t.ProductName
	                                , t.VATRateCode
	                                , t.VATRate
	                                , t.UnitCode
	                                , t.UnitName
	                                , t.UnitPrice
	                                , t.Qty
	                                , t.ValInvoice
	                                , t.ValTax
	                                , t.InventoryCode
	                                , t.DiscountRate
	                                , t.ValDiscount
	                                , t.InvoiceDtlStatus
	                                , t.Remark
	                                , t.InvoiceDCF1
	                                , t.InvoiceDCF2
	                                , t.InvoiceDCF3
	                                , t.InvoiceDCF4
	                                , t.InvoiceDCF5
	                                , t.LogLUDTimeUTC
	                                , t.LogLUBy
                                from #tbl_Invoice_InvoiceDtl_Build t
                                ;
					");
                ////
                string strSqlExec = CmUtils.StringUtils.Replace(@"
						----
						zzB_Update_Invoice_Invoice_zzE

						----
						zzzzClauseInsert_Invoice_InvoiceDtl_zSave
					"
                    , "zzB_Update_Invoice_Invoice_zzE", zzB_Update_Invoice_Invoice_zzE
                    , "zzzzClauseInsert_Invoice_InvoiceDtl_zSave", zzzzClauseInsert_Invoice_InvoiceDtl_zSave
                    );
                ////
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.strSqlExec", strSqlExec
                        });
                }
                DataSet dsExec = _cf.db.ExecQuery(strSqlExec);
            }
            #endregion

            #region // myCheck_Invoice_Invoice_Total:
            {
                myCheck_Invoice_Invoice_Total_New20190905(
                    ref alParamsCoupleError // alParamsCoupleError
                    , dtimeSys // dtimeSys
                    , "#input_Invoice_Invoice"  //zzzz_tbl_Invoice_Invoice_RefNo
                    );
                ////
                myCheck_Invoice_InvoiceDtl_Total_New20190905(
                    ref alParamsCoupleError // alParamsCoupleError
                    , dtimeSys // dtimeSys
                    , "#input_Invoice_Invoice"  //zzzz_tbl_Invoice_Invoice_RefNo
                    );
            }
            #endregion

            #region //// Clear For Debug:
            {
                ////
                string strSqlClearForDebug = CmUtils.StringUtils.Replace(@"
						---- Clear for Debug:
						drop table #input_Invoice_Invoice;
						drop table #input_Invoice_InvoiceDtl;
					");

                _cf.db.ExecQuery(
                    strSqlClearForDebug
                    );
                ////
            }
            #endregion

            // Return Good:
            //MyCodeLabel_Done:
            return;
            //TDALUtils.DBUtils.CommitSafety(_cf.db);
            //mdsFinal.AcceptChanges();
            //return mdsFinal;		
        }
        #endregion

        #region // Invoice_license:
        private void Invoice_license_CheckDB(
            ref ArrayList alParamsCoupleError
            , object objMST
            , string strFlagExistToCheck
            , string strFlagActiveListToCheck
            , out DataTable dtDB_Invoice_license
            )
        {
            // GetInfo:
            string strSqlExec = CmUtils.StringUtils.Replace(@"
					select top 1
						t.*
					from Invoice_license t --//[mylock]
					where (1=1)
						and t.MST = @objMST
					;
				");
            dtDB_Invoice_license = _cf.db.ExecQuery(
                strSqlExec
                , "@objMST", objMST
                ).Tables[0];
            dtDB_Invoice_license.TableName = "Invoice_license";

            // strFlagExistToCheck:
            if (strFlagExistToCheck.Length > 0)
            {
                if (CmUtils.StringUtils.StringEqual(strFlagExistToCheck, TConst.Flag.Active) && dtDB_Invoice_license.Rows.Count < 1)
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.MST", objMST
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Invoice_license_CheckDB_licenseNotFound
                        , null
                        , alParamsCoupleError.ToArray()
                        );
                }
                if (CmUtils.StringUtils.StringEqual(strFlagExistToCheck, TConst.Flag.Inactive) && dtDB_Invoice_license.Rows.Count > 0)
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.MST", objMST
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Invoice_license_CheckDB_licenseExist
                        , null
                        , alParamsCoupleError.ToArray()
                        );
                }
            }
            // strFlagActiveListToCheck:
            if (strFlagActiveListToCheck.Length > 0 && !strFlagActiveListToCheck.Contains(Convert.ToString(dtDB_Invoice_license.Rows[0]["FlagActive"])))
            {
                alParamsCoupleError.AddRange(new object[]{
                    "Check.MST", objMST
                    , "Check.strFlagActiveListToCheck", strFlagActiveListToCheck
                    , "DB.FlagActive", dtDB_Invoice_license.Rows[0]["FlagActive"]
                    });
                throw CmUtils.CMyException.Raise(
                    TError.ErridnInventory.Invoice_license_CheckDB_FlagActiveNotMatched
                    , null
                    , alParamsCoupleError.ToArray()
                    );
            }
        }

        public DataSet WAS_Invoice_license_Get(
            ref ArrayList alParamsCoupleError
            , RQ_Invoice_license objRQ_Invoice_license
            ////
            , out RT_Invoice_license objRT_Invoice_license
            )
        {
            #region // Temp:
            string strTid = objRQ_Invoice_license.Tid;
            objRT_Invoice_license = new RT_Invoice_license();
            DataSet mdsResult = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            DateTime dtimeSys = DateTime.UtcNow;
            //DataSet mdsExec = null;
            //DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(objRQ_Invoice_license.Tid);
            //int nTidSeq = 0;
            //bool bNeedTransaction = true;
            string strFunctionName = "WAS_Invoice_license_Get";
            string strErrorCodeDefault = TError.ErridnInventory.WAS_Invoice_license_Get;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
				});
            #endregion

            try
            {
                #region // Init:
                #endregion

                #region // Refine and Check Input:
                List<Invoice_license> lst_Invoice_license = new List<Invoice_license>();
                #endregion

                #region // WS_Invoice_license_Get:
                mdsResult = Invoice_license_Get(
                    objRQ_Invoice_license.Tid // strTid
                    , objRQ_Invoice_license.GwUserCode // strGwUserCode
                    , objRQ_Invoice_license.GwPassword // strGwPassword
                    , objRQ_Invoice_license.WAUserCode // strUserCode
                    , objRQ_Invoice_license.WAUserPassword // strUserPassword
                    , ref alParamsCoupleError // alParamsCoupleError
                                              //// Filter:
                    , objRQ_Invoice_license.Ft_RecordStart // strFt_RecordStart
                    , objRQ_Invoice_license.Ft_RecordCount // strFt_RecordCount
                    , objRQ_Invoice_license.Ft_WhereClause // strFt_WhereClause
                                                           //// Return:
                    , objRQ_Invoice_license.Rt_Cols_Invoice_license // strRt_Cols_Invoice_license
                    );
                #endregion

                #region // GetData:
                if (!CmUtils.CMyDataSet.HasError(mdsResult))
                {
                    ////
                    DataTable dt_Invoice_license = mdsResult.Tables["Invoice_license"].Copy();
                    lst_Invoice_license = TUtils.DataTableCmUtils.ToListof<Invoice_license>(dt_Invoice_license);
                    objRT_Invoice_license.Lst_Invoice_license = lst_Invoice_license;
                    /////
                }
                #endregion

                // Return Good:
                return mdsResult;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsResult
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Write ReturnLog:
                //_cf.ProcessBizReturn(
                //	ref mdsResult // mdsFinal
                //	, strTid // strTid
                //	, strFunctionName // strFunctionName
                //	);
                #endregion
            }
        }
        private void Invoice_license_GetX(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            , DateTime dtimeSys
            //// Filter:
            , string strFt_RecordStart
            , string strFt_RecordCount
            , string strFt_WhereClause
            //// Return:
            , string strRt_Cols_Invoice_license
            ////
            , out DataSet dsGetData
            )
        {
            #region // Temp:
            //DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            //DateTime dtimeSys = DateTime.UtcNow;
            //bool bNeedTransaction = true;
            string strFunctionName = "Invoice_license_GetX";
            //string strErrorCodeDefault = TError.ErrHTCNM.Mnf_VIN_Get_QCX;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
                });
            #endregion

            #region // Check:
            //// Refine:
            long nFilterRecordStart = Convert.ToInt64(strFt_RecordStart);
            long nFilterRecordEnd = nFilterRecordStart + Convert.ToInt64(strFt_RecordCount) - 1;
            bool bGet_Invoice_license = (strRt_Cols_Invoice_license != null && strRt_Cols_Invoice_license.Length > 0);

            // drAbilityOfUser:
            DataRow drAbilityOfUser = Sys_User_GetAbilityViewOfUser(strWAUserCode);
            zzzzClauseSelect_Mst_NNT_ViewAbility_Get(
                drAbilityOfUser // drAbilityOfUser
                , ref alParamsCoupleError // alParamsCoupleError
                );

            #endregion

            #region // Build Sql:
            ////
            ArrayList alParamsCoupleSql = new ArrayList();
            alParamsCoupleSql.AddRange(new object[] {
                "@nFilterRecordStart", nFilterRecordStart
                , "@nFilterRecordEnd", nFilterRecordEnd
                });
            ////
            //myCache_ViewAbility_GetDealerInfo(drAbilityOfUser);
            ////
            string strSqlGetData = CmUtils.StringUtils.Replace(@"
					---- #tbl_Invoice_license_Filter_Draft:
					select distinct
						identity(bigint, 0, 1) MyIdxSeq
						, il.MST
					into #tbl_Invoice_license_Filter_Draft
					from Invoice_license il --//[mylock]
                        inner join #tbl_Mst_NNT_ViewAbility t_MstNNT_View --//[mylock]
                            on il.MST = t_MstNNT_View.MST
					where (1=1)
						zzB_Where_strFilter_zzE
					order by il.MST asc
					;

					---- Summary:
					select Count(0) MyCount from #tbl_Invoice_license_Filter_Draft t --//[mylock]
					;

					---- #tbl_Invoice_license_Filter:
					select
						t.*
					into #tbl_Invoice_license_Filter
					from #tbl_Invoice_license_Filter_Draft t --//[mylock]
					where (1=1)
						and (t.MyIdxSeq >= @nFilterRecordStart)
						and (t.MyIdxSeq <= @nFilterRecordEnd)
					;

					-------- Invoice_license -----:
					zzB_Select_Invoice_license_zzE
					-------------------------------

					---- Clear for debug:
					--drop table #tbl_Invoice_license_Filter_Draft;
					--drop table #tbl_Invoice_license_Filter;
				"
                );
            ////
            string zzB_Select_Invoice_license_zzE = "-- Nothing.";
            if (bGet_Invoice_license)
            {
                #region // bGet_Invoice_license:
                zzB_Select_Invoice_license_zzE = CmUtils.StringUtils.Replace(@"
					---- Invoice_license:
					select
						t.MyIdxSeq
						, il.*
					from #tbl_Invoice_license_Filter t --//[mylock]
						inner join Invoice_license il --//[mylock]
							on t.MST = il.MST
					order by t.MyIdxSeq asc
					;
				"
                );
                #endregion
            }
            ////
            string zzB_Where_strFilter_zzE = "";
            {
                Hashtable htSpCols = new Hashtable();
                {
                    #region // htSpCols:
                    ////
                    TUtils.CUtils.MyBuildHTSupportedColumns(
                        _cf.db // db
                        , ref htSpCols // htSupportedColumns
                        , "Invoice_license" // strTableNameDB
                        , "Invoice_license." // strPrefixStd
                        , "il." // strPrefixAlias
                        );
                    ////
                    #endregion
                }
                zzB_Where_strFilter_zzE = CmUtils.SqlUtils.BuildWhere(
                    htSpCols // htSpCols
                    , strFt_WhereClause // strClause
                    , "@p_" // strParamPrefix
                    , ref alParamsCoupleSql // alParamsCoupleSql
                    );
                zzB_Where_strFilter_zzE = (zzB_Where_strFilter_zzE.Length <= 0 ? "" : string.Format(" and ({0})", zzB_Where_strFilter_zzE));
                alParamsCoupleError.AddRange(new object[]{
                    "zzB_Where_strFilter_zzE", zzB_Where_strFilter_zzE
                    });
            }
            ////
            strSqlGetData = CmUtils.StringUtils.Replace(
                strSqlGetData
                , "zzB_Where_strFilter_zzE", zzB_Where_strFilter_zzE
                , "zzB_Select_Invoice_license_zzE", zzB_Select_Invoice_license_zzE
                );
            #endregion

            #region // Get Data:
            dsGetData = _cf.db.ExecQuery(
                strSqlGetData
                , alParamsCoupleSql.ToArray()
                );
            int nIdxTable = 0;
            dsGetData.Tables[nIdxTable++].TableName = "MySummaryTable";
            if (bGet_Invoice_license)
            {
                dsGetData.Tables[nIdxTable++].TableName = "Invoice_license";
            }
            #endregion
        }
        public DataSet Invoice_license_Get(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            //// Filter:
            , string strFt_RecordStart
            , string strFt_RecordCount
            , string strFt_WhereClause
            //// Return:
            , string strRt_Cols_Invoice_license
            )
        {
            #region // Temp:
            DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            //int nTidSeq = 0;
            DateTime dtimeSys = DateTime.UtcNow;
            string strFunctionName = "Invoice_license_Get";
            string strErrorCodeDefault = TError.ErridnInventory.Invoice_license_Get;
            alParamsCoupleError.AddRange(new object[]{
                    "strFunctionName", strFunctionName
                    , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
			        //// Filter
					, "strFt_RecordStart", strFt_RecordStart
                    , "strFt_RecordCount", strFt_RecordCount
                    , "strFt_WhereClause", strFt_WhereClause
			        //// Return
					, "strRt_Cols_Invoice_license", strRt_Cols_Invoice_license
                    });
            #endregion

            try
            {
                #region // Init:
                //_cf.db.LogUserId = _cf.sinf.strUserCode;
                _cf.db.BeginTransaction();

                // Write RequestLog:
                _cf.ProcessBizReq_OutSide(
                    strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    , alParamsCoupleError // alParamsCoupleError
                    );

                // Sys_User_CheckAuthentication:
                //Sys_User_CheckAuthentication(
                //    ref alParamsCoupleError
                //    , strWAUserCode
                //    , strWAUserPassword
                //    );

                // Check Access/Deny:
                Sys_Access_CheckDenyV30(
                    ref alParamsCoupleError
                    , strWAUserCode
                    , strFunctionName
                    );
                #endregion

                #region // Invoice_license_GetX:
                DataSet dsGetData = null;
                {
                    ////
                    Invoice_license_GetX(
                        strTid // strTid
                        , strGwUserCode // strGwUserCode
                        , strGwPassword // strGwPassword
                        , strWAUserCode // strWAUserCode
                        , strWAUserPassword // strWAUserPassword
                        , ref alParamsCoupleError // alParamsCoupleError
                        , dtimeSys // dtimeSys
                                   ////
                        , strFt_RecordStart // strFt_RecordStart
                        , strFt_RecordCount // strFt_RecordCount
                        , strFt_WhereClause // strFt_WhereClause
                                            ////
                        , strRt_Cols_Invoice_license // strRt_Cols_Invoice_license
                                                     ////
                        , out dsGetData // dsGetData
                        );
                    ////
                    CmUtils.DataUtils.MoveDataTable(ref mdsFinal, ref dsGetData);
                }
                #endregion

                // Return Good:
                TDALUtils.DBUtils.RollbackSafety(_cf.db); // Always Rollback.
                mdsFinal.AcceptChanges();
                return mdsFinal;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Rollback:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);

                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsFinal
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Rollback and Release resources:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);
                TDALUtils.DBUtils.ReleaseAllSemaphore(_cf.db_Sys, true);

                // Write ReturnLog:
                _cf.ProcessBizReturn_OutSide(
                    ref mdsFinal // mdsFinal
                    , strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    );
                #endregion
            }
        }

        private void myUpdate_Invoice_license_TotalQtyIssued(
            ref ArrayList alParamsCoupleError
            , string strWAUserCode
            , DateTime dtimeSys
            ////
            , string strMST
            , Int64 nQtyIssued
            )
        {
            string strSql = CmUtils.StringUtils.Replace(@"
                    -- Update:
                    update t 
                    set
	                    t.LogLUDTimeUTC = '@strLogLUDTimeUTC'
	                    , t.LogLUBy = '@strLogLUBy'
	                    , t.TotalQtyIssued = t.TotalQtyIssued + @nQtyIssued
                    from Invoice_license t --//[mylock]
                    where(1=1)
		                and t.MST = '@strMST'
                    ;
                "
                , "@strMST", strMST
                , "@nQtyIssued", nQtyIssued
                , "@strLogLUDTimeUTC", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
                , "@strLogLUBy", strWAUserCode
                );
            //
            _cf.db.ExecQuery(strSql);
        }

        private void myCheck_Invoice_license_TotalQtyUsed(
            ref ArrayList alParamsCoupleError
            , DateTime dtimeSys
            ////
            , string strMST
            )
        {
            string strSql = CmUtils.StringUtils.Replace(@"
                    ---- #tbl_Invoice_TempInvoice_TotalQtyUsed:
                    select 
	                    t.MST
	                    , sum(t.QtyUsed) TotalQtyUsed
                    into #tbl_Invoice_TempInvoice_TotalQtyUsed
                    from Invoice_TempInvoice t --//[mylock]
                    where(1=1)
	                    and t.MST = '@strMST'
                    group by 
	                    t.MST
                    ;

                    -- Update:
                    update t 
                    set
	                    t.LogLUDTimeUTC = ''
	                    , t.LogLUBy = ''
	                    , t.TotalQtyUsed = f.TotalQtyUsed
                    from Invoice_license t --//[mylock]
	                    inner join #tbl_Invoice_TempInvoice_TotalQtyUsed f --//[mylock]
		                    on t.MST = f.MST
                    where(1=1)
                    ;

                    --- Clear For Debug:
                    drop table #tbl_Invoice_TempInvoice_TotalQtyUsed;
                "
                , "@strMST", strMST
                );
            //
            DataTable dtCheck = _cf.db.ExecQuery(strSql).Tables[0];
        }

        private void Invoice_license_IncreaseQtyX(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            , DateTime dtimeSys
            //// 
            , object objMST
            , object objQty
            ////
            , object objFt_Cols_Upd
            ////
            )
        {
            #region // Temp:
            string strFunctionName = "Invoice_license_IncreaseQtyX";
            //string strErrorCodeDefault = TError.ErrHTCNM.Invoice_license_UpdateX;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
                ////
                , "objMST", objMST
                , "objQty", objQty
                ////
                , "objFt_Cols_Upd", objFt_Cols_Upd
                });
            #endregion

            #region // Refine and Check Input:
            ////
            string strFt_Cols_Upd = TUtils.CUtils.StdParam(objFt_Cols_Upd);
            strFt_Cols_Upd = (strFt_Cols_Upd == null ? "" : strFt_Cols_Upd);
            ////
            string strMST = TUtils.CUtils.StdParam(objMST);
            double dblQty = Convert.ToDouble(objQty);
            ////
            //bool bUpd_MST = strFt_Cols_Upd.Contains("Invoice_license.MST".ToUpper());
            //bool bUpd_Qty = strFt_Cols_Upd.Contains("Invoice_license.Qty".ToUpper());

            ////
            DataTable dtDB_Invoice_license_IncreaseQty = new DataTable("dtDB_Invoice_license_IncreaseQty");
            //DataTable dtDate_Begin_End = null;
            {
                dtDB_Invoice_license_IncreaseQty.Columns.Add("MST", typeof(object));
                dtDB_Invoice_license_IncreaseQty.Columns.Add("Qty", typeof(object));

            }
            ////
            DataTable dtDB_Invoice_license = null;
            {
                ////
                Invoice_license_CheckDB(
                     ref alParamsCoupleError // alParamsCoupleError
                     , strMST // strMST 
                     , TConst.Flag.Yes // strFlagExistToCheck
                     , TConst.Flag.Active // strFlagActiveListToCheck
                     , out dtDB_Invoice_license // dtDB_Mst_Organ
                    );
                ////
                DataTable dtDB_Mst_NNT = null;

                Mst_NNT_CheckDB(
                    ref alParamsCoupleError // alParamsCoupleError
                    , strMST // strMST 
                    , TConst.Flag.Yes // strFlagExistToCheck
                    , TConst.Flag.Active // strFlagActiveListToCheck
                    , "" // strTCTStatusListToCheck
                    , out dtDB_Mst_NNT // dtDB_Mst_NNT
                    );
                ////
                if (dblQty < 0.0)
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.dblQty", dblQty
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Invoice_license_IncreaseQtyX_InvalidQty
                        , null
                        , alParamsCoupleError.ToArray()
                        );
                }
                ////

                dtDB_Invoice_license_IncreaseQty.Rows.Add(strMST, dblQty);
            }
            #endregion

            #region // Save Invoice_license_IncreaseQty:
            {
                TUtils.CUtils.MyBuildDBDT_Common(
                    _cf.db
                    , "#input_Invoice_license_IncreaseQty"
                    , new object[]{
                        "MST", TConst.BizMix.Default_DBColType,
                        "Qty", TConst.BizMix.Default_DBColType,
                    }
                    , dtDB_Invoice_license_IncreaseQty
                    );
            }
            #endregion

            #region // Invoice_license: Upd TotalQty.
            {
                ////
                string strSqlUpd = CmUtils.StringUtils.Replace(@"
                        --- Nếu MST chưa có trong license:
					    ----- insert into:
					    insert into Invoice_license (
						    MST
						    , NetworkID
						    , TotalQty
						    , TotalQtyIssued
						    , TotalQtyUsed
						    , FlagActive
						    , LogLUDTimeUTC
						    , LogLUBy
					    )

					    select 
						    t.MST
						    , t.NetworkID
						    , 0 -- k.TotalQty
						    , 0 --k.TotalQtyIssued
						    , 0 --k.TotalQtyUsed
						    , '1'
						    , '2100-01-01 00:00:00'
						    , 'sys.21000101.0000'
					    from Mst_NNT t 
						    left join Invoice_license k 
							    on t.MST = k.MST
					    where(1=1)
						    and k.MST is null 
                        ;
						---- Invoice_license:
						update t
						set
                            t.TotalQty = t.TotalQty+ f.Qty
							, t.LogLUDTimeUTC = '@strLogLUDTimeUTC'
							, t.LogLUBy = '@strLogLUBy'
						from Invoice_license t --//[mylock]
							inner join #input_Invoice_license_IncreaseQty f --//[mylock]
								on t.MST = f.MST
						where (1=1)
						;
					"
                    , "@strLogLUDTimeUTC", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
                    , "@strLogLUBy", strWAUserCode
                    );

                DataSet dsExec = _cf.db.ExecQuery(strSqlUpd);
            }
            #endregion

            #region //// Clear For Debug:
            {
                ////
                string strSqlClearForDebug = CmUtils.StringUtils.Replace(@"
						
						---- Clear For Debug:
						drop table #input_Invoice_license_IncreaseQty;
					");

                _cf.db.ExecQuery(
                    strSqlClearForDebug
                    );
                ////
            }
            #endregion
        }

        public DataSet Invoice_license_IncreaseQty(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            ////
            , object objMST
            , object objQty
            ////
            , object objFt_Cols_Upd
            )
        {
            #region // Temp:
            DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            //int nTidSeq = 0;
            DateTime dtimeSys = DateTime.UtcNow;
            string strFunctionName = "Invoice_license_IncreaseQty";
            string strErrorCodeDefault = TError.ErridnInventory.Invoice_license_IncreaseQty;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
                    ////
                , "objMST", objMST
                , "objQty", objQty
                ////
                , "objFt_Cols_Upd", objFt_Cols_Upd
                });
            #endregion

            try
            {
                #region // Init:
                //_cf.db.LogUserId = _cf.sinf.strUserCode;
                _cf.db.BeginTransaction();

                // Write RequestLog:
                _cf.ProcessBizReq_OutSide(
                    strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    , alParamsCoupleError // alParamsCoupleError
                    );

                // Sys_User_CheckAuthentication:
                //Sys_User_CheckAuthentication(
                //    ref alParamsCoupleError
                //    , strWAUserCode
                //    , strWAUserPassword
                //    );

                // Check Access/Deny:
                Sys_Access_CheckDenyV30(
                    ref alParamsCoupleError
                    , strWAUserCode
                    , strFunctionName
                    );
                #endregion

                #region // Invoice_license_IncreaseQtyX:
                //DataSet dsGetData = null;
                {
                    Invoice_license_IncreaseQtyX(
                        strTid // strTid
                        , strGwUserCode // strGwUserCode
                        , strGwPassword // strGwPassword
                        , strWAUserCode // strWAUserCode
                        , strWAUserPassword // strWAUserPassword
                        , ref alParamsCoupleError // alParamsCoupleError
                        , dtimeSys // dtimeSys
                                   ////
                        , objMST
                        , objQty
                        /////
                        , objFt_Cols_Upd // objFt_Cols_Upd
                        );
                }
                ////
                //CmUtils.DataUtils.MoveDataTable(ref mdsFinal, ref dsGetData);
                #endregion

                // Return Good:
                TDALUtils.DBUtils.CommitSafety(_cf.db);
                mdsFinal.AcceptChanges();
                return mdsFinal;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Rollback:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);

                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsFinal
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Rollback and Release resources:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);
                TDALUtils.DBUtils.ReleaseAllSemaphore(_cf.db_Sys, true);

                // Write ReturnLog:
                _cf.ProcessBizReturn_OutSide(
                    ref mdsFinal // mdsFinal
                    , strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    );
                #endregion
            }
        }
        public DataSet WAS_Invoice_license_IncreaseQty(
            ref ArrayList alParamsCoupleError
            , RQ_Invoice_license objRQ_Invoice_license
            ////
            , out RT_Invoice_license objRT_Invoice_license
            )
        {
            #region // Temp:
            string strTid = objRQ_Invoice_license.Tid;
            objRT_Invoice_license = new RT_Invoice_license();
            DataSet mdsResult = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            DateTime dtimeSys = DateTime.UtcNow;
            //DataSet mdsExec = null;
            //DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(objRQ_Invoice_license.Tid);
            //int nTidSeq = 0;
            //bool bNeedTransaction = true;
            string strFunctionName = "WAS_Invoice_license_IncreaseQty";
            string strErrorCodeDefault = TError.ErridnInventory.WAS_Invoice_license_IncreaseQty;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
        ////
        });
            #endregion

            try
            {
                #region // Init:
                #endregion

                #region // Refine and Check Input:
                List<Invoice_license> lst_Invoice_license = new List<Invoice_license>();
                #endregion

                #region // Invoice_license_Update:
                mdsResult = Invoice_license_IncreaseQty(
                    objRQ_Invoice_license.Tid // strTid
                    , objRQ_Invoice_license.GwUserCode // strGwUserCode
                    , objRQ_Invoice_license.GwPassword // strGwPassword
                    , objRQ_Invoice_license.WAUserCode // strUserCode
                    , objRQ_Invoice_license.WAUserPassword // strUserPassword
                    , ref alParamsCoupleError // alParamsCoupleError
                                              ////
                    , objRQ_Invoice_license.Invoice_license.MST // objMST
                    , objRQ_Invoice_license.Invoice_license.Qty // objQty
                                                                ////
                    , objRQ_Invoice_license.Ft_Cols_Upd // Ft_Cols_Upd
                    );
                #endregion

                // Return Good:
                return mdsResult;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsResult
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Write ReturnLog:
                //_cf.ProcessBizReturn(
                //	ref mdsResult // mdsFinal
                //	, strTid // strTid
                //	, strFunctionName // strFunctionName
                //	);
                #endregion
            }
        }

        public DataSet WAS_Invoice_licenseCreHist_Get(
            ref ArrayList alParamsCoupleError
            , RQ_Invoice_licenseCreHist objRQ_Invoice_licenseCreHist
            ////
            , out RT_Invoice_licenseCreHist objRT_Invoice_licenseCreHist
            )
        {
            #region // Temp:
            string strTid = objRQ_Invoice_licenseCreHist.Tid;
            objRT_Invoice_licenseCreHist = new RT_Invoice_licenseCreHist();
            DataSet mdsResult = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            DateTime dtimeSys = DateTime.UtcNow;
            //DataSet mdsExec = null;
            //DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(objRQ_Invoice_licenseCreHist.Tid);
            //int nTidSeq = 0;
            //bool bNeedTransaction = true;
            string strFunctionName = "WAS_Invoice_licenseCreHist_Get";
            string strErrorCodeDefault = TError.ErridnInventory.WAS_Invoice_licenseCreHist_GetAndSave;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
				});
            #endregion

            try
            {
                #region // Init:
                #endregion

                #region // Refine and Check Input:
                List<Invoice_licenseCreHist> lst_Invoice_licenseCreHist = new List<Invoice_licenseCreHist>();
                #endregion

                #region // WS_Invoice_licenseCreHist_Get:
                mdsResult = Invoice_licenseCreHist_Get(
                    objRQ_Invoice_licenseCreHist.Tid // strTid
                    , objRQ_Invoice_licenseCreHist.GwUserCode // strGwUserCode
                    , objRQ_Invoice_licenseCreHist.GwPassword // strGwPassword
                    , objRQ_Invoice_licenseCreHist.WAUserCode // strUserCode
                    , objRQ_Invoice_licenseCreHist.WAUserPassword // strUserPassword
                    , ref alParamsCoupleError // alParamsCoupleError
                                              //// Filter:
                    , objRQ_Invoice_licenseCreHist.Ft_RecordStart // strFt_RecordStart
                    , objRQ_Invoice_licenseCreHist.Ft_RecordCount // strFt_RecordCount
                    , objRQ_Invoice_licenseCreHist.Ft_WhereClause // strFt_WhereClause
                                                                  //// Return:
                    , objRQ_Invoice_licenseCreHist.Rt_Cols_Invoice_licenseCreHist // strRt_Cols_Invoice_licenseCreHist
                    );
                #endregion

                #region // GetData:
                if (!CmUtils.CMyDataSet.HasError(mdsResult))
                {
                    ////
                    DataTable dt_Invoice_licenseCreHist = mdsResult.Tables["Invoice_licenseCreHist"].Copy();
                    lst_Invoice_licenseCreHist = TUtils.DataTableCmUtils.ToListof<Invoice_licenseCreHist>(dt_Invoice_licenseCreHist);
                    objRT_Invoice_licenseCreHist.Lst_Invoice_licenseCreHist = lst_Invoice_licenseCreHist;
                    /////
                }
                #endregion

                // Return Good:
                return mdsResult;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsResult
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Write ReturnLog:
                //_cf.ProcessBizReturn(
                //	ref mdsResult // mdsFinal
                //	, strTid // strTid
                //	, strFunctionName // strFunctionName
                //	);
                #endregion
            }
        }
        private void Invoice_licenseCreHist_GetX(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            , DateTime dtimeSys
            //// Filter:
            , string strFt_RecordStart
            , string strFt_RecordCount
            , string strFt_WhereClause
            //// Return:
            , string strRt_Cols_Invoice_licenseCreHist
            ////
            , out DataSet dsGetData
            )
        {
            #region // Temp:
            //DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            //DateTime dtimeSys = DateTime.UtcNow;
            //bool bNeedTransaction = true;
            string strFunctionName = "Invoice_licenseCreHist_GetX";
            //string strErrorCodeDefault = TError.ErrHTCNM.Mnf_VIN_Get_QCX;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
                });
            #endregion

            #region // Check:
            //// Refine:
            long nFilterRecordStart = Convert.ToInt64(strFt_RecordStart);
            long nFilterRecordEnd = nFilterRecordStart + Convert.ToInt64(strFt_RecordCount) - 1;
            bool bGet_Invoice_licenseCreHist = (strRt_Cols_Invoice_licenseCreHist != null && strRt_Cols_Invoice_licenseCreHist.Length > 0);

            // drAbilityOfUser:
            DataRow drAbilityOfUser = Sys_User_GetAbilityViewOfUser(strWAUserCode);
            zzzzClauseSelect_Mst_NNT_ViewAbility_Get(
                drAbilityOfUser // drAbilityOfUser
                , ref alParamsCoupleError // alParamsCoupleError
                );

            #endregion

            #region // Build Sql:
            ////
            ArrayList alParamsCoupleSql = new ArrayList();
            alParamsCoupleSql.AddRange(new object[] {
                "@nFilterRecordStart", nFilterRecordStart
                , "@nFilterRecordEnd", nFilterRecordEnd
                });
            ////
            //myCache_ViewAbility_GetDealerInfo(drAbilityOfUser);
            ////
            string strSqlGetData = CmUtils.StringUtils.Replace(@"
					---- #tbl_Invoice_licenseCreHist_Filter_Draft:
					select distinct
						identity(bigint, 0, 1) MyIdxSeq
						, osiol.Id
					into #tbl_Invoice_licenseCreHist_Filter_Draft
					from OS_Inos_OrgLicense osiol --//[mylock]
                        left join Mst_NNT mnnt --//[mylock]
                            on osiol.OrgID = mnnt.OrgID
                        inner join #tbl_Mst_NNT_ViewAbility t_MstNNT_View --//[mylock]
                            on mnnt.MST = t_MstNNT_View.MST
                        inner join OS_Inos_Package osip --//[mylock]
							on osiol.PackageId = osip.Id
                        inner join OS_Inos_OrgSolution osios --//[mylock]
							on osiol.Id = osios.LicId
                        inner join OS_Inos_Modules osim --//[mylock]
							on osiol.Id = osim.LicId
					where (1=1)
						zzB_Where_strFilter_zzE
					order by osiol.Id asc
					;

					---- Summary:
					select Count(0) MyCount from #tbl_Invoice_licenseCreHist_Filter_Draft t --//[mylock]
					;

					---- #tbl_Invoice_licenseCreHist_Filter:
					select
						t.*
					into #tbl_Invoice_licenseCreHist_Filter
					from #tbl_Invoice_licenseCreHist_Filter_Draft t --//[mylock]
					where (1=1)
						and (t.MyIdxSeq >= @nFilterRecordStart)
						and (t.MyIdxSeq <= @nFilterRecordEnd)
					;

					-------- Invoice_licenseCreHist -----:
					zzB_Select_Invoice_licenseCreHist_zzE
					-------------------------------------

					---- Clear for debug:
					--drop table #tbl_Invoice_licenseCreHist_Filter_Draft;
					--drop table #tbl_Invoice_licenseCreHist_Filter;
				"
                );
            ////
            string zzB_Select_Invoice_licenseCreHist_zzE = "-- Nothing.";
            if (bGet_Invoice_licenseCreHist)
            {
                #region // bGet_Invoice_licenseCreHist:
                zzB_Select_Invoice_licenseCreHist_zzE = CmUtils.StringUtils.Replace(@"
					---- tbl_Sys_Modules_ModuleQtyInvoice:
					select
						t.Id
						, osim.OrgID
						, osim.ModulesCode
						, osim.ModulesCount
						, sm.QtyInvoice
						, (osim.ModulesCount * sm.QtyInvoice) ModuleQtyInvoice
					into #tbl_Sys_Modules_ModuleQtyInvoice
					from #tbl_Invoice_licenseCreHist_Filter t --//[mylock]
						inner join OS_Inos_Modules osim --//[mylock]
							on t.Id = osim.LicId
						left join Sys_Modules sm --//[mylock]
							on osim.ModulesCode = sm.ModuleCode
					where(1=1)
					;

					-- drop table #tbl_Sys_Modules_ModuleQtyInvoice;

				    ---- Invoice_licenseCreHist:
					select
						t.MyIdxSeq
						, osiol.*
						--, osiol.Id
						--, osiol.OrgID -- mã tổ chức
						--, osiol.PackageId -- mã package
						--, osiol.LicStatus -- trạng thái
						--, osiol.StartDate -- ngày hiệu lực
						--, osiol.EndDate -- ngày hết hiệu lực
						------
						, osip.Id osip_PackageId
						, osip.[Name] osip_PackageName
						, osip.Price osip_Price -- giá
						, osip.Subscription osip_Subscription -- kiểu thanh toán
						------
						, t_smmqti.ModuleQtyInvoice -- Số lượng HĐ
					from #tbl_Invoice_licenseCreHist_Filter t --//[mylock]
						inner join OS_Inos_OrgLicense osiol --//[mylock]
							on t.Id = osiol.Id
                        inner join OS_Inos_Package osip --//[mylock]
							on osiol.PackageId = osip.Id
								and osiol.Id = osip.LicID
                        inner join OS_Inos_OrgSolution osios --//[mylock]
							on osiol.Id = osios.LicId
                        inner join OS_Inos_Modules osim --//[mylock]
							on osiol.Id = osim.LicId
                        inner join #tbl_Sys_Modules_ModuleQtyInvoice t_smmqti --//[mylock]
							on osiol.Id = t_smmqti.Id
					order by t.MyIdxSeq asc
					;
				"
                );
                #endregion
            }
            ////
            string zzB_Where_strFilter_zzE = "";
            {
                Hashtable htSpCols = new Hashtable();
                {
                    #region // htSpCols:
                    ////
                    TUtils.CUtils.MyBuildHTSupportedColumns(
                        _cf.db // db
                        , ref htSpCols // htSupportedColumns
                        , "OS_Inos_OrgLicense" // strTableNameDB
                        , "OS_Inos_OrgLicense." // strPrefixStd
                        , "osiol." // strPrefixAlias
                        );
                    ////
                    TUtils.CUtils.MyBuildHTSupportedColumns(
                        _cf.db // db
                        , ref htSpCols // htSupportedColumns
                        , "OS_Inos_Package" // strTableNameDB
                        , "OS_Inos_Package." // strPrefixStd
                        , "osip." // strPrefixAlias
                        );
                    ////
                    TUtils.CUtils.MyBuildHTSupportedColumns(
                        _cf.db // db
                        , ref htSpCols // htSupportedColumns
                        , "OS_Inos_OrgSolution" // strTableNameDB
                        , "OS_Inos_OrgSolution." // strPrefixStd
                        , "osios." // strPrefixAlias
                        );
                    ////
                    TUtils.CUtils.MyBuildHTSupportedColumns(
                        _cf.db // db
                        , ref htSpCols // htSupportedColumns
                        , "OS_Inos_Modules" // strTableNameDB
                        , "OS_Inos_Modules." // strPrefixStd
                        , "osim." // strPrefixAlias
                        );
                    ////
                    #endregion
                }
                zzB_Where_strFilter_zzE = CmUtils.SqlUtils.BuildWhere(
                    htSpCols // htSpCols
                    , strFt_WhereClause // strClause
                    , "@p_" // strParamPrefix
                    , ref alParamsCoupleSql // alParamsCoupleSql
                    );
                zzB_Where_strFilter_zzE = (zzB_Where_strFilter_zzE.Length <= 0 ? "" : string.Format(" and ({0})", zzB_Where_strFilter_zzE));
                alParamsCoupleError.AddRange(new object[]{
                    "zzB_Where_strFilter_zzE", zzB_Where_strFilter_zzE
                    });
            }
            ////
            strSqlGetData = CmUtils.StringUtils.Replace(
                strSqlGetData
                , "zzB_Where_strFilter_zzE", zzB_Where_strFilter_zzE
                , "zzB_Select_Invoice_licenseCreHist_zzE", zzB_Select_Invoice_licenseCreHist_zzE
                );
            #endregion

            #region // Get Data:
            dsGetData = _cf.db.ExecQuery(
                strSqlGetData
                , alParamsCoupleSql.ToArray()
                );
            int nIdxTable = 0;
            dsGetData.Tables[nIdxTable++].TableName = "MySummaryTable";
            if (bGet_Invoice_licenseCreHist)
            {
                dsGetData.Tables[nIdxTable++].TableName = "Invoice_licenseCreHist";
            }
            #endregion
        }
        public DataSet Invoice_licenseCreHist_Get(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            //// Filter:
            , string strFt_RecordStart
            , string strFt_RecordCount
            , string strFt_WhereClause
            //// Return:
            , string strRt_Cols_Invoice_licenseCreHist
            )
        {
            #region // Temp:
            DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            //int nTidSeq = 0;
            DateTime dtimeSys = DateTime.UtcNow;
            string strFunctionName = "Invoice_licenseCreHist_Get";
            string strErrorCodeDefault = TError.ErridnInventory.Invoice_licenseCreHist_Get;
            alParamsCoupleError.AddRange(new object[]{
                    "strFunctionName", strFunctionName
                    , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
			        //// Filter
					, "strFt_RecordStart", strFt_RecordStart
                    , "strFt_RecordCount", strFt_RecordCount
                    , "strFt_WhereClause", strFt_WhereClause
			        //// Return
					, "strRt_Cols_Invoice_licenseCreHist", strRt_Cols_Invoice_licenseCreHist
                    });
            #endregion

            try
            {
                #region // Init:
                //_cf.db.LogUserId = _cf.sinf.strUserCode;
                _cf.db.BeginTransaction();

                // Write RequestLog:
                _cf.ProcessBizReq_OutSide(
                    strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    , alParamsCoupleError // alParamsCoupleError
                    );

                // Sys_User_CheckAuthentication:
                //Sys_User_CheckAuthentication(
                //    ref alParamsCoupleError
                //    , strWAUserCode
                //    , strWAUserPassword
                //    );

                // Check Access/Deny:
                Sys_Access_CheckDenyV30(
                    ref alParamsCoupleError
                    , strWAUserCode
                    , strFunctionName
                    );
                #endregion

                #region // Invoice_licenseCreHist_GetX:
                DataSet dsGetData = null;
                {
                    ////
                    Invoice_licenseCreHist_GetX(
                        strTid // strTid
                        , strGwUserCode // strGwUserCode
                        , strGwPassword // strGwPassword
                        , strWAUserCode // strWAUserCode
                        , strWAUserPassword // strWAUserPassword
                        , ref alParamsCoupleError // alParamsCoupleError
                        , dtimeSys // dtimeSys
                                   ////
                        , strFt_RecordStart // strFt_RecordStart
                        , strFt_RecordCount // strFt_RecordCount
                        , strFt_WhereClause // strFt_WhereClause
                                            ////
                        , strRt_Cols_Invoice_licenseCreHist // strRt_Cols_Invoice_licenseCreHist
                                                            ////
                        , out dsGetData // dsGetData
                        );
                    ////
                    CmUtils.DataUtils.MoveDataTable(ref mdsFinal, ref dsGetData);
                }
                #endregion
                
                // Return Good:
                TDALUtils.DBUtils.CommitSafety(_cf.db); // CommitSafety.
                mdsFinal.AcceptChanges();
                return mdsFinal;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Rollback:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);

                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsFinal
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Rollback and Release resources:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);
                TDALUtils.DBUtils.ReleaseAllSemaphore(_cf.db_Sys, true);

                // Write ReturnLog:
                _cf.ProcessBizReturn_OutSide(
                    ref mdsFinal // mdsFinal
                    , strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    );
                #endregion
            }
        }
        #endregion

        #region // Invoice_TempGroup:
        public DataSet Invoice_TempGroup_Create_New20190706(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            ////
            , object objInvoiceTGroupCode
            , object objMST
            , object objVATType
            , object objInvoiceTGroupName
            , object objInvoiceTGroupBody
            , object objFilePathThumbnail
            , object objSpec_Prd_Type
            //, object objFlagActive
            ////
            , DataSet dsData
            )
        {
            #region // Temp:
            DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            //int nTidSeq = 0;
            DateTime dtimeSys = DateTime.UtcNow;
            string strFunctionName = "Invoice_TempGroup_Create";
            string strErrorCodeDefault = TError.ErridnInventory.Invoice_TempGroup_Create;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
                ////
				, "objInvoiceTGroupCode", objInvoiceTGroupCode
                //, "objMST", objMST
                , "objVATType", objVATType
                , "objInvoiceTGroupName", objInvoiceTGroupName
                , "objInvoiceTGroupBody", objInvoiceTGroupBody
                , "objFilePathThumbnail", objFilePathThumbnail
                , "objSpec_Prd_Type", objSpec_Prd_Type
                });
            #endregion

            try
            {
                #region // Convert Input:
                #endregion

                #region // Init:
                //_cf.db.LogUserId = _cf.sinf.strUserCode;
                _cf.db.BeginTransaction();

                // Write RequestLog:
                _cf.ProcessBizReq_OutSide(
                    strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    , alParamsCoupleError // alParamsCoupleError
                    );

                // Sys_User_CheckAuthentication:
                //Sys_User_CheckAuthentication(
                //    ref alParamsCoupleError
                //    , strWAUserCode
                //    , strWAUserPassword
                //    );

                // Check Access/Deny:
                Sys_Access_CheckDenyV30(
                    ref alParamsCoupleError
                    , strWAUserCode
                    , strFunctionName
                    );
                #endregion

                #region // Convert Input:
                alParamsCoupleError.AddRange(new object[]{
                    "Check.dsData", TJson.JsonConvert.SerializeObject(dsData)
                    });
                #endregion

                #region // Refine and Check Input:
                ////
                string strInvoiceTGroupCode = TUtils.CUtils.StdParam(objInvoiceTGroupCode);
                string strMST = TUtils.CUtils.StdParam(objMST);
                string strVATType = TUtils.CUtils.StdParam(objVATType);
                string strInvoiceTGroupName = string.Format("{0}", objInvoiceTGroupName).Trim();
                string strInvoiceTGroupBody = string.Format("{0}", objInvoiceTGroupBody).Trim();
                string strFilePathThumbnail = string.Format("{0}", objFilePathThumbnail).Trim();
                string strSpec_Prd_Type = TUtils.CUtils.StdParam(objSpec_Prd_Type);

                // drAbilityOfUser:
                //DataRow drAbilityOfUser = Sys_User_GetAbilityViewOfUser(strWAUserCode);
                ////
                DataTable dtDB_Invoice_TempGroup = null;
                {
                    ////
                    if (strInvoiceTGroupCode == null || strInvoiceTGroupCode.Length < 1)
                    {
                        alParamsCoupleError.AddRange(new object[]{
                            "Check.strInvoiceTGroupCode", strInvoiceTGroupCode
                            });
                        throw CmUtils.CMyException.Raise(
                            TError.ErridnInventory.Invoice_TempGroup_Create_InvalidInvoiceTGroupCode
                            , null
                            , alParamsCoupleError.ToArray()
                            );
                    }
                    Invoice_TempGroup_CheckDB(
                        ref alParamsCoupleError // alParamsCoupleError
                        , strInvoiceTGroupCode // strInvoiceTGroupCode
                        , TConst.Flag.No // strFlagExistToCheck
                        , "" // strFlagActiveListToCheck
                        , out dtDB_Invoice_TempGroup // dtDB_Invoice_TempGroup
                        );
                    ////
                    DataTable dtDB_Mst_NNT = null;

                    Mst_NNT_CheckDB(
                        ref alParamsCoupleError // alParamsCoupleError
                        , strMST // objMST
                        , TConst.Flag.Yes // strFlagExistToCheck
                        , TConst.Flag.Active // strFlagActiveListToCheck
                        , "" // strTCTStatusListToCheck
                        , out dtDB_Mst_NNT // dtDB_Mst_NNT
                        );
                    ////
                    if (strVATType.Length < 1)
                    {
                        alParamsCoupleError.AddRange(new object[]{
                            "Check.strVATType", strVATType
                            });
                        throw CmUtils.CMyException.Raise(
                            TError.ErridnInventory.Invoice_TempGroup_Create_InvalidVATType
                            , null
                            , alParamsCoupleError.ToArray()
                            );
                    }
                    ////
                    if (strInvoiceTGroupName.Length < 1)
                    {
                        alParamsCoupleError.AddRange(new object[]{
                            "Check.strInvoiceTGroupName", strInvoiceTGroupName
                            });
                        throw CmUtils.CMyException.Raise(
                            TError.ErridnInventory.Invoice_TempGroup_Create_InvalidInvoiceTGroupName
                            , null
                            , alParamsCoupleError.ToArray()
                            );
                    }
                    ////
                    if (CmUtils.StringUtils.StringEqualIgnoreCase(strSpec_Prd_Type, TConst.Spec_Prd_Type.Spec)
                        && CmUtils.StringUtils.StringEqualIgnoreCase(strSpec_Prd_Type, TConst.Spec_Prd_Type.ProductId))
                    {
                        alParamsCoupleError.AddRange(new object[]{
                            "Check.strSpec_Prd_Type", strInvoiceTGroupName
                            , "Check.Expected", string.Format("{0}, {1}", TConst.Spec_Prd_Type.Spec, TConst.Spec_Prd_Type.ProductId).Trim()
                            });
                        throw CmUtils.CMyException.Raise(
                            TError.ErridnInventory.Invoice_TempGroup_Create_InvalidSpec_Prd_Type
                            , null
                            , alParamsCoupleError.ToArray()
                            );
                    }
                }
                #endregion

                #region // Refine and Check Invoice_TempGroupField:
                DataTable dtInput_Invoice_TempGroupField = null;
                {
                    ////
                    string strTableCheck = "Invoice_TempGroupField";
                    ////
                    if (!dsData.Tables.Contains(strTableCheck))
                    {
                        alParamsCoupleError.AddRange(new object[]{
                            "Check.TableName", strTableCheck
                            });
                        throw CmUtils.CMyException.Raise(
                            TError.ErridnInventory.Invoice_TempGroup_Create_TempGroupFieldNotFound
                            , null
                            , alParamsCoupleError.ToArray()
                            );
                    }
                    dtInput_Invoice_TempGroupField = dsData.Tables[strTableCheck];
                    ////
                    TUtils.CUtils.StdDataInTable(
                        dtInput_Invoice_TempGroupField // dtData
                        , "StdParam", "DBFieldName" // arrstrCouple
                        , "StdParam", "TCFType" // arrstrCouple
                        );
                    ////
                    TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_TempGroupField, "InvoiceTGroupCode", typeof(object));
                    TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_TempGroupField, "NetworkID", typeof(object));
                    TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_TempGroupField, "FlagActive", typeof(object));
                    TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_TempGroupField, "LogLUDTimeUTC", typeof(object));
                    TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_TempGroupField, "LogLUBy", typeof(object));
                    ////
                    for (int nScan = 0; nScan < dtInput_Invoice_TempGroupField.Rows.Count; nScan++)
                    {
                        ////
                        DataRow drScan = dtInput_Invoice_TempGroupField.Rows[nScan];

                        string strDBFieldName = TUtils.CUtils.StdParam(drScan["DBFieldName"]);
                        string strTCFType = string.Format("{0}", drScan["TCFType"]).Trim();

                        ////
                        if (strDBFieldName == null || strDBFieldName.Length < 1)
                        {
                            alParamsCoupleError.AddRange(new object[]{
                                "Check.strDBFieldName", strDBFieldName
                                });
                            throw CmUtils.CMyException.Raise(
                                TError.ErridnInventory.Invoice_TempGroup_Create_TempGroupFieldTbl_InvalidDBFieldName
                                , null
                                , alParamsCoupleError.ToArray()
                                );
                        }
                        ////
                        if (strTCFType == null || strTCFType.Length < 1)
                        {
                            alParamsCoupleError.AddRange(new object[]{
                                "Check.strTCFType", strTCFType
                                });
                            throw CmUtils.CMyException.Raise(
                                TError.ErridnInventory.Invoice_TempGroup_Create_TempGroupFieldTbl_InvalidTCFType
                                , null
                                , alParamsCoupleError.ToArray()
                                );
                        }
                        ////
                        drScan["InvoiceTGroupCode"] = strInvoiceTGroupCode;
                        drScan["DBFieldName"] = strDBFieldName;
                        drScan["NetworkID"] = nNetworkID;
                        drScan["TCFType"] = strTCFType;
                        drScan["FlagActive"] = TConst.Flag.Active;
                        drScan["LogLUDTimeUTC"] = dtimeSys.ToString("yyyy-MM-dd HH:mm:ss");
                        drScan["LogLUBy"] = strWAUserCode;


                    }
                }
                #endregion

                #region //// SaveTemp Invoice_TempCustomField:
                {
                    TUtils.CUtils.MyBuildDBDT_Common(
                        _cf.db
                        , "#input_Invoice_TempGroupField"
                        , new object[]{
                            "InvoiceTGroupCode", TConst.BizMix.Default_DBColType,
                            "DBFieldName", TConst.BizMix.Default_DBColType,
                            "NetworkID", TConst.BizMix.Default_DBColType,
                            "TCFType", TConst.BizMix.Default_DBColType,
                            "FlagActive", TConst.BizMix.Default_DBColType,
                            "LogLUDTimeUTC", TConst.BizMix.Default_DBColType,
                            "LogLUBy", TConst.BizMix.Default_DBColType,
                            }
                        , dtInput_Invoice_TempGroupField
                        );
                }
                #endregion

                #region // SaveDB Invoice_TempGroup:
                {
                    // Init:
                    //ArrayList alColumnEffective = new ArrayList();
                    string strFN = "";
                    DataRow drDB = dtDB_Invoice_TempGroup.NewRow();
                    strFN = "InvoiceTGroupCode"; drDB[strFN] = strInvoiceTGroupCode;
                    strFN = "NetworkID"; drDB[strFN] = nNetworkID;
                    strFN = "MST"; drDB[strFN] = strMST;
                    strFN = "VATType"; drDB[strFN] = strVATType;
                    strFN = "InvoiceTGroupName"; drDB[strFN] = strInvoiceTGroupName;
                    strFN = "InvoiceTGroupBody"; drDB[strFN] = strInvoiceTGroupBody;
                    strFN = "FilePathThumbnail"; drDB[strFN] = strFilePathThumbnail;
                    strFN = "Spec_Prd_Type"; drDB[strFN] = strSpec_Prd_Type;
                    strFN = "FlagActive"; drDB[strFN] = TConst.Flag.Active;
                    strFN = "LogLUDTimeUTC"; drDB[strFN] = dtimeSys.ToString("yyyy-MM-dd HH:mm:ss");
                    strFN = "LogLUBy"; drDB[strFN] = strWAUserCode;
                    dtDB_Invoice_TempGroup.Rows.Add(drDB);

                    // Save:
                    _cf.db.SaveData(
                        "Invoice_TempGroup"
                        , dtDB_Invoice_TempGroup
                        //, alColumnEffective.ToArray()
                        );
                }
                /////
                {
                    /////
                    string zzzzClauseInsert_Invoice_TempGroupField_zSave = CmUtils.StringUtils.Replace(@"
                                ---- Invoice_TempGroupField:  
                                insert into Invoice_TempGroupField(
	                                InvoiceTGroupCode
	                                , DBFieldName
	                                , NetworkID
	                                , TCFType
	                                , FlagActive
	                                , LogLUDTimeUTC
	                                , LogLUBy
                                )
                                select 
	                                t.InvoiceTGroupCode
	                                , t.DBFieldName
	                                , t.NetworkID
	                                , t.TCFType
	                                , t.FlagActive
	                                , t.LogLUDTimeUTC
	                                , t.LogLUBy
                                from #input_Invoice_TempGroupField t
                            ");

                    string strSqlExec = CmUtils.StringUtils.Replace(@"
								----
								zzzzClauseInsert_Invoice_TempGroupField_zSave
			
								----
							"
                        , "zzzzClauseInsert_Invoice_TempGroupField_zSave", zzzzClauseInsert_Invoice_TempGroupField_zSave
                        );
                    ////
                    DataSet dsExec = _cf.db.ExecQuery(strSqlExec);
                    ////

                }
                #endregion

                // Return Good:
                TDALUtils.DBUtils.CommitSafety(_cf.db);
                mdsFinal.AcceptChanges();
                return mdsFinal;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Rollback:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);

                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsFinal
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Rollback and Release resources:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);
                TDALUtils.DBUtils.ReleaseAllSemaphore(_cf.db_Sys, true);

                // Write ReturnLog:
                _cf.ProcessBizReturn_OutSide(
                    ref mdsFinal // mdsFinal
                    , strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    );
                #endregion
            }
        }
        public DataSet WAS_Invoice_TempGroup_Create_New20190706(
            ref ArrayList alParamsCoupleError
            , RQ_Invoice_TempGroup objRQ_Invoice_TempGroup
            ////
            , out RT_Invoice_TempGroup objRT_Invoice_TempGroup
            )
        {
            #region // Temp:
            string strTid = objRQ_Invoice_TempGroup.Tid;
            objRT_Invoice_TempGroup = new RT_Invoice_TempGroup();
            DataSet mdsResult = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            DateTime dtimeSys = DateTime.UtcNow;
            //DataSet mdsExec = null;
            //DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(objRQ_Invoice_TempGroup.Tid);
            //int nTidSeq = 0;
            //bool bNeedTransaction = true;
            string strFunctionName = "WAS_Invoice_TempGroup_Create";
            string strErrorCodeDefault = TError.ErridnInventory.WAS_Invoice_TempGroup_Create;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
                , "Invoice_TempGroup", TJson.JsonConvert.SerializeObject(objRQ_Invoice_TempGroup.Invoice_TempGroup)
				////
				});
            #endregion

            try
            {
                #region // Init:
                #endregion

                #region // Refine and Check Input:
                //List<Invoice_TempInvoice> lst_Invoice_TempInvoice = new List<Invoice_TempInvoice>();
                #endregion

                #region // Refine and Check Input:
                ////
                DataSet dsData = new DataSet();
                {
                    ////
                    DataTable dt_Invoice_TempCustomField = TUtils.DataTableCmUtils.ToDataTable<Invoice_TempGroupField>(objRQ_Invoice_TempGroup.Lst_Invoice_TempGroupField, "Invoice_TempGroupField");
                    dsData.Tables.Add(dt_Invoice_TempCustomField);

                }
                #endregion

                #region // Invoice_TempGroup_Create:
                mdsResult = Invoice_TempGroup_Create_New20190706(
                    objRQ_Invoice_TempGroup.Tid // strTid
                    , objRQ_Invoice_TempGroup.GwUserCode // strGwUserCode
                    , objRQ_Invoice_TempGroup.GwPassword // strGwPassword
                    , objRQ_Invoice_TempGroup.WAUserCode // strUserCode
                    , objRQ_Invoice_TempGroup.WAUserPassword // strUserPassword
                    , ref alParamsCoupleError // alParamsCoupleError
                                              ////
                    , objRQ_Invoice_TempGroup.Invoice_TempGroup.InvoiceTGroupCode // objInvoiceTGroupCode
                    , objRQ_Invoice_TempGroup.Invoice_TempGroup.MST // objMST
                    , objRQ_Invoice_TempGroup.Invoice_TempGroup.VATType // objVATType
                    , objRQ_Invoice_TempGroup.Invoice_TempGroup.InvoiceTGroupName // objInvoiceTGroupName
                    , objRQ_Invoice_TempGroup.Invoice_TempGroup.InvoiceTGroupBody // objInvoiceTGroupBody
                    , objRQ_Invoice_TempGroup.Invoice_TempGroup.FilePathThumbnail // objFilePathThumbnail
                    , objRQ_Invoice_TempGroup.Invoice_TempGroup.Spec_Prd_Type // objSpec_Prd_Type
                    , dsData
                    );
                #endregion

                // Return Good:
                return mdsResult;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsResult
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Write ReturnLog:
                //_cf.ProcessBizReturn(
                //	ref mdsResult // mdsFinal
                //	, strTid // strTid
                //	, strFunctionName // strFunctionName
                //	);
                #endregion
            }
        }

        public DataSet Invoice_TempGroup_Update_New20190706(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            ////
            , object objInvoiceTGroupCode
            //, object objMST
            , object objInvoiceTGroupName
            , object objInvoiceTGroupBody
            , object objFilePathThumbnail
            , object objSpec_Prd_Type
            , object objFlagActive
            ////
            , DataSet dsData
            ////
            , object objFt_Cols_Upd
            )
        {
            #region // Temp:
            DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            //int nTidSeq = 0;
            DateTime dtimeSys = DateTime.UtcNow;
            string strFunctionName = "Invoice_TempGroup_Update";
            string strErrorCodeDefault = TError.ErridnInventory.Invoice_TempGroup_Update;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
				, "objInvoiceTGroupCode", objInvoiceTGroupCode
                //, "objMST", objMST
                , "objInvoiceTGroupName", objInvoiceTGroupName
                , "objInvoiceTGroupBody", objInvoiceTGroupBody
                , "objFilePathThumbnail", objFilePathThumbnail
                , "objSpec_Prd_Type", objSpec_Prd_Type
                , "objFlagActive", objFlagActive
				////
				, "objFt_Cols_Upd", objFt_Cols_Upd
                });
            #endregion

            try
            {
                #region // Convert Input:
                #endregion

                #region // Init:
                //_cf.db.LogUserId = _cf.sinf.strUserCode;
                _cf.db.BeginTransaction();

                // Write RequestLog:
                _cf.ProcessBizReq_OutSide(
                    strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    , alParamsCoupleError // alParamsCoupleError
                    );

                // Sys_User_CheckAuthentication:
                //Sys_User_CheckAuthentication(
                //    ref alParamsCoupleError
                //    , strWAUserCode
                //    , strWAUserPassword
                //    );

                // Check Access/Deny:
                Sys_Access_CheckDenyV30(
                    ref alParamsCoupleError
                    , strWAUserCode
                    , strFunctionName
                    );
                #endregion

                #region // Convert Input:
                alParamsCoupleError.AddRange(new object[]{
                    "Check.dsData", TJson.JsonConvert.SerializeObject(dsData)
                    });
                #endregion

                #region // Refine and Check Input:
                ////
                string strFt_Cols_Upd = TUtils.CUtils.StdParam(objFt_Cols_Upd);
                strFt_Cols_Upd = (strFt_Cols_Upd == null ? "" : strFt_Cols_Upd);
                ////
                string strInvoiceTGroupCode = TUtils.CUtils.StdParam(objInvoiceTGroupCode);
                //string strMST = TUtils.CUtils.StdParam(objMST);
                string strInvoiceTGroupName = string.Format("{0}", objInvoiceTGroupName).Trim();
                string strInvoiceTGroupBody = string.Format("{0}", objInvoiceTGroupBody).Trim();
                string strFilePathThumbnail = string.Format("{0}", objFilePathThumbnail).Trim();
                string strSpec_Prd_Type = TUtils.CUtils.StdParam(objSpec_Prd_Type);
                string strFlagActive = TUtils.CUtils.StdFlag(objFlagActive);
                ////
                bool bUpd_InvoiceTGroupName = strFt_Cols_Upd.Contains("Invoice_TempGroup.InvoiceTGroupName".ToUpper());
                bool bUpd_InvoiceTGroupBody = strFt_Cols_Upd.Contains("Invoice_TempGroup.InvoiceTGroupBody".ToUpper());
                bool bUpd_FilePathThumbnail = strFt_Cols_Upd.Contains("Invoice_TempGroup.FilePathThumbnail".ToUpper());
                bool bUpd_Spec_Prd_Type = strFt_Cols_Upd.Contains("Invoice_TempGroup.Spec_Prd_Type".ToUpper());
                bool bUpd_FlagActive = strFt_Cols_Upd.Contains("Invoice_TempGroup.FlagActive".ToUpper());

                ////
                DataTable dtDB_Invoice_TempGroup = null;
                {
                    ////
                    Invoice_TempGroup_CheckDB(
                         ref alParamsCoupleError // alParamsCoupleError
                         , strInvoiceTGroupCode // objInvoiceTGroupCode 
                         , TConst.Flag.Yes // strFlagExistToCheck
                         , "" // strFlagActiveListToCheck
                         , out dtDB_Invoice_TempGroup // dtDB_Invoice_TempGroup
                        );
                    ////
                    if (bUpd_InvoiceTGroupName && string.IsNullOrEmpty(strInvoiceTGroupName))
                    {
                        alParamsCoupleError.AddRange(new object[]{
                            "Check.strInvoiceTGroupName", strInvoiceTGroupName
                            });
                        throw CmUtils.CMyException.Raise(
                            TError.ErridnInventory.Invoice_TempGroup_Update_InvalidProvinceName
                            , null
                            , alParamsCoupleError.ToArray()
                            );
                    }
                    ////
                    ////
                    if (CmUtils.StringUtils.StringEqualIgnoreCase(strSpec_Prd_Type, TConst.Spec_Prd_Type.Spec)
                        && CmUtils.StringUtils.StringEqualIgnoreCase(strSpec_Prd_Type, TConst.Spec_Prd_Type.ProductId))
                    {
                        alParamsCoupleError.AddRange(new object[]{
                            "Check.strSpec_Prd_Type", strInvoiceTGroupName
                            , "Check.Expected", string.Format("{0}, {1}", TConst.Spec_Prd_Type.Spec, TConst.Spec_Prd_Type.ProductId).Trim()
                            });
                        throw CmUtils.CMyException.Raise(
                            TError.ErridnInventory.Invoice_TempGroup_Update_InvalidSpec_Prd_Type
                            , null
                            , alParamsCoupleError.ToArray()
                            );
                    }
                }
                #endregion

                #region // Refine and Check Invoice_TempGroupField:
                DataTable dtInput_Invoice_TempGroupField = null;
                {
                    ////
                    string strTableCheck = "Invoice_TempGroupField";
                    ////
                    if (!dsData.Tables.Contains(strTableCheck))
                    {
                        alParamsCoupleError.AddRange(new object[]{
                            "Check.TableName", strTableCheck
                            });
                        throw CmUtils.CMyException.Raise(
                            TError.ErridnInventory.Invoice_TempGroup_Update_InvalidSpec_TempGroupFieldNotFound
                            , null
                            , alParamsCoupleError.ToArray()
                            );
                    }
                    dtInput_Invoice_TempGroupField = dsData.Tables[strTableCheck];
                    ////
                    TUtils.CUtils.StdDataInTable(
                        dtInput_Invoice_TempGroupField // dtData
                        , "StdParam", "DBFieldName" // arrstrCouple
                        , "StdParam", "TCFType" // arrstrCouple
                        );
                    ////
                    TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_TempGroupField, "InvoiceTGroupCode", typeof(object));
                    TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_TempGroupField, "NetworkID", typeof(object));
                    TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_TempGroupField, "FlagActive", typeof(object));
                    TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_TempGroupField, "LogLUDTimeUTC", typeof(object));
                    TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_TempGroupField, "LogLUBy", typeof(object));
                    ////
                    for (int nScan = 0; nScan < dtInput_Invoice_TempGroupField.Rows.Count; nScan++)
                    {
                        ////
                        DataRow drScan = dtInput_Invoice_TempGroupField.Rows[nScan];

                        string strDBFieldName = TUtils.CUtils.StdParam(drScan["DBFieldName"]);
                        string strTCFType = string.Format("{0}", drScan["TCFType"]).Trim();

                        ////
                        if (strDBFieldName == null || strDBFieldName.Length < 1)
                        {
                            alParamsCoupleError.AddRange(new object[]{
                                "Check.strDBFieldName", strDBFieldName
                                });
                            throw CmUtils.CMyException.Raise(
                                TError.ErridnInventory.Invoice_TempGroup_Update_TempGroupFieldTbl_InvalidDBFieldName
                                , null
                                , alParamsCoupleError.ToArray()
                                );
                        }
                        ////
                        if (strTCFType == null || strTCFType.Length < 1)
                        {
                            alParamsCoupleError.AddRange(new object[]{
                                "Check.strTCFType", strTCFType
                                });
                            throw CmUtils.CMyException.Raise(
                                TError.ErridnInventory.Invoice_TempGroup_Create_TempGroupFieldTbl_InvalidTCFType
                                , null
                                , alParamsCoupleError.ToArray()
                                );
                        }
                        ////
                        drScan["InvoiceTGroupCode"] = strInvoiceTGroupCode;
                        drScan["DBFieldName"] = strDBFieldName;
                        drScan["NetworkID"] = nNetworkID;
                        drScan["TCFType"] = strTCFType;
                        drScan["FlagActive"] = TConst.Flag.Active;
                        drScan["LogLUDTimeUTC"] = dtimeSys.ToString("yyyy-MM-dd HH:mm:ss");
                        drScan["LogLUBy"] = strWAUserCode;


                    }
                }
                #endregion

                #region //// SaveTemp Invoice_TempCustomField:
                {
                    TUtils.CUtils.MyBuildDBDT_Common(
                        _cf.db
                        , "#input_Invoice_TempGroupField"
                        , new object[]{
                            "InvoiceTGroupCode", TConst.BizMix.Default_DBColType,
                            "DBFieldName", TConst.BizMix.Default_DBColType,
                            "NetworkID", TConst.BizMix.Default_DBColType,
                            "TCFType", TConst.BizMix.Default_DBColType,
                            "FlagActive", TConst.BizMix.Default_DBColType,
                            "LogLUDTimeUTC", TConst.BizMix.Default_DBColType,
                            "LogLUBy", TConst.BizMix.Default_DBColType,
                            }
                        , dtInput_Invoice_TempGroupField
                        );
                }
                #endregion

                #region // SaveDB Invoice_TempGroup:
                {
                    // Init:
                    ArrayList alColumnEffective = new ArrayList();
                    string strFN = "";
                    DataRow drDB = dtDB_Invoice_TempGroup.Rows[0];
                    if (bUpd_InvoiceTGroupName) { strFN = "InvoiceTGroupName"; drDB[strFN] = strInvoiceTGroupName; alColumnEffective.Add(strFN); }
                    if (bUpd_InvoiceTGroupBody) { strFN = "InvoiceTGroupBody"; drDB[strFN] = strInvoiceTGroupBody; alColumnEffective.Add(strFN); }
                    if (bUpd_FilePathThumbnail) { strFN = "FilePathThumbnail"; drDB[strFN] = strFilePathThumbnail; alColumnEffective.Add(strFN); }
                    if (bUpd_Spec_Prd_Type) { strFN = "Spec_Prd_Type"; drDB[strFN] = strSpec_Prd_Type; alColumnEffective.Add(strFN); }
                    if (bUpd_FlagActive) { strFN = "FlagActive"; drDB[strFN] = strFlagActive; alColumnEffective.Add(strFN); }
                    strFN = "LogLUDTimeUTC"; drDB[strFN] = dtimeSys.ToString("yyyy-MM-dd HH:mm:ss"); alColumnEffective.Add(strFN);
                    strFN = "LogLUBy"; drDB[strFN] = strWAUserCode; alColumnEffective.Add(strFN);

                    // Save:
                    _cf.db.SaveData(
                        "Invoice_TempGroup"
                        , dtDB_Invoice_TempGroup
                        , alColumnEffective.ToArray()
                        );
                }
                //// Clear All:
                {
                    string strSqlDelete = CmUtils.StringUtils.Replace(@"
                            ---- #tbl_Invoice_TempGroupField:
                            select 
                                t.InvoiceTGroupCode
                                , t.DBFieldName
                            into #tbl_Invoice_TempGroupField
                            from Invoice_TempGroupField t --//[mylock]
                            where (1=1)
                                and t.InvoiceTGroupCode = '@strInvoiceTGroupCode'
                            ;

                            --- Delete:
                            ---- Invoice_TempGroupField:
                            delete t 
                            from Invoice_TempGroupField t --//[mylock]
	                            inner join #tbl_Invoice_TempGroupField f --//[mylock]
		                            on t.InvoiceTGroupCode = f.InvoiceTGroupCode
		                                and t.DBFieldName = f.DBFieldName
                            where (1=1)
                            ;

                            --- Clear For Debug:
                            drop table #tbl_Invoice_TempGroupField;
						"
                        , "@strInvoiceTGroupCode", strInvoiceTGroupCode
                        );
                    DataSet dtDB = _cf.db.ExecQuery(
                        strSqlDelete
                        );
                }
                /////
                {
                    /////
                    string zzzzClauseInsert_Invoice_TempGroupField_zSave = CmUtils.StringUtils.Replace(@"
                                ---- Invoice_TempGroupField:  
                                insert into Invoice_TempGroupField(
	                                InvoiceTGroupCode
	                                , DBFieldName
	                                , NetworkID
	                                , TCFType
	                                , FlagActive
	                                , LogLUDTimeUTC
	                                , LogLUBy
                                )
                                select 
	                                t.InvoiceTGroupCode
	                                , t.DBFieldName
	                                , t.NetworkID
	                                , t.TCFType
	                                , t.FlagActive
	                                , t.LogLUDTimeUTC
	                                , t.LogLUBy
                                from #input_Invoice_TempGroupField t
                            ");

                    string strSqlExec = CmUtils.StringUtils.Replace(@"
								----
								zzzzClauseInsert_Invoice_TempGroupField_zSave
			
								----
							"
                        , "zzzzClauseInsert_Invoice_TempGroupField_zSave", zzzzClauseInsert_Invoice_TempGroupField_zSave
                        );
                    ////
                    DataSet dsExec = _cf.db.ExecQuery(strSqlExec);
                    ////

                }
                #endregion

                // Return Good:
                TDALUtils.DBUtils.CommitSafety(_cf.db);
                mdsFinal.AcceptChanges();
                return mdsFinal;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Rollback:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);

                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsFinal
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Rollback and Release resources:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);
                TDALUtils.DBUtils.ReleaseAllSemaphore(_cf.db_Sys, true);

                // Write ReturnLog:
                _cf.ProcessBizReturn_OutSide(
                    ref mdsFinal // mdsFinal
                    , strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    );
                #endregion
            }
        }

        public DataSet WAS_Invoice_TempGroup_Update_New20190706(
            ref ArrayList alParamsCoupleError
            , RQ_Invoice_TempGroup objRQ_Invoice_TempGroup
            ////
            , out RT_Invoice_TempGroup objRT_Invoice_TempGroup
            )
        {
            #region // Temp:
            string strTid = objRQ_Invoice_TempGroup.Tid;
            objRT_Invoice_TempGroup = new RT_Invoice_TempGroup();
            DataSet mdsResult = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            DateTime dtimeSys = DateTime.UtcNow;
            //DataSet mdsExec = null;
            //DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(objRQ_Invoice_TempGroup.Tid);
            //int nTidSeq = 0;
            //bool bNeedTransaction = true;
            string strFunctionName = "WAS_Invoice_TempGroup_Update";
            string strErrorCodeDefault = TError.ErridnInventory.WAS_Invoice_TempGroup_Update;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
                , "Invoice_TempGroup", TJson.JsonConvert.SerializeObject(objRQ_Invoice_TempGroup.Invoice_TempGroup)
				////
				});
            #endregion

            try
            {
                #region // Init:
                #endregion

                #region // Refine and Check Input:
                //List<Invoice_TempGroup> lst_Invoice_TempGroup = new List<Invoice_TempGroup>();
                //List<Invoice_TempGroupInGroup> lst_Invoice_TempGroupInGroup = new List<Invoice_TempGroupInGroup>();
                #endregion

                #region // Refine and Check Input:
                ////
                DataSet dsData = new DataSet();
                {
                    ////
                    DataTable dt_Invoice_TempCustomField = TUtils.DataTableCmUtils.ToDataTable<Invoice_TempGroupField>(objRQ_Invoice_TempGroup.Lst_Invoice_TempGroupField, "Invoice_TempGroupField");
                    dsData.Tables.Add(dt_Invoice_TempCustomField);

                }
                #endregion

                #region // Invoice_TempGroup_Update:
                mdsResult = Invoice_TempGroup_Update_New20190706(
                    objRQ_Invoice_TempGroup.Tid // strTid
                    , objRQ_Invoice_TempGroup.GwUserCode // strGwUserCode
                    , objRQ_Invoice_TempGroup.GwPassword // strGwPassword
                    , objRQ_Invoice_TempGroup.WAUserCode // strUserCode
                    , objRQ_Invoice_TempGroup.WAUserPassword // strUserPassword
                    , ref alParamsCoupleError // alParamsCoupleError
                                              ////
                    , objRQ_Invoice_TempGroup.Invoice_TempGroup.InvoiceTGroupCode // objInvoiceTGroupCode
                    , objRQ_Invoice_TempGroup.Invoice_TempGroup.InvoiceTGroupName // objInvoiceTGroupName
                    , objRQ_Invoice_TempGroup.Invoice_TempGroup.InvoiceTGroupBody // objInvoiceTGroupBody
                    , objRQ_Invoice_TempGroup.Invoice_TempGroup.FilePathThumbnail // objFilePathThumbnail
                    , objRQ_Invoice_TempGroup.Invoice_TempGroup.Spec_Prd_Type // objSpec_Prd_Type
                    , objRQ_Invoice_TempGroup.Invoice_TempGroup.FlagActive // objFlagActive
                                                                           /////
                    , dsData // dsData
                             ////
                    , objRQ_Invoice_TempGroup.Ft_Cols_Upd// objFt_Cols_Upd
                    );
                #endregion

                // Return Good:
                return mdsResult;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsResult
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Write ReturnLog:
                //_cf.ProcessBizReturn(
                //	ref mdsResult // mdsFinal
                //	, strTid // strTid
                //	, strFunctionName // strFunctionName
                //	);
                #endregion
            }
        }

        public DataSet Invoice_TempGroup_Delete_New20190706(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            /////
            , object objInvoiceTGroupCode
            )
        {
            #region // Temp:
            DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            //int nTidSeq = 0;
            DateTime dtimeSys = DateTime.UtcNow;
            string strFunctionName = "Invoice_TempGroup_Delete";
            string strErrorCodeDefault = TError.ErridnInventory.Invoice_TempGroup_Delete;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
				, "objProvinceCode", objInvoiceTGroupCode
                });
            #endregion

            try
            {
                #region // Init:
                //_cf.db.LogUserId = _cf.sinf.strUserCode;
                _cf.db.BeginTransaction();

                // Write RequestLog:
                _cf.ProcessBizReq_OutSide(
                    strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    , alParamsCoupleError // alParamsCoupleError
                    );

                // Sys_User_CheckAuthentication:
                //Sys_User_CheckAuthentication(
                //    ref alParamsCoupleError
                //    , strWAUserCode
                //    , strWAUserPassword
                //    );

                // Check Access/Deny:
                Sys_Access_CheckDenyV30(
                    ref alParamsCoupleError
                    , strWAUserCode
                    , strFunctionName
                    );
                #endregion

                #region // Refine and Check Input:
                ////
                string strInvoiceTGroupCode = TUtils.CUtils.StdParam(objInvoiceTGroupCode);
                ////
                DataTable dtDB_Invoice_TempGroup = null;
                {
                    ////
                    Invoice_TempGroup_CheckDB(
                         ref alParamsCoupleError // alParamsCoupleError
                         , objInvoiceTGroupCode // objProvinceCode
                         , TConst.Flag.Yes // strFlagExistToCheck
                         , "" // strFlagActiveListToCheck
                         , out dtDB_Invoice_TempGroup // dtDB_Invoice_TempGroup
                        );
                    ////
                }
                #endregion

                #region // SaveDB Invoice_TempGroup:
                //// Clear All:
                {
                    string strSqlDelete = CmUtils.StringUtils.Replace(@"
                            ---- #tbl_Invoice_TempGroup:
                            select 
                                t.InvoiceTGroupCode
                            into #tbl_Invoice_TempGroup
                            from Invoice_TempGroup t --//[mylock]
                            where (1=1)
                                and t.InvoiceTGroupCode = '@strInvoiceTGroupCode'
                            ;

                            ---- #tbl_Invoice_TempGroupField:
                            select 
                                t.InvoiceTGroupCode
                                , t.DBFieldName
                            into #tbl_Invoice_TempGroupField
                            from Invoice_TempGroupField t --//[mylock]
                            where (1=1)
                                and t.InvoiceTGroupCode = '@strInvoiceTGroupCode'
                            ;

                            --- Delete:
                            ---- Invoice_TempGroupField:
                            delete t 
                            from Invoice_TempGroupField t --//[mylock]
	                            inner join #tbl_Invoice_TempGroupField f --//[mylock]
		                            on t.InvoiceTGroupCode = f.InvoiceTGroupCode
		                                and t.DBFieldName = f.DBFieldName
                            where (1=1)
                            ;

                            ---- Invoice_TempGroup:
                            delete t 
                            from Invoice_TempGroup t --//[mylock]
	                            inner join #tbl_Invoice_TempGroup f --//[mylock]
		                            on t.InvoiceTGroupCode = f.InvoiceTGroupCode
                            where (1=1)
                            ;

                            --- Clear For Debug:
                            drop table #tbl_Invoice_TempGroup;
                            drop table #tbl_Invoice_TempGroupField;
						"
                        , "@strInvoiceTGroupCode", strInvoiceTGroupCode
                        );
                    DataSet dtDB = _cf.db.ExecQuery(
                        strSqlDelete
                        );
                }
                /////
                //{
                //    // Init:
                //    dtDB_Invoice_TempGroup.Rows[0].Delete();

                //    // Save:
                //    _cf.db.SaveData(
                //        "Invoice_TempGroup"
                //        , dtDB_Invoice_TempGroup
                //        );
                //}
                #endregion

                // Return Good:
                TDALUtils.DBUtils.CommitSafety(_cf.db);
                mdsFinal.AcceptChanges();
                return mdsFinal;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Rollback:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);

                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsFinal
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Rollback and Release resources:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);
                TDALUtils.DBUtils.ReleaseAllSemaphore(_cf.db_Sys, true);

                // Write ReturnLog:
                _cf.ProcessBizReturn_OutSide(
                    ref mdsFinal // mdsFinal
                    , strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    );
                #endregion
            }
        }

        public DataSet WAS_Invoice_TempGroup_Delete_New20190706(
            ref ArrayList alParamsCoupleError
            , RQ_Invoice_TempGroup objRQ_Invoice_TempGroup
            ////
            , out RT_Invoice_TempGroup objRT_Invoice_TempGroup
            )
        {
            #region // Temp:
            string strTid = objRQ_Invoice_TempGroup.Tid;
            objRT_Invoice_TempGroup = new RT_Invoice_TempGroup();
            DataSet mdsResult = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            DateTime dtimeSys = DateTime.UtcNow;
            //DataSet mdsExec = null;
            //DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(objRQ_Invoice_TempGroup.Tid);
            //int nTidSeq = 0;
            //bool bNeedTransaction = true;
            string strFunctionName = "WAS_Invoice_TempGroup_Delete";
            string strErrorCodeDefault = TError.ErridnInventory.WAS_Invoice_TempGroup_Delete;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				//, "Invoice_TempGroup", TJson.JsonConvert.SerializeObject(objRQ_Invoice_TempGroup.Invoice_TempGroup)
				////
				});
            #endregion

            try
            {
                #region // Init:
                #endregion

                #region // Refine and Check Input:
                //List<Invoice_TempGroup> lst_Invoice_TempGroup = new List<Invoice_TempGroup>();
                //List<Invoice_TempGroupInGroup> lst_Invoice_TempGroupInGroup = new List<Invoice_TempGroupInGroup>();
                #endregion

                #region // Invoice_TempGroup_Delete:
                mdsResult = Invoice_TempGroup_Delete_New20190706(
                    objRQ_Invoice_TempGroup.Tid // strTid
                    , objRQ_Invoice_TempGroup.GwUserCode // strGwUserCode
                    , objRQ_Invoice_TempGroup.GwPassword // strGwPassword
                    , objRQ_Invoice_TempGroup.WAUserCode // strUserCode
                    , objRQ_Invoice_TempGroup.WAUserPassword // strUserPassword
                    , ref alParamsCoupleError // alParamsCoupleError
                                              ////
                    , objRQ_Invoice_TempGroup.Invoice_TempGroup.InvoiceTGroupCode // objInvoiceTGroupCode
                    );
                #endregion

                // Return Good:
                return mdsResult;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsResult
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Write ReturnLog:
                //_cf.ProcessBizReturn(
                //	ref mdsResult // mdsFinal
                //	, strTid // strTid
                //	, strFunctionName // strFunctionName
                //	);
                #endregion
            }
        }


        public DataSet Invoice_TempGroup_Get_New20190706(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            //// Filter:
            , string strFt_RecordStart
            , string strFt_RecordCount
            , string strFt_WhereClause
            //// Return:
            , string strRt_Cols_Invoice_TempGroup
            , string strRt_Cols_Invoice_TempGroupField
            )
        {
            #region // Temp:
            DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            //int nTidSeq = 0;
            DateTime dtimeSys = DateTime.UtcNow;
            bool bNeedTransaction = true;
            string strFunctionName = "Invoice_TempGroup_Get";
            string strErrorCodeDefault = TError.ErridnInventory.Invoice_TempGroup_Get;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				//// Filter
				, "strFt_RecordStart", strFt_RecordStart
                , "strFt_RecordCount", strFt_RecordCount
                , "strFt_WhereClause", strFt_WhereClause
				//// Return
				, "strRt_Cols_Invoice_TempGroup", strRt_Cols_Invoice_TempGroup
                , "strRt_Cols_Invoice_TempGroupField", strRt_Cols_Invoice_TempGroupField
                });
            #endregion

            try
            {
                #region // Init:
                //_cf.db.LogUserId = _cf.sinf.strUserCode;
                if (bNeedTransaction) _cf.db.BeginTransaction();

                // Write RequestLog:
                _cf.ProcessBizReq_OutSide(
                    strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    , alParamsCoupleError // alParamsCoupleError
                    );

                // Sys_User_CheckAuthentication:
                //Sys_User_CheckAuthentication(
                //    ref alParamsCoupleError
                //    , strWAUserCode
                //    , strWAUserPassword
                //    );

                // Check Access/Deny:
                Sys_Access_CheckDenyV30(
                    ref alParamsCoupleError
                    , strWAUserCode
                    , strFunctionName
                    );
                #endregion

                #region // Check:
                //// Refine:
                long nFilterRecordStart = Convert.ToInt64(strFt_RecordStart);
                long nFilterRecordEnd = nFilterRecordStart + Convert.ToInt64(strFt_RecordCount) - 1;
                bool bGet_Invoice_TempGroup = (strRt_Cols_Invoice_TempGroup != null && strRt_Cols_Invoice_TempGroup.Length > 0);
                bool bGet_Invoice_TempGroupField = (strRt_Cols_Invoice_TempGroupField != null && strRt_Cols_Invoice_TempGroupField.Length > 0);

                //// drAbilityOfUser:
                //DataRow drAbilityOfUser = myCache_ViewAbility_GetUserInfo(strWAUserCode);

                #endregion

                #region // Build Sql:
                ////
                ArrayList alParamsCoupleSql = new ArrayList();
                alParamsCoupleSql.AddRange(new object[] {
                    "@nFilterRecordStart", nFilterRecordStart
                    , "@nFilterRecordEnd", nFilterRecordEnd
                    });
                ////
                //myCache_ViewAbility_GetDealerInfo(drAbilityOfUser);
                ////
                string strSqlGetData = CmUtils.StringUtils.Replace(@"
						---- #tbl_Invoice_TempGroup_Filter_Draft:
						select distinct
							identity(bigint, 0, 1) MyIdxSeq
							, itgrp.InvoiceTGroupCode
						into #tbl_Invoice_TempGroup_Filter_Draft
						from Invoice_TempGroup itgrp --//[mylock]
						where (1=1)
							zzB_Where_strFilter_zzE
						order by itgrp.InvoiceTGroupCode asc
						;

						---- Summary:
						select Count(0) MyCount from #tbl_Invoice_TempGroup_Filter_Draft t --//[mylock]
						;

						---- #tbl_Invoice_TempGroup_Filter:
						select
							t.*
						into #tbl_Invoice_TempGroup_Filter
						from #tbl_Invoice_TempGroup_Filter_Draft t --//[mylock]
						where
							(t.MyIdxSeq >= @nFilterRecordStart)
							and (t.MyIdxSeq <= @nFilterRecordEnd)
						;

						-------- Invoice_TempGroup -------:
						zzB_Select_Invoice_TempGroup_zzE
						---------------------------------

						-------- Invoice_TempGroupField -------:
						zzB_Select_Invoice_TempGroupField_zzE
						---------------------------------------

						---- Clear for debug:
						--drop table #tbl_Invoice_TempGroup_Filter_Draft;
						--drop table #tbl_Invoice_TempGroup_Filter;
					"
                    );
                ////
                string zzB_Select_Invoice_TempGroup_zzE = "-- Nothing.";
                if (bGet_Invoice_TempGroup)
                {
                    #region // bGet_Invoice_TempGroup:
                    zzB_Select_Invoice_TempGroup_zzE = CmUtils.StringUtils.Replace(@"
							---- Invoice_TempGroup:
							select
								t.MyIdxSeq
								, itgrp.*
							from #tbl_Invoice_TempGroup_Filter t --//[mylock]
								inner join Invoice_TempGroup itgrp --//[mylock]
									on t.InvoiceTGroupCode = itgrp.InvoiceTGroupCode
							order by t.MyIdxSeq asc
							;
						"
                        );
                    #endregion
                }
                ////
                string zzB_Select_Invoice_TempGroupField_zzE = "-- Nothing.";
                if (bGet_Invoice_TempGroupField)
                {
                    #region // bGet_Invoice_TempGroupField:
                    zzB_Select_Invoice_TempGroupField_zzE = CmUtils.StringUtils.Replace(@"
							---- Invoice_TempGroupField:
							select
								t.MyIdxSeq
								, itgrpf.*
								, icf.InvoiceCustomFieldCode icf_InvoiceCustomFieldCode
								, icf.InvoiceCustomFieldName icf_InvoiceCustomFieldName
								, idcf.InvoiceDtlCustomFieldCode idcf_InvoiceDtlCustomFieldCode
								, idcf.InvoiceDtlCustomFieldName idcf_InvoiceDtlCustomFieldName
								, isnull (icf.DBPhysicalType, idcf.DBPhysicalType) DBPhysicalType
							from #tbl_Invoice_TempGroup_Filter t --//[mylock]
								inner join Invoice_TempGroupField itgrpf --//[mylock]
									on t.InvoiceTGroupCode = itgrpf.InvoiceTGroupCode
								left join Invoice_CustomField icf --//[mylock]
									on itgrpf.NetworkID = icf.OrgID
										and itgrpf.DBFieldName = icf.InvoiceCustomFieldCode
								left join Invoice_DtlCustomField idcf --//[mylock]
									on itgrpf.NetworkID = idcf.OrgID
										and itgrpf.DBFieldName = idcf.InvoiceDtlCustomFieldCode
							order by t.MyIdxSeq asc
							;
						"
                        );
                    #endregion
                }
                ////
                string zzB_Where_strFilter_zzE = "";
                {
                    Hashtable htSpCols = new Hashtable();
                    {
                        #region // htSpCols:
                        ////
                        TUtils.CUtils.MyBuildHTSupportedColumns(
                            _cf.db // db
                            , ref htSpCols // htSupportedColumns
                            , "Invoice_TempGroup" // strTableNameDB
                            , "Invoice_TempGroup." // strPrefixStd
                            , "itgrp." // strPrefixAlias
                            );
                        ////
                        #endregion
                    }
                    zzB_Where_strFilter_zzE = CmUtils.SqlUtils.BuildWhere(
                        htSpCols // htSpCols
                        , strFt_WhereClause // strClause
                        , "@p_" // strParamPrefix
                        , ref alParamsCoupleSql // alParamsCoupleSql
                        );
                    zzB_Where_strFilter_zzE = (zzB_Where_strFilter_zzE.Length <= 0 ? "" : string.Format(" and ({0})", zzB_Where_strFilter_zzE));
                    alParamsCoupleError.AddRange(new object[]{
                        "zzB_Where_strFilter_zzE", zzB_Where_strFilter_zzE
                        });
                }
                ////
                strSqlGetData = CmUtils.StringUtils.Replace(
                    strSqlGetData
                    , "zzB_Where_strFilter_zzE", zzB_Where_strFilter_zzE
                    , "zzB_Select_Invoice_TempGroup_zzE", zzB_Select_Invoice_TempGroup_zzE
                    , "zzB_Select_Invoice_TempGroupField_zzE", zzB_Select_Invoice_TempGroupField_zzE
                    );
                #endregion

                #region // Get Data:
                DataSet dsGetData = _cf.db.ExecQuery(
                    strSqlGetData
                    , alParamsCoupleSql.ToArray()
                    );
                int nIdxTable = 0;
                dsGetData.Tables[nIdxTable++].TableName = "MySummaryTable";
                if (bGet_Invoice_TempGroup)
                {
                    dsGetData.Tables[nIdxTable++].TableName = "Invoice_TempGroup";
                }
                if (bGet_Invoice_TempGroupField)
                {
                    dsGetData.Tables[nIdxTable++].TableName = "Invoice_TempGroupField";
                }
                CmUtils.DataUtils.MoveDataTable(ref mdsFinal, ref dsGetData);
                #endregion

                // Return Good:
                TDALUtils.DBUtils.RollbackSafety(_cf.db); // Always Rollback.
                mdsFinal.AcceptChanges();
                return mdsFinal;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Rollback:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);

                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsFinal
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Rollback and Release resources:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);
                TDALUtils.DBUtils.ReleaseAllSemaphore(_cf.db_Sys, true);

                // Write ReturnLog:
                _cf.ProcessBizReturn_OutSide(
                    ref mdsFinal // mdsFinal
                    , strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    );
                #endregion
            }
        }

        public DataSet WAS_Invoice_TempGroup_Get_New20190706(
            ref ArrayList alParamsCoupleError
            , RQ_Invoice_TempGroup objRQ_Invoice_TempGroup
            ////
            , out RT_Invoice_TempGroup objRT_Invoice_TempGroup
            )
        {
            #region // Temp:
            string strTid = objRQ_Invoice_TempGroup.Tid;
            objRT_Invoice_TempGroup = new RT_Invoice_TempGroup();
            DataSet mdsResult = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            DateTime dtimeSys = DateTime.UtcNow;
            //DataSet mdsExec = null;
            //DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(objRQ_Invoice_TempGroup.Tid);
            //int nTidSeq = 0;
            //bool bNeedTransaction = true;
            string strFunctionName = "WAS_Invoice_TempGroup_Get";
            string strErrorCodeDefault = TError.ErridnInventory.WAS_Invoice_TempGroup_Get;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
				});
            #endregion

            try
            {
                #region // Init:
                #endregion

                #region // Refine and Check Input:
                List<MySummaryTable> lst_MySummaryTable = new List<MySummaryTable>();

                List<Invoice_TempGroup> lst_Invoice_TempGroup = new List<Invoice_TempGroup>();
                bool bGet_Invoice_TempGroup = (objRQ_Invoice_TempGroup.Rt_Cols_Invoice_TempGroup != null && objRQ_Invoice_TempGroup.Rt_Cols_Invoice_TempGroup.Length > 0);

                List<Invoice_TempGroupField> lst_Invoice_TempGroupField = new List<Invoice_TempGroupField>();
                bool bGet_Invoice_TempGroupField = (objRQ_Invoice_TempGroup.Rt_Cols_Invoice_TempGroupField != null && objRQ_Invoice_TempGroup.Rt_Cols_Invoice_TempGroupField.Length > 0);
                #endregion

                #region // WS_Invoice_TempGroup_Get:
                mdsResult = Invoice_TempGroup_Get_New20190706(
                    objRQ_Invoice_TempGroup.Tid // strTid
                    , objRQ_Invoice_TempGroup.GwUserCode // strGwUserCode
                    , objRQ_Invoice_TempGroup.GwPassword // strGwPassword
                    , objRQ_Invoice_TempGroup.WAUserCode // strUserCode
                    , objRQ_Invoice_TempGroup.WAUserPassword // strUserPassword
                    , ref alParamsCoupleError // alParamsCoupleError
                                              //// Filter:
                    , objRQ_Invoice_TempGroup.Ft_RecordStart // strFt_RecordStart
                    , objRQ_Invoice_TempGroup.Ft_RecordCount // strFt_RecordCount
                    , objRQ_Invoice_TempGroup.Ft_WhereClause // strFt_WhereClause
                                                             //// Return:
                    , objRQ_Invoice_TempGroup.Rt_Cols_Invoice_TempGroup // strRt_Cols_Invoice_TempGroup
                    , objRQ_Invoice_TempGroup.Rt_Cols_Invoice_TempGroupField // strRt_Cols_Invoice_TempGroupField
                    );
                #endregion

                #region // GetData:
                if (!CmUtils.CMyDataSet.HasError(mdsResult))
                {
                    ////
                    if (bGet_Invoice_TempGroup)
                    {
                        ////
                        DataTable dt_MySummaryTable = mdsResult.Tables["MySummaryTable"].Copy();
                        lst_MySummaryTable = TUtils.DataTableCmUtils.ToListof<MySummaryTable>(dt_MySummaryTable);
                        objRT_Invoice_TempGroup.MySummaryTable = lst_MySummaryTable[0];

                        ////
                        DataTable dt_Invoice_TempGroup = mdsResult.Tables["Invoice_TempGroup"].Copy();
                        lst_Invoice_TempGroup = TUtils.DataTableCmUtils.ToListof<Invoice_TempGroup>(dt_Invoice_TempGroup);
                        objRT_Invoice_TempGroup.Lst_Invoice_TempGroup = lst_Invoice_TempGroup;
                    }

                    ////
                    if (bGet_Invoice_TempGroupField)
                    {
                        ////
                        DataTable dt_Invoice_TempGroupField = mdsResult.Tables["Invoice_TempGroupField"].Copy();
                        lst_Invoice_TempGroupField = TUtils.DataTableCmUtils.ToListof<Invoice_TempGroupField>(dt_Invoice_TempGroupField);
                        objRT_Invoice_TempGroup.Lst_Invoice_TempGroupField = lst_Invoice_TempGroupField;
                    }
                }
                #endregion

                // Return Good:
                return mdsResult;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsResult
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Write ReturnLog:
                //_cf.ProcessBizReturn(
                //	ref mdsResult // mdsFinal
                //	, strTid // strTid
                //	, strFunctionName // strFunctionName
                //	);
                #endregion
            }
        }
        #endregion

        #region // Call Đồng bộ Invoice_InvoiceInput:

        #endregion

        #region // OSDMS_Invoice_Invoice:
        public DataSet WAS_OSDMS_Invoice_Invoice_SaveAndAllocatedAndApprovedAndIssued(
           ref ArrayList alParamsCoupleError
           , RQ_Invoice_Invoice objRQ_Invoice_Invoice
           ////
           , out RT_Invoice_Invoice objRT_Invoice_Invoice
           )
        {
            #region // Temp:
            string strTid = objRQ_Invoice_Invoice.Tid;
            objRT_Invoice_Invoice = new RT_Invoice_Invoice();
            DataSet mdsResult = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            DateTime dtimeSys = DateTime.UtcNow;
            //DataSet mdsExec = null;
            //DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(objRQ_Invoice_Invoice.Tid);
            //int nTidSeq = 0;
            //bool bNeedTransaction = true;
            string strFunctionName = "WAS_OSDMS_Invoice_Invoice_SaveAndAllocatedAndApprovedAndIssued";
            string strErrorCodeDefault = TError.ErridnInventory.WAS_OSDMS_Invoice_Invoice_SaveAndAllocatedAndApprovedAndIssued;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
                , "FlagIsDelete", objRQ_Invoice_Invoice.FlagIsDelete
                , "Lst_Invoice_Invoice", TJson.JsonConvert.SerializeObject(objRQ_Invoice_Invoice.Lst_Invoice_Invoice)
                , "Lst_Invoice_InvoiceDtl", TJson.JsonConvert.SerializeObject(objRQ_Invoice_Invoice.Lst_Invoice_InvoiceDtl)
                });
            #endregion

            try
            {
                #region // Init:
                #endregion

                #region // Refine and Check Input:
                List<Invoice_Invoice> lst_Invoice_Invoice = new List<Invoice_Invoice>();
                #endregion

                #region // Refine and Check Input:
                ////
                DataSet dsData = new DataSet();
                {
                    ////
                    if (objRQ_Invoice_Invoice.Lst_Invoice_Invoice == null)
                        objRQ_Invoice_Invoice.Lst_Invoice_Invoice = new List<Invoice_Invoice>();
                    {
                        DataTable dt_Invoice_Invoice = TUtils.DataTableCmUtils.ToDataTable<Invoice_Invoice>(objRQ_Invoice_Invoice.Lst_Invoice_Invoice, "Invoice_Invoice");
                        dsData.Tables.Add(dt_Invoice_Invoice);
                    }

                    ////
                    if (objRQ_Invoice_Invoice.Lst_Invoice_InvoiceDtl == null)
                        objRQ_Invoice_Invoice.Lst_Invoice_InvoiceDtl = new List<Invoice_InvoiceDtl>();
                    {

                        DataTable dt_Invoice_InvoiceDtl = TUtils.DataTableCmUtils.ToDataTable<Invoice_InvoiceDtl>(objRQ_Invoice_Invoice.Lst_Invoice_InvoiceDtl, "Invoice_InvoiceDtl");
                        dsData.Tables.Add(dt_Invoice_InvoiceDtl);
                    }

                    ////
                    if (objRQ_Invoice_Invoice.Lst_Email_BatchSendEmailTo == null)
                        objRQ_Invoice_Invoice.Lst_Email_BatchSendEmailTo = new List<Email_BatchSendEmailTo>();
                    {
                        DataTable dt_Email_BatchSendEmailTo = TUtils.DataTableCmUtils.ToDataTable<Email_BatchSendEmailTo>(objRQ_Invoice_Invoice.Lst_Email_BatchSendEmailTo, "Email_BatchSendEmailTo");
                        dsData.Tables.Add(dt_Email_BatchSendEmailTo);
                    }
                    ////
                    if (objRQ_Invoice_Invoice.Lst_Email_BatchSendEmailCC == null)
                        objRQ_Invoice_Invoice.Lst_Email_BatchSendEmailCC = new List<Email_BatchSendEmailCC>();
                    {
                        DataTable dt_Email_BatchSendEmailCC = TUtils.DataTableCmUtils.ToDataTable<Email_BatchSendEmailCC>(objRQ_Invoice_Invoice.Lst_Email_BatchSendEmailCC, "Email_BatchSendEmailCC");
                        dsData.Tables.Add(dt_Email_BatchSendEmailCC);

                    }
                    ////
                    if (objRQ_Invoice_Invoice.Lst_Email_BatchSendEmailBCC == null)
                        objRQ_Invoice_Invoice.Lst_Email_BatchSendEmailBCC = new List<Email_BatchSendEmailBCC>();
                    {
                        DataTable dt_Email_BatchSendEmailBCC = TUtils.DataTableCmUtils.ToDataTable<Email_BatchSendEmailBCC>(objRQ_Invoice_Invoice.Lst_Email_BatchSendEmailBCC, "Email_BatchSendEmailBCC");
                        dsData.Tables.Add(dt_Email_BatchSendEmailBCC);

                    }
                    ////
                    if (objRQ_Invoice_Invoice.Lst_Email_BatchSendEmailFileAttach == null)
                        objRQ_Invoice_Invoice.Lst_Email_BatchSendEmailFileAttach = new List<Email_BatchSendEmailFileAttach>();
                    {
                        DataTable dt_Email_BatchSendEmailFileAttach = TUtils.DataTableCmUtils.ToDataTable<Email_BatchSendEmailFileAttach>(objRQ_Invoice_Invoice.Lst_Email_BatchSendEmailFileAttach, "Email_BatchSendEmailFileAttach");
                        dsData.Tables.Add(dt_Email_BatchSendEmailFileAttach);

                    }
                    ////
                    if (objRQ_Invoice_Invoice.Email_BatchSendEmail == null)
                        objRQ_Invoice_Invoice.Email_BatchSendEmail = new Email_BatchSendEmail();

                }
                #endregion

                #region // Refine and Check Input Mail:
                alParamsCoupleError.AddRange(new object[]{
                    "strFunctionName", strFunctionName
                    , "Lst_Email_BatchSendEmailTo", TJson.JsonConvert.SerializeObject(objRQ_Invoice_Invoice.Lst_Email_BatchSendEmailTo)
                    , "Lst_Email_BatchSendEmailCC", TJson.JsonConvert.SerializeObject(objRQ_Invoice_Invoice.Lst_Email_BatchSendEmailCC)
                    , "Lst_Email_BatchSendEmailBCC", TJson.JsonConvert.SerializeObject(objRQ_Invoice_Invoice.Lst_Email_BatchSendEmailBCC)
                    , "Lst_Email_BatchSendEmailFileAttach", TJson.JsonConvert.SerializeObject(objRQ_Invoice_Invoice.Lst_Email_BatchSendEmailFileAttach)
                    , "Email_BatchSendEmail", TJson.JsonConvert.SerializeObject(objRQ_Invoice_Invoice.Email_BatchSendEmail)
                    });
                #endregion

                #region // OSDMS_Invoice_Invoice_SaveAndAllocatedAndApprovedAndIssued:
                mdsResult = OSDMS_Invoice_Invoice_SaveAndAllocatedAndApprovedAndIssued(
                    objRQ_Invoice_Invoice.Tid // strTid
                    , objRQ_Invoice_Invoice.GwUserCode // strGwUserCode
                    , objRQ_Invoice_Invoice.GwPassword // strGwPassword
                    , objRQ_Invoice_Invoice.WAUserCode // strUserCode
                    , objRQ_Invoice_Invoice.WAUserPassword // strUserPassword
                    , ref alParamsCoupleError // alParamsCoupleError
                                              ////
                    , objRQ_Invoice_Invoice.FlagIsDelete // objFlagIsDelete
                                                         ////
                    , objRQ_Invoice_Invoice.Invoice_Invoice.InvoiceCode // objInvoiceCode
                    , objRQ_Invoice_Invoice.Invoice_Invoice.InvoiceDateUTC // objInvoiceDateUTC 
                                                                           //, objRQ_Invoice_Invoice.Invoice_Invoice.InvoiceFileSpec // objInvoiceFileSpec
                    , objRQ_Invoice_Invoice.Invoice_Invoice.InvoiceFilePath // objInvoiceFilePath
                    , objRQ_Invoice_Invoice.Invoice_Invoice.InvoicePDFFilePath // objInvoicePDFFilePath
                    , objRQ_Invoice_Invoice.Invoice_Invoice.EmailSend // objEmailSend
                    , objRQ_Invoice_Invoice.Invoice_Invoice.Remark // objRemark
                                                                   ////
                    , objRQ_Invoice_Invoice.Email_BatchSendEmail.Subject // objSubject						 
                    , objRQ_Invoice_Invoice.Email_BatchSendEmail.BodyText // objBodyText
                    , objRQ_Invoice_Invoice.Email_BatchSendEmail.BodyHTML // objBodyHTML
                                                                          ////
                    , dsData // dsData
                    );
                #endregion

                // Return Good:
                return mdsResult;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsResult
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Write ReturnLog:
                //_cf.ProcessBizReturn(
                //	ref mdsResult // mdsFinal
                //	, strTid // strTid
                //	, strFunctionName // strFunctionName
                //	);
                #endregion
            }
        }

        public DataSet OSDMS_Invoice_Invoice_SaveAndAllocatedAndApprovedAndIssued(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            ////
            , object objFlagIsDelete
            ////
            , object objInvoiceCode
            , object objInvoiceDateUTC
            //, object objInvoiceFileSpec
            , object objInvoiceFilePath
            , object objInvoicePDFFilePath
            , object objEmailSend
            , object objRemark
            ////
            , object objSubject
            , object objBodyText
            , object objBodyHTML
            , DataSet dsData
            )
        {
            #region // Temp:
            DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            //int nTidSeq = 0;
            DateTime dtimeSys = DateTime.UtcNow;
            string strFunctionName = "OSDMS_Invoice_Invoice_SaveAndAllocatedAndApprovedAndIssued";
            string strErrorCodeDefault = TError.ErridnInventory.OSDMS_Invoice_Invoice_SaveAndAllocatedAndApprovedAndIssued;
            alParamsCoupleError.AddRange(new object[]{
                    "strFunctionName", strFunctionName
                    , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
			        ////
					, "objInvoiceCode", objInvoiceCode
                    , "objInvoiceDateUTC", objInvoiceDateUTC
                    , "objInvoiceFilePath", objInvoiceFilePath
                    , "objInvoicePDFFilePath", objInvoicePDFFilePath
                    , "objEmailSend", objEmailSend
                    , "objRemark", objRemark
                    ////
                    , "objSubject", objSubject
                    , "objBodyText", objBodyText
                    , "objBodyHTML", objBodyHTML
                    });
            #endregion

            try
            {
                #region // Init:
                //_cf.db.LogUserId = _cf.sinf.strUserCode;
                _cf.db.BeginTransaction();

                // Write RequestLog:
                _cf.ProcessBizReq_OutSide(
                    strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    , alParamsCoupleError // alParamsCoupleError
                    );

                // Sys_User_CheckAuthentication:
                //Sys_User_CheckAuthentication(
                //    ref alParamsCoupleError
                //    , strWAUserCode
                //    , strWAUserPassword
                //    );

                // Check Access/Deny:
                Sys_Access_CheckDenyV30(
                    ref alParamsCoupleError
                    , strWAUserCode
                    , strFunctionName
                    );
                #endregion

                #region // Invoice_Invoice_SaveX:
                //DataSet dsGetData = null;
                {
                    Invoice_Invoice_SaveX_New20190802(
                        strTid // strTid
                        , strGwUserCode // strGwUserCode
                        , strGwPassword // strGwPassword
                        , strWAUserCode // strWAUserCode
                        , strWAUserPassword // strWAUserPassword
                        , ref alParamsCoupleError // alParamsCoupleError
                        , dtimeSys // dtimeSys
                                   ////
                        , objFlagIsDelete // objFlagIsDelete
                        , dsData // dsData
                        );
                }
                ////
                //CmUtils.DataUtils.MoveDataTable(ref mdsFinal, ref dsGetData);
                #endregion

                #region // Invoice_Invoice_AllocatedInvX:
                //DataSet dsGetData = null;
                {
                    Invoice_Invoice_AllocatedInvX(
                        strTid // strTid
                        , strGwUserCode // strGwUserCode
                        , strGwPassword // strGwPassword
                        , strWAUserCode // strWAUserCode
                        , strWAUserPassword // strWAUserPassword
                        , ref alParamsCoupleError // alParamsCoupleError
                        , dtimeSys // dtimeSys
                                   ////
                        , objInvoiceCode // objInvoiceCode
                        , objInvoiceDateUTC // objInvoiceDateUTC
                        );
                }
                ////
                //CmUtils.DataUtils.MoveDataTable(ref mdsFinal, ref dsGetData);
                #endregion

                #region // Invoice_Invoice_ApprovedX:
                //DataSet dsGetData = null;
                {
                    Invoice_Invoice_ApprovedX_New20190705(
                        strTid // strTid
                        , strGwUserCode // strGwUserCode
                        , strGwPassword // strGwPassword
                        , strWAUserCode // strWAUserCode
                        , strWAUserPassword // strWAUserPassword
                        , ref alParamsCoupleError // alParamsCoupleError
                        , dtimeSys // dtimeSys
                                   ////
                        , objInvoiceCode // objInvoiceCode
                                         //, objInvoiceFileSpec // objInvoiceFileSpec
                        , objInvoiceFilePath // objInvoiceFilePath
                        , objInvoicePDFFilePath // objInvoicePDFFilePath
                        , objRemark // objRemark
                        );
                }
                ////
                //CmUtils.DataUtils.MoveDataTable(ref mdsFinal, ref dsGetData);
                #endregion

                #region // Invoice_Invoice_IssuedX:
                //DataSet dsGetData = null;
                {
                    Invoice_Invoice_IssuedX_New20190705(
                        strTid // strTid
                        , strGwUserCode // strGwUserCode
                        , strGwPassword // strGwPassword
                        , strWAUserCode // strWAUserCode
                        , strWAUserPassword // strWAUserPassword
                        , ref alParamsCoupleError // alParamsCoupleError
                        , dtimeSys // dtimeSys
                                   ////
                        , objInvoiceCode // objInvoiceCode
                        , objEmailSend // objEmailSend
                        , objRemark // objRemark
                        );
                }
                ////
                //CmUtils.DataUtils.MoveDataTable(ref mdsFinal, ref dsGetData);
                #endregion

                #region // Email_BatchSendEmail_SaveAndSendX:
                {
                    Email_BatchSendEmail_SaveAndSendX(
                    strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // strWAUserCode
                    , strWAUserPassword // strWAUserPassword
                    , ref alParamsCoupleError // alParamsCoupleError
                    , dtimeSys // dtimeSys
                               ////
                    , objSubject // objSubject
                    , objBodyText // objBodyText
                    , objBodyHTML // objBodyHTML
                    , dsData // dsData
                    );
                }
                #endregion

                // Return Good:
                TDALUtils.DBUtils.CommitSafety(_cf.db);
                mdsFinal.AcceptChanges();
                return mdsFinal;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Rollback:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);

                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsFinal
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Rollback and Release resources:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);
                TDALUtils.DBUtils.ReleaseAllSemaphore(_cf.db_Sys, true);

                // Write ReturnLog:
                _cf.ProcessBizReturn_OutSide(
                    ref mdsFinal // mdsFinal
                    , strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    );
                #endregion
            }
        }
        public DataSet WAS_OSDMS_Invoice_Invoice_SaveReplaceAndAllocatedAndApprovedAndIssued(
           ref ArrayList alParamsCoupleError
           , RQ_Invoice_Invoice objRQ_Invoice_Invoice
           ////
           , out RT_Invoice_Invoice objRT_Invoice_Invoice
           )
        {
            #region // Temp:
            string strTid = objRQ_Invoice_Invoice.Tid;
            objRT_Invoice_Invoice = new RT_Invoice_Invoice();
            DataSet mdsResult = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            DateTime dtimeSys = DateTime.UtcNow;
            //DataSet mdsExec = null;
            //DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(objRQ_Invoice_Invoice.Tid);
            //int nTidSeq = 0;
            //bool bNeedTransaction = true;
            string strFunctionName = "WAS_OSDMS_Invoice_Invoice_SaveReplaceAndAllocatedAndApprovedAndIssued";
            string strErrorCodeDefault = TError.ErridnInventory.WAS_OSDMS_Invoice_Invoice_SaveReplaceAndAllocatedAndApprovedAndIssued;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
                , "FlagIsDelete", objRQ_Invoice_Invoice.FlagIsDelete
                , "Lst_Invoice_Invoice", TJson.JsonConvert.SerializeObject(objRQ_Invoice_Invoice.Lst_Invoice_Invoice)
                , "Lst_Invoice_InvoiceDtl", TJson.JsonConvert.SerializeObject(objRQ_Invoice_Invoice.Lst_Invoice_InvoiceDtl)
                });
            #endregion

            try
            {
                #region // Init:
                #endregion

                #region // Refine and Check Input:
                List<Invoice_Invoice> lst_Invoice_Invoice = new List<Invoice_Invoice>();
                #endregion

                #region // Refine and Check Input:
                ////
                DataSet dsData = new DataSet();
                {
                    ////
                    if (objRQ_Invoice_Invoice.Lst_Invoice_Invoice == null)
                        objRQ_Invoice_Invoice.Lst_Invoice_Invoice = new List<Invoice_Invoice>();
                    {
                        DataTable dt_Invoice_Invoice = TUtils.DataTableCmUtils.ToDataTable<Invoice_Invoice>(objRQ_Invoice_Invoice.Lst_Invoice_Invoice, "Invoice_Invoice");
                        dsData.Tables.Add(dt_Invoice_Invoice);
                    }

                    ////
                    if (objRQ_Invoice_Invoice.Lst_Invoice_InvoiceDtl == null)
                        objRQ_Invoice_Invoice.Lst_Invoice_InvoiceDtl = new List<Invoice_InvoiceDtl>();
                    {

                        DataTable dt_Invoice_InvoiceDtl = TUtils.DataTableCmUtils.ToDataTable<Invoice_InvoiceDtl>(objRQ_Invoice_Invoice.Lst_Invoice_InvoiceDtl, "Invoice_InvoiceDtl");
                        dsData.Tables.Add(dt_Invoice_InvoiceDtl);
                    }

                    ////
                    if (objRQ_Invoice_Invoice.Lst_Email_BatchSendEmailTo == null)
                        objRQ_Invoice_Invoice.Lst_Email_BatchSendEmailTo = new List<Email_BatchSendEmailTo>();
                    {
                        DataTable dt_Email_BatchSendEmailTo = TUtils.DataTableCmUtils.ToDataTable<Email_BatchSendEmailTo>(objRQ_Invoice_Invoice.Lst_Email_BatchSendEmailTo, "Email_BatchSendEmailTo");
                        dsData.Tables.Add(dt_Email_BatchSendEmailTo);
                    }
                    ////
                    if (objRQ_Invoice_Invoice.Lst_Email_BatchSendEmailCC == null)
                        objRQ_Invoice_Invoice.Lst_Email_BatchSendEmailCC = new List<Email_BatchSendEmailCC>();
                    {
                        DataTable dt_Email_BatchSendEmailCC = TUtils.DataTableCmUtils.ToDataTable<Email_BatchSendEmailCC>(objRQ_Invoice_Invoice.Lst_Email_BatchSendEmailCC, "Email_BatchSendEmailCC");
                        dsData.Tables.Add(dt_Email_BatchSendEmailCC);

                    }
                    ////
                    if (objRQ_Invoice_Invoice.Lst_Email_BatchSendEmailBCC == null)
                        objRQ_Invoice_Invoice.Lst_Email_BatchSendEmailBCC = new List<Email_BatchSendEmailBCC>();
                    {
                        DataTable dt_Email_BatchSendEmailBCC = TUtils.DataTableCmUtils.ToDataTable<Email_BatchSendEmailBCC>(objRQ_Invoice_Invoice.Lst_Email_BatchSendEmailBCC, "Email_BatchSendEmailBCC");
                        dsData.Tables.Add(dt_Email_BatchSendEmailBCC);

                    }
                    ////
                    if (objRQ_Invoice_Invoice.Lst_Email_BatchSendEmailFileAttach == null)
                        objRQ_Invoice_Invoice.Lst_Email_BatchSendEmailFileAttach = new List<Email_BatchSendEmailFileAttach>();
                    {
                        DataTable dt_Email_BatchSendEmailFileAttach = TUtils.DataTableCmUtils.ToDataTable<Email_BatchSendEmailFileAttach>(objRQ_Invoice_Invoice.Lst_Email_BatchSendEmailFileAttach, "Email_BatchSendEmailFileAttach");
                        dsData.Tables.Add(dt_Email_BatchSendEmailFileAttach);

                    }
                    ////
                    if (objRQ_Invoice_Invoice.Email_BatchSendEmail == null)
                        objRQ_Invoice_Invoice.Email_BatchSendEmail = new Email_BatchSendEmail();

                }
                #endregion

                #region // Refine and Check Input Mail:
                alParamsCoupleError.AddRange(new object[]{
                    "strFunctionName", strFunctionName
                    , "Lst_Email_BatchSendEmailTo", TJson.JsonConvert.SerializeObject(objRQ_Invoice_Invoice.Lst_Email_BatchSendEmailTo)
                    , "Lst_Email_BatchSendEmailCC", TJson.JsonConvert.SerializeObject(objRQ_Invoice_Invoice.Lst_Email_BatchSendEmailCC)
                    , "Lst_Email_BatchSendEmailBCC", TJson.JsonConvert.SerializeObject(objRQ_Invoice_Invoice.Lst_Email_BatchSendEmailBCC)
                    , "Lst_Email_BatchSendEmailFileAttach", TJson.JsonConvert.SerializeObject(objRQ_Invoice_Invoice.Lst_Email_BatchSendEmailFileAttach)
                    , "Email_BatchSendEmail", TJson.JsonConvert.SerializeObject(objRQ_Invoice_Invoice.Email_BatchSendEmail)
                    });
                #endregion

                #region // OSDMS_Invoice_Invoice_SaveReplaceAndAllocatedAndApprovedAndIssued:
                mdsResult = OSDMS_Invoice_Invoice_SaveReplaceAndAllocatedAndApprovedAndIssued(
                    objRQ_Invoice_Invoice.Tid // strTid
                    , objRQ_Invoice_Invoice.GwUserCode // strGwUserCode
                    , objRQ_Invoice_Invoice.GwPassword // strGwPassword
                    , objRQ_Invoice_Invoice.WAUserCode // strUserCode
                    , objRQ_Invoice_Invoice.WAUserPassword // strUserPassword
                    , ref alParamsCoupleError // alParamsCoupleError
                                              ////
                    , objRQ_Invoice_Invoice.FlagIsDelete // objFlagIsDelete
                                                         ////
                    , objRQ_Invoice_Invoice.Invoice_Invoice.InvoiceCode // objInvoiceCode
                    , objRQ_Invoice_Invoice.Invoice_Invoice.InvoiceDateUTC // objInvoiceDateUTC 
                                                                           //, objRQ_Invoice_Invoice.Invoice_Invoice.InvoiceFileSpec // objInvoiceFileSpec
                    , objRQ_Invoice_Invoice.Invoice_Invoice.InvoiceFilePath // objInvoiceFilePath
                    , objRQ_Invoice_Invoice.Invoice_Invoice.InvoicePDFFilePath // objInvoicePDFFilePath
                    , objRQ_Invoice_Invoice.Invoice_Invoice.EmailSend // objEmailSend
                    , objRQ_Invoice_Invoice.Invoice_Invoice.Remark // objRemark
                                                                   ////
                    , objRQ_Invoice_Invoice.Email_BatchSendEmail.Subject // objSubject						 
                    , objRQ_Invoice_Invoice.Email_BatchSendEmail.BodyText // objBodyText
                    , objRQ_Invoice_Invoice.Email_BatchSendEmail.BodyHTML // objBodyHTML
                                                                          ////
                    , dsData // dsData
                    );
                #endregion

                // Return Good:
                return mdsResult;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsResult
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Write ReturnLog:
                //_cf.ProcessBizReturn(
                //	ref mdsResult // mdsFinal
                //	, strTid // strTid
                //	, strFunctionName // strFunctionName
                //	);
                #endregion
            }
        }
        public DataSet OSDMS_Invoice_Invoice_SaveReplaceAndAllocatedAndApprovedAndIssued(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            ////
            , object objFlagIsDelete
            ////
            , object objInvoiceCode
            , object objInvoiceDateUTC
            //, object objInvoiceFileSpec
            , object objInvoiceFilePath
            , object objInvoicePDFFilePath
            , object objEmailSend
            , object objRemark
            ////
            , object objSubject
            , object objBodyText
            , object objBodyHTML
            , DataSet dsData
            )
        {
            #region // Temp:
            DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            //int nTidSeq = 0;
            DateTime dtimeSys = DateTime.UtcNow;
            string strFunctionName = "OSDMS_Invoice_Invoice_SaveReplaceAndAllocatedAndApprovedAndIssued";
            string strErrorCodeDefault = TError.ErridnInventory.OSDMS_Invoice_Invoice_SaveReplaceAndAllocatedAndApprovedAndIssued;
            alParamsCoupleError.AddRange(new object[]{
                    "strFunctionName", strFunctionName
                    , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
			        ////
					, "objInvoiceCode", objInvoiceCode
                    , "objInvoiceDateUTC", objInvoiceDateUTC
                    , "objInvoiceFilePath", objInvoiceFilePath
                    , "objInvoicePDFFilePath", objInvoicePDFFilePath
                    , "objEmailSend", objEmailSend
                    , "objRemark", objRemark
                    ////
                    , "objSubject", objSubject
                    , "objBodyText", objBodyText
                    , "objBodyHTML", objBodyHTML
                    });
            #endregion

            try
            {
                #region // Init:
                //_cf.db.LogUserId = _cf.sinf.strUserCode;
                _cf.db.BeginTransaction();

                // Write RequestLog:
                _cf.ProcessBizReq_OutSide(
                    strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    , alParamsCoupleError // alParamsCoupleError
                    );

                // Sys_User_CheckAuthentication:
                //Sys_User_CheckAuthentication(
                //    ref alParamsCoupleError
                //    , strWAUserCode
                //    , strWAUserPassword
                //    );

                // Check Access/Deny:
                Sys_Access_CheckDenyV30(
                    ref alParamsCoupleError
                    , strWAUserCode
                    , strFunctionName
                    );
                #endregion

                #region // Refine and check:
                ////
                bool bIsDelete = CmUtils.StringUtils.StringEqual(objFlagIsDelete, TConst.Flag.Yes);
                #endregion

                #region // Invoice_Invoice_SaveX:
                //DataSet dsGetData = null;
                {
                    Invoice_Invoice_SaveX_New20190802(
                        strTid // strTid
                        , strGwUserCode // strGwUserCode
                        , strGwPassword // strGwPassword
                        , strWAUserCode // strWAUserCode
                        , strWAUserPassword // strWAUserPassword
                        , ref alParamsCoupleError // alParamsCoupleError
                        , dtimeSys // dtimeSys
                                   ////
                        , objFlagIsDelete // objFlagIsDelete
                                          ////
                        , dsData // dsData
                        );
                }
                ////
                //CmUtils.DataUtils.MoveDataTable(ref mdsFinal, ref dsGetData);
                #endregion

                #region // Invoice_Invoice_DeletedX:
                if (!bIsDelete)
                {
                    /////
                    #region // Convert Input:
                    //DataSet dsData = TUtils.CUtils.StdDS(arrobjDSData);
                    //if (dsData == null) dsData = new DataSet("dsData");
                    //dsData.AcceptChanges();
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.dsData", CmUtils.XmlUtils.DataSet2XmlSimple(dsData)
                        });
                    #endregion

                    #region // Refine and Check Input Invoice_Invoice:
                    ////
                    DataTable dtInput_Invoice_Invoice = null;
                    {
                        ////
                        string strTableCheck = "Invoice_Invoice";
                        ////
                        if (!dsData.Tables.Contains(strTableCheck))
                        {
                            alParamsCoupleError.AddRange(new object[]{
                                "Check.TableName", strTableCheck
                                });
                            throw CmUtils.CMyException.Raise(
                                TError.ErridnInventory.Invoice_Invoice_SaveX_Input_InvoiceTblNotFound
                                , null
                                , alParamsCoupleError.ToArray()
                                );
                        }
                        dtInput_Invoice_Invoice = dsData.Tables[strTableCheck];
                        ////
                        if (dtInput_Invoice_Invoice.Rows.Count < 1)
                        {
                            alParamsCoupleError.AddRange(new object[]{
                                "Check.TableName", strTableCheck
                                });
                            throw CmUtils.CMyException.Raise(
                                TError.ErridnInventory.Invoice_Invoice_SaveX_Input_InvoiceTblInvalid
                                , null
                                , alParamsCoupleError.ToArray()
                                );
                        }
                        ////
                    }
                    /////
                    TUtils.CUtils.StdDataInTable(
                        dtInput_Invoice_Invoice // dtData
                        , "StdParam", "InvoiceCode" // arrstrCouple
                        , "StdParam", "RefNo" // arrstrCouple
                        , "StdParam", "InvoicePDFFilePath" // arrstrCouple
                        , "StdParam", "Remark" // arrstrCouple
                        , "", "AttachedDelFilePath" // arrstrCouple
                        , "", "DeleteReason" // arrstrCouple
                        );
                    ////
                    #endregion
                    ////
                    objInvoiceCode = dtInput_Invoice_Invoice.Rows[0]["InvoiceCode"];
                    object objRefNo = dtInput_Invoice_Invoice.Rows[0]["RefNo"];
                    objRemark = dtInput_Invoice_Invoice.Rows[0]["Remark"];
                    objInvoicePDFFilePath = dtInput_Invoice_Invoice.Rows[0]["InvoicePDFFilePath"];
                    object objAttachedDelFilePath = dtInput_Invoice_Invoice.Rows[0]["AttachedDelFilePath"];
                    object objDeleteReason = dtInput_Invoice_Invoice.Rows[0]["DeleteReason"];
                    ////
                    DataTable dtDB_Invoice_Invoice = null;

                    Invoice_Invoice_CheckDB(
                        ref alParamsCoupleError // alParamsCoupleError
                        , objRefNo // objInvoiceCode
                        , TConst.Flag.Yes // strFlagExistToCheck
                        , "" // strInvoiceStatusListToCheck
                        , out dtDB_Invoice_Invoice // dtDB_Invoice_Invoice
                        );

                    ////
                    if (!CmUtils.StringUtils.StringEqualIgnoreCase(dtDB_Invoice_Invoice.Rows[0]["InvoiceStatus"], TConst.InvoiceStatus.Deleted))
                    {
                        ///
                        #region // Invoice_Invoice_DeletedX_New20190715:
                        Invoice_Invoice_DeletedX_New20190715(
                            strTid // strTid
                            , strGwUserCode // strGwUserCode
                            , strGwPassword // strGwPassword
                            , strWAUserCode // strWAUserCode
                            , strWAUserPassword // strWAUserPassword
                            , ref alParamsCoupleError // alParamsCoupleError
                            , dtimeSys // dtimeSys
                                       ////
                            , objRefNo // objInvoiceCode
                            , objInvoicePDFFilePath // objInvoicePDFFilePath
                            , objAttachedDelFilePath // objAttachedDelFilePath
                            , objDeleteReason // objDeleteReason
                            , objRemark // objRemark
                            );
                        ////
                        #endregion
                        ///
                        #region // Email_BatchSendEmail_SaveAndSendX:
                        {
                            Email_BatchSendEmail_SaveAndSendX(
                                strTid // strTid
                                , strGwUserCode // strGwUserCode
                                , strGwPassword // strGwPassword
                                , strWAUserCode // strWAUserCode
                                , strWAUserPassword // strWAUserPassword
                                , ref alParamsCoupleError // alParamsCoupleError
                                , dtimeSys // dtimeSys
                                           ////
                                , objSubject // objSubject
                                , objBodyText // objBodyText
                                , objBodyHTML // objBodyHTML
                                , dsData // dsData
                                );
                        }
                        #endregion
                    }
                }
                ////
                //CmUtils.DataUtils.MoveDataTable(ref mdsFinal, ref dsGetData);
                #endregion

                #region // Invoice_Invoice_Save_Replace:
                //DataSet dsGetData = null;
                {
                    //Invoice_Invoice_Save_Replace_New20190705(
                    //    strTid // strTid
                    //    , strGwUserCode // strGwUserCode
                    //    , strGwPassword // strGwPassword
                    //    , strWAUserCode // strWAUserCode
                    //    , strWAUserPassword // strWAUserPassword
                    //    , ref alParamsCoupleError // alParamsCoupleError
                    //    //, dtimeSys // dtimeSys
                    //               ////
                    //    , objFlagIsDelete // objFlagIsDelete
                    //                      ////
                    //    , objSubject // objSubject						 
                    //    , objBodyText // objBodyText
                    //    , objBodyHTML // objBodyHTML
                    //    , dsData // dsData
                    //    );
                }
                ////
                //CmUtils.DataUtils.MoveDataTable(ref mdsFinal, ref dsGetData);
                #endregion

                #region // Invoice_Invoice_AllocatedInvX:
                //DataSet dsGetData = null;
                {
                    Invoice_Invoice_AllocatedInvX(
                        strTid // strTid
                        , strGwUserCode // strGwUserCode
                        , strGwPassword // strGwPassword
                        , strWAUserCode // strWAUserCode
                        , strWAUserPassword // strWAUserPassword
                        , ref alParamsCoupleError // alParamsCoupleError
                        , dtimeSys // dtimeSys
                                   ////
                        , objInvoiceCode // objInvoiceCode
                        , objInvoiceDateUTC // objInvoiceDateUTC
                        );
                }
                ////
                //CmUtils.DataUtils.MoveDataTable(ref mdsFinal, ref dsGetData);
                #endregion

                #region // Invoice_Invoice_ApprovedX:
                //DataSet dsGetData = null;
                {
                    Invoice_Invoice_ApprovedX_New20190705(
                        strTid // strTid
                        , strGwUserCode // strGwUserCode
                        , strGwPassword // strGwPassword
                        , strWAUserCode // strWAUserCode
                        , strWAUserPassword // strWAUserPassword
                        , ref alParamsCoupleError // alParamsCoupleError
                        , dtimeSys // dtimeSys
                                   ////
                        , objInvoiceCode // objInvoiceCode
                                         //, objInvoiceFileSpec // objInvoiceFileSpec
                        , objInvoiceFilePath // objInvoiceFilePath
                        , objInvoicePDFFilePath // objInvoicePDFFilePath
                        , objRemark // objRemark
                        );
                }
                ////
                //CmUtils.DataUtils.MoveDataTable(ref mdsFinal, ref dsGetData);
                #endregion

                #region // Invoice_Invoice_IssuedX:
                //DataSet dsGetData = null;
                {
                    Invoice_Invoice_IssuedX_New20190705(
                        strTid // strTid
                        , strGwUserCode // strGwUserCode
                        , strGwPassword // strGwPassword
                        , strWAUserCode // strWAUserCode
                        , strWAUserPassword // strWAUserPassword
                        , ref alParamsCoupleError // alParamsCoupleError
                        , dtimeSys // dtimeSys
                                   ////
                        , objInvoiceCode // objInvoiceCode
                        , objEmailSend // objEmailSend
                        , objRemark // objRemark
                        );
                }
                ////
                //CmUtils.DataUtils.MoveDataTable(ref mdsFinal, ref dsGetData);
                #endregion

                #region // Email_BatchSendEmail_SaveAndSendX:
                {
                    Email_BatchSendEmail_SaveAndSendX(
                    strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // strWAUserCode
                    , strWAUserPassword // strWAUserPassword
                    , ref alParamsCoupleError // alParamsCoupleError
                    , dtimeSys // dtimeSys
                               ////
                    , objSubject // objSubject
                    , objBodyText // objBodyText
                    , objBodyHTML // objBodyHTML
                    , dsData // dsData
                    );
                }
                #endregion

                // Return Good:
                TDALUtils.DBUtils.CommitSafety(_cf.db);
                mdsFinal.AcceptChanges();
                return mdsFinal;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Rollback:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);

                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsFinal
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Rollback and Release resources:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);
                TDALUtils.DBUtils.ReleaseAllSemaphore(_cf.db_Sys, true);

                // Write ReturnLog:
                _cf.ProcessBizReturn_OutSide(
                    ref mdsFinal // mdsFinal
                    , strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    );
                #endregion
            }
        }

        public DataSet WAS_OSDMS_Invoice_Invoice_SaveAdjAndAllocatedAndApprovedAndIssued(
           ref ArrayList alParamsCoupleError
           , RQ_Invoice_Invoice objRQ_Invoice_Invoice
           ////
           , out RT_Invoice_Invoice objRT_Invoice_Invoice
           )
        {
            #region // Temp:
            string strTid = objRQ_Invoice_Invoice.Tid;
            objRT_Invoice_Invoice = new RT_Invoice_Invoice();
            DataSet mdsResult = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            DateTime dtimeSys = DateTime.UtcNow;
            //DataSet mdsExec = null;
            //DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(objRQ_Invoice_Invoice.Tid);
            //int nTidSeq = 0;
            //bool bNeedTransaction = true;
            string strFunctionName = "WAS_OSDMS_Invoice_Invoice_SaveAdjAndAllocatedAndApprovedAndIssued";
            string strErrorCodeDefault = TError.ErridnInventory.WAS_OSDMS_Invoice_Invoice_SaveAdjAndAllocatedAndApprovedAndIssued;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
                , "FlagIsDelete", objRQ_Invoice_Invoice.FlagIsDelete
                , "Lst_Invoice_Invoice", TJson.JsonConvert.SerializeObject(objRQ_Invoice_Invoice.Lst_Invoice_Invoice)
                , "Lst_Invoice_InvoiceDtl", TJson.JsonConvert.SerializeObject(objRQ_Invoice_Invoice.Lst_Invoice_InvoiceDtl)
                });
            #endregion

            try
            {
                #region // Init:
                #endregion

                #region // Refine and Check Input:
                List<Invoice_Invoice> lst_Invoice_Invoice = new List<Invoice_Invoice>();
                #endregion

                #region // Refine and Check Input:
                ////
                DataSet dsData = new DataSet();
                {
                    ////
                    if (objRQ_Invoice_Invoice.Lst_Invoice_Invoice == null)
                        objRQ_Invoice_Invoice.Lst_Invoice_Invoice = new List<Invoice_Invoice>();
                    {
                        DataTable dt_Invoice_Invoice = TUtils.DataTableCmUtils.ToDataTable<Invoice_Invoice>(objRQ_Invoice_Invoice.Lst_Invoice_Invoice, "Invoice_Invoice");
                        dsData.Tables.Add(dt_Invoice_Invoice);
                    }

                    ////
                    if (objRQ_Invoice_Invoice.Lst_Invoice_InvoiceDtl == null)
                        objRQ_Invoice_Invoice.Lst_Invoice_InvoiceDtl = new List<Invoice_InvoiceDtl>();
                    {

                        DataTable dt_Invoice_InvoiceDtl = TUtils.DataTableCmUtils.ToDataTable<Invoice_InvoiceDtl>(objRQ_Invoice_Invoice.Lst_Invoice_InvoiceDtl, "Invoice_InvoiceDtl");
                        dsData.Tables.Add(dt_Invoice_InvoiceDtl);
                    }

                    ////
                    if (objRQ_Invoice_Invoice.Lst_Email_BatchSendEmailTo == null)
                        objRQ_Invoice_Invoice.Lst_Email_BatchSendEmailTo = new List<Email_BatchSendEmailTo>();
                    {
                        DataTable dt_Email_BatchSendEmailTo = TUtils.DataTableCmUtils.ToDataTable<Email_BatchSendEmailTo>(objRQ_Invoice_Invoice.Lst_Email_BatchSendEmailTo, "Email_BatchSendEmailTo");
                        dsData.Tables.Add(dt_Email_BatchSendEmailTo);
                    }
                    ////
                    if (objRQ_Invoice_Invoice.Lst_Email_BatchSendEmailCC == null)
                        objRQ_Invoice_Invoice.Lst_Email_BatchSendEmailCC = new List<Email_BatchSendEmailCC>();
                    {
                        DataTable dt_Email_BatchSendEmailCC = TUtils.DataTableCmUtils.ToDataTable<Email_BatchSendEmailCC>(objRQ_Invoice_Invoice.Lst_Email_BatchSendEmailCC, "Email_BatchSendEmailCC");
                        dsData.Tables.Add(dt_Email_BatchSendEmailCC);

                    }
                    ////
                    if (objRQ_Invoice_Invoice.Lst_Email_BatchSendEmailBCC == null)
                        objRQ_Invoice_Invoice.Lst_Email_BatchSendEmailBCC = new List<Email_BatchSendEmailBCC>();
                    {
                        DataTable dt_Email_BatchSendEmailBCC = TUtils.DataTableCmUtils.ToDataTable<Email_BatchSendEmailBCC>(objRQ_Invoice_Invoice.Lst_Email_BatchSendEmailBCC, "Email_BatchSendEmailBCC");
                        dsData.Tables.Add(dt_Email_BatchSendEmailBCC);

                    }
                    ////
                    if (objRQ_Invoice_Invoice.Lst_Email_BatchSendEmailFileAttach == null)
                        objRQ_Invoice_Invoice.Lst_Email_BatchSendEmailFileAttach = new List<Email_BatchSendEmailFileAttach>();
                    {
                        DataTable dt_Email_BatchSendEmailFileAttach = TUtils.DataTableCmUtils.ToDataTable<Email_BatchSendEmailFileAttach>(objRQ_Invoice_Invoice.Lst_Email_BatchSendEmailFileAttach, "Email_BatchSendEmailFileAttach");
                        dsData.Tables.Add(dt_Email_BatchSendEmailFileAttach);

                    }
                    ////
                    if (objRQ_Invoice_Invoice.Email_BatchSendEmail == null)
                        objRQ_Invoice_Invoice.Email_BatchSendEmail = new Email_BatchSendEmail();

                }
                #endregion

                #region // Refine and Check Input Mail:
                alParamsCoupleError.AddRange(new object[]{
                    "strFunctionName", strFunctionName
                    , "Lst_Email_BatchSendEmailTo", TJson.JsonConvert.SerializeObject(objRQ_Invoice_Invoice.Lst_Email_BatchSendEmailTo)
                    , "Lst_Email_BatchSendEmailCC", TJson.JsonConvert.SerializeObject(objRQ_Invoice_Invoice.Lst_Email_BatchSendEmailCC)
                    , "Lst_Email_BatchSendEmailBCC", TJson.JsonConvert.SerializeObject(objRQ_Invoice_Invoice.Lst_Email_BatchSendEmailBCC)
                    , "Lst_Email_BatchSendEmailFileAttach", TJson.JsonConvert.SerializeObject(objRQ_Invoice_Invoice.Lst_Email_BatchSendEmailFileAttach)
                    , "Email_BatchSendEmail", TJson.JsonConvert.SerializeObject(objRQ_Invoice_Invoice.Email_BatchSendEmail)
                    });
                #endregion

                #region // OSDMS_Invoice_Invoice_SaveAdjAndAllocatedAndApprovedAndIssued:
                mdsResult = OSDMS_Invoice_Invoice_SaveAdjAndAllocatedAndApprovedAndIssued(
                    objRQ_Invoice_Invoice.Tid // strTid
                    , objRQ_Invoice_Invoice.GwUserCode // strGwUserCode
                    , objRQ_Invoice_Invoice.GwPassword // strGwPassword
                    , objRQ_Invoice_Invoice.WAUserCode // strUserCode
                    , objRQ_Invoice_Invoice.WAUserPassword // strUserPassword
                    , ref alParamsCoupleError // alParamsCoupleError
                                              ////
                    , objRQ_Invoice_Invoice.FlagIsDelete // objFlagIsDelete
                                                         ////
                    , objRQ_Invoice_Invoice.Invoice_Invoice.InvoiceCode // objInvoiceCode
                    , objRQ_Invoice_Invoice.Invoice_Invoice.InvoiceDateUTC // objInvoiceDateUTC 
                                                                           //, objRQ_Invoice_Invoice.Invoice_Invoice.InvoiceFileSpec // objInvoiceFileSpec
                    , objRQ_Invoice_Invoice.Invoice_Invoice.InvoiceFilePath // objInvoiceFilePath
                    , objRQ_Invoice_Invoice.Invoice_Invoice.InvoicePDFFilePath // objInvoicePDFFilePath
                    , objRQ_Invoice_Invoice.Invoice_Invoice.EmailSend // objEmailSend
                    , objRQ_Invoice_Invoice.Invoice_Invoice.Remark // objRemark
                                                                   ////
                    , objRQ_Invoice_Invoice.Email_BatchSendEmail.Subject // objSubject						 
                    , objRQ_Invoice_Invoice.Email_BatchSendEmail.BodyText // objBodyText
                    , objRQ_Invoice_Invoice.Email_BatchSendEmail.BodyHTML // objBodyHTML
                                                                          ////
                    , dsData // dsData
                    );
                #endregion

                // Return Good:
                return mdsResult;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsResult
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Write ReturnLog:
                //_cf.ProcessBizReturn(
                //	ref mdsResult // mdsFinal
                //	, strTid // strTid
                //	, strFunctionName // strFunctionName
                //	);
                #endregion
            }
        }
        public DataSet OSDMS_Invoice_Invoice_SaveAdjAndAllocatedAndApprovedAndIssued(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            ////
            , object objFlagIsDelete
            ////
            , object objInvoiceCode
            , object objInvoiceDateUTC
            //, object objInvoiceFileSpec
            , object objInvoiceFilePath
            , object objInvoicePDFFilePath
            , object objEmailSend
            , object objRemark
            ////
            , object objSubject
            , object objBodyText
            , object objBodyHTML
            , DataSet dsData
            )
        {
            #region // Temp:
            DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            //int nTidSeq = 0;
            DateTime dtimeSys = DateTime.UtcNow;
            string strFunctionName = "OSDMS_Invoice_Invoice_SaveAdjAndAllocatedAndApprovedAndIssued";
            string strErrorCodeDefault = TError.ErridnInventory.OSDMS_Invoice_Invoice_SaveAdjAndAllocatedAndApprovedAndIssued;
            alParamsCoupleError.AddRange(new object[]{
                    "strFunctionName", strFunctionName
                    , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
			        ////
					, "objInvoiceCode", objInvoiceCode
                    , "objInvoiceDateUTC", objInvoiceDateUTC
                    , "objInvoiceFilePath", objInvoiceFilePath
                    , "objInvoicePDFFilePath", objInvoicePDFFilePath
                    , "objEmailSend", objEmailSend
                    , "objRemark", objRemark
                    ////
                    , "objSubject", objSubject
                    , "objBodyText", objBodyText
                    , "objBodyHTML", objBodyHTML
                    });
            #endregion

            try
            {
                #region // Init:
                //_cf.db.LogUserId = _cf.sinf.strUserCode;
                _cf.db.BeginTransaction();

                // Write RequestLog:
                _cf.ProcessBizReq_OutSide(
                    strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    , alParamsCoupleError // alParamsCoupleError
                    );

                // Sys_User_CheckAuthentication:
                //Sys_User_CheckAuthentication(
                //    ref alParamsCoupleError
                //    , strWAUserCode
                //    , strWAUserPassword
                //    );

                // Check Access/Deny:
                Sys_Access_CheckDenyV30(
                    ref alParamsCoupleError
                    , strWAUserCode
                    , strFunctionName
                    );
                #endregion

                #region // Refine and check:
                ////
                bool bIsDelete = CmUtils.StringUtils.StringEqual(objFlagIsDelete, TConst.Flag.Yes);
                #endregion

                #region // Refine and check:
                DataTable dtDB_Invoice_Invoice_Root = null;
                if (!bIsDelete)
                {
                    /////
                    #region // Convert Input:
                    //DataSet dsData = TUtils.CUtils.StdDS(arrobjDSData);
                    //if (dsData == null) dsData = new DataSet("dsData");
                    //dsData.AcceptChanges();
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.dsData", CmUtils.XmlUtils.DataSet2XmlSimple(dsData)
                        });
                    #endregion

                    #region // Refine and Check Input Invoice_Invoice:
                    ////
                    DataTable dtInput_Invoice_Invoice = null;
                    {
                        ////
                        string strTableCheck = "Invoice_Invoice";
                        ////
                        if (!dsData.Tables.Contains(strTableCheck))
                        {
                            alParamsCoupleError.AddRange(new object[]{
                                "Check.TableName", strTableCheck
                                });
                            throw CmUtils.CMyException.Raise(
                                TError.ErridnInventory.Invoice_Invoice_SaveX_Input_InvoiceTblNotFound
                                , null
                                , alParamsCoupleError.ToArray()
                                );
                        }
                        dtInput_Invoice_Invoice = dsData.Tables[strTableCheck];
                        ////
                        if (dtInput_Invoice_Invoice.Rows.Count < 1)
                        {
                            alParamsCoupleError.AddRange(new object[]{
                                "Check.TableName", strTableCheck
                                });
                            throw CmUtils.CMyException.Raise(
                                TError.ErridnInventory.Invoice_Invoice_SaveX_Input_InvoiceTblInvalid
                                , null
                                , alParamsCoupleError.ToArray()
                                );
                        }
                        ////
                    }
                    /////
                    TUtils.CUtils.StdDataInTable(
                        dtInput_Invoice_Invoice // dtData
                        , "StdParam", "InvoiceCode" // arrstrCouple
                        , "StdParam", "RefNo" // arrstrCouple
                        , "", "AttachedDelFilePath" // arrstrCouple
                        , "", "DeleteReason" // arrstrCouple
                        );
                    ////
                    #endregion
                    ////
                    objInvoiceCode = dtInput_Invoice_Invoice.Rows[0]["InvoiceCode"];
                    object objRefNo = dtInput_Invoice_Invoice.Rows[0]["RefNo"];
                    object objAttachedDelFilePath = dtInput_Invoice_Invoice.Rows[0]["AttachedDelFilePath"];
                    object objDeleteReason = dtInput_Invoice_Invoice.Rows[0]["DeleteReason"];

                    string strDeleteReason = Convert.ToString(objDeleteReason);
                    ////
                    Invoice_Invoice_CheckDB(
                        ref alParamsCoupleError // alParamsCoupleError
                        , objInvoiceCode // objInvoiceCode
                        , "" // strFlagExistToCheck
                        , "" // strInvoiceStatusListToCheck
                        , out dtDB_Invoice_Invoice_Root // dtDB_Invoice_Invoice
                        );
                    ////
                }
                ////
                //CmUtils.DataUtils.MoveDataTable(ref mdsFinal, ref dsGetData);
                #endregion

                #region // Invoice_Invoice_SaveX:
                //DataSet dsGetData = null;
                {
                    Invoice_Invoice_SaveX_New20190802(
                        strTid // strTid
                        , strGwUserCode // strGwUserCode
                        , strGwPassword // strGwPassword
                        , strWAUserCode // strWAUserCode
                        , strWAUserPassword // strWAUserPassword
                        , ref alParamsCoupleError // alParamsCoupleError
                        , dtimeSys // dtimeSys
                                   ////
                        , objFlagIsDelete // objFlagIsDelete
                                          ////
                        , dsData // dsData
                        );
                }
                ////
                //CmUtils.DataUtils.MoveDataTable(ref mdsFinal, ref dsGetData);
                #endregion

                #region // Invoice_Invoice_AdjX:
                if (!bIsDelete)
                {
                    /////
                    #region // Convert Input:
                    //DataSet dsData = TUtils.CUtils.StdDS(arrobjDSData);
                    //if (dsData == null) dsData = new DataSet("dsData");
                    //dsData.AcceptChanges();
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.dsData", CmUtils.XmlUtils.DataSet2XmlSimple(dsData)
                        });
                    #endregion

                    #region // Refine and Check Input Invoice_Invoice:
                    ////
                    DataTable dtInput_Invoice_Invoice = null;
                    {
                        ////
                        string strTableCheck = "Invoice_Invoice";
                        ////
                        if (!dsData.Tables.Contains(strTableCheck))
                        {
                            alParamsCoupleError.AddRange(new object[]{
                                "Check.TableName", strTableCheck
                                });
                            throw CmUtils.CMyException.Raise(
                                TError.ErridnInventory.Invoice_Invoice_SaveX_Input_InvoiceTblNotFound
                                , null
                                , alParamsCoupleError.ToArray()
                                );
                        }
                        dtInput_Invoice_Invoice = dsData.Tables[strTableCheck];
                        ////
                        if (dtInput_Invoice_Invoice.Rows.Count < 1)
                        {
                            alParamsCoupleError.AddRange(new object[]{
                                "Check.TableName", strTableCheck
                                });
                            throw CmUtils.CMyException.Raise(
                                TError.ErridnInventory.Invoice_Invoice_SaveX_Input_InvoiceTblInvalid
                                , null
                                , alParamsCoupleError.ToArray()
                                );
                        }
                        ////
                    }
                    /////
                    TUtils.CUtils.StdDataInTable(
                        dtInput_Invoice_Invoice // dtData
                        , "StdParam", "InvoiceCode" // arrstrCouple
                        , "StdParam", "RefNo" // arrstrCouple
                        , "", "AttachedDelFilePath" // arrstrCouple
                        , "", "DeleteReason" // arrstrCouple
                        );
                    ////
                    #endregion
                    ////
                    objInvoiceCode = dtInput_Invoice_Invoice.Rows[0]["InvoiceCode"];
                    object objRefNo = dtInput_Invoice_Invoice.Rows[0]["RefNo"];
                    object objAttachedDelFilePath = dtInput_Invoice_Invoice.Rows[0]["AttachedDelFilePath"];
                    object objDeleteReason = dtInput_Invoice_Invoice.Rows[0]["DeleteReason"];

                    string strDeleteReason = Convert.ToString(objDeleteReason);
                    ////
                    DataTable dtDB_Invoice_Invoice = null;

                    Invoice_Invoice_CheckDB(
                        ref alParamsCoupleError // alParamsCoupleError
                        , objRefNo // objInvoiceCode
                        , TConst.Flag.Yes // strFlagExistToCheck
                        , TConst.InvoiceStatus.Issued // strInvoiceStatusListToCheck
                        , out dtDB_Invoice_Invoice // dtDB_Invoice_Invoice
                        );
                    //if (strDeleteReason == null || strDeleteReason.Length < 1)
                    //if (string.IsNullOrEmpty(strDeleteReason))

                    //if (CmUtils.StringUtils.StringEqualIgnoreCase(dtDB_Invoice_Invoice.Rows[0]["InvoiceStatus"], TConst.InvoiceStatus.Issued))
                    if (dtDB_Invoice_Invoice_Root.Rows.Count < 1)
                    {
                        #region // Invoice_Invoice_Upd_AdjX_New20190802:
                        Invoice_Invoice_Upd_AdjX_New20190802(
                        strTid // strTid
                        , strGwUserCode // strGwUserCode
                        , strGwPassword // strGwPassword
                        , strWAUserCode // strWAUserCode
                        , strWAUserPassword // strWAUserPassword
                        , ref alParamsCoupleError // alParamsCoupleError
                        , dtimeSys // dtimeSys
                                   ////
                        , objRefNo // objInvoiceCode
                        , objAttachedDelFilePath // objAttachedDelFilePath
                        , objDeleteReason // objDeleteReason
                        );
                        ////
                        #endregion
                    }
                }
                ////
                //CmUtils.DataUtils.MoveDataTable(ref mdsFinal, ref dsGetData);
                #endregion

                #region // Invoice_Invoice_AllocatedInvX:
                //DataSet dsGetData = null;
                {
                    Invoice_Invoice_AllocatedInvX(
                        strTid // strTid
                        , strGwUserCode // strGwUserCode
                        , strGwPassword // strGwPassword
                        , strWAUserCode // strWAUserCode
                        , strWAUserPassword // strWAUserPassword
                        , ref alParamsCoupleError // alParamsCoupleError
                        , dtimeSys // dtimeSys
                                   ////
                        , objInvoiceCode // objInvoiceCode
                        , objInvoiceDateUTC // objInvoiceDateUTC
                        );
                }
                ////
                //CmUtils.DataUtils.MoveDataTable(ref mdsFinal, ref dsGetData);
                #endregion

                #region // Invoice_Invoice_ApprovedX:
                //DataSet dsGetData = null;
                {
                    Invoice_Invoice_ApprovedX_New20190705(
                        strTid // strTid
                        , strGwUserCode // strGwUserCode
                        , strGwPassword // strGwPassword
                        , strWAUserCode // strWAUserCode
                        , strWAUserPassword // strWAUserPassword
                        , ref alParamsCoupleError // alParamsCoupleError
                        , dtimeSys // dtimeSys
                                   ////
                        , objInvoiceCode // objInvoiceCode
                                         //, objInvoiceFileSpec // objInvoiceFileSpec
                        , objInvoiceFilePath // objInvoiceFilePath
                        , objInvoicePDFFilePath // objInvoicePDFFilePath
                        , objRemark // objRemark
                        );
                }
                ////
                //CmUtils.DataUtils.MoveDataTable(ref mdsFinal, ref dsGetData);
                #endregion

                #region // Invoice_Invoice_IssuedX:
                //DataSet dsGetData = null;
                {
                    Invoice_Invoice_IssuedX_New20190705(
                        strTid // strTid
                        , strGwUserCode // strGwUserCode
                        , strGwPassword // strGwPassword
                        , strWAUserCode // strWAUserCode
                        , strWAUserPassword // strWAUserPassword
                        , ref alParamsCoupleError // alParamsCoupleError
                        , dtimeSys // dtimeSys
                                   ////
                        , objInvoiceCode // objInvoiceCode
                        , objEmailSend // objEmailSend
                        , objRemark // objRemark
                        );
                }
                ////
                //CmUtils.DataUtils.MoveDataTable(ref mdsFinal, ref dsGetData);
                #endregion

                #region // Email_BatchSendEmail_SaveAndSendX:
                {
                    Email_BatchSendEmail_SaveAndSendX(
                    strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // strWAUserCode
                    , strWAUserPassword // strWAUserPassword
                    , ref alParamsCoupleError // alParamsCoupleError
                    , dtimeSys // dtimeSys
                               ////
                    , objSubject // objSubject
                    , objBodyText // objBodyText
                    , objBodyHTML // objBodyHTML
                    , dsData // dsData
                    );
                }
                #endregion

                // Return Good:
                TDALUtils.DBUtils.CommitSafety(_cf.db);
                mdsFinal.AcceptChanges();
                return mdsFinal;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Rollback:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);

                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsFinal
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Rollback and Release resources:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);
                TDALUtils.DBUtils.ReleaseAllSemaphore(_cf.db_Sys, true);

                // Write ReturnLog:
                _cf.ProcessBizReturn_OutSide(
                    ref mdsFinal // mdsFinal
                    , strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    );
                #endregion
            }
        }


        public DataSet WAS_OSDMS_Invoice_Invoice_Calc(
            ref ArrayList alParamsCoupleError
            , RQ_Invoice_Invoice objRQ_Invoice_Invoice
            ////
            , out RT_Invoice_Invoice objRT_Invoice_Invoice
            )
        {
            #region // Temp:
            string strTid = objRQ_Invoice_Invoice.Tid;
            objRT_Invoice_Invoice = new RT_Invoice_Invoice();
            DataSet mdsResult = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            DateTime dtimeSys = DateTime.UtcNow;
            //DataSet mdsExec = null;
            //DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(objRQ_Invoice_Invoice.Tid);
            //int nTidSeq = 0;
            //bool bNeedTransaction = true;
            string strFunctionName = "WAS_OSDMS_Invoice_Invoice_Calc";
            string strErrorCodeDefault = TError.ErridnInventory.WAS_OSDMS_Invoice_Invoice_Calc;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
                , "FlagIsDelete", objRQ_Invoice_Invoice.FlagIsDelete
                , "Lst_Invoice_Invoice", TJson.JsonConvert.SerializeObject(objRQ_Invoice_Invoice.Lst_Invoice_Invoice)
                , "Lst_Invoice_InvoiceDtl", TJson.JsonConvert.SerializeObject(objRQ_Invoice_Invoice.Lst_Invoice_InvoiceDtl)
                });
            #endregion

            try
            {
                #region // Init:
                #endregion

                #region // Refine and Check Input:
                #endregion

                #region // Refine and Check Input:
                ////
                DataSet dsData = new DataSet();
                //DataTable dt_Invoice_Invoice = new DataTable();
                {
                    ////
                    DataTable dt_Invoice_Invoice = TUtils.DataTableCmUtils.ToDataTable<Invoice_Invoice>(objRQ_Invoice_Invoice.Lst_Invoice_Invoice, "Invoice_Invoice");
                    dsData.Tables.Add(dt_Invoice_Invoice);
                    ////
                    DataTable dt_Invoice_InvoiceDtl = TUtils.DataTableCmUtils.ToDataTable<Invoice_InvoiceDtl>(objRQ_Invoice_Invoice.Lst_Invoice_InvoiceDtl, "Invoice_InvoiceDtl");
                    dsData.Tables.Add(dt_Invoice_InvoiceDtl);
                    ////

                }
                #endregion

                #region // Refine and Check Input:
                List<MySummaryTable> lst_MySummaryTable = new List<MySummaryTable>();
                List<Invoice_Invoice> lst_Invoice_Invoice = new List<Invoice_Invoice>();
                List<Invoice_InvoiceDtl> lst_Invoice_InvoiceDtl = new List<Invoice_InvoiceDtl>();
                List<Invoice_InvoicePrd> lst_Invoice_InvoicePrd = new List<Invoice_InvoicePrd>();
                /////
                bool bGet_Invoice_Invoice = (objRQ_Invoice_Invoice.Rt_Cols_Invoice_Invoice != null && objRQ_Invoice_Invoice.Rt_Cols_Invoice_Invoice.Length > 0);
                bool bGet_Invoice_InvoiceDtl = (objRQ_Invoice_Invoice.Rt_Cols_Invoice_InvoiceDtl != null && objRQ_Invoice_Invoice.Rt_Cols_Invoice_InvoiceDtl.Length > 0);
                //bool bGet_Invoice_InvoicePrd = (objRQ_Invoice_Invoice.Rt_Cols_Invoice_InvoicePrd != null && objRQ_Invoice_Invoice.Rt_Cols_Invoice_InvoicePrd.Length > 0);
                #endregion

                #region // OSDMS_Invoice_Invoice_Calc:
                mdsResult = OSDMS_Invoice_Invoice_Calc(
                    objRQ_Invoice_Invoice.Tid // strTid
                    , objRQ_Invoice_Invoice.GwUserCode // strGwUserCode
                    , objRQ_Invoice_Invoice.GwPassword // strGwPassword
                    , objRQ_Invoice_Invoice.WAUserCode // strUserCode
                    , objRQ_Invoice_Invoice.WAUserPassword // strUserPassword
                    , ref alParamsCoupleError // alParamsCoupleError
                                              ////
                    , objRQ_Invoice_Invoice.FlagIsDelete // objFlagIsDelete
                                                         ////
                    , dsData // dsData
                    );
                #endregion

                #region // GetData:
                if (!CmUtils.CMyDataSet.HasError(mdsResult))
                {
                    ////
                    DataTable dt_MySummaryTable = mdsResult.Tables["MySummaryTable"].Copy();
                    lst_MySummaryTable = TUtils.DataTableCmUtils.ToListof<MySummaryTable>(dt_MySummaryTable);
                    objRT_Invoice_Invoice.MySummaryTable = lst_MySummaryTable[0];
                    ////
                    ////
                    if (bGet_Invoice_Invoice)
                    {
                        ////
                        DataTable dt_Invoice_Invoice = mdsResult.Tables["Invoice_Invoice"].Copy();
                        lst_Invoice_Invoice = TUtils.DataTableCmUtils.ToListof<Invoice_Invoice>(dt_Invoice_Invoice);
                        objRT_Invoice_Invoice.Lst_Invoice_Invoice = lst_Invoice_Invoice;
                    }
                    ////
                    if (bGet_Invoice_InvoiceDtl)
                    {
                        ////
                        DataTable dt_Invoice_InvoiceDtl = mdsResult.Tables["Invoice_InvoiceDtl"].Copy();
                        lst_Invoice_InvoiceDtl = TUtils.DataTableCmUtils.ToListof<Invoice_InvoiceDtl>(dt_Invoice_InvoiceDtl);
                        objRT_Invoice_Invoice.Lst_Invoice_InvoiceDtl = lst_Invoice_InvoiceDtl;
                    }
                    ////
                }
                #endregion

                // Return Good:
                return mdsResult;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsResult
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Write ReturnLog:
                //_cf.ProcessBizReturn(
                //	ref mdsResult // mdsFinal
                //	, strTid // strTid
                //	, strFunctionName // strFunctionName
                //	);
                #endregion
            }
        }
        public DataSet OSDMS_Invoice_Invoice_Calc(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            ////
            , object objFlagIsDelete
            ////
            , DataSet dsData
            //// 
            )
        {
            #region // Temp:
            DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            //int nTidSeq = 0;
            DateTime dtimeSys = DateTime.UtcNow;
            string strFunctionName = "OSDMS_Invoice_Invoice_Calc";
            string strErrorCodeDefault = TError.ErridnInventory.OSDMS_Invoice_Invoice_Calc;
            alParamsCoupleError.AddRange(new object[]{
                    "strFunctionName", strFunctionName
                    , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
                    /////
                    , "objFlagIsDelete", objFlagIsDelete
			        ////
                    });
            #endregion

            try
            {
                #region // Init:
                //_cf.db.LogUserId = _cf.sinf.strUserCode;
                _cf.db.BeginTransaction();

                // Write RequestLog:
                _cf.ProcessBizReq_OutSide(
                    strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    , alParamsCoupleError // alParamsCoupleError
                    );

                // Sys_User_CheckAuthentication:
                //Sys_User_CheckAuthentication(
                //    ref alParamsCoupleError
                //    , strWAUserCode
                //    , strWAUserPassword
                //    );

                // Check Access/Deny:
                Sys_Access_CheckDenyV30(
                    ref alParamsCoupleError
                    , strWAUserCode
                    , strFunctionName
                    );
                #endregion

                #region // OSDMS_Invoice_Invoice_CalcX:
                DataSet dsGetData = new DataSet();
                {

                    OSDMS_Invoice_Invoice_CalcX(
                        strTid // strTid
                        , strGwUserCode // strGwUserCode
                        , strGwPassword // strGwPassword
                        , strWAUserCode // strWAUserCode
                        , strWAUserPassword // strWAUserPassword
                        , ref alParamsCoupleError // alParamsCoupleError
                        , dtimeSys // dtimeSys
                                   ////
                        , objFlagIsDelete // objFlagIsDelete
                                          ////
                        , dsData // dsData
                        , out dsGetData // dsGetData
                        );
                }
                ////
                CmUtils.DataUtils.MoveDataTable(ref mdsFinal, ref dsGetData);
                #endregion

                // Return Good:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);
                mdsFinal.AcceptChanges();
                return mdsFinal;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Rollback:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);

                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsFinal
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Rollback and Release resources:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);
                TDALUtils.DBUtils.ReleaseAllSemaphore(_cf.db_Sys, true);

                // Write ReturnLog:
                _cf.ProcessBizReturn_OutSide(
                    ref mdsFinal // mdsFinal
                    , strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    );
                #endregion
            }
        }

        private void OSDMS_Invoice_Invoice_CalcX(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            , DateTime dtimeSys
            ////
            , object objFlagIsDelete
            ////
            , DataSet dsData
            ////
            , out DataSet dsGet_Invoice
            )
        {
            #region // Temp:
            //int nTidSeq = 0;
            //bool bMyDebugSql = false;
            dsGet_Invoice = new DataSet();
            string strFunctionName = "OSDMS_Invoice_Invoice_CalcX";
            //string strErrorCodeDefault = TError.ErridnInventory.Invoice_Invoice_SaveAllX;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
                ////
                , "objFlagIsDelete",objFlagIsDelete
				////
                });
            //ArrayList alPCErrEx = new ArrayList();
            ////
            Hashtable htParamsSql = new Hashtable();
            #endregion

            #region // Convert Input:
            //DataSet dsData = TUtils.CUtils.StdDS(arrobjDSData);
            //if (dsData == null) dsData = new DataSet("dsData");
            //dsData.AcceptChanges();
            alParamsCoupleError.AddRange(new object[]{
                "Check.dsData", CmUtils.XmlUtils.DataSet2XmlSimple(dsData)
                });
            #endregion

            #region // Refine and Check Input:
            ////
            DataRow drAbilityOfUser = Sys_User_GetAbilityViewOfUser(strWAUserCode);
            ////
            bool bIsDelete = CmUtils.StringUtils.StringEqual(objFlagIsDelete, TConst.Flag.Yes);
            ////
            string strMST = TUtils.CUtils.StdParam(drAbilityOfUser["MNNTMST"]);
            #endregion

            #region // Refine and Check Input Invoice_Invoice:
            ////
            DataTable dtInput_Invoice_Invoice = null;
            {
                ////
                string strTableCheck = "Invoice_Invoice";
                ////
                if (!dsData.Tables.Contains(strTableCheck))
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.TableName", strTableCheck
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Invoice_Invoice_SaveX_Input_InvoiceTblNotFound
                        , null
                        , alParamsCoupleError.ToArray()
                        );
                }
                dtInput_Invoice_Invoice = dsData.Tables[strTableCheck];
                ////
                if (dtInput_Invoice_Invoice.Rows.Count < 1)
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.TableName", strTableCheck
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Invoice_Invoice_SaveX_Input_InvoiceTblInvalid
                        , null
                        , alParamsCoupleError.ToArray()
                        );
                }
                ////
                TUtils.CUtils.StdDataInTable(
                    dtInput_Invoice_Invoice // dtData
                    , "StdParam", "InvoiceCode" // arrstrCouple
                    , "StdParam", "MST" // arrstrCouple
                    , "StdParam", "NetworkID" // arrstrCouple
                    , "StdParam", "RefNo" // arrstrCouple
                    , "StdParam", "FormNo" // arrstrCouple
                    , "StdParam", "Sign" // arrstrCouple
                    , "StdParam", "SourceInvoiceCode" // arrstrCouple
                    , "StdParam", "InvoiceAdjType" // arrstrCouple
                    , "StdParam", "PaymentMethodCode" // arrstrCouple
                    , "StdParam", "InvoiceType2" // arrstrCouple
                    , "StdParam", "CustomerNNTCode" // arrstrCouple
                    , "", "CustomerNNTName" // arrstrCouple
                    , "", "CustomerNNTAddress" // arrstrCouple
                    , "", "CustomerNNTPhone" // arrstrCouple
                    , "", "CustomerNNTBankName" // arrstrCouple
                    , "", "CustomerNNTEmail" // arrstrCouple
                    , "", "CustomerNNTAccNo" // arrstrCouple
                    , "", "CustomerNNTBuyerName" // arrstrCouple
                    , "StdParam", "CustomerMST" // arrstrCouple
                    , "StdParam", "TInvoiceCode" // arrstrCouple
                    , "StdParam", "InvoiceNo" // arrstrCouple
                    , "", "InvoiceDateUTC" // arrstrCouple
                                           //, "StdParam", "EmailSend" // arrstrCouple
                    , "", "InvoiceFileSpec" // arrstrCouple
                    , "", "InvoiceFilePath" // arrstrCouple
                    , "", "InvoicePDFFilePath" // arrstrCouple
                    , "float", "TotalValInvoice" // arrstrCouple
                    , "float", "TotalValVAT" // arrstrCouple
                    , "float", "TotalValPmt" // arrstrCouple
                    , "", "AttachedDelFilePath" // arrstrCouple
                    , "", "DeleteReason" // arrstrCouple
                    , "StdParam", "InvoiceVerifyCQTCode" // arrstrCouple
                    , "StdParam", "CurrencyCode" // arrstrCouple
                    , "float", "CurrencyRate" // arrstrCouple
                    , "float", "ValGoodsNotTaxable" // arrstrCouple
                    , "float", "ValGoodsNotChargeTax" // arrstrCouple
                    , "float", "ValGoodsVAT5" // arrstrCouple
                    , "float", "ValVAT5" // arrstrCouple
                    , "float", "ValGoodsVAT10" // arrstrCouple
                    , "float", "ValVAT10" // arrstrCouple
                    , "", "NNTFullName" // arrstrCouple
                    , "", "NNTFullAdress" // arrstrCouple
                    , "", "NNTPhone" // arrstrCouple
                    , "", "NNTFax" // arrstrCouple
                    , "", "NNTEmail" // arrstrCouple
                    , "", "NNTWebsite" // arrstrCouple
                    , "", "NNTAccNo" // arrstrCouple
                    , "", "NNTBankName" // arrstrCouple
                    , "", "Remark" // arrstrCouple
                    , "", "InvoiceCF1" // arrstrCouple
                    , "", "InvoiceCF2" // arrstrCouple
                    , "", "InvoiceCF3" // arrstrCouple
                    , "", "InvoiceCF4" // arrstrCouple
                    , "", "InvoiceCF5" // arrstrCouple
                    , "", "InvoiceCF6" // arrstrCouple
                    , "", "InvoiceCF7" // arrstrCouple
                    , "", "InvoiceCF8" // arrstrCouple
                    , "", "InvoiceCF9" // arrstrCouple
                    , "", "InvoiceCF10" // arrstrCouple
                    , "", "FlagConfirm" // arrstrCouple
                    );
                ////
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_Invoice, "EmailSend", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_Invoice, "CreateDTimeUTC", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_Invoice, "CreateBy", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_Invoice, "InvoiceNoDTimeUTC", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_Invoice, "InvoiceNoBy", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_Invoice, "SignDTimeUTC", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_Invoice, "SignBy", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_Invoice, "ApprDTimeUTC", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_Invoice, "ApprBy", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_Invoice, "CancelDTimeUTC", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_Invoice, "CancelBy", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_Invoice, "SendEmailDTimeUTC", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_Invoice, "SendEmailBy", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_Invoice, "IssuedDTimeUTC", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_Invoice, "IssuedBy", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_Invoice, "DeleteDTimeUTC", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_Invoice, "DeleteBy", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_Invoice, "ChangeDTimeUTC", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_Invoice, "ChangeBy", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_Invoice, "LUDTimeUTC", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_Invoice, "LUBy", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_Invoice, "FlagChange", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_Invoice, "FlagPushOutSite", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_Invoice, "InvoiceStatus", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_Invoice, "LogLUDTimeUTC", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_Invoice, "LogLUBy", typeof(object));
            }
            #endregion

            #region //// SaveTemp Invoice_Invoice For Check:
            //if (!bIsDelete)
            {
                // Upload:
                TUtils.CUtils.MyBuildDBDT_Common(
                    _cf.db // db
                    , "#input_Invoice_Invoice" // strTableName
                    , new object[] {
                            "InvoiceCode", TConst.BizMix.Default_DBColType
                            , "MST", TConst.BizMix.Default_DBColType
                            , "NetworkID", TConst.BizMix.Default_DBColType
                            , "RefNo", TConst.BizMix.Default_DBColType
                            , "FormNo", TConst.BizMix.Default_DBColType
                            , "Sign", TConst.BizMix.Default_DBColType
                            , "SourceInvoiceCode", TConst.BizMix.Default_DBColType
                            , "InvoiceAdjType", TConst.BizMix.Default_DBColType
                            , "PaymentMethodCode", TConst.BizMix.Default_DBColType
                            , "InvoiceType2", TConst.BizMix.Default_DBColType
                            , "CustomerNNTCode", TConst.BizMix.Default_DBColType
                            , "CustomerNNTName", TConst.BizMix.Default_DBColType
                            , "CustomerNNTAddress", TConst.BizMix.Default_DBColType
                            , "CustomerNNTPhone", TConst.BizMix.Default_DBColType
                            , "CustomerNNTBankName", TConst.BizMix.Default_DBColType
                            , "CustomerNNTEmail", TConst.BizMix.Default_DBColType
                            , "CustomerNNTAccNo", TConst.BizMix.Default_DBColType
                            , "CustomerNNTBuyerName", TConst.BizMix.Default_DBColType
                            , "CustomerMST", TConst.BizMix.Default_DBColType
                            , "TInvoiceCode", TConst.BizMix.Default_DBColType
                            , "InvoiceNo", TConst.BizMix.Default_DBColType
                            , "InvoiceDateUTC", TConst.BizMix.Default_DBColType
                            , "EmailSend", TConst.BizMix.Default_DBColType
                            , "InvoiceFileSpec", TConst.BizMix.Default_DBColType
                            , "InvoiceFilePath", TConst.BizMix.Default_DBColType
                            , "InvoicePDFFilePath", TConst.BizMix.Default_DBColType
                            , "TotalValInvoice", "float"
                            , "TotalValVAT", "float"
                            , "TotalValPmt", "float"
                            , "CreateDTimeUTC", TConst.BizMix.Default_DBColType
                            , "CreateBy", TConst.BizMix.Default_DBColType
                            , "InvoiceNoDTimeUTC", TConst.BizMix.Default_DBColType
                            , "InvoiceNoBy", TConst.BizMix.Default_DBColType
                            , "SignDTimeUTC", TConst.BizMix.Default_DBColType
                            , "SignBy", TConst.BizMix.Default_DBColType
                            , "ApprDTimeUTC", TConst.BizMix.Default_DBColType
                            , "ApprBy", TConst.BizMix.Default_DBColType
                            , "CancelDTimeUTC", TConst.BizMix.Default_DBColType
                            , "CancelBy", TConst.BizMix.Default_DBColType
                            , "SendEmailDTimeUTC", TConst.BizMix.Default_DBColType
                            , "SendEmailBy", TConst.BizMix.Default_DBColType
                            , "IssuedDTimeUTC", TConst.BizMix.Default_DBColType
                            , "IssuedBy", TConst.BizMix.Default_DBColType
                            , "AttachedDelFilePath", TConst.BizMix.Default_DBColType
                            , "DeleteReason", TConst.BizMix.Default_DBColType
                            , "DeleteDTimeUTC", TConst.BizMix.Default_DBColType
                            , "DeleteBy", TConst.BizMix.Default_DBColType
                            , "ChangeDTimeUTC", TConst.BizMix.Default_DBColType
                            , "ChangeBy", TConst.BizMix.Default_DBColType
                            , "InvoiceVerifyCQTCode", TConst.BizMix.Default_DBColType
                            , "CurrencyCode", TConst.BizMix.Default_DBColType
                            , "CurrencyRate", TConst.BizMix.Default_DBColType
                            , "ValGoodsNotTaxable", "float"
                            , "ValGoodsNotChargeTax", "float"
                            , "ValGoodsVAT5", "float"
                            , "ValVAT5", "float"
                            , "ValGoodsVAT10", "float"
                            , "ValVAT10", "float"
                            , "NNTFullName", TConst.BizMix.Default_DBColType
                            , "NNTFullAdress", TConst.BizMix.Default_DBColType
                            , "NNTPhone", TConst.BizMix.Default_DBColType
                            , "NNTFax", TConst.BizMix.Default_DBColType
                            , "NNTEmail", TConst.BizMix.Default_DBColType
                            , "NNTWebsite", TConst.BizMix.Default_DBColType
                            , "NNTAccNo", TConst.BizMix.Default_DBColType
                            , "NNTBankName", TConst.BizMix.Default_DBColType
                            , "LUDTimeUTC", TConst.BizMix.Default_DBColType
                            , "LUBy", TConst.BizMix.Default_DBColType
                            , "Remark", TConst.BizMix.Default_DBColType
                            , "InvoiceCF1", TConst.BizMix.Default_DBColType
                            , "InvoiceCF2", TConst.BizMix.Default_DBColType
                            , "InvoiceCF3", TConst.BizMix.Default_DBColType
                            , "InvoiceCF4", TConst.BizMix.Default_DBColType
                            , "InvoiceCF5", TConst.BizMix.Default_DBColType
                            , "InvoiceCF6", TConst.BizMix.Default_DBColType
                            , "InvoiceCF7", TConst.BizMix.Default_DBColType
                            , "InvoiceCF8", TConst.BizMix.Default_DBColType
                            , "InvoiceCF9", TConst.BizMix.Default_DBColType
                            , "InvoiceCF10", TConst.BizMix.Default_DBColType
                            , "FlagConfirm", TConst.BizMix.Default_DBColType
                            , "FlagChange", TConst.BizMix.Default_DBColType
                            , "FlagPushOutSite", TConst.BizMix.Default_DBColType
                            , "FlagDeleteOutSite", TConst.BizMix.Default_DBColType
                            , "InvoiceStatus", TConst.BizMix.Default_DBColType
                            , "LogLUDTimeUTC", TConst.BizMix.Default_DBColType
                            , "LogLUBy", TConst.BizMix.Default_DBColType
                        } // arrSingleStructure
                    , dtInput_Invoice_Invoice // dtData
                );
            }
            #endregion

            #region /// Refine and check Input Invoice_Invoice:
            {
                #region ----// Check InvalidInvoiceCode:
                {
                    string strSql_CheckInvalidInvoiceCode = CmUtils.StringUtils.Replace(@"
                            --- Check:
                            select distinct 
                                t.InvoiceCode
                            from #input_Invoice_Invoice t --//[mylock]
                            where(1=1)
                                and (t.InvoiceCode is null or LTRIM(RTRIM(t.InvoiceCode)) = '')
                            ;
						");
                    DataTable dt_CheckInvalidInvoiceCode = _cf.db.ExecQuery(
                        strSql_CheckInvalidInvoiceCode
                        ).Tables[0];
                    /////
                    if (dt_CheckInvalidInvoiceCode.Rows.Count > 0)
                    {
                        alParamsCoupleError.AddRange(new object[]{
                            "Check.ErrConditionalRaise", "(t.InvoiceCode is null or LTRIM(RTRIM(t.InvoiceCode)) = '')"
                            , "Check.NumberRows", dt_CheckInvalidInvoiceCode.Rows.Count
                            });
                        throw CmUtils.CMyException.Raise(
                            TError.ErridnInventory.Invoice_Invoice_SaveX_InvalidInvoiceCode
                            , null
                            , alParamsCoupleError.ToArray()
                            );
                    }
                    ////
                }
                #endregion

                #region ----// Check InvalidInvoiceStatus:
                {
                    string strSql_CheckInvalidInvoiceCode = CmUtils.StringUtils.Replace(@"
                            --- #tbl_Invoice_Invoice_ForSTUFF:
                            select distinct 
                                t.InvoiceCode
                            into #tbl_Invoice_Invoice_ForSTUFF
                            from #input_Invoice_Invoice t --//[mylock]
                                inner join Invoice_Invoice f --//[mylock]
                                    on t.InvoiceCode = f.InvoiceCode
                            where(1=1)
                                and f.InvoiceStatus not in ('PENDING') 
                            ;

                            --- Return:					
                            select 
                                STUFF(( 
		                            SELECT ',' + f.InvoiceCode
		                            FROM #tbl_Invoice_Invoice_ForSTUFF f --//[mylock]
		                            WHERE(1=1)
		                            FOR
		                            XML PATH('')
		                            ), 1, 1, ''
                                ) AS ListInvoiceCode
                            where(1=1)
                            ;

                            --- Clear For Debug:
                            drop table #tbl_Invoice_Invoice_ForSTUFF;
						");
                    DataTable dt_CheckInvalidInvoiceCode = _cf.db.ExecQuery(
                        strSql_CheckInvalidInvoiceCode
                        ).Tables[0];
                    /////
                    if (dt_CheckInvalidInvoiceCode.Rows.Count > 0)
                    {
                        string strListInvoiceCode = TUtils.CUtils.StdParam(dt_CheckInvalidInvoiceCode.Rows[0]["ListInvoiceCode"]);
                        /////
                        if (!string.IsNullOrEmpty(strListInvoiceCode))
                        {
                            if (bIsDelete)
                            {
                                goto MyCodeLabel_Done; // Thành công
                            }
                            else // if (!string.IsNullOrEmpty(strListInvoiceCode))
                            {
                                alParamsCoupleError.AddRange(new object[]{
                                    "Check.ErrConditionalRaise", "f.InvoiceStatus not in ('PENDING')"
                                    , "Check.strListInvoiceCode", strListInvoiceCode
                                    });
                                throw CmUtils.CMyException.Raise(
                                    TError.ErridnInventory.Invoice_Invoice_SaveX_StatusNotMatched
                                    , null
                                    , alParamsCoupleError.ToArray()
                                    );

                            }
                        }
                        /////
                    }
                    ////
                }
                #endregion

                #region ----// Đã cấp số hóa đơn thì không được Xóa:
                if (bIsDelete)
                {
                    string strSql_CheckInvalidInvoiceCode = CmUtils.StringUtils.Replace(@"
                            --- #tbl_Invoice_Invoice_ForSTUFF:
                            select distinct 
                                t.InvoiceCode
                            into #tbl_Invoice_Invoice_ForSTUFF
                            from #input_Invoice_Invoice t --//[mylock]
                                inner join Invoice_Invoice f --//[mylock]
                                    on t.InvoiceCode = f.InvoiceCode
                            where(1=1)
                                and f.InvoiceNo is not null 
                            ;

                            --- Return:					
                            select 
                                STUFF(( 
		                            SELECT ',' + f.InvoiceCode
		                            FROM #tbl_Invoice_Invoice_ForSTUFF f --//[mylock]
		                            WHERE(1=1)
		                            FOR
		                            XML PATH('')
		                            ), 1, 1, ''
                                ) AS ListInvoiceCode
                            where(1=1)
                            ;

                            --- Clear For Debug:
                            drop table #tbl_Invoice_Invoice_ForSTUFF;
						");
                    DataTable dt_CheckInvalidInvoiceCode = _cf.db.ExecQuery(
                        strSql_CheckInvalidInvoiceCode
                        ).Tables[0];
                    /////
                    if (dt_CheckInvalidInvoiceCode.Rows.Count > 0)
                    {
                        /////
                        string strListInvoiceCode = TUtils.CUtils.StdParam(dt_CheckInvalidInvoiceCode.Rows[0]["ListInvoiceCode"]);
                        ////
                        if (!string.IsNullOrEmpty(strListInvoiceCode))
                        {
                            alParamsCoupleError.AddRange(new object[]{
                                "Check.ErrConditionalRaise", "f.InvoiceNo is not null "
                                , "Check.strListInvoiceCode", strListInvoiceCode
                                });
                            throw CmUtils.CMyException.Raise(
                                TError.ErridnInventory.Invoice_Invoice_SaveX_ExistInvoiceNo
                                , null
                                , alParamsCoupleError.ToArray()
                                );

                        }
                    }
                    ////
                }
                #endregion

                #region ----// Nếu là hóa đơn điều chỉnh thì RefNo không được Null:
                if (!bIsDelete)
                {
                    string strSql_CheckInvalidInvoiceCode = CmUtils.StringUtils.Replace(@"
                            --- #tbl_Invoice_Invoice_ForSTUFF:
                            select distinct 
                                t.InvoiceCode
                            into #tbl_Invoice_Invoice_ForSTUFF
                            from #input_Invoice_Invoice t --//[mylock]
                            where(1=1)
                                and t.RefNo is null
                                and t.InvoiceAdjType in ('@strADJINCREASE', '@strADJDESCREASE')
                            ;

                            --- Return:					
                            select 
                                STUFF(( 
		                            SELECT ',' + f.InvoiceCode
		                            FROM #tbl_Invoice_Invoice_ForSTUFF f --//[mylock]
		                            WHERE(1=1)
		                            FOR
		                            XML PATH('')
		                            ), 1, 1, ''
                                ) AS ListInvoiceCode
                            where(1=1)
                            ;

                            --- Clear For Debug:
                            drop table #tbl_Invoice_Invoice_ForSTUFF;
						"
                        , "@strADJINCREASE", TConst.InvoiceAdjType.AdjInCrease
                        , "@strADJINCREASE", TConst.InvoiceAdjType.AdjDescrease
                        );
                    DataTable dt_CheckInvalidInvoiceCode = _cf.db.ExecQuery(
                        strSql_CheckInvalidInvoiceCode
                        ).Tables[0];
                    /////
                    if (dt_CheckInvalidInvoiceCode.Rows.Count > 0)
                    {
                        string strListInvoiceCode = TUtils.CUtils.StdParam(dt_CheckInvalidInvoiceCode.Rows[0]["ListInvoiceCode"]);
                        /////
                        if (!string.IsNullOrEmpty(strListInvoiceCode))
                        {
                            alParamsCoupleError.AddRange(new object[]{
                                "Check.ErrConditionalRaise", "and t.InvoiceAdjType in ('@strADJINCREASE', '@strADJDESCREASE') and t.RefNo is null"
                                , "Check.strListInvoiceCode", strListInvoiceCode
                                });
                            throw CmUtils.CMyException.Raise(
                                TError.ErridnInventory.Invoice_Invoice_SaveX_InvoiceAdjTypeIsNotNull
                                , null
                                , alParamsCoupleError.ToArray()
                                );
                        }
                        /////
                    }
                    ////
                }
                #endregion

                #region ----// Nếu là hóa đơn thay thế:
                {
                    #region ----// Nếu là hóa đơn thay thế thì RefNo không được Null:
                    {
                        string strSql_CheckInvalidInvoiceCode = CmUtils.StringUtils.Replace(@"
                                --- #tbl_Invoice_Invoice_ForSTUFF:
                                select distinct 
                                    t.RefNo
                                into #tbl_Invoice_Invoice_ForSTUFF
                                from #input_Invoice_Invoice t --//[mylock]
                                where(1=1)
                                    and t.SourceInvoiceCode in ('@strInvoiceReplace') 
                                    and (t.RefNo is null or LTRIM(RTRIM(t.RefNo)) = '')
                                ;

                                --- Return:					
                                select 
                                    STUFF(( 
		                                SELECT ',' + f.RefNo
		                                FROM #tbl_Invoice_Invoice_ForSTUFF f --//[mylock]
		                                WHERE(1=1)
		                                FOR
		                                XML PATH('')
		                                ), 1, 1, ''
                                    ) AS ListRefNo
                                where(1=1)
                                ;

                                --- Clear For Debug:
                                drop table #tbl_Invoice_Invoice_ForSTUFF;
						    "
                            , "@strInvoiceReplace", TConst.SourceInvoiceCode.InvoiceReplace
                            );
                        DataTable dt_CheckInvalidInvoiceCode = _cf.db.ExecQuery(
                            strSql_CheckInvalidInvoiceCode
                            ).Tables[0];
                        /////
                        if (dt_CheckInvalidInvoiceCode.Rows.Count > 0)
                        {
                            /////
                            string strListRefNo = TUtils.CUtils.StdParam(dt_CheckInvalidInvoiceCode.Rows[0]["ListRefNo"]);
                            ////
                            if (!string.IsNullOrEmpty(strListRefNo))
                            {
                                alParamsCoupleError.AddRange(new object[]{
                                    "Check.ErrConditionalRaise", "and t.SourceInvoiceCode in ('@strInvoiceReplace') and (t.RefNo is null or LTRIM(RTRIM(t.RefNo)) = '')"
                                    , "Check.strListRefNo", strListRefNo
                                    });
                                throw CmUtils.CMyException.Raise(
                                    TError.ErridnInventory.Invoice_Invoice_SaveX_Input_Invoice_InvalidRefNo
                                    , null
                                    , alParamsCoupleError.ToArray()
                                    );

                            }
                        }
                        ////
                    }
                    #endregion

                    #region ----// RefNo ở trạng thái Deleted:
                    {
                        string strSql_CheckInvalidInvoiceCode = CmUtils.StringUtils.Replace(@"
                                --- #tbl_Invoice_Invoice_ForSTUFF:
                                select distinct 
                                    t.RefNo
                                into #tbl_Invoice_Invoice_ForSTUFF
                                from #input_Invoice_Invoice t --//[mylock]
                                    left join Invoice_Invoice f --//[mylock]
                                        on t.RefNo = f.InvoiceCode
                                where(1=1)
                                    and t.SourceInvoiceCode in ('@strInvoiceReplace') 
                                    and (f.InvoiceStatus not in ('DELETED', 'ISSUED')) 
                                ;

                                --- Return:					
                                select 
                                    STUFF(( 
		                                SELECT ',' + f.RefNo
		                                FROM #tbl_Invoice_Invoice_ForSTUFF f --//[mylock]
		                                WHERE(1=1)
		                                FOR
		                                XML PATH('')
		                                ), 1, 1, ''
                                    ) AS ListRefNo
                                where(1=1)
                                ;

                                --- Clear For Debug:
                                drop table #tbl_Invoice_Invoice_ForSTUFF;
						    "
                            , "@strInvoiceReplace", TConst.SourceInvoiceCode.InvoiceReplace
                            );
                        DataTable dt_CheckInvalidInvoiceCode = _cf.db.ExecQuery(
                            strSql_CheckInvalidInvoiceCode
                            ).Tables[0];
                        /////
                        if (dt_CheckInvalidInvoiceCode.Rows.Count > 0)
                        {
                            /////
                            string strListRefNo = TUtils.CUtils.StdParam(dt_CheckInvalidInvoiceCode.Rows[0]["ListRefNo"]);
                            ////
                            if (!string.IsNullOrEmpty(strListRefNo))
                            {
                                alParamsCoupleError.AddRange(new object[]{
                                    "Check.ErrConditionalRaise", "and t.SourceInvoiceCode in ('@strInvoiceReplace')  and (f.InvoiceStatus not in ('DELETED', 'ISSUED')) "
                                    , "Check.strListRefNo", strListRefNo
                                    });
                                throw CmUtils.CMyException.Raise(
                                    TError.ErridnInventory.Invoice_Invoice_SaveX_Input_Invoice_InvalidInvoiceStatusRefNo
                                    , null
                                    , alParamsCoupleError.ToArray()
                                    );

                            }
                        }
                        ////
                    }
                    #endregion

                    #region ----// Không cho phép xóa hóa đơn thay thế:
                    if (bIsDelete)
                    {
                        string strSql_CheckInvalidInvoiceCode = CmUtils.StringUtils.Replace(@"
                                --- #tbl_Invoice_Invoice_ForSTUFF:
                                select distinct 
                                    t.RefNo
                                into #tbl_Invoice_Invoice_ForSTUFF
                                from #input_Invoice_Invoice t --//[mylock]
                                where(1=1)
                                ;

                                --- Return:					
                                select 
                                    STUFF(( 
		                                SELECT ',' + f.RefNo
		                                FROM #tbl_Invoice_Invoice_ForSTUFF f --//[mylock]
		                                WHERE(1=1)
		                                FOR
		                                XML PATH('')
		                                ), 1, 1, ''
                                    ) AS ListRefNo
                                where(1=1)
                                ;

                                --- Clear For Debug:
                                drop table #tbl_Invoice_Invoice_ForSTUFF;
						    "
                            , "@strInvoiceReplace", TConst.SourceInvoiceCode.InvoiceReplace
                            );
                        DataTable dt_CheckInvalidInvoiceCode = _cf.db.ExecQuery(
                            strSql_CheckInvalidInvoiceCode
                            ).Tables[0];
                        /////
                        if (dt_CheckInvalidInvoiceCode.Rows.Count > 0)
                        {
                            /////
                            string strListRefNo = TUtils.CUtils.StdParam(dt_CheckInvalidInvoiceCode.Rows[0]["ListRefNo"]);
                            ////
                            if (!string.IsNullOrEmpty(strListRefNo))
                            {
                                alParamsCoupleError.AddRange(new object[]{
                                    "Check.strListRefNo", strListRefNo
                                    });
                                throw CmUtils.CMyException.Raise(
                                    TError.ErridnInventory.Invoice_Invoice_SaveX_NotDelete
                                    , null
                                    , alParamsCoupleError.ToArray()
                                    );

                            }
                        }
                        ////
                    }
                    #endregion
                }
                #endregion

                #region ----// Check Mst_NNT:
                {
                    string strSql_CheckMstNNT = CmUtils.StringUtils.Replace(@"
                            --- #tbl_Invoice_Invoice_ForSTUFF:
                            select distinct 
	                            t.MST
                            into #tbl_Invoice_Invoice_ForSTUFF_Exist
                            from #input_Invoice_Invoice t --//[mylock]
	                            left join Mst_NNT f --//[mylock]
		                            on t.MST = f.MST
                            where(1=1)
	                            and f.MST is null
                            ;

                            --- #tbl_Invoice_Invoice_ForSTUFF_Active:
                            select distinct 
	                            t.MST
                            into #tbl_Invoice_Invoice_ForSTUFF_Active
                            from #input_Invoice_Invoice t --//[mylock]
	                            left join Mst_NNT f --//[mylock]
		                            on t.MST = f.MST
                            where(1=1)
	                            and f.FlagActive = '0'
                            ;

                            --- Return:					
                            select 
                                STUFF(( 
		                            SELECT ',' + f.MST
		                            FROM #tbl_Invoice_Invoice_ForSTUFF_Exist f --//[mylock]
		                            WHERE(1=1)
		                            FOR
		                            XML PATH('')
		                            ), 1, 1, ''
                                ) AS ListMST
                            where(1=1)
                            ;

                            --- Return:					
                            select 
                                STUFF(( 
		                            SELECT ',' + f.MST
		                            FROM #tbl_Invoice_Invoice_ForSTUFF_Active f --//[mylock]
		                            WHERE(1=1)
		                            FOR
		                            XML PATH('')
		                            ), 1, 1, ''
                                ) AS ListMST
                            where(1=1)
                            ;

                            --- Clear For Debug:
                            drop table #tbl_Invoice_Invoice_ForSTUFF_Exist;
                            drop table #tbl_Invoice_Invoice_ForSTUFF_Active;
						");
                    DataSet ds_CheckMstNNT = _cf.db.ExecQuery(
                        strSql_CheckMstNNT
                        );
                    ////
                    DataTable dt_Invoice_Invoice_ForSTUFF_Exist = ds_CheckMstNNT.Tables[0];
                    DataTable dt_Invoice_Invoice_ForSTUFF_Active = ds_CheckMstNNT.Tables[1];
                    /////
                    if (dt_Invoice_Invoice_ForSTUFF_Exist.Rows.Count > 0)
                    {
                        string strListMST = TUtils.CUtils.StdParam(dt_Invoice_Invoice_ForSTUFF_Exist.Rows[0]["ListMST"]);
                        /////
                        if (!string.IsNullOrEmpty(strListMST))
                        {
                            alParamsCoupleError.AddRange(new object[]{
                                "Check.ErrConditionalRaise", "Mst_NNT.MST is null"
                                , "Check.strListMST", strListMST
                                });
                            throw CmUtils.CMyException.Raise(
                                TError.ErridnInventory.Invoice_Invoice_SaveX_Invalid_MstNNT_NotFound
                                , null
                                , alParamsCoupleError.ToArray()
                                );
                        }
                        /////
                    }
                    ////
                    if (dt_Invoice_Invoice_ForSTUFF_Active.Rows.Count > 0)
                    {
                        string strListMST = TUtils.CUtils.StdParam(dt_Invoice_Invoice_ForSTUFF_Active.Rows[0]["ListMST"]);
                        /////
                        if (!string.IsNullOrEmpty(strListMST))
                        {
                            alParamsCoupleError.AddRange(new object[]{
                                "Check.ErrConditionalRaise", "Mst_NNT.FlagActive = '0'"
                                , "Check.strListMST", strListMST
                                });
                            throw CmUtils.CMyException.Raise(
                                TError.ErridnInventory.Invoice_Invoice_SaveX_Invalid_MstNNT_FlagActive
                                , null
                                , alParamsCoupleError.ToArray()
                                );
                        }
                        /////
                    }
                    ////
                }
                #endregion

                #region ----// Check Mst_CustomerNNT:
                {
                    string strSql_CheckMstCustomerNNT = CmUtils.StringUtils.Replace(@"
                            --- #tbl_Invoice_Invoice_ForSTUFF:
                            select distinct 
	                            t.CustomerMST
                            into #tbl_Invoice_Invoice_ForSTUFF_Exist
                            from #input_Invoice_Invoice t --//[mylock]
	                            left join Mst_CustomerNNT f --//[mylock]
		                            on t.CustomerMST = f.CustomerMST
                            where(1=1)
	                            and f.CustomerMST is null
                            ;

                            --- #tbl_Invoice_Invoice_ForSTUFF_Active:
                            select distinct 
	                            t.CustomerMST
                            into #tbl_Invoice_Invoice_ForSTUFF_Active
                            from #input_Invoice_Invoice t --//[mylock]
	                            left join Mst_CustomerNNT f --//[mylock]
		                            on t.CustomerMST = f.CustomerMST
                            where(1=1)
	                            and f.FlagActive = '0'
                            ;

                            --- Return:					
                            select 
                                STUFF(( 
		                            SELECT ',' + f.CustomerMST
		                            FROM #tbl_Invoice_Invoice_ForSTUFF_Exist f --//[mylock]
		                            WHERE(1=1)
		                            FOR
		                            XML PATH('')
		                            ), 1, 1, ''
                                ) AS ListCustomerMST
                            where(1=1)
                            ;

                            --- Return:					
                            select 
                                STUFF(( 
		                            SELECT ',' + f.CustomerMST
		                            FROM #tbl_Invoice_Invoice_ForSTUFF_Active f --//[mylock]
		                            WHERE(1=1)
		                            FOR
		                            XML PATH('')
		                            ), 1, 1, ''
                                ) AS ListCustomerMST
                            where(1=1)
                            ;

                            --- Clear For Debug:
                            drop table #tbl_Invoice_Invoice_ForSTUFF_Exist;
                            drop table #tbl_Invoice_Invoice_ForSTUFF_Active;
						");
                    DataSet ds_CheckMstCustomerNNT = _cf.db.ExecQuery(
                        strSql_CheckMstCustomerNNT
                        );
                    ////
                    DataTable dt_Invoice_Invoice_ForSTUFF_Exist = ds_CheckMstCustomerNNT.Tables[0];
                    DataTable dt_Invoice_Invoice_ForSTUFF_Active = ds_CheckMstCustomerNNT.Tables[1];
                    /////
                    if (dt_Invoice_Invoice_ForSTUFF_Exist.Rows.Count > 0)
                    {
                        string strListCustomerMST = TUtils.CUtils.StdParam(dt_Invoice_Invoice_ForSTUFF_Exist.Rows[0]["ListCustomerMST"]);
                        /////
                        if (!string.IsNullOrEmpty(strListCustomerMST))
                        {
                            alParamsCoupleError.AddRange(new object[]{
                                "Check.ErrConditionalRaise", "Mst_NNT.CustomerMST is null"
                                , "Check.strListCustomerMST", strListCustomerMST
                                });
                            throw CmUtils.CMyException.Raise(
                                TError.ErridnInventory.Invoice_Invoice_SaveX_Invalid_MstCustomerNNT_NotFound
                                , null
                                , alParamsCoupleError.ToArray()
                                );
                        }
                        /////
                    }
                    ////
                    if (dt_Invoice_Invoice_ForSTUFF_Active.Rows.Count > 0)
                    {
                        string strListCustomerMST = TUtils.CUtils.StdParam(dt_Invoice_Invoice_ForSTUFF_Active.Rows[0]["ListCustomerMST"]);
                        /////
                        if (!string.IsNullOrEmpty(strListCustomerMST))
                        {
                            alParamsCoupleError.AddRange(new object[]{
                                "Check.ErrConditionalRaise", "Mst_NNT.FlagActive = '0'"
                                , "Check.strListCustomerMST", strListCustomerMST
                                });
                            throw CmUtils.CMyException.Raise(
                                TError.ErridnInventory.Invoice_Invoice_SaveX_Invalid_MstCustomerNNT_FlagActive
                                , null
                                , alParamsCoupleError.ToArray()
                                );
                        }
                        /////
                    }
                    ////
                }
                #endregion

                #region ----// Check Mst_PaymentMethods:
                {
                    string strSql_CheckPaymentMethods = CmUtils.StringUtils.Replace(@"
                            --- #tbl_Invoice_Invoice_ForSTUFF:
                            select distinct 
	                            t.PaymentMethodCode
                            into #tbl_Invoice_Invoice_ForSTUFF_Exist
                            from #input_Invoice_Invoice t --//[mylock]
	                            left join Mst_PaymentMethods f --//[mylock]
		                            on t.PaymentMethodCode = f.PaymentMethodCode
                            where(1=1)
	                            and f.PaymentMethodCode is null
                            ;

                            --- #tbl_Invoice_Invoice_ForSTUFF_Active:
                            select distinct 
	                            t.PaymentMethodCode
                            into #tbl_Invoice_Invoice_ForSTUFF_Active
                            from #input_Invoice_Invoice t --//[mylock]
	                            left join Mst_PaymentMethods f --//[mylock]
		                            on t.PaymentMethodCode = f.PaymentMethodCode
                            where(1=1)
	                            and f.FlagActive = '0'
                            ;

                            --- Return:					
                            select 
                                STUFF(( 
		                            SELECT ',' + f.PaymentMethodCode
		                            FROM #tbl_Invoice_Invoice_ForSTUFF_Exist f --//[mylock]
		                            WHERE(1=1)
		                            FOR
		                            XML PATH('')
		                            ), 1, 1, ''
                                ) AS ListPaymentMethodCode
                            where(1=1)
                            ;

                            --- Return:					
                            select 
                                STUFF(( 
		                            SELECT ',' + f.PaymentMethodCode
		                            FROM #tbl_Invoice_Invoice_ForSTUFF_Active f --//[mylock]
		                            WHERE(1=1)
		                            FOR
		                            XML PATH('')
		                            ), 1, 1, ''
                                ) AS ListPaymentMethodCode
                            where(1=1)
                            ;

                            --- Clear For Debug:
                            drop table #tbl_Invoice_Invoice_ForSTUFF_Exist;
                            drop table #tbl_Invoice_Invoice_ForSTUFF_Active;
						");
                    DataSet ds_CheckMst_PaymentMethods = _cf.db.ExecQuery(
                        strSql_CheckPaymentMethods
                        );
                    ////
                    DataTable dt_Invoice_Invoice_ForSTUFF_Exist = ds_CheckMst_PaymentMethods.Tables[0];
                    DataTable dt_Invoice_Invoice_ForSTUFF_Active = ds_CheckMst_PaymentMethods.Tables[1];
                    /////
                    if (dt_Invoice_Invoice_ForSTUFF_Exist.Rows.Count > 0)
                    {
                        string strListPaymentMethodCode = TUtils.CUtils.StdParam(dt_Invoice_Invoice_ForSTUFF_Exist.Rows[0]["ListPaymentMethodCode"]);
                        /////
                        if (!string.IsNullOrEmpty(strListPaymentMethodCode))
                        {
                            alParamsCoupleError.AddRange(new object[]{
                                "Check.ErrConditionalRaise", "Mst_PaymentMethods.PaymentMethodCode is null"
                                , "Check.strListPaymentMethodCode", strListPaymentMethodCode
                                });
                            throw CmUtils.CMyException.Raise(
                                TError.ErridnInventory.Invoice_Invoice_SaveX_Invalid_PaymentMethods_NotFound
                                , null
                                , alParamsCoupleError.ToArray()
                                );
                        }
                        /////
                    }
                    ////
                    if (dt_Invoice_Invoice_ForSTUFF_Active.Rows.Count > 0)
                    {
                        string strListPaymentMethodCode = TUtils.CUtils.StdParam(dt_Invoice_Invoice_ForSTUFF_Active.Rows[0]["ListPaymentMethodCode"]);
                        /////
                        if (!string.IsNullOrEmpty(strListPaymentMethodCode))
                        {
                            alParamsCoupleError.AddRange(new object[]{
                                "Check.ErrConditionalRaise", "Mst_PaymentMethods.FlagActive = '0'"
                                , "Check.strListPaymentMethodCode", strListPaymentMethodCode
                                });
                            throw CmUtils.CMyException.Raise(
                                TError.ErridnInventory.Invoice_Invoice_SaveX_Invalid_PaymentMethods_FlagActive
                                , null
                                , alParamsCoupleError.ToArray()
                                );
                        }
                        /////
                    }
                    ////
                }
                #endregion

                #region ----// Check Mst_InvoiceType2:
                {
                    string strSql_CheckInvoiceType2 = CmUtils.StringUtils.Replace(@"
                            --- #tbl_Invoice_Invoice_ForSTUFF:
                            select distinct 
	                            t.InvoiceType2
                            into #tbl_Invoice_Invoice_ForSTUFF_Exist
                            from #input_Invoice_Invoice t --//[mylock]
	                            left join Mst_InvoiceType2 f --//[mylock]
		                            on t.InvoiceType2 = f.InvoiceType2
                            where(1=1)
	                            and f.InvoiceType2 is null
                            ;

                            --- #tbl_Invoice_Invoice_ForSTUFF_Active:
                            select distinct 
	                            t.InvoiceType2
                            into #tbl_Invoice_Invoice_ForSTUFF_Active
                            from #input_Invoice_Invoice t --//[mylock]
	                            left join Mst_InvoiceType2 f --//[mylock]
		                            on t.InvoiceType2 = f.InvoiceType2
                            where(1=1)
	                            and f.FlagActive = '0'
                            ;

                            --- Return:					
                            select 
                                STUFF(( 
		                            SELECT ',' + f.InvoiceType2
		                            FROM #tbl_Invoice_Invoice_ForSTUFF_Exist f --//[mylock]
		                            WHERE(1=1)
		                            FOR
		                            XML PATH('')
		                            ), 1, 1, ''
                                ) AS ListInvoiceType2
                            where(1=1)
                            ;

                            --- Return:					
                            select 
                                STUFF(( 
		                            SELECT ',' + f.InvoiceType2
		                            FROM #tbl_Invoice_Invoice_ForSTUFF_Active f --//[mylock]
		                            WHERE(1=1)
		                            FOR
		                            XML PATH('')
		                            ), 1, 1, ''
                                ) AS ListInvoiceType2
                            where(1=1)
                            ;

                            --- Clear For Debug:
                            drop table #tbl_Invoice_Invoice_ForSTUFF_Exist;
                            drop table #tbl_Invoice_Invoice_ForSTUFF_Active;
						");
                    DataSet ds_CheckMst_InvoiceType2 = _cf.db.ExecQuery(
                        strSql_CheckInvoiceType2
                        );
                    ////
                    DataTable dt_Invoice_Invoice_ForSTUFF_Exist = ds_CheckMst_InvoiceType2.Tables[0];
                    DataTable dt_Invoice_Invoice_ForSTUFF_Active = ds_CheckMst_InvoiceType2.Tables[1];
                    /////
                    if (dt_Invoice_Invoice_ForSTUFF_Exist.Rows.Count > 0)
                    {
                        string strListInvoiceType2 = TUtils.CUtils.StdParam(dt_Invoice_Invoice_ForSTUFF_Exist.Rows[0]["ListInvoiceType2"]);
                        /////
                        if (!string.IsNullOrEmpty(strListInvoiceType2))
                        {
                            alParamsCoupleError.AddRange(new object[]{
                                "Check.ErrConditionalRaise", "Mst_InvoiceType2.InvoiceType2 is null"
                                , "Check.strListInvoiceType2", strListInvoiceType2
                                });
                            throw CmUtils.CMyException.Raise(
                                TError.ErridnInventory.Invoice_Invoice_SaveX_Invalid_InvoiceType2_NotFound
                                , null
                                , alParamsCoupleError.ToArray()
                                );
                        }
                        /////
                    }
                    ////
                    if (dt_Invoice_Invoice_ForSTUFF_Active.Rows.Count > 0)
                    {
                        string strListInvoiceType2 = TUtils.CUtils.StdParam(dt_Invoice_Invoice_ForSTUFF_Active.Rows[0]["ListInvoiceType2"]);
                        /////
                        if (!string.IsNullOrEmpty(strListInvoiceType2))
                        {
                            alParamsCoupleError.AddRange(new object[]{
                                "Check.ErrConditionalRaise", "Mst_InvoiceType2.FlagActive = '0'"
                                , "Check.strListInvoiceType2", strListInvoiceType2
                                });
                            throw CmUtils.CMyException.Raise(
                                TError.ErridnInventory.Invoice_Invoice_SaveX_Invalid_InvoiceType2_FlagActive
                                , null
                                , alParamsCoupleError.ToArray()
                                );
                        }
                        /////
                    }
                    ////
                }
                #endregion

                #region ----// Check Mst_SourceInvoice:
                {
                    string strSql_CheckMst_SourceInvoice = CmUtils.StringUtils.Replace(@"
                            --- #tbl_Invoice_Invoice_ForSTUFF:
                            select distinct 
	                            t.SourceInvoiceCode
                            into #tbl_Invoice_Invoice_ForSTUFF_Exist
                            from #input_Invoice_Invoice t --//[mylock]
	                            left join Mst_SourceInvoice f --//[mylock]
		                            on t.SourceInvoiceCode = f.SourceInvoiceCode
                            where(1=1)
	                            and f.SourceInvoiceCode is null
                            ;

                            --- #tbl_Invoice_Invoice_ForSTUFF_Active:
                            select distinct 
	                            t.SourceInvoiceCode
                            into #tbl_Invoice_Invoice_ForSTUFF_Active
                            from #input_Invoice_Invoice t --//[mylock]
	                            left join Mst_SourceInvoice f --//[mylock]
		                            on t.SourceInvoiceCode = f.SourceInvoiceCode
                            where(1=1)
	                            and f.FlagActive = '0'
                            ;

                            --- Return:					
                            select 
                                STUFF(( 
		                            SELECT ',' + f.SourceInvoiceCode
		                            FROM #tbl_Invoice_Invoice_ForSTUFF_Exist f --//[mylock]
		                            WHERE(1=1)
		                            FOR
		                            XML PATH('')
		                            ), 1, 1, ''
                                ) AS ListSourceInvoiceCode
                            where(1=1)
                            ;

                            --- Return:					
                            select 
                                STUFF(( 
		                            SELECT ',' + f.SourceInvoiceCode
		                            FROM #tbl_Invoice_Invoice_ForSTUFF_Active f --//[mylock]
		                            WHERE(1=1)
		                            FOR
		                            XML PATH('')
		                            ), 1, 1, ''
                                ) AS ListSourceInvoiceCode
                            where(1=1)
                            ;

                            --- Clear For Debug:
                            drop table #tbl_Invoice_Invoice_ForSTUFF_Exist;
                            drop table #tbl_Invoice_Invoice_ForSTUFF_Active;
						");
                    DataSet ds_CheckMst_PaymentMethods = _cf.db.ExecQuery(
                        strSql_CheckMst_SourceInvoice
                        );
                    ////
                    DataTable dt_Invoice_Invoice_ForSTUFF_Exist = ds_CheckMst_PaymentMethods.Tables[0];
                    DataTable dt_Invoice_Invoice_ForSTUFF_Active = ds_CheckMst_PaymentMethods.Tables[1];
                    /////
                    if (dt_Invoice_Invoice_ForSTUFF_Exist.Rows.Count > 0)
                    {
                        string strListSourceInvoiceCode = TUtils.CUtils.StdParam(dt_Invoice_Invoice_ForSTUFF_Exist.Rows[0]["ListSourceInvoiceCode"]);
                        /////
                        if (!string.IsNullOrEmpty(strListSourceInvoiceCode))
                        {
                            alParamsCoupleError.AddRange(new object[]{
                                "Check.ErrConditionalRaise", "Mst_SourceInvoice.SourceInvoiceCode is null"
                                , "Check.strListSourceInvoiceCode", strListSourceInvoiceCode
                                });
                            throw CmUtils.CMyException.Raise(
                                TError.ErridnInventory.Invoice_Invoice_SaveX_Invalid_SourceInvoice_NotFound
                                , null
                                , alParamsCoupleError.ToArray()
                                );
                        }
                        /////
                    }
                    ////
                    if (dt_Invoice_Invoice_ForSTUFF_Active.Rows.Count > 0)
                    {
                        string strListSourceInvoiceCode = TUtils.CUtils.StdParam(dt_Invoice_Invoice_ForSTUFF_Active.Rows[0]["ListSourceInvoiceCode"]);
                        /////
                        if (!string.IsNullOrEmpty(strListSourceInvoiceCode))
                        {
                            alParamsCoupleError.AddRange(new object[]{
                                "Check.ErrConditionalRaise", "Mst_SourceInvoice.FlagActive = '0'"
                                , "Check.strListPaymentMethodCode", strListSourceInvoiceCode
                                });
                            throw CmUtils.CMyException.Raise(
                                TError.ErridnInventory.Invoice_Invoice_SaveX_Invalid_SourceInvoice_FlagActive
                                , null
                                , alParamsCoupleError.ToArray()
                                );
                        }
                        /////
                    }
                    ////
                }
                #endregion

                #region ----// Check Invoice_TempInvoice:
                {
                    string strSql_CheckInvoice_TempInvoice = CmUtils.StringUtils.Replace(@"
                            --- #tbl_Invoice_Invoice_ForSTUFF_Exist:
                            select distinct 
	                            t.TInvoiceCode
                            into #tbl_Invoice_Invoice_ForSTUFF_Exist
                            from #input_Invoice_Invoice t --//[mylock]
	                            left join Invoice_TempInvoice f --//[mylock]
		                            on t.TInvoiceCode = f.TInvoiceCode
                            where(1=1)
	                            and f.TInvoiceCode is null
                            ;

                            --- #tbl_Invoice_Invoice_ForSTUFF_Active:
                            select distinct 
	                            t.TInvoiceCode
                            into #tbl_Invoice_Invoice_ForSTUFF_Active
                            from #input_Invoice_Invoice t --//[mylock]
	                            left join Invoice_TempInvoice f --//[mylock]
		                            on t.TInvoiceCode = f.TInvoiceCode
                            where(1=1)
	                            and f.TInvoiceStatus not in ('ISSUED')
                            ;

                            --- Return:					
                            select 
                                STUFF(( 
		                            SELECT ',' + f.TInvoiceCode
		                            FROM #tbl_Invoice_Invoice_ForSTUFF_Exist f --//[mylock]
		                            WHERE(1=1)
		                            FOR
		                            XML PATH('')
		                            ), 1, 1, ''
                                ) AS ListTInvoiceCode
                            where(1=1)
                            ;

                            --- Return:					
                            select 
                                STUFF(( 
		                            SELECT ',' + f.TInvoiceCode
		                            FROM #tbl_Invoice_Invoice_ForSTUFF_Active f --//[mylock]
		                            WHERE(1=1)
		                            FOR
		                            XML PATH('')
		                            ), 1, 1, ''
                                ) AS ListTInvoiceCode
                            where(1=1)
                            ;

                            --- Clear For Debug:
                            drop table #tbl_Invoice_Invoice_ForSTUFF_Exist;
                            drop table #tbl_Invoice_Invoice_ForSTUFF_Active;
						");
                    DataSet ds_CheckInvoice_TempInvoice = _cf.db.ExecQuery(
                        strSql_CheckInvoice_TempInvoice
                        );
                    ////
                    DataTable dt_Invoice_Invoice_ForSTUFF_Exist = ds_CheckInvoice_TempInvoice.Tables[0];
                    DataTable dt_Invoice_Invoice_ForSTUFF_Active = ds_CheckInvoice_TempInvoice.Tables[1];
                    /////
                    if (dt_Invoice_Invoice_ForSTUFF_Exist.Rows.Count > 0)
                    {
                        string strListTInvoiceCode = TUtils.CUtils.StdParam(dt_Invoice_Invoice_ForSTUFF_Exist.Rows[0]["ListTInvoiceCode"]);
                        /////
                        if (!string.IsNullOrEmpty(strListTInvoiceCode))
                        {
                            alParamsCoupleError.AddRange(new object[]{
                                "Check.ErrConditionalRaise", "Invoice_TempInvoice.TInvoiceCode is null"
                                , "Check.strListTInvoiceCode", strListTInvoiceCode
                                });
                            throw CmUtils.CMyException.Raise(
                                TError.ErridnInventory.Invoice_Invoice_SaveX_Invalid_TempInvoice_NotFound
                                , null
                                , alParamsCoupleError.ToArray()
                                );
                        }
                        /////
                    }
                    ////
                    if (dt_Invoice_Invoice_ForSTUFF_Active.Rows.Count > 0)
                    {
                        string strListTInvoiceCode = TUtils.CUtils.StdParam(dt_Invoice_Invoice_ForSTUFF_Active.Rows[0]["ListTInvoiceCode"]);
                        /////
                        if (!string.IsNullOrEmpty(strListTInvoiceCode))
                        {
                            alParamsCoupleError.AddRange(new object[]{
                                "Check.ErrConditionalRaise", "Invoice_TempInvoice.TInvoiceStatus not in ('ISSUED')"
                                , "Check.strListTInvoiceCode", strListTInvoiceCode
                                });
                            throw CmUtils.CMyException.Raise(
                                TError.ErridnInventory.Invoice_Invoice_SaveX_Invalid_TempInvoice_StatusNotMatch
                                , null
                                , alParamsCoupleError.ToArray()
                                );
                        }
                        /////
                    }
                    ////
                }
                #endregion

                #region ----// Check SL hóa đơn sử dụng:
                {
                    string strSql_CheckInvoice_TempInvoice = CmUtils.StringUtils.Replace(@"
                            --- #tbl_Invoice_TempInvoice:
                            select distinct 
	                            t.TInvoiceCode
                            into #tbl_Invoice_TempInvoice
                            from #input_Invoice_Invoice t --//[mylock]
	                            inner join Invoice_TempInvoice f --//[mylock]
		                            on t.TInvoiceCode = t.TInvoiceCode
                            where(1=1)
                            ;

							---- Return:
							select 
								t.TInvoiceCode
								, f.EndInvoiceNo
								, f.StartInvoiceNo
								, f.QtyUsed
								, (f.EndInvoiceNo - f.StartInvoiceNo + 1 - f.QtyUsed) QtyRemain
							from #tbl_Invoice_TempInvoice t --//[mylock]
								inner join Invoice_TempInvoice f --//[mylock]
									on t.TInvoiceCode = f.TInvoiceCode
							where(1=1)
								and (f.EndInvoiceNo - f.StartInvoiceNo + 1 - f.QtyUsed) < 1
							;

                            --- Clear For Debug:
                            drop table #tbl_Invoice_TempInvoice;
						");
                    DataSet ds_Invoice_TempInvoice = _cf.db.ExecQuery(
                        strSql_CheckInvoice_TempInvoice
                        );
                    ////
                    DataTable dt_Invoice_TempInvoice = ds_Invoice_TempInvoice.Tables[0];
                    /////
                    if (dt_Invoice_TempInvoice.Rows.Count > 0)
                    {
                        alParamsCoupleError.AddRange(new object[]{
                            "Check.strTInvoiceCode", dt_Invoice_TempInvoice.Rows[0]["TInvoiceCode"]
                            , "Check.DB.StartInvoiceNo", dt_Invoice_TempInvoice.Rows[0]["StartInvoiceNo"]
                            , "Check.DB.EndInvoiceNo", dt_Invoice_TempInvoice.Rows[0]["EndInvoiceNo"]
                            , "Check.DB.QtyUsed",  dt_Invoice_TempInvoice.Rows[0]["QtyUsed"]
                            , "Check.ErrConditionRaise", "((nEndInvoiceNo - nStartInvoiceNo - nQtyUsed)< 1)"
                            });
                        throw CmUtils.CMyException.Raise(
                            TError.ErridnInventory.Invoice_Invoice_SaveX_Invalid_SourceInvoice_NotFound
                            , null
                            , alParamsCoupleError.ToArray()
                            );
                    }
                    ////
                }
                #endregion
            }
            #endregion

            #region // Build Invoice_Invoice:
            {
                string strSql_Build = CmUtils.StringUtils.Replace(@" ----- #tbl_Invoice_Invoice_Build:
                        select 
	                        t.InvoiceCode
	                        , t.MST
	                        , mcnnt.NetworkID
	                        , t.RefNo
	                        , iti.FormNo 
	                        , iti.Sign Sign
	                        , t.SourceInvoiceCode
	                        , t.InvoiceAdjType
	                        , t.InvoiceType2
	                        , t.PaymentMethodCode
	                        , t.CustomerNNTCode
	                        , mcnnt.CustomerNNTName
	                        , mcnnt.CustomerNNTAddress
	                        , mcnnt.CustomerNNTPhone
	                        , mcnnt.BankName CustomerNNTBankName
	                        , mcnnt.CustomerNNTEmail
	                        , mcnnt.AccNo CustomerNNTAccNo
	                        , mcnnt.ContactName CustomerNNTBuyerName
	                        , mcnnt.CustomerMST
	                        , t.TInvoiceCode
	                        , t.InvoiceNo
	                        , t.InvoiceDateUTC
	                        , mcnnt.ContactEmail EmailSend
	                        , t.InvoiceFileSpec
	                        , t.InvoiceFilePath
	                        , null InvoicePDFFilePath
	                        , t.TotalValInvoice
	                        , t.TotalValVAT
	                        , t.TotalValPmt
	                        , IsNull(f.CreateDTimeUTC, '@strLogLUDTimeUTC') CreateDTimeUTC --t.CreateDTimeUTC
	                        , IsNull(f.CreateBy, '@strLogLUBy') CreateBy --t.CreateBy
	                        , t.InvoiceNoDTimeUTC
	                        , t.InvoiceNoBy
	                        , t.SignDTimeUTC
	                        , t.SignBy
	                        , t.ApprDTimeUTC
	                        , t.ApprBy
	                        , t.CancelDTimeUTC
	                        , t.CancelBy
	                        , t.SendEmailDTimeUTC
	                        , t.SendEmailBy
	                        , t.IssuedDTimeUTC
	                        , t.IssuedBy
                            , null AttachedDelFilePath
                            , null DeleteReason
                            , t.DeleteDTimeUTC
	                        , t.DeleteBy
	                        , t.ChangeDTimeUTC
	                        , t.ChangeBy
	                        , t.InvoiceVerifyCQTCode
	                        , t.CurrencyCode
	                        , t.CurrencyRate
	                        , t.ValGoodsNotTaxable
	                        , t.ValGoodsNotChargeTax
	                        , t.ValGoodsVAT5
	                        , t.ValVAT5
	                        , t.ValGoodsVAT10
	                        , t.ValVAT10
	                        , mnnt.NNTFullName
	                        , mnnt.NNTAddress NNTFullAdress
	                        , mnnt.NNTPhone
	                        , mnnt.NNTFax
	                        , mnnt.ContactEmail NNTEmail
	                        , mnnt.Website NNTWebsite
	                        , mnnt.AccNo NNTAccNo
	                        , mnnt.BankName NNTBankName
	                        , '@strLogLUDTimeUTC' LUDTimeUTC --t.LUDTimeUTC
	                        , '@strLogLUBy' LUBy --t.LUBy
	                        , t.Remark
	                        , t.InvoiceCF1
	                        , t.InvoiceCF2
	                        , t.InvoiceCF3
	                        , t.InvoiceCF4
	                        , t.InvoiceCF5
	                        , t.InvoiceCF6
	                        , t.InvoiceCF7
	                        , t.InvoiceCF8
	                        , t.InvoiceCF9
	                        , t.InvoiceCF10
	                        --, t.FlagConfirm
	                        , '1' FlagChange --t.FlagChange
	                        , null FlagPushOutSite -- t.FlagPushOutSite
	                        , null FlagDeleteOutSite -- t.FlagDeleteOutSite
	                        , '@strInvoiceStatus' InvoiceStatus --t.InvoiceStatus
	                        , '@strLogLUDTimeUTC' LogLUDTimeUTC --t.LogLUDTimeUTC
	                        , '@strLogLUBy' LogLUBy --t.LogLUBy
                        into #tbl_Invoice_Invoice_Build
                        from #input_Invoice_Invoice t --//[mylock]
                            left join Invoice_Invoice f --//[mylock]
                                on t.InvoiceCode = f.InvoiceCode
							inner join Mst_NNT mnnt --//[mylock]
								on t.MST = mnnt.MST
							inner join Mst_CustomerNNT mcnnt --//[mylock]
								on t.MST = mcnnt.MST
									and t.CustomerNNTCode = mcnnt.CustomerNNTCode
							inner join Invoice_TempInvoice iti ---//[mylock]
								on t.TInvoiceCode = iti.TInvoiceCode
                        where(1=1)
                        ;

                        select null tbl_Invoice_Invoice_Build, t.* from #tbl_Invoice_Invoice_Build t --//[mylock];
                    ;"
                    , "@strInvoiceStatus", TConst.InvoiceStatus.Pending
                    , "@strLogLUDTimeUTC", dtimeSys.ToString("yyyy-MM-dd hh:mm:ss")
                    , "@strLogLUBy", strWAUserCode
                    );
                DataTable dt_Build = _cf.db.ExecQuery(
                    strSql_Build
                    ).Tables[0];
                /////
            }
            #endregion

            #region //// Refine and Check Input Invoice_InvoiceDtl:
            ////
            DataTable dtInput_Invoice_InvoiceDtl = null;
            if (!bIsDelete)
            {
                ////
                string strTableCheck = "Invoice_InvoiceDtl";
                ////
                if (!dsData.Tables.Contains(strTableCheck))
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.TableName", strTableCheck
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Invoice_Invoice_SaveX_Input_InvoiceDtlTblNotFound
                        , null
                        , alParamsCoupleError.ToArray()
                        );
                }
                dtInput_Invoice_InvoiceDtl = dsData.Tables[strTableCheck];
                ////

                if (dtInput_Invoice_InvoiceDtl.Rows.Count < 1)
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.TableName", strTableCheck
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Invoice_Invoice_SaveX_Input_InvoiceDtlTblInvalid
                        , null
                        , alParamsCoupleError.ToArray()
                        );
                }
                ////
                TUtils.CUtils.StdDataInTable(
                    dtInput_Invoice_InvoiceDtl // dtData
                    , "StdParam", "InvoiceCode" // arrstrCouple
                    , "StdParam", "Idx" // arrstrCouple
                    , "StdParam", "NetworkID" // arrstrCouple
                    , "StdParam", "SpecCode" // arrstrCouple
                    , "", "SpecName" // arrstrCouple
                    , "StdParam", "ProductID" // arrstrCouple
                    , "", "ProductName" // arrstrCouple
                    , "StdParam", "VATRateCode" // arrstrCouple
                    , "float", "VATRate" // arrstrCouple
                    , "StdParam", "UnitCode" // arrstrCouple
                    , "", "UnitName" // arrstrCouple
                    , "float", "UnitPrice" // arrstrCouple
                    , "float", "Qty" // arrstrCouple
                    , "float", "ValInvoice" // arrstrCouple
                    , "float", "ValTax" // arrstrCouple
                    , "StdParam", "InventoryCode" // arrstrCouple
                    , "float", "DiscountRate" // arrstrCouple
                    , "float", "ValDiscount" // arrstrCouple
                    , "", "Remark" // arrstrCouple
                    , "", "InvoiceDCF1" // arrstrCouple
                    , "", "InvoiceDCF2" // arrstrCouple
                    , "", "InvoiceDCF3" // arrstrCouple
                    , "", "InvoiceDCF4" // arrstrCouple
                    , "", "InvoiceDCF5" // arrstrCouple
                    );
                ////
                //TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_InvoiceDtl, "InvoiceCode", typeof(object));
                //TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_InvoiceDtl, "NetworkID", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_InvoiceDtl, "InvoiceDtlStatus", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_InvoiceDtl, "LogLUDTimeUTC", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_InvoiceDtl, "LogLUBy", typeof(object));
                ////////
            }
            #endregion

            #region //// SaveTemp Invoice_InvoiceDtl For Check:
            if (!bIsDelete)
            {
                // Upload:
                TUtils.CUtils.MyBuildDBDT_Common(
                    _cf.db // db
                    , "#input_Invoice_InvoiceDtl" // strTableName
                    , new object[] {
                            "InvoiceCode", TConst.BizMix.Default_DBColType
                            , "Idx", TConst.BizMix.Default_DBColType
                            , "NetworkID", TConst.BizMix.Default_DBColType
                            , "SpecCode", TConst.BizMix.Default_DBColType
                            , "SpecName", TConst.BizMix.Default_DBColType
                            , "ProductID", TConst.BizMix.Default_DBColType
                            , "ProductName", TConst.BizMix.Default_DBColType
                            , "VATRateCode", TConst.BizMix.Default_DBColType
                            , "VATRate", "float"
                            , "UnitCode", TConst.BizMix.Default_DBColType
                            , "UnitName", TConst.BizMix.Default_DBColType
                            , "UnitPrice", "float"
                            , "Qty", "float"
                            , "ValInvoice", "float"
                            , "ValTax", "float"
                            , "InventoryCode", TConst.BizMix.Default_DBColType
                            , "DiscountRate", "float"
                            , "ValDiscount", "float"
                            , "InvoiceDtlStatus", TConst.BizMix.Default_DBColType
                            , "Remark", TConst.BizMix.Default_DBColType
                            , "InvoiceDCF1", TConst.BizMix.Default_DBColType
                            , "InvoiceDCF2", TConst.BizMix.Default_DBColType
                            , "InvoiceDCF3", TConst.BizMix.Default_DBColType
                            , "InvoiceDCF4", TConst.BizMix.Default_DBColType
                            , "InvoiceDCF5", TConst.BizMix.Default_DBColType
                            , "LogLUDTimeUTC", TConst.BizMix.Default_DBColType
                            , "LogLUBy", TConst.BizMix.Default_DBColType
                        } // arrSingleStructure
                    , dtInput_Invoice_InvoiceDtl // dtData
                );
            }
            #endregion

            #region // Refine and Check Input Invoice_InvoiceDtl:
            if (!bIsDelete)
            {
                #region ----// Check ProductID + SpecCode là duy nhất:
                {
                    string strSql_CheckProducID = CmUtils.StringUtils.Replace(@"                            
                            ---- #tbl_Invoice_InvoiceDtl_TotalProductID:
                            select 
	                            t.InvoiceCode
	                            , t.SpecCode
	                            , t.ProductID
	                            , count(0) QtyProductID
                            into #tbl_Invoice_InvoiceDtl_TotalProductID
                            from #input_Invoice_InvoiceDtl t --//[mylock]
                            where(1=1)
	                            and t.ProductID is not null
                            group by 
	                            t.InvoiceCode
	                            , t.SpecCode
	                            , t.ProductID
                            ;

                            ---- Return:
                            select top 1
	                            t.InvoiceCode
	                            , t.ProductID
	                            , t.SpecCode
	                            , t.QtyProductID
                            from #tbl_Invoice_InvoiceDtl_TotalProductID t --//[mylock]
                            where(1=1)
	                            and t.QtyProductID > 1
                            ;

                            -- Clear For Debug:
                            drop table #tbl_Invoice_InvoiceDtl_TotalProductID;

						");
                    DataTable dt_CheckProductID = _cf.db.ExecQuery(
                        strSql_CheckProducID
                        ).Tables[0];
                    /////
                    if (dt_CheckProductID.Rows.Count > 0)
                    {
                        alParamsCoupleError.AddRange(new object[]{
                            "Check.ErrConditionalRaise", "t.QtyProductID > 1"
                            //, "Check.NumberRows", dt_CheckProductID.Rows.Count
                            , "Check.InvoiceCode", dt_CheckProductID.Rows[0]["InvoiceCode"]
                            , "Check.SpecCode", dt_CheckProductID.Rows[0]["SpecCode"]
                            , "Check.ProductID", dt_CheckProductID.Rows[0]["ProductID"]
                            , "Check.QtyProductID", dt_CheckProductID.Rows[0]["QtyProductID"]
                            });
                        throw CmUtils.CMyException.Raise(
                            TError.ErridnInventory.Invoice_Invoice_SaveX_Input_InvoiceDtl_ProductIDDuplicate
                            , null
                            , alParamsCoupleError.ToArray()
                            );
                    }
                    ////
                }
                #endregion

                #region ----// Check SpecCode là duy nhất:
                {
                    string strSql_CheckSpec = CmUtils.StringUtils.Replace(@"                         
                            ---- #tbl_Invoice_InvoiceDtl_TotalSpec:
                            select 
	                            t.InvoiceCode
	                            , t.SpecCode
	                            , count(0) QtySpecCode
                            into #tbl_Invoice_InvoiceDtl_TotalSpec
                            from #input_Invoice_InvoiceDtl t --//[mylock]
                            where(1=1)
	                            and t.ProductID is null
								and t.SpecCode is not null
                            group by 
	                            t.InvoiceCode
	                            , t.SpecCode
                            ;

                            ---- Return:
                            select top 1
	                            t.InvoiceCode
	                            , t.SpecCode
	                            , t.QtySpecCode
                            from #tbl_Invoice_InvoiceDtl_TotalSpec t --//[mylock]
                            where(1=1)
	                            and t.QtySpecCode > 1
                            ;

                            -- Clear For Debug:
                            drop table #tbl_Invoice_InvoiceDtl_TotalSpec;

						");
                    DataTable dt_CheckSpecCode = _cf.db.ExecQuery(
                        strSql_CheckSpec
                        ).Tables[0];
                    /////
                    if (dt_CheckSpecCode.Rows.Count > 0)
                    {
                        alParamsCoupleError.AddRange(new object[]{
                            "Check.ErrConditionalRaise", "t.QtyProductID > 1"
                            //, "Check.NumberRows", dt_CheckProductID.Rows.Count
                            , "Check.InvoiceCode", dt_CheckSpecCode.Rows[0]["InvoiceCode"]
                            , "Check.SpecCode", dt_CheckSpecCode.Rows[0]["SpecCode"]
                            , "Check.QtySpecCode", dt_CheckSpecCode.Rows[0]["QtySpecCode"]
                            });
                        throw CmUtils.CMyException.Raise(
                            TError.ErridnInventory.Invoice_Invoice_SaveX_Input_InvoiceDtl_SpecCodeDuplicate
                            , null
                            , alParamsCoupleError.ToArray()
                            );
                    }
                    ////
                }
                #endregion

            }
            #endregion

            #region // Build Invoice_InvoiceDtl:
            if (!bIsDelete)
            {
                string strSql_Build = CmUtils.StringUtils.Replace(@"
                        ----- #tbl_Invoice_InvoiceDtl_Build:
                        select 
	                        t.InvoiceCode
							, Row_Number() over( partition by t.InvoiceCode order by t.Idx asc) Idx 
							--, Row_Number() over (order by t.Idx desc) Idx 
	                        --, t.Idx
	                        , '@strNetworkID' NetworkID -- t.NetworkID
	                        , t.SpecCode
	                        , t.SpecName
	                        , t.ProductID
	                        , t.ProductName
	                        , t.VATRateCode
	                        , t.VATRate
	                        , t.UnitCode
	                        , t.UnitName
	                        , t.UnitPrice
	                        , t.Qty
	                        , t.ValInvoice
	                        , t.ValTax
	                        , t.InventoryCode
	                        , t.DiscountRate
	                        , t.ValDiscount
	                        , '@strInvoiceStatus' InvoiceDtlStatus --t.InvoiceDtlStatus
	                        , t.Remark
	                        , t.InvoiceDCF1
	                        , t.InvoiceDCF2
	                        , t.InvoiceDCF3
	                        , t.InvoiceDCF4
	                        , t.InvoiceDCF5
	                        , '@strLogLUDTimeUTC' LogLUDTimeUTC --t.LogLUDTimeUTC
	                        , '@strLogLUBy' LogLUBy --t.LogLUBy
                        into #tbl_Invoice_InvoiceDtl_Build
                        from #input_Invoice_InvoiceDtl t --//[mylock]

                        select null tbl_Invoice_InvoiceDtl_Build, t.* from #tbl_Invoice_InvoiceDtl_Build t --//[mylock];
                    ;"
                    , "@strInvoiceStatus", TConst.InvoiceStatus.Pending
                    , "@strLogLUDTimeUTC", dtimeSys.ToString("yyyy-MM-dd")
                    , "@strLogLUBy", strWAUserCode
                    , "@strNetworkID", nNetworkID
                    );
                DataTable dt_Build = _cf.db.ExecQuery(
                    strSql_Build
                    ).Tables[0];
                /////
            }
            #endregion

            #region // SaveDB:
            {
                //// Clear All:
                {
                    string strSqlDelete = CmUtils.StringUtils.Replace(@"
                            ---- #tbl_Invoice_InvoiceDtl:
                            select 
                                t.InvoiceCode
                                , t.Idx
                            into #tbl_Invoice_InvoiceDtl
                            from Invoice_InvoiceDtl t --//[mylock]
	                            inner join #input_Invoice_Invoice f --//[mylock]
		                            on t.InvoiceCode = f.InvoiceCode
                            where (1=1)
                            ;

                            --- Delete:
                            ---- Invoice_InvoiceDtl:
                            delete t 
                            from Invoice_InvoiceDtl t --//[mylock]
	                            inner join #tbl_Invoice_InvoiceDtl f --//[mylock]
		                            on t.InvoiceCode = f.InvoiceCode
		                                and t.Idx = f.Idx
                            where (1=1)
                            ;

                            ---- Invoice_Invoice:
                            delete t
                            from Invoice_Invoice t --//[mylock]
	                            inner join #input_Invoice_Invoice f --//[mylock]
		                            on t.InvoiceCode = f.InvoiceCode
                            where (1=1)
                            ;

                            --- Clear For Debug:
                            drop table #tbl_Invoice_InvoiceDtl;
						");
                    DataSet dtDB = _cf.db.ExecQuery(
                        strSqlDelete
                        );
                }

                //// Insert All:
                if (!bIsDelete)
                {
                    #region // Insert:
                    {
                        ////
                        string zzzzClauseInsert_Invoice_Invoice_zSave = CmUtils.StringUtils.Replace(@"
                                ---- Invoice_Invoice:                                
                                insert into Invoice_Invoice(
	                                InvoiceCode
	                                , MST
	                                , NetworkID
	                                , RefNo
	                                , FormNo
	                                , Sign
	                                , SourceInvoiceCode
	                                , InvoiceAdjType
	                                , PaymentMethodCode
	                                , InvoiceType2
	                                , CustomerNNTCode
	                                , CustomerNNTName
	                                , CustomerNNTAddress
	                                , CustomerNNTPhone
	                                , CustomerNNTBankName
	                                , CustomerNNTEmail
	                                , CustomerNNTAccNo
	                                , CustomerNNTBuyerName
	                                , CustomerMST
	                                , TInvoiceCode
	                                , InvoiceNo
	                                , InvoiceDateUTC
	                                , EmailSend
	                                , InvoiceFileSpec
	                                , InvoiceFilePath
	                                , InvoicePDFFilePath
	                                , TotalValInvoice
	                                , TotalValVAT
	                                , TotalValPmt
	                                , CreateDTimeUTC
	                                , CreateBy
	                                , InvoiceNoDTimeUTC
	                                , InvoiceNoBy
	                                , SignDTimeUTC
	                                , SignBy
	                                , ApprDTimeUTC
	                                , ApprBy
	                                , CancelDTimeUTC
	                                , CancelBy
	                                , SendEmailDTimeUTC
	                                , SendEmailBy
	                                , IssuedDTimeUTC
	                                , IssuedBy
	                                , AttachedDelFilePath
	                                , DeleteReason
	                                , DeleteDTimeUTC
	                                , DeleteBy
	                                , ChangeDTimeUTC
	                                , ChangeBy
	                                , InvoiceVerifyCQTCode
	                                , CurrencyCode
	                                , CurrencyRate
	                                , ValGoodsNotTaxable
	                                , ValGoodsNotChargeTax
	                                , ValGoodsVAT5
	                                , ValVAT5
	                                , ValGoodsVAT10
	                                , ValVAT10
	                                , NNTFullName
	                                , NNTFullAdress
	                                , NNTPhone
	                                , NNTFax
	                                , NNTEmail
	                                , NNTWebsite
	                                , NNTAccNo
	                                , NNTBankName
	                                , LUDTimeUTC
	                                , LUBy
	                                , Remark
	                                , InvoiceCF1
	                                , InvoiceCF2
	                                , InvoiceCF3
	                                , InvoiceCF4
	                                , InvoiceCF5
	                                , InvoiceCF6
	                                , InvoiceCF7
	                                , InvoiceCF8
	                                , InvoiceCF9
	                                , InvoiceCF10
	                                , FlagChange
	                                , FlagPushOutSite
	                                , FlagDeleteOutSite
	                                , InvoiceStatus
	                                , LogLUDTimeUTC
	                                , LogLUBy
                                )
                                select 
	                                t.InvoiceCode
	                                , t.MST
	                                , t.NetworkID
	                                , t.RefNo
	                                , t.FormNo
	                                , t.Sign
	                                , t.SourceInvoiceCode
	                                , t.InvoiceAdjType
	                                , t.PaymentMethodCode
	                                , t.InvoiceType2
	                                , t.CustomerNNTCode
	                                , t.CustomerNNTName
	                                , t.CustomerNNTAddress
	                                , t.CustomerNNTPhone
	                                , t.CustomerNNTBankName
	                                , t.CustomerNNTEmail
	                                , t.CustomerNNTAccNo
	                                , t.CustomerNNTBuyerName
	                                , t.CustomerMST
	                                , t.TInvoiceCode
	                                , t.InvoiceNo
	                                , t.InvoiceDateUTC
	                                , t.EmailSend
	                                , t.InvoiceFileSpec
	                                , t.InvoiceFilePath
	                                , t.InvoicePDFFilePath
	                                , t.TotalValInvoice
	                                , t.TotalValVAT
	                                , t.TotalValPmt
	                                , t.CreateDTimeUTC
	                                , t.CreateBy
	                                , t.InvoiceNoDTimeUTC
	                                , t.InvoiceNoBy
	                                , t.SignDTimeUTC
	                                , t.SignBy
	                                , t.ApprDTimeUTC
	                                , t.ApprBy
	                                , t.CancelDTimeUTC
	                                , t.CancelBy
	                                , t.SendEmailDTimeUTC
	                                , t.SendEmailBy
	                                , t.IssuedDTimeUTC
	                                , t.IssuedBy
	                                , t.AttachedDelFilePath
	                                , t.DeleteReason
	                                , t.DeleteDTimeUTC
	                                , t.DeleteBy
	                                , t.ChangeDTimeUTC
	                                , t.ChangeBy
	                                , t.InvoiceVerifyCQTCode
	                                , t.CurrencyCode
	                                , t.CurrencyRate
	                                , t.ValGoodsNotTaxable
	                                , t.ValGoodsNotChargeTax
	                                , t.ValGoodsVAT5
	                                , t.ValVAT5
	                                , t.ValGoodsVAT10
	                                , t.ValVAT10
	                                , t.NNTFullName
	                                , t.NNTFullAdress
	                                , t.NNTPhone
	                                , t.NNTFax
	                                , t.NNTEmail
	                                , t.NNTWebsite
	                                , t.NNTAccNo
	                                , t.NNTBankName
	                                , t.LUDTimeUTC
	                                , t.LUBy
	                                , t.Remark
	                                , t.InvoiceCF1
	                                , t.InvoiceCF2
	                                , t.InvoiceCF3
	                                , t.InvoiceCF4
	                                , t.InvoiceCF5
	                                , t.InvoiceCF6
	                                , t.InvoiceCF7
	                                , t.InvoiceCF8
	                                , t.InvoiceCF9
	                                , t.InvoiceCF10
	                                , t.FlagChange
	                                , t.FlagPushOutSite
	                                , t.FlagDeleteOutSite
	                                , t.InvoiceStatus
	                                , t.LogLUDTimeUTC
	                                , t.LogLUBy
                                from #tbl_Invoice_Invoice_Build t --//[mylock]
                            ");
                        /////
                        string zzzzClauseInsert_Invoice_InvoiceDtl_zSave = CmUtils.StringUtils.Replace(@"
                                ---- Invoice_InvoiceDtl:  
                                insert into Invoice_InvoiceDtl(
	                                InvoiceCode
	                                , Idx
	                                , NetworkID
	                                , SpecCode
	                                , SpecName
	                                , ProductID
	                                , ProductName
	                                , VATRateCode
	                                , VATRate
	                                , UnitCode
	                                , UnitName
	                                , UnitPrice
	                                , Qty
	                                , ValInvoice
	                                , ValTax
	                                , InventoryCode
	                                , DiscountRate
	                                , ValDiscount
	                                , InvoiceDtlStatus
	                                , Remark
	                                , InvoiceDCF1
	                                , InvoiceDCF2
	                                , InvoiceDCF3
	                                , InvoiceDCF4
	                                , InvoiceDCF5
	                                , LogLUDTimeUTC
	                                , LogLUBy
                                )
                                select 
	                                t.InvoiceCode
	                                , t.Idx
	                                , t.NetworkID
	                                , t.SpecCode
	                                , t.SpecName
	                                , t.ProductID
	                                , t.ProductName
	                                , t.VATRateCode
	                                , t.VATRate
	                                , t.UnitCode
	                                , t.UnitName
	                                , t.UnitPrice
	                                , t.Qty
	                                , t.ValInvoice
	                                , t.ValTax
	                                , t.InventoryCode
	                                , t.DiscountRate
	                                , t.ValDiscount
	                                , t.InvoiceDtlStatus
	                                , t.Remark
	                                , t.InvoiceDCF1
	                                , t.InvoiceDCF2
	                                , t.InvoiceDCF3
	                                , t.InvoiceDCF4
	                                , t.InvoiceDCF5
	                                , t.LogLUDTimeUTC
	                                , t.LogLUBy
                                from #tbl_Invoice_InvoiceDtl_Build t
                            ");

                        /////
                        string strSqlExec = CmUtils.StringUtils.Replace(@"
								----
								zzzzClauseInsert_Invoice_Invoice_zSave			
								----
								zzzzClauseInsert_Invoice_InvoiceDtl_zSave			
								----
							"
                            , "zzzzClauseInsert_Invoice_Invoice_zSave", zzzzClauseInsert_Invoice_Invoice_zSave
                            , "zzzzClauseInsert_Invoice_InvoiceDtl_zSave", zzzzClauseInsert_Invoice_InvoiceDtl_zSave
                            );
                        ////
                        DataSet dsExec = _cf.db.ExecQuery(strSqlExec);
                        ////
                    }
                    #endregion
                }
            }
            #endregion

            #region // strFt_WhereClause:
            string strListInvoiceCode_Get = "";
            {
                string strSqlDelete = CmUtils.StringUtils.Replace(@"
                            --- Return:
                            select 
                            STUFF(( 
		                            SELECT ',' + f.InvoiceCode
		                            FROM #input_Invoice_Invoice f --//[mylock]
		                            WHERE(1=1)
		                            FOR
		                            XML PATH('')
		                            ), 1, 1, ''
                                ) AS ListInvoiceCode	
                            --into #tbl_List
                            ;                           
						");
                DataTable dtDB_Invoice_Invoice = _cf.db.ExecQuery(
                    strSqlDelete
                    ).Tables[0];
                strListInvoiceCode_Get = string.Format("{0}", dtDB_Invoice_Invoice.Rows[0]["ListInvoiceCode"]).Trim();
            }
            #endregion

            #region // Check One RefNo:
            if (!bIsDelete)
            {
                myCheck_Invoice_Invoice_RefNo_New20190705(
                    ref alParamsCoupleError // alParamsCoupleError
                    , dtimeSys // dtimeSys
                    , "#tbl_Invoice_Invoice_Build"  //zzzz_tbl_Invoice_Invoice_RefNo
                    );
            }
            #endregion

            #region // myCheck_Invoice_Invoice_Total:
            if (!bIsDelete)
            {
                myCheck_Invoice_Invoice_Total_New20190905(
                    ref alParamsCoupleError // alParamsCoupleError
                    , dtimeSys // dtimeSys
                    , "#tbl_Invoice_Invoice_Build"  //zzzz_tbl_Invoice_Invoice_RefNo
                    );
                ////
                myCheck_Invoice_InvoiceDtl_Total_New20190905(
                    ref alParamsCoupleError // alParamsCoupleError
                    , dtimeSys // dtimeSys
                    , "#tbl_Invoice_Invoice_Build"  //zzzz_tbl_Invoice_Invoice_RefNo
                    );
            }
            #endregion

            #region // myCheck_OS_Invoice_Invoice_CheckMasterPrd:

            if (!bIsDelete)
            {
                /*Ngày 2019-08-02:
                * A @HuongNV chốt: Client truyền thêm 1 cờ xác nhận (FlagConfirm) check hàng hóa:
                    + Cờ FlagConfirm chỉ truyền vào không lưu trong DB.
                    + Nếu FlagConfirm = 1 => Không thay đổi luật check hiện tại tính đến trước ngày 2019-08-02.
                    + Nếu FlagConfirm = 0 => Bỏ luật check các FK hàng hóa trừ SpecCode.
                */
                ////
                string strFlagConfirm = dtInput_Invoice_Invoice.Rows[0]["FlagConfirm"].ToString();

                if (CmUtils.StringUtils.StringEqual(strFlagConfirm, TConst.Flag.Active))
                {
                    myCheck_OS_Invoice_Invoice_CheckMasterPrd(
                    ref alParamsCoupleError  //alParamsCoupleError
                    , dtimeSys  //dtimeSys
                    , strTid  //strTid
                    , "#tbl_Invoice_Invoice_Build"  //zzzz_tbl_Invoice_Invoice_RefNo
                    );
                }
                else
                {
                    myCheck_OS_Invoice_Invoice_CheckMasterPrd_NotConfirm(
                    ref alParamsCoupleError  //alParamsCoupleError
                    , dtimeSys  //dtimeSys
                    , strTid  //strTid
                    , "#tbl_Invoice_Invoice_Build"  //zzzz_tbl_Invoice_Invoice_RefNo
                    );
                }
            }
            #endregion

            #region //// Clear For Debug:
            if (!bIsDelete)
            {
                ////
                string strSqlClearForDebug = CmUtils.StringUtils.Replace(@"
						---- Clear for Debug:
						drop table #input_Invoice_Invoice;
						drop table #input_Invoice_InvoiceDtl;
					");

                _cf.db.ExecQuery(
                    strSqlClearForDebug
                    );
                ////
            }
            else
            {
                ////
                string strSqlClearForDebug = CmUtils.StringUtils.Replace(@"
						---- Clear for Debug:
						drop table #input_Invoice_Invoice;
					");

                _cf.db.ExecQuery(
                    strSqlClearForDebug
                    );
                ////

            }
            #endregion

            #region // Refine and Check Input:
            /////
            string strFt_RecordStart = "0";
            string strFt_RecordCount = "100";
            string strFt_WhereClause = string.Format("Invoice_Invoice.InvoiceCode in '{0}'", strListInvoiceCode_Get).Trim();
            //bool bGet_Invoice_InvoicePrd = (objRQ_Invoice_Invoice.Rt_Cols_Invoice_InvoicePrd != null && objRQ_Invoice_Invoice.Rt_Cols_Invoice_InvoicePrd.Length > 0);
            #endregion

            #region // WS_Invoice_Invoice_Get:
            Invoice_Invoice_GetX_New20190705(
                ref alParamsCoupleError // alParamsCoupleError
                , DateTime.Now  // alParamsCoupleError
                , strTid // strTid
                , strWAUserCode // strWAUserCode
                                //// Filter:
                , strFt_RecordStart // strFt_RecordStart
                , strFt_RecordCount // strFt_RecordCount
                , strFt_WhereClause // strFt_WhereClause
                                    //// Return:
                , "*" // strRt_Cols_Invoice_Invoice
                , "*" // Rt_Cols_Invoice_InvoiceDtl
                , out dsGet_Invoice // dsGet_Invoice
                );
        #endregion

        // Return Good:
        MyCodeLabel_Done:
            return;
            //TDALUtils.DBUtils.CommitSafety(_cf.db);
            //mdsFinal.AcceptChanges();
            //return mdsFinal;		
        }
        #endregion

        #region // OS_Invoice_InvoiceTemp:
        private void OS_Invoice_InvoiceTemp_CheckDB(
            ref ArrayList alParamsCoupleError
            , object objInvoiceCode
            , string strFlagExistToCheck
            , string strInvoiceStatusListToCheck
            , out DataTable dtDB_OS_Invoice_InvoiceTemp
            )
        {
            // GetInfo:
            string strSqlExec = CmUtils.StringUtils.Replace(@"
					select top 1
						t.*
					from OS_Invoice_InvoiceTemp t --//[mylock]
					where (1=1)
						and t.InvoiceCode = @objInvoiceCode
					;
				");
            dtDB_OS_Invoice_InvoiceTemp = _cf.db.ExecQuery(
                strSqlExec
                , "@objInvoiceCode", objInvoiceCode
                ).Tables[0];
            dtDB_OS_Invoice_InvoiceTemp.TableName = "OS_Invoice_InvoiceTemp";

            // strFlagExistToCheck:
            if (strFlagExistToCheck.Length > 0)
            {
                if (CmUtils.StringUtils.StringEqual(strFlagExistToCheck, TConst.Flag.Active) && dtDB_OS_Invoice_InvoiceTemp.Rows.Count < 1)
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.InvoiceCode", objInvoiceCode
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.OS_Invoice_InvoiceTemp_CheckDB_InvoiceNotFound
                        , null
                        , alParamsCoupleError.ToArray()
                        );
                }
                if (CmUtils.StringUtils.StringEqual(strFlagExistToCheck, TConst.Flag.Inactive) && dtDB_OS_Invoice_InvoiceTemp.Rows.Count > 0)
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.InvoiceCode", objInvoiceCode
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.OS_Invoice_InvoiceTemp_CheckDB_InvoiceExist
                        , null
                        , alParamsCoupleError.ToArray()
                        );
                }
            }

            // strInvoiceStatusListToCheck:
            if (strInvoiceStatusListToCheck.Length > 0 && !strInvoiceStatusListToCheck.Contains(Convert.ToString(dtDB_OS_Invoice_InvoiceTemp.Rows[0]["InvoiceStatus"])))
            {
                alParamsCoupleError.AddRange(new object[]{
                    "Check.InvoiceCode", objInvoiceCode
                    , "Check.strInvoiceStatusListToCheck", strInvoiceStatusListToCheck
                    , "DB.InvoiceStatus", dtDB_OS_Invoice_InvoiceTemp.Rows[0]["InvoiceStatus"]
                    });
                throw CmUtils.CMyException.Raise(
                    TError.ErridnInventory.OS_Invoice_InvoiceTemp_CheckDB_InvoiceStatusNotMatched
                    , null
                    , alParamsCoupleError.ToArray()
                    );
            }
        }
        public DataSet OS_Invoice_InvoiceTemp_Get(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            //// Filter:
            , string strFt_RecordStart
            , string strFt_RecordCount
            , string strFt_WhereClause
            //// Return:
            , string strRt_Cols_OS_Invoice_InvoiceTemp
            , string strRt_Cols_OS_Invoice_InvoiceTempDtl
            )
        {
            #region // Temp:
            DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            //int nTidSeq = 0;
            DateTime dtimeSys = DateTime.UtcNow;
            bool bNeedTransaction = true;
            string strFunctionName = "OS_Invoice_InvoiceTemp_Get";
            string strErrorCodeDefault = TError.ErridnInventory.OS_Invoice_InvoiceTemp_Get;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				//// Filter
				, "strFt_RecordStart", strFt_RecordStart
                , "strFt_RecordCount", strFt_RecordCount
                , "strFt_WhereClause", strFt_WhereClause
				//// Return
				, "strRt_Cols_OS_Invoice_InvoiceTemp", strRt_Cols_OS_Invoice_InvoiceTemp
                , "strRt_Cols_OS_Invoice_InvoiceTempDtl", strRt_Cols_OS_Invoice_InvoiceTempDtl
                });
            #endregion

            try
            {
                #region // Init:
                //_cf.db.LogUserId = _cf.sinf.strUserCode;
                if (bNeedTransaction) _cf.db.BeginTransaction();

                //// Write RequestLog:
                //_cf.ProcessBizReq_OutSide(
                //    strTid // strTid
                //    , strGwUserCode // strGwUserCode
                //    , strGwPassword // strGwPassword
                //    , strWAUserCode // objUserCode
                //    , strFunctionName // strFunctionName
                //    , alParamsCoupleError // alParamsCoupleError
                //    );

                // Sys_User_CheckAuthentication:
                //Sys_User_CheckAuthentication(
                //    ref alParamsCoupleError
                //    , strWAUserCode
                //    , strWAUserPassword
                //    );

                // Check Access/Deny:
                Sys_Access_CheckDenyV30(
                    ref alParamsCoupleError
                    , strWAUserCode
                    , strFunctionName
                    );
                #endregion

                #region // Check:
                //// Refine:
                long nFilterRecordStart = Convert.ToInt64(strFt_RecordStart);
                long nFilterRecordEnd = nFilterRecordStart + Convert.ToInt64(strFt_RecordCount) - 1;
                bool bGet_OS_Invoice_InvoiceTemp = (strRt_Cols_OS_Invoice_InvoiceTemp != null && strRt_Cols_OS_Invoice_InvoiceTemp.Length > 0);
                bool bGet_OS_Invoice_InvoiceTempDtl = (strRt_Cols_OS_Invoice_InvoiceTempDtl != null && strRt_Cols_OS_Invoice_InvoiceTempDtl.Length > 0);

                //// drAbilityOfUser:
                //DataRow drAbilityOfUser = myCache_ViewAbility_GetUserInfo(strWAUserCode);

                // drAbilityOfUser:
                DataRow drAbilityOfUser = Sys_User_GetAbilityViewOfUser(strWAUserCode);
                zzzzClauseSelect_Mst_NNT_ViewAbility_Get(
                    drAbilityOfUser // drAbilityOfUser
                    , ref alParamsCoupleError // alParamsCoupleError
                    );
                #endregion

                #region // Build Sql:
                ////
                ArrayList alParamsCoupleSql = new ArrayList();
                alParamsCoupleSql.AddRange(new object[] {
                    "@nFilterRecordStart", nFilterRecordStart
                    , "@nFilterRecordEnd", nFilterRecordEnd
                    });
                ////
                //myCache_ViewAbility_GetDealerInfo(drAbilityOfUser);
                ////
                string strSqlGetData = CmUtils.StringUtils.Replace(@"
						---- #tbl_OS_Invoice_InvoiceTemp_Filter_Draft:
						select distinct
							identity(bigint, 0, 1) MyIdxSeq
							, iii.InvoiceCode
						into #tbl_OS_Invoice_InvoiceTemp_Filter_Draft
						from OS_Invoice_InvoiceTemp iii --//[mylock]
                            --inner join #tbl_Mst_NNT_ViewAbility t_MstNNT_View --//[mylock]
                            --    on iii.CustomerMST = t_MstNNT_View.MST
						where (1=1)
							zzB_Where_strFilter_zzE
						order by iii.InvoiceCode asc
						;

						---- Summary:
						select Count(0) MyCount from #tbl_OS_Invoice_InvoiceTemp_Filter_Draft t --//[mylock]
						;

						---- #tbl_OS_Invoice_InvoiceTemp_Filter:
						select
							t.*
						into #tbl_OS_Invoice_InvoiceTemp_Filter
						from #tbl_OS_Invoice_InvoiceTemp_Filter_Draft t --//[mylock]
						where
							(t.MyIdxSeq >= @nFilterRecordStart)
							and (t.MyIdxSeq <= @nFilterRecordEnd)
						;

						-------- OS_Invoice_InvoiceTemp -------:
						zzB_Select_OS_Invoice_InvoiceTemp_zzE
						---------------------------------

						-------- OS_Invoice_InvoiceTempDtl -------:
						zzB_Select_OS_Invoice_InvoiceTempDtl_zzE
						---------------------------------

						---- Clear for debug:
						--drop table #tbl_OS_Invoice_InvoiceTemp_Filter_Draft;
						--drop table #tbl_OS_Invoice_InvoiceTemp_Filter;
					"
                    );
                ////
                string zzB_Select_OS_Invoice_InvoiceTemp_zzE = "-- Nothing.";
                if (bGet_OS_Invoice_InvoiceTemp)
                {
                    #region // bGet_OS_Invoice_InvoiceTemp:
                    zzB_Select_OS_Invoice_InvoiceTemp_zzE = CmUtils.StringUtils.Replace(@"
							---- OS_Invoice_InvoiceTemp:
							select
								t.MyIdxSeq
								, iii.*
								----
								, mpm.PaymentMethodCode mpm_PaymentMethodCode
								, mpm.PaymentMethodName mpm_PaymentMethodName
								, mnnt.ContactName NNTContactName
								, mp_NNT.ProvinceCode NNTProvinceCode
								, mp_NNT.ProvinceName NNTProvinceName
							from #tbl_OS_Invoice_InvoiceTemp_Filter t --//[mylock]
								inner join OS_Invoice_InvoiceTemp iii --//[mylock]
									on t.InvoiceCode = iii.InvoiceCode
								left join Mst_PaymentMethods mpm --//[mylock]
									on iii.PaymentMethodCode = mpm.PaymentMethodCode
								left join Mst_NNT mnnt --//[mylock]
									on iii.MST = mnnt.MST
								left join Mst_Province mp_NNT --//[mylock]
									on mnnt.ProvinceCode = mp_NNT.ProvinceCode
							order by t.MyIdxSeq asc
							;
						"
                        );
                    #endregion
                }
                ////
                string zzB_Select_OS_Invoice_InvoiceTempDtl_zzE = "-- Nothing.";
                if (bGet_OS_Invoice_InvoiceTempDtl)
                {
                    #region // bGet_OS_Invoice_InvoiceTempDtl:
                    zzB_Select_OS_Invoice_InvoiceTempDtl_zzE = CmUtils.StringUtils.Replace(@"
							---- OS_Invoice_InvoiceTempDtl:
							select
								t.MyIdxSeq
								, iiid.*
							from #tbl_OS_Invoice_InvoiceTemp_Filter t --//[mylock]
								inner join OS_Invoice_InvoiceTempDtl iiid --//[mylock]
									on t.InvoiceCode = iiid.InvoiceCode
							order by t.MyIdxSeq asc
							;
						"
                        );
                    #endregion
                }
                ////
                string zzB_Where_strFilter_zzE = "";
                {
                    Hashtable htSpCols = new Hashtable();
                    {
                        #region // htSpCols:
                        ////
                        TUtils.CUtils.MyBuildHTSupportedColumns(
                            _cf.db // db
                            , ref htSpCols // htSupportedColumns
                            , "OS_Invoice_InvoiceTemp" // strTableNameDB
                            , "OS_Invoice_InvoiceTemp." // strPrefixStd
                            , "iii." // strPrefixAlias
                            );
                        ////
                        #endregion
                    }
                    zzB_Where_strFilter_zzE = CmUtils.SqlUtils.BuildWhere(
                        htSpCols // htSpCols
                        , strFt_WhereClause // strClause
                        , "@p_" // strParamPrefix
                        , ref alParamsCoupleSql // alParamsCoupleSql
                        );
                    zzB_Where_strFilter_zzE = (zzB_Where_strFilter_zzE.Length <= 0 ? "" : string.Format(" and ({0})", zzB_Where_strFilter_zzE));
                    alParamsCoupleError.AddRange(new object[]{
                        "zzB_Where_strFilter_zzE", zzB_Where_strFilter_zzE
                        });
                }
                ////
                strSqlGetData = CmUtils.StringUtils.Replace(
                    strSqlGetData
                    , "zzB_Where_strFilter_zzE", zzB_Where_strFilter_zzE
                    , "zzB_Select_OS_Invoice_InvoiceTemp_zzE", zzB_Select_OS_Invoice_InvoiceTemp_zzE
                    , "zzB_Select_OS_Invoice_InvoiceTempDtl_zzE", zzB_Select_OS_Invoice_InvoiceTempDtl_zzE
                    );
                #endregion

                #region // Get Data:
                DataSet dsGetData = _cf.db.ExecQuery(
                    strSqlGetData
                    , alParamsCoupleSql.ToArray()
                    );
                int nIdxTable = 0;
                dsGetData.Tables[nIdxTable++].TableName = "MySummaryTable";
                if (bGet_OS_Invoice_InvoiceTemp)
                {
                    dsGetData.Tables[nIdxTable++].TableName = "OS_Invoice_InvoiceTemp";
                }
                ////
                if (bGet_OS_Invoice_InvoiceTempDtl)
                {
                    dsGetData.Tables[nIdxTable++].TableName = "OS_Invoice_InvoiceTempDtl";
                }
                CmUtils.DataUtils.MoveDataTable(ref mdsFinal, ref dsGetData);
                #endregion

                // Return Good:
                TDALUtils.DBUtils.RollbackSafety(_cf.db); // Always Rollback.
                mdsFinal.AcceptChanges();
                return mdsFinal;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Rollback:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);

                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsFinal
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Rollback and Release resources:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);
                TDALUtils.DBUtils.ReleaseAllSemaphore(_cf.db_Sys, true);

                // Write ReturnLog:
                _cf.ProcessBizReturn_OutSide(
                    ref mdsFinal // mdsFinal
                    , strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    );
                #endregion
            }
        }


        public DataSet WAS_OS_Invoice_InvoiceTemp_Get(
            ref ArrayList alParamsCoupleError
            , RQ_OS_Invoice_InvoiceTemp objRQ_OS_Invoice_InvoiceTemp
            ////
            , out RT_OS_Invoice_InvoiceTemp objRT_OS_Invoice_InvoiceTemp
            )
        {
            #region // Temp:
            string strTid = objRQ_OS_Invoice_InvoiceTemp.Tid;
            objRT_OS_Invoice_InvoiceTemp = new RT_OS_Invoice_InvoiceTemp();
            DataSet mdsResult = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            DateTime dtimeSys = DateTime.UtcNow;
            //DataSet mdsExec = null;
            //DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(objRQ_OS_Invoice_InvoiceTemp.Tid);
            //int nTidSeq = 0;
            //bool bNeedTransaction = true;
            string strFunctionName = "WAS_OS_Invoice_InvoiceTemp_Get";
            string strErrorCodeDefault = TError.ErridnInventory.WAS_OS_Invoice_InvoiceTemp_Get;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
				});
            #endregion

            try
            {
                #region // Init:
                #endregion

                #region // Refine and Check Input:
                List<MySummaryTable> lst_MySummaryTable = new List<MySummaryTable>();

                List<OS_Invoice_InvoiceTemp> lst_OS_Invoice_InvoiceTemp = new List<OS_Invoice_InvoiceTemp>();
                bool bGet_OS_Invoice_InvoiceTemp = (objRQ_OS_Invoice_InvoiceTemp.Rt_Cols_OS_Invoice_InvoiceTemp != null && objRQ_OS_Invoice_InvoiceTemp.Rt_Cols_OS_Invoice_InvoiceTemp.Length > 0);

                List<OS_Invoice_InvoiceTempDtl> lst_OS_Invoice_InvoiceTempDtl = new List<OS_Invoice_InvoiceTempDtl>();
                bool bGet_OS_Invoice_InvoiceTempDtl = (objRQ_OS_Invoice_InvoiceTemp.Rt_Cols_OS_Invoice_InvoiceTempDtl != null && objRQ_OS_Invoice_InvoiceTemp.Rt_Cols_OS_Invoice_InvoiceTempDtl.Length > 0);

                #endregion

                #region // WS_OS_Invoice_InvoiceTemp_Get:
                mdsResult = OS_Invoice_InvoiceTemp_Get(
                    objRQ_OS_Invoice_InvoiceTemp.Tid // strTid
                    , objRQ_OS_Invoice_InvoiceTemp.GwUserCode // strGwUserCode
                    , objRQ_OS_Invoice_InvoiceTemp.GwPassword // strGwPassword
                    , objRQ_OS_Invoice_InvoiceTemp.WAUserCode // strUserCode
                    , objRQ_OS_Invoice_InvoiceTemp.WAUserPassword // strUserPassword
                    , ref alParamsCoupleError // alParamsCoupleError
                                              //// Filter:
                    , objRQ_OS_Invoice_InvoiceTemp.Ft_RecordStart // strFt_RecordStart
                    , objRQ_OS_Invoice_InvoiceTemp.Ft_RecordCount // strFt_RecordCount
                    , objRQ_OS_Invoice_InvoiceTemp.Ft_WhereClause // strFt_WhereClause
                                                                  //// Return:
                    , objRQ_OS_Invoice_InvoiceTemp.Rt_Cols_OS_Invoice_InvoiceTemp // strRt_Cols_OS_Invoice_InvoiceTemp
                    , objRQ_OS_Invoice_InvoiceTemp.Rt_Cols_OS_Invoice_InvoiceTempDtl // strRt_Cols_OS_Invoice_InvoiceTempDtl
                    );
                #endregion

                #region // GetData:
                if (!CmUtils.CMyDataSet.HasError(mdsResult))
                {
                    ////
                    if (bGet_OS_Invoice_InvoiceTemp)
                    {
                        ////
                        DataTable dt_MySummaryTable = mdsResult.Tables["MySummaryTable"].Copy();
                        lst_MySummaryTable = TUtils.DataTableCmUtils.ToListof<MySummaryTable>(dt_MySummaryTable);
                        objRT_OS_Invoice_InvoiceTemp.MySummaryTable = lst_MySummaryTable[0];

                        ////
                        DataTable dt_OS_Invoice_InvoiceTemp = mdsResult.Tables["OS_Invoice_InvoiceTemp"].Copy();
                        lst_OS_Invoice_InvoiceTemp = TUtils.DataTableCmUtils.ToListof<OS_Invoice_InvoiceTemp>(dt_OS_Invoice_InvoiceTemp);
                        objRT_OS_Invoice_InvoiceTemp.Lst_OS_Invoice_InvoiceTemp = lst_OS_Invoice_InvoiceTemp;
                    }

                    ////
                    if (bGet_OS_Invoice_InvoiceTempDtl)
                    {
                        ////
                        DataTable dt_OS_Invoice_InvoiceTempDtl = mdsResult.Tables["OS_Invoice_InvoiceTempDtl"].Copy();
                        lst_OS_Invoice_InvoiceTempDtl = TUtils.DataTableCmUtils.ToListof<OS_Invoice_InvoiceTempDtl>(dt_OS_Invoice_InvoiceTempDtl);
                        objRT_OS_Invoice_InvoiceTemp.Lst_OS_Invoice_InvoiceTempDtl = lst_OS_Invoice_InvoiceTempDtl;
                    }
                }
                #endregion

                // Return Good:
                return mdsResult;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsResult
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Write ReturnLog:
                //_cf.ProcessBizReturn(
                //	ref mdsResult // mdsFinal
                //	, strTid // strTid
                //	, strFunctionName // strFunctionName
                //	);
                #endregion
            }
        }


        private void OS_Invoice_InvoiceTemp_SaveX(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            , DateTime dtimeSys
            ////
            , object objFlagIsDelete
            ////
            , DataSet dsData
            )
        {
            #region // Temp:
            //int nTidSeq = 0;
            //bool bMyDebugSql = false;
            string strFunctionName = "OS_Invoice_InvoiceTemp_SaveAllX";
            //string strErrorCodeDefault = TError.ErridnInventory.OS_Invoice_InvoiceTemp_SaveAllX;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
                ////
                , "objFlagIsDelete",objFlagIsDelete
				////
                });
            //ArrayList alPCErrEx = new ArrayList();
            ////
            Hashtable htParamsSql = new Hashtable();
            #endregion

            #region // Convert Input:
            alParamsCoupleError.AddRange(new object[]{
                "Check.dsData", CmUtils.XmlUtils.DataSet2XmlSimple(dsData)
                });
            #endregion

            #region // Refine and Check Input OS_Invoice_InvoiceTemp:
            ////
            bool bIsDelete = CmUtils.StringUtils.StringEqual(objFlagIsDelete, TConst.Flag.Yes);

            ////
            DataTable dtInput_OS_Invoice_InvoiceTemp = null;
            {
                ////
                string strTableCheck = "OS_Invoice_InvoiceTemp";
                ////
                if (!dsData.Tables.Contains(strTableCheck))
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.TableName", strTableCheck
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.OS_Invoice_InvoiceTemp_SaveX_Input_InvoiceTblNotFound
                        , null
                        , alParamsCoupleError.ToArray()
                        );
                }
                dtInput_OS_Invoice_InvoiceTemp = dsData.Tables[strTableCheck];
                ////
                if (dtInput_OS_Invoice_InvoiceTemp.Rows.Count < 1)
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.TableName", strTableCheck
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.OS_Invoice_InvoiceTemp_SaveX_Input_InvoiceTblInvalid
                        , null
                        , alParamsCoupleError.ToArray()
                        );
                }
                ////
                TUtils.CUtils.StdDataInTable(
                    dtInput_OS_Invoice_InvoiceTemp // dtData
                    , "StdParam", "InvoiceCode" // arrstrCouple
                    , "StdParam", "MST" // arrstrCouple
                    , "StdParam", "NetworkID" // arrstrCouple
                    , "StdParam", "RefNo" // arrstrCouple
                    , "StdParam", "FormNo" // arrstrCouple
                    , "StdParam", "Sign" // arrstrCouple
                    , "StdParam", "SourceInvoiceCode" // arrstrCouple
                    , "StdParam", "InvoiceAdjType" // arrstrCouple
                    , "StdParam", "PaymentMethodCode" // arrstrCouple
                    , "StdParam", "InvoiceType2" // arrstrCouple
                    , "StdParam", "CustomerNNTCode" // arrstrCouple
                    , "", "CustomerNNTName" // arrstrCouple
                    , "", "CustomerNNTAddress" // arrstrCouple
                    , "", "CustomerNNTPhone" // arrstrCouple
                    , "", "CustomerNNTBankName" // arrstrCouple
                    , "", "CustomerNNTEmail" // arrstrCouple
                    , "", "CustomerNNTAccNo" // arrstrCouple
                    , "", "CustomerNNTBuyerName" // arrstrCouple
                    , "StdParam", "CustomerMST" // arrstrCouple
                    , "StdParam", "TInvoiceCode" // arrstrCouple
                    , "StdParam", "InvoiceNo" // arrstrCouple
                    , "", "InvoiceDateUTC" // arrstrCouple
                    , "", "EmailSend" // arrstrCouple
                    , "", "InvoiceFileSpec" // arrstrCouple
                    , "", "InvoiceFilePath" // arrstrCouple
                    , "", "InvoicePDFFilePath" // arrstrCouple
                    , "float", "TotalValInvoice" // arrstrCouple
                    , "float", "TotalValVAT" // arrstrCouple
                    , "float", "TotalValPmt" // arrstrCouple
                    , "StdDTime", "CreateDTimeUTC" // arrstrCouple
                    , "", "CreateBy" // arrstrCouple
                    , "StdDTime", "InvoiceNoDTimeUTC" // arrstrCouple
                    , "", "InvoiceNoBy" // arrstrCouple
                    , "StdDTime", "SignDTimeUTC" // arrstrCouple
                    , "", "SignBy" // arrstrCouple
                    , "StdDTime", "ApprDTimeUTC" // arrstrCouple
                    , "", "ApprBy" // arrstrCouple
                    , "StdDTime", "CancelDTimeUTC" // arrstrCouple
                    , "", "CancelBy" // arrstrCouple
                    , "StdDTime", "SendEmailDTimeUTC" // arrstrCouple
                    , "", "SendEmailBy" // arrstrCouple
                    , "StdDTime", "IssuedDTimeUTC" // arrstrCouple
                    , "", "IssuedBy" // arrstrCouple
                    , "", "AttachedDelFilePath" // arrstrCouple
                    , "", "DeleteReason" // arrstrCouple
                    , "StdDTime", "DeleteDTimeUTC" // arrstrCouple
                    , "", "DeleteBy" // arrstrCouple
                    , "StdDTime", "ChangeDTimeUTC" // arrstrCouple
                    , "", "ChangeBy" // arrstrCouple
                    , "StdParam", "InvoiceVerifyCQTCode" // arrstrCouple
                    , "StdParam", "CurrencyCode" // arrstrCouple
                    , "float", "CurrencyRate" // arrstrCouple
                    , "float", "ValGoodsNotTaxable" // arrstrCouple
                    , "float", "ValGoodsNotChargeTax" // arrstrCouple
                    , "float", "ValGoodsVAT5" // arrstrCouple
                    , "float", "ValVAT5" // arrstrCouple
                    , "float", "ValGoodsVAT10" // arrstrCouple
                    , "float", "ValVAT10" // arrstrCouple
                    , "", "NNTFullName" // arrstrCouple
                    , "", "NNTFullAdress" // arrstrCouple
                    , "", "NNTPhone" // arrstrCouple
                    , "", "NNTFax" // arrstrCouple
                    , "", "NNTEmail" // arrstrCouple
                    , "", "NNTWebsite" // arrstrCouple
                    , "", "NNTAccNo" // arrstrCouple
                    , "", "NNTBankName" // arrstrCouple
                    , "StdDTime", "LUDTimeUTC" // arrstrCouple
                    , "", "LUBy" // arrstrCouple
                    , "", "Remark" // arrstrCouple
                    , "", "InvoiceCF1" // arrstrCouple
                    , "", "InvoiceCF2" // arrstrCouple
                    , "", "InvoiceCF3" // arrstrCouple
                    , "", "InvoiceCF4" // arrstrCouple
                    , "", "InvoiceCF5" // arrstrCouple
                    , "", "InvoiceCF6" // arrstrCouple
                    , "", "InvoiceCF7" // arrstrCouple
                    , "", "InvoiceCF8" // arrstrCouple
                    , "", "InvoiceCF9" // arrstrCouple
                    , "", "InvoiceCF10" // arrstrCouple
                    , "", "FlagChange" // arrstrCouple
                    , "", "FlagPushOutSite" // arrstrCouple
                    , "", "FlagDeleteOutSite" // arrstrCouple
                    , "", "InvoiceStatus" // arrstrCouple
                    , "", "OS_DMS_RefNo" // arrstrCouple
                    , "", "OS_DMS_RefID" // arrstrCouple
                    );
                ////

                TUtils.CUtils.MyForceNewColumn(ref dtInput_OS_Invoice_InvoiceTemp, "LogLUDTimeUTC", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_OS_Invoice_InvoiceTemp, "LogLUBy", typeof(object));
                ////
            }
            #endregion

            #region //// SaveTemp OS_Invoice_InvoiceTemp:
            //if (!bIsDelete)
            {
                // Upload:
                TUtils.CUtils.MyBuildDBDT_Common(
                    _cf.db // db
                    , "#input_OS_Invoice_InvoiceTemp" // strTableName
                    , new object[] {
                            "InvoiceCode", TConst.BizMix.Default_DBColType
                            , "MST", TConst.BizMix.Default_DBColType
                            , "NetworkID", TConst.BizMix.Default_DBColType
                            , "RefNo", TConst.BizMix.Default_DBColType
                            , "FormNo", TConst.BizMix.Default_DBColType
                            , "Sign", TConst.BizMix.Default_DBColType
                            , "SourceInvoiceCode", TConst.BizMix.Default_DBColType
                            , "InvoiceAdjType", TConst.BizMix.Default_DBColType
                            , "PaymentMethodCode", TConst.BizMix.Default_DBColType
                            , "InvoiceType2", TConst.BizMix.Default_DBColType
                            , "CustomerNNTCode", TConst.BizMix.Default_DBColType
                            , "CustomerNNTName", TConst.BizMix.Default_DBColType
                            , "CustomerNNTAddress", TConst.BizMix.Default_DBColType
                            , "CustomerNNTPhone", TConst.BizMix.Default_DBColType
                            , "CustomerNNTBankName", TConst.BizMix.Default_DBColType
                            , "CustomerNNTEmail", TConst.BizMix.Default_DBColType
                            , "CustomerNNTAccNo", TConst.BizMix.Default_DBColType
                            , "CustomerNNTBuyerName", TConst.BizMix.Default_DBColType
                            , "CustomerMST", TConst.BizMix.Default_DBColType
                            , "TInvoiceCode", TConst.BizMix.Default_DBColType
                            , "InvoiceNo", TConst.BizMix.Default_DBColType
                            , "InvoiceDateUTC", TConst.BizMix.Default_DBColType
                            , "EmailSend", TConst.BizMix.Default_DBColType
                            , "InvoiceFileSpec", TConst.BizMix.Default_DBColType
                            , "InvoiceFilePath", TConst.BizMix.Default_DBColType
                            , "InvoicePDFFilePath", TConst.BizMix.Default_DBColType
                            , "TotalValInvoice", "float"
                            , "TotalValVAT", "float"
                            , "TotalValPmt", "float"
                            , "CreateDTimeUTC", TConst.BizMix.Default_DBColType
                            , "CreateBy", TConst.BizMix.Default_DBColType
                            , "InvoiceNoDTimeUTC", TConst.BizMix.Default_DBColType
                            , "InvoiceNoBy", TConst.BizMix.Default_DBColType
                            , "SignDTimeUTC", TConst.BizMix.Default_DBColType
                            , "SignBy", TConst.BizMix.Default_DBColType
                            , "ApprDTimeUTC", TConst.BizMix.Default_DBColType
                            , "ApprBy", TConst.BizMix.Default_DBColType
                            , "CancelDTimeUTC", TConst.BizMix.Default_DBColType
                            , "CancelBy", TConst.BizMix.Default_DBColType
                            , "SendEmailDTimeUTC", TConst.BizMix.Default_DBColType
                            , "SendEmailBy", TConst.BizMix.Default_DBColType
                            , "IssuedDTimeUTC", TConst.BizMix.Default_DBColType
                            , "IssuedBy", TConst.BizMix.Default_DBColType
                            , "AttachedDelFilePath", TConst.BizMix.Default_DBColType
                            , "DeleteReason", TConst.BizMix.Default_DBColType
                            , "DeleteDTimeUTC", TConst.BizMix.Default_DBColType
                            , "DeleteBy", TConst.BizMix.Default_DBColType
                            , "ChangeDTimeUTC", TConst.BizMix.Default_DBColType
                            , "ChangeBy", TConst.BizMix.Default_DBColType
                            , "InvoiceVerifyCQTCode", TConst.BizMix.Default_DBColType
                            , "CurrencyCode", TConst.BizMix.Default_DBColType
                            , "CurrencyRate", TConst.BizMix.Default_DBColType
                            , "ValGoodsNotTaxable", "float"
                            , "ValGoodsNotChargeTax", "float"
                            , "ValGoodsVAT5", "float"
                            , "ValVAT5", "float"
                            , "ValGoodsVAT10", "float"
                            , "ValVAT10", "float"
                            , "NNTFullName", TConst.BizMix.Default_DBColType
                            , "NNTFullAdress", TConst.BizMix.Default_DBColType
                            , "NNTPhone", TConst.BizMix.Default_DBColType
                            , "NNTFax", TConst.BizMix.Default_DBColType
                            , "NNTEmail", TConst.BizMix.Default_DBColType
                            , "NNTWebsite", TConst.BizMix.Default_DBColType
                            , "NNTAccNo", TConst.BizMix.Default_DBColType
                            , "NNTBankName", TConst.BizMix.Default_DBColType
                            , "LUDTimeUTC", TConst.BizMix.Default_DBColType
                            , "LUBy", TConst.BizMix.Default_DBColType
                            , "Remark", TConst.BizMix.Default_DBColType
                            , "InvoiceCF1", TConst.BizMix.Default_DBColType
                            , "InvoiceCF2", TConst.BizMix.Default_DBColType
                            , "InvoiceCF3", TConst.BizMix.Default_DBColType
                            , "InvoiceCF4", TConst.BizMix.Default_DBColType
                            , "InvoiceCF5", TConst.BizMix.Default_DBColType
                            , "InvoiceCF6", TConst.BizMix.Default_DBColType
                            , "InvoiceCF7", TConst.BizMix.Default_DBColType
                            , "InvoiceCF8", TConst.BizMix.Default_DBColType
                            , "InvoiceCF9", TConst.BizMix.Default_DBColType
                            , "InvoiceCF10", TConst.BizMix.Default_DBColType
                            , "FlagChange", TConst.BizMix.Default_DBColType
                            , "FlagPushOutSite", TConst.BizMix.Default_DBColType
                            , "FlagDeleteOutSite", TConst.BizMix.Default_DBColType
                            , "InvoiceStatus", TConst.BizMix.Default_DBColType
                            , "LogLUDTimeUTC", TConst.BizMix.Default_DBColType
                            , "LogLUBy", TConst.BizMix.Default_DBColType
                            , "OS_DMS_RefNo", TConst.BizMix.Default_DBColType
                            , "OS_DMS_RefID", TConst.BizMix.Default_DBColType
                        } // arrSingleStructure
                    , dtInput_OS_Invoice_InvoiceTemp // dtData
                );
            }
            #endregion

            #region ----// Check chỉ được phát hành tiếp khi lời call trước ở trạng thái Failed,Processing:
            {
                string strSql_CheckOS_DMS_RefNo = CmUtils.StringUtils.Replace(@"
                            --- #tbl_Invoice_Invoice_ForSTUFF:
                            select distinct 
                                f.OS_DMS_RefNo
                            into #tbl_OS_Invoice_InvoiceTemp_ForSTUFF
                            from #input_OS_Invoice_InvoiceTemp t --//[mylock]
                                inner join OS_Invoice_InvoiceTemp f --//[mylock]
                                    on t.OS_DMS_RefNo = f.OS_DMS_RefNo
                            where(1=1)
                                and f.SignStatus not in ('FAILED', 'PROCESSING')
                            ;

                            --- Return:					
                            select 
                                STUFF(( 
		                            SELECT ',' + f.OS_DMS_RefNo
		                            FROM #tbl_OS_Invoice_InvoiceTemp_ForSTUFF f --//[mylock]
		                            WHERE(1=1)
		                            FOR
		                            XML PATH('')
		                            ), 1, 1, ''
                                ) AS ListOS_DMS_RefNo
                            where(1=1)
                            ;

                            --- Clear For Debug:
                            drop table #tbl_OS_Invoice_InvoiceTemp_ForSTUFF;
						");
                DataTable dt_CheckOS_DMS_RefNo = _cf.db.ExecQuery(
                    strSql_CheckOS_DMS_RefNo
                    ).Tables[0];
                /////
                if (dt_CheckOS_DMS_RefNo.Rows.Count > 0)
                {
                    string strListOS_DMS_RefNo = TUtils.CUtils.StdParam(dt_CheckOS_DMS_RefNo.Rows[0]["ListOS_DMS_RefNo"]);
                    /////
                    if (!string.IsNullOrEmpty(strListOS_DMS_RefNo))
                    {
                        alParamsCoupleError.AddRange(new object[]{
                            "Check.ErrConditionalRaise", "f.SignStatus not in ('FAILED', 'PROCESSING')"
                            , "Check.strListOS_DMS_RefNo", strListOS_DMS_RefNo
                            });
                        throw CmUtils.CMyException.Raise(
                            TError.ErridnInventory.OS_Invoice_InvoiceTemp_SaveX_InvalidSignStatus
                            , null
                            , alParamsCoupleError.ToArray()
                            );
                    }
                    /////
                }
                ////
            }
            #endregion

            #region //// Refine and Check Input OS_Invoice_InvoiceTempDtl:
            ////
            DataTable dtInput_OS_Invoice_InvoiceTempDtl = null;
            if (!bIsDelete)
            {
                ////
                string strTableCheck = "OS_Invoice_InvoiceTempDtl";
                ////
                if (!dsData.Tables.Contains(strTableCheck))
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.TableName", strTableCheck
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.OS_Invoice_InvoiceTemp_SaveX_Input_InvoiceDtlTblNotFound
                        , null
                        , alParamsCoupleError.ToArray()
                        );
                }
                dtInput_OS_Invoice_InvoiceTempDtl = dsData.Tables[strTableCheck];
                ////

                if (dtInput_OS_Invoice_InvoiceTempDtl.Rows.Count < 1)
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.TableName", strTableCheck
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.OS_Invoice_InvoiceTemp_SaveX_Input_InvoiceDtlTblInvalid
                        , null
                        , alParamsCoupleError.ToArray()
                        );
                }
                ////
                TUtils.CUtils.StdDataInTable(
                    dtInput_OS_Invoice_InvoiceTempDtl // dtData
                    , "StdParam", "InvoiceCode" // arrstrCouple
                    , "StdParam", "Idx" // arrstrCouple
                    , "StdParam", "NetworkID" // arrstrCouple
                    , "StdParam", "SpecCode" // arrstrCouple
                    , "", "SpecName" // arrstrCouple
                    , "StdParam", "ProductID" // arrstrCouple
                    , "", "ProductName" // arrstrCouple
                    , "StdParam", "VATRateCode" // arrstrCouple
                    , "float", "VATRate" // arrstrCouple
                    , "StdParam", "UnitCode" // arrstrCouple
                    , "", "UnitName" // arrstrCouple
                    , "StdParam", "UnitPrice" // arrstrCouple
                    , "float", "Qty" // arrstrCouple
                    , "float", "ValInvoice" // arrstrCouple
                    , "float", "ValTax" // arrstrCouple
                    , "StdParam", "InventoryCode" // arrstrCouple
                    , "float", "DiscountRate" // arrstrCouple
                    , "float", "ValDiscount" // arrstrCouple
                    , "", "Remark" // arrstrCouple
                    , "", "InvoiceDCF1" // arrstrCouple
                    , "", "InvoiceDCF2" // arrstrCouple
                    , "", "InvoiceDCF3" // arrstrCouple
                    , "", "InvoiceDCF4" // arrstrCouple
                    , "", "InvoiceDCF5" // arrstrCouple
                    );
                ////
                //TUtils.CUtils.MyForceNewColumn(ref dtInput_OS_Invoice_InvoiceTempDtl, "InvoiceCode", typeof(object));
                //TUtils.CUtils.MyForceNewColumn(ref dtInput_OS_Invoice_InvoiceTempDtl, "NetworkID", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_OS_Invoice_InvoiceTempDtl, "InvoiceDtlStatus", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_OS_Invoice_InvoiceTempDtl, "LogLUDTimeUTC", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_OS_Invoice_InvoiceTempDtl, "LogLUBy", typeof(object));
                ////////
            }
            #endregion

            #region //// SaveTemp OS_Invoice_InvoiceTempDtl For Check:
            if (!bIsDelete)
            {
                // Upload:
                TUtils.CUtils.MyBuildDBDT_Common(
                    _cf.db // db
                    , "#input_OS_Invoice_InvoiceTempDtl" // strTableName
                    , new object[] {
                            "InvoiceCode", TConst.BizMix.Default_DBColType
                            , "Idx", TConst.BizMix.Default_DBColType
                            , "NetworkID", TConst.BizMix.Default_DBColType
                            , "SpecCode", TConst.BizMix.Default_DBColType
                            , "SpecName", TConst.BizMix.Default_DBColType
                            , "ProductID", TConst.BizMix.Default_DBColType
                            , "ProductName", TConst.BizMix.Default_DBColType
                            , "VATRateCode", TConst.BizMix.Default_DBColType
                            , "VATRate", "float"
                            , "UnitCode", TConst.BizMix.Default_DBColType
                            , "UnitName", TConst.BizMix.Default_DBColType
                            , "UnitPrice", "float"
                            , "Qty", "float"
                            , "ValInvoice", "float"
                            , "ValTax", "float"
                            , "InventoryCode", TConst.BizMix.Default_DBColType
                            , "DiscountRate", "float"
                            , "ValDiscount", "float"
                            , "InvoiceDtlStatus", TConst.BizMix.Default_DBColType
                            , "Remark", TConst.BizMix.Default_DBColType
                            , "InvoiceDCF1", TConst.BizMix.Default_DBColType
                            , "InvoiceDCF2", TConst.BizMix.Default_DBColType
                            , "InvoiceDCF3", TConst.BizMix.Default_DBColType
                            , "InvoiceDCF4", TConst.BizMix.Default_DBColType
                            , "InvoiceDCF5", TConst.BizMix.Default_DBColType
                            , "LogLUDTimeUTC", TConst.BizMix.Default_DBColType
                            , "LogLUBy", TConst.BizMix.Default_DBColType
                        } // arrSingleStructure
                    , dtInput_OS_Invoice_InvoiceTempDtl // dtData
                );
            }
            #endregion

            #region // SaveDB:
            {
                //// Clear All:
                {
                    string strSqlDelete = CmUtils.StringUtils.Replace(@"
                            ----#tbl_OS_Invoice_InvoiceTemp_Del:
                            select 
                                t.InvoiceCode
                            into #tbl_OS_Invoice_InvoiceTemp_Del
                            from #input_OS_Invoice_InvoiceTemp t --//[mylock]
	                            inner join OS_Invoice_InvoiceTemp f --//[mylock]
		                            on t.OS_DMS_RefNo = f.OS_DMS_RefNo
                            where(1=1)
                                and f.SignStatus in ('FAILED', 'PROCESSING')
                            ;

                            ---- #tbl_OS_Invoice_InvoiceTempDtl:
                            select 
                                t.InvoiceCode
                                , t.Idx
                            into #tbl_OS_Invoice_InvoiceTempDtl
                            from OS_Invoice_InvoiceTempDtl t --//[mylock]
	                            inner join #input_OS_Invoice_InvoiceTemp f --//[mylock]
		                            on t.InvoiceCode = f.InvoiceCode
                            where (1=1)
                            union all
                            select 
                                t.InvoiceCode
                                , t.Idx
                            from OS_Invoice_InvoiceTempDtl t --//[mylock]
	                            inner join #tbl_OS_Invoice_InvoiceTemp_Del f --//[mylock]
		                            on t.InvoiceCode = f.InvoiceCode
                            where (1=1)
                            ;

                            --- Delete:
                            ---- OS_Invoice_InvoiceTempDtl:
                            delete t 
                            from OS_Invoice_InvoiceTempDtl t --//[mylock]
	                            inner join #tbl_OS_Invoice_InvoiceTempDtl f --//[mylock]
		                            on t.InvoiceCode = f.InvoiceCode
		                                and t.Idx = f.Idx
                            where (1=1)
                            ;

                            ---- OS_Invoice_InvoiceTemp:
                            delete t
                            from OS_Invoice_InvoiceTemp t --//[mylock]
	                            inner join #input_OS_Invoice_InvoiceTemp f --//[mylock]
		                            on t.InvoiceCode = f.InvoiceCode
                            where (1=1)
                            ;

                            delete t
                            from OS_Invoice_InvoiceTemp t --//[mylock]
	                            inner join #tbl_OS_Invoice_InvoiceTemp_Del f --//[mylock]
		                            on t.InvoiceCode = f.InvoiceCode
                            where (1=1)
                            ;

                            --- Clear For Debug:
                            drop table #tbl_OS_Invoice_InvoiceTempDtl;
							drop table #tbl_OS_Invoice_InvoiceTemp_Del;
						");
                    DataSet dtDB = _cf.db.ExecQuery(
                        strSqlDelete
                        );
                }

                //// Insert All:
                if (!bIsDelete)
                {
                    #region // Insert:
                    {
                        ////
                        string zzzzClauseInsert_OS_Invoice_InvoiceTemp_zSave = CmUtils.StringUtils.Replace(@"
                                ---- OS_Invoice_InvoiceTemp:                                
                                insert into OS_Invoice_InvoiceTemp(
	                                InvoiceCode
	                                , MST
	                                , NetworkID
	                                , RefNo
	                                , FormNo
	                                , Sign
	                                , SourceInvoiceCode
	                                , InvoiceAdjType
	                                , PaymentMethodCode
	                                , InvoiceType2
	                                , CustomerNNTCode
	                                , CustomerNNTName
	                                , CustomerNNTAddress
	                                , CustomerNNTPhone
	                                , CustomerNNTBankName
	                                , CustomerNNTEmail
	                                , CustomerNNTAccNo
	                                , CustomerNNTBuyerName
	                                , CustomerMST
	                                , TInvoiceCode
	                                , InvoiceNo
	                                , InvoiceDateUTC
	                                , EmailSend
	                                , InvoiceFileSpec
	                                , InvoiceFilePath
	                                , InvoicePDFFilePath
	                                , TotalValInvoice
	                                , TotalValVAT
	                                , TotalValPmt
	                                , CreateDTimeUTC
	                                , CreateBy
	                                , InvoiceNoDTimeUTC
	                                , InvoiceNoBy
	                                , SignDTimeUTC
	                                , SignBy
	                                , ApprDTimeUTC
	                                , ApprBy
	                                , CancelDTimeUTC
	                                , CancelBy
	                                , SendEmailDTimeUTC
	                                , SendEmailBy
	                                , IssuedDTimeUTC
	                                , IssuedBy
	                                , AttachedDelFilePath
	                                , DeleteReason
	                                , DeleteDTimeUTC
	                                , DeleteBy
	                                , ChangeDTimeUTC
	                                , ChangeBy
	                                , InvoiceVerifyCQTCode
	                                , CurrencyCode
	                                , CurrencyRate
	                                , ValGoodsNotTaxable
	                                , ValGoodsNotChargeTax
	                                , ValGoodsVAT5
	                                , ValVAT5
	                                , ValGoodsVAT10
	                                , ValVAT10
	                                , NNTFullName
	                                , NNTFullAdress
	                                , NNTPhone
	                                , NNTFax
	                                , NNTEmail
	                                , NNTWebsite
	                                , NNTAccNo
	                                , NNTBankName
	                                , LUDTimeUTC
	                                , LUBy
	                                , Remark
	                                , InvoiceCF1
	                                , InvoiceCF2
	                                , InvoiceCF3
	                                , InvoiceCF4
	                                , InvoiceCF5
	                                , InvoiceCF6
	                                , InvoiceCF7
	                                , InvoiceCF8
	                                , InvoiceCF9
	                                , InvoiceCF10
	                                , FlagChange
	                                , FlagPushOutSite
	                                , FlagDeleteOutSite
	                                , InvoiceStatus
	                                , LogLUDTimeUTC
	                                , LogLUBy
	                                , OS_DMS_RefNo
	                                , OS_DMS_RefID
	                                , SignStatus
                                )
                                select 
	                                t.InvoiceCode
	                                , t.MST
	                                , t.NetworkID
	                                , t.RefNo
	                                , t.FormNo
	                                , t.Sign
	                                , t.SourceInvoiceCode
	                                , t.InvoiceAdjType
	                                , t.PaymentMethodCode
	                                , t.InvoiceType2
	                                , t.CustomerNNTCode
	                                , t.CustomerNNTName
	                                , t.CustomerNNTAddress
	                                , t.CustomerNNTPhone
	                                , t.CustomerNNTBankName
	                                , t.CustomerNNTEmail
	                                , t.CustomerNNTAccNo
	                                , t.CustomerNNTBuyerName
	                                , t.CustomerMST
	                                , t.TInvoiceCode
	                                , t.InvoiceNo
	                                , t.InvoiceDateUTC
	                                , t.EmailSend
	                                , t.InvoiceFileSpec
	                                , t.InvoiceFilePath
	                                , t.InvoicePDFFilePath
	                                , t.TotalValInvoice
	                                , t.TotalValVAT
	                                , t.TotalValPmt
	                                , t.CreateDTimeUTC
	                                , t.CreateBy
	                                , t.InvoiceNoDTimeUTC
	                                , t.InvoiceNoBy
	                                , t.SignDTimeUTC
	                                , t.SignBy
	                                , t.ApprDTimeUTC
	                                , t.ApprBy
	                                , t.CancelDTimeUTC
	                                , t.CancelBy
	                                , t.SendEmailDTimeUTC
	                                , t.SendEmailBy
	                                , t.IssuedDTimeUTC
	                                , t.IssuedBy
	                                , t.AttachedDelFilePath
	                                , t.DeleteReason
	                                , t.DeleteDTimeUTC
	                                , t.DeleteBy
	                                , t.ChangeDTimeUTC
	                                , t.ChangeBy
	                                , t.InvoiceVerifyCQTCode
	                                , t.CurrencyCode
	                                , t.CurrencyRate
	                                , t.ValGoodsNotTaxable
	                                , t.ValGoodsNotChargeTax
	                                , t.ValGoodsVAT5
	                                , t.ValVAT5
	                                , t.ValGoodsVAT10
	                                , t.ValVAT10
	                                , t.NNTFullName
	                                , t.NNTFullAdress
	                                , t.NNTPhone
	                                , t.NNTFax
	                                , t.NNTEmail
	                                , t.NNTWebsite
	                                , t.NNTAccNo
	                                , t.NNTBankName
	                                , t.LUDTimeUTC
	                                , t.LUBy
	                                , t.Remark
	                                , t.InvoiceCF1
	                                , t.InvoiceCF2
	                                , t.InvoiceCF3
	                                , t.InvoiceCF4
	                                , t.InvoiceCF5
	                                , t.InvoiceCF6
	                                , t.InvoiceCF7
	                                , t.InvoiceCF8
	                                , t.InvoiceCF9
	                                , t.InvoiceCF10
	                                , t.FlagChange
	                                , t.FlagPushOutSite
	                                , t.FlagDeleteOutSite
	                                , t.InvoiceStatus
	                                , '@strLogLUDTimeUTC' LogLUDTimeUTC -- t.LogLUDTimeUTC
	                                , '@strLogLUBy' LogLUBy  --t.LogLUBy
	                                , t.OS_DMS_RefNo
	                                , t.OS_DMS_RefID
                                    , 'PENDING'
                                from #input_OS_Invoice_InvoiceTemp t --//[mylock]
                            "
                            , "@strLogLUDTimeUTC", dtimeSys.ToString("yyyy-MM-dd hh:mm:ss")
                            , "@strLogLUBy", strWAUserCode
                            );
                        /////
                        string zzzzClauseInsert_OS_Invoice_InvoiceTempDtl_zSave = CmUtils.StringUtils.Replace(@"
                                ---- OS_Invoice_InvoiceTempDtl:  
                                insert into OS_Invoice_InvoiceTempDtl(
	                                InvoiceCode
	                                , Idx
	                                , NetworkID
	                                , SpecCode
	                                , SpecName
	                                , ProductID
	                                , ProductName
	                                , VATRateCode
	                                , VATRate
	                                , UnitCode
	                                , UnitName
	                                , UnitPrice
	                                , Qty
                                    , ValInvoice
	                                , ValTax
	                                , InventoryCode
	                                , DiscountRate
	                                , ValDiscount
	                                , InvoiceDtlStatus
	                                , Remark
	                                , InvoiceDCF1
	                                , InvoiceDCF2
	                                , InvoiceDCF3
	                                , InvoiceDCF4
	                                , InvoiceDCF5
	                                , LogLUDTimeUTC
	                                , LogLUBy
                                )
                                select 
	                                t.InvoiceCode
	                                , t.Idx
	                                , t.NetworkID
	                                , t.SpecCode
	                                , t.SpecName
	                                , t.ProductID
	                                , t.ProductName
	                                , t.VATRateCode
	                                , t.VATRate
	                                , t.UnitCode
	                                , t.UnitName
	                                , t.UnitPrice
	                                , t.Qty 
	                                , t.ValInvoice
	                                , t.ValTax
	                                , t.InventoryCode
	                                , t.DiscountRate
	                                , t.ValDiscount
	                                , f.InvoiceStatus
	                                , t.Remark
	                                , t.InvoiceDCF1
	                                , t.InvoiceDCF2
	                                , t.InvoiceDCF3
	                                , t.InvoiceDCF4
	                                , t.InvoiceDCF5
	                                , '@strLogLUDTimeUTC' LogLUDTimeUTC -- t.LogLUDTimeUTC
	                                , '@strLogLUBy' LogLUBy  --t.LogLUBy
                                from #input_OS_Invoice_InvoiceTempDtl t
                                    inner join #input_OS_Invoice_InvoiceTemp f --//[mylock]
                                        on t.InvoiceCode = f.InvoiceCode
                            "
                            , "@strLogLUDTimeUTC", dtimeSys.ToString("yyyy-MM-dd hh:mm:ss")
                            , "@strLogLUBy", strWAUserCode
                            );

                        /////
                        string strSqlExec = CmUtils.StringUtils.Replace(@"
								----
								zzzzClauseInsert_OS_Invoice_InvoiceTemp_zSave			
								----
								zzzzClauseInsert_OS_Invoice_InvoiceTempDtl_zSave			
								----
							"
                            , "zzzzClauseInsert_OS_Invoice_InvoiceTemp_zSave", zzzzClauseInsert_OS_Invoice_InvoiceTemp_zSave
                            , "zzzzClauseInsert_OS_Invoice_InvoiceTempDtl_zSave", zzzzClauseInsert_OS_Invoice_InvoiceTempDtl_zSave
                            );
                        ////
                        DataSet dsExec = _cf.db.ExecQuery(strSqlExec);
                        ////
                    }
                    #endregion
                }
            }
            #endregion

            #region //// Clear For Debug:
            if (!bIsDelete)
            {
                ////
                string strSqlClearForDebug = CmUtils.StringUtils.Replace(@"
						---- Clear for Debug:
						drop table #input_OS_Invoice_InvoiceTemp;
						drop table #input_OS_Invoice_InvoiceTempDtl;
					");

                _cf.db.ExecQuery(
                    strSqlClearForDebug
                    );
                ////
            }
            else
            {
                ////
                string strSqlClearForDebug = CmUtils.StringUtils.Replace(@"
						---- Clear for Debug:
						drop table #input_OS_Invoice_InvoiceTemp;
					");

                _cf.db.ExecQuery(
                    strSqlClearForDebug
                    );
                ////

            }
            #endregion

            // Return Good:
            //MyCodeLabel_Done:
            return;
            //TDALUtils.DBUtils.CommitSafety(_cf.db);
            //mdsFinal.AcceptChanges();
            //return mdsFinal;		
        }

        public DataSet OS_Invoice_InvoiceTemp_Save(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            ////
            , object objFlagIsDelete
            ////
            , DataSet dsData
            )
        {
            #region // Temp:
            DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            //int nTidSeq = 0;
            DateTime dtimeSys = DateTime.UtcNow;
            string strFunctionName = "OS_Invoice_InvoiceTemp_Save";
            string strErrorCodeDefault = TError.ErridnInventory.OS_Invoice_InvoiceTemp_Save;
            alParamsCoupleError.AddRange(new object[]{
                    "strFunctionName", strFunctionName
                    , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
                    /////
                    , "objFlagIsDelete", objFlagIsDelete
			        ////
                    });
            #endregion

            try
            {
                #region // Init:
                //_cf.db.LogUserId = _cf.sinf.strUserCode;
                _cf.db.BeginTransaction();

                //// Write RequestLog:
                _cf.ProcessBizReq_OutSide(
                    strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    , alParamsCoupleError // alParamsCoupleError
                    );

                //// Sys_User_CheckAuthentication:
                //Sys_User_CheckAuthentication(
                //    ref alParamsCoupleError
                //    , strWAUserCode
                //    , strWAUserPassword
                //    );

                //// Check Access/Deny:
                //Sys_Access_CheckDenyV30(
                //    ref alParamsCoupleError
                //    , strWAUserCode
                //    , strFunctionName
                //    );
                #endregion

                #region // OS_Invoice_InvoiceTemp_SaveX:
                //DataSet dsGetData = null;
                {

                    OS_Invoice_InvoiceTemp_SaveX(
                        strTid // strTid
                        , strGwUserCode // strGwUserCode
                        , strGwPassword // strGwPassword
                        , strWAUserCode // strWAUserCode
                        , strWAUserPassword // strWAUserPassword
                        , ref alParamsCoupleError // alParamsCoupleError
                        , dtimeSys // dtimeSys
                                   ////
                        , objFlagIsDelete // objFlagIsDelete
                                          ////
                        , dsData // dsData
                        );
                }
                ////
                //CmUtils.DataUtils.MoveDataTable(ref mdsFinal, ref dsGetData);
                #endregion

                // Return Good:
                TDALUtils.DBUtils.CommitSafety(_cf.db);
                mdsFinal.AcceptChanges();
                return mdsFinal;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Rollback:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);

                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsFinal
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Rollback and Release resources:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);
                TDALUtils.DBUtils.ReleaseAllSemaphore(_cf.db_Sys, true);

                // Write ReturnLog:
                _cf.ProcessBizReturn_OutSide(
                    ref mdsFinal // mdsFinal
                    , strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    );
                #endregion
            }
        }

        public DataSet WAS_OS_Invoice_InvoiceTemp_Save(
            ref ArrayList alParamsCoupleError
            , RQ_OS_Invoice_InvoiceTemp objRQ_OS_Invoice_InvoiceTemp
            ////
            , out RT_OS_Invoice_InvoiceTemp objRT_OS_Invoice_InvoiceTemp
            )
        {
            #region // Temp:
            string strTid = objRQ_OS_Invoice_InvoiceTemp.Tid;
            objRT_OS_Invoice_InvoiceTemp = new RT_OS_Invoice_InvoiceTemp();
            DataSet mdsResult = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            DateTime dtimeSys = DateTime.UtcNow;
            //DataSet mdsExec = null;
            //DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(objRQ_OS_Invoice_InvoiceTemp.Tid);
            //int nTidSeq = 0;
            //bool bNeedTransaction = true;
            string strFunctionName = "WAS_OS_Invoice_InvoiceTemp_Save";
            string strErrorCodeDefault = TError.ErridnInventory.WAS_OS_Invoice_InvoiceTemp_Save;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
                , "FlagIsDelete", objRQ_OS_Invoice_InvoiceTemp.FlagIsDelete
                , "Lst_OS_Invoice_InvoiceTemp", TJson.JsonConvert.SerializeObject(objRQ_OS_Invoice_InvoiceTemp.Lst_OS_Invoice_InvoiceTemp)
                , "Lst_OS_Invoice_InvoiceTempDtl", TJson.JsonConvert.SerializeObject(objRQ_OS_Invoice_InvoiceTemp.Lst_OS_Invoice_InvoiceTempDtl)
                });
            #endregion

            try
            {
                #region // Init:
                #endregion

                #region // Refine and Check Input:
                List<OS_Invoice_InvoiceTemp> lst_OS_Invoice_InvoiceTemp = new List<OS_Invoice_InvoiceTemp>();
                List<OS_Invoice_InvoiceTempDtl> lst_OS_Invoice_InvoiceTempDtl = new List<OS_Invoice_InvoiceTempDtl>();
                #endregion

                #region // Refine and Check Input:
                ////
                DataSet dsData = new DataSet();
                {
                    ////
                    ////
                    if (objRQ_OS_Invoice_InvoiceTemp.Lst_OS_Invoice_InvoiceTemp != null)
                    {
                        DataTable dt_OS_Invoice_InvoiceTemp = TUtils.DataTableCmUtils.ToDataTable<OS_Invoice_InvoiceTemp>(objRQ_OS_Invoice_InvoiceTemp.Lst_OS_Invoice_InvoiceTemp, "OS_Invoice_InvoiceTemp");
                        dsData.Tables.Add(dt_OS_Invoice_InvoiceTemp);
                    }

                    ////
                    if (objRQ_OS_Invoice_InvoiceTemp.Lst_OS_Invoice_InvoiceTempDtl != null)
                    {
                        DataTable dt_OS_Invoice_InvoiceTempDtl = TUtils.DataTableCmUtils.ToDataTable<OS_Invoice_InvoiceTempDtl>(objRQ_OS_Invoice_InvoiceTemp.Lst_OS_Invoice_InvoiceTempDtl, "OS_Invoice_InvoiceTempDtl");
                        dsData.Tables.Add(dt_OS_Invoice_InvoiceTempDtl);
                    }

                    ////

                }
                #endregion

                #region // WS_OS_Invoice_InvoiceTemp_Create:
                mdsResult = OS_Invoice_InvoiceTemp_Save(
                    objRQ_OS_Invoice_InvoiceTemp.Tid // strTid
                    , objRQ_OS_Invoice_InvoiceTemp.GwUserCode // strGwUserCode
                    , objRQ_OS_Invoice_InvoiceTemp.GwPassword // strGwPassword
                    , objRQ_OS_Invoice_InvoiceTemp.WAUserCode // strUserCode
                    , objRQ_OS_Invoice_InvoiceTemp.WAUserPassword // strUserPassword
                    , ref alParamsCoupleError // alParamsCoupleError
                                              ////
                    , objRQ_OS_Invoice_InvoiceTemp.FlagIsDelete // objFlagIsDelete
                                                                ////
                    , dsData // dsData
                    );
                #endregion

                // Return Good:
                return mdsResult;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsResult
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Write ReturnLog:
                //_cf.ProcessBizReturn(
                //	ref mdsResult // mdsFinal
                //	, strTid // strTid
                //	, strFunctionName // strFunctionName
                //	);
                #endregion
            }
        }

        private void OS_Invoice_InvoiceTemp_DeleteX(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            , DateTime dtimeSys
            ////
            , DataSet dsData
            ////
            , object objFt_Cols_Upd
            )
        {
            #region // Temp:
            //int nTidSeq = 0;
            //bool bMyDebugSql = false;
            string strFunctionName = "OS_Invoice_InvoiceTemp_DeleteX";
            //string strErrorCodeDefault = TError.ErridnInventory.OS_Invoice_InvoiceTemp_SaveAllX;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
                ////
				, "objFt_Cols_Upd", objFt_Cols_Upd
                });
            //ArrayList alPCErrEx = new ArrayList();
            ////
            Hashtable htParamsSql = new Hashtable();
            #endregion

            #region // Convert Input:
            alParamsCoupleError.AddRange(new object[]{
                "Check.dsData", CmUtils.XmlUtils.DataSet2XmlSimple(dsData)
                });
            #endregion

            #region // Refine and Check Input:
            string strFt_Cols_Upd = TUtils.CUtils.StdParam(objFt_Cols_Upd);
            strFt_Cols_Upd = (strFt_Cols_Upd == null ? "" : strFt_Cols_Upd);
            ////

            ////
            bool bUpd_AttachedDelFilePath = strFt_Cols_Upd.Contains("OS_Invoice_InvoiceTemp.AttachedDelFilePath".ToUpper());
            bool bUpd_DeleteReason = strFt_Cols_Upd.Contains("OS_Invoice_InvoiceTemp.DeleteReason".ToUpper());
            bool bUpd_InvoicePDFFilePath = strFt_Cols_Upd.Contains("OS_Invoice_InvoiceTemp.InvoicePDFFilePath".ToUpper());
            bool bUpd_DeleteDTimeUTC = strFt_Cols_Upd.Contains("OS_Invoice_InvoiceTemp.DeleteDTimeUTC".ToUpper());
            bool bUpd_DeleteBy = strFt_Cols_Upd.Contains("OS_Invoice_InvoiceTemp.DeleteBy".ToUpper());
            bool bUpd_InvoiceStatus = strFt_Cols_Upd.Contains("OS_Invoice_InvoiceTemp.InvoiceStatus".ToUpper());
            //bool bUpd_InvoiceDtlStatus = strFt_Cols_Upd.Contains("OS_Invoice_InvoiceTemp.InvoiceDtlStatus".ToUpper());

            #endregion

            #region // Refine and Check Input OS_Invoice_InvoiceTemp:

            ////
            DataTable dtInput_OS_Invoice_InvoiceTemp = null;
            {
                ////
                string strTableCheck = "OS_Invoice_InvoiceTemp";
                ////
                if (!dsData.Tables.Contains(strTableCheck))
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.TableName", strTableCheck
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.OS_Invoice_InvoiceTemp_SaveX_Input_InvoiceTblNotFound
                        , null
                        , alParamsCoupleError.ToArray()
                        );
                }
                dtInput_OS_Invoice_InvoiceTemp = dsData.Tables[strTableCheck];
                ////
                if (dtInput_OS_Invoice_InvoiceTemp.Rows.Count < 1)
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.TableName", strTableCheck
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.OS_Invoice_InvoiceTemp_SaveX_Input_InvoiceTblInvalid
                        , null
                        , alParamsCoupleError.ToArray()
                        );
                }
                ////
                TUtils.CUtils.StdDataInTable(
                    dtInput_OS_Invoice_InvoiceTemp // dtData
                    , "StdParam", "InvoiceCode" // arrstrCouple
                    , "StdParam", "AttachedDelFilePath" // arrstrCouple
                    , "StdParam", "DeleteReason" // arrstrCouple
                    , "StdParam", "InvoicePDFFilePath" // arrstrCouple
                    , "StdDTime", "DeleteDTimeUTC" // arrstrCouple
                    , "", "DeleteBy" // arrstrCouple
                    , "StdFlag", "InvoiceStatus" // arrstrCouple
                    );
                ////

                TUtils.CUtils.MyForceNewColumn(ref dtInput_OS_Invoice_InvoiceTemp, "LogLUDTimeUTC", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_OS_Invoice_InvoiceTemp, "LogLUBy", typeof(object));
                ////
                for (int nScan = 0; nScan < dtInput_OS_Invoice_InvoiceTemp.Rows.Count; nScan++)
                {
                    ////
                    DataRow drScan = dtInput_OS_Invoice_InvoiceTemp.Rows[nScan];

                    ////
                    DataTable dtDB_OS_Invoice_InvoiceTemp = null;

                    ////
                    OS_Invoice_InvoiceTemp_CheckDB(
                        ref alParamsCoupleError // alParamsCoupleError
                        , drScan["InvoiceCode"] // objAssetCode
                        , TConst.Flag.Yes // strFlagExistToCheck
                        , "" // strFlagActiveListToCheck
                        , out dtDB_OS_Invoice_InvoiceTemp // dtDB_OS_Invoice_InvoiceTemp
                        );

                    string strAttachedDelFilePath = string.Format("{0}", drScan["AttachedDelFilePath"]).Trim();
                    string strDeleteReason = string.Format("{0}", drScan["DeleteReason"]).Trim();
                    string strInvoicePDFFilePath = string.Format("{0}", drScan["InvoicePDFFilePath"]).Trim();
                    string strDeleteDTimeUTC = TUtils.CUtils.StdDTime(drScan["DeleteDTimeUTC"]);
                    string strDeleteBy = string.Format("{0}", drScan["DeleteBy"]).Trim();


                    ////
                    if (bUpd_InvoicePDFFilePath && string.IsNullOrEmpty(strInvoicePDFFilePath))
                    {
                        alParamsCoupleError.AddRange(new object[]{
                            "Check.strInvoicePDFFilePath", strInvoicePDFFilePath
                            });
                        throw CmUtils.CMyException.Raise(
                            TError.ErridnInventory.Invoice_DtlCustomField_Update_InvalidInvoiceDtlCustomFieldName
                            , null
                            , alParamsCoupleError.ToArray()
                            );
                    }
                    ////
                    if (bUpd_DeleteDTimeUTC && string.IsNullOrEmpty(strDeleteDTimeUTC))
                    {
                        alParamsCoupleError.AddRange(new object[]{
                            "Check.strDeleteDTimeUTC", strDeleteDTimeUTC
                            });
                        throw CmUtils.CMyException.Raise(
                            TError.ErridnInventory.Invoice_DtlCustomField_Update_InvalidInvoiceDtlCustomFieldName
                            , null
                            , alParamsCoupleError.ToArray()
                            );
                    }
                    ////
                    if (bUpd_DeleteBy && string.IsNullOrEmpty(strDeleteBy))
                    {
                        alParamsCoupleError.AddRange(new object[]{
                            "Check.strDeleteBy", strDeleteBy
                            });
                        throw CmUtils.CMyException.Raise(
                            TError.ErridnInventory.Invoice_DtlCustomField_Update_InvalidInvoiceDtlCustomFieldName
                            , null
                            , alParamsCoupleError.ToArray()
                            );
                    }

                    ////
                    drScan["AttachedDelFilePath"] = strAttachedDelFilePath;
                    drScan["DeleteReason"] = strDeleteReason;
                    drScan["InvoicePDFFilePath"] = strInvoicePDFFilePath; // string.Format("{0}", drScan["InvoiceDtlCustomFieldName"]).Trim();
                    drScan["DeleteDTimeUTC"] = strDeleteDTimeUTC;
                    drScan["DeleteBy"] = strDeleteBy;
                    drScan["InvoiceStatus"] = TConst.InvoiceStatus.Deleted;
                    drScan["LogLUDTimeUTC"] = dtimeSys.ToString("yyyy-MM-dd HH:mm:ss");
                    drScan["LogLUBy"] = strWAUserCode;
                }
            }
            #endregion

            #region //// SaveTemp OS_Invoice_InvoiceTemp:
            //if (!bIsDelete)
            {
                // Upload:
                TUtils.CUtils.MyBuildDBDT_Common(
                    _cf.db // db
                    , "#input_OS_Invoice_InvoiceTemp" // strTableName
                    , new object[] {
                            "InvoiceCode", TConst.BizMix.Default_DBColType
                            , "AttachedDelFilePath", TConst.BizMix.Default_DBColType
                            , "DeleteReason", TConst.BizMix.Default_DBColType
                            , "InvoicePDFFilePath", TConst.BizMix.Default_DBColType
                            , "DeleteDTimeUTC", TConst.BizMix.Default_DBColType
                            , "DeleteBy", TConst.BizMix.Default_DBColType
                            , "InvoiceStatus", TConst.BizMix.Default_DBColType
                            , "LogLUDTimeUTC", TConst.BizMix.Default_DBColType
                            , "LogLUBy", TConst.BizMix.Default_DBColType
                        } // arrSingleStructure
                    , dtInput_OS_Invoice_InvoiceTemp // dtData
                );
            }
            #endregion

            #region // SaveDB OS_Invoice_InvoiceTemp:
            {
                ////
                string zzB_Update_OS_Invoice_InvoiceTemp_ClauseSet_zzE = @"
								t.LogLUDTimeUTC = f.LogLUDTimeUTC
								, t.LogLUBy = f.LogLUBy
							";
                ////
                string zzB_Update_OS_Invoice_InvoiceTempDtl_ClauseSet_zzE = @"
						    t.LogLUDTimeUTC = f.LogLUDTimeUTC
						    , t.LogLUBy = f.LogLUBy
						    , t.InvoiceDtlStatus = f.InvoiceDtlStatus
						";

                if (bUpd_AttachedDelFilePath) zzB_Update_OS_Invoice_InvoiceTemp_ClauseSet_zzE += ", t.AttachedDelFilePath = f.AttachedDelFilePath";
                if (bUpd_DeleteReason) zzB_Update_OS_Invoice_InvoiceTemp_ClauseSet_zzE += ", t.DeleteReason = f.DeleteReason";
                if (bUpd_InvoicePDFFilePath) zzB_Update_OS_Invoice_InvoiceTemp_ClauseSet_zzE += ", t.InvoicePDFFilePath = f.InvoicePDFFilePath";
                if (bUpd_DeleteDTimeUTC) zzB_Update_OS_Invoice_InvoiceTemp_ClauseSet_zzE += ", t.DeleteDTimeUTC = f.DeleteDTimeUTC";
                if (bUpd_DeleteBy) zzB_Update_OS_Invoice_InvoiceTemp_ClauseSet_zzE += ", t.DeleteBy = f.DeleteBy";
                if (bUpd_InvoiceStatus) zzB_Update_OS_Invoice_InvoiceTemp_ClauseSet_zzE += ", t.InvoiceStatus = f.InvoiceStatus";
                //if (bUpd_InvoiceDtlStatus) zzB_Update_OS_Invoice_InvoiceTempDtl_ClauseSet_zzE += ", t.InvoiceDtlStatus = f.InvoiceDtlStatus";
                ////
                string zzB_Update_OS_Invoice_InvoiceTemp_zzE = CmUtils.StringUtils.Replace(@"
							---- OS_Invoice_InvoiceTemp:
							update t
							set 
								zzB_Update_OS_Invoice_InvoiceTemp_ClauseSet_zzE
							from OS_Invoice_InvoiceTemp t --//[mylock]
								inner join #input_OS_Invoice_InvoiceTemp f --//[mylock]
									on t.InvoiceCode = f.InvoiceCode
							where (1=1)
							;
						"
                    , "zzB_Update_OS_Invoice_InvoiceTemp_ClauseSet_zzE", zzB_Update_OS_Invoice_InvoiceTemp_ClauseSet_zzE
                    );

                ////
                string zzB_Update_OS_Invoice_InvoiceTempDtl_zzE = CmUtils.StringUtils.Replace(@"
							---- #tbl_OS_Invoice_InvoiceTempDtl_Temp: 
                        select 
                            t.InvoiceCode
                            , t.Idx
                            , f.InvoiceStatus InvoiceDtlStatus
                            , f.LogLUDTimeUTC
                            , f.LogLUBy
                        into #tbl_OS_Invoice_InvoiceTempDtl_Temp
						from OS_Invoice_InvoiceTempDtl t --//[mylock]
							inner join #input_OS_Invoice_InvoiceTemp f --//[mylock]
								on t.InvoiceCode = f.InvoiceCode
						where (1=1)
						;

                        ---- Update:
						update t
						set 
							zzB_Update_OS_Invoice_InvoiceTempDtl_ClauseSet_zzE
						from OS_Invoice_InvoiceTempDtl t --//[mylock]
							inner join #tbl_OS_Invoice_InvoiceTempDtl_Temp f --//[mylock]
								on t.InvoiceCode = f.InvoiceCode
								    and t.Idx = f.Idx
						where (1=1)
						;
						"
                    , "zzB_Update_OS_Invoice_InvoiceTempDtl_ClauseSet_zzE", zzB_Update_OS_Invoice_InvoiceTempDtl_ClauseSet_zzE
                    );

                ////
                string strSql_Exec = CmUtils.StringUtils.Replace(@"
							----
							zzB_Update_OS_Invoice_InvoiceTemp_zzE
							----
							zzB_Update_OS_Invoice_InvoiceTempDtl_zzE
							----
						"
                    , "zzB_Update_OS_Invoice_InvoiceTemp_zzE", zzB_Update_OS_Invoice_InvoiceTemp_zzE
                    , "zzB_Update_OS_Invoice_InvoiceTempDtl_zzE", zzB_Update_OS_Invoice_InvoiceTempDtl_zzE
                    );
                DataSet dsDB_Check = _cf.db.ExecQuery(
                    strSql_Exec
                    );
            }
            #endregion

            #region //// Clear For Debug:
            {
                ////
                string strSqlClearForDebug = CmUtils.StringUtils.Replace(@"
						---- Clear for Debug:
						drop table #input_OS_Invoice_InvoiceTemp;
						--drop table #input_OS_Invoice_InvoiceTempDtl;
					");

                _cf.db.ExecQuery(
                    strSqlClearForDebug
                    );
                ////
            }
            #endregion

            // Return Good:
            //MyCodeLabel_Done:
            return;
            //TDALUtils.DBUtils.CommitSafety(_cf.db);
            //mdsFinal.AcceptChanges();
            //return mdsFinal;		
        }


        public DataSet OS_Invoice_InvoiceTemp_Delete(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            ////
            , DataSet dsData
            ////
            , object objFt_Cols_Upd
            )
        {
            #region // Temp:
            DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            //int nTidSeq = 0;
            DateTime dtimeSys = DateTime.UtcNow;
            string strFunctionName = "OS_Invoice_InvoiceTemp_Delete";
            string strErrorCodeDefault = TError.ErridnInventory.OS_Invoice_InvoiceTemp_Delete;
            alParamsCoupleError.AddRange(new object[]{
                    "strFunctionName", strFunctionName
                    , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
			        ////
				    , "objFt_Cols_Upd", objFt_Cols_Upd
                    });
            #endregion

            try
            {
                #region // Init:
                //_cf.db.LogUserId = _cf.sinf.strUserCode;
                _cf.db.BeginTransaction();

                // Write RequestLog:
                _cf.ProcessBizReq_OutSide(
                    strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    , alParamsCoupleError // alParamsCoupleError
                    );

                //// Sys_User_CheckAuthentication:
                //Sys_User_CheckAuthentication(
                //    ref alParamsCoupleError
                //    , strWAUserCode
                //    , strWAUserPassword
                //    );

                //// Check Access/Deny:
                //Sys_Access_CheckDenyV30(
                //    ref alParamsCoupleError
                //    , strWAUserCode
                //    , strFunctionName
                //    );
                #endregion

                #region // OS_Invoice_InvoiceTemp_DeleteX:
                //DataSet dsGetData = null;
                {

                    OS_Invoice_InvoiceTemp_DeleteX(
                        strTid // strTid
                        , strGwUserCode // strGwUserCode
                        , strGwPassword // strGwPassword
                        , strWAUserCode // strWAUserCode
                        , strWAUserPassword // strWAUserPassword
                        , ref alParamsCoupleError // alParamsCoupleError
                        , dtimeSys // dtimeSys
                                   ////
                        , dsData // dsData
                                 ////
                        , objFt_Cols_Upd // objFt_Cols_Upd
                        );
                }
                ////
                //CmUtils.DataUtils.MoveDataTable(ref mdsFinal, ref dsGetData);
                #endregion

                // Return Good:
                TDALUtils.DBUtils.CommitSafety(_cf.db);
                mdsFinal.AcceptChanges();
                return mdsFinal;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Rollback:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);

                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsFinal
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Rollback and Release resources:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);
                TDALUtils.DBUtils.ReleaseAllSemaphore(_cf.db_Sys, true);

                // Write ReturnLog:
                _cf.ProcessBizReturn_OutSide(
                    ref mdsFinal // mdsFinal
                    , strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    );
                #endregion
            }
        }

        public DataSet WAS_OS_Invoice_InvoiceTemp_Delete(
            ref ArrayList alParamsCoupleError
            , RQ_OS_Invoice_InvoiceTemp objRQ_OS_Invoice_InvoiceTemp
            ////
            , out RT_OS_Invoice_InvoiceTemp objRT_OS_Invoice_InvoiceTemp
            )
        {
            #region // Temp:
            string strTid = objRQ_OS_Invoice_InvoiceTemp.Tid;
            objRT_OS_Invoice_InvoiceTemp = new RT_OS_Invoice_InvoiceTemp();
            DataSet mdsResult = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            DateTime dtimeSys = DateTime.UtcNow;
            //DataSet mdsExec = null;
            //DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(objRQ_OS_Invoice_InvoiceTemp.Tid);
            //int nTidSeq = 0;
            //bool bNeedTransaction = true;
            string strFunctionName = "WAS_OS_Invoice_InvoiceTemp_Delete";
            string strErrorCodeDefault = TError.ErridnInventory.WAS_OS_Invoice_InvoiceTemp_Delete;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
                , "Lst_OS_Invoice_InvoiceTemp", TJson.JsonConvert.SerializeObject(objRQ_OS_Invoice_InvoiceTemp.Lst_OS_Invoice_InvoiceTemp)
                , "Lst_OS_Invoice_InvoiceTempDtl", TJson.JsonConvert.SerializeObject(objRQ_OS_Invoice_InvoiceTemp.Lst_OS_Invoice_InvoiceTempDtl)
                });
            #endregion

            try
            {
                #region // Init:
                #endregion

                #region // Refine and Check Input:
                List<OS_Invoice_InvoiceTemp> lst_OS_Invoice_InvoiceTemp = new List<OS_Invoice_InvoiceTemp>();
                List<OS_Invoice_InvoiceTempDtl> lst_OS_Invoice_InvoiceTempDtl = new List<OS_Invoice_InvoiceTempDtl>();
                #endregion

                #region // Refine and Check Input:
                ////
                DataSet dsData = new DataSet();
                {
                    ////
                    if (objRQ_OS_Invoice_InvoiceTemp.Lst_OS_Invoice_InvoiceTemp != null)
                    {
                        DataTable dt_OS_Invoice_InvoiceTemp = TUtils.DataTableCmUtils.ToDataTable<OS_Invoice_InvoiceTemp>(objRQ_OS_Invoice_InvoiceTemp.Lst_OS_Invoice_InvoiceTemp, "OS_Invoice_InvoiceTemp");
                        dsData.Tables.Add(dt_OS_Invoice_InvoiceTemp);
                    }

                    ////
                    if (objRQ_OS_Invoice_InvoiceTemp.Lst_OS_Invoice_InvoiceTempDtl != null)
                    {
                        DataTable dt_OS_Invoice_InvoiceTempDtl = TUtils.DataTableCmUtils.ToDataTable<OS_Invoice_InvoiceTempDtl>(objRQ_OS_Invoice_InvoiceTemp.Lst_OS_Invoice_InvoiceTempDtl, "OS_Invoice_InvoiceTempDtl");
                        dsData.Tables.Add(dt_OS_Invoice_InvoiceTempDtl);
                    }

                }
                #endregion

                #region // WS_OS_Invoice_InvoiceTemp_Delete:
                mdsResult = OS_Invoice_InvoiceTemp_Delete(
                    objRQ_OS_Invoice_InvoiceTemp.Tid // strTid
                    , objRQ_OS_Invoice_InvoiceTemp.GwUserCode // strGwUserCode
                    , objRQ_OS_Invoice_InvoiceTemp.GwPassword // strGwPassword
                    , objRQ_OS_Invoice_InvoiceTemp.WAUserCode // strUserCode
                    , objRQ_OS_Invoice_InvoiceTemp.WAUserPassword // strUserPassword
                    , ref alParamsCoupleError // alParamsCoupleError
                                              ////
                    , dsData // dsData
                    , objRQ_OS_Invoice_InvoiceTemp.Ft_Cols_Upd // objFt_Cols_Upd
                    );
                #endregion

                // Return Good:
                return mdsResult;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsResult
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Write ReturnLog:
                //_cf.ProcessBizReturn(
                //	ref mdsResult // mdsFinal
                //	, strTid // strTid
                //	, strFunctionName // strFunctionName
                //	);
                #endregion
            }
        }

        private void OS_Invoice_InvoiceTemp_UpdMultiSignStatusX(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            , DateTime dtimeSys
            ////
            , DataSet dsData
            ////
            , object objFt_Cols_Upd
            )
        {
            #region // Temp:
            //int nTidSeq = 0;
            //bool bMyDebugSql = false;
            string strFunctionName = "OS_Invoice_InvoiceTemp_UpdMultiSignStatusX";
            //string strErrorCodeDefault = TError.ErridnInventory.OS_Invoice_InvoiceTemp_SaveAllX;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
                ////
				, "objFt_Cols_Upd", objFt_Cols_Upd
                });
            //ArrayList alPCErrEx = new ArrayList();
            ////
            Hashtable htParamsSql = new Hashtable();
            #endregion

            #region // Convert Input:
            alParamsCoupleError.AddRange(new object[]{
                "Check.dsData", CmUtils.XmlUtils.DataSet2XmlSimple(dsData)
                });
            #endregion

            #region // Refine and Check Input:
            ////
            string strFt_Cols_Upd = TUtils.CUtils.StdParam(objFt_Cols_Upd);
            strFt_Cols_Upd = (strFt_Cols_Upd == null ? "" : strFt_Cols_Upd);

            ////
            //bool bUpd_QtyMinSt = strFt_Cols_Upd.Contains("Mnf_PartAudit.QtyMinSt".ToUpper());
            bool bUpd_SignStatus = strFt_Cols_Upd.Contains("OS_Invoice_InvoiceTemp.SignStatus".ToUpper());
            #endregion

            #region // Refine and Check Input OS_Invoice_InvoiceTemp:

            ////
            DataTable dtInput_OS_Invoice_InvoiceTemp = null;
            ////
            {
                ////
                string strTableCheck = "OS_Invoice_InvoiceTemp";
                ////
                if (!dsData.Tables.Contains(strTableCheck))
                {
                    alParamsCoupleError.AddRange(new object[]{
                            "Check.TableName", strTableCheck
                            });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.OS_Invoice_InvoiceTemp_UpdMultiSignStatus_Input_OS_Invoice_InvoiceTemptblNotFound
                        , null
                        , alParamsCoupleError.ToArray()
                        );
                }
                dtInput_OS_Invoice_InvoiceTemp = dsData.Tables[strTableCheck];
                ////
                if (dtInput_OS_Invoice_InvoiceTemp.Rows.Count < 1)
                {
                    alParamsCoupleError.AddRange(new object[]{
                            "Check.TableName", strTableCheck
                            });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.OS_Invoice_InvoiceTemp_UpdMultiSignStatus_Input_OS_Invoice_InvoiceTemptblInvalid
                        , null
                        , alParamsCoupleError.ToArray()
                        );
                }
                ////
                TUtils.CUtils.StdDataInTable(
                    dtInput_OS_Invoice_InvoiceTemp // dtData
                    , "StdParam", "InvoiceCode" // arrstrCouple
                    , "StdParam", "SignStatus" // arrstrCouple
                    );

                TUtils.CUtils.MyForceNewColumn(ref dtInput_OS_Invoice_InvoiceTemp, "LogLUDTimeUTC", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_OS_Invoice_InvoiceTemp, "LogLUBy", typeof(object));
                ////
                for (int nScan = 0; nScan < dtInput_OS_Invoice_InvoiceTemp.Rows.Count; nScan++)
                {
                    ////
                    DataRow drScan = dtInput_OS_Invoice_InvoiceTemp.Rows[nScan];

                    ////
                    DataTable dtDB_OS_Invoice_InvoiceTemp = null;

                    OS_Invoice_InvoiceTemp_CheckDB(
                        ref alParamsCoupleError // alParamsCoupleError
                        , drScan["InvoiceCode"] // objStationCCCode
                        , TConst.Flag.Yes // strFlagExistToCheck
                        , "" // strFlagActiveListToCheck
                        , out dtDB_OS_Invoice_InvoiceTemp // dtDB_OS_Invoice_InvoiceTemp
                        );
                    ////

                    //drScan["Remark"] = string.Format("{0}", drScan["Remark"]).Trim();
                    drScan["LogLUDTimeUTC"] = dtimeSys.ToString("yyyy-MM-dd HH:mm:ss");
                    drScan["LogLUBy"] = strWAUserCode;
                }
                // Upload:
                TUtils.CUtils.MyBuildDBDT_Common(
                    _cf.db // db
                    , "#input_OS_Invoice_InvoiceTemp" // strTableName
                    , new object[] {
                            "InvoiceCode", TConst.BizMix.Default_DBColType,
                            "SignStatus", TConst.BizMix.Default_DBColType,
                            "LogLUDTimeUTC", TConst.BizMix.Default_DBColType,
                            "LogLUBy", TConst.BizMix.Default_DBColType,
                        } // arrSingleStructure
                    , dtInput_OS_Invoice_InvoiceTemp // dtData
                    );
                ////
            }
            #endregion

            #region // SaveDB OS_Invoice_InvoiceTemp:
            {
                ////
                string zzB_Update_OS_Invoice_InvoiceTemp_ClauseSet_zzE = @"
								t.LogLUDTimeUTC = f.LogLUDTimeUTC
								, t.LogLUBy = f.LogLUBy
							";
                //if (bUpd_QtyMinSt) zzB_Update_Mnf_PartAudit_ClauseSet_zzE += ", t.QtyMinSt = f.QtyMinSt";
                if (bUpd_SignStatus) zzB_Update_OS_Invoice_InvoiceTemp_ClauseSet_zzE += ", t.SignStatus = f.SignStatus";
                ////
                string zzB_Update_OS_Invoice_InvoiceTemp_zzE = CmUtils.StringUtils.Replace(@"
							---- OS_Invoice_InvoiceTemp:
							update t
							set 
								zzB_Update_OS_Invoice_InvoiceTemp_ClauseSet_zzE
							from OS_Invoice_InvoiceTemp t --//[mylock]
								inner join #input_OS_Invoice_InvoiceTemp f --//[mylock]
									on t.InvoiceCode = f.InvoiceCode
							where (1=1)
							;
							
						"
                    , "zzB_Update_OS_Invoice_InvoiceTemp_ClauseSet_zzE", zzB_Update_OS_Invoice_InvoiceTemp_ClauseSet_zzE
                    );
                ////
                string strSql_Exec = CmUtils.StringUtils.Replace(@"
							----
							zzB_Update_OS_Invoice_InvoiceTemp_zzE
							----
						"
                    , "zzB_Update_OS_Invoice_InvoiceTemp_zzE", zzB_Update_OS_Invoice_InvoiceTemp_zzE
                    );
                DataSet dsDB_Check = _cf.db.ExecQuery(
                    strSql_Exec
                    );
            }
            #endregion

            #region //// Clear For Debug:
            {
                ////
                string strSqlClearForDebug = CmUtils.StringUtils.Replace(@"
						---- Clear for Debug:
						drop table #input_OS_Invoice_InvoiceTemp;
						--drop table #input_OS_Invoice_InvoiceTempDtl;
					");

                _cf.db.ExecQuery(
                    strSqlClearForDebug
                    );
                ////
            }
            #endregion

            // Return Good:
            //MyCodeLabel_Done:
            return;
            //TDALUtils.DBUtils.CommitSafety(_cf.db);
            //mdsFinal.AcceptChanges();
            //return mdsFinal;		
        }


        public DataSet OS_Invoice_InvoiceTemp_UpdMultiSignStatus(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            ////
            , DataSet dsData
            ////
            , object objFt_Cols_Upd
            )
        {
            #region // Temp:
            DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            //int nTidSeq = 0;
            DateTime dtimeSys = DateTime.UtcNow;
            string strFunctionName = "OS_Invoice_InvoiceTemp_UpdMultiSignStatus";
            string strErrorCodeDefault = TError.ErridnInventory.OS_Invoice_InvoiceTemp_UpdMultiSignStatus;
            alParamsCoupleError.AddRange(new object[]{
                    "strFunctionName", strFunctionName
                    , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
			        ////
				    , "objFt_Cols_Upd", objFt_Cols_Upd
                    });
            #endregion

            try
            {
                #region // Init:
                //_cf.db.LogUserId = _cf.sinf.strUserCode;
                _cf.db.BeginTransaction();

                // Write RequestLog:
                _cf.ProcessBizReq_OutSide(
                    strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    , alParamsCoupleError // alParamsCoupleError
                    );

                //// Sys_User_CheckAuthentication:
                //Sys_User_CheckAuthentication(
                //    ref alParamsCoupleError
                //    , strWAUserCode
                //    , strWAUserPassword
                //    );

                //// Check Access/Deny:
                //Sys_Access_CheckDenyV30(
                //    ref alParamsCoupleError
                //    , strWAUserCode
                //    , strFunctionName
                //    );
                #endregion

                #region // OS_Invoice_InvoiceTemp_UpdMultiSignStatusX:
                //DataSet dsGetData = null;
                {

                    OS_Invoice_InvoiceTemp_UpdMultiSignStatusX(
                        strTid // strTid
                        , strGwUserCode // strGwUserCode
                        , strGwPassword // strGwPassword
                        , strWAUserCode // strWAUserCode
                        , strWAUserPassword // strWAUserPassword
                        , ref alParamsCoupleError // alParamsCoupleError
                        , dtimeSys // dtimeSys
                                   ////
                        , dsData // dsData
                                 ////
                        , objFt_Cols_Upd // objFt_Cols_Upd
                        );
                }
                ////
                //CmUtils.DataUtils.MoveDataTable(ref mdsFinal, ref dsGetData);
                #endregion

                // Return Good:
                TDALUtils.DBUtils.CommitSafety(_cf.db);
                mdsFinal.AcceptChanges();
                return mdsFinal;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Rollback:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);

                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsFinal
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Rollback and Release resources:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);
                TDALUtils.DBUtils.ReleaseAllSemaphore(_cf.db_Sys, true);

                // Write ReturnLog:
                _cf.ProcessBizReturn_OutSide(
                    ref mdsFinal // mdsFinal
                    , strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    );
                #endregion
            }
        }

        public DataSet WAS_OS_Invoice_InvoiceTemp_UpdMultiSignStatus(
            ref ArrayList alParamsCoupleError
            , RQ_OS_Invoice_InvoiceTemp objRQ_OS_Invoice_InvoiceTemp
            ////
            , out RT_OS_Invoice_InvoiceTemp objRT_OS_Invoice_InvoiceTemp
            )
        {
            #region // Temp:
            string strTid = objRQ_OS_Invoice_InvoiceTemp.Tid;
            objRT_OS_Invoice_InvoiceTemp = new RT_OS_Invoice_InvoiceTemp();
            DataSet mdsResult = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            DateTime dtimeSys = DateTime.UtcNow;
            //DataSet mdsExec = null;
            //DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(objRQ_OS_Invoice_InvoiceTemp.Tid);
            //int nTidSeq = 0;
            //bool bNeedTransaction = true;
            string strFunctionName = "WAS_OS_Invoice_InvoiceTemp_UpdMultiSignStatus";
            string strErrorCodeDefault = TError.ErridnInventory.WAS_OS_Invoice_InvoiceTemp_UpdMultiSignStatus;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
                , "Lst_OS_Invoice_InvoiceTemp", TJson.JsonConvert.SerializeObject(objRQ_OS_Invoice_InvoiceTemp.Lst_OS_Invoice_InvoiceTemp)
                , "Lst_OS_Invoice_InvoiceTempDtl", TJson.JsonConvert.SerializeObject(objRQ_OS_Invoice_InvoiceTemp.Lst_OS_Invoice_InvoiceTempDtl)
                });
            #endregion

            try
            {
                #region // Init:
                #endregion

                #region // Refine and Check Input:
                List<OS_Invoice_InvoiceTemp> lst_OS_Invoice_InvoiceTemp = new List<OS_Invoice_InvoiceTemp>();
                List<OS_Invoice_InvoiceTempDtl> lst_OS_Invoice_InvoiceTempDtl = new List<OS_Invoice_InvoiceTempDtl>();
                #endregion

                #region // Refine and Check Input:
                ////
                DataSet dsData = new DataSet();
                {
                    ////
                    if (objRQ_OS_Invoice_InvoiceTemp.Lst_OS_Invoice_InvoiceTemp != null)
                    {
                        DataTable dt_OS_Invoice_InvoiceTemp = TUtils.DataTableCmUtils.ToDataTable<OS_Invoice_InvoiceTemp>(objRQ_OS_Invoice_InvoiceTemp.Lst_OS_Invoice_InvoiceTemp, "OS_Invoice_InvoiceTemp");
                        dsData.Tables.Add(dt_OS_Invoice_InvoiceTemp);
                    }

                    ////
                    if (objRQ_OS_Invoice_InvoiceTemp.Lst_OS_Invoice_InvoiceTempDtl != null)
                    {
                        DataTable dt_OS_Invoice_InvoiceTempDtl = TUtils.DataTableCmUtils.ToDataTable<OS_Invoice_InvoiceTempDtl>(objRQ_OS_Invoice_InvoiceTemp.Lst_OS_Invoice_InvoiceTempDtl, "OS_Invoice_InvoiceTempDtl");
                        dsData.Tables.Add(dt_OS_Invoice_InvoiceTempDtl);
                    }

                }
                #endregion

                #region // OS_Invoice_InvoiceTemp_UpdMultiSignStatus:
                mdsResult = OS_Invoice_InvoiceTemp_UpdMultiSignStatus(
                    objRQ_OS_Invoice_InvoiceTemp.Tid // strTid
                    , objRQ_OS_Invoice_InvoiceTemp.GwUserCode // strGwUserCode
                    , objRQ_OS_Invoice_InvoiceTemp.GwPassword // strGwPassword
                    , objRQ_OS_Invoice_InvoiceTemp.WAUserCode // strUserCode
                    , objRQ_OS_Invoice_InvoiceTemp.WAUserPassword // strUserPassword
                    , ref alParamsCoupleError // alParamsCoupleError
                                              ////
                    , dsData // dsData
                    , objRQ_OS_Invoice_InvoiceTemp.Ft_Cols_Upd // objFt_Cols_Upd
                    );
                #endregion

                // Return Good:
                return mdsResult;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsResult
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Write ReturnLog:
                //_cf.ProcessBizReturn(
                //	ref mdsResult // mdsFinal
                //	, strTid // strTid
                //	, strFunctionName // strFunctionName
                //	);
                #endregion
            }
        }
        #endregion
    }
}
