using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.Data;
using System.Globalization;
using System.Net;
using System.Xml;
using System.Linq;
using System.Threading;
//using System.Xml.Linq;

using CmUtils = CommonUtils;
using TDAL = EzDAL.MyDB;
using TDALUtils = EzDAL.Utils;
using TConst = idn.Skycic.Inventory.Constants;
using TUtils = idn.Skycic.Inventory.Utils;
using TError = idn.Skycic.Inventory.Errors;
using TJson = Newtonsoft.Json;

using idn.Skycic.Inventory.Common.Models;
using OSiNOSSv = inos.common.Service;
using inos.common.Model;
using inos.common.Service;
using System.Diagnostics;
using idn.Skycic.Inventory.BizService.Services;

namespace idn.Skycic.Inventory.Biz
{
    public partial class BizidNInventory
    {
        #region // Mst_Province:
        private void Mst_Province_CheckDB(
            ref ArrayList alParamsCoupleError
            , object objProvinceCode
            , string strFlagExistToCheck
            , string strFlagActiveListToCheck
            , out DataTable dtDB_Mst_Province
            )
        {
            // GetInfo:
            string strSqlExec = CmUtils.StringUtils.Replace(@"
					select top 1
						t.*
					from Mst_Province t --//[mylock]
					where (1=1)
						and t.ProvinceCode = @objProvinceCode
					;
				");
            dtDB_Mst_Province = _cf.db.ExecQuery(
                strSqlExec
                , "@objProvinceCode", objProvinceCode
                ).Tables[0];
            dtDB_Mst_Province.TableName = "Mst_Province";

            // strFlagExistToCheck:
            if (strFlagExistToCheck.Length > 0)
            {
                if (CmUtils.StringUtils.StringEqual(strFlagExistToCheck, TConst.Flag.Active) && dtDB_Mst_Province.Rows.Count < 1)
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.ProvinceCode", objProvinceCode
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Mst_Province_CheckDB_ProvinceNotFound
                        , null
                        , alParamsCoupleError.ToArray()
                        );
                }
                if (CmUtils.StringUtils.StringEqual(strFlagExistToCheck, TConst.Flag.Inactive) && dtDB_Mst_Province.Rows.Count > 0)
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.ProvinceCode", objProvinceCode
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Mst_Province_CheckDB_ProvinceExist
                        , null
                        , alParamsCoupleError.ToArray()
                        );
                }
            }

            // strFlagActiveListToCheck:
            if (strFlagActiveListToCheck.Length > 0 && !strFlagActiveListToCheck.Contains(Convert.ToString(dtDB_Mst_Province.Rows[0]["FlagActive"])))
            {
                alParamsCoupleError.AddRange(new object[]{
                    "Check.ProvinceCode", objProvinceCode
                    , "Check.strFlagActiveListToCheck", strFlagActiveListToCheck
                    , "DB.FlagActive", dtDB_Mst_Province.Rows[0]["FlagActive"]
                    });
                throw CmUtils.CMyException.Raise(
                    TError.ErridnInventory.Mst_Province_CheckDB_FlagActiveNotMatched
                    , null
                    , alParamsCoupleError.ToArray()
                    );
            }
        }
        public DataSet RptSv_Mst_Province_Get(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            //// Filter:
            , string strFt_RecordStart
            , string strFt_RecordCount
            , string strFt_WhereClause
            //// Return:
            , string strRt_Cols_Mst_Province
            )
        {
            #region // Temp:
            DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            //int nTidSeq = 0;
            DateTime dtimeSys = DateTime.UtcNow;
            bool bNeedTransaction = true;
            string strFunctionName = "RptSv_Mst_Province_Get";
            string strErrorCodeDefault = TError.ErridnInventory.RptSv_Mst_Province_Get;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				//// Filter
				, "strFt_RecordStart", strFt_RecordStart
                , "strFt_RecordCount", strFt_RecordCount
                , "strFt_WhereClause", strFt_WhereClause
				//// Return
				, "strRt_Cols_Mst_Province", strRt_Cols_Mst_Province
                });
            #endregion

            try
            {
                #region // Init:
                //_cf.db.LogUserId = _cf.sinf.strUserCode;
                if (bNeedTransaction) _cf.db.BeginTransaction();

                // Write RequestLog:
                _cf.ProcessBizReq_OutSide(
                    strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    , alParamsCoupleError // alParamsCoupleError
                    );

                // Sys_User_CheckAuthentication:
                //RptSv_Sys_User_CheckAuthentication(
                //    ref alParamsCoupleError
                //    , strWAUserCode
                //    , strWAUserPassword
                //    );

                //// Check Access/Deny:
                //Sys_Access_CheckDenyV30(
                //    ref alParamsCoupleError
                //    , strWAUserCode
                //    , strFunctionName
                //    );
                #endregion

                #region // Check:
                //// Refine:
                long nFilterRecordStart = Convert.ToInt64(strFt_RecordStart);
                long nFilterRecordEnd = nFilterRecordStart + Convert.ToInt64(strFt_RecordCount) - 1;
                bool bGet_Mst_Province = (strRt_Cols_Mst_Province != null && strRt_Cols_Mst_Province.Length > 0);

                //// drAbilityOfUser:
                //DataRow drAbilityOfUser = myCache_ViewAbility_GetUserInfo(strWAUserCode);

                #endregion

                #region // Build Sql:
                ////
                ArrayList alParamsCoupleSql = new ArrayList();
                alParamsCoupleSql.AddRange(new object[] {
                    "@nFilterRecordStart", nFilterRecordStart
                    , "@nFilterRecordEnd", nFilterRecordEnd
                    });
                ////
                //myCache_ViewAbility_GetDealerInfo(drAbilityOfUser);
                ////
                string strSqlGetData = CmUtils.StringUtils.Replace(@"
						---- #tbl_Mst_Province_Filter_Draft:
						select distinct
							identity(bigint, 0, 1) MyIdxSeq
							, mp.ProvinceCode
						into #tbl_Mst_Province_Filter_Draft
						from Mst_Province mp --//[mylock]
						where (1=1)
							zzB_Where_strFilter_zzE
						order by mp.ProvinceCode asc
						;

						---- Summary:
						select Count(0) MyCount from #tbl_Mst_Province_Filter_Draft t --//[mylock]
						;

						---- #tbl_Mst_Province_Filter:
						select
							t.*
						into #tbl_Mst_Province_Filter
						from #tbl_Mst_Province_Filter_Draft t --//[mylock]
						where
							(t.MyIdxSeq >= @nFilterRecordStart)
							and (t.MyIdxSeq <= @nFilterRecordEnd)
						;

						-------- Mst_Province --------:
						zzB_Select_Mst_Province_zzE
						----------------------------------------

						---- Clear for debug:
						--drop table #tbl_Mst_Province_Filter_Draft;
						--drop table #tbl_Mst_Province_Filter;
					"
                    );
                ////
                string zzB_Select_Mst_Province_zzE = "-- Nothing.";
                if (bGet_Mst_Province)
                {
                    #region // bGet_Mst_Province:
                    zzB_Select_Mst_Province_zzE = CmUtils.StringUtils.Replace(@"
							---- Mst_Province:
							select
								t.MyIdxSeq
								, mp.*
							from #tbl_Mst_Province_Filter t --//[mylock]
								inner join Mst_Province mp --//[mylock]
									on t.ProvinceCode = mp.ProvinceCode
							order by t.MyIdxSeq asc
							;
						"
                        );
                    #endregion
                }
                ////
                string zzB_Where_strFilter_zzE = "";
                {
                    Hashtable htSpCols = new Hashtable();
                    {
                        #region // htSpCols:
                        ////
                        TUtils.CUtils.MyBuildHTSupportedColumns(
                            _cf.db // db
                            , ref htSpCols // htSupportedColumns
                            , "Mst_Province" // strTableNameDB
                            , "Mst_Province." // strPrefixStd
                            , "mp." // strPrefixAlias
                            );
                        ////
                        #endregion
                    }
                    zzB_Where_strFilter_zzE = CmUtils.SqlUtils.BuildWhere(
                        htSpCols // htSpCols
                        , strFt_WhereClause // strClause
                        , "@p_" // strParamPrefix
                        , ref alParamsCoupleSql // alParamsCoupleSql
                        );
                    zzB_Where_strFilter_zzE = (zzB_Where_strFilter_zzE.Length <= 0 ? "" : string.Format(" and ({0})", zzB_Where_strFilter_zzE));
                    alParamsCoupleError.AddRange(new object[]{
                        "zzB_Where_strFilter_zzE", zzB_Where_strFilter_zzE
                        });
                }
                ////
                strSqlGetData = CmUtils.StringUtils.Replace(
                    strSqlGetData
                    , "zzB_Where_strFilter_zzE", zzB_Where_strFilter_zzE
                    , "zzB_Select_Mst_Province_zzE", zzB_Select_Mst_Province_zzE
                    );
                #endregion

                #region // Get Data:
                DataSet dsGetData = _cf.db.ExecQuery(
                    strSqlGetData
                    , alParamsCoupleSql.ToArray()
                    );
                int nIdxTable = 0;
                dsGetData.Tables[nIdxTable++].TableName = "MySummaryTable";
                if (bGet_Mst_Province)
                {
                    dsGetData.Tables[nIdxTable++].TableName = "Mst_Province";
                }
                CmUtils.DataUtils.MoveDataTable(ref mdsFinal, ref dsGetData);
                #endregion

                // Return Good:
                TDALUtils.DBUtils.RollbackSafety(_cf.db); // Always Rollback.
                mdsFinal.AcceptChanges();
                return mdsFinal;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Rollback:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);

                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsFinal
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Rollback and Release resources:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);
                TDALUtils.DBUtils.ReleaseAllSemaphore(_cf.db_Sys, true);

                // Write ReturnLog:
                _cf.ProcessBizReturn_OutSide(
                    ref mdsFinal // mdsFinal
                    , strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    );
                #endregion
            }
        }
        public DataSet Mst_Province_Get(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            //// Filter:
            , string strFt_RecordStart
            , string strFt_RecordCount
            , string strFt_WhereClause
            //// Return:
            , string strRt_Cols_Mst_Province
            )
        {
            #region // Temp:
            DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
			Stopwatch stopWatchFunc = new Stopwatch();
			//int nTidSeq = 0;
			DateTime dtimeSys = DateTime.UtcNow;
            bool bNeedTransaction = true;
            string strFunctionName = "Mst_Province_Get";
            string strErrorCodeDefault = TError.ErridnInventory.Mst_Province_Get;
			ArrayList alParamsCoupleSW = new ArrayList();
			alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				//// Filter
				, "strFt_RecordStart", strFt_RecordStart
                , "strFt_RecordCount", strFt_RecordCount
                , "strFt_WhereClause", strFt_WhereClause
				//// Return
				, "strRt_Cols_Mst_Province", strRt_Cols_Mst_Province
                });
            #endregion

            try
            {
				#region // SW:				
				stopWatchFunc.Start();
				alParamsCoupleSW.AddRange(new object[]{
					"strFunctionName", strFunctionName
					, "stopWatchFunc.Start", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
					});
				#endregion

				#region // Init:
				//_cf.db.LogUserId = _cf.sinf.strUserCode;
				if (bNeedTransaction) _cf.db.BeginTransaction();

                // Write RequestLog:
                _cf.ProcessBizReq_OutSide(
                    strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    , alParamsCoupleError // alParamsCoupleError
                    );

                // Sys_User_CheckAuthentication:
                //Sys_User_CheckAuthentication(
                //    ref alParamsCoupleError
                //    , strWAUserCode
                //    , strWAUserPassword
                //    );

                //// Check Access/Deny:
                //Sys_Access_CheckDenyV30(
                //    ref alParamsCoupleError
                //    , strWAUserCode
                //    , strFunctionName
                //    );
                #endregion

                #region // Check:
                //// Refine:
                long nFilterRecordStart = Convert.ToInt64(strFt_RecordStart);
                long nFilterRecordEnd = nFilterRecordStart + Convert.ToInt64(strFt_RecordCount) - 1;
                bool bGet_Mst_Province = (strRt_Cols_Mst_Province != null && strRt_Cols_Mst_Province.Length > 0);

                //// drAbilityOfUser:
                //DataRow drAbilityOfUser = myCache_ViewAbility_GetUserInfo(strWAUserCode);

                #endregion

                #region // Build Sql:
                ////
                ArrayList alParamsCoupleSql = new ArrayList();
                alParamsCoupleSql.AddRange(new object[] {
                    "@nFilterRecordStart", nFilterRecordStart
                    , "@nFilterRecordEnd", nFilterRecordEnd
                    });
                ////
                //myCache_ViewAbility_GetDealerInfo(drAbilityOfUser);
                ////
                string strSqlGetData = CmUtils.StringUtils.Replace(@"
						---- #tbl_Mst_Province_Filter_Draft:
						select distinct
							identity(bigint, 0, 1) MyIdxSeq
							, mp.ProvinceCode
						into #tbl_Mst_Province_Filter_Draft
						from Mst_Province mp --//[mylock]
						where (1=1)
							zzB_Where_strFilter_zzE
						order by mp.ProvinceCode asc
						;

						---- Summary:
						select Count(0) MyCount from #tbl_Mst_Province_Filter_Draft t --//[mylock]
						;

						---- #tbl_Mst_Province_Filter:
						select
							t.*
						into #tbl_Mst_Province_Filter
						from #tbl_Mst_Province_Filter_Draft t --//[mylock]
						where
							(t.MyIdxSeq >= @nFilterRecordStart)
							and (t.MyIdxSeq <= @nFilterRecordEnd)
						;

						-------- Mst_Province --------:
						zzB_Select_Mst_Province_zzE
						----------------------------------------

						---- Clear for debug:
						--drop table #tbl_Mst_Province_Filter_Draft;
						--drop table #tbl_Mst_Province_Filter;
					"
                    );
                ////
                string zzB_Select_Mst_Province_zzE = "-- Nothing.";
                if (bGet_Mst_Province)
                {
                    #region // bGet_Mst_Province:
                    zzB_Select_Mst_Province_zzE = CmUtils.StringUtils.Replace(@"
							---- Mst_Province:
							select
								t.MyIdxSeq
								, mp.*
							from #tbl_Mst_Province_Filter t --//[mylock]
								inner join Mst_Province mp --//[mylock]
									on t.ProvinceCode = mp.ProvinceCode
							order by t.MyIdxSeq asc
							;
						"
                        );
                    #endregion
                }
                ////
                string zzB_Where_strFilter_zzE = "";
                {
                    Hashtable htSpCols = new Hashtable();
                    {
                        #region // htSpCols:
                        ////
                        TUtils.CUtils.MyBuildHTSupportedColumns(
                            _cf.db // db
                            , ref htSpCols // htSupportedColumns
                            , "Mst_Province" // strTableNameDB
                            , "Mst_Province." // strPrefixStd
                            , "mp." // strPrefixAlias
                            );
                        ////
                        #endregion
                    }
                    zzB_Where_strFilter_zzE = CmUtils.SqlUtils.BuildWhere(
                        htSpCols // htSpCols
                        , strFt_WhereClause // strClause
                        , "@p_" // strParamPrefix
                        , ref alParamsCoupleSql // alParamsCoupleSql
                        );
                    zzB_Where_strFilter_zzE = (zzB_Where_strFilter_zzE.Length <= 0 ? "" : string.Format(" and ({0})", zzB_Where_strFilter_zzE));
                    alParamsCoupleError.AddRange(new object[]{
                        "zzB_Where_strFilter_zzE", zzB_Where_strFilter_zzE
                        });
                }
                ////
                strSqlGetData = CmUtils.StringUtils.Replace(
                    strSqlGetData
                    , "zzB_Where_strFilter_zzE", zzB_Where_strFilter_zzE
                    , "zzB_Select_Mst_Province_zzE", zzB_Select_Mst_Province_zzE
                    );
                #endregion

                #region // Get Data:
                DataSet dsGetData = _cf.db.ExecQuery(
                    strSqlGetData
                    , alParamsCoupleSql.ToArray()
                    );
                int nIdxTable = 0;
                dsGetData.Tables[nIdxTable++].TableName = "MySummaryTable";
                if (bGet_Mst_Province)
                {
                    dsGetData.Tables[nIdxTable++].TableName = "Mst_Province";
                }
                CmUtils.DataUtils.MoveDataTable(ref mdsFinal, ref dsGetData);
                #endregion

                // Return Good:
                TDALUtils.DBUtils.RollbackSafety(_cf.db); // Always Rollback.
                mdsFinal.AcceptChanges();
                return mdsFinal;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Rollback:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);

                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsFinal
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Rollback and Release resources:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);
                TDALUtils.DBUtils.ReleaseAllSemaphore(_cf.db_Sys, true);

				stopWatchFunc.Stop();
				alParamsCoupleSW.AddRange(new object[]{
					"strFunctionName", strFunctionName
					, "stopWatchFunc.Stop", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
					, "stopWatchFunc.ElapsedMilliseconds", stopWatchFunc.ElapsedMilliseconds
					});

				// Write ReturnLog:
				_cf.ProcessBizReturn_OutSide(
                    ref mdsFinal // mdsFinal
                    , strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
					, alParamsCoupleSW // alParamsCoupleSW
					);
                #endregion
            }
        }
        public DataSet Mst_Province_Create(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            ////
            , object objProvinceCode
            , object objProvinceName
            )
         {
            #region // Temp:
            DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            //int nTidSeq = 0;
            DateTime dtimeSys = DateTime.UtcNow;
            string strFunctionName = "Mst_Province_Create";
            string strErrorCodeDefault = TError.ErridnInventory.Mst_Province_Create;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
                ////
				, "objProvinceCode", objProvinceCode
                , "objProvinceName", objProvinceName
                });
            #endregion

            try
            {
                #region // Convert Input:
                #endregion

                #region // Init:
                //_cf.db.LogUserId = _cf.sinf.strUserCode;
                _cf.db.BeginTransaction();

                // Write RequestLog:
                _cf.ProcessBizReq_OutSide(
                    strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    , alParamsCoupleError // alParamsCoupleError
                    );
                #endregion

                #region // Refine and Check Input:
                ////
                string strProvinceCode = TUtils.CUtils.StdParam(objProvinceCode);
                string strProvinceName = string.Format("{0}", objProvinceName).Trim();

                // drAbilityOfUser:
                //DataRow drAbilityOfUser = Sys_User_GetAbilityViewOfUser(strWAUserCode);
                ////
                DataTable dtDB_Mst_Province = null;
                {
                    ////
                    if (strProvinceCode == null || strProvinceCode.Length < 1)
                    {
                        alParamsCoupleError.AddRange(new object[]{
                            "Check.strProvinceCode", strProvinceCode
                            });
                        throw CmUtils.CMyException.Raise(
                            TError.ErridnInventory.Mst_Province_Create_InvalidProvinceCode
                            , null
                            , alParamsCoupleError.ToArray()
                            );
                    }
                    Mst_Province_CheckDB(
                        ref alParamsCoupleError // alParamsCoupleError
                        , strProvinceCode // objProvinceCode
                        , TConst.Flag.No // strFlagExistToCheck
                        , "" // strFlagActiveListToCheck
                        , out dtDB_Mst_Province // dtDB_Mst_Province
                        );
                    ////
                    if (strProvinceName.Length < 1)
                    {
                        alParamsCoupleError.AddRange(new object[]{
                            "Check.strProvinceName", strProvinceName
                            });
                        throw CmUtils.CMyException.Raise(
                            TError.ErridnInventory.Mst_Province_Create_InvalidProvinceName
                            , null
                            , alParamsCoupleError.ToArray()
                            );
                    }
                }
                #endregion

                #region // SaveDB Mst_Province:
                {
                    // Init:
                    //ArrayList alColumnEffective = new ArrayList();
                    string strFN = "";
                    DataRow drDB = dtDB_Mst_Province.NewRow();
                    strFN = "ProvinceCode"; drDB[strFN] = strProvinceCode;
                    strFN = "NetworkID"; drDB[strFN] = nNetworkID;
                    strFN = "ProvinceName"; drDB[strFN] = strProvinceName;
                    strFN = "FlagActive"; drDB[strFN] = TConst.Flag.Active;
                    strFN = "LogLUDTimeUTC"; drDB[strFN] = dtimeSys.ToString("yyyy-MM-dd HH:mm:ss");
                    strFN = "LogLUBy"; drDB[strFN] = strWAUserCode;
                    dtDB_Mst_Province.Rows.Add(drDB);

                    // Save:
                    _cf.db.SaveData(
                        "Mst_Province"
                        , dtDB_Mst_Province
                        //, alColumnEffective.ToArray()
                        );
                }
                #endregion

                // Return Good:
                TDALUtils.DBUtils.CommitSafety(_cf.db);
                mdsFinal.AcceptChanges();
                return mdsFinal;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Rollback:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);

                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsFinal
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Rollback and Release resources:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);
                TDALUtils.DBUtils.ReleaseAllSemaphore(_cf.db_Sys, true);

                // Write ReturnLog:
                _cf.ProcessBizReturn_OutSide(
                    ref mdsFinal // mdsFinal
                    , strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    );
                #endregion
            }
        }
        public DataSet Mst_Province_Update(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            ////
            , object objProvinceCode
            , object objProvinceName
            , object objFlagActive
            ////
            , object objFt_Cols_Upd
            )
        {
            #region // Temp:
            DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            //int nTidSeq = 0;
            DateTime dtimeSys = DateTime.UtcNow;
            string strFunctionName = "Mst_Province_Update";
            string strErrorCodeDefault = TError.ErridnInventory.Mst_Province_Update;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
				, "objProvinceCode", objProvinceCode
                , "objProvinceName", objProvinceName
                , "objFlagActive", objFlagActive
				////
				, "objFt_Cols_Upd", objFt_Cols_Upd
                });
            #endregion

            try
            {
                #region // Convert Input:
                #endregion

                #region // Init:
                //_cf.db.LogUserId = _cf.sinf.strUserCode;
                _cf.db.BeginTransaction();

                // Write RequestLog:
                _cf.ProcessBizReq_OutSide(
                    strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    , alParamsCoupleError // alParamsCoupleError
                    );
                #endregion

                #region // Refine and Check Input:
                ////
                string strFt_Cols_Upd = TUtils.CUtils.StdParam(objFt_Cols_Upd);
                strFt_Cols_Upd = (strFt_Cols_Upd == null ? "" : strFt_Cols_Upd);
                ////
                string strProvinceCode = TUtils.CUtils.StdParam(objProvinceCode);
                string strProvinceName = string.Format("{0}", objProvinceName).Trim();
                string strFlagActive = TUtils.CUtils.StdFlag(objFlagActive);
                ////
                bool bUpd_ProvinceName = strFt_Cols_Upd.Contains("Mst_Province.ProvinceName".ToUpper());
                bool bUpd_FlagActive = strFt_Cols_Upd.Contains("Mst_Province.FlagActive".ToUpper());

                ////
                DataTable dtDB_Mst_Province = null;
                {
                    ////
                    Mst_Province_CheckDB(
                         ref alParamsCoupleError // alParamsCoupleError
                         , strProvinceCode // objProvinceCode 
                         , TConst.Flag.Yes // strFlagExistToCheck
                         , "" // strFlagActiveListToCheck
                         , out dtDB_Mst_Province // dtDB_Mst_Province
                        );
                    ////
                    if (bUpd_ProvinceName && string.IsNullOrEmpty(strProvinceName))
                    {
                        alParamsCoupleError.AddRange(new object[]{
                            "Check.strProvinceName", strProvinceName
                            });
                        throw CmUtils.CMyException.Raise(
                            TError.ErridnInventory.Mst_Province_Update_InvalidProvinceName
                            , null
                            , alParamsCoupleError.ToArray()
                            );
                    }
                    ////
                }
                #endregion

                #region // SaveDB Mst_Province:
                {
                    // Init:
                    ArrayList alColumnEffective = new ArrayList();
                    string strFN = "";
                    DataRow drDB = dtDB_Mst_Province.Rows[0];
                    if (bUpd_ProvinceName) { strFN = "ProvinceName"; drDB[strFN] = strProvinceName; alColumnEffective.Add(strFN); }
                    if (bUpd_FlagActive) { strFN = "FlagActive"; drDB[strFN] = strFlagActive; alColumnEffective.Add(strFN); }
                    strFN = "LogLUDTimeUTC"; drDB[strFN] = dtimeSys.ToString("yyyy-MM-dd HH:mm:ss"); alColumnEffective.Add(strFN);
                    strFN = "LogLUBy"; drDB[strFN] = strWAUserCode; alColumnEffective.Add(strFN);

                    // Save:
                    _cf.db.SaveData(
                        "Mst_Province"
                        , dtDB_Mst_Province
                        , alColumnEffective.ToArray()
                        );
                }
                #endregion

                // Return Good:
                TDALUtils.DBUtils.CommitSafety(_cf.db);
                mdsFinal.AcceptChanges();
                return mdsFinal;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Rollback:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);

                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsFinal
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Rollback and Release resources:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);
                TDALUtils.DBUtils.ReleaseAllSemaphore(_cf.db_Sys, true);

                // Write ReturnLog:
                _cf.ProcessBizReturn_OutSide(
                    ref mdsFinal // mdsFinal
                    , strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    );
                #endregion
            }
        }
        public DataSet Mst_Province_Delete(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            /////
            , object objProvinceCode
            )
        {
            #region // Temp:
            DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            //int nTidSeq = 0;
            DateTime dtimeSys = DateTime.UtcNow;
            string strFunctionName = "Mst_Province_Delete";
            string strErrorCodeDefault = TError.ErridnInventory.Mst_Province_Delete;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
				, "objProvinceCode", objProvinceCode
                });
            #endregion

            try
            {
                #region // Init:
                //_cf.db.LogUserId = _cf.sinf.strUserCode;
                _cf.db.BeginTransaction();

                // Write RequestLog:
                _cf.ProcessBizReq_OutSide(
                    strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    , alParamsCoupleError // alParamsCoupleError
                    );
                #endregion

                #region // Refine and Check Input:
                ////
                string strProvinceCode = TUtils.CUtils.StdParam(objProvinceCode);
                ////
                DataTable dtDB_Mst_Province = null;
                {
                    ////
                    Mst_Province_CheckDB(
                         ref alParamsCoupleError // alParamsCoupleError
                         , objProvinceCode // objProvinceCode
                         , TConst.Flag.Yes // strFlagExistToCheck
                         , "" // strFlagActiveListToCheck
                         , out dtDB_Mst_Province // dtDB_Mst_Province
                        );
                    ////
                }
                #endregion

                #region // SaveDB Mst_Province:
                {
                    // Init:
                    dtDB_Mst_Province.Rows[0].Delete();

                    // Save:
                    _cf.db.SaveData(
                        "Mst_Province"
                        , dtDB_Mst_Province
                        );
                }
                #endregion

                // Return Good:
                TDALUtils.DBUtils.CommitSafety(_cf.db);
                mdsFinal.AcceptChanges();
                return mdsFinal;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Rollback:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);

                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsFinal
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Rollback and Release resources:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);
                TDALUtils.DBUtils.ReleaseAllSemaphore(_cf.db_Sys, true);

                // Write ReturnLog:
                _cf.ProcessBizReturn_OutSide(
                    ref mdsFinal // mdsFinal
                    , strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    );
                #endregion
            }
        }

        public DataSet WAS_RptSv_Mst_Province_Get(
            ref ArrayList alParamsCoupleError
            , RQ_Mst_Province objRQ_Mst_Province
            ////
            , out RT_Mst_Province objRT_Mst_Province
            )
        {
            #region // Temp:
            string strTid = objRQ_Mst_Province.Tid;
            objRT_Mst_Province = new RT_Mst_Province();
            DataSet mdsResult = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            DateTime dtimeSys = DateTime.UtcNow;
            //DataSet mdsExec = null;
            //DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(objRQ_Mst_Province.Tid);
            //int nTidSeq = 0;
            //bool bNeedTransaction = true;
            string strFunctionName = "WAS_RptSv_Mst_Province_Get";
            string strErrorCodeDefault = TError.ErridnInventory.WAS_RptSv_Mst_Province_Get;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
				});
            #endregion

            try
            {
                #region // Init:
                #endregion

                #region // Refine and Check Input:
                List<MySummaryTable> lst_MySummaryTable = new List<MySummaryTable>();

                List<Mst_Province> lst_Mst_Province = new List<Mst_Province>();
                bool bGet_Mst_Province = (objRQ_Mst_Province.Rt_Cols_Mst_Province != null && objRQ_Mst_Province.Rt_Cols_Mst_Province.Length > 0);
                #endregion

                #region // WS_Mst_Province_Get:
                mdsResult = RptSv_Mst_Province_Get(
                    objRQ_Mst_Province.Tid // strTid
                    , objRQ_Mst_Province.GwUserCode // strGwUserCode
                    , objRQ_Mst_Province.GwPassword // strGwPassword
                    , objRQ_Mst_Province.WAUserCode // strUserCode
                    , objRQ_Mst_Province.WAUserPassword // strUserPassword
                    , ref alParamsCoupleError // alParamsCoupleError
                                              //// Filter:
                    , objRQ_Mst_Province.Ft_RecordStart // strFt_RecordStart
                    , objRQ_Mst_Province.Ft_RecordCount // strFt_RecordCount
                    , objRQ_Mst_Province.Ft_WhereClause // strFt_WhereClause
                                                        //// Return:
                    , objRQ_Mst_Province.Rt_Cols_Mst_Province // strRt_Cols_Mst_Province
                    );
                #endregion

                #region // GetData:
                if (!CmUtils.CMyDataSet.HasError(mdsResult))
                {
                    ////
                    if (bGet_Mst_Province)
                    {
                        ////
                        DataTable dt_MySummaryTable = mdsResult.Tables["MySummaryTable"].Copy();
                        lst_MySummaryTable = TUtils.DataTableCmUtils.ToListof<MySummaryTable>(dt_MySummaryTable);
                        objRT_Mst_Province.MySummaryTable = lst_MySummaryTable[0];

                        ////
                        DataTable dt_Mst_Province = mdsResult.Tables["Mst_Province"].Copy();
                        lst_Mst_Province = TUtils.DataTableCmUtils.ToListof<Mst_Province>(dt_Mst_Province);
                        objRT_Mst_Province.Lst_Mst_Province = lst_Mst_Province;
                    }
                }
                #endregion

                // Return Good:
                return mdsResult;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsResult
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Write ReturnLog:
                //_cf.ProcessBizReturn(
                //	ref mdsResult // mdsFinal
                //	, strTid // strTid
                //	, strFunctionName // strFunctionName
                //	);
                #endregion
            }
        }
        public DataSet WAS_Mst_Province_Get(
            ref ArrayList alParamsCoupleError
            , RQ_Mst_Province objRQ_Mst_Province
            ////
            , out RT_Mst_Province objRT_Mst_Province
            )
        {
            #region // Temp:
            string strTid = objRQ_Mst_Province.Tid;
            objRT_Mst_Province = new RT_Mst_Province();
            DataSet mdsResult = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            DateTime dtimeSys = DateTime.UtcNow;
            //DataSet mdsExec = null;
            //DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(objRQ_Mst_Province.Tid);
            //int nTidSeq = 0;
            //bool bNeedTransaction = true;
            string strFunctionName = "WAS_Mst_Province_Get";
            string strErrorCodeDefault = TError.ErridnInventory.WAS_Mst_Province_Get;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
				});
            #endregion

            try
            {
                #region // Init:
                #endregion

                #region // Refine and Check Input:
                List<MySummaryTable> lst_MySummaryTable = new List<MySummaryTable>();

                List<Mst_Province> lst_Mst_Province = new List<Mst_Province>();
                bool bGet_Mst_Province = (objRQ_Mst_Province.Rt_Cols_Mst_Province != null && objRQ_Mst_Province.Rt_Cols_Mst_Province.Length > 0);
                #endregion

                #region // WS_Mst_Province_Get:
                mdsResult = Mst_Province_Get(
                    objRQ_Mst_Province.Tid // strTid
                    , objRQ_Mst_Province.GwUserCode // strGwUserCode
                    , objRQ_Mst_Province.GwPassword // strGwPassword
                    , objRQ_Mst_Province.WAUserCode // strUserCode
                    , objRQ_Mst_Province.WAUserPassword // strUserPassword
                    , ref alParamsCoupleError // alParamsCoupleError
                                              //// Filter:
                    , objRQ_Mst_Province.Ft_RecordStart // strFt_RecordStart
                    , objRQ_Mst_Province.Ft_RecordCount // strFt_RecordCount
                    , objRQ_Mst_Province.Ft_WhereClause // strFt_WhereClause
                                                        //// Return:
                    , objRQ_Mst_Province.Rt_Cols_Mst_Province // strRt_Cols_Mst_Province
                    );
                #endregion

                #region // GetData:
                if (!CmUtils.CMyDataSet.HasError(mdsResult))
                {
                    ////
                    if (bGet_Mst_Province)
                    {
                        ////
                        DataTable dt_MySummaryTable = mdsResult.Tables["MySummaryTable"].Copy();
                        lst_MySummaryTable = TUtils.DataTableCmUtils.ToListof<MySummaryTable>(dt_MySummaryTable);
                        objRT_Mst_Province.MySummaryTable = lst_MySummaryTable[0];

                        ////
                        DataTable dt_Mst_Province = mdsResult.Tables["Mst_Province"].Copy();
                        lst_Mst_Province = TUtils.DataTableCmUtils.ToListof<Mst_Province>(dt_Mst_Province);
                        objRT_Mst_Province.Lst_Mst_Province = lst_Mst_Province;
                    }
                }
                #endregion

                // Return Good:
                return mdsResult;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsResult
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Write ReturnLog:
                //_cf.ProcessBizReturn(
                //	ref mdsResult // mdsFinal
                //	, strTid // strTid
                //	, strFunctionName // strFunctionName
                //	);
                #endregion
            }
        }

        public DataSet WAS_Mst_Province_Create(
            ref ArrayList alParamsCoupleError
            , RQ_Mst_Province objRQ_Mst_Province
            ////
            , out RT_Mst_Province objRT_Mst_Province
            )
        {
            #region // Temp:
            string strTid = objRQ_Mst_Province.Tid;
            objRT_Mst_Province = new RT_Mst_Province();
            DataSet mdsResult = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            DateTime dtimeSys = DateTime.UtcNow;
            //DataSet mdsExec = null;
            //DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(objRQ_Mst_Province.Tid);
            //int nTidSeq = 0;
            //bool bNeedTransaction = true;
            string strFunctionName = "WAS_Mst_Province_Create";
            string strErrorCodeDefault = TError.ErridnInventory.WAS_Mst_Province_Create;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
                , "Mst_Province", TJson.JsonConvert.SerializeObject(objRQ_Mst_Province.Mst_Province)
				////
				});
            #endregion

            try
            {
                #region // Init:
                // Sys_User_CheckAuthentication:
                //Sys_User_CheckAuthentication(
                //    ref alParamsCoupleError
                //    , objRQ_Mst_Province.WAUserCode
                //    , objRQ_Mst_Province.WAUserPassword
                //    );
                #endregion

                #region // Refine and Check Input:
                //List<Mst_Province> lst_Mst_Province = new List<Mst_Province>();
                //List<Mst_ProvinceInGroup> lst_Mst_ProvinceInGroup = new List<Mst_ProvinceInGroup>();
                #endregion

                #region // Mst_Province_Create:
                mdsResult = Mst_Province_Create(
                    objRQ_Mst_Province.Tid // strTid
                    , objRQ_Mst_Province.GwUserCode // strGwUserCode
                    , objRQ_Mst_Province.GwPassword // strGwPassword
                    , objRQ_Mst_Province.WAUserCode // strUserCode
                    , objRQ_Mst_Province.WAUserPassword // strUserPassword
                    , ref alParamsCoupleError // alParamsCoupleError
                                              ////
                    , objRQ_Mst_Province.Mst_Province.ProvinceCode // objProvinceCode
                    , objRQ_Mst_Province.Mst_Province.ProvinceName // objProvinceName
                    );
                #endregion

                // Return Good:
                return mdsResult;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsResult
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Write ReturnLog:
                //_cf.ProcessBizReturn(
                //	ref mdsResult // mdsFinal
                //	, strTid // strTid
                //	, strFunctionName // strFunctionName
                //	);
                #endregion
            }
        }

        public DataSet WAS_Mst_Province_Update(
            ref ArrayList alParamsCoupleError
            , RQ_Mst_Province objRQ_Mst_Province
            ////
            , out RT_Mst_Province objRT_Mst_Province
            )
        {
            #region // Temp:
            string strTid = objRQ_Mst_Province.Tid;
            objRT_Mst_Province = new RT_Mst_Province();
            DataSet mdsResult = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            DateTime dtimeSys = DateTime.UtcNow;
            //DataSet mdsExec = null;
            //DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(objRQ_Mst_Province.Tid);
            //int nTidSeq = 0;
            //bool bNeedTransaction = true;
            string strFunctionName = "WAS_Mst_Province_Update";
            string strErrorCodeDefault = TError.ErridnInventory.WAS_Mst_Province_Update;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
                , "Mst_Province", TJson.JsonConvert.SerializeObject(objRQ_Mst_Province.Mst_Province)
				////
				});
            #endregion

            try
            {
                #region // Init:
                // Sys_User_CheckAuthentication:
                //Sys_User_CheckAuthentication(
                //    ref alParamsCoupleError
                //    , objRQ_Mst_Province.WAUserCode
                //    , objRQ_Mst_Province.WAUserPassword
                //    );
                
                #endregion

                #region // Refine and Check Input:
                //List<Mst_Province> lst_Mst_Province = new List<Mst_Province>();
                //List<Mst_ProvinceInGroup> lst_Mst_ProvinceInGroup = new List<Mst_ProvinceInGroup>();
                #endregion

                #region // Mst_Province_Update:
                mdsResult = Mst_Province_Update(
                    objRQ_Mst_Province.Tid // strTid
                    , objRQ_Mst_Province.GwUserCode // strGwUserCode
                    , objRQ_Mst_Province.GwPassword // strGwPassword
                    , objRQ_Mst_Province.WAUserCode // strUserCode
                    , objRQ_Mst_Province.WAUserPassword // strUserPassword
                    , ref alParamsCoupleError // alParamsCoupleError
                                              ////
                    , objRQ_Mst_Province.Mst_Province.ProvinceCode // objProvinceCode
                    , objRQ_Mst_Province.Mst_Province.ProvinceName // objProvinceName
                    , objRQ_Mst_Province.Mst_Province.FlagActive // objFlagActive
                                                                 ////
                    , objRQ_Mst_Province.Ft_Cols_Upd// objFt_Cols_Upd
                    );
                #endregion

                // Return Good:
                return mdsResult;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsResult
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Write ReturnLog:
                //_cf.ProcessBizReturn(
                //	ref mdsResult // mdsFinal
                //	, strTid // strTid
                //	, strFunctionName // strFunctionName
                //	);
                #endregion
            }
        }

        public DataSet WAS_Mst_Province_Delete(
            ref ArrayList alParamsCoupleError
            , RQ_Mst_Province objRQ_Mst_Province
            ////
            , out RT_Mst_Province objRT_Mst_Province
            )
        {
            #region // Temp:
            string strTid = objRQ_Mst_Province.Tid;
            objRT_Mst_Province = new RT_Mst_Province();
            DataSet mdsResult = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            DateTime dtimeSys = DateTime.UtcNow;
            //DataSet mdsExec = null;
            //DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(objRQ_Mst_Province.Tid);
            //int nTidSeq = 0;
            //bool bNeedTransaction = true;
            string strFunctionName = "WAS_Mst_Province_Delete";
            string strErrorCodeDefault = TError.ErridnInventory.WAS_Mst_Province_Delete;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				//, "Mst_Province", TJson.JsonConvert.SerializeObject(objRQ_Mst_Province.Mst_Province)
				////
				});
            #endregion

            try
            {
                #region // Init:
                // Sys_User_CheckAuthentication:
                //Sys_User_CheckAuthentication(
                //    ref alParamsCoupleError
                //    , objRQ_Mst_Province.WAUserCode
                //    , objRQ_Mst_Province.WAUserPassword
                //    );
                #endregion

                #region // Refine and Check Input:
                //List<Mst_Province> lst_Mst_Province = new List<Mst_Province>();
                //List<Mst_ProvinceInGroup> lst_Mst_ProvinceInGroup = new List<Mst_ProvinceInGroup>();
                #endregion

                #region // Mst_Province_Delete:
                mdsResult = Mst_Province_Delete(
                    objRQ_Mst_Province.Tid // strTid
                    , objRQ_Mst_Province.GwUserCode // strGwUserCode
                    , objRQ_Mst_Province.GwPassword // strGwPassword
                    , objRQ_Mst_Province.WAUserCode // strUserCode
                    , objRQ_Mst_Province.WAUserPassword // strUserPassword
                    , ref alParamsCoupleError // alParamsCoupleError
                                              ////
                    , objRQ_Mst_Province.Mst_Province.ProvinceCode // objProvinceCode
                    );
                #endregion

                // Return Good:
                return mdsResult;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsResult
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Write ReturnLog:
                //_cf.ProcessBizReturn(
                //	ref mdsResult // mdsFinal
                //	, strTid // strTid
                //	, strFunctionName // strFunctionName
                //	);
                #endregion
            }
        }

        public DataSet WAS_RptSv_Mst_Province_Create(
            ref ArrayList alParamsCoupleError
            , RQ_Mst_Province objRQ_Mst_Province
            ////
            , out RT_Mst_Province objRT_Mst_Province
            )
        {
            #region // Temp:
            string strTid = objRQ_Mst_Province.Tid;
            objRT_Mst_Province = new RT_Mst_Province();
            DataSet mdsResult = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            DateTime dtimeSys = DateTime.UtcNow;
            //DataSet mdsExec = null;
            //DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(objRQ_Mst_Province.Tid);
            //int nTidSeq = 0;
            //bool bNeedTransaction = true;
            string strFunctionName = "WAS_RptSv_Mst_Province_Create";
            string strErrorCodeDefault = TError.ErridnInventory.WAS_RptSv_Mst_Province_Create;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
                , "Mst_Province", TJson.JsonConvert.SerializeObject(objRQ_Mst_Province.Mst_Province)
				////
				});
            #endregion

            try
            {
                #region // Init:
                // Sys_User_CheckAuthentication:
                //RptSv_Sys_User_CheckAuthentication(
                //    ref alParamsCoupleError
                //    , objRQ_Mst_Province.WAUserCode
                //    , objRQ_Mst_Province.WAUserPassword
                //    );
                
                #endregion

                #region // Refine and Check Input:
                //List<Mst_Province> lst_Mst_Province = new List<Mst_Province>();
                //List<Mst_ProvinceInGroup> lst_Mst_ProvinceInGroup = new List<Mst_ProvinceInGroup>();
                #endregion

                #region // Mst_Province_Create:
                mdsResult = Mst_Province_Create(
                    objRQ_Mst_Province.Tid // strTid
                    , objRQ_Mst_Province.GwUserCode // strGwUserCode
                    , objRQ_Mst_Province.GwPassword // strGwPassword
                    , objRQ_Mst_Province.WAUserCode // strUserCode
                    , objRQ_Mst_Province.WAUserPassword // strUserPassword
                    , ref alParamsCoupleError // alParamsCoupleError
                                              ////
                    , objRQ_Mst_Province.Mst_Province.ProvinceCode // objProvinceCode
                    , objRQ_Mst_Province.Mst_Province.ProvinceName // objProvinceName
                    );
                #endregion

                // Return Good:
                return mdsResult;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsResult
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Write ReturnLog:
                //_cf.ProcessBizReturn(
                //	ref mdsResult // mdsFinal
                //	, strTid // strTid
                //	, strFunctionName // strFunctionName
                //	);
                #endregion
            }
        }

        public DataSet WAS_RptSv_Mst_Province_Update(
            ref ArrayList alParamsCoupleError
            , RQ_Mst_Province objRQ_Mst_Province
            ////
            , out RT_Mst_Province objRT_Mst_Province
            )
        {
            #region // Temp:
            string strTid = objRQ_Mst_Province.Tid;
            objRT_Mst_Province = new RT_Mst_Province();
            DataSet mdsResult = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            DateTime dtimeSys = DateTime.UtcNow;
            //DataSet mdsExec = null;
            //DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(objRQ_Mst_Province.Tid);
            //int nTidSeq = 0;
            //bool bNeedTransaction = true;
            string strFunctionName = "WAS_RptSv_Mst_Province_Update";
            string strErrorCodeDefault = TError.ErridnInventory.WAS_RptSv_Mst_Province_Update;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
                , "Mst_Province", TJson.JsonConvert.SerializeObject(objRQ_Mst_Province.Mst_Province)
				////
				});
            #endregion

            try
            {
                #region // Init:
                // Sys_User_CheckAuthentication:
                //RptSv_Sys_User_CheckAuthentication(
                //    ref alParamsCoupleError
                //    , objRQ_Mst_Province.WAUserCode
                //    , objRQ_Mst_Province.WAUserPassword
                //    );

                #endregion

                #region // Refine and Check Input:
                //List<Mst_Province> lst_Mst_Province = new List<Mst_Province>();
                //List<Mst_ProvinceInGroup> lst_Mst_ProvinceInGroup = new List<Mst_ProvinceInGroup>();
                #endregion

                #region // Mst_Province_Update:
                mdsResult = Mst_Province_Update(
                    objRQ_Mst_Province.Tid // strTid
                    , objRQ_Mst_Province.GwUserCode // strGwUserCode
                    , objRQ_Mst_Province.GwPassword // strGwPassword
                    , objRQ_Mst_Province.WAUserCode // strUserCode
                    , objRQ_Mst_Province.WAUserPassword // strUserPassword
                    , ref alParamsCoupleError // alParamsCoupleError
                                              ////
                    , objRQ_Mst_Province.Mst_Province.ProvinceCode // objProvinceCode
                    , objRQ_Mst_Province.Mst_Province.ProvinceName // objProvinceName
                    , objRQ_Mst_Province.Mst_Province.FlagActive // objFlagActive
                                                                 ////
                    , objRQ_Mst_Province.Ft_Cols_Upd// objFt_Cols_Upd
                    );
                #endregion

                // Return Good:
                return mdsResult;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsResult
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Write ReturnLog:
                //_cf.ProcessBizReturn(
                //	ref mdsResult // mdsFinal
                //	, strTid // strTid
                //	, strFunctionName // strFunctionName
                //	);
                #endregion
            }
        }

        public DataSet WAS_RptSv_Mst_Province_Delete(
            ref ArrayList alParamsCoupleError
            , RQ_Mst_Province objRQ_Mst_Province
            ////
            , out RT_Mst_Province objRT_Mst_Province
            )
        {
            #region // Temp:
            string strTid = objRQ_Mst_Province.Tid;
            objRT_Mst_Province = new RT_Mst_Province();
            DataSet mdsResult = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            DateTime dtimeSys = DateTime.UtcNow;
            //DataSet mdsExec = null;
            //DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(objRQ_Mst_Province.Tid);
            //int nTidSeq = 0;
            //bool bNeedTransaction = true;
            string strFunctionName = "WAS_RptSv_Mst_Province_Delete";
            string strErrorCodeDefault = TError.ErridnInventory.WAS_RptSv_Mst_Province_Delete;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				//, "Mst_Province", TJson.JsonConvert.SerializeObject(objRQ_Mst_Province.Mst_Province)
				////
				});
            #endregion

            try
            {
                #region // Init:
                // Sys_User_CheckAuthentication:
                //RptSv_Sys_User_CheckAuthentication(
                //    ref alParamsCoupleError
                //    , objRQ_Mst_Province.WAUserCode
                //    , objRQ_Mst_Province.WAUserPassword
                //    );

                #endregion

                #region // Refine and Check Input:
                //List<Mst_Province> lst_Mst_Province = new List<Mst_Province>();
                //List<Mst_ProvinceInGroup> lst_Mst_ProvinceInGroup = new List<Mst_ProvinceInGroup>();
                #endregion

                #region // Mst_Province_Delete:
                mdsResult = Mst_Province_Delete(
                    objRQ_Mst_Province.Tid // strTid
                    , objRQ_Mst_Province.GwUserCode // strGwUserCode
                    , objRQ_Mst_Province.GwPassword // strGwPassword
                    , objRQ_Mst_Province.WAUserCode // strUserCode
                    , objRQ_Mst_Province.WAUserPassword // strUserPassword
                    , ref alParamsCoupleError // alParamsCoupleError
                                              ////
                    , objRQ_Mst_Province.Mst_Province.ProvinceCode // objProvinceCode
                    );
                #endregion

                // Return Good:
                return mdsResult;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsResult
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Write ReturnLog:
                //_cf.ProcessBizReturn(
                //	ref mdsResult // mdsFinal
                //	, strTid // strTid
                //	, strFunctionName // strFunctionName
                //	);
                #endregion
            }
        }
        #endregion

        #region // Mst_District:
        private void Mst_District_CheckDB(
            ref ArrayList alParamsCoupleError
            , object objProvinceCode
            , object objDistrictCode
            , string strFlagExistToCheck
            , string strFlagActiveListToCheck
            , out DataTable dtDB_Mst_District
            )
        {
            // GetInfo:
            string strSqlExec = CmUtils.StringUtils.Replace(@"
					select top 1
						t.*
					from Mst_District t --//[mylock]
					where (1=1)
						and t.ProvinceCode = @objProvinceCode
						and t.DistrictCode = @objDistrictCode
					;
				");
            dtDB_Mst_District = _cf.db.ExecQuery(
                strSqlExec
                , "@objProvinceCode", objProvinceCode
                , "@objDistrictCode", objDistrictCode
                ).Tables[0];
            dtDB_Mst_District.TableName = "Mst_District";

            // strFlagExistToCheck:
            if (strFlagExistToCheck.Length > 0)
            {
                if (CmUtils.StringUtils.StringEqual(strFlagExistToCheck, TConst.Flag.Active) && dtDB_Mst_District.Rows.Count < 1)
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.ProvinceCode", objProvinceCode
                        , "Check.DistrictCode", objDistrictCode
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Mst_District_CheckDB_DistrictNotFound
                        , null
                        , alParamsCoupleError.ToArray()
                        );
                }
                if (CmUtils.StringUtils.StringEqual(strFlagExistToCheck, TConst.Flag.Inactive) && dtDB_Mst_District.Rows.Count > 0)
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.ProvinceCode", objProvinceCode
                        , "Check.DistrictCode", objDistrictCode
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Mst_District_CheckDB_DistrictExist
                        , null
                        , alParamsCoupleError.ToArray()
                        );
                }
            }

            // strFlagActiveListToCheck:
            if (strFlagActiveListToCheck.Length > 0 && !strFlagActiveListToCheck.Contains(Convert.ToString(dtDB_Mst_District.Rows[0]["FlagActive"])))
            {
                alParamsCoupleError.AddRange(new object[]{
                    "Check.ProvinceCode", objProvinceCode
                    , "Check.DistrictCode", objDistrictCode
                    , "Check.strFlagActiveListToCheck", strFlagActiveListToCheck
                    , "DB.FlagActive", dtDB_Mst_District.Rows[0]["FlagActive"]
                    });
                throw CmUtils.CMyException.Raise(
                    TError.ErridnInventory.Mst_District_CheckDB_FlagActiveNotMatched
                    , null
                    , alParamsCoupleError.ToArray()
                    );
            }
        }

        public DataSet Mst_District_Get(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            //// Filter:
            , string strFt_RecordStart
            , string strFt_RecordCount
            , string strFt_WhereClause
            //// Return:
            , string strRt_Cols_Mst_District
            )
        {
            #region // Temp:
            DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            //int nTidSeq = 0;
            DateTime dtimeSys = DateTime.UtcNow;
            bool bNeedTransaction = true;
            string strFunctionName = "Mst_District_Get";
            string strErrorCodeDefault = TError.ErridnInventory.Mst_District_Get;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				//// Filter
				, "strFt_RecordStart", strFt_RecordStart
                , "strFt_RecordCount", strFt_RecordCount
                , "strFt_WhereClause", strFt_WhereClause
				//// Return
				, "strRt_Cols_Mst_District", strRt_Cols_Mst_District
                });
            #endregion

            try
            {
                #region // Init:
                //_cf.db.LogUserId = _cf.sinf.strUserCode;
                if (bNeedTransaction) _cf.db.BeginTransaction();

                // Write RequestLog:
                _cf.ProcessBizReq_OutSide(
                    strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    , alParamsCoupleError // alParamsCoupleError
                    );

                //// Check Access/Deny:
                //Sys_Access_CheckDenyV30(
                //    ref alParamsCoupleError
                //    , strWAUserCode
                //    , strFunctionName
                //    );
                #endregion

                #region // Check:
                //// Refine:
                long nFilterRecordStart = Convert.ToInt64(strFt_RecordStart);
                long nFilterRecordEnd = nFilterRecordStart + Convert.ToInt64(strFt_RecordCount) - 1;
                bool bGet_Mst_District = (strRt_Cols_Mst_District != null && strRt_Cols_Mst_District.Length > 0);

                //// drAbilityOfUser:
                //DataRow drAbilityOfUser = myCache_ViewAbility_GetUserInfo(strWAUserCode);

                #endregion

                #region // Build Sql:
                ////
                ArrayList alParamsCoupleSql = new ArrayList();
                alParamsCoupleSql.AddRange(new object[] {
                    "@nFilterRecordStart", nFilterRecordStart
                    , "@nFilterRecordEnd", nFilterRecordEnd
                    });
                ////
                //myCache_ViewAbility_GetDealerInfo(drAbilityOfUser);
                ////
                string strSqlGetData = CmUtils.StringUtils.Replace(@"
						---- #tbl_Mst_District_Filter_Draft:
						select distinct
							identity(bigint, 0, 1) MyIdxSeq
							, md.DistrictCode
						into #tbl_Mst_District_Filter_Draft
						from Mst_District md --//[mylock]
						where (1=1)
							zzB_Where_strFilter_zzE
						order by md.DistrictCode asc
						;

						---- Summary:
						select Count(0) MyCount from #tbl_Mst_District_Filter_Draft t --//[mylock]
						;

						---- #tbl_Mst_District_Filter:
						select
							t.*
						into #tbl_Mst_District_Filter
						from #tbl_Mst_District_Filter_Draft t --//[mylock]
						where
							(t.MyIdxSeq >= @nFilterRecordStart)
							and (t.MyIdxSeq <= @nFilterRecordEnd)
						;

						-------- Mst_District --------:
						zzB_Select_Mst_District_zzE
						----------------------------------------

						---- Clear for debug:
						--drop table #tbl_Mst_District_Filter_Draft;
						--drop table #tbl_Mst_District_Filter;
					"
                    );
                ////
                string zzB_Select_Mst_District_zzE = "-- Nothing.";
                if (bGet_Mst_District)
                {
                    #region // bGet_Mst_District:
                    zzB_Select_Mst_District_zzE = CmUtils.StringUtils.Replace(@"
							---- Mst_District:
							select
								t.MyIdxSeq
								, md.*
							from #tbl_Mst_District_Filter t --//[mylock]
								inner join Mst_District md --//[mylock]
									on t.DistrictCode = md.DistrictCode
							order by t.MyIdxSeq asc
							;
						"
                        );
                    #endregion
                }
                ////
                string zzB_Where_strFilter_zzE = "";
                {
                    Hashtable htSpCols = new Hashtable();
                    {
                        #region // htSpCols:
                        ////
                        TUtils.CUtils.MyBuildHTSupportedColumns(
                            _cf.db // db
                            , ref htSpCols // htSupportedColumns
                            , "Mst_District" // strTableNameDB
                            , "Mst_District." // strPrefixStd
                            , "md." // strPrefixAlias
                            );
                        ////
                        #endregion
                    }
                    zzB_Where_strFilter_zzE = CmUtils.SqlUtils.BuildWhere(
                        htSpCols // htSpCols
                        , strFt_WhereClause // strClause
                        , "@p_" // strParamPrefix
                        , ref alParamsCoupleSql // alParamsCoupleSql
                        );
                    zzB_Where_strFilter_zzE = (zzB_Where_strFilter_zzE.Length <= 0 ? "" : string.Format(" and ({0})", zzB_Where_strFilter_zzE));
                    alParamsCoupleError.AddRange(new object[]{
                        "zzB_Where_strFilter_zzE", zzB_Where_strFilter_zzE
                        });
                }
                ////
                strSqlGetData = CmUtils.StringUtils.Replace(
                    strSqlGetData
                    , "zzB_Where_strFilter_zzE", zzB_Where_strFilter_zzE
                    , "zzB_Select_Mst_District_zzE", zzB_Select_Mst_District_zzE
                    );
                #endregion

                #region // Get Data:
                DataSet dsGetData = _cf.db.ExecQuery(
                    strSqlGetData
                    , alParamsCoupleSql.ToArray()
                    );
                int nIdxTable = 0;
                dsGetData.Tables[nIdxTable++].TableName = "MySummaryTable";
                if (bGet_Mst_District)
                {
                    dsGetData.Tables[nIdxTable++].TableName = "Mst_District";
                }
                CmUtils.DataUtils.MoveDataTable(ref mdsFinal, ref dsGetData);
                #endregion

                // Return Good:
                TDALUtils.DBUtils.RollbackSafety(_cf.db); // Always Rollback.
                mdsFinal.AcceptChanges();
                return mdsFinal;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Rollback:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);

                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsFinal
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Rollback and Release resources:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);
                TDALUtils.DBUtils.ReleaseAllSemaphore(_cf.db_Sys, true);

                // Write ReturnLog:
                _cf.ProcessBizReturn_OutSide(
                    ref mdsFinal // mdsFinal
                    , strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    );
                #endregion
            }
        }
        public DataSet Mst_District_Create(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            ////
            , object objDistrictCode
            , object objProvinceCode
            , object objDistrictName
            )
        {
            #region // Temp:
            DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            //int nTidSeq = 0;
            DateTime dtimeSys = DateTime.UtcNow;
            string strFunctionName = "Mst_District_Create";
            string strErrorCodeDefault = TError.ErridnInventory.Mst_District_Create;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
                ////
				, "objDistrictCode", objDistrictCode
                , "objProvinceCode", objProvinceCode
                , "objDistrictName", objDistrictName
                });
            #endregion

            try
            {
                #region // Convert Input:
                #endregion

                #region // Init:
                //_cf.db.LogUserId = _cf.sinf.strUserCode;
                _cf.db.BeginTransaction();

                // Write RequestLog:
                _cf.ProcessBizReq_OutSide(
                    strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    , alParamsCoupleError // alParamsCoupleError
                    );
                #endregion

                #region // Refine and Check Input:
                ////
                ////
                string strDistrictCode = TUtils.CUtils.StdParam(objDistrictCode);
                string strProvinceCode = TUtils.CUtils.StdParam(objProvinceCode);
                string strDistrictName = string.Format("{0}", objDistrictName).Trim();

                // drAbilityOfUser:
                //DataRow drAbilityOfUser = Sys_User_GetAbilityViewOfUser(strWAUserCode);
                ////
                DataTable dtDB_Mst_District = null;
                {
                    ////
                    if (strDistrictCode == null || strDistrictCode.Length < 1)
                    {
                        alParamsCoupleError.AddRange(new object[]{
                            "Check.strDistrictCode", strDistrictCode
                            });
                        throw CmUtils.CMyException.Raise(
                            TError.ErridnInventory.Mst_District_Create_InvalidDistrictCode
                            , null
                            , alParamsCoupleError.ToArray()
                            );
                    }
                    Mst_District_CheckDB(
                        ref alParamsCoupleError // alParamsCoupleError
                        , strProvinceCode // objProvinceCode
                        , strDistrictCode // objDistrictCode
                        , TConst.Flag.No // strFlagExistToCheck
                        , "" // strFlagActiveListToCheck
                        , out dtDB_Mst_District // dtDB_Mst_District
                        );
                    ////
                    DataTable dtDB_Mst_Province = null;

                    Mst_Province_CheckDB(
                        ref alParamsCoupleError // alParamsCoupleError
                        , strProvinceCode // objProvinceCode
                        , TConst.Flag.Yes // strFlagExistToCheck
                        , TConst.Flag.Active // strFlagActiveListToCheck
                        , out dtDB_Mst_Province // dtDB_Mst_Province
                        );
                    ////
                    if (strDistrictName.Length < 1)
                    {
                        alParamsCoupleError.AddRange(new object[]{
                            "Check.strDistrictName", strDistrictName
                            });
                        throw CmUtils.CMyException.Raise(
                            TError.ErridnInventory.Mst_District_Create_InvalidDistrictName
                            , null
                            , alParamsCoupleError.ToArray()
                            );
                    }
                    ////
                }
                #endregion

                #region // SaveDB Mst_District:
                {
                    // Init:
                    //ArrayList alColumnEffective = new ArrayList();
                    string strFN = "";
                    DataRow drDB = dtDB_Mst_District.NewRow();
                    strFN = "DistrictCode"; drDB[strFN] = strDistrictCode;
                    strFN = "NetworkID"; drDB[strFN] = nNetworkID;
                    strFN = "ProvinceCode"; drDB[strFN] = strProvinceCode;
                    strFN = "DistrictName"; drDB[strFN] = strDistrictName;
                    strFN = "FlagActive"; drDB[strFN] = TConst.Flag.Active;
                    strFN = "LogLUDTimeUTC"; drDB[strFN] = dtimeSys.ToString("yyyy-MM-dd HH:mm:ss");
                    strFN = "LogLUBy"; drDB[strFN] = strWAUserCode;
                    dtDB_Mst_District.Rows.Add(drDB);

                    // Save:
                    _cf.db.SaveData(
                        "Mst_District"
                        , dtDB_Mst_District
                        //, alColumnEffective.ToArray()
                        );
                }
                #endregion

                // Return Good:
                TDALUtils.DBUtils.CommitSafety(_cf.db);
                mdsFinal.AcceptChanges();
                return mdsFinal;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Rollback:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);

                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsFinal
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Rollback and Release resources:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);
                TDALUtils.DBUtils.ReleaseAllSemaphore(_cf.db_Sys, true);

                // Write ReturnLog:
                _cf.ProcessBizReturn_OutSide(
                    ref mdsFinal // mdsFinal
                    , strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    );
                #endregion
            }
        }
        public DataSet Mst_District_Update(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            ////
            , object objDistrictCode
            , object objProvinceCode
            , object objDistrictName
            , object objFlagActive
            ////
            , object objFt_Cols_Upd
            )
        {
            #region // Temp:
            DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            //int nTidSeq = 0;
            DateTime dtimeSys = DateTime.UtcNow;
            string strFunctionName = "Mst_District_Update";
            string strErrorCodeDefault = TError.ErridnInventory.Mst_District_Update;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
				, "objDistrictCode", objDistrictCode
                , "objProvinceCode", objProvinceCode
                , "objDistrictName", objDistrictName
                , "objFlagActive", objFlagActive
				////
				, "objFt_Cols_Upd", objFt_Cols_Upd
                });
            #endregion

            try
            {
                #region // Convert Input:
                #endregion

                #region // Init:
                //_cf.db.LogUserId = _cf.sinf.strUserCode;
                _cf.db.BeginTransaction();

                // Write RequestLog:
                _cf.ProcessBizReq_OutSide(
                    strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    , alParamsCoupleError // alParamsCoupleError
                    );
                
                #endregion

                #region // Refine and Check Input:
                ////
                string strFt_Cols_Upd = TUtils.CUtils.StdParam(objFt_Cols_Upd);
                strFt_Cols_Upd = (strFt_Cols_Upd == null ? "" : strFt_Cols_Upd);
                ////
                string strDistrictCode = TUtils.CUtils.StdParam(objDistrictCode);
                string strProvinceCode = TUtils.CUtils.StdParam(objProvinceCode);
                string strDistrictName = string.Format("{0}", objDistrictName).Trim();
                string strFlagActive = TUtils.CUtils.StdFlag(objFlagActive);
                ////
                bool bUpd_DistrictName = strFt_Cols_Upd.Contains("Mst_District.DistrictName".ToUpper());
                bool bUpd_FlagActive = strFt_Cols_Upd.Contains("Mst_District.FlagActive".ToUpper());

                ////
                DataTable dtDB_Mst_District = null;
                {
                    ////
                    Mst_District_CheckDB(
                         ref alParamsCoupleError // alParamsCoupleError
                         , strProvinceCode // objProvinceCode
                         , strDistrictCode // objDistrictCode 
                         , TConst.Flag.Yes // strFlagExistToCheck
                         , "" // strFlagActiveListToCheck
                         , out dtDB_Mst_District // dtDB_Mst_District
                        );
                    ////
                    DataTable dtDB_Mst_Province = null;

                    Mst_Province_CheckDB(
                        ref alParamsCoupleError // alParamsCoupleError
                        , strProvinceCode // objProvinceCode
                        , TConst.Flag.Yes // strFlagExistToCheck
                        , TConst.Flag.Active // strFlagActiveListToCheck
                        , out dtDB_Mst_Province // dtDB_Mst_Province
                        );
                    ////
                    if (bUpd_DistrictName && string.IsNullOrEmpty(strDistrictName))
                    {
                        alParamsCoupleError.AddRange(new object[]{
                            "Check.strDistrictName", strDistrictName
                            });
                        throw CmUtils.CMyException.Raise(
                            TError.ErridnInventory.Mst_District_Update_InvalidDistrictName
                            , null
                            , alParamsCoupleError.ToArray()
                            );
                    }
                    ////
                }
                #endregion

                #region // SaveDB Mst_District:
                {
                    // Init:
                    ArrayList alColumnEffective = new ArrayList();
                    string strFN = "";
                    DataRow drDB = dtDB_Mst_District.Rows[0];
                    if (bUpd_DistrictName) { strFN = "DistrictName"; drDB[strFN] = strDistrictName; alColumnEffective.Add(strFN); }
                    if (bUpd_FlagActive) { strFN = "FlagActive"; drDB[strFN] = strFlagActive; alColumnEffective.Add(strFN); }
                    strFN = "LogLUDTimeUTC"; drDB[strFN] = dtimeSys.ToString("yyyy-MM-dd HH:mm:ss"); alColumnEffective.Add(strFN);
                    strFN = "LogLUBy"; drDB[strFN] = strWAUserCode; alColumnEffective.Add(strFN);

                    // Save:
                    _cf.db.SaveData(
                        "Mst_District"
                        , dtDB_Mst_District
                        , alColumnEffective.ToArray()
                        );
                }
                #endregion

                // Return Good:
                TDALUtils.DBUtils.CommitSafety(_cf.db);
                mdsFinal.AcceptChanges();
                return mdsFinal;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Rollback:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);

                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsFinal
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Rollback and Release resources:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);
                TDALUtils.DBUtils.ReleaseAllSemaphore(_cf.db_Sys, true);

                // Write ReturnLog:
                _cf.ProcessBizReturn_OutSide(
                    ref mdsFinal // mdsFinal
                    , strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    );
                #endregion
            }
        }
        public DataSet Mst_District_Delete(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            /////
            , object objProvinceCode
            , object objDistrictCode
            )
        {
            #region // Temp:
            DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            //int nTidSeq = 0;
            DateTime dtimeSys = DateTime.UtcNow;
            string strFunctionName = "Mst_District_Delete";
            string strErrorCodeDefault = TError.ErridnInventory.Mst_District_Delete;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
                , "objProvinceCode", objProvinceCode
                , "objDistrictCode", objDistrictCode
                });
            #endregion

            try
            {
                #region // Init:
                //_cf.db.LogUserId = _cf.sinf.strUserCode;
                _cf.db.BeginTransaction();

                // Write RequestLog:
                _cf.ProcessBizReq_OutSide(
                    strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    , alParamsCoupleError // alParamsCoupleError
                    );
                #endregion

                #region // Refine and Check Input:
                ////
                string strProvinceCode = TUtils.CUtils.StdParam(objProvinceCode);
                string strDistrictCode = TUtils.CUtils.StdParam(objDistrictCode);
                ////
                DataTable dtDB_Mst_District = null;
                {
                    ////
                    Mst_District_CheckDB(
                         ref alParamsCoupleError // alParamsCoupleError
                         , strProvinceCode // objProvinceCode
                         , objDistrictCode // objDistrictCode
                         , TConst.Flag.Yes // strFlagExistToCheck
                         , "" // strFlagActiveListToCheck
                         , out dtDB_Mst_District // dtDB_Mst_District
                        );
                    ////
                }
                #endregion

                #region // SaveDB Mst_District:
                {
                    // Init:
                    dtDB_Mst_District.Rows[0].Delete();

                    // Save:
                    _cf.db.SaveData(
                        "Mst_District"
                        , dtDB_Mst_District
                        );
                }
                #endregion

                // Return Good:
                TDALUtils.DBUtils.CommitSafety(_cf.db);
                mdsFinal.AcceptChanges();
                return mdsFinal;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Rollback:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);

                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsFinal
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Rollback and Release resources:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);
                TDALUtils.DBUtils.ReleaseAllSemaphore(_cf.db_Sys, true);

                // Write ReturnLog:
                _cf.ProcessBizReturn_OutSide(
                    ref mdsFinal // mdsFinal
                    , strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    );
                #endregion
            }
        }

        public DataSet WAS_RptSv_Mst_District_Get(
            ref ArrayList alParamsCoupleError
            , RQ_Mst_District objRQ_Mst_District
            ////
            , out RT_Mst_District objRT_Mst_District
            )
        {
            #region // Temp:
            string strTid = objRQ_Mst_District.Tid;
            objRT_Mst_District = new RT_Mst_District();
            DataSet mdsResult = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            DateTime dtimeSys = DateTime.UtcNow;
            //DataSet mdsExec = null;
            //DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(objRQ_Mst_District.Tid);
            //int nTidSeq = 0;
            //bool bNeedTransaction = true;
            string strFunctionName = "WAS_RptSv_Mst_District_Get";
            string strErrorCodeDefault = TError.ErridnInventory.WAS_RptSv_Mst_District_Get;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
				});
            #endregion

            try
            {
                #region // Init:
                // Sys_User_CheckAuthentication:
                //RptSv_Sys_User_CheckAuthentication(
                //    ref alParamsCoupleError
                //    , objRQ_Mst_District.WAUserCode
                //    , objRQ_Mst_District.WAUserPassword
                //    );

                #endregion

                #region // Refine and Check Input:
                List<MySummaryTable> lst_MySummaryTable = new List<MySummaryTable>();
                List<Mst_District> lst_Mst_District = new List<Mst_District>();
                bool bGet_Mst_District = (objRQ_Mst_District.Rt_Cols_Mst_District != null && objRQ_Mst_District.Rt_Cols_Mst_District.Length > 0);
                #endregion

                #region // WS_Mst_District_Get:
                mdsResult = Mst_District_Get(
                    objRQ_Mst_District.Tid // strTid
                    , objRQ_Mst_District.GwUserCode // strGwUserCode
                    , objRQ_Mst_District.GwPassword // strGwPassword
                    , objRQ_Mst_District.WAUserCode // strUserCode
                    , objRQ_Mst_District.WAUserPassword // strUserPassword
                    , ref alParamsCoupleError // alParamsCoupleError
                                              //// Filter:
                    , objRQ_Mst_District.Ft_RecordStart // strFt_RecordStart
                    , objRQ_Mst_District.Ft_RecordCount // strFt_RecordCount
                    , objRQ_Mst_District.Ft_WhereClause // strFt_WhereClause
                                                        //// Return:
                    , objRQ_Mst_District.Rt_Cols_Mst_District // strRt_Cols_Mst_District
                    );
                #endregion

                #region // GetData:
                if (!CmUtils.CMyDataSet.HasError(mdsResult))
                {
                    ////
                    DataTable dt_MySummaryTable = mdsResult.Tables["MySummaryTable"].Copy();
                    lst_MySummaryTable = TUtils.DataTableCmUtils.ToListof<MySummaryTable>(dt_MySummaryTable);
                    objRT_Mst_District.MySummaryTable = lst_MySummaryTable[0];
                    ////
                    if (bGet_Mst_District)
                    {
                        ////
                        DataTable dt_Mst_District = mdsResult.Tables["Mst_District"].Copy();
                        lst_Mst_District = TUtils.DataTableCmUtils.ToListof<Mst_District>(dt_Mst_District);
                        objRT_Mst_District.Lst_Mst_District = lst_Mst_District;
                    }
                }
                #endregion

                // Return Good:
                return mdsResult;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsResult
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Write ReturnLog:
                //_cf.ProcessBizReturn(
                //	ref mdsResult // mdsFinal
                //	, strTid // strTid
                //	, strFunctionName // strFunctionName
                //	);
                #endregion
            }
        }

        public DataSet WAS_Mst_District_Get(
            ref ArrayList alParamsCoupleError
            , RQ_Mst_District objRQ_Mst_District
            ////
            , out RT_Mst_District objRT_Mst_District
            )
        {
            #region // Temp:
            string strTid = objRQ_Mst_District.Tid;
            objRT_Mst_District = new RT_Mst_District();
            DataSet mdsResult = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            DateTime dtimeSys = DateTime.UtcNow;
            //DataSet mdsExec = null;
            //DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(objRQ_Mst_District.Tid);
            //int nTidSeq = 0;
            //bool bNeedTransaction = true;
            string strFunctionName = "WAS_Mst_District_Get";
            string strErrorCodeDefault = TError.ErridnInventory.WAS_Mst_District_Get;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
				});
            #endregion

            try
            {
                #region // Init:
                // Sys_User_CheckAuthentication:
                //Sys_User_CheckAuthentication(
                //    ref alParamsCoupleError
                //    , objRQ_Mst_District.WAUserCode
                //    , objRQ_Mst_District.WAUserPassword
                //    );

                #endregion

                #region // Refine and Check Input:
                List<MySummaryTable> lst_MySummaryTable = new List<MySummaryTable>();
                List<Mst_District> lst_Mst_District = new List<Mst_District>();
                bool bGet_Mst_District = (objRQ_Mst_District.Rt_Cols_Mst_District != null && objRQ_Mst_District.Rt_Cols_Mst_District.Length > 0);
                #endregion

                #region // WS_Mst_District_Get:
                mdsResult = Mst_District_Get(
                    objRQ_Mst_District.Tid // strTid
                    , objRQ_Mst_District.GwUserCode // strGwUserCode
                    , objRQ_Mst_District.GwPassword // strGwPassword
                    , objRQ_Mst_District.WAUserCode // strUserCode
                    , objRQ_Mst_District.WAUserPassword // strUserPassword
                    , ref alParamsCoupleError // alParamsCoupleError
                                              //// Filter:
                    , objRQ_Mst_District.Ft_RecordStart // strFt_RecordStart
                    , objRQ_Mst_District.Ft_RecordCount // strFt_RecordCount
                    , objRQ_Mst_District.Ft_WhereClause // strFt_WhereClause
                                                        //// Return:
                    , objRQ_Mst_District.Rt_Cols_Mst_District // strRt_Cols_Mst_District
                    );
                #endregion

                #region // GetData:
                if (!CmUtils.CMyDataSet.HasError(mdsResult))
                {
                    ////
                    DataTable dt_MySummaryTable = mdsResult.Tables["MySummaryTable"].Copy();
                    lst_MySummaryTable = TUtils.DataTableCmUtils.ToListof<MySummaryTable>(dt_MySummaryTable);
                    objRT_Mst_District.MySummaryTable = lst_MySummaryTable[0];
                    ////
                    if (bGet_Mst_District)
                    {
                        ////
                        DataTable dt_Mst_District = mdsResult.Tables["Mst_District"].Copy();
                        lst_Mst_District = TUtils.DataTableCmUtils.ToListof<Mst_District>(dt_Mst_District);
                        objRT_Mst_District.Lst_Mst_District = lst_Mst_District;
                    }
                }
                #endregion

                // Return Good:
                return mdsResult;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsResult
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Write ReturnLog:
                //_cf.ProcessBizReturn(
                //	ref mdsResult // mdsFinal
                //	, strTid // strTid
                //	, strFunctionName // strFunctionName
                //	);
                #endregion
            }
        }

        public DataSet WAS_Mst_District_Create(
            ref ArrayList alParamsCoupleError
            , RQ_Mst_District objRQ_Mst_District
            ////
            , out RT_Mst_District objRT_Mst_District
            )
        {
            #region // Temp:
            string strTid = objRQ_Mst_District.Tid;
            objRT_Mst_District = new RT_Mst_District();
            DataSet mdsResult = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            DateTime dtimeSys = DateTime.UtcNow;
            //DataSet mdsExec = null;
            //DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(objRQ_Mst_District.Tid);
            //int nTidSeq = 0;
            //bool bNeedTransaction = true;
            string strFunctionName = "WAS_Mst_District_Create";
            string strErrorCodeDefault = TError.ErridnInventory.WAS_Mst_District_Create;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
                , "Mst_District", TJson.JsonConvert.SerializeObject(objRQ_Mst_District.Mst_District)
				////
				});
            #endregion

            try
            {
                #region // Init:
                // Sys_User_CheckAuthentication:
                //Sys_User_CheckAuthentication(
                //    ref alParamsCoupleError
                //    , objRQ_Mst_District.WAUserCode
                //    , objRQ_Mst_District.WAUserPassword
                //    );

                #endregion

                #region // Refine and Check Input:
                //List<Mst_District> lst_Mst_District = new List<Mst_District>();
                //List<Mst_DistrictInGroup> lst_Mst_DistrictInGroup = new List<Mst_DistrictInGroup>();
                #endregion

                #region // Mst_District_Create:
                mdsResult = Mst_District_Create(
                    objRQ_Mst_District.Tid // strTid
                    , objRQ_Mst_District.GwUserCode // strGwUserCode
                    , objRQ_Mst_District.GwPassword // strGwPassword
                    , objRQ_Mst_District.WAUserCode // strUserCode
                    , objRQ_Mst_District.WAUserPassword // strUserPassword
                    , ref alParamsCoupleError // alParamsCoupleError
                                              ////
                    , objRQ_Mst_District.Mst_District.DistrictCode // objDistrictCode
                    , objRQ_Mst_District.Mst_District.ProvinceCode // objProvinceCode
                    , objRQ_Mst_District.Mst_District.DistrictName // objDistrictName
                    );
                #endregion

                // Return Good:
                return mdsResult;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsResult
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Write ReturnLog:
                //_cf.ProcessBizReturn(
                //	ref mdsResult // mdsFinal
                //	, strTid // strTid
                //	, strFunctionName // strFunctionName
                //	);
                #endregion
            }
        }

        public DataSet WAS_Mst_District_Update(
            ref ArrayList alParamsCoupleError
            , RQ_Mst_District objRQ_Mst_District
            ////
            , out RT_Mst_District objRT_Mst_District
            )
        {
            #region // Temp:
            string strTid = objRQ_Mst_District.Tid;
            objRT_Mst_District = new RT_Mst_District();
            DataSet mdsResult = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            DateTime dtimeSys = DateTime.UtcNow;
            //DataSet mdsExec = null;
            //DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(objRQ_Mst_District.Tid);
            //int nTidSeq = 0;
            //bool bNeedTransaction = true;
            string strFunctionName = "WAS_Mst_District_Update";
            string strErrorCodeDefault = TError.ErridnInventory.WAS_Mst_District_Update;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
                , "Mst_District", TJson.JsonConvert.SerializeObject(objRQ_Mst_District.Mst_District)
				////
				});
            #endregion

            try
            {
                #region // Init:
                // Sys_User_CheckAuthentication:
                //Sys_User_CheckAuthentication(
                //    ref alParamsCoupleError
                //    , objRQ_Mst_District.WAUserCode
                //    , objRQ_Mst_District.WAUserPassword
                //    );

                #endregion

                #region // Refine and Check Input:
                //List<Mst_District> lst_Mst_District = new List<Mst_District>();
                //List<Mst_DistrictInGroup> lst_Mst_DistrictInGroup = new List<Mst_DistrictInGroup>();
                #endregion

                #region // Mst_District_Update:
                mdsResult = Mst_District_Update(
                    objRQ_Mst_District.Tid // strTid
                    , objRQ_Mst_District.GwUserCode // strGwUserCode
                    , objRQ_Mst_District.GwPassword // strGwPassword
                    , objRQ_Mst_District.WAUserCode // strUserCode
                    , objRQ_Mst_District.WAUserPassword // strUserPassword
                    , ref alParamsCoupleError // alParamsCoupleError
                                              ////
                    , objRQ_Mst_District.Mst_District.DistrictCode // objDistrictCode
                    , objRQ_Mst_District.Mst_District.ProvinceCode // objProvinceCode
                    , objRQ_Mst_District.Mst_District.DistrictName // objDistrictName
                    , objRQ_Mst_District.Mst_District.FlagActive // objFlagActive
                                                                 ////
                    , objRQ_Mst_District.Ft_Cols_Upd// objFt_Cols_Upd
                    );
                #endregion

                // Return Good:
                return mdsResult;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsResult
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Write ReturnLog:
                //_cf.ProcessBizReturn(
                //	ref mdsResult // mdsFinal
                //	, strTid // strTid
                //	, strFunctionName // strFunctionName
                //	);
                #endregion
            }
        }

        public DataSet WAS_Mst_District_Delete(
            ref ArrayList alParamsCoupleError
            , RQ_Mst_District objRQ_Mst_District
            ////
            , out RT_Mst_District objRT_Mst_District
            )
        {
            #region // Temp:
            string strTid = objRQ_Mst_District.Tid;
            objRT_Mst_District = new RT_Mst_District();
            DataSet mdsResult = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            DateTime dtimeSys = DateTime.UtcNow;
            //DataSet mdsExec = null;
            //DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(objRQ_Mst_District.Tid);
            //int nTidSeq = 0;
            //bool bNeedTransaction = true;
            string strFunctionName = "WAS_Mst_District_Delete";
            string strErrorCodeDefault = TError.ErridnInventory.WAS_Mst_District_Delete;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				//, "Mst_District", TJson.JsonConvert.SerializeObject(objRQ_Mst_District.Mst_District)
				////
				});
            #endregion

            try
            {
                #region // Init:
                // Sys_User_CheckAuthentication:
                //Sys_User_CheckAuthentication(
                //    ref alParamsCoupleError
                //    , objRQ_Mst_District.WAUserCode
                //    , objRQ_Mst_District.WAUserPassword
                //    );

                #endregion

                #region // Refine and Check Input:
                //List<Mst_District> lst_Mst_District = new List<Mst_District>();
                //List<Mst_DistrictInGroup> lst_Mst_DistrictInGroup = new List<Mst_DistrictInGroup>();
                #endregion

                #region // Mst_District_Delete:
                mdsResult = Mst_District_Delete(
                    objRQ_Mst_District.Tid // strTid
                    , objRQ_Mst_District.GwUserCode // strGwUserCode
                    , objRQ_Mst_District.GwPassword // strGwPassword
                    , objRQ_Mst_District.WAUserCode // strUserCode
                    , objRQ_Mst_District.WAUserPassword // strUserPassword
                    , ref alParamsCoupleError // alParamsCoupleError
                                              ////
                    , objRQ_Mst_District.Mst_District.ProvinceCode // objProvinceCode
                    , objRQ_Mst_District.Mst_District.DistrictCode // objDistrictCode
                    );
                #endregion

                // Return Good:
                return mdsResult;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsResult
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Write ReturnLog:
                //_cf.ProcessBizReturn(
                //	ref mdsResult // mdsFinal
                //	, strTid // strTid
                //	, strFunctionName // strFunctionName
                //	);
                #endregion
            }
        }
        
        public DataSet WAS_RptSv_Mst_District_Create(
            ref ArrayList alParamsCoupleError
            , RQ_Mst_District objRQ_Mst_District
            ////
            , out RT_Mst_District objRT_Mst_District
            )
        {
            #region // Temp:
            string strTid = objRQ_Mst_District.Tid;
            objRT_Mst_District = new RT_Mst_District();
            DataSet mdsResult = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            DateTime dtimeSys = DateTime.UtcNow;
            //DataSet mdsExec = null;
            //DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(objRQ_Mst_District.Tid);
            //int nTidSeq = 0;
            //bool bNeedTransaction = true;
            string strFunctionName = "WAS_RptSv_Mst_District_Create";
            string strErrorCodeDefault = TError.ErridnInventory.WAS_RptSv_Mst_District_Create;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
                , "Mst_District", TJson.JsonConvert.SerializeObject(objRQ_Mst_District.Mst_District)
				////
				});
            #endregion

            try
            {
                #region // Init:
                // Sys_User_CheckAuthentication:
                //RptSv_Sys_User_CheckAuthentication(
                //    ref alParamsCoupleError
                //    , objRQ_Mst_District.WAUserCode
                //    , objRQ_Mst_District.WAUserPassword
                //    );

                #endregion

                #region // Refine and Check Input:
                //List<Mst_District> lst_Mst_District = new List<Mst_District>();
                //List<Mst_DistrictInGroup> lst_Mst_DistrictInGroup = new List<Mst_DistrictInGroup>();
                #endregion

                #region // Mst_District_Create:
                mdsResult = Mst_District_Create(
                    objRQ_Mst_District.Tid // strTid
                    , objRQ_Mst_District.GwUserCode // strGwUserCode
                    , objRQ_Mst_District.GwPassword // strGwPassword
                    , objRQ_Mst_District.WAUserCode // strUserCode
                    , objRQ_Mst_District.WAUserPassword // strUserPassword
                    , ref alParamsCoupleError // alParamsCoupleError
                                              ////
                    , objRQ_Mst_District.Mst_District.DistrictCode // objDistrictCode
                    , objRQ_Mst_District.Mst_District.ProvinceCode // objProvinceCode
                    , objRQ_Mst_District.Mst_District.DistrictName // objDistrictName
                    );
                #endregion

                // Return Good:
                return mdsResult;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsResult
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Write ReturnLog:
                //_cf.ProcessBizReturn(
                //	ref mdsResult // mdsFinal
                //	, strTid // strTid
                //	, strFunctionName // strFunctionName
                //	);
                #endregion
            }
        }

        public DataSet WAS_RptSv_Mst_District_Update(
            ref ArrayList alParamsCoupleError
            , RQ_Mst_District objRQ_Mst_District
            ////
            , out RT_Mst_District objRT_Mst_District
            )
        {
            #region // Temp:
            string strTid = objRQ_Mst_District.Tid;
            objRT_Mst_District = new RT_Mst_District();
            DataSet mdsResult = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            DateTime dtimeSys = DateTime.UtcNow;
            //DataSet mdsExec = null;
            //DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(objRQ_Mst_District.Tid);
            //int nTidSeq = 0;
            //bool bNeedTransaction = true;
            string strFunctionName = "WAS_RptSv_Mst_District_Update";
            string strErrorCodeDefault = TError.ErridnInventory.WAS_RptSv_Mst_District_Update;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
                , "Mst_District", TJson.JsonConvert.SerializeObject(objRQ_Mst_District.Mst_District)
				////
				});
            #endregion

            try
            {
                #region // Init:
                // Sys_User_CheckAuthentication:
                //RptSv_Sys_User_CheckAuthentication(
                //    ref alParamsCoupleError
                //    , objRQ_Mst_District.WAUserCode
                //    , objRQ_Mst_District.WAUserPassword
                //    );

                #endregion

                #region // Refine and Check Input:
                //List<Mst_District> lst_Mst_District = new List<Mst_District>();
                //List<Mst_DistrictInGroup> lst_Mst_DistrictInGroup = new List<Mst_DistrictInGroup>();
                #endregion

                #region // Mst_District_Update:
                mdsResult = Mst_District_Update(
                    objRQ_Mst_District.Tid // strTid
                    , objRQ_Mst_District.GwUserCode // strGwUserCode
                    , objRQ_Mst_District.GwPassword // strGwPassword
                    , objRQ_Mst_District.WAUserCode // strUserCode
                    , objRQ_Mst_District.WAUserPassword // strUserPassword
                    , ref alParamsCoupleError // alParamsCoupleError
                                              ////
                    , objRQ_Mst_District.Mst_District.DistrictCode // objDistrictCode
                    , objRQ_Mst_District.Mst_District.ProvinceCode // objProvinceCode
                    , objRQ_Mst_District.Mst_District.DistrictName // objDistrictName
                    , objRQ_Mst_District.Mst_District.FlagActive // objFlagActive
                                                                 ////
                    , objRQ_Mst_District.Ft_Cols_Upd// objFt_Cols_Upd
                    );
                #endregion

                // Return Good:
                return mdsResult;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsResult
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Write ReturnLog:
                //_cf.ProcessBizReturn(
                //	ref mdsResult // mdsFinal
                //	, strTid // strTid
                //	, strFunctionName // strFunctionName
                //	);
                #endregion
            }
        }

        public DataSet WAS_RptSv_Mst_District_Delete(
            ref ArrayList alParamsCoupleError
            , RQ_Mst_District objRQ_Mst_District
            ////
            , out RT_Mst_District objRT_Mst_District
            )
        {
            #region // Temp:
            string strTid = objRQ_Mst_District.Tid;
            objRT_Mst_District = new RT_Mst_District();
            DataSet mdsResult = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            DateTime dtimeSys = DateTime.UtcNow;
            //DataSet mdsExec = null;
            //DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(objRQ_Mst_District.Tid);
            //int nTidSeq = 0;
            //bool bNeedTransaction = true;
            string strFunctionName = "WAS_RptSv_Mst_District_Delete";
            string strErrorCodeDefault = TError.ErridnInventory.WAS_RptSv_Mst_District_Delete;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				//, "Mst_District", TJson.JsonConvert.SerializeObject(objRQ_Mst_District.Mst_District)
				////
				});
            #endregion

            try
            {
                #region // Init:
                // Sys_User_CheckAuthentication:
                //RptSv_Sys_User_CheckAuthentication(
                //    ref alParamsCoupleError
                //    , objRQ_Mst_District.WAUserCode
                //    , objRQ_Mst_District.WAUserPassword
                //    );

                #endregion

                #region // Refine and Check Input:
                //List<Mst_District> lst_Mst_District = new List<Mst_District>();
                //List<Mst_DistrictInGroup> lst_Mst_DistrictInGroup = new List<Mst_DistrictInGroup>();
                #endregion

                #region // Mst_District_Delete:
                mdsResult = Mst_District_Delete(
                    objRQ_Mst_District.Tid // strTid
                    , objRQ_Mst_District.GwUserCode // strGwUserCode
                    , objRQ_Mst_District.GwPassword // strGwPassword
                    , objRQ_Mst_District.WAUserCode // strUserCode
                    , objRQ_Mst_District.WAUserPassword // strUserPassword
                    , ref alParamsCoupleError // alParamsCoupleError
                                              ////
                    , objRQ_Mst_District.Mst_District.ProvinceCode // objProvinceCode
                    , objRQ_Mst_District.Mst_District.DistrictCode // objDistrictCode
                    );
                #endregion

                // Return Good:
                return mdsResult;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsResult
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Write ReturnLog:
                //_cf.ProcessBizReturn(
                //	ref mdsResult // mdsFinal
                //	, strTid // strTid
                //	, strFunctionName // strFunctionName
                //	);
                #endregion
            }
        }
        #endregion

        #region // Mst_Country:
        private void Mst_Country_CheckDB(
            ref ArrayList alParamsCoupleError
            , object objCountryCode
            , string strFlagExistToCheck
            , string strFlagActiveListToCheck
            , out DataTable dtDB_Mst_Country
            )
        {
            // GetInfo:
            string strSqlExec = CmUtils.StringUtils.Replace(@"
					select top 1
						t.*
					from Mst_Country t --//[mylock]
					where (1=1)
						and t.CountryCode = @objCountryCode
					;
				");
            dtDB_Mst_Country = _cf.db.ExecQuery(
                strSqlExec
                , "@objCountryCode", objCountryCode
                ).Tables[0];
            dtDB_Mst_Country.TableName = "Mst_Country";

            // strFlagExistToCheck:
            if (strFlagExistToCheck.Length > 0)
            {
                if (CmUtils.StringUtils.StringEqual(strFlagExistToCheck, TConst.Flag.Active) && dtDB_Mst_Country.Rows.Count < 1)
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.CountryCode", objCountryCode
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Mst_Country_CheckDB_CountryNotFound
                        , null
                        , alParamsCoupleError.ToArray()
                        );
                }
                if (CmUtils.StringUtils.StringEqual(strFlagExistToCheck, TConst.Flag.Inactive) && dtDB_Mst_Country.Rows.Count > 0)
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.CountryCode", objCountryCode
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Mst_Country_CheckDB_CountryExist
                        , null
                        , alParamsCoupleError.ToArray()
                        );
                }
            }

            // strFlagActiveListToCheck:
            if (strFlagActiveListToCheck.Length > 0 && !strFlagActiveListToCheck.Contains(Convert.ToString(dtDB_Mst_Country.Rows[0]["FlagActive"])))
            {
                alParamsCoupleError.AddRange(new object[]{
                    "Check.CountryCode", objCountryCode
                    , "Check.strFlagActiveListToCheck", strFlagActiveListToCheck
                    , "DB.FlagActive", dtDB_Mst_Country.Rows[0]["FlagActive"]
                    });
                throw CmUtils.CMyException.Raise(
                    TError.ErridnInventory.Mst_Country_CheckDB_FlagActiveNotMatched
                    , null
                    , alParamsCoupleError.ToArray()
                    );
            }
        }

        public DataSet Mst_Country_Get(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            //// Filter:
            , string strFt_RecordStart
            , string strFt_RecordCount
            , string strFt_WhereClause
            //// Return:
            , string strRt_Cols_Mst_Country
            )
        {
            #region // Temp:
            DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            //int nTidSeq = 0;
            DateTime dtimeSys = DateTime.UtcNow;
            bool bNeedTransaction = true;
            string strFunctionName = "Mst_Country_Get";
            string strErrorCodeDefault = TError.ErridnInventory.Mst_Country_Get;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				//// Filter
				, "strFt_RecordStart", strFt_RecordStart
                , "strFt_RecordCount", strFt_RecordCount
                , "strFt_WhereClause", strFt_WhereClause
				//// Return
				, "strRt_Cols_Mst_Country", strRt_Cols_Mst_Country
                });
            #endregion

            try
            {
                #region // Init:
                //_cf.db.LogUserId = _cf.sinf.strUserCode;
                if (bNeedTransaction) _cf.db.BeginTransaction();

                // Write RequestLog:
                _cf.ProcessBizReq_OutSide(
                    strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    , alParamsCoupleError // alParamsCoupleError
                    );

                // Sys_User_CheckAuthentication:
                //Sys_User_CheckAuthentication(
                //    ref alParamsCoupleError
                //    , strWAUserCode
                //    , strWAUserPassword
                //    );

                // Check Access/Deny:
                Sys_Access_CheckDenyV30(
                    ref alParamsCoupleError
                    , strWAUserCode
                    , strFunctionName
                    );
                #endregion

                #region // Check:
                //// Refine:
                long nFilterRecordStart = Convert.ToInt64(strFt_RecordStart);
                long nFilterRecordEnd = nFilterRecordStart + Convert.ToInt64(strFt_RecordCount) - 1;
                bool bGet_Mst_Country = (strRt_Cols_Mst_Country != null && strRt_Cols_Mst_Country.Length > 0);

                //// drAbilityOfUser:
                //DataRow drAbilityOfUser = myCache_ViewAbility_GetUserInfo(strWAUserCode);

                #endregion

                #region // Build Sql:
                ////
                ArrayList alParamsCoupleSql = new ArrayList();
                alParamsCoupleSql.AddRange(new object[] {
                    "@nFilterRecordStart", nFilterRecordStart
                    , "@nFilterRecordEnd", nFilterRecordEnd
                    });
                ////
                //myCache_ViewAbility_GetDealerInfo(drAbilityOfUser);
                ////
                string strSqlGetData = CmUtils.StringUtils.Replace(@"
						---- #tbl_Mst_Country_Filter_Draft:
						select distinct
							identity(bigint, 0, 1) MyIdxSeq
							, mc.CountryCode
						into #tbl_Mst_Country_Filter_Draft
						from Mst_Country mc --//[mylock]
						where (1=1)
							zzB_Where_strFilter_zzE
						order by mc.CountryCode asc
						;

						---- Summary:
						select Count(0) MyCount from #tbl_Mst_Country_Filter_Draft t --//[mylock]
						;

						---- #tbl_Mst_Country_Filter:
						select
							t.*
						into #tbl_Mst_Country_Filter
						from #tbl_Mst_Country_Filter_Draft t --//[mylock]
						where
							(t.MyIdxSeq >= @nFilterRecordStart)
							and (t.MyIdxSeq <= @nFilterRecordEnd)
						;

						-------- Mst_Country --------:
						zzB_Select_Mst_Country_zzE
						----------------------------------------

						---- Clear for debug:
						--drop table #tbl_Mst_Country_Filter_Draft;
						--drop table #tbl_Mst_Country_Filter;
					"
                    );
                ////
                string zzB_Select_Mst_Country_zzE = "-- Nothing.";
                if (bGet_Mst_Country)
                {
                    #region // bGet_Mst_Country:
                    zzB_Select_Mst_Country_zzE = CmUtils.StringUtils.Replace(@"
							---- Mst_Country:
							select
								t.MyIdxSeq
								, mc.*
							from #tbl_Mst_Country_Filter t --//[mylock]
								inner join Mst_Country mc --//[mylock]
									on t.CountryCode = mc.CountryCode
							order by t.MyIdxSeq asc
							;
						"
                        );
                    #endregion
                }
                ////
                string zzB_Where_strFilter_zzE = "";
                {
                    Hashtable htSpCols = new Hashtable();
                    {
                        #region // htSpCols:
                        ////
                        TUtils.CUtils.MyBuildHTSupportedColumns(
                            _cf.db // db
                            , ref htSpCols // htSupportedColumns
                            , "Mst_Country" // strTableNameDB
                            , "Mst_Country." // strPrefixStd
                            , "mc." // strPrefixAlias
                            );
                        ////
                        #endregion
                    }
                    zzB_Where_strFilter_zzE = CmUtils.SqlUtils.BuildWhere(
                        htSpCols // htSpCols
                        , strFt_WhereClause // strClause
                        , "@p_" // strParamPrefix
                        , ref alParamsCoupleSql // alParamsCoupleSql
                        );
                    zzB_Where_strFilter_zzE = (zzB_Where_strFilter_zzE.Length <= 0 ? "" : string.Format(" and ({0})", zzB_Where_strFilter_zzE));
                    alParamsCoupleError.AddRange(new object[]{
                        "zzB_Where_strFilter_zzE", zzB_Where_strFilter_zzE
                        });
                }
                ////
                strSqlGetData = CmUtils.StringUtils.Replace(
                    strSqlGetData
                    , "zzB_Where_strFilter_zzE", zzB_Where_strFilter_zzE
                    , "zzB_Select_Mst_Country_zzE", zzB_Select_Mst_Country_zzE
                    );
                #endregion

                #region // Get Data:
                DataSet dsGetData = _cf.db.ExecQuery(
                    strSqlGetData
                    , alParamsCoupleSql.ToArray()
                    );
                int nIdxTable = 0;
                dsGetData.Tables[nIdxTable++].TableName = "MySummaryTable";
                if (bGet_Mst_Country)
                {
                    dsGetData.Tables[nIdxTable++].TableName = "Mst_Country";
                }
                CmUtils.DataUtils.MoveDataTable(ref mdsFinal, ref dsGetData);
                #endregion

                // Return Good:
                TDALUtils.DBUtils.RollbackSafety(_cf.db); // Always Rollback.
                mdsFinal.AcceptChanges();
                return mdsFinal;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Rollback:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);

                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsFinal
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Rollback and Release resources:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);
                TDALUtils.DBUtils.ReleaseAllSemaphore(_cf.db_Sys, true);

                // Write ReturnLog:
                _cf.ProcessBizReturn_OutSide(
                    ref mdsFinal // mdsFinal
                    , strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    );
                #endregion
            }
        }
        public DataSet Mst_Country_Create(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            ////
            , object objCountryCode
            , object objCountryName
            )
        {
            #region // Temp:
            DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            //int nTidSeq = 0;
            DateTime dtimeSys = DateTime.UtcNow;
            string strFunctionName = "Mst_Country_Create";
            string strErrorCodeDefault = TError.ErridnInventory.Mst_Country_Create;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
                ////
				, "objCountryCode", objCountryCode
                , "objCountryName", objCountryName
                });
            #endregion

            try
            {
                #region // Convert Input:
                #endregion

                #region // Init:
                //_cf.db.LogUserId = _cf.sinf.strUserCode;
                _cf.db.BeginTransaction();

                // Write RequestLog:
                _cf.ProcessBizReq_OutSide(
                    strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    , alParamsCoupleError // alParamsCoupleError
                    );

                // Sys_User_CheckAuthentication:
                //Sys_User_CheckAuthentication(
                //    ref alParamsCoupleError
                //    , strWAUserCode
                //    , strWAUserPassword
                //    );

                // Check Access/Deny:
                Sys_Access_CheckDenyV30(
                    ref alParamsCoupleError
                    , strWAUserCode
                    , strFunctionName
                    );
                #endregion

                #region // Refine and Check Input:
                ////
                ////
                string strCountryCode = TUtils.CUtils.StdParam(objCountryCode);
                string strCountryName = string.Format("{0}", objCountryName).Trim();

                // drAbilityOfUser:
                //DataRow drAbilityOfUser = Sys_User_GetAbilityViewOfUser(strWAUserCode);
                ////
                DataTable dtDB_Mst_Country = null;
                {
                    ////
                    if (strCountryCode == null || strCountryCode.Length < 1)
                    {
                        alParamsCoupleError.AddRange(new object[]{
                            "Check.strCountryCode", strCountryCode
                            });
                        throw CmUtils.CMyException.Raise(
                            TError.ErridnInventory.Mst_Country_Create_InvalidCountryCode
                            , null
                            , alParamsCoupleError.ToArray()
                            );
                    }
                    Mst_Country_CheckDB(
                        ref alParamsCoupleError // alParamsCoupleError
                        , strCountryCode // objCountryCode
                        , TConst.Flag.No // strFlagExistToCheck
                        , "" // strFlagActiveListToCheck
                        , out dtDB_Mst_Country // dtDB_Mst_Country
                        );
                    ////
                    if (strCountryName.Length < 1)
                    {
                        alParamsCoupleError.AddRange(new object[]{
                            "Check.strCountryName", strCountryName
                            });
                        throw CmUtils.CMyException.Raise(
                            TError.ErridnInventory.Mst_Country_Create_InvalidCountryName
                            , null
                            , alParamsCoupleError.ToArray()
                            );
                    }
                }
                #endregion

                #region // SaveDB Mst_Country:
                {
                    // Init:
                    //ArrayList alColumnEffective = new ArrayList();
                    string strFN = "";
                    DataRow drDB = dtDB_Mst_Country.NewRow();
                    strFN = "CountryCode"; drDB[strFN] = strCountryCode;
                    strFN = "NetworkID"; drDB[strFN] = nNetworkID;
                    strFN = "CountryName"; drDB[strFN] = strCountryName;
                    strFN = "FlagActive"; drDB[strFN] = TConst.Flag.Active;
                    strFN = "LogLUDTimeUTC"; drDB[strFN] = dtimeSys.ToString("yyyy-MM-dd HH:mm:ss");
                    strFN = "LogLUBy"; drDB[strFN] = strWAUserCode;
                    dtDB_Mst_Country.Rows.Add(drDB);

                    // Save:
                    _cf.db.SaveData(
                        "Mst_Country"
                        , dtDB_Mst_Country
                        //, alColumnEffective.ToArray()
                        );
                }
                #endregion

                // Return Good:
                TDALUtils.DBUtils.CommitSafety(_cf.db);
                mdsFinal.AcceptChanges();
                return mdsFinal;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Rollback:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);

                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsFinal
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Rollback and Release resources:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);
                TDALUtils.DBUtils.ReleaseAllSemaphore(_cf.db_Sys, true);

                // Write ReturnLog:
                _cf.ProcessBizReturn_OutSide(
                    ref mdsFinal // mdsFinal
                    , strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    );
                #endregion
            }
        }
        public DataSet Mst_Country_Update(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            ////
            , object objCountryCode
            , object objCountryName
            , object objFlagActive
            ////
            , object objFt_Cols_Upd
            )
        {
            #region // Temp:
            DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            //int nTidSeq = 0;
            DateTime dtimeSys = DateTime.UtcNow;
            string strFunctionName = "Mst_Country_Update";
            string strErrorCodeDefault = TError.ErridnInventory.Mst_Country_Update;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
				, "objCountryCode", objCountryCode
                , "objCountryName", objCountryName
                , "objFlagActive", objFlagActive
				////
				, "objFt_Cols_Upd", objFt_Cols_Upd
                });
            #endregion

            try
            {
                #region // Convert Input:
                #endregion

                #region // Init:
                //_cf.db.LogUserId = _cf.sinf.strUserCode;
                _cf.db.BeginTransaction();

                // Write RequestLog:
                _cf.ProcessBizReq_OutSide(
                    strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    , alParamsCoupleError // alParamsCoupleError
                    );

                // Sys_User_CheckAuthentication:
                //Sys_User_CheckAuthentication(
                //    ref alParamsCoupleError
                //    , strWAUserCode
                //    , strWAUserPassword
                //    );

                // Check Access/Deny:
                Sys_Access_CheckDenyV30(
                    ref alParamsCoupleError
                    , strWAUserCode
                    , strFunctionName
                    );
                #endregion

                #region // Refine and Check Input:
                ////
                string strFt_Cols_Upd = TUtils.CUtils.StdParam(objFt_Cols_Upd);
                strFt_Cols_Upd = (strFt_Cols_Upd == null ? "" : strFt_Cols_Upd);
                ////
                string strCountryCode = TUtils.CUtils.StdParam(objCountryCode);
                string strCountryName = string.Format("{0}", objCountryName).Trim();
                string strFlagActive = TUtils.CUtils.StdFlag(objFlagActive);
                ////
                bool bUpd_CountryName = strFt_Cols_Upd.Contains("Mst_Country.CountryName".ToUpper());
                bool bUpd_FlagActive = strFt_Cols_Upd.Contains("Mst_Country.FlagActive".ToUpper());

                ////
                DataTable dtDB_Mst_Country = null;
                {
                    ////
                    Mst_Country_CheckDB(
                         ref alParamsCoupleError // alParamsCoupleError
                         , strCountryCode // objCountryCode 
                         , TConst.Flag.Yes // strFlagExistToCheck
                         , "" // strFlagActiveListToCheck
                         , out dtDB_Mst_Country // dtDB_Mst_Country
                        );
                    ////
                    if (bUpd_CountryName && string.IsNullOrEmpty(strCountryName))
                    {
                        alParamsCoupleError.AddRange(new object[]{
                            "Check.strCountryName", strCountryName
                            });
                        throw CmUtils.CMyException.Raise(
                            TError.ErridnInventory.Mst_Country_Update_InvalidCountryName
                            , null
                            , alParamsCoupleError.ToArray()
                            );
                    }
                    ////
                }
                #endregion

                #region // SaveDB Mst_Country:
                {
                    // Init:
                    ArrayList alColumnEffective = new ArrayList();
                    string strFN = "";
                    DataRow drDB = dtDB_Mst_Country.Rows[0];
                    if (bUpd_CountryName) { strFN = "CountryName"; drDB[strFN] = strCountryName; alColumnEffective.Add(strFN); }
                    if (bUpd_FlagActive) { strFN = "FlagActive"; drDB[strFN] = strFlagActive; alColumnEffective.Add(strFN); }
                    strFN = "LogLUDTimeUTC"; drDB[strFN] = dtimeSys.ToString("yyyy-MM-dd HH:mm:ss"); alColumnEffective.Add(strFN);
                    strFN = "LogLUBy"; drDB[strFN] = strWAUserCode; alColumnEffective.Add(strFN);

                    // Save:
                    _cf.db.SaveData(
                        "Mst_Country"
                        , dtDB_Mst_Country
                        , alColumnEffective.ToArray()
                        );
                }
                #endregion

                // Return Good:
                TDALUtils.DBUtils.CommitSafety(_cf.db);
                mdsFinal.AcceptChanges();
                return mdsFinal;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Rollback:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);

                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsFinal
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Rollback and Release resources:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);
                TDALUtils.DBUtils.ReleaseAllSemaphore(_cf.db_Sys, true);

                // Write ReturnLog:
                _cf.ProcessBizReturn_OutSide(
                    ref mdsFinal // mdsFinal
                    , strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    );
                #endregion
            }
        }
        public DataSet Mst_Country_Delete(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            /////
            , object objCountryCode
            )
        {
            #region // Temp:
            DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            //int nTidSeq = 0;
            DateTime dtimeSys = DateTime.UtcNow;
            string strFunctionName = "Mst_Country_Delete";
            string strErrorCodeDefault = TError.ErridnInventory.Mst_Country_Delete;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
				, "objCountryCode", objCountryCode
                });
            #endregion

            try
            {
                #region // Init:
                //_cf.db.LogUserId = _cf.sinf.strUserCode;
                _cf.db.BeginTransaction();

                // Write RequestLog:
                _cf.ProcessBizReq_OutSide(
                    strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    , alParamsCoupleError // alParamsCoupleError
                    );

                // Sys_User_CheckAuthentication:
                //Sys_User_CheckAuthentication(
                //    ref alParamsCoupleError
                //    , strWAUserCode
                //    , strWAUserPassword
                //    );

                // Check Access/Deny:
                Sys_Access_CheckDenyV30(
                    ref alParamsCoupleError
                    , strWAUserCode
                    , strFunctionName
                    );
                #endregion

                #region // Refine and Check Input:
                ////
                string strCountryCode = TUtils.CUtils.StdParam(objCountryCode);
                ////
                DataTable dtDB_Mst_Country = null;
                {
                    ////
                    Mst_Country_CheckDB(
                         ref alParamsCoupleError // alParamsCoupleError
                         , objCountryCode // objCountryCode
                         , TConst.Flag.Yes // strFlagExistToCheck
                         , "" // strFlagActiveListToCheck
                         , out dtDB_Mst_Country // dtDB_Mst_Country
                        );
                    ////
                }
                #endregion

                #region // SaveDB Mst_Country:
                {
                    // Init:
                    dtDB_Mst_Country.Rows[0].Delete();

                    // Save:
                    _cf.db.SaveData(
                        "Mst_Country"
                        , dtDB_Mst_Country
                        );
                }
                #endregion

                // Return Good:
                TDALUtils.DBUtils.CommitSafety(_cf.db);
                mdsFinal.AcceptChanges();
                return mdsFinal;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Rollback:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);

                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsFinal
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Rollback and Release resources:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);
                TDALUtils.DBUtils.ReleaseAllSemaphore(_cf.db_Sys, true);

                // Write ReturnLog:
                _cf.ProcessBizReturn_OutSide(
                    ref mdsFinal // mdsFinal
                    , strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    );
                #endregion
            }
        }

        public DataSet WAS_Mst_Country_Get(
            ref ArrayList alParamsCoupleError
            , RQ_Mst_Country objRQ_Mst_Country
            ////
            , out RT_Mst_Country objRT_Mst_Country
            )
        {
            #region // Temp:
            string strTid = objRQ_Mst_Country.Tid;
            objRT_Mst_Country = new RT_Mst_Country();
            DataSet mdsResult = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            DateTime dtimeSys = DateTime.UtcNow;
            //DataSet mdsExec = null;
            //DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(objRQ_Mst_Country.Tid);
            //int nTidSeq = 0;
            //bool bNeedTransaction = true;
            string strFunctionName = "WAS_Mst_Country_Get";
            string strErrorCodeDefault = TError.ErridnInventory.WAS_Mst_Country_Get;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
				});
            #endregion

            try
            {
                #region // Init:
                #endregion

                #region // Refine and Check Input:
                List<MySummaryTable> lst_MySummaryTable = new List<MySummaryTable>();

                List<Mst_Country> lst_Mst_Country = new List<Mst_Country>();
                bool bGet_Mst_Country = (objRQ_Mst_Country.Rt_Cols_Mst_Country != null && objRQ_Mst_Country.Rt_Cols_Mst_Country.Length > 0);
                #endregion

                #region // WS_Mst_Country_Get:
                mdsResult = Mst_Country_Get(
                    objRQ_Mst_Country.Tid // strTid
                    , objRQ_Mst_Country.GwUserCode // strGwUserCode
                    , objRQ_Mst_Country.GwPassword // strGwPassword
                    , objRQ_Mst_Country.WAUserCode // strUserCode
                    , objRQ_Mst_Country.WAUserPassword // strUserPassword
                    , ref alParamsCoupleError // alParamsCoupleError
                                              //// Filter:
                    , objRQ_Mst_Country.Ft_RecordStart // strFt_RecordStart
                    , objRQ_Mst_Country.Ft_RecordCount // strFt_RecordCount
                    , objRQ_Mst_Country.Ft_WhereClause // strFt_WhereClause
                                                       //// Return:
                    , objRQ_Mst_Country.Rt_Cols_Mst_Country // strRt_Cols_Mst_Country
                    );
                #endregion

                #region // GetData:
                if (!CmUtils.CMyDataSet.HasError(mdsResult))
                {
                    ////
                    DataTable dt_MySummaryTable = mdsResult.Tables["MySummaryTable"].Copy();
                    lst_MySummaryTable = TUtils.DataTableCmUtils.ToListof<MySummaryTable>(dt_MySummaryTable);
                    objRT_Mst_Country.MySummaryTable = lst_MySummaryTable[0];

                    ////
                    if (bGet_Mst_Country)
                    {
                        ////
                        DataTable dt_Mst_Country = mdsResult.Tables["Mst_Country"].Copy();
                        lst_Mst_Country = TUtils.DataTableCmUtils.ToListof<Mst_Country>(dt_Mst_Country);
                        objRT_Mst_Country.Lst_Mst_Country = lst_Mst_Country;
                    }
                }
                #endregion

                // Return Good:
                return mdsResult;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsResult
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Write ReturnLog:
                //_cf.ProcessBizReturn(
                //	ref mdsResult // mdsFinal
                //	, strTid // strTid
                //	, strFunctionName // strFunctionName
                //	);
                #endregion
            }
        }

        public DataSet WAS_Mst_Country_Create(
            ref ArrayList alParamsCoupleError
            , RQ_Mst_Country objRQ_Mst_Country
            ////
            , out RT_Mst_Country objRT_Mst_Country
            )
        {
            #region // Temp:
            string strTid = objRQ_Mst_Country.Tid;
            objRT_Mst_Country = new RT_Mst_Country();
            DataSet mdsResult = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            DateTime dtimeSys = DateTime.UtcNow;
            //DataSet mdsExec = null;
            //DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(objRQ_Mst_Country.Tid);
            //int nTidSeq = 0;
            //bool bNeedTransaction = true;
            string strFunctionName = "WAS_Mst_Country_Create";
            string strErrorCodeDefault = TError.ErridnInventory.WAS_Mst_Country_Create;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
                , "Mst_Country", TJson.JsonConvert.SerializeObject(objRQ_Mst_Country.Mst_Country)
				////
				});
            #endregion

            try
            {
                #region // Init:
                #endregion

                #region // Refine and Check Input:
                //List<Mst_Country> lst_Mst_Country = new List<Mst_Country>();
                //List<Mst_CountryInGroup> lst_Mst_CountryInGroup = new List<Mst_CountryInGroup>();
                #endregion

                #region // Mst_Country_Create:
                mdsResult = Mst_Country_Create(
                    objRQ_Mst_Country.Tid // strTid
                    , objRQ_Mst_Country.GwUserCode // strGwUserCode
                    , objRQ_Mst_Country.GwPassword // strGwPassword
                    , objRQ_Mst_Country.WAUserCode // strUserCode
                    , objRQ_Mst_Country.WAUserPassword // strUserPassword
                    , ref alParamsCoupleError // alParamsCoupleError
                                              ////
                    , objRQ_Mst_Country.Mst_Country.CountryCode // objCountryCode
                    , objRQ_Mst_Country.Mst_Country.CountryName // objCountryName
                    );
                #endregion

                // Return Good:
                return mdsResult;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsResult
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Write ReturnLog:
                //_cf.ProcessBizReturn(
                //	ref mdsResult // mdsFinal
                //	, strTid // strTid
                //	, strFunctionName // strFunctionName
                //	);
                #endregion
            }
        }

        public DataSet WAS_Mst_Country_Update(
            ref ArrayList alParamsCoupleError
            , RQ_Mst_Country objRQ_Mst_Country
            ////
            , out RT_Mst_Country objRT_Mst_Country
            )
        {
            #region // Temp:
            string strTid = objRQ_Mst_Country.Tid;
            objRT_Mst_Country = new RT_Mst_Country();
            DataSet mdsResult = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            DateTime dtimeSys = DateTime.UtcNow;
            //DataSet mdsExec = null;
            //DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(objRQ_Mst_Country.Tid);
            //int nTidSeq = 0;
            //bool bNeedTransaction = true;
            string strFunctionName = "WAS_Mst_Country_Update";
            string strErrorCodeDefault = TError.ErridnInventory.WAS_Mst_Country_Update;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
                , "Mst_Country", TJson.JsonConvert.SerializeObject(objRQ_Mst_Country.Mst_Country)
				////
				});
            #endregion

            try
            {
                #region // Init:
                #endregion

                #region // Refine and Check Input:
                //List<Mst_Country> lst_Mst_Country = new List<Mst_Country>();
                //List<Mst_CountryInGroup> lst_Mst_CountryInGroup = new List<Mst_CountryInGroup>();
                #endregion

                #region // Mst_Country_Update:
                mdsResult = Mst_Country_Update(
                    objRQ_Mst_Country.Tid // strTid
                    , objRQ_Mst_Country.GwUserCode // strGwUserCode
                    , objRQ_Mst_Country.GwPassword // strGwPassword
                    , objRQ_Mst_Country.WAUserCode // strUserCode
                    , objRQ_Mst_Country.WAUserPassword // strUserPassword
                    , ref alParamsCoupleError // alParamsCoupleError
                                              ////
                    , objRQ_Mst_Country.Mst_Country.CountryCode // objCountryCode
                    , objRQ_Mst_Country.Mst_Country.CountryName // objCountryName
                    , objRQ_Mst_Country.Mst_Country.FlagActive // objFlagActive
                                                               ////
                    , objRQ_Mst_Country.Ft_Cols_Upd// objFt_Cols_Upd
                    );
                #endregion

                // Return Good:
                return mdsResult;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsResult
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Write ReturnLog:
                //_cf.ProcessBizReturn(
                //	ref mdsResult // mdsFinal
                //	, strTid // strTid
                //	, strFunctionName // strFunctionName
                //	);
                #endregion
            }
        }

        public DataSet WAS_Mst_Country_Delete(
            ref ArrayList alParamsCoupleError
            , RQ_Mst_Country objRQ_Mst_Country
            ////
            , out RT_Mst_Country objRT_Mst_Country
            )
        {
            #region // Temp:
            string strTid = objRQ_Mst_Country.Tid;
            objRT_Mst_Country = new RT_Mst_Country();
            DataSet mdsResult = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            DateTime dtimeSys = DateTime.UtcNow;
            //DataSet mdsExec = null;
            //DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(objRQ_Mst_Country.Tid);
            //int nTidSeq = 0;
            //bool bNeedTransaction = true;
            string strFunctionName = "WAS_Mst_Country_Delete";
            string strErrorCodeDefault = TError.ErridnInventory.WAS_Mst_Country_Delete;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				//, "Mst_Country", TJson.JsonConvert.SerializeObject(objRQ_Mst_Country.Mst_Country)
				////
				});
            #endregion

            try
            {
                #region // Init:
                #endregion

                #region // Refine and Check Input:
                //List<Mst_Country> lst_Mst_Country = new List<Mst_Country>();
                //List<Mst_CountryInGroup> lst_Mst_CountryInGroup = new List<Mst_CountryInGroup>();
                #endregion

                #region // Mst_Country_Delete:
                mdsResult = Mst_Country_Delete(
                    objRQ_Mst_Country.Tid // strTid
                    , objRQ_Mst_Country.GwUserCode // strGwUserCode
                    , objRQ_Mst_Country.GwPassword // strGwPassword
                    , objRQ_Mst_Country.WAUserCode // strUserCode
                    , objRQ_Mst_Country.WAUserPassword // strUserPassword
                    , ref alParamsCoupleError // alParamsCoupleError
                                              ////
                    , objRQ_Mst_Country.Mst_Country.CountryCode // objCountryCode
                    );
                #endregion

                // Return Good:
                return mdsResult;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsResult
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Write ReturnLog:
                //_cf.ProcessBizReturn(
                //	ref mdsResult // mdsFinal
                //	, strTid // strTid
                //	, strFunctionName // strFunctionName
                //	);
                #endregion
            }
        }
        #endregion

        #region // Mst_NNTType:
        private void Mst_NNTType_CheckDB(
            ref ArrayList alParamsCoupleError
            , object objNNTType
            , string strFlagExistToCheck
            , string strFlagActiveListToCheck
            , out DataTable dtDB_Mst_NNTType
            )
        {
            // GetInfo:
            string strSqlExec = CmUtils.StringUtils.Replace(@"
					select top 1
						t.*
					from Mst_NNTType t --//[mylock]
					where (1=1)
						and t.NNTType = @objNNTType
					;
				");
            dtDB_Mst_NNTType = _cf.db.ExecQuery(
                strSqlExec
                , "@objNNTType", objNNTType
                ).Tables[0];
            dtDB_Mst_NNTType.TableName = "Mst_NNTType";

            // strFlagExistToCheck:
            if (strFlagExistToCheck.Length > 0)
            {
                if (CmUtils.StringUtils.StringEqual(strFlagExistToCheck, TConst.Flag.Active) && dtDB_Mst_NNTType.Rows.Count < 1)
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.NNTType", objNNTType
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Mst_NNTType_CheckDB_NNTTypeNotFound
                        , null
                        , alParamsCoupleError.ToArray()
                        );
                }
                if (CmUtils.StringUtils.StringEqual(strFlagExistToCheck, TConst.Flag.Inactive) && dtDB_Mst_NNTType.Rows.Count > 0)
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.NNTType", objNNTType
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Mst_NNTType_CheckDB_NNTTypeExist
                        , null
                        , alParamsCoupleError.ToArray()
                        );
                }
            }

            // strFlagActiveListToCheck:
            if (strFlagActiveListToCheck.Length > 0 && !strFlagActiveListToCheck.Contains(Convert.ToString(dtDB_Mst_NNTType.Rows[0]["FlagActive"])))
            {
                alParamsCoupleError.AddRange(new object[]{
                    "Check.NNTType", objNNTType
                    , "Check.strFlagActiveListToCheck", strFlagActiveListToCheck
                    , "DB.FlagActive", dtDB_Mst_NNTType.Rows[0]["FlagActive"]
                    });
                throw CmUtils.CMyException.Raise(
                    TError.ErridnInventory.Mst_NNTType_CheckDB_FlagActiveNotMatched
                    , null
                    , alParamsCoupleError.ToArray()
                    );
            }
        }

        public DataSet Mst_NNTType_Get(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            //// Filter:
            , string strFt_RecordStart
            , string strFt_RecordCount
            , string strFt_WhereClause
            //// Return:
            , string strRt_Cols_Mst_NNTType
            )
        {
            #region // Temp:
            DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            //int nTidSeq = 0;
            DateTime dtimeSys = DateTime.UtcNow;
            bool bNeedTransaction = true;
            string strFunctionName = "Mst_NNTType_Get";
            string strErrorCodeDefault = TError.ErridnInventory.Mst_NNTType_Get;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				//// Filter
				, "strFt_RecordStart", strFt_RecordStart
                , "strFt_RecordCount", strFt_RecordCount
                , "strFt_WhereClause", strFt_WhereClause
				//// Return
				, "strRt_Cols_Mst_NNTType", strRt_Cols_Mst_NNTType
                });
            #endregion

            try
            {
                #region // Init:
                //_cf.db.LogUserId = _cf.sinf.strUserCode;
                if (bNeedTransaction) _cf.db.BeginTransaction();

                // Write RequestLog:
                _cf.ProcessBizReq_OutSide(
                    strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    , alParamsCoupleError // alParamsCoupleError
                    );
                #endregion

                #region // Check:
                //// Refine:
                long nFilterRecordStart = Convert.ToInt64(strFt_RecordStart);
                long nFilterRecordEnd = nFilterRecordStart + Convert.ToInt64(strFt_RecordCount) - 1;
                bool bGet_Mst_NNTType = (strRt_Cols_Mst_NNTType != null && strRt_Cols_Mst_NNTType.Length > 0);

                //// drAbilityOfUser:
                //DataRow drAbilityOfUser = myCache_ViewAbility_GetUserInfo(strWAUserCode);

                #endregion

                #region // Build Sql:
                ////
                ArrayList alParamsCoupleSql = new ArrayList();
                alParamsCoupleSql.AddRange(new object[] {
                    "@nFilterRecordStart", nFilterRecordStart
                    , "@nFilterRecordEnd", nFilterRecordEnd
                    });
                ////
                //myCache_ViewAbility_GetDealerInfo(drAbilityOfUser);
                ////
                string strSqlGetData = CmUtils.StringUtils.Replace(@"
						---- #tbl_Mst_NNTType_Filter_Draft:
						select distinct
							identity(bigint, 0, 1) MyIdxSeq
							, mtt.NNTType
						into #tbl_Mst_NNTType_Filter_Draft
						from Mst_NNTType mtt --//[mylock]
						where (1=1)
							zzB_Where_strFilter_zzE
						order by mtt.NNTType asc
						;

						---- Summary:
						select Count(0) MyCount from #tbl_Mst_NNTType_Filter_Draft t --//[mylock]
						;

						---- #tbl_Mst_NNTType_Filter:
						select
							t.*
						into #tbl_Mst_NNTType_Filter
						from #tbl_Mst_NNTType_Filter_Draft t --//[mylock]
						where
							(t.MyIdxSeq >= @nFilterRecordStart)
							and (t.MyIdxSeq <= @nFilterRecordEnd)
						;

						-------- Mst_NNTType --------:
						zzB_Select_Mst_NNTType_zzE
						----------------------------------------

						---- Clear for debug:
						--drop table #tbl_Mst_NNTType_Filter_Draft;
						--drop table #tbl_Mst_NNTType_Filter;
					"
                    );
                ////
                string zzB_Select_Mst_NNTType_zzE = "-- Nothing.";
                if (bGet_Mst_NNTType)
                {
                    #region // bGet_Mst_NNTType:
                    zzB_Select_Mst_NNTType_zzE = CmUtils.StringUtils.Replace(@"
							---- Mst_NNTType:
							select
								t.MyIdxSeq
								, mtt.*
							from #tbl_Mst_NNTType_Filter t --//[mylock]
								inner join Mst_NNTType mtt --//[mylock]
									on t.NNTType = mtt.NNTType
							order by t.MyIdxSeq asc
							;
						"
                        );
                    #endregion
                }
                ////
                string zzB_Where_strFilter_zzE = "";
                {
                    Hashtable htSpCols = new Hashtable();
                    {
                        #region // htSpCols:
                        ////
                        TUtils.CUtils.MyBuildHTSupportedColumns(
                            _cf.db // db
                            , ref htSpCols // htSupportedColumns
                            , "Mst_NNTType" // strTableNameDB
                            , "Mst_NNTType." // strPrefixStd
                            , "mtt." // strPrefixAlias
                            );
                        ////
                        #endregion
                    }
                    zzB_Where_strFilter_zzE = CmUtils.SqlUtils.BuildWhere(
                        htSpCols // htSpCols
                        , strFt_WhereClause // strClause
                        , "@p_" // strParamPrefix
                        , ref alParamsCoupleSql // alParamsCoupleSql
                        );
                    zzB_Where_strFilter_zzE = (zzB_Where_strFilter_zzE.Length <= 0 ? "" : string.Format(" and ({0})", zzB_Where_strFilter_zzE));
                    alParamsCoupleError.AddRange(new object[]{
                        "zzB_Where_strFilter_zzE", zzB_Where_strFilter_zzE
                        });
                }
                ////
                strSqlGetData = CmUtils.StringUtils.Replace(
                    strSqlGetData
                    , "zzB_Where_strFilter_zzE", zzB_Where_strFilter_zzE
                    , "zzB_Select_Mst_NNTType_zzE", zzB_Select_Mst_NNTType_zzE
                    );
                #endregion

                #region // Get Data:
                DataSet dsGetData = _cf.db.ExecQuery(
                    strSqlGetData
                    , alParamsCoupleSql.ToArray()
                    );
                int nIdxTable = 0;
                dsGetData.Tables[nIdxTable++].TableName = "MySummaryTable";
                if (bGet_Mst_NNTType)
                {
                    dsGetData.Tables[nIdxTable++].TableName = "Mst_NNTType";
                }
                CmUtils.DataUtils.MoveDataTable(ref mdsFinal, ref dsGetData);
                #endregion

                // Return Good:
                TDALUtils.DBUtils.RollbackSafety(_cf.db); // Always Rollback.
                mdsFinal.AcceptChanges();
                return mdsFinal;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Rollback:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);

                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsFinal
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Rollback and Release resources:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);
                TDALUtils.DBUtils.ReleaseAllSemaphore(_cf.db_Sys, true);

                // Write ReturnLog:
                _cf.ProcessBizReturn_OutSide(
                    ref mdsFinal // mdsFinal
                    , strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    );
                #endregion
            }
        }
        public DataSet Mst_NNTType_Create(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            ////
            , object objNNTType
            , object objNNTTypeName
            )
        {
            #region // Temp:
            DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            //int nTidSeq = 0;
            DateTime dtimeSys = DateTime.UtcNow;
            string strFunctionName = "Mst_NNTType_Create";
            string strErrorCodeDefault = TError.ErridnInventory.Mst_NNTType_Create;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
                ////
				, "objNNTType", objNNTType
                , "objNNTTypeName", objNNTTypeName
                });
            #endregion

            try
            {
                #region // Convert Input:
                #endregion

                #region // Init:
                //_cf.db.LogUserId = _cf.sinf.strUserCode;
                _cf.db.BeginTransaction();

                // Write RequestLog:
                _cf.ProcessBizReq_OutSide(
                    strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    , alParamsCoupleError // alParamsCoupleError
                    );

                // Sys_User_CheckAuthentication:
                //Sys_User_CheckAuthentication(
                //    ref alParamsCoupleError
                //    , strWAUserCode
                //    , strWAUserPassword
                //    );

                // Check Access/Deny:
                Sys_Access_CheckDenyV30(
                    ref alParamsCoupleError
                    , strWAUserCode
                    , strFunctionName
                    );
                #endregion

                #region // Refine and Check Input:
                ////
                string strNNTType = TUtils.CUtils.StdParam(objNNTType);
                string strNNTTypeName = string.Format("{0}", objNNTTypeName).Trim();

                // drAbilityOfUser:
                //DataRow drAbilityOfUser = Sys_User_GetAbilityViewOfUser(strWAUserCode);
                ////
                DataTable dtDB_Mst_NNTType = null;
                {
                    ////
                    if (strNNTType == null || strNNTType.Length < 1)
                    {
                        alParamsCoupleError.AddRange(new object[]{
                            "Check.strNNTType", strNNTType
                            });
                        throw CmUtils.CMyException.Raise(
                            TError.ErridnInventory.Mst_NNTType_Create_InvalidNNTType
                            , null
                            , alParamsCoupleError.ToArray()
                            );
                    }
                    Mst_NNTType_CheckDB(
                        ref alParamsCoupleError // alParamsCoupleError
                        , strNNTType // objNNTType
                        , TConst.Flag.No // strFlagExistToCheck
                        , "" // strFlagActiveListToCheck
                        , out dtDB_Mst_NNTType // dtDB_Mst_NNTType
                        );
                    ////
                    if (strNNTTypeName.Length < 1)
                    {
                        alParamsCoupleError.AddRange(new object[]{
                            "Check.strNNTTypeName", strNNTTypeName
                            });
                        throw CmUtils.CMyException.Raise(
                            TError.ErridnInventory.Mst_NNTType_Create_InvalidNNTTypeName
                            , null
                            , alParamsCoupleError.ToArray()
                            );
                    }
                }
                #endregion

                #region // SaveDB Mst_NNTType:
                {
                    // Init:
                    //ArrayList alColumnEffective = new ArrayList();
                    string strFN = "";
                    DataRow drDB = dtDB_Mst_NNTType.NewRow();
                    strFN = "NNTType"; drDB[strFN] = strNNTType;
                    strFN = "NetworkID"; drDB[strFN] = nNetworkID;
                    strFN = "NNTTypeName"; drDB[strFN] = strNNTTypeName;
                    strFN = "FlagActive"; drDB[strFN] = TConst.Flag.Active;
                    strFN = "LogLUDTimeUTC"; drDB[strFN] = dtimeSys.ToString("yyyy-MM-dd HH:mm:ss");
                    strFN = "LogLUBy"; drDB[strFN] = strWAUserCode;
                    dtDB_Mst_NNTType.Rows.Add(drDB);

                    // Save:
                    _cf.db.SaveData(
                        "Mst_NNTType"
                        , dtDB_Mst_NNTType
                        //, alColumnEffective.ToArray()
                        );
                }
                #endregion

                // Return Good:
                TDALUtils.DBUtils.CommitSafety(_cf.db);
                mdsFinal.AcceptChanges();
                return mdsFinal;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Rollback:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);

                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsFinal
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Rollback and Release resources:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);
                TDALUtils.DBUtils.ReleaseAllSemaphore(_cf.db_Sys, true);

                // Write ReturnLog:
                _cf.ProcessBizReturn_OutSide(
                    ref mdsFinal // mdsFinal
                    , strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    );
                #endregion
            }
        }
        public DataSet Mst_NNTType_Update(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            ////
            , object objNNTType
            , object objNNTTypeName
            , object objFlagActive
            ////
            , object objFt_Cols_Upd
            )
        {
            #region // Temp:
            DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            //int nTidSeq = 0;
            DateTime dtimeSys = DateTime.UtcNow;
            string strFunctionName = "Mst_NNTType_Update";
            string strErrorCodeDefault = TError.ErridnInventory.Mst_NNTType_Update;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
				, "objNNTType", objNNTType
                , "objNNTTypeName", objNNTTypeName
                , "objFlagActive", objFlagActive
				////
				, "objFt_Cols_Upd", objFt_Cols_Upd
                });
            #endregion

            try
            {
                #region // Convert Input:
                #endregion

                #region // Init:
                //_cf.db.LogUserId = _cf.sinf.strUserCode;
                _cf.db.BeginTransaction();

                // Write RequestLog:
                _cf.ProcessBizReq_OutSide(
                    strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    , alParamsCoupleError // alParamsCoupleError
                    );

                // Sys_User_CheckAuthentication:
                //Sys_User_CheckAuthentication(
                //    ref alParamsCoupleError
                //    , strWAUserCode
                //    , strWAUserPassword
                //    );

                // Check Access/Deny:
                Sys_Access_CheckDenyV30(
                    ref alParamsCoupleError
                    , strWAUserCode
                    , strFunctionName
                    );
                #endregion

                #region // Refine and Check Input:
                ////
                string strFt_Cols_Upd = TUtils.CUtils.StdParam(objFt_Cols_Upd);
                strFt_Cols_Upd = (strFt_Cols_Upd == null ? "" : strFt_Cols_Upd);
                ////
                string strNNTType = TUtils.CUtils.StdParam(objNNTType);
                string strNNTTypeName = string.Format("{0}", objNNTTypeName).Trim();
                string strFlagActive = TUtils.CUtils.StdFlag(objFlagActive);
                ////
                bool bUpd_NNTTypeName = strFt_Cols_Upd.Contains("Mst_NNTType.NNTTypeName".ToUpper());
                bool bUpd_FlagActive = strFt_Cols_Upd.Contains("Mst_NNTType.FlagActive".ToUpper());

                ////
                DataTable dtDB_Mst_NNTType = null;
                {
                    ////
                    Mst_NNTType_CheckDB(
                         ref alParamsCoupleError // alParamsCoupleError
                         , strNNTType // objNNTType 
                         , TConst.Flag.Yes // strFlagExistToCheck
                         , "" // strFlagActiveListToCheck
                         , out dtDB_Mst_NNTType // dtDB_Mst_NNTType
                        );
                    ////
                    if (bUpd_NNTTypeName && string.IsNullOrEmpty(strNNTTypeName))
                    {
                        alParamsCoupleError.AddRange(new object[]{
                            "Check.strNNTTypeName", strNNTTypeName
                            });
                        throw CmUtils.CMyException.Raise(
                            TError.ErridnInventory.Mst_NNTType_Update_InvalidNNTTypeName
                            , null
                            , alParamsCoupleError.ToArray()
                            );
                    }
                    ////
                }
                #endregion

                #region // SaveDB Mst_NNTType:
                {
                    // Init:
                    ArrayList alColumnEffective = new ArrayList();
                    string strFN = "";
                    DataRow drDB = dtDB_Mst_NNTType.Rows[0];
                    if (bUpd_NNTTypeName) { strFN = "NNTTypeName"; drDB[strFN] = strNNTTypeName; alColumnEffective.Add(strFN); }
                    if (bUpd_FlagActive) { strFN = "FlagActive"; drDB[strFN] = strFlagActive; alColumnEffective.Add(strFN); }
                    strFN = "LogLUDTimeUTC"; drDB[strFN] = dtimeSys.ToString("yyyy-MM-dd HH:mm:ss"); alColumnEffective.Add(strFN);
                    strFN = "LogLUBy"; drDB[strFN] = strWAUserCode; alColumnEffective.Add(strFN);

                    // Save:
                    _cf.db.SaveData(
                        "Mst_NNTType"
                        , dtDB_Mst_NNTType
                        , alColumnEffective.ToArray()
                        );
                }
                #endregion

                // Return Good:
                TDALUtils.DBUtils.CommitSafety(_cf.db);
                mdsFinal.AcceptChanges();
                return mdsFinal;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Rollback:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);

                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsFinal
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Rollback and Release resources:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);
                TDALUtils.DBUtils.ReleaseAllSemaphore(_cf.db_Sys, true);

                // Write ReturnLog:
                _cf.ProcessBizReturn_OutSide(
                    ref mdsFinal // mdsFinal
                    , strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    );
                #endregion
            }
        }
        public DataSet Mst_NNTType_Delete(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            /////
            , object objNNTType
            )
        {
            #region // Temp:
            DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            //int nTidSeq = 0;
            DateTime dtimeSys = DateTime.UtcNow;
            string strFunctionName = "Mst_NNTType_Delete";
            string strErrorCodeDefault = TError.ErridnInventory.Mst_NNTType_Delete;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
				, "objNNTType", objNNTType
                });
            #endregion

            try
            {
                #region // Init:
                //_cf.db.LogUserId = _cf.sinf.strUserCode;
                _cf.db.BeginTransaction();

                // Write RequestLog:
                _cf.ProcessBizReq_OutSide(
                    strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    , alParamsCoupleError // alParamsCoupleError
                    );

                // Sys_User_CheckAuthentication:
                //Sys_User_CheckAuthentication(
                //    ref alParamsCoupleError
                //    , strWAUserCode
                //    , strWAUserPassword
                //    );

                // Check Access/Deny:
                Sys_Access_CheckDenyV30(
                    ref alParamsCoupleError
                    , strWAUserCode
                    , strFunctionName
                    );
                #endregion

                #region // Refine and Check Input:
                ////
                string strNNTType = TUtils.CUtils.StdParam(objNNTType);
                ////
                DataTable dtDB_Mst_NNTType = null;
                {
                    ////
                    Mst_NNTType_CheckDB(
                         ref alParamsCoupleError // alParamsCoupleError
                         , objNNTType // objNNTType
                         , TConst.Flag.Yes // strFlagExistToCheck
                         , "" // strFlagActiveListToCheck
                         , out dtDB_Mst_NNTType // dtDB_Mst_NNTType
                        );
                    ////
                }
                #endregion

                #region // SaveDB Mst_NNTType:
                {
                    // Init:
                    dtDB_Mst_NNTType.Rows[0].Delete();

                    // Save:
                    _cf.db.SaveData(
                        "Mst_NNTType"
                        , dtDB_Mst_NNTType
                        );
                }
                #endregion

                // Return Good:
                TDALUtils.DBUtils.CommitSafety(_cf.db);
                mdsFinal.AcceptChanges();
                return mdsFinal;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Rollback:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);

                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsFinal
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Rollback and Release resources:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);
                TDALUtils.DBUtils.ReleaseAllSemaphore(_cf.db_Sys, true);

                // Write ReturnLog:
                _cf.ProcessBizReturn_OutSide(
                    ref mdsFinal // mdsFinal
                    , strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    );
                #endregion
            }
        }

        public DataSet WAS_Mst_NNTType_Get(
            ref ArrayList alParamsCoupleError
            , RQ_Mst_NNTType objRQ_Mst_NNTType
            ////
            , out RT_Mst_NNTType objRT_Mst_NNTType
            )
        {
            #region // Temp:
            string strTid = objRQ_Mst_NNTType.Tid;
            objRT_Mst_NNTType = new RT_Mst_NNTType();
            DataSet mdsResult = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            DateTime dtimeSys = DateTime.UtcNow;
            //DataSet mdsExec = null;
            //DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(objRQ_Mst_NNTType.Tid);
            //int nTidSeq = 0;
            //bool bNeedTransaction = true;
            string strFunctionName = "WAS_Mst_NNTType_Get";
            string strErrorCodeDefault = TError.ErridnInventory.WAS_Mst_NNTType_Get;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
				});
            #endregion

            try
            {
                #region // Init:
                // Sys_User_CheckAuthentication:
                //Sys_User_CheckAuthentication(
                //    ref alParamsCoupleError
                //    , objRQ_Mst_NNTType.WAUserCode
                //    , objRQ_Mst_NNTType.WAUserPassword
                //    );
                #endregion

                #region // Refine and Check Input:
                List<MySummaryTable> lst_MySummaryTable = new List<MySummaryTable>();

                List<Mst_NNTType> lst_Mst_NNTType = new List<Mst_NNTType>();
                bool bGet_Mst_NNTType = (objRQ_Mst_NNTType.Rt_Cols_Mst_NNTType != null && objRQ_Mst_NNTType.Rt_Cols_Mst_NNTType.Length > 0);
                #endregion

                #region // WS_Mst_NNTType_Get:
                mdsResult = Mst_NNTType_Get(
                    objRQ_Mst_NNTType.Tid // strTid
                    , objRQ_Mst_NNTType.GwUserCode // strGwUserCode
                    , objRQ_Mst_NNTType.GwPassword // strGwPassword
                    , objRQ_Mst_NNTType.WAUserCode // strUserCode
                    , objRQ_Mst_NNTType.WAUserPassword // strUserPassword
                    , ref alParamsCoupleError // alParamsCoupleError
                                              //// Filter:
                    , objRQ_Mst_NNTType.Ft_RecordStart // strFt_RecordStart
                    , objRQ_Mst_NNTType.Ft_RecordCount // strFt_RecordCount
                    , objRQ_Mst_NNTType.Ft_WhereClause // strFt_WhereClause
                                                       //// Return:
                    , objRQ_Mst_NNTType.Rt_Cols_Mst_NNTType // strRt_Cols_Mst_NNTType
                    );
                #endregion

                #region // GetData:
                if (!CmUtils.CMyDataSet.HasError(mdsResult))
                {
                    ////
                    DataTable dt_MySummaryTable = mdsResult.Tables["MySummaryTable"].Copy();
                    lst_MySummaryTable = TUtils.DataTableCmUtils.ToListof<MySummaryTable>(dt_MySummaryTable);
                    objRT_Mst_NNTType.MySummaryTable = lst_MySummaryTable[0];

                    ////
                    if (bGet_Mst_NNTType)
                    {
                        ////
                        DataTable dt_Mst_NNTType = mdsResult.Tables["Mst_NNTType"].Copy();
                        lst_Mst_NNTType = TUtils.DataTableCmUtils.ToListof<Mst_NNTType>(dt_Mst_NNTType);
                        objRT_Mst_NNTType.Lst_Mst_NNTType = lst_Mst_NNTType;
                    }
                }
                #endregion

                // Return Good:
                return mdsResult;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsResult
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Write ReturnLog:
                //_cf.ProcessBizReturn(
                //	ref mdsResult // mdsFinal
                //	, strTid // strTid
                //	, strFunctionName // strFunctionName
                //	);
                #endregion
            }
        }

        public DataSet WAS_RptSv_Mst_NNTType_Get(
            ref ArrayList alParamsCoupleError
            , RQ_Mst_NNTType objRQ_Mst_NNTType
            ////
            , out RT_Mst_NNTType objRT_Mst_NNTType
            )
        {
            #region // Temp:
            string strTid = objRQ_Mst_NNTType.Tid;
            objRT_Mst_NNTType = new RT_Mst_NNTType();
            DataSet mdsResult = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            DateTime dtimeSys = DateTime.UtcNow;
            //DataSet mdsExec = null;
            //DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(objRQ_Mst_NNTType.Tid);
            //int nTidSeq = 0;
            //bool bNeedTransaction = true;
            string strFunctionName = "WAS_RptSv_Mst_NNTType_Get";
            string strErrorCodeDefault = TError.ErridnInventory.WAS_RptSv_Mst_NNTType_Get;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
				});
            #endregion

            try
            {
                #region // Init:
                // Sys_User_CheckAuthentication:
                //RptSv_Sys_User_CheckAuthentication(
                //    ref alParamsCoupleError
                //    , objRQ_Mst_NNTType.WAUserCode
                //    , objRQ_Mst_NNTType.WAUserPassword
                //    );
                #endregion

                #region // Refine and Check Input:
                List<MySummaryTable> lst_MySummaryTable = new List<MySummaryTable>();

                List<Mst_NNTType> lst_Mst_NNTType = new List<Mst_NNTType>();
                bool bGet_Mst_NNTType = (objRQ_Mst_NNTType.Rt_Cols_Mst_NNTType != null && objRQ_Mst_NNTType.Rt_Cols_Mst_NNTType.Length > 0);
                #endregion

                #region // WS_Mst_NNTType_Get:
                mdsResult = Mst_NNTType_Get(
                    objRQ_Mst_NNTType.Tid // strTid
                    , objRQ_Mst_NNTType.GwUserCode // strGwUserCode
                    , objRQ_Mst_NNTType.GwPassword // strGwPassword
                    , objRQ_Mst_NNTType.WAUserCode // strUserCode
                    , objRQ_Mst_NNTType.WAUserPassword // strUserPassword
                    , ref alParamsCoupleError // alParamsCoupleError
                                              //// Filter:
                    , objRQ_Mst_NNTType.Ft_RecordStart // strFt_RecordStart
                    , objRQ_Mst_NNTType.Ft_RecordCount // strFt_RecordCount
                    , objRQ_Mst_NNTType.Ft_WhereClause // strFt_WhereClause
                                                       //// Return:
                    , objRQ_Mst_NNTType.Rt_Cols_Mst_NNTType // strRt_Cols_Mst_NNTType
                    );
                #endregion

                #region // GetData:
                if (!CmUtils.CMyDataSet.HasError(mdsResult))
                {
                    ////
                    DataTable dt_MySummaryTable = mdsResult.Tables["MySummaryTable"].Copy();
                    lst_MySummaryTable = TUtils.DataTableCmUtils.ToListof<MySummaryTable>(dt_MySummaryTable);
                    objRT_Mst_NNTType.MySummaryTable = lst_MySummaryTable[0];

                    ////
                    if (bGet_Mst_NNTType)
                    {
                        ////
                        DataTable dt_Mst_NNTType = mdsResult.Tables["Mst_NNTType"].Copy();
                        lst_Mst_NNTType = TUtils.DataTableCmUtils.ToListof<Mst_NNTType>(dt_Mst_NNTType);
                        objRT_Mst_NNTType.Lst_Mst_NNTType = lst_Mst_NNTType;
                    }
                }
                #endregion

                // Return Good:
                return mdsResult;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsResult
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Write ReturnLog:
                //_cf.ProcessBizReturn(
                //	ref mdsResult // mdsFinal
                //	, strTid // strTid
                //	, strFunctionName // strFunctionName
                //	);
                #endregion
            }
        }

        public DataSet WAS_Mst_NNTType_Create(
            ref ArrayList alParamsCoupleError
            , RQ_Mst_NNTType objRQ_Mst_NNTType
            ////
            , out RT_Mst_NNTType objRT_Mst_NNTType
            )
        {
            #region // Temp:
            string strTid = objRQ_Mst_NNTType.Tid;
            objRT_Mst_NNTType = new RT_Mst_NNTType();
            DataSet mdsResult = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            DateTime dtimeSys = DateTime.UtcNow;
            //DataSet mdsExec = null;
            //DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(objRQ_Mst_NNTType.Tid);
            //int nTidSeq = 0;
            //bool bNeedTransaction = true;
            string strFunctionName = "WAS_Mst_NNTType_Create";
            string strErrorCodeDefault = TError.ErridnInventory.WAS_Mst_NNTType_Create;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
                , "Mst_NNTType", TJson.JsonConvert.SerializeObject(objRQ_Mst_NNTType.Mst_NNTType)
				////
				});
            #endregion

            try
            {
                #region // Init:
                #endregion

                #region // Refine and Check Input:
                //List<Mst_NNTType> lst_Mst_NNTType = new List<Mst_NNTType>();
                //List<Mst_NNTTypeInGroup> lst_Mst_NNTTypeInGroup = new List<Mst_NNTTypeInGroup>();
                #endregion

                #region // Mst_NNTType_Create:
                mdsResult = Mst_NNTType_Create(
                    objRQ_Mst_NNTType.Tid // strTid
                    , objRQ_Mst_NNTType.GwUserCode // strGwUserCode
                    , objRQ_Mst_NNTType.GwPassword // strGwPassword
                    , objRQ_Mst_NNTType.WAUserCode // strUserCode
                    , objRQ_Mst_NNTType.WAUserPassword // strUserPassword
                    , ref alParamsCoupleError // alParamsCoupleError
                                              ////
                    , objRQ_Mst_NNTType.Mst_NNTType.NNTType // objNNTType
                    , objRQ_Mst_NNTType.Mst_NNTType.NNTTypeName // objNNTTypeName
                    );
                #endregion

                // Return Good:
                return mdsResult;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsResult
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Write ReturnLog:
                //_cf.ProcessBizReturn(
                //	ref mdsResult // mdsFinal
                //	, strTid // strTid
                //	, strFunctionName // strFunctionName
                //	);
                #endregion
            }
        }

        public DataSet WAS_Mst_NNTType_Update(
            ref ArrayList alParamsCoupleError
            , RQ_Mst_NNTType objRQ_Mst_NNTType
            ////
            , out RT_Mst_NNTType objRT_Mst_NNTType
            )
        {
            #region // Temp:
            string strTid = objRQ_Mst_NNTType.Tid;
            objRT_Mst_NNTType = new RT_Mst_NNTType();
            DataSet mdsResult = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            DateTime dtimeSys = DateTime.UtcNow;
            //DataSet mdsExec = null;
            //DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(objRQ_Mst_NNTType.Tid);
            //int nTidSeq = 0;
            //bool bNeedTransaction = true;
            string strFunctionName = "WAS_Mst_NNTType_Update";
            string strErrorCodeDefault = TError.ErridnInventory.WAS_Mst_NNTType_Update;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
                , "Mst_NNTType", TJson.JsonConvert.SerializeObject(objRQ_Mst_NNTType.Mst_NNTType)
				////
				});
            #endregion

            try
            {
                #region // Init:
                #endregion

                #region // Refine and Check Input:
                //List<Mst_NNTType> lst_Mst_NNTType = new List<Mst_NNTType>();
                //List<Mst_NNTTypeInGroup> lst_Mst_NNTTypeInGroup = new List<Mst_NNTTypeInGroup>();
                #endregion

                #region // Mst_NNTType_Update:
                mdsResult = Mst_NNTType_Update(
                    objRQ_Mst_NNTType.Tid // strTid
                    , objRQ_Mst_NNTType.GwUserCode // strGwUserCode
                    , objRQ_Mst_NNTType.GwPassword // strGwPassword
                    , objRQ_Mst_NNTType.WAUserCode // strUserCode
                    , objRQ_Mst_NNTType.WAUserPassword // strUserPassword
                    , ref alParamsCoupleError // alParamsCoupleError
                                              ////
                    , objRQ_Mst_NNTType.Mst_NNTType.NNTType // objNNTType
                    , objRQ_Mst_NNTType.Mst_NNTType.NNTTypeName // objNNTTypeName
                    , objRQ_Mst_NNTType.Mst_NNTType.FlagActive // objFlagActive
                                                               ////
                    , objRQ_Mst_NNTType.Ft_Cols_Upd// objFt_Cols_Upd
                    );
                #endregion

                // Return Good:
                return mdsResult;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsResult
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Write ReturnLog:
                //_cf.ProcessBizReturn(
                //	ref mdsResult // mdsFinal
                //	, strTid // strTid
                //	, strFunctionName // strFunctionName
                //	);
                #endregion
            }
        }

        public DataSet WAS_Mst_NNTType_Delete(
            ref ArrayList alParamsCoupleError
            , RQ_Mst_NNTType objRQ_Mst_NNTType
            ////
            , out RT_Mst_NNTType objRT_Mst_NNTType
            )
        {
            #region // Temp:
            string strTid = objRQ_Mst_NNTType.Tid;
            objRT_Mst_NNTType = new RT_Mst_NNTType();
            DataSet mdsResult = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            DateTime dtimeSys = DateTime.UtcNow;
            //DataSet mdsExec = null;
            //DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(objRQ_Mst_NNTType.Tid);
            //int nTidSeq = 0;
            //bool bNeedTransaction = true;
            string strFunctionName = "WAS_Mst_NNTType_Delete";
            string strErrorCodeDefault = TError.ErridnInventory.WAS_Mst_NNTType_Delete;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				//, "Mst_NNTType", TJson.JsonConvert.SerializeObject(objRQ_Mst_NNTType.Mst_NNTType)
				////
				});
            #endregion

            try
            {
                #region // Init:
                #endregion

                #region // Refine and Check Input:
                //List<Mst_NNTType> lst_Mst_NNTType = new List<Mst_NNTType>();
                //List<Mst_NNTTypeInGroup> lst_Mst_NNTTypeInGroup = new List<Mst_NNTTypeInGroup>();
                #endregion

                #region // Mst_NNTType_Delete:
                mdsResult = Mst_NNTType_Delete(
                    objRQ_Mst_NNTType.Tid // strTid
                    , objRQ_Mst_NNTType.GwUserCode // strGwUserCode
                    , objRQ_Mst_NNTType.GwPassword // strGwPassword
                    , objRQ_Mst_NNTType.WAUserCode // strUserCode
                    , objRQ_Mst_NNTType.WAUserPassword // strUserPassword
                    , ref alParamsCoupleError // alParamsCoupleError
                                              ////
                    , objRQ_Mst_NNTType.Mst_NNTType.NNTType // objNNTType
                    );
                #endregion

                // Return Good:
                return mdsResult;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsResult
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Write ReturnLog:
                //_cf.ProcessBizReturn(
                //	ref mdsResult // mdsFinal
                //	, strTid // strTid
                //	, strFunctionName // strFunctionName
                //	);
                #endregion
            }
        }
        #endregion

        #region // Mst_CustomerNNTType:
        private void Mst_CustomerNNTType_CheckDB(
            ref ArrayList alParamsCoupleError
            , object objCustomerNNTType
            , string strFlagExistToCheck
            , string strFlagActiveListToCheck
            , out DataTable dtDB_Mst_CustomerNNTType
            )
        {
            // GetInfo:
            string strSqlExec = CmUtils.StringUtils.Replace(@"
					select top 1
						t.*
					from Mst_CustomerNNTType t --//[mylock]
					where (1=1)
						and t.CustomerNNTType = @objCustomerNNTType
					;
				");
            dtDB_Mst_CustomerNNTType = _cf.db.ExecQuery(
                strSqlExec
                , "@objCustomerNNTType", objCustomerNNTType
                ).Tables[0];
            dtDB_Mst_CustomerNNTType.TableName = "Mst_CustomerNNTType";

            // strFlagExistToCheck:
            if (strFlagExistToCheck.Length > 0)
            {
                if (CmUtils.StringUtils.StringEqual(strFlagExistToCheck, TConst.Flag.Active) && dtDB_Mst_CustomerNNTType.Rows.Count < 1)
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.CustomerNNTType", objCustomerNNTType
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Mst_CustomerNNTType_CheckDB_CustomerNNTTypeNotFound
                        , null
                        , alParamsCoupleError.ToArray()
                        );
                }
                if (CmUtils.StringUtils.StringEqual(strFlagExistToCheck, TConst.Flag.Inactive) && dtDB_Mst_CustomerNNTType.Rows.Count > 0)
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.CustomerNNTType", objCustomerNNTType
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Mst_CustomerNNTType_CheckDB_CustomerNNTTypeExist
                        , null
                        , alParamsCoupleError.ToArray()
                        );
                }
            }

            // strFlagActiveListToCheck:
            if (strFlagActiveListToCheck.Length > 0 && !strFlagActiveListToCheck.Contains(Convert.ToString(dtDB_Mst_CustomerNNTType.Rows[0]["FlagActive"])))
            {
                alParamsCoupleError.AddRange(new object[]{
                    "Check.CustomerNNTType", objCustomerNNTType
                    , "Check.strFlagActiveListToCheck", strFlagActiveListToCheck
                    , "DB.FlagActive", dtDB_Mst_CustomerNNTType.Rows[0]["FlagActive"]
                    });
                throw CmUtils.CMyException.Raise(
                    TError.ErridnInventory.Mst_CustomerNNTType_CheckDB_FlagActiveNotMatched
                    , null
                    , alParamsCoupleError.ToArray()
                    );
            }
        }

        public DataSet Mst_CustomerNNTType_Get(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            //// Filter:
            , string strFt_RecordStart
            , string strFt_RecordCount
            , string strFt_WhereClause
            //// Return:
            , string strRt_Cols_Mst_CustomerNNTType
            )
        {
            #region // Temp:
            DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            //int nTidSeq = 0;
            DateTime dtimeSys = DateTime.UtcNow;
            bool bNeedTransaction = true;
            string strFunctionName = "Mst_CustomerNNTType_Get";
            string strErrorCodeDefault = TError.ErridnInventory.Mst_CustomerNNTType_Get;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				//// Filter
				, "strFt_RecordStart", strFt_RecordStart
                , "strFt_RecordCount", strFt_RecordCount
                , "strFt_WhereClause", strFt_WhereClause
				//// Return
				, "strRt_Cols_Mst_CustomerNNTType", strRt_Cols_Mst_CustomerNNTType
                });
            #endregion

            try
            {
                #region // Init:
                //_cf.db.LogUserId = _cf.sinf.strUserCode;
                if (bNeedTransaction) _cf.db.BeginTransaction();

                // Write RequestLog:
                _cf.ProcessBizReq_OutSide(
                    strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    , alParamsCoupleError // alParamsCoupleError
                    );

                // Sys_User_CheckAuthentication:
                //Sys_User_CheckAuthentication(
                //    ref alParamsCoupleError
                //    , strWAUserCode
                //    , strWAUserPassword
                //    );

                // Check Access/Deny:
                Sys_Access_CheckDenyV30(
                    ref alParamsCoupleError
                    , strWAUserCode
                    , strFunctionName
                    );
                #endregion

                #region // Check:
                //// Refine:
                long nFilterRecordStart = Convert.ToInt64(strFt_RecordStart);
                long nFilterRecordEnd = nFilterRecordStart + Convert.ToInt64(strFt_RecordCount) - 1;
                bool bGet_Mst_CustomerNNTType = (strRt_Cols_Mst_CustomerNNTType != null && strRt_Cols_Mst_CustomerNNTType.Length > 0);

                //// drAbilityOfUser:
                //DataRow drAbilityOfUser = myCache_ViewAbility_GetUserInfo(strWAUserCode);

                #endregion

                #region // Build Sql:
                ////
                ArrayList alParamsCoupleSql = new ArrayList();
                alParamsCoupleSql.AddRange(new object[] {
                    "@nFilterRecordStart", nFilterRecordStart
                    , "@nFilterRecordEnd", nFilterRecordEnd
                    });
                ////
                //myCache_ViewAbility_GetDealerInfo(drAbilityOfUser);
                ////
                string strSqlGetData = CmUtils.StringUtils.Replace(@"
						---- #tbl_Mst_CustomerNNTType_Filter_Draft:
						select distinct
							identity(bigint, 0, 1) MyIdxSeq
							, mcnntp.CustomerNNTType
						into #tbl_Mst_CustomerNNTType_Filter_Draft
						from Mst_CustomerNNTType mcnntp --//[mylock]
						where (1=1)
							zzB_Where_strFilter_zzE
						order by mcnntp.CustomerNNTType asc
						;

						---- Summary:
						select Count(0) MyCount from #tbl_Mst_CustomerNNTType_Filter_Draft t --//[mylock]
						;

						---- #tbl_Mst_CustomerNNTType_Filter:
						select
							t.*
						into #tbl_Mst_CustomerNNTType_Filter
						from #tbl_Mst_CustomerNNTType_Filter_Draft t --//[mylock]
						where
							(t.MyIdxSeq >= @nFilterRecordStart)
							and (t.MyIdxSeq <= @nFilterRecordEnd)
						;

						-------- Mst_CustomerNNTType --------:
						zzB_Select_Mst_CustomerNNTType_zzE
						----------------------------------------

						---- Clear for debug:
						--drop table #tbl_Mst_CustomerNNTType_Filter_Draft;
						--drop table #tbl_Mst_CustomerNNTType_Filter;
					"
                    );
                ////
                string zzB_Select_Mst_CustomerNNTType_zzE = "-- Nothing.";
                if (bGet_Mst_CustomerNNTType)
                {
                    #region // bGet_Mst_CustomerNNTType:
                    zzB_Select_Mst_CustomerNNTType_zzE = CmUtils.StringUtils.Replace(@"
							---- Mst_CustomerNNTType:
							select
								t.MyIdxSeq
								, mcnntp.*
							from #tbl_Mst_CustomerNNTType_Filter t --//[mylock]
								inner join Mst_CustomerNNTType mcnntp --//[mylock]
									on t.CustomerNNTType = mcnntp.CustomerNNTType
							order by t.MyIdxSeq asc
							;
						"
                        );
                    #endregion
                }
                ////
                string zzB_Where_strFilter_zzE = "";
                {
                    Hashtable htSpCols = new Hashtable();
                    {
                        #region // htSpCols:
                        ////
                        TUtils.CUtils.MyBuildHTSupportedColumns(
                            _cf.db // db
                            , ref htSpCols // htSupportedColumns
                            , "Mst_CustomerNNTType" // strTableNameDB
                            , "Mst_CustomerNNTType." // strPrefixStd
                            , "mcnntp." // strPrefixAlias
                            );
                        ////
                        #endregion
                    }
                    zzB_Where_strFilter_zzE = CmUtils.SqlUtils.BuildWhere(
                        htSpCols // htSpCols
                        , strFt_WhereClause // strClause
                        , "@p_" // strParamPrefix
                        , ref alParamsCoupleSql // alParamsCoupleSql
                        );
                    zzB_Where_strFilter_zzE = (zzB_Where_strFilter_zzE.Length <= 0 ? "" : string.Format(" and ({0})", zzB_Where_strFilter_zzE));
                    alParamsCoupleError.AddRange(new object[]{
                        "zzB_Where_strFilter_zzE", zzB_Where_strFilter_zzE
                        });
                }
                ////
                strSqlGetData = CmUtils.StringUtils.Replace(
                    strSqlGetData
                    , "zzB_Where_strFilter_zzE", zzB_Where_strFilter_zzE
                    , "zzB_Select_Mst_CustomerNNTType_zzE", zzB_Select_Mst_CustomerNNTType_zzE
                    );
                #endregion

                #region // Get Data:
                DataSet dsGetData = _cf.db.ExecQuery(
                    strSqlGetData
                    , alParamsCoupleSql.ToArray()
                    );
                int nIdxTable = 0;
                dsGetData.Tables[nIdxTable++].TableName = "MySummaryTable";
                if (bGet_Mst_CustomerNNTType)
                {
                    dsGetData.Tables[nIdxTable++].TableName = "Mst_CustomerNNTType";
                }
                CmUtils.DataUtils.MoveDataTable(ref mdsFinal, ref dsGetData);
                #endregion

                // Return Good:
                TDALUtils.DBUtils.RollbackSafety(_cf.db); // Always Rollback.
                mdsFinal.AcceptChanges();
                return mdsFinal;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Rollback:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);

                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsFinal
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Rollback and Release resources:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);
                TDALUtils.DBUtils.ReleaseAllSemaphore(_cf.db_Sys, true);

                // Write ReturnLog:
                _cf.ProcessBizReturn_OutSide(
                    ref mdsFinal // mdsFinal
                    , strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    );
                #endregion
            }
        }
        public DataSet Mst_CustomerNNTType_Create(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            ////
            , object objCustomerNNTType
            , object objCustomerNNTTypeName
            )
        {
            #region // Temp:
            DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            //int nTidSeq = 0;
            DateTime dtimeSys = DateTime.UtcNow;
            string strFunctionName = "Mst_CustomerNNTType_Create";
            string strErrorCodeDefault = TError.ErridnInventory.Mst_CustomerNNTType_Create;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
                ////
				, "objCustomerNNTType", objCustomerNNTType
                , "objCustomerNNTTypeName", objCustomerNNTTypeName
                });
            #endregion

            try
            {
                #region // Convert Input:
                #endregion

                #region // Init:
                //_cf.db.LogUserId = _cf.sinf.strUserCode;
                _cf.db.BeginTransaction();

                // Write RequestLog:
                _cf.ProcessBizReq_OutSide(
                    strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    , alParamsCoupleError // alParamsCoupleError
                    );

                // Sys_User_CheckAuthentication:
                //Sys_User_CheckAuthentication(
                //    ref alParamsCoupleError
                //    , strWAUserCode
                //    , strWAUserPassword
                //    );

                // Check Access/Deny:
                Sys_Access_CheckDenyV30(
                    ref alParamsCoupleError
                    , strWAUserCode
                    , strFunctionName
                    );
                #endregion

                #region // Refine and Check Input:
                ////
                string strCustomerNNTType = TUtils.CUtils.StdParam(objCustomerNNTType);
                string strCustomerNNTTypeName = string.Format("{0}", objCustomerNNTTypeName).Trim();

                // drAbilityOfUser:
                //DataRow drAbilityOfUser = Sys_User_GetAbilityViewOfUser(strWAUserCode);
                ////
                DataTable dtDB_Mst_CustomerNNTType = null;
                {
                    ////
                    if (strCustomerNNTType == null || strCustomerNNTType.Length < 1)
                    {
                        alParamsCoupleError.AddRange(new object[]{
                            "Check.strCustomerNNTType", strCustomerNNTType
                            });
                        throw CmUtils.CMyException.Raise(
                            TError.ErridnInventory.Mst_CustomerNNTType_Create_InvalidCustomerNNTType
                            , null
                            , alParamsCoupleError.ToArray()
                            );
                    }
                    Mst_CustomerNNTType_CheckDB(
                        ref alParamsCoupleError // alParamsCoupleError
                        , strCustomerNNTType // objCustomerNNTType
                        , TConst.Flag.No // strFlagExistToCheck
                        , "" // strFlagActiveListToCheck
                        , out dtDB_Mst_CustomerNNTType // dtDB_Mst_CustomerNNTType
                        );
                    ////
                    if (strCustomerNNTTypeName.Length < 1)
                    {
                        alParamsCoupleError.AddRange(new object[]{
                            "Check.strCustomerNNTTypeName", strCustomerNNTTypeName
                            });
                        throw CmUtils.CMyException.Raise(
                            TError.ErridnInventory.Mst_CustomerNNTType_Create_InvalidCustomerNNTTypeName
                            , null
                            , alParamsCoupleError.ToArray()
                            );
                    }
                }
                #endregion

                #region // SaveDB Mst_CustomerNNTType:
                {
                    // Init:
                    //ArrayList alColumnEffective = new ArrayList();
                    string strFN = "";
                    DataRow drDB = dtDB_Mst_CustomerNNTType.NewRow();
                    strFN = "CustomerNNTType"; drDB[strFN] = strCustomerNNTType;
                    strFN = "NetworkID"; drDB[strFN] = nNetworkID;
                    strFN = "CustomerNNTTypeName"; drDB[strFN] = strCustomerNNTTypeName;
                    strFN = "FlagActive"; drDB[strFN] = TConst.Flag.Active;
                    strFN = "LogLUDTimeUTC"; drDB[strFN] = dtimeSys.ToString("yyyy-MM-dd HH:mm:ss");
                    strFN = "LogLUBy"; drDB[strFN] = strWAUserCode;
                    dtDB_Mst_CustomerNNTType.Rows.Add(drDB);

                    // Save:
                    _cf.db.SaveData(
                        "Mst_CustomerNNTType"
                        , dtDB_Mst_CustomerNNTType
                        //, alColumnEffective.ToArray()
                        );
                }
                #endregion

                // Return Good:
                TDALUtils.DBUtils.CommitSafety(_cf.db);
                mdsFinal.AcceptChanges();
                return mdsFinal;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Rollback:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);

                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsFinal
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Rollback and Release resources:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);
                TDALUtils.DBUtils.ReleaseAllSemaphore(_cf.db_Sys, true);

                // Write ReturnLog:
                _cf.ProcessBizReturn_OutSide(
                    ref mdsFinal // mdsFinal
                    , strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    );
                #endregion
            }
        }
        public DataSet Mst_CustomerNNTType_Update(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            ////
            , object objCustomerNNTType
            , object objCustomerNNTTypeName
            , object objFlagActive
            ////
            , object objFt_Cols_Upd
            )
        {
            #region // Temp:
            DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            //int nTidSeq = 0;
            DateTime dtimeSys = DateTime.UtcNow;
            string strFunctionName = "Mst_CustomerNNTType_Update";
            string strErrorCodeDefault = TError.ErridnInventory.Mst_CustomerNNTType_Update;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
				, "objCustomerNNTType", objCustomerNNTType
                , "objCustomerNNTTypeName", objCustomerNNTTypeName
                , "objFlagActive", objFlagActive
				////
				, "objFt_Cols_Upd", objFt_Cols_Upd
                });
            #endregion

            try
            {
                #region // Convert Input:
                #endregion

                #region // Init:
                //_cf.db.LogUserId = _cf.sinf.strUserCode;
                _cf.db.BeginTransaction();

                // Write RequestLog:
                _cf.ProcessBizReq_OutSide(
                    strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    , alParamsCoupleError // alParamsCoupleError
                    );

                // Sys_User_CheckAuthentication:
                //Sys_User_CheckAuthentication(
                //    ref alParamsCoupleError
                //    , strWAUserCode
                //    , strWAUserPassword
                //    );

                // Check Access/Deny:
                Sys_Access_CheckDenyV30(
                    ref alParamsCoupleError
                    , strWAUserCode
                    , strFunctionName
                    );
                #endregion

                #region // Refine and Check Input:
                ////
                string strFt_Cols_Upd = TUtils.CUtils.StdParam(objFt_Cols_Upd);
                strFt_Cols_Upd = (strFt_Cols_Upd == null ? "" : strFt_Cols_Upd);
                ////
                string strCustomerNNTType = TUtils.CUtils.StdParam(objCustomerNNTType);
                string strCustomerNNTTypeName = string.Format("{0}", objCustomerNNTTypeName).Trim();
                string strFlagActive = TUtils.CUtils.StdFlag(objFlagActive);
                ////
                bool bUpd_CustomerNNTTypeName = strFt_Cols_Upd.Contains("Mst_CustomerNNTType.CustomerNNTTypeName".ToUpper());
                bool bUpd_FlagActive = strFt_Cols_Upd.Contains("Mst_CustomerNNTType.FlagActive".ToUpper());

                ////
                DataTable dtDB_Mst_CustomerNNTType = null;
                {
                    ////
                    Mst_CustomerNNTType_CheckDB(
                         ref alParamsCoupleError // alParamsCoupleError
                         , strCustomerNNTType // objCustomerNNTType 
                         , TConst.Flag.Yes // strFlagExistToCheck
                         , "" // strFlagActiveListToCheck
                         , out dtDB_Mst_CustomerNNTType // dtDB_Mst_CustomerNNTType
                        );
                    ////
                    if (bUpd_CustomerNNTTypeName && string.IsNullOrEmpty(strCustomerNNTTypeName))
                    {
                        alParamsCoupleError.AddRange(new object[]{
                            "Check.strCustomerNNTTypeName", strCustomerNNTTypeName
                            });
                        throw CmUtils.CMyException.Raise(
                            TError.ErridnInventory.Mst_CustomerNNTType_Update_InvalidCustomerNNTTypeName
                            , null
                            , alParamsCoupleError.ToArray()
                            );
                    }
                    ////
                }
                #endregion

                #region // SaveDB Mst_CustomerNNTType:
                {
                    // Init:
                    ArrayList alColumnEffective = new ArrayList();
                    string strFN = "";
                    DataRow drDB = dtDB_Mst_CustomerNNTType.Rows[0];
                    if (bUpd_CustomerNNTTypeName) { strFN = "CustomerNNTTypeName"; drDB[strFN] = strCustomerNNTTypeName; alColumnEffective.Add(strFN); }
                    if (bUpd_FlagActive) { strFN = "FlagActive"; drDB[strFN] = strFlagActive; alColumnEffective.Add(strFN); }
                    strFN = "LogLUDTimeUTC"; drDB[strFN] = dtimeSys.ToString("yyyy-MM-dd HH:mm:ss"); alColumnEffective.Add(strFN);
                    strFN = "LogLUBy"; drDB[strFN] = strWAUserCode; alColumnEffective.Add(strFN);

                    // Save:
                    _cf.db.SaveData(
                        "Mst_CustomerNNTType"
                        , dtDB_Mst_CustomerNNTType
                        , alColumnEffective.ToArray()
                        );
                }
                #endregion

                // Return Good:
                TDALUtils.DBUtils.CommitSafety(_cf.db);
                mdsFinal.AcceptChanges();
                return mdsFinal;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Rollback:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);

                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsFinal
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Rollback and Release resources:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);
                TDALUtils.DBUtils.ReleaseAllSemaphore(_cf.db_Sys, true);

                // Write ReturnLog:
                _cf.ProcessBizReturn_OutSide(
                    ref mdsFinal // mdsFinal
                    , strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    );
                #endregion
            }
        }
        public DataSet Mst_CustomerNNTType_Delete(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            /////
            , object objCustomerNNTType
            )
        {
            #region // Temp:
            DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            //int nTidSeq = 0;
            DateTime dtimeSys = DateTime.UtcNow;
            string strFunctionName = "Mst_CustomerNNTType_Delete";
            string strErrorCodeDefault = TError.ErridnInventory.Mst_CustomerNNTType_Delete;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
				, "objCustomerNNTType", objCustomerNNTType
                });
            #endregion

            try
            {
                #region // Init:
                //_cf.db.LogUserId = _cf.sinf.strUserCode;
                _cf.db.BeginTransaction();

                // Write RequestLog:
                _cf.ProcessBizReq_OutSide(
                    strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    , alParamsCoupleError // alParamsCoupleError
                    );

                // Sys_User_CheckAuthentication:
                //Sys_User_CheckAuthentication(
                //    ref alParamsCoupleError
                //    , strWAUserCode
                //    , strWAUserPassword
                //    );

                // Check Access/Deny:
                Sys_Access_CheckDenyV30(
                    ref alParamsCoupleError
                    , strWAUserCode
                    , strFunctionName
                    );
                #endregion

                #region // Refine and Check Input:
                ////
                string strCustomerNNTType = TUtils.CUtils.StdParam(objCustomerNNTType);
                ////
                DataTable dtDB_Mst_CustomerNNTType = null;
                {
                    ////
                    Mst_CustomerNNTType_CheckDB(
                         ref alParamsCoupleError // alParamsCoupleError
                         , objCustomerNNTType // objCustomerNNTType
                         , TConst.Flag.Yes // strFlagExistToCheck
                         , "" // strFlagActiveListToCheck
                         , out dtDB_Mst_CustomerNNTType // dtDB_Mst_CustomerNNTType
                        );
                    ////
                }
                #endregion

                #region // SaveDB Mst_CustomerNNTType:
                {
                    // Init:
                    dtDB_Mst_CustomerNNTType.Rows[0].Delete();

                    // Save:
                    _cf.db.SaveData(
                        "Mst_CustomerNNTType"
                        , dtDB_Mst_CustomerNNTType
                        );
                }
                #endregion

                // Return Good:
                TDALUtils.DBUtils.CommitSafety(_cf.db);
                mdsFinal.AcceptChanges();
                return mdsFinal;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Rollback:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);

                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsFinal
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Rollback and Release resources:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);
                TDALUtils.DBUtils.ReleaseAllSemaphore(_cf.db_Sys, true);

                // Write ReturnLog:
                _cf.ProcessBizReturn_OutSide(
                    ref mdsFinal // mdsFinal
                    , strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    );
                #endregion
            }
        }

        public DataSet WAS_Mst_CustomerNNTType_Get(
            ref ArrayList alParamsCoupleError
            , RQ_Mst_CustomerNNTType objRQ_Mst_CustomerNNTType
            ////
            , out RT_Mst_CustomerNNTType objRT_Mst_CustomerNNTType
            )
        {
            #region // Temp:
            string strTid = objRQ_Mst_CustomerNNTType.Tid;
            objRT_Mst_CustomerNNTType = new RT_Mst_CustomerNNTType();
            DataSet mdsResult = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            DateTime dtimeSys = DateTime.UtcNow;
            //DataSet mdsExec = null;
            //DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(objRQ_Mst_CustomerNNTType.Tid);
            //int nTidSeq = 0;
            //bool bNeedTransaction = true;
            string strFunctionName = "WAS_Mst_CustomerNNTType_Get";
            string strErrorCodeDefault = TError.ErridnInventory.WAS_Mst_CustomerNNTType_Get;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
				});
            #endregion

            try
            {
                #region // Init:
                #endregion

                #region // Refine and Check Input:
                List<MySummaryTable> lst_MySummaryTable = new List<MySummaryTable>();

                List<Mst_CustomerNNTType> lst_Mst_CustomerNNTType = new List<Mst_CustomerNNTType>();
                bool bGet_Mst_CustomerNNTType = (objRQ_Mst_CustomerNNTType.Rt_Cols_Mst_CustomerNNTType != null && objRQ_Mst_CustomerNNTType.Rt_Cols_Mst_CustomerNNTType.Length > 0);
                #endregion

                #region // WS_Mst_CustomerNNTType_Get:
                mdsResult = Mst_CustomerNNTType_Get(
                    objRQ_Mst_CustomerNNTType.Tid // strTid
                    , objRQ_Mst_CustomerNNTType.GwUserCode // strGwUserCode
                    , objRQ_Mst_CustomerNNTType.GwPassword // strGwPassword
                    , objRQ_Mst_CustomerNNTType.WAUserCode // strUserCode
                    , objRQ_Mst_CustomerNNTType.WAUserPassword // strUserPassword
                    , ref alParamsCoupleError // alParamsCoupleError
                                              //// Filter:
                    , objRQ_Mst_CustomerNNTType.Ft_RecordStart // strFt_RecordStart
                    , objRQ_Mst_CustomerNNTType.Ft_RecordCount // strFt_RecordCount
                    , objRQ_Mst_CustomerNNTType.Ft_WhereClause // strFt_WhereClause
                                                               //// Return:
                    , objRQ_Mst_CustomerNNTType.Rt_Cols_Mst_CustomerNNTType // strRt_Cols_Mst_CustomerNNTType
                    );
                #endregion

                #region // GetData:
                if (!CmUtils.CMyDataSet.HasError(mdsResult))
                {
                    ////
                    DataTable dt_MySummaryTable = mdsResult.Tables["MySummaryTable"].Copy();
                    lst_MySummaryTable = TUtils.DataTableCmUtils.ToListof<MySummaryTable>(dt_MySummaryTable);
                    objRT_Mst_CustomerNNTType.MySummaryTable = lst_MySummaryTable[0];

                    ////
                    if (bGet_Mst_CustomerNNTType)
                    {
                        ////
                        DataTable dt_Mst_CustomerNNTType = mdsResult.Tables["Mst_CustomerNNTType"].Copy();
                        lst_Mst_CustomerNNTType = TUtils.DataTableCmUtils.ToListof<Mst_CustomerNNTType>(dt_Mst_CustomerNNTType);
                        objRT_Mst_CustomerNNTType.Lst_Mst_CustomerNNTType = lst_Mst_CustomerNNTType;
                    }
                }
                #endregion

                // Return Good:
                return mdsResult;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsResult
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Write ReturnLog:
                //_cf.ProcessBizReturn(
                //	ref mdsResult // mdsFinal
                //	, strTid // strTid
                //	, strFunctionName // strFunctionName
                //	);
                #endregion
            }
        }

        public DataSet WAS_Mst_CustomerNNTType_Create(
            ref ArrayList alParamsCoupleError
            , RQ_Mst_CustomerNNTType objRQ_Mst_CustomerNNTType
            ////
            , out RT_Mst_CustomerNNTType objRT_Mst_CustomerNNTType
            )
        {
            #region // Temp:
            string strTid = objRQ_Mst_CustomerNNTType.Tid;
            objRT_Mst_CustomerNNTType = new RT_Mst_CustomerNNTType();
            DataSet mdsResult = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            DateTime dtimeSys = DateTime.UtcNow;
            //DataSet mdsExec = null;
            //DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(objRQ_Mst_CustomerNNTType.Tid);
            //int nTidSeq = 0;
            //bool bNeedTransaction = true;
            string strFunctionName = "WAS_Mst_CustomerNNTType_Create";
            string strErrorCodeDefault = TError.ErridnInventory.WAS_Mst_CustomerNNTType_Create;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
                , "Mst_CustomerNNTType", TJson.JsonConvert.SerializeObject(objRQ_Mst_CustomerNNTType.Mst_CustomerNNTType)
				////
				});
            #endregion

            try
            {
                #region // Init:
                #endregion

                #region // Refine and Check Input:
                //List<Mst_CustomerNNTType> lst_Mst_CustomerNNTType = new List<Mst_CustomerNNTType>();
                //List<Mst_CustomerNNTTypeInGroup> lst_Mst_CustomerNNTTypeInGroup = new List<Mst_CustomerNNTTypeInGroup>();
                #endregion

                #region // Mst_CustomerNNTType_Create:
                mdsResult = Mst_CustomerNNTType_Create(
                    objRQ_Mst_CustomerNNTType.Tid // strTid
                    , objRQ_Mst_CustomerNNTType.GwUserCode // strGwUserCode
                    , objRQ_Mst_CustomerNNTType.GwPassword // strGwPassword
                    , objRQ_Mst_CustomerNNTType.WAUserCode // strUserCode
                    , objRQ_Mst_CustomerNNTType.WAUserPassword // strUserPassword
                    , ref alParamsCoupleError // alParamsCoupleError
                                              ////
                    , objRQ_Mst_CustomerNNTType.Mst_CustomerNNTType.CustomerNNTType // objCustomerNNTType
                    , objRQ_Mst_CustomerNNTType.Mst_CustomerNNTType.CustomerNNTTypeName // objCustomerNNTTypeName
                    );
                #endregion

                // Return Good:
                return mdsResult;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsResult
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Write ReturnLog:
                //_cf.ProcessBizReturn(
                //	ref mdsResult // mdsFinal
                //	, strTid // strTid
                //	, strFunctionName // strFunctionName
                //	);
                #endregion
            }
        }

        public DataSet WAS_Mst_CustomerNNTType_Update(
            ref ArrayList alParamsCoupleError
            , RQ_Mst_CustomerNNTType objRQ_Mst_CustomerNNTType
            ////
            , out RT_Mst_CustomerNNTType objRT_Mst_CustomerNNTType
            )
        {
            #region // Temp:
            string strTid = objRQ_Mst_CustomerNNTType.Tid;
            objRT_Mst_CustomerNNTType = new RT_Mst_CustomerNNTType();
            DataSet mdsResult = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            DateTime dtimeSys = DateTime.UtcNow;
            //DataSet mdsExec = null;
            //DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(objRQ_Mst_CustomerNNTType.Tid);
            //int nTidSeq = 0;
            //bool bNeedTransaction = true;
            string strFunctionName = "WAS_Mst_CustomerNNTType_Update";
            string strErrorCodeDefault = TError.ErridnInventory.WAS_Mst_CustomerNNTType_Update;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
                , "Mst_CustomerNNTType", TJson.JsonConvert.SerializeObject(objRQ_Mst_CustomerNNTType.Mst_CustomerNNTType)
				////
				});
            #endregion

            try
            {
                #region // Init:
                #endregion

                #region // Refine and Check Input:
                //List<Mst_CustomerNNTType> lst_Mst_CustomerNNTType = new List<Mst_CustomerNNTType>();
                //List<Mst_CustomerNNTTypeInGroup> lst_Mst_CustomerNNTTypeInGroup = new List<Mst_CustomerNNTTypeInGroup>();
                #endregion

                #region // Mst_CustomerNNTType_Update:
                mdsResult = Mst_CustomerNNTType_Update(
                    objRQ_Mst_CustomerNNTType.Tid // strTid
                    , objRQ_Mst_CustomerNNTType.GwUserCode // strGwUserCode
                    , objRQ_Mst_CustomerNNTType.GwPassword // strGwPassword
                    , objRQ_Mst_CustomerNNTType.WAUserCode // strUserCode
                    , objRQ_Mst_CustomerNNTType.WAUserPassword // strUserPassword
                    , ref alParamsCoupleError // alParamsCoupleError
                                              ////
                    , objRQ_Mst_CustomerNNTType.Mst_CustomerNNTType.CustomerNNTType // objCustomerNNTType
                    , objRQ_Mst_CustomerNNTType.Mst_CustomerNNTType.CustomerNNTTypeName // objCustomerNNTTypeName
                    , objRQ_Mst_CustomerNNTType.Mst_CustomerNNTType.FlagActive // objFlagActive
                                                                               ////
                    , objRQ_Mst_CustomerNNTType.Ft_Cols_Upd// objFt_Cols_Upd
                    );
                #endregion

                // Return Good:
                return mdsResult;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsResult
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Write ReturnLog:
                //_cf.ProcessBizReturn(
                //	ref mdsResult // mdsFinal
                //	, strTid // strTid
                //	, strFunctionName // strFunctionName
                //	);
                #endregion
            }
        }

        public DataSet WAS_Mst_CustomerNNTType_Delete(
            ref ArrayList alParamsCoupleError
            , RQ_Mst_CustomerNNTType objRQ_Mst_CustomerNNTType
            ////
            , out RT_Mst_CustomerNNTType objRT_Mst_CustomerNNTType
            )
        {
            #region // Temp:
            string strTid = objRQ_Mst_CustomerNNTType.Tid;
            objRT_Mst_CustomerNNTType = new RT_Mst_CustomerNNTType();
            DataSet mdsResult = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            DateTime dtimeSys = DateTime.UtcNow;
            //DataSet mdsExec = null;
            //DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(objRQ_Mst_CustomerNNTType.Tid);
            //int nTidSeq = 0;
            //bool bNeedTransaction = true;
            string strFunctionName = "WAS_Mst_CustomerNNTType_Delete";
            string strErrorCodeDefault = TError.ErridnInventory.WAS_Mst_CustomerNNTType_Delete;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				//, "Mst_CustomerNNTType", TJson.JsonConvert.SerializeObject(objRQ_Mst_CustomerNNTType.Mst_CustomerNNTType)
				////
				});
            #endregion

            try
            {
                #region // Init:
                #endregion

                #region // Refine and Check Input:
                //List<Mst_CustomerNNTType> lst_Mst_CustomerNNTType = new List<Mst_CustomerNNTType>();
                //List<Mst_CustomerNNTTypeInGroup> lst_Mst_CustomerNNTTypeInGroup = new List<Mst_CustomerNNTTypeInGroup>();
                #endregion

                #region // Mst_CustomerNNTType_Delete:
                mdsResult = Mst_CustomerNNTType_Delete(
                    objRQ_Mst_CustomerNNTType.Tid // strTid
                    , objRQ_Mst_CustomerNNTType.GwUserCode // strGwUserCode
                    , objRQ_Mst_CustomerNNTType.GwPassword // strGwPassword
                    , objRQ_Mst_CustomerNNTType.WAUserCode // strUserCode
                    , objRQ_Mst_CustomerNNTType.WAUserPassword // strUserPassword
                    , ref alParamsCoupleError // alParamsCoupleError
                                              ////
                    , objRQ_Mst_CustomerNNTType.Mst_CustomerNNTType.CustomerNNTType // objCustomerNNTType
                    );
                #endregion

                // Return Good:
                return mdsResult;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsResult
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Write ReturnLog:
                //_cf.ProcessBizReturn(
                //	ref mdsResult // mdsFinal
                //	, strTid // strTid
                //	, strFunctionName // strFunctionName
                //	);
                #endregion
            }
        }
		#endregion

		#region // Mst_Dealer:
		//private void Mst_Dealer_CheckDB(
		//	ref ArrayList alParamsCoupleError
		//	, object objDLCode
		//	, string strFlagExistToCheck
		//	, string strFlagActiveListToCheck
		//	, out DataTable dtDB_Mst_Dealer
		//	)
		//{
		//	// GetInfo:
		//	string strSqlExec = CmUtils.StringUtils.Replace(@"
		//			select top 1
		//				t.*
		//			from Mst_Dealer t --//[mylock]
		//			where (1=1)
		//				and t.DLCode = @DLCode
		//			;
		//		");
		//	dtDB_Mst_Dealer = _cf.db.ExecQuery(
		//		strSqlExec
		//		, "@DLCode", objDLCode
		//		).Tables[0];
		//	dtDB_Mst_Dealer.TableName = "Mst_Dealer";

		//	// strFlagExistToCheck:
		//	if (strFlagExistToCheck.Length > 0)
		//	{
		//		if (CmUtils.StringUtils.StringEqual(strFlagExistToCheck, TConst.Flag.Active) && dtDB_Mst_Dealer.Rows.Count < 1)
		//		{
		//			alParamsCoupleError.AddRange(new object[]{
		//				"Check.DLCode", objDLCode
		//				});
		//			throw CmUtils.CMyException.Raise(
		//				TError.ErridnInventory.Mst_Dealer_CheckDB_DLCodeNotFound
		//				, null
		//				, alParamsCoupleError.ToArray()
		//				);
		//		}
		//		if (CmUtils.StringUtils.StringEqual(strFlagExistToCheck, TConst.Flag.Inactive) && dtDB_Mst_Dealer.Rows.Count > 0)
		//		{
		//			alParamsCoupleError.AddRange(new object[]{
		//				"Check.DLCode", objDLCode
		//				});
		//			throw CmUtils.CMyException.Raise(
		//				TError.ErridnInventory.Mst_Dealer_CheckDB_DLCodeExist
		//				, null
		//				, alParamsCoupleError.ToArray()
		//				);
		//		}
		//	}

		//	// strFlagActiveListToCheck:
		//	if (strFlagActiveListToCheck.Length > 0 && !strFlagActiveListToCheck.Contains(Convert.ToString(dtDB_Mst_Dealer.Rows[0]["FlagActive"])))
		//	{
		//		alParamsCoupleError.AddRange(new object[]{
		//			"Check.DLCode", objDLCode
		//			, "Check.FlagActiveListToCheck", strFlagActiveListToCheck
		//			, "DB.FlagActive", dtDB_Mst_Dealer.Rows[0]["FlagActive"]
		//			});
		//		throw CmUtils.CMyException.Raise(
		//			TError.ErridnInventory.Mst_Dealer_CheckDB_FlagActiveNotMatched
		//			, null
		//			, alParamsCoupleError.ToArray()
		//			);
		//	}
		//}

		//public DataSet RptSv_Mst_Dealer_Get(
		//	string strTid
		//	, string strGwUserCode
		//	, string strGwPassword
		//	, string strWAUserCode
		//	, string strWAUserPassword
		//	, ref ArrayList alParamsCoupleError
		//	//// Filter:
		//	, string strFt_RecordStart
		//	, string strFt_RecordCount
		//	, string strFt_WhereClause
		//	//// Return:
		//	, string strRt_Cols_Mst_Dealer
		//	)
		//{
		//	#region // Temp:
		//	DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
		//	//int nTidSeq = 0;
		//	DateTime dtimeSys = DateTime.UtcNow;
		//	bool bNeedTransaction = true;
		//	string strFunctionName = "RptSv_Mst_Dealer_Get";
		//	string strErrorCodeDefault = TError.ErridnInventory.Mst_Dealer_Get;
		//	alParamsCoupleError.AddRange(new object[]{
		//		"strFunctionName", strFunctionName
		//		, "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
		//		//// Filter
		//		, "strFt_RecordStart", strFt_RecordStart
		//		, "strFt_RecordCount", strFt_RecordCount
		//		, "strFt_WhereClause", strFt_WhereClause
		//		//// Return
		//		, "strRt_Cols_Mst_Dealer", strRt_Cols_Mst_Dealer
		//		});
		//	#endregion

		//	try
		//	{
		//		#region // Init:
		//		//_cf.db.LogUserId = _cf.sinf.strUserCode;
		//		if (bNeedTransaction) _cf.db.BeginTransaction();

		//		// Write RequestLog:
		//		_cf.ProcessBizReq_OutSide(
		//			strTid // strTid
		//			, strGwUserCode // strGwUserCode
		//			, strGwPassword // strGwPassword
		//			, strWAUserCode // objUserCode
		//			, strFunctionName // strFunctionName
		//			, alParamsCoupleError // alParamsCoupleError
		//			);

		//		// Sys_User_CheckAuthentication:
		//		RptSv_Sys_User_CheckAuthentication(
		//			ref alParamsCoupleError
		//			, strWAUserCode
		//			, strWAUserPassword
		//			);

		//		// Check Access/Deny:
		//		//Sys_Access_CheckDenyV30(
		//		//	ref alParamsCoupleError
		//		//	, strWAUserCode
		//		//	, strFunctionName
		//		//	);
		//		#endregion

		//		#region // Mst_Dealer_GetX:
		//		DataSet dsGetData = null;
		//		{
		//			////
		//			Mst_Dealer_GetX(
		//				strTid // strTid
		//				, strGwUserCode // strGwUserCode
		//				, strGwPassword // strGwPassword
		//				, strWAUserCode // strWAUserCode
		//				, strWAUserPassword // strWAUserPassword
		//				, ref alParamsCoupleError // alParamsCoupleError
		//				, dtimeSys // dtimeSys
		//						   ////
		//				, strFt_RecordStart // strFt_RecordStart
		//				, strFt_RecordCount // strFt_RecordCount
		//				, strFt_WhereClause // strFt_WhereClause
		//									////
		//				, strRt_Cols_Mst_Dealer // strRt_Cols_Mst_Dealer
		//										////
		//				, out dsGetData // dsGetData
		//				);
		//			////
		//			CmUtils.DataUtils.MoveDataTable(ref mdsFinal, ref dsGetData);
		//		}
		//		#endregion

		//		// Return Good:
		//		TDALUtils.DBUtils.RollbackSafety(_cf.db); // Always Rollback.
		//		mdsFinal.AcceptChanges();
		//		return mdsFinal;
		//	}
		//	catch (Exception exc)
		//	{
		//		#region // Catch of try:
		//		// Rollback:
		//		TDALUtils.DBUtils.RollbackSafety(_cf.db);

		//		// Return Bad:
		//		return TUtils.CProcessExc.Process(
		//			ref mdsFinal
		//			, exc
		//			, strErrorCodeDefault
		//			, alParamsCoupleError.ToArray()
		//			);
		//		#endregion
		//	}
		//	finally
		//	{
		//		#region // Finally of try:
		//		// Rollback and Release resources:
		//		TDALUtils.DBUtils.RollbackSafety(_cf.db);
		//		TDALUtils.DBUtils.ReleaseAllSemaphore(_cf.db_Sys, true);

		//		// Write ReturnLog:
		//		_cf.ProcessBizReturn_OutSide(
		//			ref mdsFinal // mdsFinal
		//			, strTid // strTid
		//			, strGwUserCode // strGwUserCode
		//			, strGwPassword // strGwPassword
		//			, strWAUserCode // objUserCode
		//			, strFunctionName // strFunctionName
		//			);
		//		#endregion
		//	}
		//}

		//public DataSet Mst_Dealer_Get(
		//	string strTid
		//	, string strGwUserCode
		//	, string strGwPassword
		//	, string strWAUserCode
		//	, string strWAUserPassword
		//	, ref ArrayList alParamsCoupleError
		//	//// Filter:
		//	, string strFt_RecordStart
		//	, string strFt_RecordCount
		//	, string strFt_WhereClause
		//	//// Return:
		//	, string strRt_Cols_Mst_Dealer
		//	)
		//{
		//	#region // Temp:
		//	DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
		//	//int nTidSeq = 0;
		//	DateTime dtimeSys = DateTime.UtcNow;
		//	bool bNeedTransaction = true;
		//	string strFunctionName = "Mst_Dealer_Get";
		//	string strErrorCodeDefault = TError.ErridnInventory.Mst_Dealer_Get;
		//	alParamsCoupleError.AddRange(new object[]{
		//		"strFunctionName", strFunctionName
		//		, "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
		//		//// Filter
		//		, "strFt_RecordStart", strFt_RecordStart
		//		, "strFt_RecordCount", strFt_RecordCount
		//		, "strFt_WhereClause", strFt_WhereClause
		//		//// Return
		//		, "strRt_Cols_Mst_Dealer", strRt_Cols_Mst_Dealer
		//		});
		//	#endregion

		//	try
		//	{
		//		#region // Init:
		//		//_cf.db.LogUserId = _cf.sinf.strUserCode;
		//		if (bNeedTransaction) _cf.db.BeginTransaction();

		//		// Write RequestLog:
		//		_cf.ProcessBizReq_OutSide(
		//			strTid // strTid
		//			, strGwUserCode // strGwUserCode
		//			, strGwPassword // strGwPassword
		//			, strWAUserCode // objUserCode
		//			, strFunctionName // strFunctionName
		//			, alParamsCoupleError // alParamsCoupleError
		//			);

		//		// Sys_User_CheckAuthentication:
		//		Sys_User_CheckAuthentication(
		//			ref alParamsCoupleError
		//			, strWAUserCode
		//			, strWAUserPassword
		//			);

		//		// Check Access/Deny:
		//		Sys_Access_CheckDenyV30(
		//			ref alParamsCoupleError
		//			, strWAUserCode
		//			, strFunctionName
		//			);
		//		#endregion

		//		#region // Mst_Dealer_GetX:
		//		DataSet dsGetData = null;
		//		{
		//			////
		//			Mst_Dealer_GetX_New20191203(
		//				strTid // strTid
		//				, strGwUserCode // strGwUserCode
		//				, strGwPassword // strGwPassword
		//				, strWAUserCode // strWAUserCode
		//				, strWAUserPassword // strWAUserPassword
		//				, ref alParamsCoupleError // alParamsCoupleError
		//				, dtimeSys // dtimeSys
		//						   ////
		//				, strFt_RecordStart // strFt_RecordStart
		//				, strFt_RecordCount // strFt_RecordCount
		//				, strFt_WhereClause // strFt_WhereClause
		//									////
		//				, strRt_Cols_Mst_Dealer // strRt_Cols_Mst_Dealer
		//										////
		//				, out dsGetData // dsGetData
		//				);
		//			////
		//			CmUtils.DataUtils.MoveDataTable(ref mdsFinal, ref dsGetData);
		//		}
		//		#endregion

		//		// Return Good:
		//		TDALUtils.DBUtils.RollbackSafety(_cf.db); // Always Rollback.
		//		mdsFinal.AcceptChanges();
		//		return mdsFinal;
		//	}
		//	catch (Exception exc)
		//	{
		//		#region // Catch of try:
		//		// Rollback:
		//		TDALUtils.DBUtils.RollbackSafety(_cf.db);

		//		// Return Bad:
		//		return TUtils.CProcessExc.Process(
		//			ref mdsFinal
		//			, exc
		//			, strErrorCodeDefault
		//			, alParamsCoupleError.ToArray()
		//			);
		//		#endregion
		//	}
		//	finally
		//	{
		//		#region // Finally of try:
		//		// Rollback and Release resources:
		//		TDALUtils.DBUtils.RollbackSafety(_cf.db);
		//		TDALUtils.DBUtils.ReleaseAllSemaphore(_cf.db_Sys, true);

		//		// Write ReturnLog:
		//		_cf.ProcessBizReturn_OutSide(
		//			ref mdsFinal // mdsFinal
		//			, strTid // strTid
		//			, strGwUserCode // strGwUserCode
		//			, strGwPassword // strGwPassword
		//			, strWAUserCode // objUserCode
		//			, strFunctionName // strFunctionName
		//			);
		//		#endregion
		//	}
		//}

		//private void Mst_Dealer_GetX(
		//	string strTid
		//	, string strGwUserCode
		//	, string strGwPassword
		//	, string strWAUserCode
		//	, string strWAUserPassword
		//	, ref ArrayList alParamsCoupleError
		//	, DateTime dtimeSys
		//	//// Filter:
		//	, string strFt_RecordStart
		//	, string strFt_RecordCount
		//	, string strFt_WhereClause
		//	//// Return:
		//	, string strRt_Cols_Mst_Dealer
		//	////
		//	, out DataSet dsGetData
		//	)
		//{
		//	#region // Temp:
		//	DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
		//	//int nTidSeq = 0;
		//	//DateTime dtimeSys = DateTime.UtcNow;
		//	//bool bNeedTransaction = true;
		//	string strFunctionName = "Mst_Dealer_Get";
		//	//string strErrorCodeDefault = TError.ErridnInventory.Mst_Dealer_Get;
		//	alParamsCoupleError.AddRange(new object[]{
		//		"strFunctionName", strFunctionName
		//		, "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
		//		//// Filter
		//		, "strFt_RecordStart", strFt_RecordStart
		//		, "strFt_RecordCount", strFt_RecordCount
		//		, "strFt_WhereClause", strFt_WhereClause
		//		//// Return
		//		, "strRt_Cols_Mst_Dealer", strRt_Cols_Mst_Dealer
		//		});
		//	#endregion

		//	#region // Check:
		//	//// Refine:
		//	long nFilterRecordStart = Convert.ToInt64(strFt_RecordStart);
		//	long nFilterRecordEnd = nFilterRecordStart + Convert.ToInt64(strFt_RecordCount) - 1;
		//	bool bGet_Mst_Dealer = (strRt_Cols_Mst_Dealer != null && strRt_Cols_Mst_Dealer.Length > 0);

		//	//// drAbilityOfUser:
		//	//DataRow drAbilityOfUser = myCache_ViewAbility_GetUserInfo(_cf.sinf.strUserCode);

		//	#endregion

		//	#region // Build Sql:
		//	////
		//	ArrayList alParamsCoupleSql = new ArrayList();
		//	alParamsCoupleSql.AddRange(new object[] {
		//			"@nFilterRecordStart", nFilterRecordStart
		//			, "@nFilterRecordEnd", nFilterRecordEnd
		//			});
		//	////
		//	//myCache_ViewAbility_GetDealerInfo(drAbilityOfUser);
		//	////
		//	string strSqlGetData = CmUtils.StringUtils.Replace(@"
		//				---- #tbl_Mst_Dealer_Filter_Draft:
		//				select distinct
		//					identity(bigint, 0, 1) MyIdxSeq
		//					, md.DLCode
		//				into #tbl_Mst_Dealer_Filter_Draft
		//				from Mst_Dealer md --//[mylock]
		//				where (1=1)
		//					zzB_Where_strFilter_zzE
		//				order by md.DLCode asc
		//				;

		//				---- Summary:
		//				select Count(0) MyCount from #tbl_Mst_Dealer_Filter_Draft t --//[mylock]
		//				;

		//				---- #tbl_Mst_Dealer_Filter:
		//				select
		//					t.*
		//				into #tbl_Mst_Dealer_Filter
		//				from #tbl_Mst_Dealer_Filter_Draft t --//[mylock]
		//				where
		//					(t.MyIdxSeq >= @nFilterRecordStart)
		//					and (t.MyIdxSeq <= @nFilterRecordEnd)
		//				;

		//				-------- Mst_Dealer --------:
		//				zzB_Select_Mst_Dealer_zzE
		//				----------------------------------------

		//				---- Clear for debug:
		//				--drop table #tbl_Mst_Dealer_Filter_Draft;
		//				--drop table #tbl_Mst_Dealer_Filter;
		//			"
		//		);
		//	////
		//	string zzB_Select_Mst_Dealer_zzE = "-- Nothing.";
		//	if (bGet_Mst_Dealer)
		//	{
		//		#region // bGet_Mst_Dealer:
		//		zzB_Select_Mst_Dealer_zzE = CmUtils.StringUtils.Replace(@"
		//				---- #tbl_Mst_NNT_Filter:
  //                      select
	 //                       1 MyTotal
	 //                       , t.MST
	 //                       , t.DLCode
  //                      into #tbl_Mst_NNT_Filter
  //                      from Mst_NNT t --//[mylock]
	 //                       inner join #tbl_Mst_Dealer_Filter f --//[mylock]
		//                        on t.DLCode = f.DLCode
  //                      where (1=1)
  //                      ;

  //                      select
	 //                       t.DLCode
	 //                       , Isnull(count(t.MST) , 0.0) count_MST
  //                      into #tbl_Mst_NNT_Filter_Count
  //                      from #tbl_Mst_NNT_Filter t --//[mylock]
  //                      where (1=1)
  //                      group by 
	 //                       t.DLCode
  //                      ;


  //                      ---- Mst_Dealer:
  //                      select
  //                          t.MyIdxSeq
	 //                       , md.*
		//					, mp.ProvinceCode mp_ProvinceCode
		//					, mp.ProvinceName mp_ProvinceName
	 //                       , Isnull(f.count_MST, 0.0) count_MST
  //                      from #tbl_Mst_Dealer_Filter t --//[mylock]
	 //                       inner join Mst_Dealer md --//[mylock]
		//                        on t.DLCode = md.DLCode
	 //                       left join #tbl_Mst_NNT_Filter_Count f --//[mylock]
		//                        on md.DLCode = f.DLCode
		//					left join Mst_Province mp --//[mylock]
		//						on md.ProvinceCode = mp.ProvinceCode
  //                      order by t.MyIdxSeq asc
  //                      ;
		//				"
		//			);
		//		#endregion
		//	}
		//	////
		//	string zzB_Where_strFilter_zzE = "";
		//	{
		//		Hashtable htSpCols = new Hashtable();
		//		{
		//			#region // htSpCols:
		//			////
		//			TUtils.CUtils.MyBuildHTSupportedColumns(
		//				_cf.db // db
		//				, ref htSpCols // htSupportedColumns
		//				, "Mst_Dealer" // strTableNameDB
		//				, "Mst_Dealer." // strPrefixStd
		//				, "md." // strPrefixAlias
		//				);
		//			////
		//			#endregion
		//		}
		//		zzB_Where_strFilter_zzE = CmUtils.SqlUtils.BuildWhere(
		//			htSpCols // htSpCols
		//			, strFt_WhereClause // strClause
		//			, "@p_" // strParamPrefix
		//			, ref alParamsCoupleSql // alParamsCoupleSql
		//			);
		//		zzB_Where_strFilter_zzE = (zzB_Where_strFilter_zzE.Length <= 0 ? "" : string.Format(" and ({0})", zzB_Where_strFilter_zzE));
		//		alParamsCoupleError.AddRange(new object[]{
		//				"zzB_Where_strFilter_zzE", zzB_Where_strFilter_zzE
		//				});
		//	}
		//	////
		//	strSqlGetData = CmUtils.StringUtils.Replace(
		//		strSqlGetData
		//		, "zzB_Where_strFilter_zzE", zzB_Where_strFilter_zzE
		//		, "zzB_Select_Mst_Dealer_zzE", zzB_Select_Mst_Dealer_zzE
		//		);
		//	#endregion

		//	#region // Get Data:
		//	dsGetData = _cf.db.ExecQuery(
		//		strSqlGetData
		//		, alParamsCoupleSql.ToArray()
		//		);
		//	int nIdxTable = 0;
		//	dsGetData.Tables[nIdxTable++].TableName = "MySummaryTable";
		//	if (bGet_Mst_Dealer)
		//	{
		//		dsGetData.Tables[nIdxTable++].TableName = "Mst_Dealer";
		//	}
		//	#endregion
		//}
		//public DataSet Mst_Dealer_Create(
		//	string strTid
		//	, string strGwUserCode
		//	, string strGwPassword
		//	, string strWAUserCode
		//	, string strWAUserPassword
		//	, ref ArrayList alParamsCoupleError
		//	////
		//	, object objDLCode
		//	, object objProvinceCode
		//	, object objDLName
		//	, object objDLAddress
		//	, object objDLPresentBy
		//	, object objDLGovIDNumber
		//	, object objDLEmail
		//	, object objDLPhoneNo
		//	)

		//{
		//	#region // Temp:
		//	DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
		//	//int nTidSeq = 0;
		//	DateTime dtimeSys = DateTime.UtcNow;
		//	string strFunctionName = "Mst_Dealer_Create";
		//	string strErrorCodeDefault = TError.ErridnInventory.Mst_Dealer_Create;
		//	alParamsCoupleError.AddRange(new object[]{
		//			"strFunctionName", strFunctionName
		//			, "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
  //                  ////
		//			, "objDLCode", objDLCode
		//			, "objProvinceCode", objProvinceCode
		//			, "objDLName", objDLName
		//			, "objDLAddress", objDLAddress
		//			, "objDLPresentBy", objDLPresentBy
		//			, "objDLGovIDNumber", objDLGovIDNumber
		//			, "objDLEmail", objDLEmail
		//			, "objDLPhoneNo", objDLPhoneNo
		//			});
		//	#endregion

		//	try
		//	{
		//		#region // Convert Input:
		//		#endregion

		//		#region // Init:
		//		//_cf.db.LogUserId = _cf.sinf.strUserCode;
		//		_cf.db.BeginTransaction();

		//		// Write RequestLog:
		//		_cf.ProcessBizReq_OutSide(
		//			strTid // strTid
		//			, strGwUserCode // strGwUserCode
		//			, strGwPassword // strGwPassword
		//			, strWAUserCode // objUserCode
		//			, strFunctionName // strFunctionName
		//			, alParamsCoupleError // alParamsCoupleError
		//			);

		//		// Sys_User_CheckAuthentication:
		//		Sys_User_CheckAuthentication(
		//			ref alParamsCoupleError
		//			, strWAUserCode
		//			, strWAUserPassword
		//			);

		//		// Check Access/Deny:
		//		Sys_Access_CheckDenyV30(
		//			ref alParamsCoupleError
		//			, strWAUserCode
		//			, strFunctionName
		//			);
		//		#endregion

		//		#region // Refine and Check Input:
		//		////
		//		string strDLCode = TUtils.CUtils.StdParam(objDLCode);
		//		string strProvinceCode = TUtils.CUtils.StdParam(objProvinceCode);
		//		string strDLName = string.Format("{0}", objDLName).Trim();
		//		string strDLAddress = string.Format("{0}", objDLAddress).Trim();
		//		string strDLPresentBy = string.Format("{0}", objDLPresentBy).Trim();
		//		string strDLGovIDNumber = string.Format("{0}", objDLGovIDNumber).Trim();
		//		string strDLEmail = string.Format("{0}", objDLEmail).Trim();
		//		string strDLPhoneNo = string.Format("{0}", objDLPhoneNo).Trim();

		//		// drAbilityOfUser:
		//		//DataRow drAbilityOfUser = Sys_User_GetAbilityViewOfUser(_cf.sinf.strUserCode);
		//		////
		//		DataTable dtDB_Mst_Dealer = null;
		//		{

		//			////
		//			if (strDLCode == null || strDLCode.Length < 1)
		//			{
		//				alParamsCoupleError.AddRange(new object[]{
		//					"Check.strDLCode", strDLCode
		//					});
		//				throw CmUtils.CMyException.Raise(
		//					TError.ErridnInventory.Mst_Dealer_Create_InvalidDLCode
		//					, null
		//					, alParamsCoupleError.ToArray()
		//					);
		//			}
		//			Mst_Dealer_CheckDB(
		//				ref alParamsCoupleError // alParamsCoupleError
		//				, strDLCode // objDLCode
		//				, TConst.Flag.No // strFlagExistToCheck
		//				, "" // strFlagActiveListToCheck
		//				, out dtDB_Mst_Dealer // dtDB_Mst_Dealer
		//				);
		//			////
		//			DataTable dtDB_Mst_Province = null;

		//			Mst_Province_CheckDB(
		//				ref alParamsCoupleError // alParamsCoupleError
		//				, strProvinceCode // objDLCode
		//				, TConst.Flag.Yes // strFlagExistToCheck
		//				, TConst.Flag.Active // strFlagActiveListToCheck
		//				, out dtDB_Mst_Province // dtDB_Mst_Dealer
		//				);
		//			////
		//			if (strDLName.Length < 1)
		//			{
		//				alParamsCoupleError.AddRange(new object[]{
		//					"Check.strDLName", strDLName
		//					});
		//				throw CmUtils.CMyException.Raise(
		//					TError.ErridnInventory.Mst_Dealer_Create_InvalidDLName
		//					, null
		//					, alParamsCoupleError.ToArray()
		//					);
		//			}
		//		}
		//		#endregion

		//		#region // SaveDB Mst_Dealer:
		//		{
		//			// Init:
		//			//ArrayList alColumnEffective = new ArrayList();
		//			string strFN = "";
		//			DataRow drDB = dtDB_Mst_Dealer.NewRow();
		//			strFN = "DLCode"; drDB[strFN] = strDLCode;
		//			strFN = "NetworkID"; drDB[strFN] = nNetworkID;
		//			strFN = "ProvinceCode"; drDB[strFN] = strProvinceCode;
		//			strFN = "DLName"; drDB[strFN] = strDLName;
		//			strFN = "DLAddress"; drDB[strFN] = strDLAddress;
		//			strFN = "DLPresentBy"; drDB[strFN] = strDLPresentBy;
		//			strFN = "DLGovIDNumber"; drDB[strFN] = strDLGovIDNumber;
		//			strFN = "DLEmail"; drDB[strFN] = strDLEmail;
		//			strFN = "DLPhoneNo"; drDB[strFN] = strDLPhoneNo;
		//			strFN = "FlagActive"; drDB[strFN] = TConst.Flag.Active;
		//			strFN = "LogLUDTimeUTC"; drDB[strFN] = dtimeSys.ToString("yyyy-MM-dd HH:mm:ss");
		//			strFN = "LogLUBy"; drDB[strFN] = strWAUserCode;
		//			dtDB_Mst_Dealer.Rows.Add(drDB);

		//			// Save:
		//			_cf.db.SaveData(
		//				"Mst_Dealer"
		//				, dtDB_Mst_Dealer
		//				//, alColumnEffective.ToArray()
		//				);
		//		}
		//		#endregion

		//		// Return Good:
		//		TDALUtils.DBUtils.CommitSafety(_cf.db);
		//		mdsFinal.AcceptChanges();
		//		return mdsFinal;
		//	}
		//	catch (Exception exc)
		//	{
		//		#region // Catch of try:
		//		// Rollback:
		//		TDALUtils.DBUtils.RollbackSafety(_cf.db);

		//		// Return Bad:
		//		return TUtils.CProcessExc.Process(
		//			ref mdsFinal
		//			, exc
		//			, strErrorCodeDefault
		//			, alParamsCoupleError.ToArray()
		//			);
		//		#endregion
		//	}
		//	finally
		//	{
		//		#region // Finally of try:
		//		// Rollback and Release resources:
		//		TDALUtils.DBUtils.RollbackSafety(_cf.db);
		//		TDALUtils.DBUtils.ReleaseAllSemaphore(_cf.db_Sys, true);

		//		// Write ReturnLog:
		//		_cf.ProcessBizReturn_OutSide(
		//			ref mdsFinal // mdsFinal
		//			, strTid // strTid
		//			, strGwUserCode // strGwUserCode
		//			, strGwPassword // strGwPassword
		//			, strWAUserCode // objUserCode
		//			, strFunctionName // strFunctionName
		//			);
		//		#endregion
		//	}
		//}

		//private void Mst_Dealer_UpdBU()
		//{
		//	string strSqlPostSave = CmUtils.StringUtils.Replace(@"
  //                  declare @strDLCode_Root nvarchar(100); select @strDLCode_Root = 'VN';

  //                  update t
  //                  set
	 //                   t.DLBUCode = @strDLCode_Root
	 //                   , t.DLBUPattern = @strDLCode_Root + '%'
	 //                   , t.DLLevel = 1
  //                  from Mst_Dealer t
	 //                   left join Mst_Dealer t_Parent
		//                    on t.DLCodeParent = t_Parent.DLCode
  //                  where (1=1)
	 //                   and t.DLCode in (@strDLCode_Root)
  //                  ;

  //                  declare @nDeepDealer int; select @nDeepDealer = 0;
  //                  while (@nDeepDealer <= 6)
  //                  begin
	 //                   select @nDeepDealer = @nDeepDealer + 1;
	
	 //                   update t
	 //                   set
		//                    t.DLBUCode = IsNull(t_Parent.DLBUCode + '.', '') + t.DLCode
		//                    , t.DLBUPattern = IsNull(t_Parent.DLBUCode + '.', '') + t.DLCode + '%'
		//                    , t.DLLevel = IsNull(t_Parent.DLLevel, 0) + 1
	 //                   from Mst_Dealer t
		//                    left join Mst_Dealer t_Parent
		//	                    on t.DLCodeParent = t_Parent.DLCode
	 //                   where (1=1)
		//                    and t.DLCode not in (@strDLCode_Root)
	 //                   ;
  //                  end;
  //              ");
		//	DataSet dsPostSave = _cf.db.ExecQuery(strSqlPostSave);
		//}

		//public DataSet RptSv_Mst_Dealer_Create(
		//	string strTid
		//	, string strGwUserCode
		//	, string strGwPassword
		//	, string strWAUserCode
		//	, string strWAUserPassword
		//	, ref ArrayList alParamsCoupleError
		//	////
		//	, object objDLCode
		//	, object objDLCodeParent
		//	, object objDLType
		//	, object objProvinceCode
		//	, object objDLName
		//	, object objDLAddress
		//	, object objDLPresentBy
		//	, object objDLGovIDNumber
		//	, object objDLEmail
		//	, object objDLPhoneNo
		//	)
		//{
		//	#region // Temp:
		//	DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
		//	//int nTidSeq = 0;
		//	DateTime dtimeSys = DateTime.UtcNow;
		//	string strFunctionName = "RptSv_Mst_Dealer_Create";
		//	string strErrorCodeDefault = TError.ErridnInventory.Mst_Dealer_Create;
		//	alParamsCoupleError.AddRange(new object[]{
		//			"strFunctionName", strFunctionName
		//			, "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
  //                  ////
		//			, "objDLCode", objDLCode
		//			, "objDLCodeParent", objDLCodeParent
		//			, "objDLType", objDLType
		//			, "objProvinceCode", objProvinceCode
		//			, "objDLName", objDLName
		//			, "objDLAddress", objDLAddress
		//			, "objDLPresentBy", objDLPresentBy
		//			, "objDLGovIDNumber", objDLGovIDNumber
		//			, "objDLEmail", objDLEmail
		//			, "objDLPhoneNo", objDLPhoneNo
		//			});
		//	#endregion

		//	try
		//	{
		//		#region // Convert Input:
		//		#endregion

		//		#region // Init:
		//		//_cf.db.LogUserId = _cf.sinf.strUserCode;
		//		_cf.db.BeginTransaction();

		//		// Write RequestLog:
		//		_cf.ProcessBizReq_OutSide(
		//			strTid // strTid
		//			, strGwUserCode // strGwUserCode
		//			, strGwPassword // strGwPassword
		//			, strWAUserCode // objUserCode
		//			, strFunctionName // strFunctionName
		//			, alParamsCoupleError // alParamsCoupleError
		//			);

		//		// Sys_User_CheckAuthentication:
		//		RptSv_Sys_User_CheckAuthentication(
		//			ref alParamsCoupleError
		//			, strWAUserCode
		//			, strWAUserPassword
		//			);

		//		// Check Access/Deny:
		//		RptSv_Sys_Access_CheckDeny(
		//			ref alParamsCoupleError
		//			, strWAUserCode
		//			, strFunctionName
		//			);
		//		#endregion

		//		#region // Refine and Check Input:
		//		////
		//		string strDLCode = TUtils.CUtils.StdParam(objDLCode);
		//		string strDLCodeParent = TUtils.CUtils.StdParam(objDLCodeParent);
		//		string strDLType = TUtils.CUtils.StdParam(objDLType);
		//		string strProvinceCode = TUtils.CUtils.StdParam(objProvinceCode);
		//		string strDLName = string.Format("{0}", objDLName).Trim();
		//		string strDLAddress = string.Format("{0}", objDLAddress).Trim();
		//		string strDLPresentBy = string.Format("{0}", objDLPresentBy).Trim();
		//		string strDLGovIDNumber = string.Format("{0}", objDLGovIDNumber).Trim();
		//		string strDLEmail = string.Format("{0}", objDLEmail).Trim();
		//		string strDLPhoneNo = string.Format("{0}", objDLPhoneNo).Trim();

		//		// drAbilityOfUser:
		//		//DataRow drAbilityOfUser = Sys_User_GetAbilityViewOfUser(_cf.sinf.strUserCode);
		//		////
		//		DataTable dtDB_Mst_Dealer = null;
		//		DataTable dtDB_Mst_DealerParrent = null;
		//		{

		//			////
		//			if (strDLCode == null || strDLCode.Length < 1)
		//			{
		//				alParamsCoupleError.AddRange(new object[]{
		//					"Check.strDLCode", strDLCode
		//					});
		//				throw CmUtils.CMyException.Raise(
		//					TError.ErridnInventory.Mst_Dealer_Create_InvalidDLCode
		//					, null
		//					, alParamsCoupleError.ToArray()
		//					);
		//			}
		//			Mst_Dealer_CheckDB(
		//				ref alParamsCoupleError // alParamsCoupleError
		//				, strDLCode // objDLCode
		//				, TConst.Flag.No // strFlagExistToCheck
		//				, "" // strFlagActiveListToCheck
		//				, out dtDB_Mst_Dealer // dtDB_Mst_Dealer
		//				);
		//			////
		//			DataTable dtDB_Mst_DealerParent = null;
		//			Mst_Dealer_CheckDB(
		//				ref alParamsCoupleError // alParamsCoupleError
		//				, strDLCodeParent // objDLCode
		//				, TConst.Flag.Yes // strFlagExistToCheck
		//				, "" // strFlagActiveListToCheck
		//				, out dtDB_Mst_DealerParent // dtDB_Mst_Dealer
		//				);
		//			////
		//			if (strDLCodeParent != null && strDLCodeParent.Length > 0)
		//			{
		//				Mst_Dealer_CheckDB(
		//				ref alParamsCoupleError // alParamsCoupleError
		//				, strDLCodeParent // objDLCode
		//				, TConst.Flag.Yes // strFlagExistToCheck
		//				, TConst.Flag.Active // strFlagActiveListToCheck
		//				, out dtDB_Mst_DealerParrent // dtDB_Mst_Dealer
		//				);
		//			}
		//			DataTable dtDB_Mst_Province = null;

		//			Mst_Province_CheckDB(
		//				ref alParamsCoupleError // alParamsCoupleError
		//				, strProvinceCode // objDLCode
		//				, TConst.Flag.Yes // strFlagExistToCheck
		//				, TConst.Flag.Active // strFlagActiveListToCheck
		//				, out dtDB_Mst_Province // dtDB_Mst_Dealer
		//				);
		//			////
		//			if (strDLName.Length < 1)
		//			{
		//				alParamsCoupleError.AddRange(new object[]{
		//					"Check.strDLName", strDLName
		//					});
		//				throw CmUtils.CMyException.Raise(
		//					TError.ErridnInventory.Mst_Dealer_Create_InvalidDLName
		//					, null
		//					, alParamsCoupleError.ToArray()
		//					);
		//			}
		//		}
		//		#endregion

		//		#region // SaveDB Mst_Dealer:
		//		{
		//			// Init:
		//			//ArrayList alColumnEffective = new ArrayList();
		//			string strFN = "";
		//			DataRow drDB = dtDB_Mst_Dealer.NewRow();
		//			strFN = "DLCode"; drDB[strFN] = strDLCode;
		//			strFN = "DLCodeParent"; drDB[strFN] = strDLCodeParent;
		//			strFN = "NetworkID"; drDB[strFN] = nNetworkID;
		//			strFN = "DLBUCode"; drDB[strFN] = "X";
		//			strFN = "DLBUPattern"; drDB[strFN] = "X";
		//			strFN = "DLLevel"; drDB[strFN] = 1;
		//			strFN = "DLType"; drDB[strFN] = strDLType;
		//			strFN = "ProvinceCode"; drDB[strFN] = strProvinceCode;
		//			strFN = "DLName"; drDB[strFN] = strDLName;
		//			strFN = "DLAddress"; drDB[strFN] = strDLAddress;
		//			strFN = "DLPresentBy"; drDB[strFN] = strDLPresentBy;
		//			strFN = "DLGovIDNumber"; drDB[strFN] = strDLGovIDNumber;
		//			strFN = "DLEmail"; drDB[strFN] = strDLEmail;
		//			strFN = "DLPhoneNo"; drDB[strFN] = strDLPhoneNo;
		//			strFN = "FlagActive"; drDB[strFN] = TConst.Flag.Active;
		//			strFN = "LogLUDTimeUTC"; drDB[strFN] = dtimeSys.ToString("yyyy-MM-dd HH:mm:ss");
		//			strFN = "LogLUBy"; drDB[strFN] = strWAUserCode;
		//			dtDB_Mst_Dealer.Rows.Add(drDB);

		//			// Save:
		//			_cf.db.SaveData(
		//				"Mst_Dealer"
		//				, dtDB_Mst_Dealer
		//				//, alColumnEffective.ToArray()
		//				);
		//		}
		//		#endregion

		//		#region // Post Save:
		//		{
		//			Mst_Dealer_UpdBU();
		//		}
		//		#endregion

		//		// Return Good:
		//		TDALUtils.DBUtils.CommitSafety(_cf.db);
		//		mdsFinal.AcceptChanges();
		//		return mdsFinal;
		//	}
		//	catch (Exception exc)
		//	{
		//		#region // Catch of try:
		//		// Rollback:
		//		TDALUtils.DBUtils.RollbackSafety(_cf.db);

		//		// Return Bad:
		//		return TUtils.CProcessExc.Process(
		//			ref mdsFinal
		//			, exc
		//			, strErrorCodeDefault
		//			, alParamsCoupleError.ToArray()
		//			);
		//		#endregion
		//	}
		//	finally
		//	{
		//		#region // Finally of try:
		//		// Rollback and Release resources:
		//		TDALUtils.DBUtils.RollbackSafety(_cf.db);
		//		TDALUtils.DBUtils.ReleaseAllSemaphore(_cf.db_Sys, true);

		//		// Write ReturnLog:
		//		_cf.ProcessBizReturn_OutSide(
		//			ref mdsFinal // mdsFinal
		//			, strTid // strTid
		//			, strGwUserCode // strGwUserCode
		//			, strGwPassword // strGwPassword
		//			, strWAUserCode // objUserCode
		//			, strFunctionName // strFunctionName
		//			);
		//		#endregion
		//	}
		//}

		//public DataSet RptSv_Mst_Dealer_Update(
		//	string strTid
		//	, string strGwUserCode
		//	, string strGwPassword
		//	, string strWAUserCode
		//	, string strWAUserPassword
		//	, ref ArrayList alParamsCoupleError
		//	////
		//	, object objDLCode
		//	, object objProvinceCode
		//	, object objDLName
		//	, object objDLAddress
		//	, object objDLPresentBy
		//	, object objDLGovIDNumber
		//	, object objDLEmail
		//	, object objDLPhoneNo
		//	, object objFlagActive
		//	////
		//	, object objFt_Cols_Upd
		//	)
		//{
		//	#region // Temp:
		//	DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
		//	//int nTidSeq = 0;
		//	DateTime dtimeSys = DateTime.UtcNow;
		//	string strFunctionName = "RptSv_Mst_Dealer_Update";
		//	string strErrorCodeDefault = TError.ErridnInventory.Mst_Dealer_Update;
		//	alParamsCoupleError.AddRange(new object[]{
		//			"strFunctionName", strFunctionName
		//			, "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
		//			////
		//			, "objDLCode", objDLCode
		//			, "objProvinceCode", objProvinceCode
		//			, "objDLName", objDLName
		//			, "objDLAddress", objDLAddress
		//			, "objDLPresentBy", objDLPresentBy
		//			, "objDLGovIDNumber", objDLGovIDNumber
		//			, "objDLEmail", objDLEmail
		//			, "objDLPhoneNo", objDLPhoneNo
		//			, "objFlagActive", objFlagActive
		//			////
		//			, "objFt_Cols_Upd", objFt_Cols_Upd
		//			});
		//	#endregion

		//	try
		//	{
		//		#region // Init:
		//		//_cf.db.LogUserId = _cf.sinf.strUserCode;
		//		_cf.db.BeginTransaction();

		//		// Write RequestLog:
		//		_cf.ProcessBizReq_OutSide(
		//			strTid // strTid
		//			, strGwUserCode // strGwUserCode
		//			, strGwPassword // strGwPassword
		//			, strWAUserCode // objUserCode
		//			, strFunctionName // strFunctionName
		//			, alParamsCoupleError // alParamsCoupleError
		//			);

		//		// Sys_User_CheckAuthentication:
		//		Sys_User_CheckAuthentication(
		//			ref alParamsCoupleError
		//			, strWAUserCode
		//			, strWAUserPassword
		//			);

		//		// Check Access/Deny:
		//		RptSv_Sys_Access_CheckDeny(
		//			ref alParamsCoupleError
		//			, strWAUserCode
		//			, strFunctionName
		//			);
		//		#endregion

		//		#region // Refine and Check Input:
		//		////
		//		string strFt_Cols_Upd = TUtils.CUtils.StdParam(objFt_Cols_Upd);
		//		strFt_Cols_Upd = (strFt_Cols_Upd == null ? "" : strFt_Cols_Upd);
		//		////
		//		string strDLCode = TUtils.CUtils.StdParam(objDLCode);
		//		string strProvinceCode = TUtils.CUtils.StdParam(objProvinceCode);
		//		string strDLName = string.Format("{0}", objDLName).Trim();
		//		string strDLAddress = string.Format("{0}", objDLAddress).Trim();
		//		string strDLPresentBy = string.Format("{0}", objDLPresentBy).Trim();
		//		string strDLGovIDNumber = string.Format("{0}", objDLGovIDNumber).Trim();
		//		string strDLEmail = string.Format("{0}", objDLEmail).Trim();
		//		string strDLPhoneNo = string.Format("{0}", objDLPhoneNo).Trim();
		//		string strFlagActive = TUtils.CUtils.StdFlag(objFlagActive);
		//		////
		//		bool bUpd_ProvinceCode = strFt_Cols_Upd.Contains("Mst_Dealer.ProvinceCode".ToUpper());
		//		bool bUpd_DLName = strFt_Cols_Upd.Contains("Mst_Dealer.DLName".ToUpper());
		//		bool bUpd_DLAddress = strFt_Cols_Upd.Contains("Mst_Dealer.DLAddress".ToUpper());
		//		bool bUpd_DLPresentBy = strFt_Cols_Upd.Contains("Mst_Dealer.DLPresentBy".ToUpper());
		//		bool bUpd_DLGovIDNumber = strFt_Cols_Upd.Contains("Mst_Dealer.DLGovIDNumber".ToUpper());
		//		bool bUpd_DLEmail = strFt_Cols_Upd.Contains("Mst_Dealer.DLEmail".ToUpper());
		//		bool bUpd_DLPhoneNo = strFt_Cols_Upd.Contains("Mst_Dealer.DLPhoneNo".ToUpper());
		//		bool bUpd_FlagActive = strFt_Cols_Upd.Contains("Mst_Dealer.FlagActive".ToUpper());

		//		////
		//		DataTable dtDB_Mst_Dealer = null;
		//		{
		//			////
		//			Mst_Dealer_CheckDB(
		//				 ref alParamsCoupleError // alParamsCoupleError
		//				 , strDLCode // objDLCode 
		//				 , TConst.Flag.Yes // strFlagExistToCheck
		//				 , "" // strFlagActiveListToCheck
		//				 , out dtDB_Mst_Dealer // dtDB_Mst_Dealer
		//				);
		//			////
		//			DataTable dtDB_Mst_Province = null;

		//			Mst_Province_CheckDB(
		//				 ref alParamsCoupleError // alParamsCoupleError
		//				 , strProvinceCode // objstrProvinceCode
		//				 , TConst.Flag.Yes // strFlagExistToCheck
		//				 , TConst.Flag.Yes // strFlagActiveListToCheck
		//				 , out dtDB_Mst_Province // dtDB_Mst_Province
		//				);
		//			////
		//			if (bUpd_DLName && string.IsNullOrEmpty(strDLName))
		//			{
		//				alParamsCoupleError.AddRange(new object[]{
		//					"Check.strDLName", strDLName
		//					});
		//				throw CmUtils.CMyException.Raise(
		//					TError.ErridnInventory.Mst_Dealer_Update_InvalidDLName
		//					, null
		//					, alParamsCoupleError.ToArray()
		//					);
		//			}
		//		}
		//		#endregion

		//		#region // Save Mst_Dealer:
		//		{
		//			// Init:
		//			ArrayList alColumnEffective = new ArrayList();
		//			string strFN = "";
		//			DataRow drDB = dtDB_Mst_Dealer.Rows[0];
		//			if (bUpd_ProvinceCode) { strFN = "ProvinceCode"; drDB[strFN] = strProvinceCode; alColumnEffective.Add(strFN); }
		//			if (bUpd_DLName) { strFN = "DLName"; drDB[strFN] = strDLName; alColumnEffective.Add(strFN); }
		//			if (bUpd_DLAddress) { strFN = "DLAddress"; drDB[strFN] = strDLAddress; alColumnEffective.Add(strFN); }
		//			if (bUpd_DLPresentBy) { strFN = "DLPresentBy"; drDB[strFN] = strDLPresentBy; alColumnEffective.Add(strFN); }
		//			if (bUpd_DLGovIDNumber) { strFN = "DLGovIDNumber"; drDB[strFN] = strDLGovIDNumber; alColumnEffective.Add(strFN); }
		//			if (bUpd_DLEmail) { strFN = "DLEmail"; drDB[strFN] = strDLEmail; alColumnEffective.Add(strFN); }
		//			if (bUpd_DLPhoneNo) { strFN = "DLPhoneNo"; drDB[strFN] = strDLPhoneNo; alColumnEffective.Add(strFN); }
		//			if (bUpd_FlagActive) { strFN = "FlagActive"; drDB[strFN] = strFlagActive; alColumnEffective.Add(strFN); }
		//			strFN = "LogLUDTimeUTC"; drDB[strFN] = dtimeSys.ToString("yyyy-MM-dd HH:mm:ss"); alColumnEffective.Add(strFN);
		//			strFN = "LogLUBy"; drDB[strFN] = strWAUserCode; alColumnEffective.Add(strFN);

		//			// Save:
		//			_cf.db.SaveData(
		//				"Mst_Dealer"
		//				, dtDB_Mst_Dealer
		//				, alColumnEffective.ToArray()
		//				);
		//		}
		//		#endregion

		//		// Return Good:
		//		TDALUtils.DBUtils.CommitSafety(_cf.db);
		//		mdsFinal.AcceptChanges();
		//		return mdsFinal;
		//	}
		//	catch (Exception exc)
		//	{
		//		#region // Catch of try:
		//		// Rollback:
		//		TDALUtils.DBUtils.RollbackSafety(_cf.db);

		//		// Return Bad:
		//		return TUtils.CProcessExc.Process(
		//			ref mdsFinal
		//			, exc
		//			, strErrorCodeDefault
		//			, alParamsCoupleError.ToArray()
		//			);
		//		#endregion
		//	}
		//	finally
		//	{
		//		#region // Finally of try:
		//		// Rollback and Release resources:
		//		TDALUtils.DBUtils.RollbackSafety(_cf.db);
		//		TDALUtils.DBUtils.ReleaseAllSemaphore(_cf.db_Sys, true);

		//		// Write ReturnLog:
		//		_cf.ProcessBizReturn_OutSide(
		//			ref mdsFinal // mdsFinal
		//			, strTid // strTid
		//			, strGwUserCode // strGwUserCode
		//			, strGwPassword // strGwPassword
		//			, strWAUserCode // objUserCode
		//			, strFunctionName // strFunctionName
		//			);
		//		#endregion
		//	}
		//}

		//public DataSet Mst_Dealer_Update(
		//	string strTid
		//	, string strGwUserCode
		//	, string strGwPassword
		//	, string strWAUserCode
		//	, string strWAUserPassword
		//	, ref ArrayList alParamsCoupleError
		//	////
		//	, object objDLCode
		//	, object objProvinceCode
		//	, object objDLName
		//	, object objDLAddress
		//	, object objDLPresentBy
		//	, object objDLGovIDNumber
		//	, object objDLEmail
		//	, object objDLPhoneNo
		//	, object objFlagActive
		//	////
		//	, object objFt_Cols_Upd
		//	)
		//{
		//	#region // Temp:
		//	DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
		//	//int nTidSeq = 0;
		//	DateTime dtimeSys = DateTime.UtcNow;
		//	string strFunctionName = "Mst_Dealer_Update";
		//	string strErrorCodeDefault = TError.ErridnInventory.Mst_Dealer_Update;
		//	alParamsCoupleError.AddRange(new object[]{
		//			"strFunctionName", strFunctionName
		//			, "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
		//			////
		//			, "objDLCode", objDLCode
		//			, "objProvinceCode", objProvinceCode
		//			, "objDLName", objDLName
		//			, "objDLAddress", objDLAddress
		//			, "objDLPresentBy", objDLPresentBy
		//			, "objDLGovIDNumber", objDLGovIDNumber
		//			, "objDLEmail", objDLEmail
		//			, "objDLPhoneNo", objDLPhoneNo
		//			, "objFlagActive", objFlagActive
		//			////
		//			, "objFt_Cols_Upd", objFt_Cols_Upd
		//			});
		//	#endregion

		//	try
		//	{
		//		#region // Init:
		//		//_cf.db.LogUserId = _cf.sinf.strUserCode;
		//		_cf.db.BeginTransaction();

		//		// Write RequestLog:
		//		_cf.ProcessBizReq_OutSide(
		//			strTid // strTid
		//			, strGwUserCode // strGwUserCode
		//			, strGwPassword // strGwPassword
		//			, strWAUserCode // objUserCode
		//			, strFunctionName // strFunctionName
		//			, alParamsCoupleError // alParamsCoupleError
		//			);

		//		// Sys_User_CheckAuthentication:
		//		Sys_User_CheckAuthentication(
		//			ref alParamsCoupleError
		//			, strWAUserCode
		//			, strWAUserPassword
		//			);

		//		// Check Access/Deny:
		//		Sys_Access_CheckDenyV30(
		//			ref alParamsCoupleError
		//			, strWAUserCode
		//			, strFunctionName
		//			);
		//		#endregion

		//		#region // Refine and Check Input:
		//		////
		//		string strFt_Cols_Upd = TUtils.CUtils.StdParam(objFt_Cols_Upd);
		//		strFt_Cols_Upd = (strFt_Cols_Upd == null ? "" : strFt_Cols_Upd);
		//		////
		//		string strDLCode = TUtils.CUtils.StdParam(objDLCode);
		//		string strProvinceCode = TUtils.CUtils.StdParam(objProvinceCode);
		//		string strDLName = string.Format("{0}", objDLName).Trim();
		//		string strDLAddress = string.Format("{0}", objDLAddress).Trim();
		//		string strDLPresentBy = string.Format("{0}", objDLPresentBy).Trim();
		//		string strDLGovIDNumber = string.Format("{0}", objDLGovIDNumber).Trim();
		//		string strDLEmail = string.Format("{0}", objDLEmail).Trim();
		//		string strDLPhoneNo = string.Format("{0}", objDLPhoneNo).Trim();
		//		string strFlagActive = TUtils.CUtils.StdFlag(objFlagActive);
		//		////
		//		bool bUpd_ProvinceCode = strFt_Cols_Upd.Contains("Mst_Dealer.ProvinceCode".ToUpper());
		//		bool bUpd_DLName = strFt_Cols_Upd.Contains("Mst_Dealer.DLName".ToUpper());
		//		bool bUpd_DLAddress = strFt_Cols_Upd.Contains("Mst_Dealer.DLAddress".ToUpper());
		//		bool bUpd_DLPresentBy = strFt_Cols_Upd.Contains("Mst_Dealer.DLPresentBy".ToUpper());
		//		bool bUpd_DLGovIDNumber = strFt_Cols_Upd.Contains("Mst_Dealer.DLGovIDNumber".ToUpper());
		//		bool bUpd_DLEmail = strFt_Cols_Upd.Contains("Mst_Dealer.DLEmail".ToUpper());
		//		bool bUpd_DLPhoneNo = strFt_Cols_Upd.Contains("Mst_Dealer.DLPhoneNo".ToUpper());
		//		bool bUpd_FlagActive = strFt_Cols_Upd.Contains("Mst_Dealer.FlagActive".ToUpper());

		//		////
		//		DataTable dtDB_Mst_Dealer = null;
		//		{
		//			////
		//			Mst_Dealer_CheckDB(
		//				 ref alParamsCoupleError // alParamsCoupleError
		//				 , strDLCode // objDLCode 
		//				 , TConst.Flag.Yes // strFlagExistToCheck
		//				 , "" // strFlagActiveListToCheck
		//				 , out dtDB_Mst_Dealer // dtDB_Mst_Dealer
		//				);
		//			////
		//			DataTable dtDB_Mst_Province = null;

		//			Mst_Province_CheckDB(
		//				 ref alParamsCoupleError // alParamsCoupleError
		//				 , strProvinceCode // objstrProvinceCode
		//				 , TConst.Flag.Yes // strFlagExistToCheck
		//				 , TConst.Flag.Yes // strFlagActiveListToCheck
		//				 , out dtDB_Mst_Province // dtDB_Mst_Province
		//				);
		//			////
		//			if (bUpd_DLName && string.IsNullOrEmpty(strDLName))
		//			{
		//				alParamsCoupleError.AddRange(new object[]{
		//					"Check.strDLName", strDLName
		//					});
		//				throw CmUtils.CMyException.Raise(
		//					TError.ErridnInventory.Mst_Dealer_Update_InvalidDLName
		//					, null
		//					, alParamsCoupleError.ToArray()
		//					);
		//			}
		//		}
		//		#endregion

		//		#region // Save Mst_Dealer:
		//		{
		//			// Init:
		//			ArrayList alColumnEffective = new ArrayList();
		//			string strFN = "";
		//			DataRow drDB = dtDB_Mst_Dealer.Rows[0];
		//			if (bUpd_ProvinceCode) { strFN = "ProvinceCode"; drDB[strFN] = strProvinceCode; alColumnEffective.Add(strFN); }
		//			if (bUpd_DLName) { strFN = "DLName"; drDB[strFN] = strDLName; alColumnEffective.Add(strFN); }
		//			if (bUpd_DLAddress) { strFN = "DLAddress"; drDB[strFN] = strDLAddress; alColumnEffective.Add(strFN); }
		//			if (bUpd_DLPresentBy) { strFN = "DLPresentBy"; drDB[strFN] = strDLPresentBy; alColumnEffective.Add(strFN); }
		//			if (bUpd_DLGovIDNumber) { strFN = "DLGovIDNumber"; drDB[strFN] = strDLGovIDNumber; alColumnEffective.Add(strFN); }
		//			if (bUpd_DLEmail) { strFN = "DLEmail"; drDB[strFN] = strDLEmail; alColumnEffective.Add(strFN); }
		//			if (bUpd_DLPhoneNo) { strFN = "DLPhoneNo"; drDB[strFN] = strDLPhoneNo; alColumnEffective.Add(strFN); }
		//			if (bUpd_FlagActive) { strFN = "FlagActive"; drDB[strFN] = strFlagActive; alColumnEffective.Add(strFN); }
		//			strFN = "LogLUDTimeUTC"; drDB[strFN] = dtimeSys.ToString("yyyy-MM-dd HH:mm:ss"); alColumnEffective.Add(strFN);
		//			strFN = "LogLUBy"; drDB[strFN] = strWAUserCode; alColumnEffective.Add(strFN);

		//			// Save:
		//			_cf.db.SaveData(
		//				"Mst_Dealer"
		//				, dtDB_Mst_Dealer
		//				, alColumnEffective.ToArray()
		//				);
		//		}
		//		#endregion

		//		// Return Good:
		//		TDALUtils.DBUtils.CommitSafety(_cf.db);
		//		mdsFinal.AcceptChanges();
		//		return mdsFinal;
		//	}
		//	catch (Exception exc)
		//	{
		//		#region // Catch of try:
		//		// Rollback:
		//		TDALUtils.DBUtils.RollbackSafety(_cf.db);

		//		// Return Bad:
		//		return TUtils.CProcessExc.Process(
		//			ref mdsFinal
		//			, exc
		//			, strErrorCodeDefault
		//			, alParamsCoupleError.ToArray()
		//			);
		//		#endregion
		//	}
		//	finally
		//	{
		//		#region // Finally of try:
		//		// Rollback and Release resources:
		//		TDALUtils.DBUtils.RollbackSafety(_cf.db);
		//		TDALUtils.DBUtils.ReleaseAllSemaphore(_cf.db_Sys, true);

		//		// Write ReturnLog:
		//		_cf.ProcessBizReturn_OutSide(
		//			ref mdsFinal // mdsFinal
		//			, strTid // strTid
		//			, strGwUserCode // strGwUserCode
		//			, strGwPassword // strGwPassword
		//			, strWAUserCode // objUserCode
		//			, strFunctionName // strFunctionName
		//			);
		//		#endregion
		//	}
		//}

		//public DataSet RptSv_Mst_Dealer_Delete(
		//	string strTid
		//	, string strGwUserCode
		//	, string strGwPassword
		//	, string strWAUserCode
		//	, string strWAUserPassword
		//	, ref ArrayList alParamsCoupleError
		//	/////
		//	, object objDLCode
		//	)
		//{
		//	#region // Temp:
		//	DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
		//	//int nTidSeq = 0;
		//	DateTime dtimeSys = DateTime.UtcNow;
		//	string strFunctionName = "RptSv_Mst_Dealer_Delete";
		//	string strErrorCodeDefault = TError.ErridnInventory.Mst_Dealer_Delete;
		//	alParamsCoupleError.AddRange(new object[]{
		//			"strFunctionName", strFunctionName
		//			, "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
		//			////
		//			, "objDLCode", objDLCode
		//			});
		//	#endregion

		//	try
		//	{
		//		#region // Init:
		//		//_cf.db.LogUserId = _cf.sinf.strUserCode;
		//		_cf.db.BeginTransaction();

		//		// Write RequestLog:
		//		_cf.ProcessBizReq_OutSide(
		//			strTid // strTid
		//			, strGwUserCode // strGwUserCode
		//			, strGwPassword // strGwPassword
		//			, strWAUserCode // objUserCode
		//			, strFunctionName // strFunctionName
		//			, alParamsCoupleError // alParamsCoupleError
		//			);

		//		// Sys_User_CheckAuthentication:
		//		Sys_User_CheckAuthentication(
		//			ref alParamsCoupleError
		//			, strWAUserCode
		//			, strWAUserPassword
		//			);

		//		// Check Access/Deny:
		//		RptSv_Sys_Access_CheckDeny(
		//			ref alParamsCoupleError
		//			, strWAUserCode
		//			, strFunctionName
		//			);
		//		#endregion

		//		#region // Refine and Check Input:
		//		////
		//		string strDLCode = TUtils.CUtils.StdParam(objDLCode);
		//		////
		//		DataTable dtDB_Mst_Dealer = null;
		//		{
		//			////
		//			Mst_Dealer_CheckDB(
		//				 ref alParamsCoupleError // alParamsCoupleError
		//				 , strDLCode // objDLCode
		//				 , TConst.Flag.Yes // strFlagExistToCheck
		//				 , "" // strFlagActiveListToCheck
		//				 , out dtDB_Mst_Dealer // dtDB_Mst_Dealer
		//				);
		//		}
		//		#endregion

		//		#region // SaveDB Mst_Dealer:
		//		{
		//			// Init:
		//			dtDB_Mst_Dealer.Rows[0].Delete();

		//			// Save:
		//			_cf.db.SaveData(
		//				"Mst_Dealer"
		//				, dtDB_Mst_Dealer
		//				);
		//		}
		//		#endregion

		//		// Return Good:
		//		TDALUtils.DBUtils.CommitSafety(_cf.db);
		//		mdsFinal.AcceptChanges();
		//		return mdsFinal;
		//	}
		//	catch (Exception exc)
		//	{
		//		#region // Catch of try:
		//		// Rollback:
		//		TDALUtils.DBUtils.RollbackSafety(_cf.db);

		//		// Return Bad:
		//		return TUtils.CProcessExc.Process(
		//			ref mdsFinal
		//			, exc
		//			, strErrorCodeDefault
		//			, alParamsCoupleError.ToArray()
		//			);
		//		#endregion
		//	}
		//	finally
		//	{
		//		#region // Finally of try:
		//		// Rollback and Release resources:
		//		TDALUtils.DBUtils.RollbackSafety(_cf.db);
		//		TDALUtils.DBUtils.ReleaseAllSemaphore(_cf.db_Sys, true);

		//		// Write ReturnLog:
		//		_cf.ProcessBizReturn_OutSide(
		//			ref mdsFinal // mdsFinal
		//			, strTid // strTid
		//			, strGwUserCode // strGwUserCode
		//			, strGwPassword // strGwPassword
		//			, strWAUserCode // objUserCode
		//			, strFunctionName // strFunctionName
		//			);
		//		#endregion
		//	}
		//}

		//public DataSet Mst_Dealer_Delete(
		//	string strTid
		//	, string strGwUserCode
		//	, string strGwPassword
		//	, string strWAUserCode
		//	, string strWAUserPassword
		//	, ref ArrayList alParamsCoupleError
		//	/////
		//	, object objDLCode
		//	)
		//{
		//	#region // Temp:
		//	DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
		//	//int nTidSeq = 0;
		//	DateTime dtimeSys = DateTime.UtcNow;
		//	string strFunctionName = "Mst_Dealer_Delete";
		//	string strErrorCodeDefault = TError.ErridnInventory.Mst_Dealer_Delete;
		//	alParamsCoupleError.AddRange(new object[]{
		//			"strFunctionName", strFunctionName
		//			, "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
		//			////
		//			, "objDLCode", objDLCode
		//			});
		//	#endregion

		//	try
		//	{
		//		#region // Init:
		//		//_cf.db.LogUserId = _cf.sinf.strUserCode;
		//		_cf.db.BeginTransaction();

		//		// Write RequestLog:
		//		_cf.ProcessBizReq_OutSide(
		//			strTid // strTid
		//			, strGwUserCode // strGwUserCode
		//			, strGwPassword // strGwPassword
		//			, strWAUserCode // objUserCode
		//			, strFunctionName // strFunctionName
		//			, alParamsCoupleError // alParamsCoupleError
		//			);

		//		// Sys_User_CheckAuthentication:
		//		Sys_User_CheckAuthentication(
		//			ref alParamsCoupleError
		//			, strWAUserCode
		//			, strWAUserPassword
		//			);

		//		// Check Access/Deny:
		//		Sys_Access_CheckDenyV30(
		//			ref alParamsCoupleError
		//			, strWAUserCode
		//			, strFunctionName
		//			);
		//		#endregion

		//		#region // Refine and Check Input:
		//		////
		//		string strDLCode = TUtils.CUtils.StdParam(objDLCode);
		//		////
		//		DataTable dtDB_Mst_Dealer = null;
		//		{
		//			////
		//			Mst_Dealer_CheckDB(
		//				 ref alParamsCoupleError // alParamsCoupleError
		//				 , strDLCode // objDLCode
		//				 , TConst.Flag.Yes // strFlagExistToCheck
		//				 , "" // strFlagActiveListToCheck
		//				 , out dtDB_Mst_Dealer // dtDB_Mst_Dealer
		//				);
		//		}
		//		#endregion

		//		#region // SaveDB Mst_Dealer:
		//		{
		//			// Init:
		//			dtDB_Mst_Dealer.Rows[0].Delete();

		//			// Save:
		//			_cf.db.SaveData(
		//				"Mst_Dealer"
		//				, dtDB_Mst_Dealer
		//				);
		//		}
		//		#endregion

		//		// Return Good:
		//		TDALUtils.DBUtils.CommitSafety(_cf.db);
		//		mdsFinal.AcceptChanges();
		//		return mdsFinal;
		//	}
		//	catch (Exception exc)
		//	{
		//		#region // Catch of try:
		//		// Rollback:
		//		TDALUtils.DBUtils.RollbackSafety(_cf.db);

		//		// Return Bad:
		//		return TUtils.CProcessExc.Process(
		//			ref mdsFinal
		//			, exc
		//			, strErrorCodeDefault
		//			, alParamsCoupleError.ToArray()
		//			);
		//		#endregion
		//	}
		//	finally
		//	{
		//		#region // Finally of try:
		//		// Rollback and Release resources:
		//		TDALUtils.DBUtils.RollbackSafety(_cf.db);
		//		TDALUtils.DBUtils.ReleaseAllSemaphore(_cf.db_Sys, true);

		//		// Write ReturnLog:
		//		_cf.ProcessBizReturn_OutSide(
		//			ref mdsFinal // mdsFinal
		//			, strTid // strTid
		//			, strGwUserCode // strGwUserCode
		//			, strGwPassword // strGwPassword
		//			, strWAUserCode // objUserCode
		//			, strFunctionName // strFunctionName
		//			);
		//		#endregion
		//	}
		//}

		//public DataSet WAS_Mst_Dealer_Get(
		//	ref ArrayList alParamsCoupleError
		//	, RQ_Mst_Dealer objRQ_Mst_Dealer
		//	////
		//	, out RT_Mst_Dealer objRT_Mst_Dealer
		//	)
		//{
		//	#region // Temp:
		//	string strTid = objRQ_Mst_Dealer.Tid;
		//	objRT_Mst_Dealer = new RT_Mst_Dealer();
		//	DataSet mdsResult = CmUtils.CMyDataSet.NewMyDataSet(strTid);
		//	DateTime dtimeSys = DateTime.UtcNow;
		//	//DataSet mdsExec = null;
		//	//DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(objRQ_Mst_Dealer.Tid);
		//	//int nTidSeq = 0;
		//	//bool bNeedTransaction = true;
		//	string strFunctionName = "WAS_Mst_Dealer_Get";
		//	string strErrorCodeDefault = TError.ErridnInventory.WAS_Mst_Dealer_Get;
		//	alParamsCoupleError.AddRange(new object[]{
		//		"strFunctionName", strFunctionName
		//		, "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
		//		////
		//		});
		//	#endregion

		//	try
		//	{
		//		#region // Init:
		//		#endregion

		//		#region // Refine and Check Input:
		//		List<MySummaryTable> lst_MySummaryTable = new List<MySummaryTable>();

		//		List<Mst_Dealer> lst_Mst_Dealer = new List<Mst_Dealer>();
		//		bool bGet_Mst_Dealer = (objRQ_Mst_Dealer.Rt_Cols_Mst_Dealer != null && objRQ_Mst_Dealer.Rt_Cols_Mst_Dealer.Length > 0);
		//		#endregion

		//		#region // WS_Mst_Dealer_Get:
		//		mdsResult = Mst_Dealer_Get(
		//			objRQ_Mst_Dealer.Tid // strTid
		//			, objRQ_Mst_Dealer.GwUserCode // strGwUserCode
		//			, objRQ_Mst_Dealer.GwPassword // strGwPassword
		//			, objRQ_Mst_Dealer.WAUserCode // strUserCode
		//			, objRQ_Mst_Dealer.WAUserPassword // strUserPassword
		//			, ref alParamsCoupleError // alParamsCoupleError
		//									  //// Filter:
		//			, objRQ_Mst_Dealer.Ft_RecordStart // strFt_RecordStart
		//			, objRQ_Mst_Dealer.Ft_RecordCount // strFt_RecordCount
		//			, objRQ_Mst_Dealer.Ft_WhereClause // strFt_WhereClause
		//											  //// Return:
		//			, objRQ_Mst_Dealer.Rt_Cols_Mst_Dealer // strRt_Cols_Mst_Dealer
		//			);
		//		#endregion

		//		#region // GetData:
		//		if (!CmUtils.CMyDataSet.HasError(mdsResult))
		//		{
		//			////
		//			DataTable dt_MySummaryTable = mdsResult.Tables["MySummaryTable"].Copy();
		//			lst_MySummaryTable = TUtils.DataTableCmUtils.ToListof<MySummaryTable>(dt_MySummaryTable);
		//			objRT_Mst_Dealer.MySummaryTable = lst_MySummaryTable[0];

		//			////
		//			if (bGet_Mst_Dealer)
		//			{
		//				////
		//				DataTable dt_Mst_Dealer = mdsResult.Tables["Mst_Dealer"].Copy();
		//				lst_Mst_Dealer = TUtils.DataTableCmUtils.ToListof<Mst_Dealer>(dt_Mst_Dealer);
		//				objRT_Mst_Dealer.Lst_Mst_Dealer = lst_Mst_Dealer;
		//			}
		//		}
		//		#endregion

		//		// Return Good:
		//		return mdsResult;
		//	}
		//	catch (Exception exc)
		//	{
		//		#region // Catch of try:
		//		// Return Bad:
		//		return TUtils.CProcessExc.Process(
		//			ref mdsResult
		//			, exc
		//			, strErrorCodeDefault
		//			, alParamsCoupleError.ToArray()
		//			);
		//		#endregion
		//	}
		//	finally
		//	{
		//		#region // Finally of try:
		//		// Write ReturnLog:
		//		//_cf.ProcessBizReturn(
		//		//	ref mdsResult // mdsFinal
		//		//	, strTid // strTid
		//		//	, strFunctionName // strFunctionName
		//		//	);
		//		#endregion
		//	}
		//}

		//public DataSet WAS_RptSv_Mst_Dealer_Get(
		//	ref ArrayList alParamsCoupleError
		//	, RQ_Mst_Dealer objRQ_Mst_Dealer
		//	////
		//	, out RT_Mst_Dealer objRT_Mst_Dealer
		//	)
		//{
		//	#region // Temp:
		//	string strTid = objRQ_Mst_Dealer.Tid;
		//	objRT_Mst_Dealer = new RT_Mst_Dealer();
		//	DataSet mdsResult = CmUtils.CMyDataSet.NewMyDataSet(strTid);
		//	DateTime dtimeSys = DateTime.UtcNow;
		//	//DataSet mdsExec = null;
		//	//DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(objRQ_Mst_Dealer.Tid);
		//	//int nTidSeq = 0;
		//	//bool bNeedTransaction = true;
		//	string strFunctionName = "WAS_RptSv_Mst_Dealer_Get";
		//	string strErrorCodeDefault = TError.ErridnInventory.WAS_Mst_Dealer_Get;
		//	alParamsCoupleError.AddRange(new object[]{
		//		"strFunctionName", strFunctionName
		//		, "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
		//		////
		//		});
		//	#endregion

		//	try
		//	{
		//		#region // Init:
		//		#endregion

		//		#region // Refine and Check Input:
		//		List<MySummaryTable> lst_MySummaryTable = new List<MySummaryTable>();

		//		List<Mst_Dealer> lst_Mst_Dealer = new List<Mst_Dealer>();
		//		bool bGet_Mst_Dealer = (objRQ_Mst_Dealer.Rt_Cols_Mst_Dealer != null && objRQ_Mst_Dealer.Rt_Cols_Mst_Dealer.Length > 0);
		//		#endregion

		//		#region // WS_Mst_Dealer_Get:
		//		mdsResult = RptSv_Mst_Dealer_Get(
		//			objRQ_Mst_Dealer.Tid // strTid
		//			, objRQ_Mst_Dealer.GwUserCode // strGwUserCode
		//			, objRQ_Mst_Dealer.GwPassword // strGwPassword
		//			, objRQ_Mst_Dealer.WAUserCode // strUserCode
		//			, objRQ_Mst_Dealer.WAUserPassword // strUserPassword
		//			, ref alParamsCoupleError // alParamsCoupleError
		//									  //// Filter:
		//			, objRQ_Mst_Dealer.Ft_RecordStart // strFt_RecordStart
		//			, objRQ_Mst_Dealer.Ft_RecordCount // strFt_RecordCount
		//			, objRQ_Mst_Dealer.Ft_WhereClause // strFt_WhereClause
		//											  //// Return:
		//			, objRQ_Mst_Dealer.Rt_Cols_Mst_Dealer // strRt_Cols_Mst_Dealer
		//			);
		//		#endregion

		//		#region // GetData:
		//		if (!CmUtils.CMyDataSet.HasError(mdsResult))
		//		{
		//			////
		//			DataTable dt_MySummaryTable = mdsResult.Tables["MySummaryTable"].Copy();
		//			lst_MySummaryTable = TUtils.DataTableCmUtils.ToListof<MySummaryTable>(dt_MySummaryTable);
		//			objRT_Mst_Dealer.MySummaryTable = lst_MySummaryTable[0];

		//			////
		//			if (bGet_Mst_Dealer)
		//			{
		//				////
		//				DataTable dt_Mst_Dealer = mdsResult.Tables["Mst_Dealer"].Copy();
		//				lst_Mst_Dealer = TUtils.DataTableCmUtils.ToListof<Mst_Dealer>(dt_Mst_Dealer);
		//				objRT_Mst_Dealer.Lst_Mst_Dealer = lst_Mst_Dealer;
		//			}
		//		}
		//		#endregion

		//		// Return Good:
		//		return mdsResult;
		//	}
		//	catch (Exception exc)
		//	{
		//		#region // Catch of try:
		//		// Return Bad:
		//		return TUtils.CProcessExc.Process(
		//			ref mdsResult
		//			, exc
		//			, strErrorCodeDefault
		//			, alParamsCoupleError.ToArray()
		//			);
		//		#endregion
		//	}
		//	finally
		//	{
		//		#region // Finally of try:
		//		// Write ReturnLog:
		//		//_cf.ProcessBizReturn(
		//		//	ref mdsResult // mdsFinal
		//		//	, strTid // strTid
		//		//	, strFunctionName // strFunctionName
		//		//	);
		//		#endregion
		//	}
		//}

		//public DataSet WAS_Mst_Dealer_Create(
		//	ref ArrayList alParamsCoupleError
		//	, RQ_Mst_Dealer objRQ_Mst_Dealer
		//	////
		//	, out RT_Mst_Dealer objRT_Mst_Dealer
		//	)
		//{
		//	#region // Temp:
		//	string strTid = objRQ_Mst_Dealer.Tid;
		//	objRT_Mst_Dealer = new RT_Mst_Dealer();
		//	DataSet mdsResult = CmUtils.CMyDataSet.NewMyDataSet(strTid);
		//	DateTime dtimeSys = DateTime.UtcNow;
		//	//DataSet mdsExec = null;
		//	//DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(objRQ_Mst_Dealer.Tid);
		//	//int nTidSeq = 0;
		//	//bool bNeedTransaction = true;
		//	string strFunctionName = "WAS_Mst_Dealer_Create";
		//	string strErrorCodeDefault = TError.ErridnInventory.WAS_Mst_Dealer_Create;
		//	alParamsCoupleError.AddRange(new object[]{
		//		"strFunctionName", strFunctionName
		//		, "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
		//		, "Mst_Dealer", TJson.JsonConvert.SerializeObject(objRQ_Mst_Dealer.Mst_Dealer)
		//		////
		//		});
		//	#endregion

		//	try
		//	{
		//		#region // Init:
		//		#endregion

		//		#region // Refine and Check Input:
		//		//List<Mst_Dealer> lst_Mst_Dealer = new List<Mst_Dealer>();
		//		//List<Mst_DealerInGroup> lst_Mst_DealerInGroup = new List<Mst_DealerInGroup>();
		//		#endregion

		//		#region // Mst_Dealer_Create:
		//		mdsResult = Mst_Dealer_Create(
		//			objRQ_Mst_Dealer.Tid // strTid
		//			, objRQ_Mst_Dealer.GwUserCode // strGwUserCode 
		//			, objRQ_Mst_Dealer.GwPassword // strGwPassword
		//			, objRQ_Mst_Dealer.WAUserCode // strUserCode
		//			, objRQ_Mst_Dealer.WAUserPassword // strUserPassword
		//			, ref alParamsCoupleError // alParamsCoupleError
		//									  ////
		//			, objRQ_Mst_Dealer.Mst_Dealer.DLCode // objDLCode
		//			, objRQ_Mst_Dealer.Mst_Dealer.DLCodeParent // objDLCodeParent
		//			, objRQ_Mst_Dealer.Mst_Dealer.DLName // objDLName
		//			, objRQ_Mst_Dealer.Mst_Dealer.InvCode // objInvCode
		//			, objRQ_Mst_Dealer.Mst_Dealer.PMType // objPMType
		//			, objRQ_Mst_Dealer.Mst_Dealer.Remark // objRemark
		//			);
		//		#endregion

		//		// Return Good:
		//		return mdsResult;
		//	}
		//	catch (Exception exc)
		//	{
		//		#region // Catch of try:
		//		// Return Bad:
		//		return TUtils.CProcessExc.Process(
		//			ref mdsResult
		//			, exc
		//			, strErrorCodeDefault
		//			, alParamsCoupleError.ToArray()
		//			);
		//		#endregion
		//	}
		//	finally
		//	{
		//		#region // Finally of try:
		//		// Write ReturnLog:
		//		//_cf.ProcessBizReturn(
		//		//	ref mdsResult // mdsFinal
		//		//	, strTid // strTid
		//		//	, strFunctionName // strFunctionName
		//		//	);
		//		#endregion
		//	}
		//}

		//public DataSet WAS_RptSv_Mst_Dealer_Create(
		//	ref ArrayList alParamsCoupleError
		//	, RQ_Mst_Dealer objRQ_Mst_Dealer
		//	////
		//	, out RT_Mst_Dealer objRT_Mst_Dealer
		//	)
		//{
		//	#region // Temp:
		//	string strTid = objRQ_Mst_Dealer.Tid;
		//	objRT_Mst_Dealer = new RT_Mst_Dealer();
		//	DataSet mdsResult = CmUtils.CMyDataSet.NewMyDataSet(strTid);
		//	DateTime dtimeSys = DateTime.UtcNow;
		//	//DataSet mdsExec = null;
		//	//DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(objRQ_Mst_Dealer.Tid);
		//	//int nTidSeq = 0;
		//	//bool bNeedTransaction = true;
		//	string strFunctionName = "WAS_Mst_Dealer_Create";
		//	string strErrorCodeDefault = TError.ErridnInventory.WAS_Mst_Dealer_Create;
		//	alParamsCoupleError.AddRange(new object[]{
		//		"strFunctionName", strFunctionName
		//		, "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
		//		, "Mst_Dealer", TJson.JsonConvert.SerializeObject(objRQ_Mst_Dealer.Mst_Dealer)
		//		////
		//		});
		//	#endregion

		//	try
		//	{
		//		#region // Init:
		//		#endregion

		//		#region // Refine and Check Input:
		//		//List<Mst_Dealer> lst_Mst_Dealer = new List<Mst_Dealer>();
		//		//List<Mst_DealerInGroup> lst_Mst_DealerInGroup = new List<Mst_DealerInGroup>();
		//		#endregion

		//		#region // Mst_Dealer_Create:
		//		mdsResult = RptSv_Mst_Dealer_Create(
		//			objRQ_Mst_Dealer.Tid // strTid
		//			, objRQ_Mst_Dealer.GwUserCode // strGwUserCode
		//			, objRQ_Mst_Dealer.GwPassword // strGwPassword
		//			, objRQ_Mst_Dealer.WAUserCode // strUserCode
		//			, objRQ_Mst_Dealer.WAUserPassword // strUserPassword
		//			, ref alParamsCoupleError // alParamsCoupleError
		//									  ////
		//			, objRQ_Mst_Dealer.Mst_Dealer.DLCode // objDLCode
		//			, objRQ_Mst_Dealer.Mst_Dealer.DLCodeParent // objDLCodeParent
		//			, objRQ_Mst_Dealer.Mst_Dealer.DLType // objDLType
		//			, objRQ_Mst_Dealer.Mst_Dealer.ProvinceCode // objProvinceCode
		//			, objRQ_Mst_Dealer.Mst_Dealer.DLName // objDLName
		//			, objRQ_Mst_Dealer.Mst_Dealer.DLAddress // objDLAddress
		//			, objRQ_Mst_Dealer.Mst_Dealer.DLPresentBy // objDLPresentBy
		//			, objRQ_Mst_Dealer.Mst_Dealer.DLGovIDNumber // objDLGovIDNumber
		//			, objRQ_Mst_Dealer.Mst_Dealer.DLEmail // objDLEmail
		//			, objRQ_Mst_Dealer.Mst_Dealer.DLPhoneNo // objDLPhoneNo
		//			);
		//		#endregion

		//		// Return Good:
		//		return mdsResult;
		//	}
		//	catch (Exception exc)
		//	{
		//		#region // Catch of try:
		//		// Return Bad:
		//		return TUtils.CProcessExc.Process(
		//			ref mdsResult
		//			, exc
		//			, strErrorCodeDefault
		//			, alParamsCoupleError.ToArray()
		//			);
		//		#endregion
		//	}
		//	finally
		//	{
		//		#region // Finally of try:
		//		// Write ReturnLog:
		//		//_cf.ProcessBizReturn(
		//		//	ref mdsResult // mdsFinal
		//		//	, strTid // strTid
		//		//	, strFunctionName // strFunctionName
		//		//	);
		//		#endregion
		//	}
		//}

		//public DataSet WAS_Mst_Dealer_Update(
		//	ref ArrayList alParamsCoupleError
		//	, RQ_Mst_Dealer objRQ_Mst_Dealer
		//	////
		//	, out RT_Mst_Dealer objRT_Mst_Dealer
		//	)
		//{
		//	#region // Temp:
		//	string strTid = objRQ_Mst_Dealer.Tid;
		//	objRT_Mst_Dealer = new RT_Mst_Dealer();
		//	DataSet mdsResult = CmUtils.CMyDataSet.NewMyDataSet(strTid);
		//	DateTime dtimeSys = DateTime.UtcNow;
		//	//DataSet mdsExec = null;
		//	//DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(objRQ_Mst_Dealer.Tid);
		//	//int nTidSeq = 0;
		//	//bool bNeedTransaction = true;
		//	string strFunctionName = "WAS_Mst_Dealer_Update";
		//	string strErrorCodeDefault = TError.ErridnInventory.WAS_Mst_Dealer_Update;
		//	alParamsCoupleError.AddRange(new object[]{
		//		"strFunctionName", strFunctionName
		//		, "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
		//		, "Mst_Dealer", TJson.JsonConvert.SerializeObject(objRQ_Mst_Dealer.Mst_Dealer)
		//		////
		//		});
		//	#endregion

		//	try
		//	{
		//		#region // Init:
		//		#endregion

		//		#region // Refine and Check Input:
		//		//List<Mst_Dealer> lst_Mst_Dealer = new List<Mst_Dealer>();
		//		//List<Mst_DealerInGroup> lst_Mst_DealerInGroup = new List<Mst_DealerInGroup>();
		//		#endregion

		//		#region // Mst_Dealer_Update:
		//		mdsResult = Mst_Dealer_Update(
		//			objRQ_Mst_Dealer.Tid // strTid
		//			, objRQ_Mst_Dealer.GwUserCode // strGwUserCode
		//			, objRQ_Mst_Dealer.GwPassword // strGwPassword
		//			, objRQ_Mst_Dealer.WAUserCode // strUserCode
		//			, objRQ_Mst_Dealer.WAUserPassword // strUserPassword
		//			, ref alParamsCoupleError // alParamsCoupleError
		//									  ////
		//			, objRQ_Mst_Dealer.Mst_Dealer.DLCode // objDLCode
		//			, objRQ_Mst_Dealer.Mst_Dealer.DLName // objDLName
		//			, objRQ_Mst_Dealer.Mst_Dealer.Remark // objRemark
		//			, objRQ_Mst_Dealer.Mst_Dealer.FlagActive // objFlagActive
		//													 ////
		//			, objRQ_Mst_Dealer.Ft_Cols_Upd// objFt_Cols_Upd
		//			);
		//		#endregion

		//		// Return Good:
		//		return mdsResult;
		//	}
		//	catch (Exception exc)
		//	{
		//		#region // Catch of try:
		//		// Return Bad:
		//		return TUtils.CProcessExc.Process(
		//			ref mdsResult
		//			, exc
		//			, strErrorCodeDefault
		//			, alParamsCoupleError.ToArray()
		//			);
		//		#endregion
		//	}
		//	finally
		//	{
		//		#region // Finally of try:
		//		// Write ReturnLog:
		//		//_cf.ProcessBizReturn(
		//		//	ref mdsResult // mdsFinal
		//		//	, strTid // strTid
		//		//	, strFunctionName // strFunctionName
		//		//	);
		//		#endregion
		//	}
		//}

		//public DataSet WAS_RptSv_Mst_Dealer_Update(
		//	ref ArrayList alParamsCoupleError
		//	, RQ_Mst_Dealer objRQ_Mst_Dealer
		//	////
		//	, out RT_Mst_Dealer objRT_Mst_Dealer
		//	)
		//{
		//	#region // Temp:
		//	string strTid = objRQ_Mst_Dealer.Tid;
		//	objRT_Mst_Dealer = new RT_Mst_Dealer();
		//	DataSet mdsResult = CmUtils.CMyDataSet.NewMyDataSet(strTid);
		//	DateTime dtimeSys = DateTime.UtcNow;
		//	//DataSet mdsExec = null;
		//	//DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(objRQ_Mst_Dealer.Tid);
		//	//int nTidSeq = 0;
		//	//bool bNeedTransaction = true;
		//	string strFunctionName = "WAS_Mst_Dealer_Update";
		//	string strErrorCodeDefault = TError.ErridnInventory.WAS_Mst_Dealer_Update;
		//	alParamsCoupleError.AddRange(new object[]{
		//		"strFunctionName", strFunctionName
		//		, "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
		//		, "Mst_Dealer", TJson.JsonConvert.SerializeObject(objRQ_Mst_Dealer.Mst_Dealer)
		//		////
		//		});
		//	#endregion

		//	try
		//	{
		//		#region // Init:
		//		#endregion

		//		#region // Refine and Check Input:
		//		//List<Mst_Dealer> lst_Mst_Dealer = new List<Mst_Dealer>();
		//		//List<Mst_DealerInGroup> lst_Mst_DealerInGroup = new List<Mst_DealerInGroup>();
		//		#endregion

		//		#region // Mst_Dealer_Update:
		//		mdsResult = RptSv_Mst_Dealer_Update(
		//			objRQ_Mst_Dealer.Tid // strTid
		//			, objRQ_Mst_Dealer.GwUserCode // strGwUserCode
		//			, objRQ_Mst_Dealer.GwPassword // strGwPassword
		//			, objRQ_Mst_Dealer.WAUserCode // strUserCode
		//			, objRQ_Mst_Dealer.WAUserPassword // strUserPassword
		//			, ref alParamsCoupleError // alParamsCoupleError
		//									  ////
		//			, objRQ_Mst_Dealer.Mst_Dealer.DLCode // objDLCode
		//			, objRQ_Mst_Dealer.Mst_Dealer.ProvinceCode // objProvinceCode
		//			, objRQ_Mst_Dealer.Mst_Dealer.DLName // objDLName
		//			, objRQ_Mst_Dealer.Mst_Dealer.DLAddress // objDLAddress
		//			, objRQ_Mst_Dealer.Mst_Dealer.DLPresentBy // objDLPresentBy
		//			, objRQ_Mst_Dealer.Mst_Dealer.DLGovIDNumber // objDLGovIDNumber
		//			, objRQ_Mst_Dealer.Mst_Dealer.DLEmail // objDLEmail
		//			, objRQ_Mst_Dealer.Mst_Dealer.DLPhoneNo // objDLPhoneNo
		//			, objRQ_Mst_Dealer.Mst_Dealer.FlagActive // objFlagActive
		//													 ////
		//			, objRQ_Mst_Dealer.Ft_Cols_Upd// objFt_Cols_Upd
		//			);
		//		#endregion

		//		// Return Good:
		//		return mdsResult;
		//	}
		//	catch (Exception exc)
		//	{
		//		#region // Catch of try:
		//		// Return Bad:
		//		return TUtils.CProcessExc.Process(
		//			ref mdsResult
		//			, exc
		//			, strErrorCodeDefault
		//			, alParamsCoupleError.ToArray()
		//			);
		//		#endregion
		//	}
		//	finally
		//	{
		//		#region // Finally of try:
		//		// Write ReturnLog:
		//		//_cf.ProcessBizReturn(
		//		//	ref mdsResult // mdsFinal
		//		//	, strTid // strTid
		//		//	, strFunctionName // strFunctionName
		//		//	);
		//		#endregion
		//	}
		//}

		//public DataSet WAS_Mst_Dealer_Delete(
		//	ref ArrayList alParamsCoupleError
		//	, RQ_Mst_Dealer objRQ_Mst_Dealer
		//	////
		//	, out RT_Mst_Dealer objRT_Mst_Dealer
		//	)
		//{
		//	#region // Temp:
		//	string strTid = objRQ_Mst_Dealer.Tid;
		//	objRT_Mst_Dealer = new RT_Mst_Dealer();
		//	DataSet mdsResult = CmUtils.CMyDataSet.NewMyDataSet(strTid);
		//	DateTime dtimeSys = DateTime.UtcNow;
		//	//DataSet mdsExec = null;
		//	//DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(objRQ_Mst_Dealer.Tid);
		//	//int nTidSeq = 0;
		//	//bool bNeedTransaction = true;
		//	string strFunctionName = "WAS_Mst_Dealer_Delete";
		//	string strErrorCodeDefault = TError.ErridnInventory.WAS_Mst_Dealer_Delete;
		//	alParamsCoupleError.AddRange(new object[]{
		//		"strFunctionName", strFunctionName
		//		, "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
		//		//, "Mst_Dealer", TJson.JsonConvert.SerializeObject(objRQ_Mst_Dealer.Mst_Dealer)
		//		////
		//		});
		//	#endregion

		//	try
		//	{
		//		#region // Init:
		//		#endregion

		//		#region // Refine and Check Input:
		//		//List<Mst_Dealer> lst_Mst_Dealer = new List<Mst_Dealer>();
		//		//List<Mst_DealerInGroup> lst_Mst_DealerInGroup = new List<Mst_DealerInGroup>();
		//		#endregion

		//		#region // Mst_Dealer_Delete:
		//		mdsResult = Mst_Dealer_Delete(
		//			objRQ_Mst_Dealer.Tid // strTid
		//			, objRQ_Mst_Dealer.GwUserCode // strGwUserCode
		//			, objRQ_Mst_Dealer.GwPassword // strGwPassword
		//			, objRQ_Mst_Dealer.WAUserCode // strUserCode
		//			, objRQ_Mst_Dealer.WAUserPassword // strUserPassword
		//			, ref alParamsCoupleError // alParamsCoupleError
		//									  ////
		//			, objRQ_Mst_Dealer.Mst_Dealer.DLCode // objDLCode
		//			);
		//		#endregion

		//		// Return Good:
		//		return mdsResult;
		//	}
		//	catch (Exception exc)
		//	{
		//		#region // Catch of try:
		//		// Return Bad:
		//		return TUtils.CProcessExc.Process(
		//			ref mdsResult
		//			, exc
		//			, strErrorCodeDefault
		//			, alParamsCoupleError.ToArray()
		//			);
		//		#endregion
		//	}
		//	finally
		//	{
		//		#region // Finally of try:
		//		// Write ReturnLog:
		//		//_cf.ProcessBizReturn(
		//		//	ref mdsResult // mdsFinal
		//		//	, strTid // strTid
		//		//	, strFunctionName // strFunctionName
		//		//	);
		//		#endregion
		//	}
		//}

		//public DataSet WAS_RptSv_Mst_Dealer_Delete(
		//	ref ArrayList alParamsCoupleError
		//	, RQ_Mst_Dealer objRQ_Mst_Dealer
		//	////
		//	, out RT_Mst_Dealer objRT_Mst_Dealer
		//	)
		//{
		//	#region // Temp:
		//	string strTid = objRQ_Mst_Dealer.Tid;
		//	objRT_Mst_Dealer = new RT_Mst_Dealer();
		//	DataSet mdsResult = CmUtils.CMyDataSet.NewMyDataSet(strTid);
		//	DateTime dtimeSys = DateTime.UtcNow;
		//	//DataSet mdsExec = null;
		//	//DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(objRQ_Mst_Dealer.Tid);
		//	//int nTidSeq = 0;
		//	//bool bNeedTransaction = true;
		//	string strFunctionName = "WAS_Mst_Dealer_Delete";
		//	string strErrorCodeDefault = TError.ErridnInventory.WAS_Mst_Dealer_Delete;
		//	alParamsCoupleError.AddRange(new object[]{
		//		"strFunctionName", strFunctionName
		//		, "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
		//		//, "Mst_Dealer", TJson.JsonConvert.SerializeObject(objRQ_Mst_Dealer.Mst_Dealer)
		//		////
		//		});
		//	#endregion

		//	try
		//	{
		//		#region // Init:
		//		#endregion

		//		#region // Refine and Check Input:
		//		//List<Mst_Dealer> lst_Mst_Dealer = new List<Mst_Dealer>();
		//		//List<Mst_DealerInGroup> lst_Mst_DealerInGroup = new List<Mst_DealerInGroup>();
		//		#endregion

		//		#region // Mst_Dealer_Delete:
		//		mdsResult = RptSv_Mst_Dealer_Delete(
		//			objRQ_Mst_Dealer.Tid // strTid
		//			, objRQ_Mst_Dealer.GwUserCode // strGwUserCode
		//			, objRQ_Mst_Dealer.GwPassword // strGwPassword
		//			, objRQ_Mst_Dealer.WAUserCode // strUserCode
		//			, objRQ_Mst_Dealer.WAUserPassword // strUserPassword
		//			, ref alParamsCoupleError // alParamsCoupleError
		//									  ////
		//			, objRQ_Mst_Dealer.Mst_Dealer.DLCode // objDLCode
		//			);
		//		#endregion

		//		// Return Good:
		//		return mdsResult;
		//	}
		//	catch (Exception exc)
		//	{
		//		#region // Catch of try:
		//		// Return Bad:
		//		return TUtils.CProcessExc.Process(
		//			ref mdsResult
		//			, exc
		//			, strErrorCodeDefault
		//			, alParamsCoupleError.ToArray()
		//			);
		//		#endregion
		//	}
		//	finally
		//	{
		//		#region // Finally of try:
		//		// Write ReturnLog:
		//		//_cf.ProcessBizReturn(
		//		//	ref mdsResult // mdsFinal
		//		//	, strTid // strTid
		//		//	, strFunctionName // strFunctionName
		//		//	);
		//		#endregion
		//	}
		//}
		#endregion

		#region // Mst_GovTaxID:
		private void Mst_GovTaxID_CheckDB(
            ref ArrayList alParamsCoupleError
            , object objGovTaxID
            , string strFlagExistToCheck
            , string strFlagActiveListToCheck
            , out DataTable dtDB_Mst_GovTaxID
            )
        {
            // GetInfo:
            string strSqlExec = CmUtils.StringUtils.Replace(@"
					select top 1
						t.*
					from Mst_GovTaxID t --//[mylock]
					where (1=1)
						and t.GovTaxID = @objGovTaxID
					;
				");
            dtDB_Mst_GovTaxID = _cf.db.ExecQuery(
                strSqlExec
                , "@objGovTaxID", objGovTaxID
                ).Tables[0];
            dtDB_Mst_GovTaxID.TableName = "Mst_GovTaxID";

            // strFlagExistToCheck:
            if (strFlagExistToCheck.Length > 0)
            {
                if (CmUtils.StringUtils.StringEqual(strFlagExistToCheck, TConst.Flag.Active) && dtDB_Mst_GovTaxID.Rows.Count < 1)
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.GovTaxID", objGovTaxID
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Mst_GovTaxID_CheckDB_GovTaxIDNotFound
                        , null
                        , alParamsCoupleError.ToArray()
                        );
                }
                if (CmUtils.StringUtils.StringEqual(strFlagExistToCheck, TConst.Flag.Inactive) && dtDB_Mst_GovTaxID.Rows.Count > 0)
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.GovTaxID", objGovTaxID
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Mst_GovTaxID_CheckDB_GovTaxIDExist
                        , null
                        , alParamsCoupleError.ToArray()
                        );
                }
            }

            // strFlagActiveListToCheck:
            if (strFlagActiveListToCheck.Length > 0 && !strFlagActiveListToCheck.Contains(Convert.ToString(dtDB_Mst_GovTaxID.Rows[0]["FlagActive"])))
            {
                alParamsCoupleError.AddRange(new object[]{
                    "Check.GovTaxID", objGovTaxID
                    , "Check.strFlagActiveListToCheck", strFlagActiveListToCheck
                    , "DB.FlagActive", dtDB_Mst_GovTaxID.Rows[0]["FlagActive"]
                    });
                throw CmUtils.CMyException.Raise(
                    TError.ErridnInventory.Mst_GovTaxID_CheckDB_FlagActiveNotMatched
                    , null
                    , alParamsCoupleError.ToArray()
                    );
            }
        }

        private void Mst_GovTaxID_UpdBU()
        {
            string sqlPostSave = CmUtils.StringUtils.Replace(@"
                    declare @strGovTaxID_Root nvarchar(100); select @strGovTaxID_Root = '0100231226';
    
                    update t
                    set
	                    t.GovTaxIDBUCode = @strGovTaxID_Root
	                    , t.GovTaxIDBUPattern = @strGovTaxID_Root + '%'
	                    , t.GovTaxIDLevel = 0
                    from Mst_GovTaxID t --//[mylock]
	                    left join Mst_GovTaxID t_Parent
		                    on t.GovTaxIDParent = t_Parent.GovTaxID
                    where (1=1)
	                    and t.GovTaxID in (@strGovTaxID_Root)
                    ;

                    declare @nDeepDealer int; select @nDeepDealer = 0;
                    while (@nDeepDealer <= 6)
                    begin
	                    select @nDeepDealer = @nDeepDealer + 1;
	
	                    update t
	                    set
		                    t.GovTaxIDBUCode = IsNull(t_Parent.GovTaxIDBUCode + '.', '') + t.GovTaxID
		                    , t.GovTaxIDBUPattern = IsNull(t_Parent.GovTaxIDBUCode + '.', '') + t.GovTaxID + '%'
		                    , t.GovTaxIDLevel = IsNull(t_Parent.GovTaxIDLevel, 0) + 1
	                    from Mst_GovTaxID t --//[mylock]
		                    left join Mst_GovTaxID t_Parent --//[mylock]
			                    on t.GovTaxIDParent = t_Parent.GovTaxID
	                    where (1=1)
		                    and t.GovTaxID not in (@strGovTaxID_Root)
	                    ;
                    end;
                ");
            DataSet dsPostSave = _cf.db.ExecQuery(sqlPostSave);
        }

        public DataSet WAS_RptSv_Mst_GovTaxID_Get(
            ref ArrayList alParamsCoupleError
            , RQ_Mst_GovTaxID objRQ_Mst_GovTaxID
            ////
            , out RT_Mst_GovTaxID objRT_Mst_GovTaxID
            )
        {
            #region // Temp:
            string strTid = objRQ_Mst_GovTaxID.Tid;
            objRT_Mst_GovTaxID = new RT_Mst_GovTaxID();
            DataSet mdsResult = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            DateTime dtimeSys = DateTime.UtcNow;
            //DataSet mdsExec = null;
            //DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(objRQ_Mst_GovTaxID.Tid);
            //int nTidSeq = 0;
            //bool bNeedTransaction = true;
            string strFunctionName = "WAS_RptSv_Mst_GovTaxID_Get";
            string strErrorCodeDefault = TError.ErridnInventory.WAS_RptSv_Mst_GovTaxID_Get;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
				});
            #endregion

            try
            {
                #region // Init:
                #endregion

                #region // Refine and Check Input:
                List<MySummaryTable> lst_MySummaryTable = new List<MySummaryTable>();

                List<Mst_GovTaxID> lst_Mst_GovTaxID = new List<Mst_GovTaxID>();
                #endregion

                #region // WS_Mst_GovTaxID_Get:
                mdsResult = RptSv_Mst_GovTaxID_Get(
                    objRQ_Mst_GovTaxID.Tid // strTid
                    , objRQ_Mst_GovTaxID.GwUserCode // strGwUserCode
                    , objRQ_Mst_GovTaxID.GwPassword // strGwPassword
                    , objRQ_Mst_GovTaxID.WAUserCode // strUserCode
                    , objRQ_Mst_GovTaxID.WAUserPassword // strUserPassword
                    , ref alParamsCoupleError // alParamsCoupleError
                                              //// Filter:
                    , objRQ_Mst_GovTaxID.Ft_RecordStart // strFt_RecordStart
                    , objRQ_Mst_GovTaxID.Ft_RecordCount // strFt_RecordCount
                    , objRQ_Mst_GovTaxID.Ft_WhereClause // strFt_WhereClause
                                                        //// Return:
                    , objRQ_Mst_GovTaxID.Rt_Cols_Mst_GovTaxID // strRt_Cols_Mst_GovTaxID
                    );
                #endregion

                #region // GetData:
                if (!CmUtils.CMyDataSet.HasError(mdsResult))
                {
                    ////
                    DataTable dt_MySummaryTable = mdsResult.Tables["MySummaryTable"].Copy();
                    lst_MySummaryTable = TUtils.DataTableCmUtils.ToListof<MySummaryTable>(dt_MySummaryTable);
                    objRT_Mst_GovTaxID.MySummaryTable = lst_MySummaryTable[0];

                    ////
                    DataTable dt_Mst_GovTaxID = mdsResult.Tables["Mst_GovTaxID"].Copy();
                    lst_Mst_GovTaxID = TUtils.DataTableCmUtils.ToListof<Mst_GovTaxID>(dt_Mst_GovTaxID);
                    objRT_Mst_GovTaxID.Lst_Mst_GovTaxID = lst_Mst_GovTaxID;
                    /////
                }
                #endregion

                // Return Good:
                return mdsResult;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsResult
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Write ReturnLog:
                //_cf.ProcessBizReturn(
                //	ref mdsResult // mdsFinal
                //	, strTid // strTid
                //	, strFunctionName // strFunctionName
                //	);
                #endregion
            }
        }
        public DataSet RptSv_Mst_GovTaxID_Get(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            //// Filter:
            , string strFt_RecordStart
            , string strFt_RecordCount
            , string strFt_WhereClause
            //// Return:
            , string strRt_Cols_Mst_GovTaxID
            )
        {
            #region // Temp:
            DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            //int nTidSeq = 0;
            DateTime dtimeSys = DateTime.UtcNow;
            string strFunctionName = "RptSv_Mst_GovTaxID_Get";
            string strErrorCodeDefault = TError.ErridnInventory.RptSv_Mst_GovTaxID_Get;
            alParamsCoupleError.AddRange(new object[]{
                    "strFunctionName", strFunctionName
                    , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
			        //// Filter
					, "strFt_RecordStart", strFt_RecordStart
                    , "strFt_RecordCount", strFt_RecordCount
                    , "strFt_WhereClause", strFt_WhereClause
			        //// Return
					, "strRt_Cols_Mst_GovTaxID", strRt_Cols_Mst_GovTaxID
                    });
            #endregion

            try
            {
                #region // Init:
                //_cf.db.LogUserId = _cf.sinf.strUserCode;
                _cf.db.BeginTransaction();

                // Write RequestLog:
                _cf.ProcessBizReq_OutSide(
                    strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    , alParamsCoupleError // alParamsCoupleError
                    );

                // Sys_User_CheckAuthentication:
                //RptSv_Sys_User_CheckAuthentication(
                //    ref alParamsCoupleError
                //    , strWAUserCode
                //    , strWAUserPassword
                //    );

                //// Check Access/Deny:
                //Sys_Access_CheckDenyV30(
                //    ref alParamsCoupleError
                //    , strWAUserCode
                //    , strFunctionName
                //    );
                #endregion

                #region // Mst_GovTaxID_GetX:
                DataSet dsGetData = null;
                {
                    ////
                    Mst_GovTaxID_GetX(
                        strTid // strTid
                        , strGwUserCode // strGwUserCode
                        , strGwPassword // strGwPassword
                        , strWAUserCode // strWAUserCode
                        , strWAUserPassword // strWAUserPassword
                        , ref alParamsCoupleError // alParamsCoupleError
                        , dtimeSys // dtimeSys
                                   ////
                        , strFt_RecordStart // strFt_RecordStart
                        , strFt_RecordCount // strFt_RecordCount
                        , strFt_WhereClause // strFt_WhereClause
                                            ////
                        , strRt_Cols_Mst_GovTaxID // strRt_Cols_Mst_GovTaxID
                                                  ////
                        , out dsGetData // dsGetData
                        );
                    ////
                    CmUtils.DataUtils.MoveDataTable(ref mdsFinal, ref dsGetData);
                }
                #endregion

                // Return Good:
                TDALUtils.DBUtils.RollbackSafety(_cf.db); // Always Rollback.
                mdsFinal.AcceptChanges();
                return mdsFinal;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Rollback:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);

                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsFinal
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Rollback and Release resources:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);
                TDALUtils.DBUtils.ReleaseAllSemaphore(_cf.db_Sys, true);

                // Write ReturnLog:
                _cf.ProcessBizReturn_OutSide(
                    ref mdsFinal // mdsFinal
                    , strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    );
                #endregion
            }
        }
        public DataSet WAS_Mst_GovTaxID_Get(
            ref ArrayList alParamsCoupleError
            , RQ_Mst_GovTaxID objRQ_Mst_GovTaxID
            ////
            , out RT_Mst_GovTaxID objRT_Mst_GovTaxID
            )
        {
            #region // Temp:
            string strTid = objRQ_Mst_GovTaxID.Tid;
            objRT_Mst_GovTaxID = new RT_Mst_GovTaxID();
            DataSet mdsResult = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            DateTime dtimeSys = DateTime.UtcNow;
            //DataSet mdsExec = null;
            //DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(objRQ_Mst_GovTaxID.Tid);
            //int nTidSeq = 0;
            //bool bNeedTransaction = true;
            string strFunctionName = "WAS_Mst_GovTaxID_Get";
            string strErrorCodeDefault = TError.ErridnInventory.WAS_Mst_GovTaxID_Get;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
				});
            #endregion

            try
            {
                #region // Init:
                #endregion

                #region // Refine and Check Input:
                List<MySummaryTable> lst_MySummaryTable = new List<MySummaryTable>();

                List<Mst_GovTaxID> lst_Mst_GovTaxID = new List<Mst_GovTaxID>();
                #endregion

                #region // WS_Mst_GovTaxID_Get:
                mdsResult = Mst_GovTaxID_Get(
                    objRQ_Mst_GovTaxID.Tid // strTid
                    , objRQ_Mst_GovTaxID.GwUserCode // strGwUserCode
                    , objRQ_Mst_GovTaxID.GwPassword // strGwPassword
                    , objRQ_Mst_GovTaxID.WAUserCode // strUserCode
                    , objRQ_Mst_GovTaxID.WAUserPassword // strUserPassword
                    , ref alParamsCoupleError // alParamsCoupleError
                                              //// Filter:
                    , objRQ_Mst_GovTaxID.Ft_RecordStart // strFt_RecordStart
                    , objRQ_Mst_GovTaxID.Ft_RecordCount // strFt_RecordCount
                    , objRQ_Mst_GovTaxID.Ft_WhereClause // strFt_WhereClause
                                                        //// Return:
                    , objRQ_Mst_GovTaxID.Rt_Cols_Mst_GovTaxID // strRt_Cols_Mst_GovTaxID
                    );
                #endregion

                #region // GetData:
                if (!CmUtils.CMyDataSet.HasError(mdsResult))
                {
                    ////
                    DataTable dt_MySummaryTable = mdsResult.Tables["MySummaryTable"].Copy();
                    lst_MySummaryTable = TUtils.DataTableCmUtils.ToListof<MySummaryTable>(dt_MySummaryTable);
                    objRT_Mst_GovTaxID.MySummaryTable = lst_MySummaryTable[0];

                    ////
                    DataTable dt_Mst_GovTaxID = mdsResult.Tables["Mst_GovTaxID"].Copy();
                    lst_Mst_GovTaxID = TUtils.DataTableCmUtils.ToListof<Mst_GovTaxID>(dt_Mst_GovTaxID);
                    objRT_Mst_GovTaxID.Lst_Mst_GovTaxID = lst_Mst_GovTaxID;
                    /////
                }
                #endregion

                // Return Good:
                return mdsResult;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsResult
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Write ReturnLog:
                //_cf.ProcessBizReturn(
                //	ref mdsResult // mdsFinal
                //	, strTid // strTid
                //	, strFunctionName // strFunctionName
                //	);
                #endregion
            }
        }
        public DataSet Mst_GovTaxID_Get(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            //// Filter:
            , string strFt_RecordStart
            , string strFt_RecordCount
            , string strFt_WhereClause
            //// Return:
            , string strRt_Cols_Mst_GovTaxID
            )
        {
            #region // Temp:
            DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            //int nTidSeq = 0;
            DateTime dtimeSys = DateTime.UtcNow;
            string strFunctionName = "Mst_GovTaxID_Get";
            string strErrorCodeDefault = TError.ErridnInventory.Mst_GovTaxID_Get;
            alParamsCoupleError.AddRange(new object[]{
                    "strFunctionName", strFunctionName
                    , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
			        //// Filter
					, "strFt_RecordStart", strFt_RecordStart
                    , "strFt_RecordCount", strFt_RecordCount
                    , "strFt_WhereClause", strFt_WhereClause
			        //// Return
					, "strRt_Cols_Mst_GovTaxID", strRt_Cols_Mst_GovTaxID
                    });
            #endregion

            try
            {
                #region // Init:
                //_cf.db.LogUserId = _cf.sinf.strUserCode;
                _cf.db.BeginTransaction();

                // Write RequestLog:
                _cf.ProcessBizReq_OutSide(
                    strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    , alParamsCoupleError // alParamsCoupleError
                    );

                // Sys_User_CheckAuthentication:
                //Sys_User_CheckAuthentication(
                //    ref alParamsCoupleError
                //    , strWAUserCode
                //    , strWAUserPassword
                //    );

                //// Check Access/Deny:
                //Sys_Access_CheckDenyV30(
                //    ref alParamsCoupleError
                //    , strWAUserCode
                //    , strFunctionName
                //    );
                #endregion

                #region // Mst_GovTaxID_GetX:
                DataSet dsGetData = null;
                {
                    ////
                    Mst_GovTaxID_GetX(
                        strTid // strTid
                        , strGwUserCode // strGwUserCode
                        , strGwPassword // strGwPassword
                        , strWAUserCode // strWAUserCode
                        , strWAUserPassword // strWAUserPassword
                        , ref alParamsCoupleError // alParamsCoupleError
                        , dtimeSys // dtimeSys
                                   ////
                        , strFt_RecordStart // strFt_RecordStart
                        , strFt_RecordCount // strFt_RecordCount
                        , strFt_WhereClause // strFt_WhereClause
                                            ////
                        , strRt_Cols_Mst_GovTaxID // strRt_Cols_Mst_GovTaxID
                                                  ////
                        , out dsGetData // dsGetData
                        );
                    ////
                    CmUtils.DataUtils.MoveDataTable(ref mdsFinal, ref dsGetData);
                }
                #endregion

                // Return Good:
                TDALUtils.DBUtils.RollbackSafety(_cf.db); // Always Rollback.
                mdsFinal.AcceptChanges();
                return mdsFinal;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Rollback:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);

                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsFinal
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Rollback and Release resources:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);
                TDALUtils.DBUtils.ReleaseAllSemaphore(_cf.db_Sys, true);

                // Write ReturnLog:
                _cf.ProcessBizReturn_OutSide(
                    ref mdsFinal // mdsFinal
                    , strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    );
                #endregion
            }
        }

        public DataSet WAS_Mst_GovTaxID_Create(
            ref ArrayList alParamsCoupleError
            , RQ_Mst_GovTaxID objRQ_Mst_GovTaxID
            ////
            , out RT_Mst_GovTaxID objRT_Mst_GovTaxID
            )
        {
            #region // Temp:
            string strTid = objRQ_Mst_GovTaxID.Tid;
            objRT_Mst_GovTaxID = new RT_Mst_GovTaxID();
            DataSet mdsResult = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            DateTime dtimeSys = DateTime.UtcNow;
            //DataSet mdsExec = null;
            //DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(objRQ_Mst_GovTaxID.Tid);
            //int nTidSeq = 0;
            //bool bNeedTransaction = true;
            string strFunctionName = "WAS_Mst_GovTaxID_Create";
            string strErrorCodeDefault = TError.ErridnInventory.WAS_Mst_GovTaxID_Create;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
				});
            #endregion

            try
            {
                #region // Init:
                #endregion

                #region // Refine and Check Input:
                List<Mst_GovTaxID> lst_Mst_GovTaxID = new List<Mst_GovTaxID>();
                #endregion

                #region // WS_Mst_GovTaxID_Create:
                mdsResult = Mst_GovTaxID_Create(
                    objRQ_Mst_GovTaxID.Tid // strTid
                    , objRQ_Mst_GovTaxID.GwUserCode // strGwUserCode
                    , objRQ_Mst_GovTaxID.GwPassword // strGwPassword
                    , objRQ_Mst_GovTaxID.WAUserCode // strUserCode
                    , objRQ_Mst_GovTaxID.WAUserPassword // strUserPassword
                    , ref alParamsCoupleError // alParamsCoupleError
                                              ////
                    , objRQ_Mst_GovTaxID.Mst_GovTaxID.GovTaxID // objGovTaxID
                    , objRQ_Mst_GovTaxID.Mst_GovTaxID.GovTaxIDParent // objGovTaxIDParent
                    , objRQ_Mst_GovTaxID.Mst_GovTaxID.ProvinceCode // objProvinceCode
                    , objRQ_Mst_GovTaxID.Mst_GovTaxID.DistrictCode // objDistrictCode
                    , objRQ_Mst_GovTaxID.Mst_GovTaxID.GovTaxName // objGovTaxName
                    , objRQ_Mst_GovTaxID.Mst_GovTaxID.Level // objLevel
                    , objRQ_Mst_GovTaxID.Mst_GovTaxID.Address // objAddress
                    , objRQ_Mst_GovTaxID.Mst_GovTaxID.ContactEmail // objContactEmail
                    , objRQ_Mst_GovTaxID.Mst_GovTaxID.ContactPhone // objContactPhone
                    );
                #endregion

                // Return Good:
                return mdsResult;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsResult
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Write ReturnLog:
                //_cf.ProcessBizReturn(
                //	ref mdsResult // mdsFinal
                //	, strTid // strTid
                //	, strFunctionName // strFunctionName
                //	);
                #endregion
            }
        }
        public DataSet Mst_GovTaxID_Create(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            ////
            , object objGovTaxID
            , object objGovTaxIDParent
            , object objProvinceCode
            , object objDistrictCode
            , object objGovTaxName
            , object objLevel
            , object objAddress
            , object objContactEmail
            , object objContactPhone
            )
        {
            #region // Temp:
            DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            //int nTidSeq = 0;
            DateTime dtimeSys = DateTime.UtcNow;
            string strFunctionName = "Mst_GovTaxID_Create";
            string strErrorCodeDefault = TError.ErridnInventory.Mst_GovTaxID_Create;
            alParamsCoupleError.AddRange(new object[]{
                    "strFunctionName", strFunctionName
                    , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
			        ////
					, "objGovTaxID", objGovTaxID
                    , "objGovTaxIDParent", objGovTaxIDParent
                    , "objProvinceCode", objProvinceCode
                    , "objDistrictCode", objDistrictCode
                    , "objGovTaxName", objGovTaxName
                    , "objLevel", objLevel
                    , "objAddress", objAddress
                    , "objContactEmail", objContactEmail
                    , "objContactPhone", objContactPhone
                    });
            #endregion

            try
            {
                #region // Init:
                //_cf.db.LogUserId = _cf.sinf.strUserCode;
                _cf.db.BeginTransaction();

                // Write RequestLog:
                _cf.ProcessBizReq_OutSide(
                    strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    , alParamsCoupleError // alParamsCoupleError
                    );

                // Sys_User_CheckAuthentication:
                //Sys_User_CheckAuthentication(
                //    ref alParamsCoupleError
                //    , strWAUserCode
                //    , strWAUserPassword
                //    );

                // Check Access/Deny:
                Sys_Access_CheckDenyV30(
                    ref alParamsCoupleError
                    , strWAUserCode
                    , strFunctionName
                    );
                #endregion

                #region // Mst_GovTaxID_CreateX:
                //DataSet dsGetData = null;
                {
                    Mst_GovTaxID_CreateX(
                        strTid // strTid
                        , strGwUserCode // strGwUserCode
                        , strGwPassword // strGwPassword
                        , strWAUserCode // strWAUserCode
                        , strWAUserPassword // strWAUserPassword
                        , ref alParamsCoupleError // alParamsCoupleError
                        , dtimeSys // dtimeSys
                                   ////
                        , objGovTaxID // objGovTaxID
                        , objGovTaxIDParent // objGovTaxIDParent
                        , objProvinceCode // objProvinceCode
                        , objDistrictCode // objDistrictCode
                        , objGovTaxName // objGovTaxName
                        , objLevel // objLevel
                        , objAddress // objAddress
                        , objContactEmail // objContactEmail
                        , objContactPhone  // objContactPhone                    
                        );
                }
                ////
                //CmUtils.DataUtils.MoveDataTable(ref mdsFinal, ref dsGetData);
                #endregion

                // Return Good:
                TDALUtils.DBUtils.CommitSafety(_cf.db);
                mdsFinal.AcceptChanges();
                return mdsFinal;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Rollback:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);

                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsFinal
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Rollback and Release resources:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);
                TDALUtils.DBUtils.ReleaseAllSemaphore(_cf.db_Sys, true);

                // Write ReturnLog:
                _cf.ProcessBizReturn_OutSide(
                    ref mdsFinal // mdsFinal
                    , strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    );
                #endregion
            }
        }
        public DataSet WAS_RptSv_Mst_GovTaxID_Create(
            ref ArrayList alParamsCoupleError
            , RQ_Mst_GovTaxID objRQ_Mst_GovTaxID
            ////
            , out RT_Mst_GovTaxID objRT_Mst_GovTaxID
            )
        {
            #region // Temp:
            string strTid = objRQ_Mst_GovTaxID.Tid;
            objRT_Mst_GovTaxID = new RT_Mst_GovTaxID();
            DataSet mdsResult = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            DateTime dtimeSys = DateTime.UtcNow;
            //DataSet mdsExec = null;
            //DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(objRQ_Mst_GovTaxID.Tid);
            //int nTidSeq = 0;
            //bool bNeedTransaction = true;
            string strFunctionName = "WAS_RptSv_Mst_GovTaxID_Create";
            string strErrorCodeDefault = TError.ErridnInventory.WAS_RptSv_Mst_GovTaxID_Create;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
				});
            #endregion

            try
            {
                #region // Init:
                #endregion

                #region // Refine and Check Input:
                List<Mst_GovTaxID> lst_Mst_GovTaxID = new List<Mst_GovTaxID>();
                #endregion

                #region // WS_RptSv_Mst_GovTaxID_Create:
                mdsResult = RptSv_Mst_GovTaxID_Create(
                    objRQ_Mst_GovTaxID.Tid // strTid
                    , objRQ_Mst_GovTaxID.GwUserCode // strGwUserCode
                    , objRQ_Mst_GovTaxID.GwPassword // strGwPassword
                    , objRQ_Mst_GovTaxID.WAUserCode // strUserCode
                    , objRQ_Mst_GovTaxID.WAUserPassword // strUserPassword
                    , ref alParamsCoupleError // alParamsCoupleError
                                              ////
                    , objRQ_Mst_GovTaxID.Mst_GovTaxID.GovTaxID // objGovTaxID
                    , objRQ_Mst_GovTaxID.Mst_GovTaxID.GovTaxIDParent // objGovTaxIDParent
                    , objRQ_Mst_GovTaxID.Mst_GovTaxID.ProvinceCode // objProvinceCode
                    , objRQ_Mst_GovTaxID.Mst_GovTaxID.DistrictCode // objDistrictCode
                    , objRQ_Mst_GovTaxID.Mst_GovTaxID.GovTaxName // objGovTaxName
                    , objRQ_Mst_GovTaxID.Mst_GovTaxID.Level // objLevel
                    , objRQ_Mst_GovTaxID.Mst_GovTaxID.Address // objAddress
                    , objRQ_Mst_GovTaxID.Mst_GovTaxID.ContactEmail // objContactEmail
                    , objRQ_Mst_GovTaxID.Mst_GovTaxID.ContactPhone // objContactPhone
                    );
                #endregion

                // Return Good:
                return mdsResult;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsResult
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Write ReturnLog:
                //_cf.ProcessBizReturn(
                //	ref mdsResult // mdsFinal
                //	, strTid // strTid
                //	, strFunctionName // strFunctionName
                //	);
                #endregion
            }
        }
        public DataSet RptSv_Mst_GovTaxID_Create(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            ////
            , object objGovTaxID
            , object objGovTaxIDParent
            , object objProvinceCode
            , object objDistrictCode
            , object objGovTaxName
            , object objLevel
            , object objAddress
            , object objContactEmail
            , object objContactPhone
            )
        {
            #region // Temp:
            DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            //int nTidSeq = 0;
            DateTime dtimeSys = DateTime.UtcNow;
            string strFunctionName = "RptSv_Mst_GovTaxID_Create";
            string strErrorCodeDefault = TError.ErridnInventory.RptSv_Mst_GovTaxID_Create;
            alParamsCoupleError.AddRange(new object[]{
                    "strFunctionName", strFunctionName
                    , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
			        ////
					, "objGovTaxID", objGovTaxID
                    , "objGovTaxIDParent", objGovTaxIDParent
                    , "objProvinceCode", objProvinceCode
                    , "objDistrictCode", objDistrictCode
                    , "objGovTaxName", objGovTaxName
                    , "objLevel", objLevel
                    , "objAddress", objAddress
                    , "objContactEmail", objContactEmail
                    , "objContactPhone", objContactPhone
                    });
            #endregion

            try
            {
                #region // Init:
                //_cf.db.LogUserId = _cf.sinf.strUserCode;
                _cf.db.BeginTransaction();

                // Write RequestLog:
                _cf.ProcessBizReq_OutSide(
                    strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    , alParamsCoupleError // alParamsCoupleError
                    );

                // Sys_User_CheckAuthentication:
                //RptSv_Sys_User_CheckAuthentication(
                //    ref alParamsCoupleError
                //    , strWAUserCode
                //    , strWAUserPassword
                //    );

                //// Check Access/Deny:
                //Sys_Access_CheckDenyV30(
                //    ref alParamsCoupleError
                //    , strWAUserCode
                //    , strFunctionName
                //    );
                #endregion

                #region // Mst_GovTaxID_CreateX:
                //DataSet dsGetData = null;
                {
                    Mst_GovTaxID_CreateX(
                        strTid // strTid
                        , strGwUserCode // strGwUserCode
                        , strGwPassword // strGwPassword
                        , strWAUserCode // strWAUserCode
                        , strWAUserPassword // strWAUserPassword
                        , ref alParamsCoupleError // alParamsCoupleError
                        , dtimeSys // dtimeSys
                                   ////
                        , objGovTaxID // objGovTaxID
                        , objGovTaxIDParent // objGovTaxIDParent
                        , objProvinceCode // objProvinceCode
                        , objDistrictCode // objDistrictCode
                        , objGovTaxName // objGovTaxName
                        , objLevel // objLevel
                        , objAddress // objAddress
                        , objContactEmail // objContactEmail
                        , objContactPhone  // objContactPhone                    
                        );
                }
                ////
                //CmUtils.DataUtils.MoveDataTable(ref mdsFinal, ref dsGetData);
                #endregion

                // Return Good:
                TDALUtils.DBUtils.CommitSafety(_cf.db);
                mdsFinal.AcceptChanges();
                return mdsFinal;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Rollback:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);

                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsFinal
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Rollback and Release resources:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);
                TDALUtils.DBUtils.ReleaseAllSemaphore(_cf.db_Sys, true);

                // Write ReturnLog:
                _cf.ProcessBizReturn_OutSide(
                    ref mdsFinal // mdsFinal
                    , strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    );
                #endregion
            }
        }

        public DataSet WAS_Mst_GovTaxID_Update(
            ref ArrayList alParamsCoupleError
            , RQ_Mst_GovTaxID objRQ_Mst_GovTaxID
            ////
            , out RT_Mst_GovTaxID objRT_Mst_GovTaxID
            )
        {
            #region // Temp:
            string strTid = objRQ_Mst_GovTaxID.Tid;
            objRT_Mst_GovTaxID = new RT_Mst_GovTaxID();
            DataSet mdsResult = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            DateTime dtimeSys = DateTime.UtcNow;
            //DataSet mdsExec = null;
            //DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(objRQ_Mst_GovTaxID.Tid);
            //int nTidSeq = 0;
            //bool bNeedTransaction = true;
            string strFunctionName = "WAS_Mst_GovTaxID_Update";
            string strErrorCodeDefault = TError.ErridnInventory.WAS_Mst_GovTaxID_Update;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
				});
            #endregion

            try
            {
                #region // Init:
                #endregion

                #region // Refine and Check Input:
                List<Mst_GovTaxID> lst_Mst_GovTaxID = new List<Mst_GovTaxID>();
                #endregion

                #region // Mst_GovTaxID_Update:
                mdsResult = Mst_GovTaxID_Update(
                    objRQ_Mst_GovTaxID.Tid // strTid
                    , objRQ_Mst_GovTaxID.GwUserCode // strGwUserCode
                    , objRQ_Mst_GovTaxID.GwPassword // strGwPassword
                    , objRQ_Mst_GovTaxID.WAUserCode // strUserCode
                    , objRQ_Mst_GovTaxID.WAUserPassword // strUserPassword
                    , ref alParamsCoupleError // alParamsCoupleError
                                              ////
                    , objRQ_Mst_GovTaxID.Mst_GovTaxID.GovTaxID // objGovTaxID
                    , objRQ_Mst_GovTaxID.Mst_GovTaxID.GovTaxName // objGovTaxName
                    , objRQ_Mst_GovTaxID.Mst_GovTaxID.Level // objLevel
                    , objRQ_Mst_GovTaxID.Mst_GovTaxID.Address // objAddress
                    , objRQ_Mst_GovTaxID.Mst_GovTaxID.ContactEmail // objContactEmail
                    , objRQ_Mst_GovTaxID.Mst_GovTaxID.ContactPhone // objContactPhone
                    , objRQ_Mst_GovTaxID.Mst_GovTaxID.FlagActive // objFlagActive
                                                                 ////
                    , objRQ_Mst_GovTaxID.Ft_Cols_Upd // Ft_Cols_Upd
                    );
                #endregion

                // Return Good:
                return mdsResult;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsResult
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Write ReturnLog:
                //_cf.ProcessBizReturn(
                //	ref mdsResult // mdsFinal
                //	, strTid // strTid
                //	, strFunctionName // strFunctionName
                //	);
                #endregion
            }
        }
        public DataSet Mst_GovTaxID_Update(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            ////
            , object objGovTaxID
            , object objGovTaxName
            , object objLevel
            , object objAddress
            , object objContactEmail
            , object objContactPhone
            , object objFlagActive
            ////
            , object objFt_Cols_Upd
            )
        {
            #region // Temp:
            DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            //int nTidSeq = 0;
            DateTime dtimeSys = DateTime.UtcNow;
            string strFunctionName = "Mst_GovTaxID_Update";
            string strErrorCodeDefault = TError.ErridnInventory.Mst_GovTaxID_Update;
            alParamsCoupleError.AddRange(new object[]{
                    "strFunctionName", strFunctionName
                    , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
			        ////
					, "objGovTaxID", objGovTaxID
                    , "objGovTaxName", objGovTaxName
                    , "objLevel", objLevel
                    , "objAddress", objAddress
                    , "objContactEmail", objContactEmail
                    , "objContactPhone", objContactPhone
                    , "objFlagActive", objFlagActive
                    ////
                    , "objFt_Cols_Upd", objFt_Cols_Upd
                    });
            #endregion

            try
            {
                #region // Init:
                //_cf.db.LogUserId = _cf.sinf.strUserCode;
                _cf.db.BeginTransaction();

                // Write RequestLog:
                _cf.ProcessBizReq_OutSide(
                    strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    , alParamsCoupleError // alParamsCoupleError
                    );

                // Sys_User_CheckAuthentication:
                //Sys_User_CheckAuthentication(
                //    ref alParamsCoupleError
                //    , strWAUserCode
                //    , strWAUserPassword
                //    );

                // Check Access/Deny:
                Sys_Access_CheckDenyV30(
                    ref alParamsCoupleError
                    , strWAUserCode
                    , strFunctionName
                    );
                #endregion

                #region // Mst_GovTaxID_UpdateX:
                //DataSet dsGetData = null;
                {
                    Mst_GovTaxID_UpdateX(
                        strTid // strTid
                        , strGwUserCode // strGwUserCode
                        , strGwPassword // strGwPassword
                        , strWAUserCode // strWAUserCode
                        , strWAUserPassword // strWAUserPassword
                        , ref alParamsCoupleError // alParamsCoupleError
                        , dtimeSys // dtimeSys
                                   ////
                        , objGovTaxID
                        , objGovTaxName
                        , objLevel
                        , objAddress
                        , objContactEmail
                        , objContactPhone
                        , objFlagActive
                        /////
                        , objFt_Cols_Upd // objFt_Cols_Upd
                        );
                }
                ////
                //CmUtils.DataUtils.MoveDataTable(ref mdsFinal, ref dsGetData);
                #endregion

                // Return Good:
                TDALUtils.DBUtils.CommitSafety(_cf.db);
                mdsFinal.AcceptChanges();
                return mdsFinal;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Rollback:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);

                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsFinal
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Rollback and Release resources:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);
                TDALUtils.DBUtils.ReleaseAllSemaphore(_cf.db_Sys, true);

                // Write ReturnLog:
                _cf.ProcessBizReturn_OutSide(
                    ref mdsFinal // mdsFinal
                    , strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    );
                #endregion
            }
        }
        public DataSet WAS_RptSv_Mst_GovTaxID_Update(
            ref ArrayList alParamsCoupleError
            , RQ_Mst_GovTaxID objRQ_Mst_GovTaxID
            ////
            , out RT_Mst_GovTaxID objRT_Mst_GovTaxID
            )
        {
            #region // Temp:
            string strTid = objRQ_Mst_GovTaxID.Tid;
            objRT_Mst_GovTaxID = new RT_Mst_GovTaxID();
            DataSet mdsResult = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            DateTime dtimeSys = DateTime.UtcNow;
            //DataSet mdsExec = null;
            //DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(objRQ_Mst_GovTaxID.Tid);
            //int nTidSeq = 0;
            //bool bNeedTransaction = true;
            string strFunctionName = "WAS_RptSv_Mst_GovTaxID_Update";
            string strErrorCodeDefault = TError.ErridnInventory.WAS_RptSv_Mst_GovTaxID_Update;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
				});
            #endregion

            try
            {
                #region // Init:
                #endregion

                #region // Refine and Check Input:
                List<Mst_GovTaxID> lst_Mst_GovTaxID = new List<Mst_GovTaxID>();
                #endregion

                #region // Mst_GovTaxID_Update:
                mdsResult = RptSv_Mst_GovTaxID_Update(
                    objRQ_Mst_GovTaxID.Tid // strTid
                    , objRQ_Mst_GovTaxID.GwUserCode // strGwUserCode
                    , objRQ_Mst_GovTaxID.GwPassword // strGwPassword
                    , objRQ_Mst_GovTaxID.WAUserCode // strUserCode
                    , objRQ_Mst_GovTaxID.WAUserPassword // strUserPassword
                    , ref alParamsCoupleError // alParamsCoupleError
                                              ////
                    , objRQ_Mst_GovTaxID.Mst_GovTaxID.GovTaxID // objGovTaxID
                    , objRQ_Mst_GovTaxID.Mst_GovTaxID.GovTaxName // objGovTaxName
                    , objRQ_Mst_GovTaxID.Mst_GovTaxID.Level // objLevel
                    , objRQ_Mst_GovTaxID.Mst_GovTaxID.Address // objAddress
                    , objRQ_Mst_GovTaxID.Mst_GovTaxID.ContactEmail // objContactEmail
                    , objRQ_Mst_GovTaxID.Mst_GovTaxID.ContactPhone // objContactPhone
                    , objRQ_Mst_GovTaxID.Mst_GovTaxID.FlagActive // objFlagActive
                                                                 ////
                    , objRQ_Mst_GovTaxID.Ft_Cols_Upd // Ft_Cols_Upd
                    );
                #endregion

                // Return Good:
                return mdsResult;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsResult
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Write ReturnLog:
                //_cf.ProcessBizReturn(
                //	ref mdsResult // mdsFinal
                //	, strTid // strTid
                //	, strFunctionName // strFunctionName
                //	);
                #endregion
            }
        }
        public DataSet RptSv_Mst_GovTaxID_Update(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            ////
            , object objGovTaxID
            , object objGovTaxName
            , object objLevel
            , object objAddress
            , object objContactEmail
            , object objContactPhone
            , object objFlagActive
            ////
            , object objFt_Cols_Upd
            )
        {
            #region // Temp:
            DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            //int nTidSeq = 0;
            DateTime dtimeSys = DateTime.UtcNow;
            string strFunctionName = "RptSv_Mst_GovTaxID_Update";
            string strErrorCodeDefault = TError.ErridnInventory.RptSv_Mst_GovTaxID_Update;
            alParamsCoupleError.AddRange(new object[]{
                    "strFunctionName", strFunctionName
                    , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
			        ////
					, "objGovTaxID", objGovTaxID
                    , "objGovTaxName", objGovTaxName
                    , "objLevel", objLevel
                    , "objAddress", objAddress
                    , "objContactEmail", objContactEmail
                    , "objContactPhone", objContactPhone
                    , "objFlagActive", objFlagActive
                    ////
                    , "objFt_Cols_Upd", objFt_Cols_Upd
                    });
            #endregion

            try
            {
                #region // Init:
                //_cf.db.LogUserId = _cf.sinf.strUserCode;
                _cf.db.BeginTransaction();

                // Write RequestLog:
                _cf.ProcessBizReq_OutSide(
                    strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    , alParamsCoupleError // alParamsCoupleError
                    );

                // Sys_User_CheckAuthentication:
                //RptSv_Sys_User_CheckAuthentication(
                //    ref alParamsCoupleError
                //    , strWAUserCode
                //    , strWAUserPassword
                //    );

                //// Check Access/Deny:
                //Sys_Access_CheckDenyV30(
                //    ref alParamsCoupleError
                //    , strWAUserCode
                //    , strFunctionName
                //    );
                #endregion

                #region // Mst_GovTaxID_UpdateX:
                //DataSet dsGetData = null;
                {
                    Mst_GovTaxID_UpdateX(
                        strTid // strTid
                        , strGwUserCode // strGwUserCode
                        , strGwPassword // strGwPassword
                        , strWAUserCode // strWAUserCode
                        , strWAUserPassword // strWAUserPassword
                        , ref alParamsCoupleError // alParamsCoupleError
                        , dtimeSys // dtimeSys
                                   ////
                        , objGovTaxID
                        , objGovTaxName
                        , objLevel
                        , objAddress
                        , objContactEmail
                        , objContactPhone
                        , objFlagActive
                        /////
                        , objFt_Cols_Upd // objFt_Cols_Upd
                        );
                }
                ////
                //CmUtils.DataUtils.MoveDataTable(ref mdsFinal, ref dsGetData);
                #endregion

                // Return Good:
                TDALUtils.DBUtils.CommitSafety(_cf.db);
                mdsFinal.AcceptChanges();
                return mdsFinal;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Rollback:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);

                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsFinal
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Rollback and Release resources:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);
                TDALUtils.DBUtils.ReleaseAllSemaphore(_cf.db_Sys, true);

                // Write ReturnLog:
                _cf.ProcessBizReturn_OutSide(
                    ref mdsFinal // mdsFinal
                    , strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    );
                #endregion
            }
        }
        public DataSet WAS_Mst_GovTaxID_Delete(
            ref ArrayList alParamsCoupleError
            , RQ_Mst_GovTaxID objRQ_Mst_GovTaxID
            ////
            , out RT_Mst_GovTaxID objRT_Mst_GovTaxID
            )
        {
            #region // Temp:
            string strTid = objRQ_Mst_GovTaxID.Tid;
            objRT_Mst_GovTaxID = new RT_Mst_GovTaxID();
            DataSet mdsResult = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            DateTime dtimeSys = DateTime.UtcNow;
            //DataSet mdsExec = null;
            //DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(objRQ_Mst_GovTaxID.Tid);
            //int nTidSeq = 0;
            //bool bNeedTransaction = true;
            string strFunctionName = "WAS_Mst_GovTaxID_Delete";
            string strErrorCodeDefault = TError.ErridnInventory.WAS_Mst_GovTaxID_Delete;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
				});
            #endregion

            try
            {
                #region // Init:
                #endregion

                #region // Refine and Check Input:
                List<Mst_GovTaxID> lst_Mst_GovTaxID = new List<Mst_GovTaxID>();
                #endregion

                #region // Mst_GovTaxID_Delete:
                mdsResult = Mst_GovTaxID_Delete(
                    objRQ_Mst_GovTaxID.Tid // strTid
                    , objRQ_Mst_GovTaxID.GwUserCode // strGwUserCode
                    , objRQ_Mst_GovTaxID.GwPassword // strGwPassword
                    , objRQ_Mst_GovTaxID.WAUserCode // strUserCode
                    , objRQ_Mst_GovTaxID.WAUserPassword // strUserPassword
                    , ref alParamsCoupleError // alParamsCoupleError
                                              ////
                    , objRQ_Mst_GovTaxID.Mst_GovTaxID.GovTaxID // objOrganCode
                    );
                #endregion

                // Return Good:
                return mdsResult;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsResult
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Write ReturnLog:
                //_cf.ProcessBizReturn(
                //	ref mdsResult // mdsFinal
                //	, strTid // strTid
                //	, strFunctionName // strFunctionName
                //	);
                #endregion
            }
        }
        public DataSet Mst_GovTaxID_Delete(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            ////
            , object objGovTaxID
            )
        {
            #region // Temp:
            DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            //int nTidSeq = 0;
            DateTime dtimeSys = DateTime.UtcNow;
            string strFunctionName = "Mst_GovTaxID_Delete";
            string strErrorCodeDefault = TError.ErridnInventory.Mst_GovTaxID_Delete;
            alParamsCoupleError.AddRange(new object[]{
                    "strFunctionName", strFunctionName
                    , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
			        ////
					, "objGovTaxID", objGovTaxID
                    });
            #endregion

            try
            {
                #region // Init:
                //_cf.db.LogUserId = _cf.sinf.strUserCode;
                _cf.db.BeginTransaction();

                // Write RequestLog:
                _cf.ProcessBizReq_OutSide(
                    strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    , alParamsCoupleError // alParamsCoupleError
                    );

                // Sys_User_CheckAuthentication:
                //Sys_User_CheckAuthentication(
                //    ref alParamsCoupleError
                //    , strWAUserCode
                //    , strWAUserPassword
                //    );

                // Check Access/Deny:
                Sys_Access_CheckDenyV30(
                    ref alParamsCoupleError
                    , strWAUserCode
                    , strFunctionName
                    );
                #endregion

                #region // Mst_GovTaxID_DeleteX:
                //DataSet dsGetData = null;
                {
                    Mst_GovTaxID_DeleteX(
                        strTid // strTid
                        , strGwUserCode // strGwUserCode
                        , strGwPassword // strGwPassword
                        , strWAUserCode // strWAUserCode
                        , strWAUserPassword // strWAUserPassword
                        , ref alParamsCoupleError // alParamsCoupleError
                        , dtimeSys // dtimeSys
                                   ////
                        , objGovTaxID // objGovTaxID
                        );
                }
                ////
                //CmUtils.DataUtils.MoveDataTable(ref mdsFinal, ref dsGetData);
                #endregion

                // Return Good:
                TDALUtils.DBUtils.CommitSafety(_cf.db); // Always Rollback.
                mdsFinal.AcceptChanges();
                return mdsFinal;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Rollback:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);

                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsFinal
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Rollback and Release resources:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);
                TDALUtils.DBUtils.ReleaseAllSemaphore(_cf.db_Sys, true);

                // Write ReturnLog:
                _cf.ProcessBizReturn_OutSide(
                    ref mdsFinal // mdsFinal
                    , strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    );
                #endregion
            }
        }
        public DataSet WAS_RptSv_Mst_GovTaxID_Delete(
            ref ArrayList alParamsCoupleError
            , RQ_Mst_GovTaxID objRQ_Mst_GovTaxID
            ////
            , out RT_Mst_GovTaxID objRT_Mst_GovTaxID
            )
        {
            #region // Temp:
            string strTid = objRQ_Mst_GovTaxID.Tid;
            objRT_Mst_GovTaxID = new RT_Mst_GovTaxID();
            DataSet mdsResult = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            DateTime dtimeSys = DateTime.UtcNow;
            //DataSet mdsExec = null;
            //DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(objRQ_Mst_GovTaxID.Tid);
            //int nTidSeq = 0;
            //bool bNeedTransaction = true;
            string strFunctionName = "WAS_RptSv_Mst_GovTaxID_Delete";
            string strErrorCodeDefault = TError.ErridnInventory.WAS_RptSv_Mst_GovTaxID_Delete;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
				});
            #endregion

            try
            {
                #region // Init:
                #endregion

                #region // Refine and Check Input:
                List<Mst_GovTaxID> lst_Mst_GovTaxID = new List<Mst_GovTaxID>();
                #endregion

                #region // Mst_GovTaxID_Delete:
                mdsResult = RptSv_Mst_GovTaxID_Delete(
                    objRQ_Mst_GovTaxID.Tid // strTid
                    , objRQ_Mst_GovTaxID.GwUserCode // strGwUserCode
                    , objRQ_Mst_GovTaxID.GwPassword // strGwPassword
                    , objRQ_Mst_GovTaxID.WAUserCode // strUserCode
                    , objRQ_Mst_GovTaxID.WAUserPassword // strUserPassword
                    , ref alParamsCoupleError // alParamsCoupleError
                                              ////
                    , objRQ_Mst_GovTaxID.Mst_GovTaxID.GovTaxID // objOrganCode
                    );
                #endregion

                // Return Good:
                return mdsResult;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsResult
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Write ReturnLog:
                //_cf.ProcessBizReturn(
                //	ref mdsResult // mdsFinal
                //	, strTid // strTid
                //	, strFunctionName // strFunctionName
                //	);
                #endregion
            }
        }
        public DataSet RptSv_Mst_GovTaxID_Delete(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            ////
            , object objGovTaxID
            )
        {
            #region // Temp:
            DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            //int nTidSeq = 0;
            DateTime dtimeSys = DateTime.UtcNow;
            string strFunctionName = "RptSv_Mst_GovTaxID_Delete";
            string strErrorCodeDefault = TError.ErridnInventory.RptSv_Mst_GovTaxID_Delete;
            alParamsCoupleError.AddRange(new object[]{
                    "strFunctionName", strFunctionName
                    , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
			        ////
					, "objGovTaxID", objGovTaxID
                    });
            #endregion

            try
            {
                #region // Init:
                //_cf.db.LogUserId = _cf.sinf.strUserCode;
                _cf.db.BeginTransaction();

                // Write RequestLog:
                _cf.ProcessBizReq_OutSide(
                    strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    , alParamsCoupleError // alParamsCoupleError
                    );

                // Sys_User_CheckAuthentication:
                //RptSv_Sys_User_CheckAuthentication(
                //    ref alParamsCoupleError
                //    , strWAUserCode
                //    , strWAUserPassword
                //    );

                //// Check Access/Deny:
                //Sys_Access_CheckDenyV30(
                //    ref alParamsCoupleError
                //    , strWAUserCode
                //    , strFunctionName
                //    );
                #endregion

                #region // Mst_GovTaxID_DeleteX:
                //DataSet dsGetData = null;
                {
                    Mst_GovTaxID_DeleteX(
                        strTid // strTid
                        , strGwUserCode // strGwUserCode
                        , strGwPassword // strGwPassword
                        , strWAUserCode // strWAUserCode
                        , strWAUserPassword // strWAUserPassword
                        , ref alParamsCoupleError // alParamsCoupleError
                        , dtimeSys // dtimeSys
                                   ////
                        , objGovTaxID // objGovTaxID
                        );
                }
                ////
                //CmUtils.DataUtils.MoveDataTable(ref mdsFinal, ref dsGetData);
                #endregion

                // Return Good:
                TDALUtils.DBUtils.CommitSafety(_cf.db); // Always Rollback.
                mdsFinal.AcceptChanges();
                return mdsFinal;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Rollback:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);

                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsFinal
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Rollback and Release resources:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);
                TDALUtils.DBUtils.ReleaseAllSemaphore(_cf.db_Sys, true);

                // Write ReturnLog:
                _cf.ProcessBizReturn_OutSide(
                    ref mdsFinal // mdsFinal
                    , strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    );
                #endregion
            }
        }
        private void Mst_GovTaxID_GetX(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            , DateTime dtimeSys
            //// Filter:
            , string strFt_RecordStart
            , string strFt_RecordCount
            , string strFt_WhereClause
            //// Return:
            , string strRt_Cols_Mst_GovTaxID
            ////
            , out DataSet dsGetData
            )
        {
            #region // Temp:
            //DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            //DateTime dtimeSys = DateTime.UtcNow;
            //bool bNeedTransaction = true;
            string strFunctionName = "Mst_GovTaxID_GetX";
            //string strErrorCodeDefault = TError.ErrHTCNM.Mnf_VIN_Get_QCX;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
                });
            #endregion

            #region // Check:
            //// Refine:
            long nFilterRecordStart = Convert.ToInt64(strFt_RecordStart);
            long nFilterRecordEnd = nFilterRecordStart + Convert.ToInt64(strFt_RecordCount) - 1;
            bool bGet_Mst_GovTaxID = (strRt_Cols_Mst_GovTaxID != null && strRt_Cols_Mst_GovTaxID.Length > 0);

            //// drAbilityOfUser:
            //DataRow drAbilityOfUser = myCache_ViewAbility_GetUserInfo(_cf.sinf.strUserCode);

            #endregion

            #region // Build Sql:
            ////
            ArrayList alParamsCoupleSql = new ArrayList();
            alParamsCoupleSql.AddRange(new object[] {
                "@nFilterRecordStart", nFilterRecordStart
                , "@nFilterRecordEnd", nFilterRecordEnd
                });
            ////
            //myCache_ViewAbility_GetDealerInfo(drAbilityOfUser);
            ////
            string strSqlGetData = CmUtils.StringUtils.Replace(@"
					---- #tbl_Mst_GovTaxID_Filter_Draft:
					select distinct
						identity(bigint, 0, 1) MyIdxSeq
						, mdept.GovTaxID
					into #tbl_Mst_GovTaxID_Filter_Draft
					from Mst_GovTaxID mdept --//[mylock]
					where (1=1)
						zzB_Where_strFilter_zzE
					order by mdept.GovTaxID asc
					;

					---- Summary:
					select Count(0) MyCount from #tbl_Mst_GovTaxID_Filter_Draft t --//[mylock]
					;

					---- #tbl_Mst_GovTaxID_Filter:
					select
						t.*
					into #tbl_Mst_GovTaxID_Filter
					from #tbl_Mst_GovTaxID_Filter_Draft t --//[mylock]
					where (1=1)
						and (t.MyIdxSeq >= @nFilterRecordStart)
						and (t.MyIdxSeq <= @nFilterRecordEnd)
					;

					-------- Mst_GovTaxID -----:
					zzB_Select_Mst_GovTaxID_zzE
					------------------------

					---- Clear for debug:
					--drop table #tbl_Mst_GovTaxID_Filter_Draft;
					--drop table #tbl_Mst_GovTaxID_Filter;
				"
                );
            ////
            string zzB_Select_Mst_GovTaxID_zzE = "-- Nothing.";
            if (bGet_Mst_GovTaxID)
            {
                #region // bGet_Mst_GovTaxID:
                zzB_Select_Mst_GovTaxID_zzE = CmUtils.StringUtils.Replace(@"
					---- Mst_GovTaxID:
					select
						t.MyIdxSeq
						, mdept.*
					from #tbl_Mst_GovTaxID_Filter t --//[mylock]
						inner join Mst_GovTaxID mdept --//[mylock]
							on t.GovTaxID = mdept.GovTaxID
					order by t.MyIdxSeq asc
					;
				"
                );
                #endregion
            }
            ////
            string zzB_Where_strFilter_zzE = "";
            {
                Hashtable htSpCols = new Hashtable();
                {
                    #region // htSpCols:
                    ////
                    TUtils.CUtils.MyBuildHTSupportedColumns(
                        _cf.db // db
                        , ref htSpCols // htSupportedColumns
                        , "Mst_GovTaxID" // strTableNameDB
                        , "Mst_GovTaxID." // strPrefixStd
                        , "mdept." // strPrefixAlias
                        );
                    ////
                    #endregion
                }
                zzB_Where_strFilter_zzE = CmUtils.SqlUtils.BuildWhere(
                    htSpCols // htSpCols
                    , strFt_WhereClause // strClause
                    , "@p_" // strParamPrefix
                    , ref alParamsCoupleSql // alParamsCoupleSql
                    );
                zzB_Where_strFilter_zzE = (zzB_Where_strFilter_zzE.Length <= 0 ? "" : string.Format(" and ({0})", zzB_Where_strFilter_zzE));
                alParamsCoupleError.AddRange(new object[]{
                    "zzB_Where_strFilter_zzE", zzB_Where_strFilter_zzE
                    });
            }
            ////
            strSqlGetData = CmUtils.StringUtils.Replace(
                strSqlGetData
                , "zzB_Where_strFilter_zzE", zzB_Where_strFilter_zzE
                , "zzB_Select_Mst_GovTaxID_zzE", zzB_Select_Mst_GovTaxID_zzE
                );
            #endregion

            #region // Get Data:
            dsGetData = _cf.db.ExecQuery(
                strSqlGetData
                , alParamsCoupleSql.ToArray()
                );
            int nIdxTable = 0;
            dsGetData.Tables[nIdxTable++].TableName = "MySummaryTable";
            if (bGet_Mst_GovTaxID)
            {
                dsGetData.Tables[nIdxTable++].TableName = "Mst_GovTaxID";
            }
            #endregion
        }
        private void Mst_GovTaxID_CreateX(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            , DateTime dtimeSys
            //// 
            , object objGovTaxID
            , object objGovTaxIDParent
            , object objProvinceCode
            , object objDistrictCode
            , object objGovTaxName
            , object objLevel
            , object objAddress
            , object objContactEmail
            , object objContactPhone
            ////
            )
        {
            #region // Temp:
            string strFunctionName = "Mst_GovTaxID_CreateX";
            //string strErrorCodeDefault = TError.ErrHTCNM.Mnf_VIN_Get_QCX;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
                , "objGovTaxID", objGovTaxID
                , "objGovTaxIDParent", objGovTaxIDParent
                , "objProvinceCode", objProvinceCode
                , "objDistrictCode", objDistrictCode
                , "objGovTaxName", objGovTaxName
                , "objLevel", objLevel
                , "objAddress", objAddress
                , "objContactEmail", objContactEmail
                , "objContactPhone", objContactPhone
                });
            #endregion

            #region // Refine and Check Input:
            ////
            string strGovTaxID = TUtils.CUtils.StdParam(objGovTaxID);
            string strGovTaxIDParent = TUtils.CUtils.StdParam(objGovTaxIDParent);
            string strProvinceCode = TUtils.CUtils.StdParam(objProvinceCode);
            string strDistrictCode = TUtils.CUtils.StdParam(objDistrictCode);
            string strGovTaxName = string.Format("{0}", objGovTaxName).Trim();
            string strLevel = string.Format("{0}", objLevel).Trim();
            string strAddress = string.Format("{0}", objAddress).Trim();
            string strContactEmail = string.Format("{0}", objContactEmail).Trim();
            string strContactPhone = string.Format("{0}", objContactPhone).Trim();

            // drAbilityOfUser:
            //DataRow drAbilityOfUser = Sys_User_GetAbilityViewOfUser(_cf.sinf.strUserCode);
            ////
            DataTable dtDB_Mst_GovTaxID = null;
            {
                ////
                if (strGovTaxID == null || strGovTaxID.Length < 1)
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.strGovTaxID", strGovTaxID
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Mst_GovTaxID_Create_InvalidGovTaxID
                        , null
                        , alParamsCoupleError.ToArray()
                        );
                }
                ////
                Mst_GovTaxID_CheckDB(
                    ref alParamsCoupleError // alParamsCoupleError
                    , strGovTaxID // objGovTaxID
                    , TConst.Flag.No // strFlagExistToCheck
                    , "" // strFlagActiveListToCheck
                    , out dtDB_Mst_GovTaxID // dtDB_Mst_GovTaxID
                    );
                ////
                DataTable dtDB_Mst_GovTaxID_Parent = null;

                if (!string.IsNullOrEmpty(strGovTaxIDParent))
                {
                    /////
                    Mst_GovTaxID_CheckDB(
                        ref alParamsCoupleError // alParamsCoupleError
                        , strGovTaxIDParent // objGovTaxID
                        , TConst.Flag.Yes // strFlagExistToCheck
                        , TConst.Flag.Active // strFlagActiveListToCheck
                        , out dtDB_Mst_GovTaxID_Parent // dtDB_Mst_GovTaxID
                        );
                    ////
                }
                ////
                DataTable dtDB_Mst_District = null;

                Mst_District_CheckDB(
                    ref alParamsCoupleError // alParamsCoupleError
                    , strProvinceCode // objDistrictCode
                    , strDistrictCode // objDistrictCode
                    , TConst.Flag.Yes // strFlagExistToCheck
                    , TConst.Flag.Active // strFlagActiveListToCheck
                    , out dtDB_Mst_District // dtDB_Mst_District
                    );
                ////

                if (strGovTaxName.Length < 1)
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.strGovTaxName", strGovTaxName
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Mst_GovTaxID_Create_InvalidGovTaxName
                        , null
                        , alParamsCoupleError.ToArray()
                        );
                }
            }
            #endregion

            #region // SaveDB Mst_GovTaxID:
            {
                // Init:
                //ArrayList alColumnEffective = new ArrayList();
                string strFN = "";
                DataRow drDB = dtDB_Mst_GovTaxID.NewRow();
                strFN = "GovTaxID"; drDB[strFN] = strGovTaxID;
                strFN = "NetworkID"; drDB[strFN] = nNetworkID;
                strFN = "GovTaxIDParent"; drDB[strFN] = strGovTaxIDParent;
                strFN = "GovTaxIDBUCode"; drDB[strFN] = "X";
                strFN = "GovTaxIDBUPattern"; drDB[strFN] = "X";
                strFN = "GovTaxIDLevel"; drDB[strFN] = 1;
                strFN = "ProvinceCode"; drDB[strFN] = strProvinceCode;
                strFN = "DistrictCode"; drDB[strFN] = strDistrictCode;
                strFN = "GovTaxName"; drDB[strFN] = strGovTaxName;
                strFN = "Level"; drDB[strFN] = strLevel;
                strFN = "Address"; drDB[strFN] = strAddress;
                strFN = "ContactEmail"; drDB[strFN] = strContactEmail;
                strFN = "ContactPhone"; drDB[strFN] = strContactPhone;
                strFN = "FlagActive"; drDB[strFN] = TConst.Flag.Active;
                strFN = "LogLUDTimeUTC"; drDB[strFN] = dtimeSys.ToString("yyyy-MM-dd HH:mm:ss");
                strFN = "LogLUBy"; drDB[strFN] = strWAUserCode;
                dtDB_Mst_GovTaxID.Rows.Add(drDB);

                // Save:
                _cf.db.SaveData(
                    "Mst_GovTaxID" // strTableName
                    , dtDB_Mst_GovTaxID // dtData
                                        //, alColumnEffective.ToArray()
                    );
            }
            #endregion

            #region // Post Save:
            {
                Mst_GovTaxID_UpdBU();
            }
            #endregion
        }
        private void Mst_GovTaxID_UpdateX(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            , DateTime dtimeSys
            //// 
            , object objGovTaxID
            , object objGovTaxName
            , object objLevel
            , object objAddress
            , object objContactEmail
            , object objContactPhone
            , object objFlagActive
            ////
            , object objFt_Cols_Upd
            ////
            )
        {
            #region // Temp:
            string strFunctionName = "Mst_GovTaxID_UpdateX";
            //string strErrorCodeDefault = TError.ErrHTCNM.Mst_GovTaxID_UpdateX;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
                , "objGovTaxID", objGovTaxID
                , "objGovTaxName", objGovTaxName
                , "objLevel", objLevel
                , "objAddress", objAddress
                , "objContactEmail", objContactEmail
                , "objContactPhone", objContactPhone
                , "objFlagActive", objFlagActive
                ////
                , "objFt_Cols_Upd", objFt_Cols_Upd
                });
            #endregion

            #region // Refine and Check Input:
            ////
            string strFt_Cols_Upd = TUtils.CUtils.StdParam(objFt_Cols_Upd);
            strFt_Cols_Upd = (strFt_Cols_Upd == null ? "" : strFt_Cols_Upd);
            ////
            string strGovTaxID = TUtils.CUtils.StdParam(objGovTaxID);
            string strGovTaxName = string.Format("{0}", objGovTaxName).Trim();
            string strLevel = string.Format("{0}", objLevel).Trim();
            string strAddress = string.Format("{0}", objAddress).Trim();
            string strContactEmail = string.Format("{0}", objContactEmail).Trim();
            string strContactPhone = string.Format("{0}", objContactPhone).Trim();
            string strFlagActive = TUtils.CUtils.StdFlag(objFlagActive);
            ////
            bool bUpd_DistrictCode = strFt_Cols_Upd.Contains("Mst_GovTaxID.DistrictCode".ToUpper());
            bool bUpd_GovTaxName = strFt_Cols_Upd.Contains("Mst_GovTaxID.GovTaxName".ToUpper());
            bool bUpd_Level = strFt_Cols_Upd.Contains("Mst_GovTaxID.Level".ToUpper());
            bool bUpd_Address = strFt_Cols_Upd.Contains("Mst_GovTaxID.Address".ToUpper());
            bool bUpd_ContactEmail = strFt_Cols_Upd.Contains("Mst_GovTaxID.ContactEmail".ToUpper());
            bool bUpd_ContactPhone = strFt_Cols_Upd.Contains("Mst_GovTaxID.ContactPhone".ToUpper());
            bool bUpd_FlagActive = strFt_Cols_Upd.Contains("Mst_GovTaxID.FlagActive".ToUpper());

            ////
            DataTable dtDB_Mst_GovTaxID = null;
            {
                ////
                Mst_GovTaxID_CheckDB(
                     ref alParamsCoupleError // alParamsCoupleError
                     , strGovTaxID // strGovTaxID 
                     , TConst.Flag.Yes // strFlagExistToCheck
                     , "" // strFlagActiveListToCheck
                     , out dtDB_Mst_GovTaxID // dtDB_Mst_Organ
                    );
                ////
                if (strGovTaxName.Length < 1)
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.strGovTaxName", strGovTaxName
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Mst_GovTaxID_Update_InvalidGovTaxName
                        , null
                        , alParamsCoupleError.ToArray()
                        );
                }
            }
            #endregion

            #region // Save Mst_Chain:
            {
                // Init:
                ArrayList alColumnEffective = new ArrayList();
                string strFN = "";
                DataRow drDB = dtDB_Mst_GovTaxID.Rows[0];
                if (bUpd_GovTaxName) { strFN = "GovTaxName"; drDB[strFN] = strGovTaxName; alColumnEffective.Add(strFN); }
                if (bUpd_Level) { strFN = "Level"; drDB[strFN] = strLevel; alColumnEffective.Add(strFN); }
                if (bUpd_Address) { strFN = "Address"; drDB[strFN] = strAddress; alColumnEffective.Add(strFN); }
                if (bUpd_ContactEmail) { strFN = "ContactEmail"; drDB[strFN] = strContactEmail; alColumnEffective.Add(strFN); }
                if (bUpd_ContactPhone) { strFN = "ContactPhone"; drDB[strFN] = strContactPhone; alColumnEffective.Add(strFN); }
                if (bUpd_FlagActive) { strFN = "FlagActive"; drDB[strFN] = strFlagActive; alColumnEffective.Add(strFN); }
                strFN = "LogLUDTimeUTC"; drDB[strFN] = dtimeSys.ToString("yyyy-MM-dd HH:mm:ss"); alColumnEffective.Add(strFN);
                strFN = "LogLUBy"; drDB[strFN] = strWAUserCode; alColumnEffective.Add(strFN);

                // Save:
                _cf.db.SaveData(
                    "Mst_GovTaxID"
                    , dtDB_Mst_GovTaxID
                    , alColumnEffective.ToArray()
                    );
            }
            #endregion
        }
        private void Mst_GovTaxID_DeleteX(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            , DateTime dtimeSys
            //// 
            , object objGovTaxID
            ////
            )
        {
            #region // Temp:
            string strFunctionName = "Mst_Organ_DeleteX";
            //string strErrorCodeDefault = TError.ErrHTCNM.Mnf_VIN_Get_QCX;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
                , "objGovTaxID", objGovTaxID
                });
            #endregion

            #region // Refine and Check Input:
            ////
            string strGovTaxID = TUtils.CUtils.StdParam(objGovTaxID);

            ////
            DataTable dtDB_Mst_GovTaxID = null;
            {
                ////
                Mst_GovTaxID_CheckDB(
                     ref alParamsCoupleError // alParamsCoupleError
                     , strGovTaxID // strGovTaxID 
                     , TConst.Flag.Yes // strFlagExistToCheck
                     , "" // strFlagActiveListToCheck
                     , out dtDB_Mst_GovTaxID // dtDB_Mst_GovTaxID
                    );
                ////
            }
            #endregion

            #region // SaveDB:
            {
                // Init:
                dtDB_Mst_GovTaxID.Rows[0].Delete();

                // Save:
                _cf.db.SaveData(
                    "Mst_GovTaxID"
                    , dtDB_Mst_GovTaxID
                    );
            }
            #endregion
        }
        #endregion

        #region // Mst_NNT:
        private void Mst_NNT_CheckDB(
            ref ArrayList alParamsCoupleError
            , object objMST
            , string strFlagExistToCheck
            , string strFlagActiveListToCheck
            , string strTCTStatusListToCheck
            , out DataTable dtDB_Mst_NNT
            )
        {
            // GetInfo:
            string strSqlExec = CmUtils.StringUtils.Replace(@"
					select top 1
						t.*
					from Mst_NNT t --//[mylock]
					where (1=1)
						and t.MST = @objMST
					;
				");
            dtDB_Mst_NNT = _cf.db.ExecQuery(
                strSqlExec
                , "@objMST", objMST
                ).Tables[0];
            dtDB_Mst_NNT.TableName = "Mst_NNT";

            // strFlagExistToCheck:
            if (strFlagExistToCheck.Length > 0)
            {
                if (CmUtils.StringUtils.StringEqual(strFlagExistToCheck, TConst.Flag.Active) && dtDB_Mst_NNT.Rows.Count < 1)
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.MST", objMST
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Mst_NNT_CheckDB_NNTNotFound
                        , null
                        , alParamsCoupleError.ToArray()
                        );
                }
                if (CmUtils.StringUtils.StringEqual(strFlagExistToCheck, TConst.Flag.Inactive) && dtDB_Mst_NNT.Rows.Count > 0)
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.MST", objMST
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Mst_NNT_CheckDB_NNTExist
                        , null
                        , alParamsCoupleError.ToArray()
                        );
                }
            }

            // strFlagActiveListToCheck:
            if (strFlagActiveListToCheck.Length > 0 && !strFlagActiveListToCheck.Contains(Convert.ToString(dtDB_Mst_NNT.Rows[0]["FlagActive"])))
            {
                alParamsCoupleError.AddRange(new object[]{
                    "Check.MST", objMST
                    , "Check.strFlagActiveListToCheck", strFlagActiveListToCheck
                    , "DB.FlagActive", dtDB_Mst_NNT.Rows[0]["FlagActive"]
                    });
                throw CmUtils.CMyException.Raise(
                    TError.ErridnInventory.Mst_NNT_CheckDB_FlagActiveNotMatched
                    , null
                    , alParamsCoupleError.ToArray()
                    );
            }

            // strTCTStatusRegListToCheck:
            if (strTCTStatusListToCheck.Length > 0 && !strTCTStatusListToCheck.Contains(Convert.ToString(dtDB_Mst_NNT.Rows[0]["TCTStatus"])))
            {
                alParamsCoupleError.AddRange(new object[]{
                    "Check.MST", objMST
                    , "Check.strTCTStatusListToCheck", strTCTStatusListToCheck
                    , "DB.TCTStatus", dtDB_Mst_NNT.Rows[0]["TCTStatus"]
                    });
                throw CmUtils.CMyException.Raise(
                    TError.ErridnInventory.Mst_NNT_CheckDB_StatusNotMatched
                    , null
                    , alParamsCoupleError.ToArray()
                    );
            }

        }

        private void Mst_NNT_UpdBU()
        {
            string sqlPostSave = CmUtils.StringUtils.Replace(@"
                    declare @strMST_Root nvarchar(100); select @strMST_Root = 'ALL';
    
                    update t
                    set
	                    t.MSTBUCode = @strMST_Root
	                    , t.MSTBUPattern = @strMST_Root + '%'
	                    , t.MSTLevel = 1
                    from Mst_NNT t --//[mylock]
	                    left join Mst_NNT t_Parent
		                    on t.MSTParent = t_Parent.MST
                    where (1=1)
	                    and t.MST in (@strMST_Root)
                    ;

                    declare @nDeepDealer int; select @nDeepDealer = 0;
                    while (@nDeepDealer <= 6)
                    begin
	                    select @nDeepDealer = @nDeepDealer + 1;
	
	                    update t
	                    set
		                    t.MSTBUCode = IsNull(t_Parent.MSTBUCode + '.', '') + t.MST
		                    , t.MSTBUPattern = IsNull(t_Parent.MSTBUCode + '.', '') + t.MST + '%'
		                    , t.MSTLevel = IsNull(t_Parent.MSTLevel, 0) + 1
	                    from Mst_NNT t --//[mylock]
		                    left join Mst_NNT t_Parent --//[mylock]
			                    on t.MSTParent = t_Parent.MST
	                    where (1=1)
		                    and t.MST not in (@strMST_Root)
	                    ;
                    end;
                ");
            DataSet dsPostSave = _cf.db.ExecQuery(sqlPostSave);
        }
        public DataSet WAS_Mst_NNT_Get(
            ref ArrayList alParamsCoupleError
            , RQ_Mst_NNT objRQ_Mst_NNT
            ////
            , out RT_Mst_NNT objRT_Mst_NNT
            )
        {
            #region // Temp:
            string strTid = objRQ_Mst_NNT.Tid;
            objRT_Mst_NNT = new RT_Mst_NNT();
            DataSet mdsResult = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            DateTime dtimeSys = DateTime.UtcNow;
            //DataSet mdsExec = null;
            //DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(objRQ_Mst_NNT.Tid);
            //int nTidSeq = 0;
            //bool bNeedTransaction = true;
            string strFunctionName = "WAS_Mst_NNT_Get";
            string strErrorCodeDefault = TError.ErridnInventory.WAS_Mst_NNT_Get;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
				});
            #endregion

            try
            {
                #region // Init:
                #endregion

                #region // Refine and Check Input:
                List<MySummaryTable> lst_MySummaryTable = new List<MySummaryTable>();
                List<Mst_NNT> lst_Mst_NNT = new List<Mst_NNT>();
                #endregion

                #region // WS_Mst_NNT_Get:
                mdsResult = Mst_NNT_Get(
                    objRQ_Mst_NNT.Tid // strTid
                    , objRQ_Mst_NNT.GwUserCode // strGwUserCode
                    , objRQ_Mst_NNT.GwPassword // strGwPassword
                    , objRQ_Mst_NNT.WAUserCode // strUserCode
                    , objRQ_Mst_NNT.WAUserPassword // strUserPassword
                    , ref alParamsCoupleError // alParamsCoupleError
                                              //// Filter:
                    , objRQ_Mst_NNT.Ft_RecordStart // strFt_RecordStart
                    , objRQ_Mst_NNT.Ft_RecordCount // strFt_RecordCount
                    , objRQ_Mst_NNT.Ft_WhereClause // strFt_WhereClause
                                                   //// Return:
                    , objRQ_Mst_NNT.Rt_Cols_Mst_NNT // strRt_Cols_Mst_NNT
                    );
                #endregion

                #region // GetData:
                if (!CmUtils.CMyDataSet.HasError(mdsResult))
                {
                    ////
                    DataTable dt_MySummaryTable = mdsResult.Tables["MySummaryTable"].Copy();
                    lst_MySummaryTable = TUtils.DataTableCmUtils.ToListof<MySummaryTable>(dt_MySummaryTable);
                    objRT_Mst_NNT.MySummaryTable = lst_MySummaryTable[0];
                    ////
                    DataTable dt_Mst_NNT = mdsResult.Tables["Mst_NNT"].Copy();
                    lst_Mst_NNT = TUtils.DataTableCmUtils.ToListof<Mst_NNT>(dt_Mst_NNT);
                    objRT_Mst_NNT.Lst_Mst_NNT = lst_Mst_NNT;
                    /////
                }
                #endregion

                // Return Good:
                return mdsResult;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsResult
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Write ReturnLog:
                //_cf.ProcessBizReturn(
                //	ref mdsResult // mdsFinal
                //	, strTid // strTid
                //	, strFunctionName // strFunctionName
                //	);
                #endregion
            }
        }

		public DataSet WAS_RptSv_Mst_NNT_Get(
			ref ArrayList alParamsCoupleError
			, RQ_Mst_NNT objRQ_Mst_NNT
			////
			, out RT_Mst_NNT objRT_Mst_NNT
			)
		{
			#region // Temp:
			string strTid = objRQ_Mst_NNT.Tid;
			objRT_Mst_NNT = new RT_Mst_NNT();
			DataSet mdsResult = CmUtils.CMyDataSet.NewMyDataSet(strTid);
			DateTime dtimeSys = DateTime.UtcNow;
			//DataSet mdsExec = null;
			//DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(objRQ_Mst_NNT.Tid);
			//int nTidSeq = 0;
			//bool bNeedTransaction = true;
			string strFunctionName = "WAS_RptSv_Mst_NNT_Get_Get";
			string strErrorCodeDefault = TError.ErridnInventory.WAS_Mst_NNT_Get;
			alParamsCoupleError.AddRange(new object[]{
				"strFunctionName", strFunctionName
				, "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
				});
			#endregion

			try
			{
				#region // Init:
				#endregion

				#region // Refine and Check Input:
				List<MySummaryTable> lst_MySummaryTable = new List<MySummaryTable>();
				List<Mst_NNT> lst_Mst_NNT = new List<Mst_NNT>();
				#endregion

				#region // WS_Mst_NNT_Get:
				mdsResult = RptSv_Mst_NNT_Get(
					objRQ_Mst_NNT.Tid // strTid
					, objRQ_Mst_NNT.GwUserCode // strGwUserCode
					, objRQ_Mst_NNT.GwPassword // strGwPassword
					, objRQ_Mst_NNT.WAUserCode // strUserCode
					, objRQ_Mst_NNT.WAUserPassword // strUserPassword
					, ref alParamsCoupleError // alParamsCoupleError
											  //// Filter:
					, objRQ_Mst_NNT.Ft_RecordStart // strFt_RecordStart
					, objRQ_Mst_NNT.Ft_RecordCount // strFt_RecordCount
					, objRQ_Mst_NNT.Ft_WhereClause // strFt_WhereClause
												   //// Return:
					, objRQ_Mst_NNT.Rt_Cols_Mst_NNT // strRt_Cols_Mst_NNT
					);
				#endregion

				#region // GetData:
				if (!CmUtils.CMyDataSet.HasError(mdsResult))
				{
					////
					DataTable dt_MySummaryTable = mdsResult.Tables["MySummaryTable"].Copy();
					lst_MySummaryTable = TUtils.DataTableCmUtils.ToListof<MySummaryTable>(dt_MySummaryTable);
					objRT_Mst_NNT.MySummaryTable = lst_MySummaryTable[0];
					////
					DataTable dt_Mst_NNT = mdsResult.Tables["Mst_NNT"].Copy();
					lst_Mst_NNT = TUtils.DataTableCmUtils.ToListof<Mst_NNT>(dt_Mst_NNT);
					objRT_Mst_NNT.Lst_Mst_NNT = lst_Mst_NNT;
					/////
				}
				#endregion

				// Return Good:
				return mdsResult;
			}
			catch (Exception exc)
			{
				#region // Catch of try:
				// Return Bad:
				return TUtils.CProcessExc.Process(
					ref mdsResult
					, exc
					, strErrorCodeDefault
					, alParamsCoupleError.ToArray()
					);
				#endregion
			}
			finally
			{
				#region // Finally of try:
				// Write ReturnLog:
				//_cf.ProcessBizReturn(
				//	ref mdsResult // mdsFinal
				//	, strTid // strTid
				//	, strFunctionName // strFunctionName
				//	);
				#endregion
			}
		}
		public DataSet Mst_NNT_Get(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            //// Filter:
            , string strFt_RecordStart
            , string strFt_RecordCount
            , string strFt_WhereClause
            //// Return:
            , string strRt_Cols_Mst_NNT
            )
        {
            #region // Temp:
            DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            Stopwatch stopWatchFunc = new Stopwatch();
            //int nTidSeq = 0;
            DateTime dtimeSys = DateTime.UtcNow;
            string strFunctionName = "Mst_NNT_Get";
            string strErrorCodeDefault = TError.ErridnInventory.Mst_NNT_Get;
            ArrayList alParamsCoupleSW = new ArrayList();
            alParamsCoupleError.AddRange(new object[]{
                    "strFunctionName", strFunctionName
                    , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
			        //// Filter
					, "strFt_RecordStart", strFt_RecordStart
                    , "strFt_RecordCount", strFt_RecordCount
                    , "strFt_WhereClause", strFt_WhereClause
			        //// Return
					, "strRt_Cols_Mst_NNT", strRt_Cols_Mst_NNT
                    });
            #endregion

            try
            {
                #region // SW:				
                stopWatchFunc.Start();
                alParamsCoupleSW.AddRange(new object[]{
                    "strFunctionName", strFunctionName
                    , "stopWatchFunc.Start", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
                    });
                #endregion

                #region // Init:
                //_cf.db.LogUserId = _cf.sinf.strUserCode;
                _cf.db.BeginTransaction();

                // Write RequestLog:
                _cf.ProcessBizReq_OutSide(
                    strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    , alParamsCoupleError // alParamsCoupleError
                    );

                // Sys_User_CheckAuthentication:
                //Sys_User_CheckAuthentication(
                //    ref alParamsCoupleError
                //    , strWAUserCode
                //    , strWAUserPassword
                //    );

                // Check Access/Deny:
                //Sys_Access_CheckDenyV30(
                //    ref alParamsCoupleError
                //    , strWAUserCode
                //    , strFunctionName
                //    );
                #endregion

                #region // Mst_NNT_GetX:
                DataSet dsGetData = null;
                {
                    ////
                    Mst_NNT_GetX(
                        strTid // strTid
                        , strGwUserCode // strGwUserCode
                        , strGwPassword // strGwPassword
                        , strWAUserCode // strWAUserCode
                        , strWAUserPassword // strWAUserPassword
                        , ref alParamsCoupleError // alParamsCoupleError
                        , dtimeSys // dtimeSys
                                   ////
                        , strFt_RecordStart // strFt_RecordStart
                        , strFt_RecordCount // strFt_RecordCount
                        , strFt_WhereClause // strFt_WhereClause
                                            ////
                        , strRt_Cols_Mst_NNT // strRt_Cols_Mst_NNT
                                             ////
                        , out dsGetData // dsGetData
                        );
                    ////
                    CmUtils.DataUtils.MoveDataTable(ref mdsFinal, ref dsGetData);
                }
                #endregion

                // Return Good:
                TDALUtils.DBUtils.RollbackSafety(_cf.db); // Always Rollback.
                mdsFinal.AcceptChanges();
                return mdsFinal;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Rollback:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);

                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsFinal
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Rollback and Release resources:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);
                TDALUtils.DBUtils.ReleaseAllSemaphore(_cf.db_Sys, true);

                stopWatchFunc.Stop();
                alParamsCoupleSW.AddRange(new object[]{
                    "strFunctionName", strFunctionName
                    , "stopWatchFunc.Stop", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
                    , "stopWatchFunc.ElapsedMilliseconds", stopWatchFunc.ElapsedMilliseconds
                    });

                // Write ReturnLog:
                _cf.ProcessBizReturn_OutSide(
                    ref mdsFinal // mdsFinal
                    , strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    , alParamsCoupleSW // alParamsCoupleSW
                    );
                #endregion
            }
        }

		public DataSet RptSv_Mst_NNT_Get(
			string strTid
			, string strGwUserCode
			, string strGwPassword
			, string strWAUserCode
			, string strWAUserPassword
			, ref ArrayList alParamsCoupleError
			//// Filter:
			, string strFt_RecordStart
			, string strFt_RecordCount
			, string strFt_WhereClause
			//// Return:
			, string strRt_Cols_Mst_NNT
			)
		{
			#region // Temp:
			DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
			//int nTidSeq = 0;
			DateTime dtimeSys = DateTime.UtcNow;
			string strFunctionName = "RptSv_Mst_NNT_Get";
			string strErrorCodeDefault = TError.ErridnInventory.Mst_NNT_Get;
			alParamsCoupleError.AddRange(new object[]{
					"strFunctionName", strFunctionName
					, "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
			        //// Filter
					, "strFt_RecordStart", strFt_RecordStart
					, "strFt_RecordCount", strFt_RecordCount
					, "strFt_WhereClause", strFt_WhereClause
			        //// Return
					, "strRt_Cols_Mst_NNT", strRt_Cols_Mst_NNT
					});
			#endregion

			try
			{
				#region // Init:
				//_cf.db.LogUserId = _cf.sinf.strUserCode;
				_cf.db.BeginTransaction();

				// Write RequestLog:
				_cf.ProcessBizReq_OutSide(
					strTid // strTid
					, strGwUserCode // strGwUserCode
					, strGwPassword // strGwPassword
					, strWAUserCode // objUserCode
					, strFunctionName // strFunctionName
					, alParamsCoupleError // alParamsCoupleError
					);

				// RptSv_Sys_User_CheckAuthentication:
				//RptSv_Sys_User_CheckAuthentication(
				//	ref alParamsCoupleError
				//	, strWAUserCode
				//	, strWAUserPassword
				//	);

                //Check Access/ Deny:
                RptSv_Sys_Access_CheckDeny(
                    ref alParamsCoupleError
                    , strWAUserCode
                    , strFunctionName
                    );
                #endregion

                #region // Mst_NNT_GetX:
                DataSet dsGetData = null;
				{
					////
					RptSv_Mst_NNT_GetX_New20200210(
						strTid // strTid
						, strGwUserCode // strGwUserCode
						, strGwPassword // strGwPassword
						, strWAUserCode // strWAUserCode
						, strWAUserPassword // strWAUserPassword
						, ref alParamsCoupleError // alParamsCoupleError
						, dtimeSys // dtimeSys
								   ////
						, strFt_RecordStart // strFt_RecordStart
						, strFt_RecordCount // strFt_RecordCount
						, strFt_WhereClause // strFt_WhereClause
											////
						, strRt_Cols_Mst_NNT // strRt_Cols_Mst_NNT
											 ////
						, out dsGetData // dsGetData
						);
					////
					CmUtils.DataUtils.MoveDataTable(ref mdsFinal, ref dsGetData);
				}
				#endregion

				// Return Good:
				TDALUtils.DBUtils.RollbackSafety(_cf.db); // Always Rollback.
				mdsFinal.AcceptChanges();
				return mdsFinal;
			}
			catch (Exception exc)
			{
				#region // Catch of try:
				// Rollback:
				TDALUtils.DBUtils.RollbackSafety(_cf.db);

				// Return Bad:
				return TUtils.CProcessExc.Process(
					ref mdsFinal
					, exc
					, strErrorCodeDefault
					, alParamsCoupleError.ToArray()
					);
				#endregion
			}
			finally
			{
				#region // Finally of try:
				// Rollback and Release resources:
				TDALUtils.DBUtils.RollbackSafety(_cf.db);
				TDALUtils.DBUtils.ReleaseAllSemaphore(_cf.db_Sys, true);

				// Write ReturnLog:
				_cf.ProcessBizReturn_OutSide(
					ref mdsFinal // mdsFinal
					, strTid // strTid
					, strGwUserCode // strGwUserCode
					, strGwPassword // strGwPassword
					, strWAUserCode // objUserCode
					, strFunctionName // strFunctionName
					);
				#endregion
			}
		}
		public DataSet WAS_Mst_NNT_Create(
            ref ArrayList alParamsCoupleError
            , RQ_Mst_NNT objRQ_Mst_NNT
            ////
            , out RT_Mst_NNT objRT_Mst_NNT
            )
        {
            #region // Temp:
            string strTid = objRQ_Mst_NNT.Tid;
            objRT_Mst_NNT = new RT_Mst_NNT();
            DataSet mdsResult = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            DateTime dtimeSys = DateTime.UtcNow;
            //DataSet mdsExec = null;
            //DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(objRQ_Mst_NNT.Tid);
            //int nTidSeq = 0;
            //bool bNeedTransaction = true;
            string strFunctionName = "WAS_Mst_NNT_Create";
            string strErrorCodeDefault = TError.ErridnInventory.WAS_Mst_NNT_Create;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
				});
            #endregion

            try
            {
                #region // Init:
                #endregion

                #region // Refine and Check Input:
                List<Mst_NNT> lst_Mst_NNT = new List<Mst_NNT>();
                #endregion

                #region // WS_Mst_NNT_Create:
                mdsResult = Mst_NNT_Create(
                    objRQ_Mst_NNT.Tid // strTid
                    , objRQ_Mst_NNT.GwUserCode // strGwUserCode
                    , objRQ_Mst_NNT.GwPassword // strGwPassword
                    , objRQ_Mst_NNT.WAUserCode // strUserCode
                    , objRQ_Mst_NNT.WAUserPassword // strUserPassword
                    , ref alParamsCoupleError // alParamsCoupleError
                                              ////
                    , objRQ_Mst_NNT.Mst_NNT.MST // objMST
                    , objRQ_Mst_NNT.Mst_NNT.NNTFullName // objNNTFullName
                    , objRQ_Mst_NNT.Mst_NNT.MSTParent // objMSTParent
                    , objRQ_Mst_NNT.Mst_NNT.ProvinceCode // objProvinceCode
                    , objRQ_Mst_NNT.Mst_NNT.DistrictCode // objDistrictCode
                    //, objRQ_Mst_NNT.Mst_NNT.NNTType // objNNTType
                    , objRQ_Mst_NNT.Mst_NNT.DLCode // objDLCode
                    , objRQ_Mst_NNT.Mst_NNT.NNTAddress // objAddress
                    , objRQ_Mst_NNT.Mst_NNT.NNTMobile // objMobile
                    , objRQ_Mst_NNT.Mst_NNT.NNTPhone // objPhone
                    , objRQ_Mst_NNT.Mst_NNT.NNTFax // objFax
                    , objRQ_Mst_NNT.Mst_NNT.PresentBy // objPresentBy
                    , objRQ_Mst_NNT.Mst_NNT.BusinessRegNo // objBusinessRegNo
                    , objRQ_Mst_NNT.Mst_NNT.NNTPosition // objPosition
                    , objRQ_Mst_NNT.Mst_NNT.PresentIDNo // objPresentIDNo
                    , objRQ_Mst_NNT.Mst_NNT.PresentIDType // objPresentIDType
                    , objRQ_Mst_NNT.Mst_NNT.GovTaxID // objGovTaxID
                    , objRQ_Mst_NNT.Mst_NNT.ContactName // objContactName
                    , objRQ_Mst_NNT.Mst_NNT.ContactPhone // objContactPhone
                    , objRQ_Mst_NNT.Mst_NNT.ContactEmail // objContactEmail
                    , objRQ_Mst_NNT.Mst_NNT.Website // objWebsite
                    , objRQ_Mst_NNT.Mst_NNT.CANumber // objCANumber
                    , objRQ_Mst_NNT.Mst_NNT.CAOrg // objCAOrg
                    , objRQ_Mst_NNT.Mst_NNT.CAEffDTimeUTCStart // objCAEffDTimeUTCStart
                    , objRQ_Mst_NNT.Mst_NNT.CAEffDTimeUTCEnd // objCAEffDTimeUTCEnd
                    , objRQ_Mst_NNT.Mst_NNT.PackageCode // objPackageCode
                    , objRQ_Mst_NNT.Mst_NNT.CreatedDate // objCreatedDate
                    , objRQ_Mst_NNT.Mst_NNT.AccNo // objAccNo
                    , objRQ_Mst_NNT.Mst_NNT.AccHolder // objAccHolder
                    , objRQ_Mst_NNT.Mst_NNT.BankName // objBankName
                    , objRQ_Mst_NNT.Mst_NNT.BizType // objBizType
                    , objRQ_Mst_NNT.Mst_NNT.BizFieldCode // objBizFieldCode
                    , objRQ_Mst_NNT.Mst_NNT.BizSizeCode // objBizSizeCode
                    );
                #endregion

                // Return Good:
                return mdsResult;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsResult
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Write ReturnLog:
                //_cf.ProcessBizReturn(
                //	ref mdsResult // mdsFinal
                //	, strTid // strTid
                //	, strFunctionName // strFunctionName
                //	);
                #endregion
            }
        }

        public DataSet WAS_Mst_NNT_Create_New20200110(
            ref ArrayList alParamsCoupleError
            , RQ_Mst_NNT objRQ_Mst_NNT
            ////
            , out RT_Mst_NNT objRT_Mst_NNT
            )
        {
            #region // Temp:
            string strTid = objRQ_Mst_NNT.Tid;
            objRT_Mst_NNT = new RT_Mst_NNT();
            DataSet mdsResult = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            DateTime dtimeSys = DateTime.UtcNow;
            //DataSet mdsExec = null;
            //DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(objRQ_Mst_NNT.Tid);
            //int nTidSeq = 0;
            //bool bNeedTransaction = true;
            string strFunctionName = "WAS_Mst_NNT_Create";
            string strErrorCodeDefault = TError.ErridnInventory.WAS_Mst_NNT_Create;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
				});
            #endregion

            try
            {
                #region // Init:
                #endregion

                #region // Refine and Check Input:
                List<Mst_NNT> lst_Mst_NNT = new List<Mst_NNT>();
                #endregion

                #region // WS_Mst_NNT_Create:
                mdsResult = Mst_NNT_Create_New20200110(
                    objRQ_Mst_NNT.Tid // strTid
                    , objRQ_Mst_NNT.GwUserCode // strGwUserCode
                    , objRQ_Mst_NNT.GwPassword // strGwPassword
                    , objRQ_Mst_NNT.WAUserCode // strUserCode
                    , objRQ_Mst_NNT.WAUserPassword // strUserPassword
                    , ref alParamsCoupleError // alParamsCoupleError
                                              ////
                    , objRQ_Mst_NNT.Mst_NNT.MST // objMST
                    , objRQ_Mst_NNT.Mst_NNT.NNTFullName // objNNTFullName
                    , objRQ_Mst_NNT.Mst_NNT.MSTParent // objMSTParent
                    , objRQ_Mst_NNT.Mst_NNT.ProvinceCode // objProvinceCode
                    , objRQ_Mst_NNT.Mst_NNT.DistrictCode // objDistrictCode
                                                         //, objRQ_Mst_NNT.Mst_NNT.NNTType // objNNTType
                    , objRQ_Mst_NNT.Mst_NNT.DLCode // objDLCode
                    , objRQ_Mst_NNT.Mst_NNT.NNTAddress // objAddress
                    , objRQ_Mst_NNT.Mst_NNT.NNTMobile // objMobile
                    , objRQ_Mst_NNT.Mst_NNT.NNTPhone // objPhone
                    , objRQ_Mst_NNT.Mst_NNT.NNTFax // objFax
                    , objRQ_Mst_NNT.Mst_NNT.PresentBy // objPresentBy
                    , objRQ_Mst_NNT.Mst_NNT.BusinessRegNo // objBusinessRegNo
                    , objRQ_Mst_NNT.Mst_NNT.NNTPosition // objPosition
                    , objRQ_Mst_NNT.Mst_NNT.PresentIDNo // objPresentIDNo
                    , objRQ_Mst_NNT.Mst_NNT.PresentIDType // objPresentIDType
                    , objRQ_Mst_NNT.Mst_NNT.GovTaxID // objGovTaxID
                    , objRQ_Mst_NNT.Mst_NNT.ContactName // objContactName
                    , objRQ_Mst_NNT.Mst_NNT.ContactPhone // objContactPhone
                    , objRQ_Mst_NNT.Mst_NNT.ContactEmail // objContactEmail
                    , objRQ_Mst_NNT.Mst_NNT.Website // objWebsite
                    , objRQ_Mst_NNT.Mst_NNT.CANumber // objCANumber
                    , objRQ_Mst_NNT.Mst_NNT.CAOrg // objCAOrg
                    , objRQ_Mst_NNT.Mst_NNT.CAEffDTimeUTCStart // objCAEffDTimeUTCStart
                    , objRQ_Mst_NNT.Mst_NNT.CAEffDTimeUTCEnd // objCAEffDTimeUTCEnd
                    , objRQ_Mst_NNT.Mst_NNT.PackageCode // objPackageCode
                    , objRQ_Mst_NNT.Mst_NNT.CreatedDate // objCreatedDate
                    , objRQ_Mst_NNT.Mst_NNT.AccNo // objAccNo
                    , objRQ_Mst_NNT.Mst_NNT.AccHolder // objAccHolder
                    , objRQ_Mst_NNT.Mst_NNT.BankName // objBankName
                    , objRQ_Mst_NNT.Mst_NNT.BizType // objBizType
                    , objRQ_Mst_NNT.Mst_NNT.BizFieldCode // objBizFieldCode
                    , objRQ_Mst_NNT.Mst_NNT.BizSizeCode // objBizSizeCode
                    , objRQ_Mst_NNT.Mst_NNT.DealerType // objDealerType
                    );
                #endregion

                // Return Good:
                return mdsResult;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsResult
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Write ReturnLog:
                //_cf.ProcessBizReturn(
                //	ref mdsResult // mdsFinal
                //	, strTid // strTid
                //	, strFunctionName // strFunctionName
                //	);
                #endregion
            }
        }

        public DataSet Mst_NNT_Create_New20200110(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            ////
            , object objMST
            , object objNNTFullName
            , object objMSTParent
            , object objProvinceCode
            , object objDistrictCode
            //, object objNNTType
            , object objDLCode
            , object objNNTAddress
            , object objNNTMobile
            , object objNTTPhone
            , object objNNTFax
            , object objPresentBy
            , object objBusinessRegNo
            , object objNNTPosition
            , object objPresentIDNo
            , object objPresentIDType
            , object objGovTaxID
            , object objContactName
            , object objContactPhone
            , object objContactEmail
            , object objWebsite
            , object objCANumber
            , object objCAOrg
            , object objCAEffDTimeUTCStart
            , object objCAEffDTimeUTCEnd
            , object objPackageCode
            , object objCreatedDate
            , object objAccNo
            , object objAccHolder
            , object objBankName
            , object objBizType // objBizType
            , object objBizFieldCode // objBizFieldCode
            , object objBizSizeCode // objBizSizeCode
                                    ////
            , object objDealerType // objDealerType
            )
        {
            #region // Temp:
            DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            //int nTidSeq = 0;
            DateTime dtimeSys = DateTime.UtcNow;
            string strFunctionName = "Mst_NNT_Create";
            string strErrorCodeDefault = TError.ErridnInventory.Mst_NNT_Create;
            alParamsCoupleError.AddRange(new object[]{
                    "strFunctionName", strFunctionName
                    , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
			        ////
					, "objMST", objMST
                    , "objMSTParent", objMSTParent
                    , "objProvinceCode", objProvinceCode
                    , "objDistrictCode", objDistrictCode
                    //, "objNNTType", objNNTType
                    , "objDLCode", objDLCode
                    , "objNNTFullName", objNNTFullName
                    , "objNNTAddress", objNNTAddress
                    , "objNNTMobile", objNNTMobile
                    , "objNTTPhone", objNTTPhone
                    , "objNNTFax", objNNTFax
                    , "objPresentBy", objPresentBy
                    , "objBusinessRegNo", objBusinessRegNo
                    , "objNNTPosition", objNNTPosition
                    , "objPresentIDNo", objPresentIDNo
                    , "objPresentIDType", objPresentIDType
                    , "objGovTaxID", objGovTaxID
                    , "objContactName", objContactName
                    , "objContactPhone", objContactPhone
                    , "objContactEmail", objContactEmail
                    , "objWebsite", objWebsite
                    , "objCANumber", objCANumber
                    , "objCAOrg", objCAOrg
                    , "objCAEffDTimeUTCStart", objCAEffDTimeUTCStart
                    , "objCAEffDTimeUTCEnd", objCAEffDTimeUTCEnd
                    , "objPackageCode", objPackageCode
                    , "objAccNo", objAccNo
                    , "objAccHolder", objAccHolder
                    , "objBankName", objBankName
                    });
            #endregion

            try
            {
                #region // Init:
                //_cf.db.LogUserId = _cf.sinf.strUserCode;
                _cf.db.BeginTransaction();

                // Write RequestLog:
                _cf.ProcessBizReq_OutSide(
                    strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    , alParamsCoupleError // alParamsCoupleError
                    );

                // Sys_User_CheckAuthentication:
                //Sys_User_CheckAuthentication(
                //    ref alParamsCoupleError
                //    , strWAUserCode
                //    , strWAUserPassword
                //    );

                // Check Access/Deny:
                Sys_Access_CheckDenyV30(
                    ref alParamsCoupleError
                    , strWAUserCode
                    , strFunctionName
                    );
                #endregion

                #region // Mst_NNT_CreateX:
                //DataSet dsGetData = null;
                {
                    Mst_NNT_CreateX_New20200208(
                        strTid // strTid
                        , strGwUserCode // strGwUserCode
                        , strGwPassword // strGwPassword
                        , strWAUserCode // strWAUserCode
                        , strWAUserPassword // strWAUserPassword
                        , ref alParamsCoupleError // alParamsCoupleError
                        , dtimeSys // dtimeSys
                        ////
                        , objMST // objMST
                        , objNNTFullName // objNNTFullName
                        , objMSTParent // objMSTParent
                        , objProvinceCode // objProvinceCode
                        , objDistrictCode // objDistrictCode
                        //, objNNTType // objNNTType
                        , objDLCode // objDLCode
                        , objNNTAddress // objNNTAddress
                        , objNNTMobile // objNNTMobile
						, objNTTPhone // objNTTPhone
						, objNNTFax // objNNTFax
						, objPresentBy // objPresentBy
						, objBusinessRegNo // objBusinessRegNo
						, objNNTPosition // objNNTPosition
						, objPresentIDNo // objPresentIDNo
						, objPresentIDType // objPresentIDType
						, objGovTaxID // objGovTaxID
						, objContactName // objContactName
                        , objContactPhone // objContactPhone
                        , objContactEmail // objContactEmail
                        , objWebsite // objWebsite
                        , objCANumber // objCANumber
                        , objCAOrg // objCAOrg
                        , objCAEffDTimeUTCStart // objCAEffDTimeUTCStart
                        , objCAEffDTimeUTCEnd // objCAEffDTimeUTCEnd
                        , objPackageCode // objPackageCode
                        , objCreatedDate // objCreatedDate
                        , objAccNo // objAccNo
                        , objAccHolder // objAccHolder
                        , objBankName // objBankName
                        , objBizType // objBizType
                        , objBizFieldCode // objBizFieldCode
                        , objBizSizeCode // objBizSizeCode
                        ////
                        , objDealerType // objDealerType
                        );
                }
                ////
                //CmUtils.DataUtils.MoveDataTable(ref mdsFinal, ref dsGetData);
                #endregion

                // Return Good:
                TDALUtils.DBUtils.CommitSafety(_cf.db);
                mdsFinal.AcceptChanges();
                return mdsFinal;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Rollback:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);

                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsFinal
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Rollback and Release resources:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);
                TDALUtils.DBUtils.ReleaseAllSemaphore(_cf.db_Sys, true);

                // Write ReturnLog:
                _cf.ProcessBizReturn_OutSide(
                    ref mdsFinal // mdsFinal
                    , strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    );
                #endregion
            }
        }


        public DataSet Mst_NNT_Create(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            ////
            , object objMST
            , object objNNTFullName
            , object objMSTParent
            , object objProvinceCode
            , object objDistrictCode
            //, object objNNTType
            , object objDLCode
            , object objNNTAddress
            , object objNNTMobile
            , object objNTTPhone
            , object objNNTFax
            , object objPresentBy
            , object objBusinessRegNo
            , object objNNTPosition
            , object objPresentIDNo
            , object objPresentIDType
            , object objGovTaxID
            , object objContactName
            , object objContactPhone
            , object objContactEmail
            , object objWebsite
            , object objCANumber
            , object objCAOrg
            , object objCAEffDTimeUTCStart
            , object objCAEffDTimeUTCEnd
            , object objPackageCode
            , object objCreatedDate
            , object objAccNo
            , object objAccHolder
            , object objBankName
            , object objBizType // objBizType
            , object objBizFieldCode // objBizFieldCode
            , object objBizSizeCode // objBizSizeCode
            )
        {
            #region // Temp:
            DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            //int nTidSeq = 0;
            DateTime dtimeSys = DateTime.UtcNow;
            string strFunctionName = "Mst_NNT_Create";
            string strErrorCodeDefault = TError.ErridnInventory.Mst_NNT_Create;
            alParamsCoupleError.AddRange(new object[]{
                    "strFunctionName", strFunctionName
                    , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
			        ////
					, "objMST", objMST
                    , "objMSTParent", objMSTParent
                    , "objProvinceCode", objProvinceCode
                    , "objDistrictCode", objDistrictCode
                    //, "objNNTType", objNNTType
                    , "objDLCode", objDLCode
                    , "objNNTFullName", objNNTFullName
                    , "objNNTAddress", objNNTAddress
                    , "objNNTMobile", objNNTMobile
                    , "objNTTPhone", objNTTPhone
                    , "objNNTFax", objNNTFax
                    , "objPresentBy", objPresentBy
                    , "objBusinessRegNo", objBusinessRegNo
                    , "objNNTPosition", objNNTPosition
                    , "objPresentIDNo", objPresentIDNo
                    , "objPresentIDType", objPresentIDType
                    , "objGovTaxID", objGovTaxID
                    , "objContactName", objContactName
                    , "objContactPhone", objContactPhone
                    , "objContactEmail", objContactEmail
                    , "objWebsite", objWebsite
                    , "objCANumber", objCANumber
                    , "objCAOrg", objCAOrg
                    , "objCAEffDTimeUTCStart", objCAEffDTimeUTCStart
                    , "objCAEffDTimeUTCEnd", objCAEffDTimeUTCEnd
                    , "objPackageCode", objPackageCode
                    , "objAccNo", objAccNo
                    , "objAccHolder", objAccHolder
                    , "objBankName", objBankName
                    });
            #endregion

            try
            {
                #region // Init:
                //_cf.db.LogUserId = _cf.sinf.strUserCode;
                _cf.db.BeginTransaction();

                // Write RequestLog:
                _cf.ProcessBizReq_OutSide(
                    strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    , alParamsCoupleError // alParamsCoupleError
                    );

                // Sys_User_CheckAuthentication:
                //Sys_User_CheckAuthentication(
                //    ref alParamsCoupleError
                //    , strWAUserCode
                //    , strWAUserPassword
                //    );

                // Check Access/Deny:
                Sys_Access_CheckDenyV30(
                    ref alParamsCoupleError
                    , strWAUserCode
                    , strFunctionName
                    );
                #endregion

                #region // Mst_NNT_CreateX:
                //DataSet dsGetData = null;
                {
                    Mst_NNT_CreateX(
                        strTid // strTid
                        , strGwUserCode // strGwUserCode
                        , strGwPassword // strGwPassword
                        , strWAUserCode // strWAUserCode
                        , strWAUserPassword // strWAUserPassword
                        , ref alParamsCoupleError // alParamsCoupleError
                        , dtimeSys // dtimeSys
                                   ////
                        , objMST // objMST
                        , objNNTFullName // objNNTFullName
                        , objMSTParent // objMSTParent
                        , objProvinceCode // objProvinceCode
                        , objDistrictCode // objDistrictCode
                                          //, objNNTType // objNNTType
                        , objDLCode // objDLCode
                        , objNNTAddress // objNNTAddress
                        , objNNTMobile // objNNTMobile
                        , objNTTPhone // objNTTPhone
                        , objNNTFax // objNNTFax
                        , objPresentBy // objPresentBy
                        , objBusinessRegNo // objBusinessRegNo
                        , objNNTPosition // objNNTPosition
                        , objPresentIDNo // objPresentIDNo
                        , objPresentIDType // objPresentIDType
                        , objGovTaxID // objGovTaxID
                        , objContactName // objContactName
                        , objContactPhone // objContactPhone
                        , objContactEmail // objContactEmail
                        , objWebsite // objWebsite
                        , objCANumber // objCANumber
                        , objCAOrg // objCAOrg
                        , objCAEffDTimeUTCStart // objCAEffDTimeUTCStart
                        , objCAEffDTimeUTCEnd // objCAEffDTimeUTCEnd
                        , objPackageCode // objPackageCode
                        , objCreatedDate // objCreatedDate
                        , objAccNo // objAccNo
                        , objAccHolder // objAccHolder
                        , objBankName // objBankName
                        , objBizType // objBizType
                        , objBizFieldCode // objBizFieldCode
                        , objBizSizeCode // objBizSizeCode
                        );
                }
                ////
                //CmUtils.DataUtils.MoveDataTable(ref mdsFinal, ref dsGetData);
                #endregion

                // Return Good:
                TDALUtils.DBUtils.CommitSafety(_cf.db);
                mdsFinal.AcceptChanges();
                return mdsFinal;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Rollback:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);

                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsFinal
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Rollback and Release resources:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);
                TDALUtils.DBUtils.ReleaseAllSemaphore(_cf.db_Sys, true);

                // Write ReturnLog:
                _cf.ProcessBizReturn_OutSide(
                    ref mdsFinal // mdsFinal
                    , strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    );
                #endregion
            }
        }
        public DataSet Mst_NNT_CreateNNTAndDepartment(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
			, string strAccessToken 
			, ref ArrayList alParamsCoupleError
            ////
            , object objMST
            , object objNNTFullName
            , object objMSTParent
            , object objProvinceCode
            , object objDistrictCode
            //, object objNNTType
            , object objDLCode
            , object objNNTAddress
            , object objNNTMobile
            , object objNTTPhone
            , object objNNTFax
            , object objPresentBy
            , object objBusinessRegNo
            , object objNNTPosition
            , object objPresentIDNo
            , object objPresentIDType
            , object objGovTaxID
            , object objContactName
            , object objContactPhone
            , object objContactEmail
            , object objWebsite
            , object objCANumber
            , object objCAOrg
            , object objCAEffDTimeUTCStart
            , object objCAEffDTimeUTCEnd
            , object objPackageCode
            , object objCreatedDate
            , object objAccNo
            , object objAccHolder
            , object objBankName
            , object objBizType
            , object objBizFieldCode
            , object objBizSizeCode
            ////
            , object objDepartmentCode
            ////
            , object objUserPassword
            , object objUserPasswordRepeat
            )
        {
            #region // Temp:
            DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            //int nTidSeq = 0;
            DateTime dtimeSys = DateTime.UtcNow;
            string strFunctionName = "Mst_NNT_CreateNNTAndDepartment";
            string strErrorCodeDefault = TError.ErridnInventory.Mst_NNT_CreateNNTAndDepartment;
            alParamsCoupleError.AddRange(new object[]{
                    "strFunctionName", strFunctionName
                    , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
			        ////
					, "objMST", objMST
                    , "objNNTFullName", objNNTFullName
                    , "objMSTParent", objMSTParent
                    , "objProvinceCode", objProvinceCode
                    , "objDistrictCode", objDistrictCode
                    //, "objNNTType", objNNTType
                    , "objDLCode", objDLCode
                    , "objNNTAddress", objNNTAddress
                    , "objNNTMobile", objNNTMobile
                    , "objNTTPhone", objNTTPhone
                    , "objNNTFax", objNNTFax
                    , "objPresentBy", objPresentBy
                    , "objBusinessRegNo", objBusinessRegNo
                    , "objNNTPosition", objNNTPosition
                    , "objPresentIDNo", objPresentIDNo
                    , "objPresentIDType", objPresentIDType
                    , "objGovTaxID", objGovTaxID
                    , "objContactName", objContactName
                    , "objContactPhone", objContactPhone
                    , "objContactEmail", objContactEmail
                    , "objWebsite", objWebsite
                    , "objCANumber", objCANumber
                    , "objCAOrg", objCAOrg
                    , "objCAEffDTimeUTCStart", objCAEffDTimeUTCStart
                    , "objCAEffDTimeUTCEnd", objCAEffDTimeUTCEnd
                    , "objPackageCode", objPackageCode
                    , "objAccNo", objAccNo
                    , "objAccHolder", objAccHolder
                    , "objBankName", objBankName
                    , "objBankName", objBizType
                    , "objBizFieldCode", objBizFieldCode
                    , "objBizSizeCode", objBizSizeCode
                    /////
                    , "objDepartmentCode", objDepartmentCode
                    ////
                    , "objUserPassword", objUserPassword
                    , "objUserPasswordRepeat", objUserPasswordRepeat
                    });
            #endregion

            try
            {
                #region // Init:
                //_cf.db.LogUserId = _cf.sinf.strUserCode;
                _cf.db.BeginTransaction();

                // Write RequestLog:
                _cf.ProcessBizReq_OutSide(
                    strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    , alParamsCoupleError // alParamsCoupleError
                    );

                //// rem lại do khong can dung user/pass để đăng ký NNT
                //// Sys_User_CheckAuthentication:
                //Sys_User_CheckAuthentication(
                //    ref alParamsCoupleError
                //    , strWAUserCode
                //    , strWAUserPassword
                //    );

                //// Check Access/Deny:
                //Sys_Access_CheckDenyV30(
                //    ref alParamsCoupleError
                //    , strWAUserCode
                //    , strFunctionName
                //    );
                #endregion

                #region // Mst_NNT_CreateX:
                //DataSet dsGetData = null;
                {
                    Mst_NNT_CreateX(
                        strTid // strTid
                        , strGwUserCode // strGwUserCode
                        , strGwPassword // strGwPassword
                        , "SYSADMIN" // strWAUserCode
                        , strWAUserPassword // strWAUserPassword
                        , ref alParamsCoupleError // alParamsCoupleError
                        , dtimeSys // dtimeSys
                                   ////
                        , objMST // objMST
                        , objNNTFullName // objNNTFullName
                        , objMSTParent // objMSTParent
                        , objProvinceCode // objProvinceCode
                        , objDistrictCode // objDistrictCode
                        //, objNNTType // objNNTType
                        , objDLCode // objDLCode
                        , objNNTAddress // objNNTAddress
                        , objNNTMobile // objNNTMobile
						, objNTTPhone // objNTTPhone
						, objNNTFax // objNNTFax
						, objPresentBy // objPresentBy
						, objBusinessRegNo // objBusinessRegNo
						, objNNTPosition // objNNTPosition
						, objPresentIDNo // objPresentIDNo
						, objPresentIDType // objPresentIDType
						, objGovTaxID // objGovTaxID
						, objContactName // objContactName
                        , objContactPhone // objContactPhone
                        , objContactEmail // objContactEmail
                        , objWebsite // objWebsite
                        , objCANumber // objCANumber
                        , objCAOrg // objCAOrg
                        , objCAEffDTimeUTCStart // objCAEffDTimeUTCStart
                        , objCAEffDTimeUTCEnd // objCAEffDTimeUTCEnd
                        , objPackageCode // objPackageCode
                        , objCreatedDate // objCreatedDate
                        , objAccNo // objAccNo
                        , objAccHolder // objAccHolder
                        , objBankName // objBankName
                        , objBizType // objBizType
                        , objBizFieldCode // objBizFieldCode
                        , objBizSizeCode // objBizSizeCode
                        );
                }
                ////
                //CmUtils.DataUtils.MoveDataTable(ref mdsFinal, ref dsGetData);
                #endregion

                #region // Mst_Department_CreateX:
                //DataSet dsGetData = null;
                {
                    //Mst_Department_CreateX(
                    //    strTid // strTid
                    //    , strGwUserCode // strGwUserCode
                    //    , strGwPassword // strGwPassword
                    //    , strWAUserCode // strWAUserCode
                    //    , strWAUserPassword // strWAUserPassword
                    //    , ref alParamsCoupleError // alParamsCoupleError
                    //    , dtimeSys // dtimeSys
                    //               ////
                    //    , objDepartmentCode // objDepartmentCode
                    //    , null // objDepartmentCodeParent
                    //    , objMST // objMST
                    //    , objDepartmentName // objDepartmentName                   
                    //    );
                }
                ////
                //CmUtils.DataUtils.MoveDataTable(ref mdsFinal, ref dsGetData);
                #endregion

                #region // Sys_User_CreateX:
                //-Call API tạo User trên iNOS
                //- Call API tạo Org(Org cha / networkID) trên iNOS
                //Nếu iNOS trả về OK thì:
                //-Get info từ iNOS để tạo Org trên HDDT.
                //-Tạo Department trên HDDT
                //- Get User trên iNOS thêm vào HDDT(gán Department, Org)
                {
                    ////
                    //Chưa kết nối với iNOS nên tạm thời Gen theo quy tắc SYSGEN.yyyyMMdd.hhmmss
                    object objUserCode = string.Format("getiNOS.{0}", dtimeSys.ToString("yyMMdd.HHmmss"));
                    object objPhoneNo = DBNull.Value;
                    object objEMail = string.Format("{0}.gmail.com", objUserCode);
                    object objPosition = DBNull.Value;
                    object objFlagDLAdmin = TConst.Flag.No;
                    object objFlagNTTAdmin = TConst.Flag.Active;
                    object objFlagSysAdmin = TConst.Flag.No;
                    /////
                    Sys_User_CreateX(
                        strTid // strTid
                        , strGwUserCode // strGwUserCode
                        , strGwPassword // strGwPassword
                        , strWAUserCode // strWAUserCode
                        , strWAUserPassword // strWAUserPassword
						, ref alParamsCoupleError // alParamsCoupleError
                        , dtimeSys // dtimeSys
                                   ////
                        , objUserCode // objUserCode
                        , objUserCode // objUserName
                        , objUserPassword // objUserPassword
                        , objPhoneNo // objPhoneNo
                        , objContactEmail // objEMail
                        , objMST // objMST
                        , objDepartmentCode // objDepartmentCode
                        , objPosition // objPosition
                        , objFlagDLAdmin // objFlagDLAdmin
                        , objFlagSysAdmin
                        , objFlagNTTAdmin // objFlagNTTAdmin
                        );
                }
                #endregion

                // Return Good:
                TDALUtils.DBUtils.CommitSafety(_cf.db);
                mdsFinal.AcceptChanges();
                return mdsFinal;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Rollback:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);

                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsFinal
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Rollback and Release resources:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);
                TDALUtils.DBUtils.ReleaseAllSemaphore(_cf.db_Sys, true);

                // Write ReturnLog:
                _cf.ProcessBizReturn_OutSide(
                    ref mdsFinal // mdsFinal
                    , strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    );
                #endregion
            }
        }

		public DataSet Mst_NNT_Register(
			string strTid
			, string strGwUserCode
			, string strGwPassword
			, string strWAUserCode
			, string strWAUserPassword
			, string strAccessToken
			, ref ArrayList alParamsCoupleError
			////
			, object objMST
			, object objNNTFullName
			, object objMSTParent
			, object objProvinceCode
			, object objDistrictCode
			//, object objNNTType
			, object objDLCode
			, object objNNTAddress
			, object objNNTMobile
			, object objNTTPhone
			, object objNNTFax
			, object objPresentBy
			, object objBusinessRegNo
			, object objNNTPosition
			, object objPresentIDNo
			, object objPresentIDType
			, object objGovTaxID
			, object objContactName
			, object objContactPhone
			, object objContactEmail
			, object objWebsite
			, object objCANumber
			, object objCAOrg
			, object objCAEffDTimeUTCStart
			, object objCAEffDTimeUTCEnd
			, object objPackageCode
            , object objCreatedDate
            , object objAccNo
			, object objAccHolder
			, object objBankName
			, object objBizType
			, object objBizFieldCode
			, object objBizSizeCode
			////
			, object objDepartmentCode
			////
			, object objUserPassword
			, object objUserPasswordRepeat
			)
		{
			#region // Temp:
			DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
			//int nTidSeq = 0;
			DateTime dtimeSys = DateTime.UtcNow;
			string strFunctionName = "WA_Mst_NNT_Registry";
			string strErrorCodeDefault = TError.ErridnInventory.WA_Mst_NNT_Registry;
			alParamsCoupleError.AddRange(new object[]{
					"strFunctionName", strFunctionName
					, "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
			        ////
					, "objMST", objMST
					, "objNNTFullName", objNNTFullName
					, "objMSTParent", objMSTParent
					, "objProvinceCode", objProvinceCode
					, "objDistrictCode", objDistrictCode
                    //, "objNNTType", objNNTType
                    , "objDLCode", objDLCode
					, "objNNTAddress", objNNTAddress
					, "objNNTMobile", objNNTMobile
					, "objNTTPhone", objNTTPhone
					, "objNNTFax", objNNTFax
					, "objPresentBy", objPresentBy
					, "objBusinessRegNo", objBusinessRegNo
					, "objNNTPosition", objNNTPosition
					, "objPresentIDNo", objPresentIDNo
					, "objPresentIDType", objPresentIDType
					, "objGovTaxID", objGovTaxID
					, "objContactName", objContactName
					, "objContactPhone", objContactPhone
					, "objContactEmail", objContactEmail
					, "objWebsite", objWebsite
					, "objCANumber", objCANumber
					, "objCAOrg", objCAOrg
					, "objCAEffDTimeUTCStart", objCAEffDTimeUTCStart
					, "objCAEffDTimeUTCEnd", objCAEffDTimeUTCEnd
					, "objPackageCode", objPackageCode
					, "objAccNo", objAccNo
					, "objAccHolder", objAccHolder
					, "objBankName", objBankName
					, "objBankName", objBizType
					, "objBizFieldCode", objBizFieldCode
					, "objBizSizeCode", objBizSizeCode
                    /////
                    , "objDepartmentCode", objDepartmentCode
                    ////
                    , "objUserPassword", objUserPassword
					, "objUserPasswordRepeat", objUserPasswordRepeat
					});
			#endregion

			try
			{
				#region // Init:
				//_cf.db.LogUserId = _cf.sinf.strUserCode;
				_cf.db.BeginTransaction();

				// Write RequestLog:
				_cf.ProcessBizReq_OutSide(
					strTid // strTid
					, strGwUserCode // strGwUserCode
					, strGwPassword // strGwPassword
					, strWAUserCode // objUserCode
					, strFunctionName // strFunctionName
					, alParamsCoupleError // alParamsCoupleError
					);

				//// rem lại do khong can dung user/pass để đăng ký NNT
				//// Sys_User_CheckAuthentication:
				//Sys_User_CheckAuthentication(
				//    ref alParamsCoupleError
				//    , strWAUserCode
				//    , strWAUserPassword
				//    );

				//// Check Access/Deny:
				//Sys_Access_CheckDenyV30(
				//    ref alParamsCoupleError
				//    , strWAUserCode
				//    , strFunctionName
				//    );
				#endregion

				#region // Mst_NNT_CreateX:
				//DataSet dsGetData = null;
				{
					Mst_NNT_CreateX(
						strTid // strTid
						, strGwUserCode // strGwUserCode
						, strGwPassword // strGwPassword
						, "SYSADMIN" // strWAUserCode
						, strWAUserPassword // strWAUserPassword
						, ref alParamsCoupleError // alParamsCoupleError
						, dtimeSys // dtimeSys
								   ////
						, objMST // objMST
						, objNNTFullName // objNNTFullName
						, objMSTParent // objMSTParent
						, objProvinceCode // objProvinceCode
						, objDistrictCode // objDistrictCode
										  //, objNNTType // objNNTType
						, objDLCode // objDLCode
						, objNNTAddress // objNNTAddress
						, objNNTMobile // objNNTMobile
						, objNTTPhone // objNTTPhone
						, objNNTFax // objNNTFax
						, objPresentBy // objPresentBy
						, objBusinessRegNo // objBusinessRegNo
						, objNNTPosition // objNNTPosition
						, objPresentIDNo // objPresentIDNo
						, objPresentIDType // objPresentIDType
						, objGovTaxID // objGovTaxID
						, objContactName // objContactName
						, objContactPhone // objContactPhone
						, objContactEmail // objContactEmail
						, objWebsite // objWebsite
						, objCANumber // objCANumber
						, objCAOrg // objCAOrg
						, objCAEffDTimeUTCStart // objCAEffDTimeUTCStart
						, objCAEffDTimeUTCEnd // objCAEffDTimeUTCEnd
						, objPackageCode // objPackageCode
                        , objCreatedDate // objCreatedDate
                        , objAccNo // objAccNo
						, objAccHolder // objAccHolder
						, objBankName // objBankName
						, objBizType // objBizType
						, objBizFieldCode // objBizFieldCode
						, objBizSizeCode // objBizSizeCode
						);
				}
				////
				//CmUtils.DataUtils.MoveDataTable(ref mdsFinal, ref dsGetData);
				#endregion

				#region // Mst_Department_CreateX:
				//DataSet dsGetData = null;
				{
					//Mst_Department_CreateX(
					//    strTid // strTid
					//    , strGwUserCode // strGwUserCode
					//    , strGwPassword // strGwPassword
					//    , strWAUserCode // strWAUserCode
					//    , strWAUserPassword // strWAUserPassword
					//    , ref alParamsCoupleError // alParamsCoupleError
					//    , dtimeSys // dtimeSys
					//               ////
					//    , objDepartmentCode // objDepartmentCode
					//    , null // objDepartmentCodeParent
					//    , objMST // objMST
					//    , objDepartmentName // objDepartmentName                   
					//    );
				}
                ////
                //CmUtils.DataUtils.MoveDataTable(ref mdsFinal, ref dsGetData);
                #endregion

                #region // Sys_User_CreateX:
                {
                    Sys_User_CreateX(
                        strTid // strTid
                        , strGwUserCode // strGwUserCode
                        , strGwPassword // strGwPassword
                        , strWAUserCode // strWAUserCode
                        , strWAUserPassword // strWAUserPassword
						, ref alParamsCoupleError // alParamsCoupleError
                        , dtimeSys // dtimeSys
                                   ////
                        , objContactEmail // objUserCode
                        , objContactName // objUserName
                        , objUserPassword // objUserPassword
                        , objContactPhone // objPhoneNo
                        , objContactEmail // objEMail
                        , objMST // objMST
                        , objDepartmentCode // objDepartmentCode
                        , "" // objPosition
                        , TConst.Flag.Inactive // objFlagDLAdmin
                        , TConst.Flag.Inactive // objFlagSysAdmin
                        , TConst.Flag.Active // objFlagNTTAdmin
                                          ////
                        );
                }
                #endregion

                #region // MasterServer:
                {
                    // //
                    DataSet dsData = new DataSet();

					MstSv_Inos_User_BuildX(
						strTid // strTid
						, strGwUserCode // strGwUserCode
						, strGwPassword // strGwPassword
						, strWAUserCode // strWAUserCode
						, strWAUserPassword // strWAUserPassword
						, ref alParamsCoupleError // alParamsCoupleError
						, dtimeSys // dtimeSys
						// //
						, objMST // objMST
						// //
						, out dsData // dsData
						);

					// //
					DataTable dt_MstSv_Inos_User = dsData.Tables["MstSv_Inos_User"].Copy();

					MstSv_Inos_User_AddX(
						strTid // strTid
						, strGwUserCode // strGwUserCode
						, strGwPassword // strGwPassword
						, strWAUserCode // strWAUserCode
						, strWAUserPassword // strWAUserPassword
						, ref alParamsCoupleError // alParamsCoupleError
						, dtimeSys // dtimeSys
						// //
						, objMST // objMST
						, dt_MstSv_Inos_User.Rows[0]["Email"] // objEmail
						, dt_MstSv_Inos_User.Rows[0]["Name"] // objName
						, objUserPassword // objPassword
						, dt_MstSv_Inos_User.Rows[0]["Language"] // objLanguage
						, dt_MstSv_Inos_User.Rows[0]["TimeZone"] // objTimeZone
						, dt_MstSv_Inos_User.Rows[0]["FlagEmailSend"] // objFlagEmailSend
						, dt_MstSv_Inos_User.Rows[0]["FlagEmailActivate"] // objFlagEmailActivate
						, dt_MstSv_Inos_User.Rows[0]["FlagAdmin"] // objFlagAdmin
						// //
						, dsData // dsData
						);
					// //
					Inos_AccountService_RegisterX(
						strTid // strTid
						, strGwUserCode // strGwUserCode
						, strGwPassword // strGwPassword
						, strWAUserCode // strWAUserCode
						, strWAUserPassword // strWAUserPassword
						//, strAccessToken // strAccessToken
						, ref mdsFinal // mdsFinal
						, ref alParamsCoupleError // alParamsCoupleError
						, dtimeSys // dtimeSys
						// //
						, objMST // objMST
						, dt_MstSv_Inos_User.Rows[0]["Email"] // objEmail
						, dt_MstSv_Inos_User.Rows[0]["Name"] // objName
						, objUserPassword // objPassword
						, dt_MstSv_Inos_User.Rows[0]["Language"] // objLanguage
						, dt_MstSv_Inos_User.Rows[0]["TimeZone"] // objTimeZone
						// //
						, out dsData // dsData
						);

					// //
					DataTable dtUpd_MstSv_Inos_User = dsData.Tables["MstSv_Inos_User"];

					if (dtUpd_MstSv_Inos_User.Rows.Count > 0)
					{
						object objFt_Cols_Upd = "MstSv_Inos_User.UUID";

						MstSv_Inos_User_UpdateX(
							strTid // strTid
							, strGwUserCode // strGwUserCode
							, strGwPassword // strGwPassword
							, strWAUserCode // strWAUserCode
							, strWAUserPassword // strWAUserPassword
							, ref alParamsCoupleError // alParamsCoupleError
							, dtimeSys // dtimeSys
									   // //
							, objMST // objMST
							, objContactEmail // objEmail
							, dtUpd_MstSv_Inos_User.Rows[0]["Name"] // objName
							, objUserPassword // objPassword
							, dtUpd_MstSv_Inos_User.Rows[0]["Language"] // objLanguage
							, dtUpd_MstSv_Inos_User.Rows[0]["TimeZone"] // objTimeZone
							, dtUpd_MstSv_Inos_User.Rows[0]["UUID"] // objUUID
							, dtUpd_MstSv_Inos_User.Rows[0]["Id"] // objId
							, dtUpd_MstSv_Inos_User.Rows[0]["FlagEmailActivate"] // objFlagEmailActivate
							, dtUpd_MstSv_Inos_User.Rows[0]["FlagActive"] // objFlagActive
							////
							, objFt_Cols_Upd // objFt_Cols_Upd
							);
					}
					
				}
				#endregion

				// Return Good:
				TDALUtils.DBUtils.CommitSafety(_cf.db);
				mdsFinal.AcceptChanges();
				return mdsFinal;
			}
			catch (Exception exc)
			{
				#region // Catch of try:
				// Rollback:
				TDALUtils.DBUtils.RollbackSafety(_cf.db);

				// Return Bad:
				return TUtils.CProcessExc.Process(
					ref mdsFinal
					, exc
					, strErrorCodeDefault
					, alParamsCoupleError.ToArray()
					);
				#endregion
			}
			finally
			{
				#region // Finally of try:
				// Rollback and Release resources:
				TDALUtils.DBUtils.RollbackSafety(_cf.db);
				TDALUtils.DBUtils.ReleaseAllSemaphore(_cf.db_Sys, true);

				// Write ReturnLog:
				_cf.ProcessBizReturn_OutSide(
					ref mdsFinal // mdsFinal
					, strTid // strTid
					, strGwUserCode // strGwUserCode
					, strGwPassword // strGwPassword
					, strWAUserCode // objUserCode
					, strFunctionName // strFunctionName
					);
				#endregion
			}
		}

		public DataSet Mst_NNT_Register_New20190723(
			string strTid
			, string strGwUserCode
			, string strGwPassword
			, string strWAUserCode
			, string strWAUserPassword
			, string strAccessToken
			, ref ArrayList alParamsCoupleError
			////
			, object objMST
			, object objNNTFullName
			, object objMSTParent
			, object objProvinceCode
			, object objDistrictCode
			//, object objNNTType
			, object objDLCode
			, object objNNTAddress
			, object objNNTMobile
			, object objNTTPhone
			, object objNNTFax
			, object objPresentBy
			, object objBusinessRegNo
			, object objNNTPosition
			, object objPresentIDNo
			, object objPresentIDType
			, object objGovTaxID
			, object objContactName
			, object objContactPhone
			, object objContactEmail
			, object objWebsite
			, object objCANumber
			, object objCAOrg
			, object objCAEffDTimeUTCStart
			, object objCAEffDTimeUTCEnd
			, object objPackageCode
			, object objCreatedDate
			, object objAccNo
			, object objAccHolder
			, object objBankName
			, object objBizType
			, object objBizFieldCode
			, object objBizSizeCode
			////
			, object objDepartmentCode
			////
			, object objUserPassword
			, object objUserPasswordRepeat
			////
			, object objQtyLicense
			)
		{
			#region // Temp:
			DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
			//int nTidSeq = 0;
			DateTime dtimeSys = DateTime.UtcNow;
			string strFunctionName = "WA_Mst_NNT_Registry";
			string strErrorCodeDefault = TError.ErridnInventory.WA_Mst_NNT_Registry;
			alParamsCoupleError.AddRange(new object[]{
					"strFunctionName", strFunctionName
					, "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
			        ////
					, "objMST", objMST
					, "objNNTFullName", objNNTFullName
					, "objMSTParent", objMSTParent
					, "objProvinceCode", objProvinceCode
					, "objDistrictCode", objDistrictCode
                    //, "objNNTType", objNNTType
                    , "objDLCode", objDLCode
					, "objNNTAddress", objNNTAddress
					, "objNNTMobile", objNNTMobile
					, "objNTTPhone", objNTTPhone
					, "objNNTFax", objNNTFax
					, "objPresentBy", objPresentBy
					, "objBusinessRegNo", objBusinessRegNo
					, "objNNTPosition", objNNTPosition
					, "objPresentIDNo", objPresentIDNo
					, "objPresentIDType", objPresentIDType
					, "objGovTaxID", objGovTaxID
					, "objContactName", objContactName
					, "objContactPhone", objContactPhone
					, "objContactEmail", objContactEmail
					, "objWebsite", objWebsite
					, "objCANumber", objCANumber
					, "objCAOrg", objCAOrg
					, "objCAEffDTimeUTCStart", objCAEffDTimeUTCStart
					, "objCAEffDTimeUTCEnd", objCAEffDTimeUTCEnd
					, "objPackageCode", objPackageCode
					, "objAccNo", objAccNo
					, "objAccHolder", objAccHolder
					, "objBankName", objBankName
					, "objBankName", objBizType
					, "objBizFieldCode", objBizFieldCode
					, "objBizSizeCode", objBizSizeCode
                    /////
                    , "objDepartmentCode", objDepartmentCode
                    ////
                    , "objUserPassword", objUserPassword
					, "objUserPasswordRepeat", objUserPasswordRepeat
					////
					, "objQtyLicense", objQtyLicense
					});
			#endregion

			try
			{
				#region // Init:
				//_cf.db.LogUserId = _cf.sinf.strUserCode;
				_cf.db.BeginTransaction();

				// Write RequestLog:
				_cf.ProcessBizReq_OutSide(
					strTid // strTid
					, strGwUserCode // strGwUserCode
					, strGwPassword // strGwPassword
					, strWAUserCode // objUserCode
					, strFunctionName // strFunctionName
					, alParamsCoupleError // alParamsCoupleError
					);

				//// rem lại do khong can dung user/pass để đăng ký NNT
				//// Sys_User_CheckAuthentication:
				//Sys_User_CheckAuthentication(
				//    ref alParamsCoupleError
				//    , strWAUserCode
				//    , strWAUserPassword
				//    );

				//// Check Access/Deny:
				//Sys_Access_CheckDenyV30(
				//    ref alParamsCoupleError
				//    , strWAUserCode
				//    , strFunctionName
				//    );
				#endregion

				#region // Mst_NNT_CreateX:
				//DataSet dsGetData = null;
				{
					Mst_NNT_CreateX(
						strTid // strTid
						, strGwUserCode // strGwUserCode
						, strGwPassword // strGwPassword
						, "SYSADMIN" // strWAUserCode
						, strWAUserPassword // strWAUserPassword
						, ref alParamsCoupleError // alParamsCoupleError
						, dtimeSys // dtimeSys
								   ////
						, objMST // objMST
						, objNNTFullName // objNNTFullName
						, objMSTParent // objMSTParent
						, objProvinceCode // objProvinceCode
						, objDistrictCode // objDistrictCode
										  //, objNNTType // objNNTType
						, objDLCode // objDLCode
						, objNNTAddress // objNNTAddress
						, objNNTMobile // objNNTMobile
						, objNTTPhone // objNTTPhone
						, objNNTFax // objNNTFax
						, objPresentBy // objPresentBy
						, objBusinessRegNo // objBusinessRegNo
						, objNNTPosition // objNNTPosition
						, objPresentIDNo // objPresentIDNo
						, objPresentIDType // objPresentIDType
						, objGovTaxID // objGovTaxID
						, objContactName // objContactName
						, objContactPhone // objContactPhone
						, objContactEmail // objContactEmail
						, objWebsite // objWebsite
						, objCANumber // objCANumber
						, objCAOrg // objCAOrg
						, objCAEffDTimeUTCStart // objCAEffDTimeUTCStart
						, objCAEffDTimeUTCEnd // objCAEffDTimeUTCEnd
						, objPackageCode // objPackageCode
						, objCreatedDate // objCreatedDate
						, objAccNo // objAccNo
						, objAccHolder // objAccHolder
						, objBankName // objBankName
						, objBizType // objBizType
						, objBizFieldCode // objBizFieldCode
						, objBizSizeCode // objBizSizeCode
						);
				}
				////
				//CmUtils.DataUtils.MoveDataTable(ref mdsFinal, ref dsGetData);
				#endregion

				#region // Mst_Department_CreateX:
				//DataSet dsGetData = null;
				{
					//Mst_Department_CreateX(
					//    strTid // strTid
					//    , strGwUserCode // strGwUserCode
					//    , strGwPassword // strGwPassword
					//    , strWAUserCode // strWAUserCode
					//    , strWAUserPassword // strWAUserPassword
					//    , ref alParamsCoupleError // alParamsCoupleError
					//    , dtimeSys // dtimeSys
					//               ////
					//    , objDepartmentCode // objDepartmentCode
					//    , null // objDepartmentCodeParent
					//    , objMST // objMST
					//    , objDepartmentName // objDepartmentName                   
					//    );
				}
				////
				//CmUtils.DataUtils.MoveDataTable(ref mdsFinal, ref dsGetData);
				#endregion

				#region // Sys_User_CreateX:
				{
					Sys_User_CreateX(
						strTid // strTid
						, strGwUserCode // strGwUserCode
						, strGwPassword // strGwPassword
						, strWAUserCode // strWAUserCode
						, strWAUserPassword // strWAUserPassword
						, ref alParamsCoupleError // alParamsCoupleError						
						, dtimeSys // dtimeSys
								   ////
						, objContactEmail // objUserCode
						, objContactName // objUserName
						, objUserPassword // objUserPassword
						, objContactPhone // objPhoneNo
						, objContactEmail // objEMail
						, objMST // objMST
						, objDepartmentCode // objDepartmentCode
						, "" // objPosition
						, TConst.Flag.Inactive // objFlagDLAdmin
						, TConst.Flag.Inactive // objFlagSysAdmin
						, TConst.Flag.Active // objFlagNTTAdmin
											 ////
						);
				}
				#endregion

				#region // MasterServer:
				{
					// //
					DataSet dsData = new DataSet();

					MstSv_Inos_User_BuildX(
						strTid // strTid
						, strGwUserCode // strGwUserCode
						, strGwPassword // strGwPassword
						, strWAUserCode // strWAUserCode
						, strWAUserPassword // strWAUserPassword
						, ref alParamsCoupleError // alParamsCoupleError
						, dtimeSys // dtimeSys
								   // //
						, objMST // objMST
								 // //
						, out dsData // dsData
						);

					// //
					DataTable dt_MstSv_Inos_User = dsData.Tables["MstSv_Inos_User"].Copy();

					MstSv_Inos_User_AddX(
						strTid // strTid
						, strGwUserCode // strGwUserCode
						, strGwPassword // strGwPassword
						, strWAUserCode // strWAUserCode
						, strWAUserPassword // strWAUserPassword
						, ref alParamsCoupleError // alParamsCoupleError
						, dtimeSys // dtimeSys
								   // //
						, objMST // objMST
						, dt_MstSv_Inos_User.Rows[0]["Email"] // objEmail
						, dt_MstSv_Inos_User.Rows[0]["Name"] // objName
						, objUserPassword // objPassword
						, dt_MstSv_Inos_User.Rows[0]["Language"] // objLanguage
						, dt_MstSv_Inos_User.Rows[0]["TimeZone"] // objTimeZone
						, dt_MstSv_Inos_User.Rows[0]["FlagEmailSend"] // objFlagEmailSend
						, dt_MstSv_Inos_User.Rows[0]["FlagEmailActivate"] // objFlagEmailActivate
						, dt_MstSv_Inos_User.Rows[0]["FlagAdmin"] // objFlagAdmin
																  // //
						, dsData // dsData
						);
					// //
					Inos_AccountService_RegisterX(
						strTid // strTid
						, strGwUserCode // strGwUserCode
						, strGwPassword // strGwPassword
						, strWAUserCode // strWAUserCode
						, strWAUserPassword // strWAUserPassword
											//, strAccessToken // strAccessToken
						, ref mdsFinal // mdsFinal
						, ref alParamsCoupleError // alParamsCoupleError
						, dtimeSys // dtimeSys
								   // //
						, objMST // objMST
						, dt_MstSv_Inos_User.Rows[0]["Email"] // objEmail
						, dt_MstSv_Inos_User.Rows[0]["Name"] // objName
						, objUserPassword // objPassword
						, dt_MstSv_Inos_User.Rows[0]["Language"] // objLanguage
						, dt_MstSv_Inos_User.Rows[0]["TimeZone"] // objTimeZone
																 // //
						, out dsData // dsData
						);

					// //
					DataTable dtUpd_MstSv_Inos_User = dsData.Tables["MstSv_Inos_User"];

					if (dtUpd_MstSv_Inos_User.Rows.Count > 0)
					{
						object objFt_Cols_Upd = "MstSv_Inos_User.UUID";

						MstSv_Inos_User_UpdateX(
							strTid // strTid
							, strGwUserCode // strGwUserCode
							, strGwPassword // strGwPassword
							, strWAUserCode // strWAUserCode
							, strWAUserPassword // strWAUserPassword
							, ref alParamsCoupleError // alParamsCoupleError
							, dtimeSys // dtimeSys
									   // //
							, objMST // objMST
							, objContactEmail // objEmail
							, dtUpd_MstSv_Inos_User.Rows[0]["Name"] // objName
							, objUserPassword // objPassword
							, dtUpd_MstSv_Inos_User.Rows[0]["Language"] // objLanguage
							, dtUpd_MstSv_Inos_User.Rows[0]["TimeZone"] // objTimeZone
							, dtUpd_MstSv_Inos_User.Rows[0]["UUID"] // objUUID
							, dtUpd_MstSv_Inos_User.Rows[0]["Id"] // objId
							, dtUpd_MstSv_Inos_User.Rows[0]["FlagEmailActivate"] // objFlagEmailActivate
							, dtUpd_MstSv_Inos_User.Rows[0]["FlagActive"] // objFlagActive
																		  ////
							, objFt_Cols_Upd // objFt_Cols_Upd
							);
					}

				}
				#endregion

				#region // MstSv_Invoice_license:
				{
					////
					string strSqlInsert_MstSv_Invoice_license = CmUtils.StringUtils.Replace(@"
							---- MstSv_Invoice_license:
							insert into MstSv_Invoice_license
							(
								MST
								, NetworkID
								, TotalQty
								, TotalQtyIssued
								, TotalQtyUsed
								, FlagActive
								, LogLUDTimeUTC
								, LogLUBy
							)
							values
							(
								'@objMST'
								, '@objNetworkID'
								, @objTotalQty
								, 0.0
								, 0.0
								, '1'
								, '@strLogLUDTimeUTC'
								, '@strLogLUBy'
							)
						"
						, "@objMST", objMST
						, "@objNetworkID", nNetworkID
						, "@objTotalQty", objQtyLicense
						, "@strLogLUDTimeUTC", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
						, "@strLogLUBy", strWAUserCode
						);

					////
					_cf.db.ExecQuery(
						strSqlInsert_MstSv_Invoice_license
						);
				}
				#endregion

				// Return Good:
				TDALUtils.DBUtils.CommitSafety(_cf.db);
				mdsFinal.AcceptChanges();
				return mdsFinal;
			}
			catch (Exception exc)
			{
				#region // Catch of try:
				// Rollback:
				TDALUtils.DBUtils.RollbackSafety(_cf.db);

				// Return Bad:
				return TUtils.CProcessExc.Process(
					ref mdsFinal
					, exc
					, strErrorCodeDefault
					, alParamsCoupleError.ToArray()
					);
				#endregion
			}
			finally
			{
				#region // Finally of try:
				// Rollback and Release resources:
				TDALUtils.DBUtils.RollbackSafety(_cf.db);
				TDALUtils.DBUtils.ReleaseAllSemaphore(_cf.db_Sys, true);

				// Write ReturnLog:
				_cf.ProcessBizReturn_OutSide(
					ref mdsFinal // mdsFinal
					, strTid // strTid
					, strGwUserCode // strGwUserCode
					, strGwPassword // strGwPassword
					, strWAUserCode // objUserCode
					, strFunctionName // strFunctionName
					);
				#endregion
			}
		}

		public DataSet Mst_NNT_Register_New20190817(
			string strTid
			, string strGwUserCode
			, string strGwPassword
			, string strWAUserCode
			, string strWAUserPassword
			, string strAccessToken
			, ref ArrayList alParamsCoupleError
			////
			, object objMST
			, object objNNTFullName
			, object objMSTParent
			, object objProvinceCode
			, object objDistrictCode
			//, object objNNTType
			, object objDLCode
			, object objNNTAddress
			, object objNNTMobile
			, object objNTTPhone
			, object objNNTFax
			, object objPresentBy
			, object objBusinessRegNo
			, object objNNTPosition
			, object objPresentIDNo
			, object objPresentIDType
			, object objGovTaxID
			, object objContactName
			, object objContactPhone
			, object objContactEmail
			, object objWebsite
			, object objCANumber
			, object objCAOrg
			, object objCAEffDTimeUTCStart
			, object objCAEffDTimeUTCEnd
			, object objPackageCode
			, object objCreatedDate
			, object objAccNo
			, object objAccHolder
			, object objBankName
			, object objBizType
			, object objBizFieldCode
			, object objBizSizeCode
			////
			, object objDepartmentCode
			////
			, object objUserPassword
			, object objUserPasswordRepeat
			////
			, object objQtyLicense
			////
			, DataSet dsData
			)
		{
			#region // Temp:
			DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
			//int nTidSeq = 0;
			DateTime dtimeSys = DateTime.UtcNow;
			string strFunctionName = "WA_Mst_NNT_Registry";
			string strErrorCodeDefault = TError.ErridnInventory.WA_Mst_NNT_Registry;
			alParamsCoupleError.AddRange(new object[]{
					"strFunctionName", strFunctionName
					, "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
			        ////
					, "objMST", objMST
					, "objNNTFullName", objNNTFullName
					, "objMSTParent", objMSTParent
					, "objProvinceCode", objProvinceCode
					, "objDistrictCode", objDistrictCode
                    //, "objNNTType", objNNTType
                    , "objDLCode", objDLCode
					, "objNNTAddress", objNNTAddress
					, "objNNTMobile", objNNTMobile
					, "objNTTPhone", objNTTPhone
					, "objNNTFax", objNNTFax
					, "objPresentBy", objPresentBy
					, "objBusinessRegNo", objBusinessRegNo
					, "objNNTPosition", objNNTPosition
					, "objPresentIDNo", objPresentIDNo
					, "objPresentIDType", objPresentIDType
					, "objGovTaxID", objGovTaxID
					, "objContactName", objContactName
					, "objContactPhone", objContactPhone
					, "objContactEmail", objContactEmail
					, "objWebsite", objWebsite
					, "objCANumber", objCANumber
					, "objCAOrg", objCAOrg
					, "objCAEffDTimeUTCStart", objCAEffDTimeUTCStart
					, "objCAEffDTimeUTCEnd", objCAEffDTimeUTCEnd
					, "objPackageCode", objPackageCode
					, "objAccNo", objAccNo
					, "objAccHolder", objAccHolder
					, "objBankName", objBankName
					, "objBankName", objBizType
					, "objBizFieldCode", objBizFieldCode
					, "objBizSizeCode", objBizSizeCode
                    /////
                    , "objDepartmentCode", objDepartmentCode
                    ////
                    , "objUserPassword", objUserPassword
					, "objUserPasswordRepeat", objUserPasswordRepeat
					////
					, "objQtyLicense", objQtyLicense
					});
			#endregion

			try
			{
				#region // Init:
				//_cf.db.LogUserId = _cf.sinf.strUserCode;
				_cf.db.BeginTransaction();

				// Write RequestLog:
				_cf.ProcessBizReq_OutSide(
					strTid // strTid
					, strGwUserCode // strGwUserCode
					, strGwPassword // strGwPassword
					, strWAUserCode // objUserCode
					, strFunctionName // strFunctionName
					, alParamsCoupleError // alParamsCoupleError
					);

				//// rem lại do khong can dung user/pass để đăng ký NNT
				//// Sys_User_CheckAuthentication:
				//Sys_User_CheckAuthentication(
				//    ref alParamsCoupleError
				//    , strWAUserCode
				//    , strWAUserPassword
				//    );

				//// Check Access/Deny:
				//Sys_Access_CheckDenyV30(
				//    ref alParamsCoupleError
				//    , strWAUserCode
				//    , strFunctionName
				//    );
				#endregion

				#region // Mst_NNT_CreateX:
				//DataSet dsGetData = null;
				{
					Mst_NNT_CreateX(
						strTid // strTid
						, strGwUserCode // strGwUserCode
						, strGwPassword // strGwPassword
						, "SYSADMIN" // strWAUserCode
						, strWAUserPassword // strWAUserPassword
						, ref alParamsCoupleError // alParamsCoupleError
						, dtimeSys // dtimeSys
								   ////
						, objMST // objMST
						, objNNTFullName // objNNTFullName
						, objMSTParent // objMSTParent
						, objProvinceCode // objProvinceCode
						, objDistrictCode // objDistrictCode
										  //, objNNTType // objNNTType
						, objDLCode // objDLCode
						, objNNTAddress // objNNTAddress
						, objNNTMobile // objNNTMobile
						, objNTTPhone // objNTTPhone
						, objNNTFax // objNNTFax
						, objPresentBy // objPresentBy
						, objBusinessRegNo // objBusinessRegNo
						, objNNTPosition // objNNTPosition
						, objPresentIDNo // objPresentIDNo
						, objPresentIDType // objPresentIDType
						, objGovTaxID // objGovTaxID
						, objContactName // objContactName
						, objContactPhone // objContactPhone
						, objContactEmail // objContactEmail
						, objWebsite // objWebsite
						, objCANumber // objCANumber
						, objCAOrg // objCAOrg
						, objCAEffDTimeUTCStart // objCAEffDTimeUTCStart
						, objCAEffDTimeUTCEnd // objCAEffDTimeUTCEnd
						, objPackageCode // objPackageCode
						, objCreatedDate // objCreatedDate
						, objAccNo // objAccNo
						, objAccHolder // objAccHolder
						, objBankName // objBankName
						, objBizType // objBizType
						, objBizFieldCode // objBizFieldCode
						, objBizSizeCode // objBizSizeCode
						);
				}
				////
				//CmUtils.DataUtils.MoveDataTable(ref mdsFinal, ref dsGetData);
				#endregion

				#region // Mst_Department_CreateX:
				//DataSet dsGetData = null;
				{
					//Mst_Department_CreateX(
					//    strTid // strTid
					//    , strGwUserCode // strGwUserCode
					//    , strGwPassword // strGwPassword
					//    , strWAUserCode // strWAUserCode
					//    , strWAUserPassword // strWAUserPassword
					//    , ref alParamsCoupleError // alParamsCoupleError
					//    , dtimeSys // dtimeSys
					//               ////
					//    , objDepartmentCode // objDepartmentCode
					//    , null // objDepartmentCodeParent
					//    , objMST // objMST
					//    , objDepartmentName // objDepartmentName                   
					//    );
				}
				////
				//CmUtils.DataUtils.MoveDataTable(ref mdsFinal, ref dsGetData);
				#endregion

				#region // Sys_User_CreateX:
				{
					Sys_User_CreateX(
						strTid // strTid
						, strGwUserCode // strGwUserCode
						, strGwPassword // strGwPassword
						, strWAUserCode // strWAUserCode
						, strWAUserPassword // strWAUserPassword
						, ref alParamsCoupleError // alParamsCoupleError						
						, dtimeSys // dtimeSys
								   ////
						, objContactEmail // objUserCode
						, objContactName // objUserName
						, objUserPassword // objUserPassword
						, objContactPhone // objPhoneNo
						, objContactEmail // objEMail
						, objMST // objMST
						, objDepartmentCode // objDepartmentCode
						, "" // objPosition
						, TConst.Flag.Inactive // objFlagDLAdmin
						, TConst.Flag.Inactive // objFlagSysAdmin
						, TConst.Flag.Active // objFlagNTTAdmin
											 ////
						);
				}
				#endregion

				#region // MasterServer:
				{
					// //
					DataSet dsDataOut = new DataSet();

					MstSv_Inos_User_BuildX(
						strTid // strTid
						, strGwUserCode // strGwUserCode
						, strGwPassword // strGwPassword
						, strWAUserCode // strWAUserCode
						, strWAUserPassword // strWAUserPassword
						, ref alParamsCoupleError // alParamsCoupleError
						, dtimeSys // dtimeSys
								   // //
						, objMST // objMST
								 // //
						, out dsDataOut // dsDataOut
						);

					// //
					DataTable dt_MstSv_Inos_User = dsDataOut.Tables["MstSv_Inos_User"].Copy();

					MstSv_Inos_User_AddX(
						strTid // strTid
						, strGwUserCode // strGwUserCode
						, strGwPassword // strGwPassword
						, strWAUserCode // strWAUserCode
						, strWAUserPassword // strWAUserPassword
						, ref alParamsCoupleError // alParamsCoupleError
						, dtimeSys // dtimeSys
								   // //
						, objMST // objMST
						, dt_MstSv_Inos_User.Rows[0]["Email"] // objEmail
						, dt_MstSv_Inos_User.Rows[0]["Name"] // objName
						, objUserPassword // objPassword
						, dt_MstSv_Inos_User.Rows[0]["Language"] // objLanguage
						, dt_MstSv_Inos_User.Rows[0]["TimeZone"] // objTimeZone
						, dt_MstSv_Inos_User.Rows[0]["FlagEmailSend"] // objFlagEmailSend
						, dt_MstSv_Inos_User.Rows[0]["FlagEmailActivate"] // objFlagEmailActivate
						, dt_MstSv_Inos_User.Rows[0]["FlagAdmin"] // objFlagAdmin
																  // //
						, dsDataOut // dsDataOut
						);
					// //
					Inos_AccountService_RegisterX(
						strTid // strTid
						, strGwUserCode // strGwUserCode
						, strGwPassword // strGwPassword
						, strWAUserCode // strWAUserCode
						, strWAUserPassword // strWAUserPassword
											//, strAccessToken // strAccessToken
						, ref mdsFinal // mdsFinal
						, ref alParamsCoupleError // alParamsCoupleError
						, dtimeSys // dtimeSys
								   // //
						, objMST // objMST
						, dt_MstSv_Inos_User.Rows[0]["Email"] // objEmail
						, dt_MstSv_Inos_User.Rows[0]["Name"] // objName
						, objUserPassword // objPassword
						, dt_MstSv_Inos_User.Rows[0]["Language"] // objLanguage
						, dt_MstSv_Inos_User.Rows[0]["TimeZone"] // objTimeZone
																 // //
						, out dsDataOut // dsDataOut
						);

					// //
					DataTable dtUpd_MstSv_Inos_User = dsDataOut.Tables["MstSv_Inos_User"];

					if (dtUpd_MstSv_Inos_User.Rows.Count > 0)
					{
						object objFt_Cols_Upd = "MstSv_Inos_User.UUID";

						MstSv_Inos_User_UpdateX(
							strTid // strTid
							, strGwUserCode // strGwUserCode
							, strGwPassword // strGwPassword
							, strWAUserCode // strWAUserCode
							, strWAUserPassword // strWAUserPassword
							, ref alParamsCoupleError // alParamsCoupleError
							, dtimeSys // dtimeSys
									   // //
							, objMST // objMST
							, objContactEmail // objEmail
							, dtUpd_MstSv_Inos_User.Rows[0]["Name"] // objName
							, objUserPassword // objPassword
							, dtUpd_MstSv_Inos_User.Rows[0]["Language"] // objLanguage
							, dtUpd_MstSv_Inos_User.Rows[0]["TimeZone"] // objTimeZone
							, dtUpd_MstSv_Inos_User.Rows[0]["UUID"] // objUUID
							, dtUpd_MstSv_Inos_User.Rows[0]["Id"] // objId
							, dtUpd_MstSv_Inos_User.Rows[0]["FlagEmailActivate"] // objFlagEmailActivate
							, dtUpd_MstSv_Inos_User.Rows[0]["FlagActive"] // objFlagActive
																		  ////
							, objFt_Cols_Upd // objFt_Cols_Upd
							);
					}

				}
				#endregion

				#region // MstSv_Invoice_license:
				{
					////
					string strSqlInsert_MstSv_Invoice_license = CmUtils.StringUtils.Replace(@"
							---- MstSv_Invoice_license:
							insert into MstSv_Invoice_license
							(
								MST
								, NetworkID
								, TotalQty
								, TotalQtyIssued
								, TotalQtyUsed
								, FlagActive
								, LogLUDTimeUTC
								, LogLUBy
							)
							values
							(
								'@objMST'
								, '@objNetworkID'
								, @objTotalQty
								, 0.0
								, 0.0
								, '1'
								, '@strLogLUDTimeUTC'
								, '@strLogLUBy'
							)
						"
						, "@objMST", objMST
						, "@objNetworkID", nNetworkID
						, "@objTotalQty", objQtyLicense
						, "@strLogLUDTimeUTC", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
						, "@strLogLUBy", strWAUserCode
						);

					////
					_cf.db.ExecQuery(
						strSqlInsert_MstSv_Invoice_license
						);
				}
				#endregion

				// Return Good:
				TDALUtils.DBUtils.CommitSafety(_cf.db);
				mdsFinal.AcceptChanges();
				return mdsFinal;
			}
			catch (Exception exc)
			{
				#region // Catch of try:
				// Rollback:
				TDALUtils.DBUtils.RollbackSafety(_cf.db);

				// Return Bad:
				return TUtils.CProcessExc.Process(
					ref mdsFinal
					, exc
					, strErrorCodeDefault
					, alParamsCoupleError.ToArray()
					);
				#endregion
			}
			finally
			{
				#region // Finally of try:
				// Rollback and Release resources:
				TDALUtils.DBUtils.RollbackSafety(_cf.db);
				TDALUtils.DBUtils.ReleaseAllSemaphore(_cf.db_Sys, true);

				// Write ReturnLog:
				_cf.ProcessBizReturn_OutSide(
					ref mdsFinal // mdsFinal
					, strTid // strTid
					, strGwUserCode // strGwUserCode
					, strGwPassword // strGwPassword
					, strWAUserCode // objUserCode
					, strFunctionName // strFunctionName
					);
				#endregion
			}
		}

		public DataSet RptSv_Mst_NNT_Register(
			string strTid
			, string strGwUserCode
			, string strGwPassword
			, string strWAUserCode
			, string strWAUserPassword
			, string strAccessToken
			, ref ArrayList alParamsCoupleError
			////
			, object objMST
			, object objNNTFullName
			, object objMSTParent
			, object objProvinceCode
			, object objDistrictCode
			//, object objNNTType
			, object objDLCode
			, object objNNTAddress
			, object objNNTMobile
			, object objNTTPhone
			, object objNNTFax
			, object objPresentBy
			, object objBusinessRegNo
			, object objNNTPosition
			, object objPresentIDNo
			, object objPresentIDType
			, object objGovTaxID
			, object objContactName
			, object objContactPhone
			, object objContactEmail
			, object objWebsite
			, object objCANumber
			, object objCAOrg
			, object objCAEffDTimeUTCStart
			, object objCAEffDTimeUTCEnd
			, object objPackageCode
			, object objCreatedDate
			, object objAccNo
			, object objAccHolder
			, object objBankName
			, object objBizType
			, object objBizFieldCode
			, object objBizSizeCode
			////
			, object objDepartmentCode
			////
			, object objUserPassword
			, object objUserPasswordRepeat
			//////
			//, object objQtyLicense
			////
			, DataSet dsData
			)
		{
			#region // Temp:
			DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
			//int nTidSeq = 0;
			DateTime dtimeSys = DateTime.UtcNow;
			string strFunctionName = "WA_Mst_NNT_Registry";
			string strErrorCodeDefault = TError.ErridnInventory.WA_Mst_NNT_Registry;
			alParamsCoupleError.AddRange(new object[]{
					"strFunctionName", strFunctionName
					, "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
			        ////
					, "objMST", objMST
					, "objNNTFullName", objNNTFullName
					, "objMSTParent", objMSTParent
					, "objProvinceCode", objProvinceCode
					, "objDistrictCode", objDistrictCode
                    //, "objNNTType", objNNTType
                    , "objDLCode", objDLCode
					, "objNNTAddress", objNNTAddress
					, "objNNTMobile", objNNTMobile
					, "objNTTPhone", objNTTPhone
					, "objNNTFax", objNNTFax
					, "objPresentBy", objPresentBy
					, "objBusinessRegNo", objBusinessRegNo
					, "objNNTPosition", objNNTPosition
					, "objPresentIDNo", objPresentIDNo
					, "objPresentIDType", objPresentIDType
					, "objGovTaxID", objGovTaxID
					, "objContactName", objContactName
					, "objContactPhone", objContactPhone
					, "objContactEmail", objContactEmail
					, "objWebsite", objWebsite
					, "objCANumber", objCANumber
					, "objCAOrg", objCAOrg
					, "objCAEffDTimeUTCStart", objCAEffDTimeUTCStart
					, "objCAEffDTimeUTCEnd", objCAEffDTimeUTCEnd
					, "objPackageCode", objPackageCode
					, "objAccNo", objAccNo
					, "objAccHolder", objAccHolder
					, "objBankName", objBankName
					, "objBankName", objBizType
					, "objBizFieldCode", objBizFieldCode
					, "objBizSizeCode", objBizSizeCode
                    /////
                    , "objDepartmentCode", objDepartmentCode
                    ////
                    , "objUserPassword", objUserPassword
					, "objUserPasswordRepeat", objUserPasswordRepeat
					////
					//, "objQtyLicense", objQtyLicense
					});
			#endregion

			try
			{
				#region // Init:
				//_cf.db.LogUserId = _cf.sinf.strUserCode;
				_cf.db.BeginTransaction();

				// Write RequestLog:
				_cf.ProcessBizReq_OutSide(
					strTid // strTid
					, strGwUserCode // strGwUserCode
					, strGwPassword // strGwPassword
					, strWAUserCode // objUserCode
					, strFunctionName // strFunctionName
					, alParamsCoupleError // alParamsCoupleError
					);

				//// rem lại do khong can dung user/pass để đăng ký NNT
				//// Sys_User_CheckAuthentication:
				//Sys_User_CheckAuthentication(
				//    ref alParamsCoupleError
				//    , strWAUserCode
				//    , strWAUserPassword
				//    );

				//// Check Access/Deny:
				//Sys_Access_CheckDenyV30(
				//    ref alParamsCoupleError
				//    , strWAUserCode
				//    , strFunctionName
				//    );
				#endregion

				#region // Mst_NNT_CreateX:
				//DataSet dsGetData = null;
				{
					Mst_NNT_CreateX(
						strTid // strTid
						, strGwUserCode // strGwUserCode
						, strGwPassword // strGwPassword
						, "SYSADMIN" // strWAUserCode
						, strWAUserPassword // strWAUserPassword
						, ref alParamsCoupleError // alParamsCoupleError
						, dtimeSys // dtimeSys
								   ////
						, objMST // objMST
						, objNNTFullName // objNNTFullName
						, objMSTParent // objMSTParent
						, objProvinceCode // objProvinceCode
						, objDistrictCode // objDistrictCode
										  //, objNNTType // objNNTType
						, objDLCode // objDLCode
						, objNNTAddress // objNNTAddress
						, objNNTMobile // objNNTMobile
						, objNTTPhone // objNTTPhone
						, objNNTFax // objNNTFax
						, objPresentBy // objPresentBy
						, objBusinessRegNo // objBusinessRegNo
						, objNNTPosition // objNNTPosition
						, objPresentIDNo // objPresentIDNo
						, objPresentIDType // objPresentIDType
						, objGovTaxID // objGovTaxID
						, objContactName // objContactName
						, objContactPhone // objContactPhone
						, objContactEmail // objContactEmail
						, objWebsite // objWebsite
						, objCANumber // objCANumber
						, objCAOrg // objCAOrg
						, objCAEffDTimeUTCStart // objCAEffDTimeUTCStart
						, objCAEffDTimeUTCEnd // objCAEffDTimeUTCEnd
						, objPackageCode // objPackageCode
						, objCreatedDate // objCreatedDate
						, objAccNo // objAccNo
						, objAccHolder // objAccHolder
						, objBankName // objBankName
						, objBizType // objBizType
						, objBizFieldCode // objBizFieldCode
						, objBizSizeCode // objBizSizeCode
						);
				}
				////
				//CmUtils.DataUtils.MoveDataTable(ref mdsFinal, ref dsGetData);
				#endregion

				#region // Mst_Department_CreateX:
				//DataSet dsGetData = null;
				{
					//Mst_Department_CreateX(
					//    strTid // strTid
					//    , strGwUserCode // strGwUserCode
					//    , strGwPassword // strGwPassword
					//    , strWAUserCode // strWAUserCode
					//    , strWAUserPassword // strWAUserPassword
					//    , ref alParamsCoupleError // alParamsCoupleError
					//    , dtimeSys // dtimeSys
					//               ////
					//    , objDepartmentCode // objDepartmentCode
					//    , null // objDepartmentCodeParent
					//    , objMST // objMST
					//    , objDepartmentName // objDepartmentName                   
					//    );
				}
				////
				//CmUtils.DataUtils.MoveDataTable(ref mdsFinal, ref dsGetData);
				#endregion

				#region // Sys_User_CreateX:
				{
					Sys_User_CreateX(
						strTid // strTid
						, strGwUserCode // strGwUserCode
						, strGwPassword // strGwPassword
						, strWAUserCode // strWAUserCode
						, strWAUserPassword // strWAUserPassword
						, ref alParamsCoupleError // alParamsCoupleError						
						, dtimeSys // dtimeSys
								   ////
						, objContactEmail // objUserCode
						, objContactName // objUserName
						, objUserPassword // objUserPassword
						, objContactPhone // objPhoneNo
						, objContactEmail // objEMail
						, objMST // objMST
						, objDepartmentCode // objDepartmentCode
						, "" // objPosition
						, TConst.Flag.Inactive // objFlagDLAdmin
						, TConst.Flag.Inactive // objFlagSysAdmin
						, TConst.Flag.Active // objFlagNTTAdmin
											 ////
						);
				}
				#endregion

				#region // MstSv_Inos_User_AddX:
				{
					// //
					DataTable dt_MstSv_Inos_User = dsData.Tables["MstSv_Inos_User"].Copy();

					RptSv_Inos_User_AddX(
						strTid // strTid
						, strGwUserCode // strGwUserCode
						, strGwPassword // strGwPassword
						, strWAUserCode // strWAUserCode
						, strWAUserPassword // strWAUserPassword
						, ref alParamsCoupleError // alParamsCoupleError
						, dtimeSys // dtimeSys
						// //
						, objMST // objMST
						, dt_MstSv_Inos_User.Rows[0]["Email"] // objEmail
						, dt_MstSv_Inos_User.Rows[0]["Name"] // objName
						, objUserPassword // objPassword
						, dt_MstSv_Inos_User.Rows[0]["Language"] // objLanguage
						, dt_MstSv_Inos_User.Rows[0]["TimeZone"] // objTimeZone
						, dt_MstSv_Inos_User.Rows[0]["Id"] // objId
						, dt_MstSv_Inos_User.Rows[0]["FlagEmailSend"] // objFlagEmailSend
						, dt_MstSv_Inos_User.Rows[0]["FlagEmailActivate"] // objFlagEmailActivate
						, dt_MstSv_Inos_User.Rows[0]["FlagAdmin"] // objFlagAdmin
						////
						, dsData // dsDataOut
						);
				}
				#endregion

				// Return Good:
				TDALUtils.DBUtils.CommitSafety(_cf.db);
				mdsFinal.AcceptChanges();
				return mdsFinal;
			}
			catch (Exception exc)
			{
				#region // Catch of try:
				// Rollback:
				TDALUtils.DBUtils.RollbackSafety(_cf.db);

				// Return Bad:
				return TUtils.CProcessExc.Process(
					ref mdsFinal
					, exc
					, strErrorCodeDefault
					, alParamsCoupleError.ToArray()
					);
				#endregion
			}
			finally
			{
				#region // Finally of try:
				// Rollback and Release resources:
				TDALUtils.DBUtils.RollbackSafety(_cf.db);
				TDALUtils.DBUtils.ReleaseAllSemaphore(_cf.db_Sys, true);

				// Write ReturnLog:
				_cf.ProcessBizReturn_OutSide(
					ref mdsFinal // mdsFinal
					, strTid // strTid
					, strGwUserCode // strGwUserCode
					, strGwPassword // strGwPassword
					, strWAUserCode // objUserCode
					, strFunctionName // strFunctionName
					);
				#endregion
			}
		}

		public DataSet RptSv_Mst_NNT_Register_New20200208(
			string strTid
			, string strGwUserCode
			, string strGwPassword
			, string strWAUserCode
			, string strWAUserPassword
			, string strAccessToken
			, ref ArrayList alParamsCoupleError
			////
			, object objMST
			, object objNNTFullName
			, object objMSTParent
			, object objProvinceCode
			, object objDistrictCode
			//, object objNNTType
			, object objDLCode
			, object objNNTAddress
			, object objNNTMobile
			, object objNTTPhone
			, object objNNTFax
			, object objPresentBy
			, object objBusinessRegNo
			, object objNNTPosition
			, object objPresentIDNo
			, object objPresentIDType
			, object objGovTaxID
			, object objContactName
			, object objContactPhone
			, object objContactEmail
			, object objWebsite
			, object objCANumber
			, object objCAOrg
			, object objCAEffDTimeUTCStart
			, object objCAEffDTimeUTCEnd
			, object objPackageCode
			, object objCreatedDate
			, object objAccNo
			, object objAccHolder
			, object objBankName
			, object objBizType
			, object objBizFieldCode
			, object objBizSizeCode
			, object objDealerType
			////
			, object objDepartmentCode
			////
			, object objUserPassword
			, object objUserPasswordRepeat
			//////
			//, object objQtyLicense
			////
			, DataSet dsData
			)
		{
			#region // Temp:
			DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
			//int nTidSeq = 0;
			DateTime dtimeSys = DateTime.UtcNow;
			string strFunctionName = "WA_Mst_NNT_Registry";
			string strErrorCodeDefault = TError.ErridnInventory.WA_Mst_NNT_Registry;
			alParamsCoupleError.AddRange(new object[]{
					"strFunctionName", strFunctionName
					, "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
			        ////
					, "objMST", objMST
					, "objNNTFullName", objNNTFullName
					, "objMSTParent", objMSTParent
					, "objProvinceCode", objProvinceCode
					, "objDistrictCode", objDistrictCode
                    //, "objNNTType", objNNTType
                    , "objDLCode", objDLCode
					, "objNNTAddress", objNNTAddress
					, "objNNTMobile", objNNTMobile
					, "objNTTPhone", objNTTPhone
					, "objNNTFax", objNNTFax
					, "objPresentBy", objPresentBy
					, "objBusinessRegNo", objBusinessRegNo
					, "objNNTPosition", objNNTPosition
					, "objPresentIDNo", objPresentIDNo
					, "objPresentIDType", objPresentIDType
					, "objGovTaxID", objGovTaxID
					, "objContactName", objContactName
					, "objContactPhone", objContactPhone
					, "objContactEmail", objContactEmail
					, "objWebsite", objWebsite
					, "objCANumber", objCANumber
					, "objCAOrg", objCAOrg
					, "objCAEffDTimeUTCStart", objCAEffDTimeUTCStart
					, "objCAEffDTimeUTCEnd", objCAEffDTimeUTCEnd
					, "objPackageCode", objPackageCode
					, "objAccNo", objAccNo
					, "objAccHolder", objAccHolder
					, "objBankName", objBankName
					, "objBankName", objBizType
					, "objBizFieldCode", objBizFieldCode
					, "objBizSizeCode", objBizSizeCode
					, "objDealerType", objDealerType
                    /////
                    , "objDepartmentCode", objDepartmentCode
                    ////
                    , "objUserPassword", objUserPassword
					, "objUserPasswordRepeat", objUserPasswordRepeat
					////
					//, "objQtyLicense", objQtyLicense
					});
			#endregion

			try
			{
				#region // Init:
				//_cf.db.LogUserId = _cf.sinf.strUserCode;
				_cf.db.BeginTransaction();

				// Write RequestLog:
				_cf.ProcessBizReq_OutSide(
					strTid // strTid
					, strGwUserCode // strGwUserCode
					, strGwPassword // strGwPassword
					, strWAUserCode // objUserCode
					, strFunctionName // strFunctionName
					, alParamsCoupleError // alParamsCoupleError
					);

				//// rem lại do khong can dung user/pass để đăng ký NNT
				//// Sys_User_CheckAuthentication:
				//Sys_User_CheckAuthentication(
				//    ref alParamsCoupleError
				//    , strWAUserCode
				//    , strWAUserPassword
				//    );

				//// Check Access/Deny:
				//Sys_Access_CheckDenyV30(
				//    ref alParamsCoupleError
				//    , strWAUserCode
				//    , strFunctionName
				//    );
				#endregion

				#region // Mst_NNT_CreateX:
				//DataSet dsGetData = null;
				{
					Mst_NNT_CreateX_New20200208(
						strTid // strTid
						, strGwUserCode // strGwUserCode
						, strGwPassword // strGwPassword
						, "SYSADMIN" // strWAUserCode
						, strWAUserPassword // strWAUserPassword
						, ref alParamsCoupleError // alParamsCoupleError
						, dtimeSys // dtimeSys
								   ////
						, objMST // objMST
						, objNNTFullName // objNNTFullName
						, objMSTParent // objMSTParent
						, objProvinceCode // objProvinceCode
						, objDistrictCode // objDistrictCode
										  //, objNNTType // objNNTType
						, objDLCode // objDLCode
						, objNNTAddress // objNNTAddress
						, objNNTMobile // objNNTMobile
						, objNTTPhone // objNTTPhone
						, objNNTFax // objNNTFax
						, objPresentBy // objPresentBy
						, objBusinessRegNo // objBusinessRegNo
						, objNNTPosition // objNNTPosition
						, objPresentIDNo // objPresentIDNo
						, objPresentIDType // objPresentIDType
						, objGovTaxID // objGovTaxID
						, objContactName // objContactName
						, objContactPhone // objContactPhone
						, objContactEmail // objContactEmail
						, objWebsite // objWebsite
						, objCANumber // objCANumber
						, objCAOrg // objCAOrg
						, objCAEffDTimeUTCStart // objCAEffDTimeUTCStart
						, objCAEffDTimeUTCEnd // objCAEffDTimeUTCEnd
						, objPackageCode // objPackageCode
						, objCreatedDate // objCreatedDate
						, objAccNo // objAccNo
						, objAccHolder // objAccHolder
						, objBankName // objBankName
						, objBizType // objBizType
						, objBizFieldCode // objBizFieldCode
						, objBizSizeCode // objBizSizeCode
						, objDealerType // objDealerType
						);
				}
				////
				//CmUtils.DataUtils.MoveDataTable(ref mdsFinal, ref dsGetData);
				#endregion

				#region // Mst_Department_CreateX:
				//DataSet dsGetData = null;
				{
					//Mst_Department_CreateX(
					//    strTid // strTid
					//    , strGwUserCode // strGwUserCode
					//    , strGwPassword // strGwPassword
					//    , strWAUserCode // strWAUserCode
					//    , strWAUserPassword // strWAUserPassword
					//    , ref alParamsCoupleError // alParamsCoupleError
					//    , dtimeSys // dtimeSys
					//               ////
					//    , objDepartmentCode // objDepartmentCode
					//    , null // objDepartmentCodeParent
					//    , objMST // objMST
					//    , objDepartmentName // objDepartmentName                   
					//    );
				}
				////
				//CmUtils.DataUtils.MoveDataTable(ref mdsFinal, ref dsGetData);
				#endregion

				#region // Sys_User_CreateX:
				{
					Sys_User_CreateX(
						strTid // strTid
						, strGwUserCode // strGwUserCode
						, strGwPassword // strGwPassword
						, strWAUserCode // strWAUserCode
						, strWAUserPassword // strWAUserPassword
						, ref alParamsCoupleError // alParamsCoupleError						
						, dtimeSys // dtimeSys
								   ////
						, objContactEmail // objUserCode
						, objContactName // objUserName
						, objUserPassword // objUserPassword
						, objContactPhone // objPhoneNo
						, objContactEmail // objEMail
						, objMST // objMST
						, objDepartmentCode // objDepartmentCode
						, "" // objPosition
						, TConst.Flag.Inactive // objFlagDLAdmin
						, TConst.Flag.Inactive // objFlagSysAdmin
						, TConst.Flag.Active // objFlagNTTAdmin
											 ////
						);
				}
				#endregion

				#region // MstSv_Inos_User_AddX:
				{
					// //
					DataTable dt_MstSv_Inos_User = dsData.Tables["MstSv_Inos_User"].Copy();

					RptSv_Inos_User_AddX(
						strTid // strTid
						, strGwUserCode // strGwUserCode
						, strGwPassword // strGwPassword
						, strWAUserCode // strWAUserCode
						, strWAUserPassword // strWAUserPassword
						, ref alParamsCoupleError // alParamsCoupleError
						, dtimeSys // dtimeSys
								   // //
						, objMST // objMST
						, dt_MstSv_Inos_User.Rows[0]["Email"] // objEmail
						, dt_MstSv_Inos_User.Rows[0]["Name"] // objName
						, objUserPassword // objPassword
						, dt_MstSv_Inos_User.Rows[0]["Language"] // objLanguage
						, dt_MstSv_Inos_User.Rows[0]["TimeZone"] // objTimeZone
						, dt_MstSv_Inos_User.Rows[0]["Id"] // objId
						, dt_MstSv_Inos_User.Rows[0]["FlagEmailSend"] // objFlagEmailSend
						, dt_MstSv_Inos_User.Rows[0]["FlagEmailActivate"] // objFlagEmailActivate
						, dt_MstSv_Inos_User.Rows[0]["FlagAdmin"] // objFlagAdmin
																  ////
						, dsData // dsDataOut
						);
				}
				#endregion

				// Return Good:
				TDALUtils.DBUtils.CommitSafety(_cf.db);
				mdsFinal.AcceptChanges();
				return mdsFinal;
			}
			catch (Exception exc)
			{
				#region // Catch of try:
				// Rollback:
				TDALUtils.DBUtils.RollbackSafety(_cf.db);

				// Return Bad:
				return TUtils.CProcessExc.Process(
					ref mdsFinal
					, exc
					, strErrorCodeDefault
					, alParamsCoupleError.ToArray()
					);
				#endregion
			}
			finally
			{
				#region // Finally of try:
				// Rollback and Release resources:
				TDALUtils.DBUtils.RollbackSafety(_cf.db);
				TDALUtils.DBUtils.ReleaseAllSemaphore(_cf.db_Sys, true);

				// Write ReturnLog:
				_cf.ProcessBizReturn_OutSide(
					ref mdsFinal // mdsFinal
					, strTid // strTid
					, strGwUserCode // strGwUserCode
					, strGwPassword // strGwPassword
					, strWAUserCode // objUserCode
					, strFunctionName // strFunctionName
					);
				#endregion
			}
		}


		private void RptSv_Mst_NNT_CalcX(
			string strTid
			, string strGwUserCode
			, string strGwPassword
			, string strWAUserCode
			, string strWAUserPassword
			, string strAccessToken
			, ref DataSet mdsFinal
			, ref ArrayList alParamsCoupleError
			////
			, object objMST
			, object objNNTFullName
			, object objMSTParent
			, object objProvinceCode
			, object objDistrictCode
			//, object objNNTType
			, object objDLCode
			, object objNNTAddress
			, object objNNTMobile
			, object objNTTPhone
			, object objNNTFax
			, object objPresentBy
			, object objBusinessRegNo
			, object objNNTPosition
			, object objPresentIDNo
			, object objPresentIDType
			, object objGovTaxID
			, object objContactName
			, object objContactPhone
			, object objContactEmail
			, object objWebsite
			, object objCANumber
			, object objCAOrg
			, object objCAEffDTimeUTCStart
			, object objCAEffDTimeUTCEnd
			, object objPackageCode
			, object objCreatedDate
			, object objAccNo
			, object objAccHolder
			, object objBankName
			, object objBizType
			, object objBizFieldCode
			, object objBizSizeCode
			////
			, object objDepartmentCode
			////
			, object objUserPassword
			, object objUserPasswordRepeat
			//////
			//, object objQtyLicense
			////
			, DataSet dsData
			////
			)
		{
			#region // Temp:
			//DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
			//int nTidSeq = 0;
			DateTime dtimeSys = DateTime.UtcNow;
			string strFunctionName = "RptSv_Mst_NNT_CalcX";
			//string strErrorCodeDefault = TError.ErridNTVAN.WA_Mst_NNT_Registry;
			alParamsCoupleError.AddRange(new object[]{
					"strFunctionName", strFunctionName
					, "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
			        ////
					, "objMST", objMST
					, "objNNTFullName", objNNTFullName
					, "objMSTParent", objMSTParent
					, "objProvinceCode", objProvinceCode
					, "objDistrictCode", objDistrictCode
                    //, "objNNTType", objNNTType
                    , "objDLCode", objDLCode
					, "objNNTAddress", objNNTAddress
					, "objNNTMobile", objNNTMobile
					, "objNTTPhone", objNTTPhone
					, "objNNTFax", objNNTFax
					, "objPresentBy", objPresentBy
					, "objBusinessRegNo", objBusinessRegNo
					, "objNNTPosition", objNNTPosition
					, "objPresentIDNo", objPresentIDNo
					, "objPresentIDType", objPresentIDType
					, "objGovTaxID", objGovTaxID
					, "objContactName", objContactName
					, "objContactPhone", objContactPhone
					, "objContactEmail", objContactEmail
					, "objWebsite", objWebsite
					, "objCANumber", objCANumber
					, "objCAOrg", objCAOrg
					, "objCAEffDTimeUTCStart", objCAEffDTimeUTCStart
					, "objCAEffDTimeUTCEnd", objCAEffDTimeUTCEnd
					, "objPackageCode", objPackageCode
					, "objAccNo", objAccNo
					, "objAccHolder", objAccHolder
					, "objBankName", objBankName
					, "objBankName", objBizType
					, "objBizFieldCode", objBizFieldCode
					, "objBizSizeCode", objBizSizeCode
                    /////
                    , "objDepartmentCode", objDepartmentCode
                    ////
                    , "objUserPassword", objUserPassword
					, "objUserPasswordRepeat", objUserPasswordRepeat
					////
					//, "objQtyLicense", objQtyLicense
					});
			#endregion

			#region // Refine and Check Input:
			//bool bFlagInosCreateUser = false;
			//bool bFlagInosCreateOrg = false;
			//bool bFlagRptSvMstNNtAdd = false;
			//bool bFlagInosCreateOrder = false;
			#endregion

			//         #region // Calc InosCreateUser:
			//         {
			//	OSiNOSSv.AccountService objAccountService = new OSiNOSSv.AccountService(null);
			//	InosUser dummy = new InosUser();
			//	dummy.Email = Convert.ToString(objContactEmail);

			//	InosUser inosUser = objAccountService.GetUser(dummy);

			//	if (inosUser != null) bFlagInosCreateUser = true;
			//}
			//#endregion

			//#region // Calc InosCreateOrg:
			//{
			//	////
			//	bFlagInosCreateOrg = true;
			//}
			//#endregion

			//#region // Calc RptSvMstNNtAdd:
			//{
			//	RptSv_Mst_NNT_RegisterX(
			//		strTid // strTid
			//		, strGwUserCode // strGwUserCode
			//		, strGwPassword // strGwPassword
			//		, strWAUserCode // strWAUserCode
			//		, strWAUserPassword // strWAUserPassword
			//		, strAccessToken // strAccessToken
			//		, ref mdsFinal // mdsFinal
			//		, ref alParamsCoupleError // alParamsCoupleError
			//								  ////
			//		, objMST // objMST
			//		, objNNTFullName // objNNTFullName
			//		, objMSTParent // objMSTParent
			//		, objProvinceCode // objProvinceCode
			//		, objDistrictCode // objDistrictCode
			//						  //, objNNTType
			//		, objDLCode // objDLCode
			//		, objNNTAddress // objNNTAddress
			//		, objNNTMobile // objNNTMobile
			//		, objNTTPhone // objNTTPhone
			//		, objNNTFax // objNNTFax
			//		, objPresentBy // objPresentBy
			//		, objBusinessRegNo // objBusinessRegNo
			//		, objNNTPosition // objNNTPosition
			//		, objPresentIDNo // objPresentIDNo
			//		, objPresentIDType // objPresentIDType
			//		, objGovTaxID // objGovTaxID
			//		, objContactName // objContactName
			//		, objContactPhone // objContactPhone
			//		, objContactEmail // objContactEmail
			//		, objWebsite // objWebsite
			//		, objCANumber // objCANumber
			//		, objCAOrg // objCAOrg
			//		, objCAEffDTimeUTCStart // objCAEffDTimeUTCStart
			//		, objCAEffDTimeUTCEnd // objCAEffDTimeUTCEnd
			//		, objPackageCode // objPackageCode
			//		, objCreatedDate // objCreatedDate
			//		, objAccNo // objAccNo
			//		, objAccHolder // objAccHolder
			//		, objBankName // objBankName
			//		, objBizType // objBizType
			//		, objBizFieldCode // objBizFieldCode
			//		, objBizSizeCode // objBizSizeCode
			//						 ////
			//		, objDepartmentCode // objDepartmentCode
			//							////
			//		, objUserPassword // objUserPassword
			//		, objUserPasswordRepeat // objUserPasswordRepeat
			//								//////
			//								//, objQtyLicense
			//								////
			//		, dsData // dsData
			//		);

			//	bFlagRptSvMstNNtAdd = true;
			//}
			//#endregion

			//#region // Calc InosCreateOrder:
			//{
			//	////
			//	bFlagInosCreateOrder = true;
			//}
			//#endregion

			// Return Good:
			//TDALUtils.DBUtils.CommitSafety(_cf.db);
			mdsFinal.AcceptChanges();
			//return mdsFinal;
		}

		public DataSet RptSv_Mst_NNT_Add_New20200208(
			string strTid
			, string strGwUserCode
			, string strGwPassword
			, string strWAUserCode
			, string strWAUserPassword
			, string strAccessToken
			, ref ArrayList alParamsCoupleError
			////
			//// InosCreateUser
			, object objName_InosCreateUser
			, object objEmail_InosCreateUser
			, object objPassword_InosCreateUser
			, object objLanguage_InosCreateUser
			, object objTimeZone_InosCreateUser
			, object objVerificationCode_InosCreateUser
			//// InosCreateOrg
			, object objParentId_InosCreateOrg
			, object objName_InosCreateOrg
			, object objBizTypeId_InosCreateOrg
			, object objBizTypeName_InosCreateOrg
			, object objBizFieldId_InosCreateOrg
			, object objBizFieldName_InosCreateOrg
			, object objContactName_InosCreateOrg
			, object objEmail_InosCreateOrg
			, object objPhoneNo_InosCreateOrg
			, object objDescription_InosCreateOrg
			, object objEnable_InosCreateOrg
			//// RptSv
			, object objMST
			, object objNNTFullName
			, object objMSTParent
			, object objProvinceCode
			, object objDistrictCode
			//, object objNNTType
			, object objDLCode
			, object objNNTAddress
			, object objNNTMobile
			, object objNTTPhone
			, object objNNTFax
			, object objPresentBy
			, object objBusinessRegNo
			, object objNNTPosition
			, object objPresentIDNo
			, object objPresentIDType
			, object objGovTaxID
			, object objContactName
			, object objContactPhone
			, object objContactEmail
			, object objWebsite
			, object objCANumber
			, object objCAOrg
			, object objCAEffDTimeUTCStart
			, object objCAEffDTimeUTCEnd
			, object objPackageCode
			, object objCreatedDate
			, object objAccNo
			, object objAccHolder
			, object objBankName
			, object objBizType
			, object objBizFieldCode
			, object objBizSizeCode
			, object objDealerType
			////
			, object objDepartmentCode
			////
			, object objUserPassword
			, object objUserPasswordRepeat
			//////
			//, object objQtyLicense
			////
			//, DataSet dsData
			////
			, Inos_LicOrder objInos_LicOrder
			////
			, ref RT_Mst_NNT objRT_Mst_NNT
			)
		{
			#region // Temp:
			DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
			//int nTidSeq = 0;
			DateTime dtimeSys = DateTime.UtcNow;
			string strFunctionName = "WA_Mst_NNT_Registry";
			string strErrorCodeDefault = TError.ErridnInventory.WA_Mst_NNT_Registry;
			alParamsCoupleError.AddRange(new object[]{
					"strFunctionName", strFunctionName
					, "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
			        ////
					, "objMST", objMST
					, "objNNTFullName", objNNTFullName
					, "objMSTParent", objMSTParent
					, "objProvinceCode", objProvinceCode
					, "objDistrictCode", objDistrictCode
                    //, "objNNTType", objNNTType
                    , "objDLCode", objDLCode
					, "objNNTAddress", objNNTAddress
					, "objNNTMobile", objNNTMobile
					//, "objNTTPhone", objNTTPhone
					//, "objNNTFax", objNNTFax
					//, "objPresentBy", objPresentBy
					//, "objBusinessRegNo", objBusinessRegNo
					//, "objNNTPosition", objNNTPosition
					//, "objPresentIDNo", objPresentIDNo
					//, "objPresentIDType", objPresentIDType
					//, "objGovTaxID", objGovTaxID
					, "objContactName", objContactName
					, "objContactPhone", objContactPhone
					, "objContactEmail", objContactEmail
					, "objWebsite", objWebsite
					, "objCANumber", objCANumber
					, "objCAOrg", objCAOrg
					, "objCAEffDTimeUTCStart", objCAEffDTimeUTCStart
					, "objCAEffDTimeUTCEnd", objCAEffDTimeUTCEnd
					, "objPackageCode", objPackageCode
					, "objAccNo", objAccNo
					, "objAccHolder", objAccHolder
					, "objBankName", objBankName
					, "objBankName", objBizType
					, "objBizFieldCode", objBizFieldCode
					, "objBizSizeCode", objBizSizeCode
                    /////
                    , "objDepartmentCode", objDepartmentCode
                    ////
                    , "objUserPassword", objUserPassword
					, "objUserPasswordRepeat", objUserPasswordRepeat
					////
					//, "objQtyLicense", objQtyLicense
					});
			#endregion

			try
			{
				#region // Init:
				//_cf.db.LogUserId = _cf.sinf.strUserCode;
				_cf.db.BeginTransaction();

				// Write RequestLog:
				_cf.ProcessBizReq_OutSide(
					strTid // strTid
					, strGwUserCode // strGwUserCode
					, strGwPassword // strGwPassword
					, strWAUserCode // objUserCode
					, strFunctionName // strFunctionName
					, alParamsCoupleError // alParamsCoupleError
					);

				//// rem lại do khong can dung user/pass để đăng ký NNT
				//// Sys_User_CheckAuthentication:
				//RptSv_Sys_User_CheckAuthentication(
				//	ref alParamsCoupleError
				//	, strWAUserCode
				//	, strWAUserPassword
				//	);

				//// Check Access/Deny:
				//Sys_Access_CheckDenyV30(
				//    ref alParamsCoupleError
				//    , strWAUserCode
				//    , strFunctionName
				//    );
				#endregion

				#region  // RptSv_Mst_NNT_AddX:
				RptSv_Mst_NNT_AddX_New20200208(
					strTid
					, strGwUserCode
					, strGwPassword
					, strWAUserCode
					, strWAUserPassword
					, strAccessToken
					, ref mdsFinal
					, ref alParamsCoupleError
					//// InosCreateUser
					, objName_InosCreateUser
					, objEmail_InosCreateUser
					, objPassword_InosCreateUser
					, objLanguage_InosCreateUser
					, objTimeZone_InosCreateUser
					, objVerificationCode_InosCreateUser
					//// InosCreateOrg
					, objParentId_InosCreateOrg
					, objName_InosCreateOrg
					, objBizTypeId_InosCreateOrg
					, objBizTypeName_InosCreateOrg
					, objBizFieldId_InosCreateOrg
					, objBizFieldName_InosCreateOrg
					, objContactName_InosCreateOrg
					, objEmail_InosCreateOrg
					, objPhoneNo_InosCreateOrg
					, objDescription_InosCreateOrg
					, objEnable_InosCreateOrg
					//// RptSv
					, objMST
					, objNNTFullName
					, objMSTParent
					, objProvinceCode
					, objDistrictCode
					//, objNNTType
					, objDLCode
					, objNNTAddress
					, objNNTMobile
					, objNTTPhone
					, objNNTFax
					, objPresentBy
					, objBusinessRegNo
					, objNNTPosition
					, objPresentIDNo
					, objPresentIDType
					, objGovTaxID
					, objContactName
					, objContactPhone
					, objContactEmail
					, objWebsite
					, objCANumber
					, objCAOrg
					, objCAEffDTimeUTCStart
					, objCAEffDTimeUTCEnd
					, objPackageCode
					, objCreatedDate
					, objAccNo
					, objAccHolder
					, objBankName
					, objBizType
					, objBizFieldCode
					, objBizSizeCode
					, objDealerType
					////
					, objDepartmentCode
					////
					, objUserPassword
					, objUserPasswordRepeat
					//////
					//, objQtyLicense
					////
					//, DataSet dsData
					////
					, objInos_LicOrder
					////
					, ref objRT_Mst_NNT
					);
					////
				#endregion

				// Return Good:
				TDALUtils.DBUtils.CommitSafety(_cf.db);
				mdsFinal.AcceptChanges();
				return mdsFinal;
			}
			catch (Exception exc)
			{
				#region // Catch of try:
				// Rollback:
				TDALUtils.DBUtils.RollbackSafety(_cf.db);

				// Return Bad:
				return TUtils.CProcessExc.Process(
					ref mdsFinal
					, exc
					, strErrorCodeDefault
					, alParamsCoupleError.ToArray()
					);
				#endregion
			}
			finally
			{
				#region // Finally of try:
				// Rollback and Release resources:
				TDALUtils.DBUtils.RollbackSafety(_cf.db);
				TDALUtils.DBUtils.ReleaseAllSemaphore(_cf.db_Sys, true);

				// Write ReturnLog:
				_cf.ProcessBizReturn_OutSide(
					ref mdsFinal // mdsFinal
					, strTid // strTid
					, strGwUserCode // strGwUserCode
					, strGwPassword // strGwPassword
					, strWAUserCode // objUserCode
					, strFunctionName // strFunctionName
					);
				#endregion
			}
		}


		public DataSet RptSv_Mst_NNT_Add(
			string strTid
			, string strGwUserCode
			, string strGwPassword
			, string strWAUserCode
			, string strWAUserPassword
			, string strAccessToken
			, ref ArrayList alParamsCoupleError
			////
			//// InosCreateUser
			, object objName_InosCreateUser
			, object objEmail_InosCreateUser
			, object objPassword_InosCreateUser
			, object objLanguage_InosCreateUser
			, object objTimeZone_InosCreateUser
			, object objVerificationCode_InosCreateUser
			//// InosCreateOrg
			, object objParentId_InosCreateOrg
			, object objName_InosCreateOrg
			, object objBizTypeId_InosCreateOrg
			, object objBizTypeName_InosCreateOrg
			, object objBizFieldId_InosCreateOrg
			, object objBizFieldName_InosCreateOrg
			, object objContactName_InosCreateOrg
			, object objEmail_InosCreateOrg
			, object objPhoneNo_InosCreateOrg
			, object objDescription_InosCreateOrg
			, object objEnable_InosCreateOrg
			//// RptSv
			, object objMST
			, object objNNTFullName
			, object objMSTParent
			, object objProvinceCode
			, object objDistrictCode
			//, object objNNTType
			, object objDLCode
			, object objNNTAddress
			, object objNNTMobile
			, object objNTTPhone
			, object objNNTFax
			, object objPresentBy
			, object objBusinessRegNo
			, object objNNTPosition
			, object objPresentIDNo
			, object objPresentIDType
			, object objGovTaxID
			, object objContactName
			, object objContactPhone
			, object objContactEmail
			, object objWebsite
			, object objCANumber
			, object objCAOrg
			, object objCAEffDTimeUTCStart
			, object objCAEffDTimeUTCEnd
			, object objPackageCode
			, object objCreatedDate
			, object objAccNo
			, object objAccHolder
			, object objBankName
			, object objBizType
			, object objBizFieldCode
			, object objBizSizeCode
			////
			, object objDepartmentCode
			////
			, object objUserPassword
			, object objUserPasswordRepeat
			//////
			//, object objQtyLicense
			////
			//, DataSet dsData
			////
			, Inos_LicOrder objInos_LicOrder
			////
			, ref RT_Mst_NNT objRT_Mst_NNT
			)
		{
			#region // Temp:
			DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
			//int nTidSeq = 0;
			DateTime dtimeSys = DateTime.UtcNow;
			string strFunctionName = "WA_Mst_NNT_Registry";
			string strErrorCodeDefault = TError.ErridnInventory.WA_Mst_NNT_Registry;
			alParamsCoupleError.AddRange(new object[]{
					"strFunctionName", strFunctionName
					, "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
			        ////
					, "objMST", objMST
					, "objNNTFullName", objNNTFullName
					, "objMSTParent", objMSTParent
					, "objProvinceCode", objProvinceCode
					, "objDistrictCode", objDistrictCode
                    //, "objNNTType", objNNTType
                    , "objDLCode", objDLCode
					, "objNNTAddress", objNNTAddress
					, "objNNTMobile", objNNTMobile
					//, "objNTTPhone", objNTTPhone
					//, "objNNTFax", objNNTFax
					//, "objPresentBy", objPresentBy
					//, "objBusinessRegNo", objBusinessRegNo
					//, "objNNTPosition", objNNTPosition
					//, "objPresentIDNo", objPresentIDNo
					//, "objPresentIDType", objPresentIDType
					//, "objGovTaxID", objGovTaxID
					, "objContactName", objContactName
					, "objContactPhone", objContactPhone
					, "objContactEmail", objContactEmail
					, "objWebsite", objWebsite
					, "objCANumber", objCANumber
					, "objCAOrg", objCAOrg
					, "objCAEffDTimeUTCStart", objCAEffDTimeUTCStart
					, "objCAEffDTimeUTCEnd", objCAEffDTimeUTCEnd
					, "objPackageCode", objPackageCode
					, "objAccNo", objAccNo
					, "objAccHolder", objAccHolder
					, "objBankName", objBankName
					, "objBankName", objBizType
					, "objBizFieldCode", objBizFieldCode
					, "objBizSizeCode", objBizSizeCode
                    /////
                    , "objDepartmentCode", objDepartmentCode
                    ////
                    , "objUserPassword", objUserPassword
					, "objUserPasswordRepeat", objUserPasswordRepeat
					////
					//, "objQtyLicense", objQtyLicense
					});
			#endregion

			try
			{
				#region // Init:
				//_cf.db.LogUserId = _cf.sinf.strUserCode;
				_cf.db.BeginTransaction();

				// Write RequestLog:
				_cf.ProcessBizReq_OutSide(
					strTid // strTid
					, strGwUserCode // strGwUserCode
					, strGwPassword // strGwPassword
					, strWAUserCode // objUserCode
					, strFunctionName // strFunctionName
					, alParamsCoupleError // alParamsCoupleError
					);

				//// rem lại do khong can dung user/pass để đăng ký NNT
				//// Sys_User_CheckAuthentication:
				//RptSv_Sys_User_CheckAuthentication(
				//	ref alParamsCoupleError
				//	, strWAUserCode
				//	, strWAUserPassword
				//	);

				//// Check Access/Deny:
				//Sys_Access_CheckDenyV30(
				//    ref alParamsCoupleError
				//    , strWAUserCode
				//    , strFunctionName
				//    );
				#endregion

				#region  // RptSv_Mst_NNT_AddX:
				RptSv_Mst_NNT_AddX(
					strTid
					, strGwUserCode
					, strGwPassword
					, strWAUserCode
					, strWAUserPassword
					, strAccessToken
					, ref mdsFinal
					, ref alParamsCoupleError
					//// InosCreateUser
					, objName_InosCreateUser
					, objEmail_InosCreateUser
					, objPassword_InosCreateUser
					, objLanguage_InosCreateUser
					, objTimeZone_InosCreateUser
					, objVerificationCode_InosCreateUser
					//// InosCreateOrg
					, objParentId_InosCreateOrg
					, objName_InosCreateOrg
					, objBizTypeId_InosCreateOrg
					, objBizTypeName_InosCreateOrg
					, objBizFieldId_InosCreateOrg
					, objBizFieldName_InosCreateOrg
					, objContactName_InosCreateOrg
					, objEmail_InosCreateOrg
					, objPhoneNo_InosCreateOrg
					, objDescription_InosCreateOrg
					, objEnable_InosCreateOrg
					//// RptSv
					, objMST
					, objNNTFullName
					, objMSTParent
					, objProvinceCode
					, objDistrictCode
					//, objNNTType
					, objDLCode
					, objNNTAddress
					, objNNTMobile
					, objNTTPhone
					, objNNTFax
					, objPresentBy
					, objBusinessRegNo
					, objNNTPosition
					, objPresentIDNo
					, objPresentIDType
					, objGovTaxID
					, objContactName
					, objContactPhone
					, objContactEmail
					, objWebsite
					, objCANumber
					, objCAOrg
					, objCAEffDTimeUTCStart
					, objCAEffDTimeUTCEnd
					, objPackageCode
					, objCreatedDate
					, objAccNo
					, objAccHolder
					, objBankName
					, objBizType
					, objBizFieldCode
					, objBizSizeCode
					////
					, objDepartmentCode
					////
					, objUserPassword
					, objUserPasswordRepeat
					//////
					//, objQtyLicense
					////
					//, DataSet dsData
					////
					, objInos_LicOrder
					////
					, ref objRT_Mst_NNT
					);
				////
				#endregion

				// Return Good:
				TDALUtils.DBUtils.CommitSafety(_cf.db);
				mdsFinal.AcceptChanges();
				return mdsFinal;
			}
			catch (Exception exc)
			{
				#region // Catch of try:
				// Rollback:
				TDALUtils.DBUtils.RollbackSafety(_cf.db);

				// Return Bad:
				return TUtils.CProcessExc.Process(
					ref mdsFinal
					, exc
					, strErrorCodeDefault
					, alParamsCoupleError.ToArray()
					);
				#endregion
			}
			finally
			{
				#region // Finally of try:
				// Rollback and Release resources:
				TDALUtils.DBUtils.RollbackSafety(_cf.db);
				TDALUtils.DBUtils.ReleaseAllSemaphore(_cf.db_Sys, true);

				// Write ReturnLog:
				_cf.ProcessBizReturn_OutSide(
					ref mdsFinal // mdsFinal
					, strTid // strTid
					, strGwUserCode // strGwUserCode
					, strGwPassword // strGwPassword
					, strWAUserCode // objUserCode
					, strFunctionName // strFunctionName
					);
				#endregion
			}
		}
		public DataSet RptSv_Mst_NNT_Calc(
			string strTid
			, string strGwUserCode
			, string strGwPassword
			, string strWAUserCode
			, string strWAUserPassword
			, string strAccessToken
			, ref ArrayList alParamsCoupleError
			////
			//// InosCreateUser
			, object objName_InosCreateUser
			, object objEmail_InosCreateUser
			, object objPassword_InosCreateUser
			, object objLanguage_InosCreateUser
			, object objTimeZone_InosCreateUser
			, object objVerificationCode_InosCreateUser
			//// InosCreateOrg
			, object objParentId_InosCreateOrg
			, object objName_InosCreateOrg
			, object objBizTypeId_InosCreateOrg
			, object objBizTypeName_InosCreateOrg
			, object objBizFieldId_InosCreateOrg
			, object objBizFieldName_InosCreateOrg
			, object objContactName_InosCreateOrg
			, object objEmail_InosCreateOrg
			, object objPhoneNo_InosCreateOrg
			, object objDescription_InosCreateOrg
			, object objEnable_InosCreateOrg
			//// RptSv
			, object objMST
			, object objNNTFullName
			, object objMSTParent
			, object objProvinceCode
			, object objDistrictCode
			//, object objNNTType
			, object objDLCode
			, object objNNTAddress
			, object objNNTMobile
			, object objNTTPhone
			, object objNNTFax
			, object objPresentBy
			, object objBusinessRegNo
			, object objNNTPosition
			, object objPresentIDNo
			, object objPresentIDType
			, object objGovTaxID
			, object objContactName
			, object objContactPhone
			, object objContactEmail
			, object objWebsite
			, object objCANumber
			, object objCAOrg
			, object objCAEffDTimeUTCStart
			, object objCAEffDTimeUTCEnd
			, object objPackageCode
			, object objCreatedDate
			, object objAccNo
			, object objAccHolder
			, object objBankName
			, object objBizType
			, object objBizFieldCode
			, object objBizSizeCode
			////
			, object objDepartmentCode
			////
			, object objUserPassword
			, object objUserPasswordRepeat
			//////
			//, object objQtyLicense
			////
			//, DataSet dsData
			////
			, Inos_LicOrder objInos_LicOrder
			////
			, ref RT_Mst_NNT objRT_Mst_NNT
			)
		{
			#region // Temp:
			DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
			//int nTidSeq = 0;
			DateTime dtimeSys = DateTime.UtcNow;
			string strFunctionName = "RptSv_Mst_NNT_Calc";
			string strErrorCodeDefault = TError.ErridnInventory.Mst_NNT_Calc;
			alParamsCoupleError.AddRange(new object[]{
					"strFunctionName", strFunctionName
					, "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
			        ////
					, "objMST", objMST
					, "objNNTFullName", objNNTFullName
					, "objMSTParent", objMSTParent
					, "objProvinceCode", objProvinceCode
					, "objDistrictCode", objDistrictCode
                    //, "objNNTType", objNNTType
                    , "objDLCode", objDLCode
					, "objNNTAddress", objNNTAddress
					, "objNNTMobile", objNNTMobile
					//, "objNTTPhone", objNTTPhone
					//, "objNNTFax", objNNTFax
					//, "objPresentBy", objPresentBy
					//, "objBusinessRegNo", objBusinessRegNo
					//, "objNNTPosition", objNNTPosition
					//, "objPresentIDNo", objPresentIDNo
					//, "objPresentIDType", objPresentIDType
					//, "objGovTaxID", objGovTaxID
					, "objContactName", objContactName
					, "objContactPhone", objContactPhone
					, "objContactEmail", objContactEmail
					, "objWebsite", objWebsite
					, "objCANumber", objCANumber
					, "objCAOrg", objCAOrg
					, "objCAEffDTimeUTCStart", objCAEffDTimeUTCStart
					, "objCAEffDTimeUTCEnd", objCAEffDTimeUTCEnd
					, "objPackageCode", objPackageCode
					, "objAccNo", objAccNo
					, "objAccHolder", objAccHolder
					, "objBankName", objBankName
					, "objBankName", objBizType
					, "objBizFieldCode", objBizFieldCode
					, "objBizSizeCode", objBizSizeCode
                    /////
                    , "objDepartmentCode", objDepartmentCode
                    ////
                    , "objUserPassword", objUserPassword
					, "objUserPasswordRepeat", objUserPasswordRepeat
					////
					//, "objQtyLicense", objQtyLicense
					});
			#endregion

			try
			{
				#region // Init:
				//_cf.db.LogUserId = _cf.sinf.strUserCode;
				_cf.db.BeginTransaction();

				// Write RequestLog:
				_cf.ProcessBizReq_OutSide(
					strTid // strTid
					, strGwUserCode // strGwUserCode
					, strGwPassword // strGwPassword
					, strWAUserCode // objUserCode
					, strFunctionName // strFunctionName
					, alParamsCoupleError // alParamsCoupleError
					);

				//// rem lại do khong can dung user/pass để đăng ký NNT
				//// Sys_User_CheckAuthentication:
				//RptSv_Sys_User_CheckAuthentication(
				//	ref alParamsCoupleError
				//	, strWAUserCode
				//	, strWAUserPassword
				//	);

				//// Check Access/Deny:
				//Sys_Access_CheckDenyV30(
				//    ref alParamsCoupleError
				//    , strWAUserCode
				//    , strFunctionName
				//    );
				#endregion

				#region  // RptSv_Mst_NNT_CalcX:
				RptSv_Mst_NNT_CalcX(
					strTid
					, strGwUserCode
					, strGwPassword
					, strWAUserCode
					, strWAUserPassword
					, strAccessToken
					, ref mdsFinal
					, ref alParamsCoupleError
					//// InosCreateUser
					, objName_InosCreateUser
					, objEmail_InosCreateUser
					, objPassword_InosCreateUser
					, objLanguage_InosCreateUser
					, objTimeZone_InosCreateUser
					, objVerificationCode_InosCreateUser
					//// InosCreateOrg
					, objParentId_InosCreateOrg
					, objName_InosCreateOrg
					, objBizTypeId_InosCreateOrg
					, objBizTypeName_InosCreateOrg
					, objBizFieldId_InosCreateOrg
					, objBizFieldName_InosCreateOrg
					, objContactName_InosCreateOrg
					, objEmail_InosCreateOrg
					, objPhoneNo_InosCreateOrg
					, objDescription_InosCreateOrg
					, objEnable_InosCreateOrg
					//// RptSv
					, objMST
					, objNNTFullName
					, objMSTParent
					, objProvinceCode
					, objDistrictCode
					//, objNNTType
					, objDLCode
					, objNNTAddress
					, objNNTMobile
					, objNTTPhone
					, objNNTFax
					, objPresentBy
					, objBusinessRegNo
					, objNNTPosition
					, objPresentIDNo
					, objPresentIDType
					, objGovTaxID
					, objContactName
					, objContactPhone
					, objContactEmail
					, objWebsite
					, objCANumber
					, objCAOrg
					, objCAEffDTimeUTCStart
					, objCAEffDTimeUTCEnd
					, objPackageCode
					, objCreatedDate
					, objAccNo
					, objAccHolder
					, objBankName
					, objBizType
					, objBizFieldCode
					, objBizSizeCode
					////
					, objDepartmentCode
					////
					, objUserPassword
					, objUserPasswordRepeat
					//////
					//, objQtyLicense
					////
					//, DataSet dsData
					////
					, objInos_LicOrder
					////
					, ref objRT_Mst_NNT
					);
				////
				#endregion

				// Return Good:
				TDALUtils.DBUtils.RollbackSafety(_cf.db);
				mdsFinal.AcceptChanges();
				return mdsFinal;
			}
			catch (Exception exc)
			{
				#region // Catch of try:
				// Rollback:
				TDALUtils.DBUtils.RollbackSafety(_cf.db);

				// Return Bad:
				return TUtils.CProcessExc.Process(
					ref mdsFinal
					, exc
					, strErrorCodeDefault
					, alParamsCoupleError.ToArray()
					);
				#endregion
			}
			finally
			{
				#region // Finally of try:
				// Rollback and Release resources:
				TDALUtils.DBUtils.RollbackSafety(_cf.db);
				TDALUtils.DBUtils.ReleaseAllSemaphore(_cf.db_Sys, true);

				// Write ReturnLog:
				_cf.ProcessBizReturn_OutSide(
					ref mdsFinal // mdsFinal
					, strTid // strTid
					, strGwUserCode // strGwUserCode
					, strGwPassword // strGwPassword
					, strWAUserCode // objUserCode
					, strFunctionName // strFunctionName
					);
				#endregion
			}
		}

		public DataSet RptSv_Mst_NNT_Calc_New20200208(
			string strTid
			, string strGwUserCode
			, string strGwPassword
			, string strWAUserCode
			, string strWAUserPassword
			, string strAccessToken
			, ref ArrayList alParamsCoupleError
			////
			//// InosCreateUser
			, object objName_InosCreateUser
			, object objEmail_InosCreateUser
			, object objPassword_InosCreateUser
			, object objLanguage_InosCreateUser
			, object objTimeZone_InosCreateUser
			, object objVerificationCode_InosCreateUser
			//// InosCreateOrg
			, object objParentId_InosCreateOrg
			, object objName_InosCreateOrg
			, object objBizTypeId_InosCreateOrg
			, object objBizTypeName_InosCreateOrg
			, object objBizFieldId_InosCreateOrg
			, object objBizFieldName_InosCreateOrg
			, object objContactName_InosCreateOrg
			, object objEmail_InosCreateOrg
			, object objPhoneNo_InosCreateOrg
			, object objDescription_InosCreateOrg
			, object objEnable_InosCreateOrg
			//// RptSv
			, object objMST
			, object objNNTFullName
			, object objMSTParent
			, object objProvinceCode
			, object objDistrictCode
			//, object objNNTType
			, object objDLCode
			, object objNNTAddress
			, object objNNTMobile
			, object objNTTPhone
			, object objNNTFax
			, object objPresentBy
			, object objBusinessRegNo
			, object objNNTPosition
			, object objPresentIDNo
			, object objPresentIDType
			, object objGovTaxID
			, object objContactName
			, object objContactPhone
			, object objContactEmail
			, object objWebsite
			, object objCANumber
			, object objCAOrg
			, object objCAEffDTimeUTCStart
			, object objCAEffDTimeUTCEnd
			, object objPackageCode
			, object objCreatedDate
			, object objAccNo
			, object objAccHolder
			, object objBankName
			, object objBizType
			, object objBizFieldCode
			, object objBizSizeCode
			, object objDealerType
			////
			, object objDepartmentCode
			////
			, object objUserPassword
			, object objUserPasswordRepeat
			//////
			//, object objQtyLicense
			////
			//, DataSet dsData
			////
			, Inos_LicOrder objInos_LicOrder
			////
			, ref RT_Mst_NNT objRT_Mst_NNT
			)
		{
			#region // Temp:
			DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
			//int nTidSeq = 0;
			DateTime dtimeSys = DateTime.UtcNow;
			string strFunctionName = "RptSv_Mst_NNT_Calc";
			string strErrorCodeDefault = TError.ErridnInventory.Mst_NNT_Calc;
			alParamsCoupleError.AddRange(new object[]{
					"strFunctionName", strFunctionName
					, "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
			        ////
					, "objMST", objMST
					, "objNNTFullName", objNNTFullName
					, "objMSTParent", objMSTParent
					, "objProvinceCode", objProvinceCode
					, "objDistrictCode", objDistrictCode
                    //, "objNNTType", objNNTType
                    , "objDLCode", objDLCode
					, "objNNTAddress", objNNTAddress
					, "objNNTMobile", objNNTMobile
					//, "objNTTPhone", objNTTPhone
					//, "objNNTFax", objNNTFax
					//, "objPresentBy", objPresentBy
					//, "objBusinessRegNo", objBusinessRegNo
					//, "objNNTPosition", objNNTPosition
					//, "objPresentIDNo", objPresentIDNo
					//, "objPresentIDType", objPresentIDType
					//, "objGovTaxID", objGovTaxID
					, "objContactName", objContactName
					, "objContactPhone", objContactPhone
					, "objContactEmail", objContactEmail
					, "objWebsite", objWebsite
					, "objCANumber", objCANumber
					, "objCAOrg", objCAOrg
					, "objCAEffDTimeUTCStart", objCAEffDTimeUTCStart
					, "objCAEffDTimeUTCEnd", objCAEffDTimeUTCEnd
					, "objPackageCode", objPackageCode
					, "objAccNo", objAccNo
					, "objAccHolder", objAccHolder
					, "objBankName", objBankName
					, "objBankName", objBizType
					, "objBizFieldCode", objBizFieldCode
					, "objBizSizeCode", objBizSizeCode
					, "objDealerType", objDealerType
                    /////
                    , "objDepartmentCode", objDepartmentCode
                    ////
                    , "objUserPassword", objUserPassword
					, "objUserPasswordRepeat", objUserPasswordRepeat
					////
					//, "objQtyLicense", objQtyLicense
					});
			#endregion

			try
			{
				#region // Init:
				//_cf.db.LogUserId = _cf.sinf.strUserCode;
				_cf.db.BeginTransaction();

				// Write RequestLog:
				_cf.ProcessBizReq_OutSide(
					strTid // strTid
					, strGwUserCode // strGwUserCode
					, strGwPassword // strGwPassword
					, strWAUserCode // objUserCode
					, strFunctionName // strFunctionName
					, alParamsCoupleError // alParamsCoupleError
					);

				//// rem lại do khong can dung user/pass để đăng ký NNT
				//// Sys_User_CheckAuthentication:
				//RptSv_Sys_User_CheckAuthentication(
				//	ref alParamsCoupleError
				//	, strWAUserCode
				//	, strWAUserPassword
				//	);

				//// Check Access/Deny:
				//Sys_Access_CheckDenyV30(
				//    ref alParamsCoupleError
				//    , strWAUserCode
				//    , strFunctionName
				//    );
				#endregion

				#region  // RptSv_Mst_NNT_CalcX:
				RptSv_Mst_NNT_CalcX_New20200208(
					strTid
					, strGwUserCode
					, strGwPassword
					, strWAUserCode
					, strWAUserPassword
					, strAccessToken
					, ref mdsFinal
					, ref alParamsCoupleError
					//// InosCreateUser
					, objName_InosCreateUser
					, objEmail_InosCreateUser
					, objPassword_InosCreateUser
					, objLanguage_InosCreateUser
					, objTimeZone_InosCreateUser
					, objVerificationCode_InosCreateUser
					//// InosCreateOrg
					, objParentId_InosCreateOrg
					, objName_InosCreateOrg
					, objBizTypeId_InosCreateOrg
					, objBizTypeName_InosCreateOrg
					, objBizFieldId_InosCreateOrg
					, objBizFieldName_InosCreateOrg
					, objContactName_InosCreateOrg
					, objEmail_InosCreateOrg
					, objPhoneNo_InosCreateOrg
					, objDescription_InosCreateOrg
					, objEnable_InosCreateOrg
					//// RptSv
					, objMST
					, objNNTFullName
					, objMSTParent
					, objProvinceCode
					, objDistrictCode
					//, objNNTType
					, objDLCode
					, objNNTAddress
					, objNNTMobile
					, objNTTPhone
					, objNNTFax
					, objPresentBy
					, objBusinessRegNo
					, objNNTPosition
					, objPresentIDNo
					, objPresentIDType
					, objGovTaxID
					, objContactName
					, objContactPhone
					, objContactEmail
					, objWebsite
					, objCANumber
					, objCAOrg
					, objCAEffDTimeUTCStart
					, objCAEffDTimeUTCEnd
					, objPackageCode
					, objCreatedDate
					, objAccNo
					, objAccHolder
					, objBankName
					, objBizType
					, objBizFieldCode
					, objBizSizeCode
					, objDealerType
					////
					, objDepartmentCode
					////
					, objUserPassword
					, objUserPasswordRepeat
					//////
					//, objQtyLicense
					////
					//, DataSet dsData
					////
					, objInos_LicOrder
					////
					, ref objRT_Mst_NNT
					);
				////
				#endregion

				// Return Good:
				TDALUtils.DBUtils.RollbackSafety(_cf.db);
				mdsFinal.AcceptChanges();
				return mdsFinal;
			}
			catch (Exception exc)
			{
				#region // Catch of try:
				// Rollback:
				TDALUtils.DBUtils.RollbackSafety(_cf.db);

				// Return Bad:
				return TUtils.CProcessExc.Process(
					ref mdsFinal
					, exc
					, strErrorCodeDefault
					, alParamsCoupleError.ToArray()
					);
				#endregion
			}
			finally
			{
				#region // Finally of try:
				// Rollback and Release resources:
				TDALUtils.DBUtils.RollbackSafety(_cf.db);
				TDALUtils.DBUtils.ReleaseAllSemaphore(_cf.db_Sys, true);

				// Write ReturnLog:
				_cf.ProcessBizReturn_OutSide(
					ref mdsFinal // mdsFinal
					, strTid // strTid
					, strGwUserCode // strGwUserCode
					, strGwPassword // strGwPassword
					, strWAUserCode // objUserCode
					, strFunctionName // strFunctionName
					);
				#endregion
			}
		}

		

		public DataSet RptSv_Mst_NNT_CalcByUserExist(
			string strTid
			, string strGwUserCode
			, string strGwPassword
			, string strWAUserCode
			, string strWAUserPassword
			, string strAccessToken
			, ref ArrayList alParamsCoupleError
			//// InosCreateOrg
			, object objParentId_InosCreateOrg
			, object objName_InosCreateOrg
			, object objBizTypeId_InosCreateOrg
			, object objBizTypeName_InosCreateOrg
			, object objBizFieldId_InosCreateOrg
			, object objBizFieldName_InosCreateOrg
			, object objContactName_InosCreateOrg
			, object objEmail_InosCreateOrg
			, object objPhoneNo_InosCreateOrg
			, object objDescription_InosCreateOrg
			, object objEnable_InosCreateOrg
			//// RptSv
			, object objMST
			, object objNNTFullName
			, object objMSTParent
			, object objProvinceCode
			, object objDistrictCode
			//, object objNNTType
			, object objDLCode
			, object objNNTAddress
			, object objNNTMobile
			, object objNTTPhone
			, object objNNTFax
			, object objPresentBy
			, object objBusinessRegNo
			, object objNNTPosition
			, object objPresentIDNo
			, object objPresentIDType
			, object objGovTaxID
			, object objContactName
			, object objContactPhone
			, object objContactEmail
			, object objWebsite
			, object objCANumber
			, object objCAOrg
			, object objCAEffDTimeUTCStart
			, object objCAEffDTimeUTCEnd
			, object objPackageCode
			, object objCreatedDate
			, object objAccNo
			, object objAccHolder
			, object objBankName
			, object objBizType
			, object objBizFieldCode
			, object objBizSizeCode
			////
			, object objDepartmentCode
			////
			, object objUserPassword
			, object objUserPasswordRepeat
			//////
			//, object objQtyLicense
			////
			//, DataSet dsData
			////
			, Inos_LicOrder objInos_LicOrder
			////
			, ref RT_Mst_NNT objRT_Mst_NNT
			)
		{
			#region // Temp:
			DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
			//int nTidSeq = 0;
			DateTime dtimeSys = DateTime.UtcNow;
			string strFunctionName = "RptSv_Mst_NNT_Calc";
			string strErrorCodeDefault = TError.ErridnInventory.Mst_NNT_Calc;
			alParamsCoupleError.AddRange(new object[]{
					"strFunctionName", strFunctionName
					, "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
			        ////
					, "objMST", objMST
					, "objNNTFullName", objNNTFullName
					, "objMSTParent", objMSTParent
					, "objProvinceCode", objProvinceCode
					, "objDistrictCode", objDistrictCode
                    //, "objNNTType", objNNTType
                    , "objDLCode", objDLCode
					, "objNNTAddress", objNNTAddress
					, "objNNTMobile", objNNTMobile
					, "objNTTPhone", objNTTPhone
					, "objNNTFax", objNNTFax
					, "objPresentBy", objPresentBy
					, "objBusinessRegNo", objBusinessRegNo
					, "objNNTPosition", objNNTPosition
					, "objPresentIDNo", objPresentIDNo
					, "objPresentIDType", objPresentIDType
					, "objGovTaxID", objGovTaxID
					, "objContactName", objContactName
					, "objContactPhone", objContactPhone
					, "objContactEmail", objContactEmail
					, "objWebsite", objWebsite
					, "objCANumber", objCANumber
					, "objCAOrg", objCAOrg
					, "objCAEffDTimeUTCStart", objCAEffDTimeUTCStart
					, "objCAEffDTimeUTCEnd", objCAEffDTimeUTCEnd
					, "objPackageCode", objPackageCode
					, "objAccNo", objAccNo
					, "objAccHolder", objAccHolder
					, "objBankName", objBankName
					, "objBankName", objBizType
					, "objBizFieldCode", objBizFieldCode
					, "objBizSizeCode", objBizSizeCode
                    /////
                    , "objDepartmentCode", objDepartmentCode
                    ////
                    , "objUserPassword", objUserPassword
					, "objUserPasswordRepeat", objUserPasswordRepeat
					////
					//, "objQtyLicense", objQtyLicense
					});
			#endregion

			try
			{
				#region // Init:
				//_cf.db.LogUserId = _cf.sinf.strUserCode;
				_cf.db.BeginTransaction();

				// Write RequestLog:
				_cf.ProcessBizReq_OutSide(
					strTid // strTid
					, strGwUserCode // strGwUserCode
					, strGwPassword // strGwPassword
					, strWAUserCode // objUserCode
					, strFunctionName // strFunctionName
					, alParamsCoupleError // alParamsCoupleError
					);

				//// rem lại do khong can dung user/pass để đăng ký NNT
				//// Sys_User_CheckAuthentication:
				//RptSv_Sys_User_CheckAuthentication(
				//	ref alParamsCoupleError
				//	, strWAUserCode
				//	, strWAUserPassword
				//	);

				//// Check Access/Deny:
				//Sys_Access_CheckDenyV30(
				//    ref alParamsCoupleError
				//    , strWAUserCode
				//    , strFunctionName
				//    );
				#endregion

				#region  // RptSv_Mst_NNT_CalcX:
				RptSv_Mst_NNT_CalcByUserExistX(
					strTid
					, strGwUserCode
					, strGwPassword
					, strWAUserCode
					, strWAUserPassword
					, strAccessToken
					, ref mdsFinal
					, ref alParamsCoupleError
					//// InosCreateOrg
					, objParentId_InosCreateOrg
					, objName_InosCreateOrg
					, objBizTypeId_InosCreateOrg
					, objBizTypeName_InosCreateOrg
					, objBizFieldId_InosCreateOrg
					, objBizFieldName_InosCreateOrg
					, objContactName_InosCreateOrg
					, objEmail_InosCreateOrg
					, objPhoneNo_InosCreateOrg
					, objDescription_InosCreateOrg
					, objEnable_InosCreateOrg
					//// RptSv
					, objMST
					, objNNTFullName
					, objMSTParent
					, objProvinceCode
					, objDistrictCode
					//, objNNTType
					, objDLCode
					, objNNTAddress
					, objNNTMobile
					, objNTTPhone
					, objNNTFax
					, objPresentBy
					, objBusinessRegNo
					, objNNTPosition
					, objPresentIDNo
					, objPresentIDType
					, objGovTaxID
					, objContactName
					, objContactPhone
					, objContactEmail
					, objWebsite
					, objCANumber
					, objCAOrg
					, objCAEffDTimeUTCStart
					, objCAEffDTimeUTCEnd
					, objPackageCode
					, objCreatedDate
					, objAccNo
					, objAccHolder
					, objBankName
					, objBizType
					, objBizFieldCode
					, objBizSizeCode
					////
					, objDepartmentCode
					////
					, objUserPassword
					, objUserPasswordRepeat
					//////
					//, objQtyLicense
					////
					//, DataSet dsData
					////
					, objInos_LicOrder
					////
					, ref objRT_Mst_NNT
					);
				////
				#endregion

				// Return Good:
				TDALUtils.DBUtils.RollbackSafety(_cf.db);
				mdsFinal.AcceptChanges();
				return mdsFinal;
			}
			catch (Exception exc)
			{
				#region // Catch of try:
				// Rollback:
				TDALUtils.DBUtils.RollbackSafety(_cf.db);

				// Return Bad:
				return TUtils.CProcessExc.Process(
					ref mdsFinal
					, exc
					, strErrorCodeDefault
					, alParamsCoupleError.ToArray()
					);
				#endregion
			}
			finally
			{
				#region // Finally of try:
				// Rollback and Release resources:
				TDALUtils.DBUtils.RollbackSafety(_cf.db);
				TDALUtils.DBUtils.ReleaseAllSemaphore(_cf.db_Sys, true);

				// Write ReturnLog:
				_cf.ProcessBizReturn_OutSide(
					ref mdsFinal // mdsFinal
					, strTid // strTid
					, strGwUserCode // strGwUserCode
					, strGwPassword // strGwPassword
					, strWAUserCode // objUserCode
					, strFunctionName // strFunctionName
					);
				#endregion
			}
		}

		public DataSet RptSv_Mst_NNT_CalcByUserExist_New20200208(
			string strTid
			, string strGwUserCode
			, string strGwPassword
			, string strWAUserCode
			, string strWAUserPassword
			, string strAccessToken
			, ref ArrayList alParamsCoupleError
			//// InosCreateOrg
			, object objParentId_InosCreateOrg
			, object objName_InosCreateOrg
			, object objBizTypeId_InosCreateOrg
			, object objBizTypeName_InosCreateOrg
			, object objBizFieldId_InosCreateOrg
			, object objBizFieldName_InosCreateOrg
			, object objContactName_InosCreateOrg
			, object objEmail_InosCreateOrg
			, object objPhoneNo_InosCreateOrg
			, object objDescription_InosCreateOrg
			, object objEnable_InosCreateOrg
			//// RptSv
			, object objMST
			, object objNNTFullName
			, object objMSTParent
			, object objProvinceCode
			, object objDistrictCode
			//, object objNNTType
			, object objDLCode
			, object objNNTAddress
			, object objNNTMobile
			, object objNTTPhone
			, object objNNTFax
			, object objPresentBy
			, object objBusinessRegNo
			, object objNNTPosition
			, object objPresentIDNo
			, object objPresentIDType
			, object objGovTaxID
			, object objContactName
			, object objContactPhone
			, object objContactEmail
			, object objWebsite
			, object objCANumber
			, object objCAOrg
			, object objCAEffDTimeUTCStart
			, object objCAEffDTimeUTCEnd
			, object objPackageCode
			, object objCreatedDate
			, object objAccNo
			, object objAccHolder
			, object objBankName
			, object objBizType
			, object objBizFieldCode
			, object objBizSizeCode
			, object objDealerType
			////
			, object objDepartmentCode
			////
			, object objUserPassword
			, object objUserPasswordRepeat
            , object objFlagIsCheckOrder
            //////
            //, object objQtyLicense
            ////
            //, DataSet dsData
            ////
            , Inos_LicOrder objInos_LicOrder
			////
			, ref RT_Mst_NNT objRT_Mst_NNT
			)
		{
			#region // Temp:
			DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
			//int nTidSeq = 0;
			DateTime dtimeSys = DateTime.UtcNow;
			string strFunctionName = "RptSv_Mst_NNT_Calc";
			string strErrorCodeDefault = TError.ErridnInventory.Mst_NNT_Calc;
			alParamsCoupleError.AddRange(new object[]{
					"strFunctionName", strFunctionName
					, "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
			        ////
					, "objMST", objMST
					, "objNNTFullName", objNNTFullName
					, "objMSTParent", objMSTParent
					, "objProvinceCode", objProvinceCode
					, "objDistrictCode", objDistrictCode
                    //, "objNNTType", objNNTType
                    , "objDLCode", objDLCode
					, "objNNTAddress", objNNTAddress
					, "objNNTMobile", objNNTMobile
					, "objNTTPhone", objNTTPhone
					, "objNNTFax", objNNTFax
					, "objPresentBy", objPresentBy
					, "objBusinessRegNo", objBusinessRegNo
					, "objNNTPosition", objNNTPosition
					, "objPresentIDNo", objPresentIDNo
					, "objPresentIDType", objPresentIDType
					, "objGovTaxID", objGovTaxID
					, "objContactName", objContactName
					, "objContactPhone", objContactPhone
					, "objContactEmail", objContactEmail
					, "objWebsite", objWebsite
					, "objCANumber", objCANumber
					, "objCAOrg", objCAOrg
					, "objCAEffDTimeUTCStart", objCAEffDTimeUTCStart
					, "objCAEffDTimeUTCEnd", objCAEffDTimeUTCEnd
					, "objPackageCode", objPackageCode
					, "objAccNo", objAccNo
					, "objAccHolder", objAccHolder
					, "objBankName", objBankName
					, "objBankName", objBizType
					, "objBizFieldCode", objBizFieldCode
					, "objBizSizeCode", objBizSizeCode
					, "objDealerType", objDealerType
                    /////
                    , "objDepartmentCode", objDepartmentCode
                    ////
                    , "objUserPassword", objUserPassword
					, "objUserPasswordRepeat", objUserPasswordRepeat
					////
					//, "objQtyLicense", objQtyLicense
					});
			#endregion

			try
			{
				#region // Init:
				//_cf.db.LogUserId = _cf.sinf.strUserCode;
				_cf.db.BeginTransaction();

				// Write RequestLog:
				_cf.ProcessBizReq_OutSide(
					strTid // strTid
					, strGwUserCode // strGwUserCode
					, strGwPassword // strGwPassword
					, strWAUserCode // objUserCode
					, strFunctionName // strFunctionName
					, alParamsCoupleError // alParamsCoupleError
					);

				//// rem lại do khong can dung user/pass để đăng ký NNT
				//// Sys_User_CheckAuthentication:
				//RptSv_Sys_User_CheckAuthentication(
				//	ref alParamsCoupleError
				//	, strWAUserCode
				//	, strWAUserPassword
				//	);

				//// Check Access/Deny:
				//Sys_Access_CheckDenyV30(
				//    ref alParamsCoupleError
				//    , strWAUserCode
				//    , strFunctionName
				//    );
				#endregion

				#region  // RptSv_Mst_NNT_CalcX:
				RptSv_Mst_NNT_CalcByUserExistX_New20200208(
					strTid
					, strGwUserCode
					, strGwPassword
					, strWAUserCode
					, strWAUserPassword
					, strAccessToken
					, ref mdsFinal
					, ref alParamsCoupleError
					//// InosCreateOrg
					, objParentId_InosCreateOrg
					, objName_InosCreateOrg
					, objBizTypeId_InosCreateOrg
					, objBizTypeName_InosCreateOrg
					, objBizFieldId_InosCreateOrg
					, objBizFieldName_InosCreateOrg
					, objContactName_InosCreateOrg
					, objEmail_InosCreateOrg
					, objPhoneNo_InosCreateOrg
					, objDescription_InosCreateOrg
					, objEnable_InosCreateOrg
					//// RptSv
					, objMST
					, objNNTFullName
					, objMSTParent
					, objProvinceCode
					, objDistrictCode
					//, objNNTType
					, objDLCode
					, objNNTAddress
					, objNNTMobile
					, objNTTPhone
					, objNNTFax
					, objPresentBy
					, objBusinessRegNo
					, objNNTPosition
					, objPresentIDNo
					, objPresentIDType
					, objGovTaxID
					, objContactName
					, objContactPhone
					, objContactEmail
					, objWebsite
					, objCANumber
					, objCAOrg
					, objCAEffDTimeUTCStart
					, objCAEffDTimeUTCEnd
					, objPackageCode
					, objCreatedDate
					, objAccNo
					, objAccHolder
					, objBankName
					, objBizType
					, objBizFieldCode
					, objBizSizeCode
					, objDealerType
					////
					, objDepartmentCode
					////
					, objUserPassword
					, objUserPasswordRepeat
                    , objFlagIsCheckOrder
                    //////
                    //, objQtyLicense
                    ////
                    //, DataSet dsData
                    ////
                    , objInos_LicOrder
					////
					, ref objRT_Mst_NNT
					);
				////
				#endregion

				// Return Good:
				TDALUtils.DBUtils.RollbackSafety(_cf.db);
				mdsFinal.AcceptChanges();
				return mdsFinal;
			}
			catch (Exception exc)
			{
				#region // Catch of try:
				// Rollback:
				TDALUtils.DBUtils.RollbackSafety(_cf.db);

				// Return Bad:
				return TUtils.CProcessExc.Process(
					ref mdsFinal
					, exc
					, strErrorCodeDefault
					, alParamsCoupleError.ToArray()
					);
				#endregion
			}
			finally
			{
				#region // Finally of try:
				// Rollback and Release resources:
				TDALUtils.DBUtils.RollbackSafety(_cf.db);
				TDALUtils.DBUtils.ReleaseAllSemaphore(_cf.db_Sys, true);

				// Write ReturnLog:
				_cf.ProcessBizReturn_OutSide(
					ref mdsFinal // mdsFinal
					, strTid // strTid
					, strGwUserCode // strGwUserCode
					, strGwPassword // strGwPassword
					, strWAUserCode // objUserCode
					, strFunctionName // strFunctionName
					);
				#endregion
			}
		}

		public DataSet RptSv_Mst_NNT_AddByUserExist(
			string strTid
			, string strGwUserCode
			, string strGwPassword
			, string strWAUserCode
			, string strWAUserPassword
			, string strAccessToken
			, ref ArrayList alParamsCoupleError
			//// InosCreateOrg
			, object objId_InosCreateOrg
			, object objParentId_InosCreateOrg
			, object objName_InosCreateOrg
			, object objBizTypeId_InosCreateOrg
			, object objBizTypeName_InosCreateOrg
			, object objBizFieldId_InosCreateOrg
			, object objBizFieldName_InosCreateOrg
			, object objContactName_InosCreateOrg
			, object objEmail_InosCreateOrg
			, object objPhoneNo_InosCreateOrg
			, object objDescription_InosCreateOrg
			, object objEnable_InosCreateOrg
			//// RptSv
			, object objMST
			, object objNNTFullName
			, object objMSTParent
			, object objProvinceCode
			, object objDistrictCode
			//, object objNNTType
			, object objDLCode
			, object objNNTAddress
			, object objNNTMobile
			, object objNTTPhone
			, object objNNTFax
			, object objPresentBy
			, object objBusinessRegNo
			, object objNNTPosition
			, object objPresentIDNo
			, object objPresentIDType
			, object objGovTaxID
			, object objContactName
			, object objContactPhone
			, object objContactEmail
			, object objWebsite
			, object objCANumber
			, object objCAOrg
			, object objCAEffDTimeUTCStart
			, object objCAEffDTimeUTCEnd
			, object objPackageCode
			, object objCreatedDate
			, object objAccNo
			, object objAccHolder
			, object objBankName
			, object objBizType
			, object objBizFieldCode
			, object objBizSizeCode
			////
			, object objDepartmentCode
			////
			, object objUserPassword
			, object objUserPasswordRepeat
			//////
			//, object objQtyLicense
			////
			//, DataSet dsData
			////
			, Inos_LicOrder objInos_LicOrder
			////
			, ref RT_Mst_NNT objRT_Mst_NNT
			)
		{
			#region // Temp:
			DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
			//int nTidSeq = 0;
			DateTime dtimeSys = DateTime.UtcNow;
			string strFunctionName = "RptSv_Mst_NNT_AddByUserExist";
			string strErrorCodeDefault = TError.ErridnInventory.WA_Mst_NNT_Registry;
			alParamsCoupleError.AddRange(new object[]{
					"strFunctionName", strFunctionName
					, "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
			        ////
					, "objMST", objMST
					, "objNNTFullName", objNNTFullName
					, "objMSTParent", objMSTParent
					, "objProvinceCode", objProvinceCode
					, "objDistrictCode", objDistrictCode
                    //, "objNNTType", objNNTType
                    , "objDLCode", objDLCode
					, "objNNTAddress", objNNTAddress
					, "objNNTMobile", objNNTMobile
					, "objNTTPhone", objNTTPhone
					, "objNNTFax", objNNTFax
					, "objPresentBy", objPresentBy
					, "objBusinessRegNo", objBusinessRegNo
					, "objNNTPosition", objNNTPosition
					, "objPresentIDNo", objPresentIDNo
					, "objPresentIDType", objPresentIDType
					, "objGovTaxID", objGovTaxID
					, "objContactName", objContactName
					, "objContactPhone", objContactPhone
					, "objContactEmail", objContactEmail
					, "objWebsite", objWebsite
					, "objCANumber", objCANumber
					, "objCAOrg", objCAOrg
					, "objCAEffDTimeUTCStart", objCAEffDTimeUTCStart
					, "objCAEffDTimeUTCEnd", objCAEffDTimeUTCEnd
					, "objPackageCode", objPackageCode
					, "objAccNo", objAccNo
					, "objAccHolder", objAccHolder
					, "objBankName", objBankName
					, "objBankName", objBizType
					, "objBizFieldCode", objBizFieldCode
					, "objBizSizeCode", objBizSizeCode
                    /////
                    , "objDepartmentCode", objDepartmentCode
                    ////
                    , "objUserPassword", objUserPassword
					, "objUserPasswordRepeat", objUserPasswordRepeat
					////
					//, "objQtyLicense", objQtyLicense
					});
			#endregion

			try
			{
				#region // Init:
				//_cf.db.LogUserId = _cf.sinf.strUserCode;
				_cf.db.BeginTransaction();

				// Write RequestLog:
				_cf.ProcessBizReq_OutSide(
					strTid // strTid
					, strGwUserCode // strGwUserCode
					, strGwPassword // strGwPassword
					, strWAUserCode // objUserCode
					, strFunctionName // strFunctionName
					, alParamsCoupleError // alParamsCoupleError
					);

				//// rem lại do khong can dung user/pass để đăng ký NNT
				//// Sys_User_CheckAuthentication:
				//RptSv_Sys_User_CheckAuthentication(
				//	ref alParamsCoupleError
				//	, strWAUserCode
				//	, strWAUserPassword
				//	);

				//// Check Access/Deny:
				//Sys_Access_CheckDenyV30(
				//    ref alParamsCoupleError
				//    , strWAUserCode
				//    , strFunctionName
				//    );
				#endregion

				#region  // RptSv_Mst_NNT_AddX:
				RptSv_Mst_NNT_AddByUserExistX(
					strTid
					, strGwUserCode
					, strGwPassword
					, strWAUserCode
					, strWAUserPassword
					, strAccessToken
					, ref mdsFinal
					, ref alParamsCoupleError
					//// InosCreateOrg
					, objId_InosCreateOrg
					, objParentId_InosCreateOrg
					, objName_InosCreateOrg
					, objBizTypeId_InosCreateOrg
					, objBizTypeName_InosCreateOrg
					, objBizFieldId_InosCreateOrg
					, objBizFieldName_InosCreateOrg
					, objContactName_InosCreateOrg
					, objEmail_InosCreateOrg
					, objPhoneNo_InosCreateOrg
					, objDescription_InosCreateOrg
					, objEnable_InosCreateOrg
					//// RptSv
					, objMST
					, objNNTFullName
					, objMSTParent
					, objProvinceCode
					, objDistrictCode
					//, objNNTType
					, objDLCode
					, objNNTAddress
					, objNNTMobile
					, objNTTPhone
					, objNNTFax
					, objPresentBy
					, objBusinessRegNo
					, objNNTPosition
					, objPresentIDNo
					, objPresentIDType
					, objGovTaxID
					, objContactName
					, objContactPhone
					, objContactEmail
					, objWebsite
					, objCANumber
					, objCAOrg
					, objCAEffDTimeUTCStart
					, objCAEffDTimeUTCEnd
					, objPackageCode
					, objCreatedDate
					, objAccNo
					, objAccHolder
					, objBankName
					, objBizType
					, objBizFieldCode
					, objBizSizeCode
					////
					, objDepartmentCode
					////
					, objUserPassword
					, objUserPasswordRepeat
					//////
					//, objQtyLicense
					////
					//, DataSet dsData
					////
					, objInos_LicOrder
					////
					, ref objRT_Mst_NNT
					);
				////
				#endregion

				// Return Good:
				TDALUtils.DBUtils.CommitSafety(_cf.db);
				mdsFinal.AcceptChanges();
				return mdsFinal;
			}
			catch (Exception exc)
			{
				#region // Catch of try:
				// Rollback:
				TDALUtils.DBUtils.RollbackSafety(_cf.db);

				// Return Bad:
				return TUtils.CProcessExc.Process(
					ref mdsFinal
					, exc
					, strErrorCodeDefault
					, alParamsCoupleError.ToArray()
					);
				#endregion
			}
			finally
			{
				#region // Finally of try:
				// Rollback and Release resources:
				TDALUtils.DBUtils.RollbackSafety(_cf.db);
				TDALUtils.DBUtils.ReleaseAllSemaphore(_cf.db_Sys, true);

				// Write ReturnLog:
				_cf.ProcessBizReturn_OutSide(
					ref mdsFinal // mdsFinal
					, strTid // strTid
					, strGwUserCode // strGwUserCode
					, strGwPassword // strGwPassword
					, strWAUserCode // objUserCode
					, strFunctionName // strFunctionName
					);
				#endregion
			}
		}

		public DataSet RptSv_Mst_NNT_AddByUserExist_New20200207(
			string strTid
			, string strGwUserCode
			, string strGwPassword
			, string strWAUserCode
			, string strWAUserPassword
			, string strAccessToken
			, ref ArrayList alParamsCoupleError
			//// InosCreateOrg
			, object objId_InosCreateOrg
			, object objParentId_InosCreateOrg
			, object objName_InosCreateOrg
			, object objBizTypeId_InosCreateOrg
			, object objBizTypeName_InosCreateOrg
			, object objBizFieldId_InosCreateOrg
			, object objBizFieldName_InosCreateOrg
			, object objContactName_InosCreateOrg
			, object objEmail_InosCreateOrg
			, object objPhoneNo_InosCreateOrg
			, object objDescription_InosCreateOrg
			, object objEnable_InosCreateOrg
            , object objEmail_InosUser
            //// RptSv
            , object objMST
			, object objNNTFullName
			, object objMSTParent
			, object objProvinceCode
			, object objDistrictCode
			//, object objNNTType
			, object objDLCode
			, object objNNTAddress
			, object objNNTMobile
			, object objNTTPhone
			, object objNNTFax
			, object objPresentBy
			, object objBusinessRegNo
			, object objNNTPosition
			, object objPresentIDNo
			, object objPresentIDType
			, object objGovTaxID
			, object objContactName
			, object objContactPhone
			, object objContactEmail
			, object objWebsite
			, object objCANumber
			, object objCAOrg
			, object objCAEffDTimeUTCStart
			, object objCAEffDTimeUTCEnd
			, object objPackageCode
			, object objCreatedDate
			, object objAccNo
			, object objAccHolder
			, object objBankName
			, object objBizType
			, object objBizFieldCode
			, object objBizSizeCode
			, object objDealerType
			////
			, object objDepartmentCode
			////
			, object objUserPassword
			, object objUserPasswordRepeat
			//////
			//, object objQtyLicense
			////
			//, DataSet dsData
			////
			, Inos_LicOrder objInos_LicOrder
			////
			, ref RT_Mst_NNT objRT_Mst_NNT
			////
			, object objFlagIsCreateOrder
			)
		{
			#region // Temp:
			DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
			//int nTidSeq = 0;
			DateTime dtimeSys = DateTime.UtcNow;
			string strFunctionName = "RptSv_Mst_NNT_AddByUserExist";
			string strErrorCodeDefault = TError.ErridnInventory.WA_Mst_NNT_Registry;
			alParamsCoupleError.AddRange(new object[]{
					"strFunctionName", strFunctionName
					, "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
			        ////
					, "objMST", objMST
					, "objNNTFullName", objNNTFullName
					, "objMSTParent", objMSTParent
					, "objProvinceCode", objProvinceCode
					, "objDistrictCode", objDistrictCode
                    //, "objNNTType", objNNTType
                    , "objDLCode", objDLCode
					, "objNNTAddress", objNNTAddress
					, "objNNTMobile", objNNTMobile
					, "objNTTPhone", objNTTPhone
					, "objNNTFax", objNNTFax
					, "objPresentBy", objPresentBy
					, "objBusinessRegNo", objBusinessRegNo
					, "objNNTPosition", objNNTPosition
					, "objPresentIDNo", objPresentIDNo
					, "objPresentIDType", objPresentIDType
					, "objGovTaxID", objGovTaxID
					, "objContactName", objContactName
					, "objContactPhone", objContactPhone
					, "objContactEmail", objContactEmail
					, "objWebsite", objWebsite
					, "objCANumber", objCANumber
					, "objCAOrg", objCAOrg
					, "objCAEffDTimeUTCStart", objCAEffDTimeUTCStart
					, "objCAEffDTimeUTCEnd", objCAEffDTimeUTCEnd
					, "objPackageCode", objPackageCode
					, "objAccNo", objAccNo
					, "objAccHolder", objAccHolder
					, "objBankName", objBankName
					, "objBankName", objBizType
					, "objBizFieldCode", objBizFieldCode
					, "objBizSizeCode", objBizSizeCode
                    /////
                    , "objDepartmentCode", objDepartmentCode
                    ////
                    , "objUserPassword", objUserPassword
					, "objUserPasswordRepeat", objUserPasswordRepeat
					////
					//, "objQtyLicense", objQtyLicense
					});
			#endregion

			try
			{
				#region // Init:
				//_cf.db.LogUserId = _cf.sinf.strUserCode;
				_cf.db.BeginTransaction();

				// Write RequestLog:
				_cf.ProcessBizReq_OutSide(
					strTid // strTid
					, strGwUserCode // strGwUserCode
					, strGwPassword // strGwPassword
					, strWAUserCode // objUserCode
					, strFunctionName // strFunctionName
					, alParamsCoupleError // alParamsCoupleError
					);

				//// rem lại do khong can dung user/pass để đăng ký NNT
				//// Sys_User_CheckAuthentication:
				//RptSv_Sys_User_CheckAuthentication(
				//	ref alParamsCoupleError
				//	, strWAUserCode
				//	, strWAUserPassword
				//	);

				//// Check Access/Deny:
				//Sys_Access_CheckDenyV30(
				//    ref alParamsCoupleError
				//    , strWAUserCode
				//    , strFunctionName
				//    );
				#endregion

				#region  // RptSv_Mst_NNT_AddX:
				RptSv_Mst_NNT_AddByUserExistX_New20200207(
					strTid
					, strGwUserCode
					, strGwPassword
					, strWAUserCode
					, strWAUserPassword
					, strAccessToken
					, ref mdsFinal
					, ref alParamsCoupleError
					//// InosCreateOrg
					, objId_InosCreateOrg
					, objParentId_InosCreateOrg
					, objName_InosCreateOrg
					, objBizTypeId_InosCreateOrg
					, objBizTypeName_InosCreateOrg
					, objBizFieldId_InosCreateOrg
					, objBizFieldName_InosCreateOrg
					, objContactName_InosCreateOrg
					, objEmail_InosCreateOrg
					, objPhoneNo_InosCreateOrg
					, objDescription_InosCreateOrg
					, objEnable_InosCreateOrg
                    , objEmail_InosUser
                    //// RptSv
                    , objMST
					, objNNTFullName
					, objMSTParent
					, objProvinceCode
					, objDistrictCode
					//, objNNTType
					, objDLCode
					, objNNTAddress
					, objNNTMobile
					, objNTTPhone
					, objNNTFax
					, objPresentBy
					, objBusinessRegNo
					, objNNTPosition
					, objPresentIDNo
					, objPresentIDType
					, objGovTaxID
					, objContactName
					, objContactPhone
					, objContactEmail
					, objWebsite
					, objCANumber
					, objCAOrg
					, objCAEffDTimeUTCStart
					, objCAEffDTimeUTCEnd
					, objPackageCode
					, objCreatedDate
					, objAccNo
					, objAccHolder
					, objBankName
					, objBizType
					, objBizFieldCode
					, objBizSizeCode
					, objDealerType
					////
					, objDepartmentCode
					////
					, objUserPassword
					, objUserPasswordRepeat
					//////
					//, objQtyLicense
					////
					//, DataSet dsData
					////
					, objInos_LicOrder
					////
					, ref objRT_Mst_NNT
					////
					, objFlagIsCreateOrder
					);
				////
				#endregion

				// Return Good:
				TDALUtils.DBUtils.CommitSafety(_cf.db);
				mdsFinal.AcceptChanges();
				return mdsFinal;
			}
			catch (Exception exc)
			{
				#region // Catch of try:
				// Rollback:
				TDALUtils.DBUtils.RollbackSafety(_cf.db);

				// Return Bad:
				return TUtils.CProcessExc.Process(
					ref mdsFinal
					, exc
					, strErrorCodeDefault
					, alParamsCoupleError.ToArray()
					);
				#endregion
			}
			finally
			{
				#region // Finally of try:
				// Rollback and Release resources:
				TDALUtils.DBUtils.RollbackSafety(_cf.db);
				TDALUtils.DBUtils.ReleaseAllSemaphore(_cf.db_Sys, true);

				// Write ReturnLog:
				_cf.ProcessBizReturn_OutSide(
					ref mdsFinal // mdsFinal
					, strTid // strTid
					, strGwUserCode // strGwUserCode
					, strGwPassword // strGwPassword
					, strWAUserCode // objUserCode
					, strFunctionName // strFunctionName
					);
				#endregion
			}
		}

		private void RptSv_Mst_NNT_CalcByUserExistX(
			string strTid
			, string strGwUserCode
			, string strGwPassword
			, string strWAUserCode
			, string strWAUserPassword
			, string strAccessToken
			, ref DataSet mdsFinal
			, ref ArrayList alParamsCoupleError
			//// InosCreateOrg
			, object objParentId_InosCreateOrg
			, object objName_InosCreateOrg
			, object objBizTypeId_InosCreateOrg
			, object objBizTypeName_InosCreateOrg
			, object objBizFieldId_InosCreateOrg
			, object objBizFieldName_InosCreateOrg
			, object objContactName_InosCreateOrg
			, object objEmail_InosCreateOrg
			, object objPhoneNo_InosCreateOrg
			, object objDescription_InosCreateOrg
			, object objEnable_InosCreateOrg
			//// RptSv
			, object objMST
			, object objNNTFullName
			, object objMSTParent
			, object objProvinceCode
			, object objDistrictCode
			//, object objNNTType
			, object objDLCode
			, object objNNTAddress
			, object objNNTMobile
			, object objNTTPhone
			, object objNNTFax
			, object objPresentBy
			, object objBusinessRegNo
			, object objNNTPosition
			, object objPresentIDNo
			, object objPresentIDType
			, object objGovTaxID
			, object objContactName
			, object objContactPhone
			, object objContactEmail
			, object objWebsite
			, object objCANumber
			, object objCAOrg
			, object objCAEffDTimeUTCStart
			, object objCAEffDTimeUTCEnd
			, object objPackageCode
			, object objCreatedDate
			, object objAccNo
			, object objAccHolder
			, object objBankName
			, object objBizType
			, object objBizFieldCode
			, object objBizSizeCode
			////
			, object objDepartmentCode
			////
			, object objUserPassword
			, object objUserPasswordRepeat
			//////
			//, object objQtyLicense
			////
			//, DataSet dsData
			//// InosCreateOrder
			, Inos_LicOrder objInos_LicOrder
			////
			, ref RT_Mst_NNT objRT_Mst_NNT
			)
		{
			#region // Temp:
			//DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
			//int nTidSeq = 0;
			DateTime dtimeSys = DateTime.UtcNow;
			string strFunctionName = "RptSv_Mst_NNT_CalcByUserExistX";
			//string strErrorCodeDefault = TError.ErridnInventory.WA_Mst_NNT_Registry;
			alParamsCoupleError.AddRange(new object[]{
					"strFunctionName", strFunctionName
					, "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
			        ////
					, "objMST", objMST
					, "objNNTFullName", objNNTFullName
					, "objMSTParent", objMSTParent
					, "objProvinceCode", objProvinceCode
					, "objDistrictCode", objDistrictCode
                    //, "objNNTType", objNNTType
                    , "objDLCode", objDLCode
					, "objNNTAddress", objNNTAddress
					, "objNNTMobile", objNNTMobile
					, "objNTTPhone", objNTTPhone
					, "objNNTFax", objNNTFax
					, "objPresentBy", objPresentBy
					, "objBusinessRegNo", objBusinessRegNo
					, "objNNTPosition", objNNTPosition
					, "objPresentIDNo", objPresentIDNo
					, "objPresentIDType", objPresentIDType
					, "objGovTaxID", objGovTaxID
					, "objContactName", objContactName
					, "objContactPhone", objContactPhone
					, "objContactEmail", objContactEmail
					, "objWebsite", objWebsite
					, "objCANumber", objCANumber
					, "objCAOrg", objCAOrg
					, "objCAEffDTimeUTCStart", objCAEffDTimeUTCStart
					, "objCAEffDTimeUTCEnd", objCAEffDTimeUTCEnd
					, "objPackageCode", objPackageCode
					, "objAccNo", objAccNo
					, "objAccHolder", objAccHolder
					, "objBankName", objBankName
					, "objBankName", objBizType
					, "objBizFieldCode", objBizFieldCode
					, "objBizSizeCode", objBizSizeCode
                    /////
                    , "objDepartmentCode", objDepartmentCode
                    ////
                    , "objUserPassword", objUserPassword
					, "objUserPasswordRepeat", objUserPasswordRepeat
					////
					//, "objQtyLicense", objQtyLicense
					});
			#endregion

			#region // Refine and Check Input:
			//bool bFlagInosCreateUser = false;
			bool bFlagInosCreateOrg = false;
			bool bFlagRptSvMstNNtAdd = false;
			bool bFlagInosCreateOrder = false;
			#endregion

			#region // Calc InosCreateUser:
			{
				//OSiNOSSv.AccountService objAccountService = new OSiNOSSv.AccountService(null);
				//InosUser dummy = new InosUser();
				//dummy.Email = Convert.ToString(objContactEmail);

				//InosUser inosUser = objAccountService.GetUser(dummy);

				//if (inosUser == null) bFlagInosCreateUser = true;

				//if (!bFlagInosCreateUser)
				//{
				//	//alParamsCoupleError.AddRange(new object[]{
				//	//		"Check.TableName", strTableCheck
				//	//		});
				//	throw CmUtils.CMyException.Raise(
				//		TError.ErridnInventory.Mst_NNT_Calc_InvalidInosCreateUser
				//		, null
				//		, alParamsCoupleError.ToArray()
				//		);
				//}
			}
			#endregion

			#region // Calc InosCreateOrg:
			{
				////
				bFlagInosCreateOrg = true;

				if (!bFlagInosCreateOrg)
				{
					//alParamsCoupleError.AddRange(new object[]{
					//		"Check.TableName", strTableCheck
					//		});
					throw CmUtils.CMyException.Raise(
						TError.ErridnInventory.Mst_NNT_Calc_InvalidInosCreateOrg
						, null
						, alParamsCoupleError.ToArray()
						);
				}
			}
			#endregion

			#region // Save RptSvMstNNtAdd:
			////
			DataTable dt_Lst_MstSv_Inos_User = TDALUtils.DBUtils.GetSchema(_cf.db, "MstSv_Inos_User").Tables[0];
			DataTable dt_Lst_MstSv_Inos_Org = TDALUtils.DBUtils.GetSchema(_cf.db, "MstSv_Inos_Org").Tables[0];
			{
				DataSet dsData = new DataSet();
				CmUtils.DataUtils.MoveDataTable(ref dsData, ref dt_Lst_MstSv_Inos_User);
				CmUtils.DataUtils.MoveDataTable(ref dsData, ref dt_Lst_MstSv_Inos_Org);
				//dsData.Tables.Add(dt_Lst_MstSv_Inos_User);
				//dsData.Tables.Add(dt_Lst_MstSv_Inos_Org);

				RptSv_Mst_NNT_RegisterX(
					strTid // strTid
					, strGwUserCode // strGwUserCode
					, strGwPassword // strGwPassword
					, strWAUserCode // strWAUserCode
					, strWAUserPassword // strWAUserPassword
					, strAccessToken // strAccessToken
					, ref mdsFinal // mdsFinal
					, ref alParamsCoupleError // alParamsCoupleError
											  ////
					, objMST // objMST
					, objNNTFullName // objNNTFullName
					, objMSTParent // objMSTParent
					, objProvinceCode // objProvinceCode
					, objDistrictCode // objDistrictCode
									  //, objNNTType
					, objDLCode // objDLCode
					, objNNTAddress // objNNTAddress
					, objNNTMobile // objNNTMobile
					, objNTTPhone // objNTTPhone
					, objNNTFax // objNNTFax
					, objPresentBy // objPresentBy
					, objBusinessRegNo // objBusinessRegNo
					, objNNTPosition // objNNTPosition
					, objPresentIDNo // objPresentIDNo
					, objPresentIDType // objPresentIDType
					, objGovTaxID // objGovTaxID
					, objContactName // objContactName
					, objContactPhone // objContactPhone
					, objContactEmail // objContactEmail
					, objWebsite // objWebsite
					, objCANumber // objCANumber
					, objCAOrg // objCAOrg
					, objCAEffDTimeUTCStart // objCAEffDTimeUTCStart
					, objCAEffDTimeUTCEnd // objCAEffDTimeUTCEnd
					, objPackageCode // objPackageCode
					, objCreatedDate // objCreatedDate
					, objAccNo // objAccNo
					, objAccHolder // objAccHolder
					, objBankName // objBankName
					, objBizType // objBizType
					, objBizFieldCode // objBizFieldCode
					, objBizSizeCode // objBizSizeCode
									////
					, objDepartmentCode // objDepartmentCode
										////
					, objUserPassword // objUserPassword
					, objUserPasswordRepeat // objUserPasswordRepeat
											//////
											//, objQtyLicense
											////
					, dsData // dsData
					);

				bFlagRptSvMstNNtAdd = true;

				if (!bFlagRptSvMstNNtAdd)
				{
					//alParamsCoupleError.AddRange(new object[]{
					//		"Check.TableName", strTableCheck
					//		});
					throw CmUtils.CMyException.Raise(
						TError.ErridnInventory.Mst_NNT_Calc_InvalidRptSvMstNNtAdd
						, null
						, alParamsCoupleError.ToArray()
						);
				}
			}
			#endregion

			#region // Calc InosCreateOrder:
			{
				////
				if (objInos_LicOrder.DiscountCode != null)
				{
					////
					Inos_DiscountCode objInos_DiscountCode = Inos_OrderService_GetDiscountCodeX(
						strTid // strTid
						, strGwUserCode // strGwUserCode
						, strGwPassword // strGwPassword
						, strWAUserCode // strWAUserCode
						, strWAUserPassword // strWAUserPassword
						, strAccessToken // strAccessToken
						, ref alParamsCoupleError // alParamsCoupleError
						, dtimeSys // dtimeSys
						, objInos_LicOrder.DiscountCode // objcode
						);

					if (objInos_DiscountCode == null)
					{
						////
						bFlagInosCreateOrder = false;

						alParamsCoupleError.AddRange(new object[]{
							"Check.DiscountCode", objInos_LicOrder.DiscountCode
							, "Check.DiscountCode.Enabled", objInos_LicOrder.DiscountCode
							});
						throw CmUtils.CMyException.Raise(
							TError.ErridnInventory.Mst_NNT_Calc_InvalidInosCreateOrder
							, null
							, alParamsCoupleError.ToArray()
							);

					}
					if (objInos_DiscountCode.Enabled != true)
					{
						////
						bFlagInosCreateOrder = false;

						alParamsCoupleError.AddRange(new object[]{
							"Check.DiscountCode", objInos_LicOrder.DiscountCode
							, "Check.DiscountCode.Enabled", objInos_LicOrder.DiscountCode
							});
						throw CmUtils.CMyException.Raise(
							TError.ErridnInventory.Mst_NNT_Calc_InvalidInosCreateOrder_InvalidDiscountStatus
							, null
							, alParamsCoupleError.ToArray()
							);
					}

					////
					bFlagInosCreateOrder = true;
				}
				else
				{
					////
					bFlagInosCreateOrder = true;
				}
				////

				Inos_LicOrder objInos_LicOrderResult = Inos_OrderService_PrecheckOrderX(
					strTid // strTid
					, strGwUserCode // strGwUserCode
					, strGwPassword // strGwPassword
					, strWAUserCode // strWAUserCode
					, strWAUserPassword // strWAUserPassword
					, strAccessToken // strAccessToken
					, ref alParamsCoupleError // alParamsCoupleError
					, dtimeSys // dtimeSys
					, objInos_LicOrder // strRt_Cols_OS_Inos_LicOrder
					);

				objRT_Mst_NNT.Inos_LicOrder = objInos_LicOrderResult;


				if (!bFlagInosCreateOrder)
				{
					//alParamsCoupleError.AddRange(new object[]{
					//		"Check.TableName", strTableCheck
					//		});
					throw CmUtils.CMyException.Raise(
						TError.ErridnInventory.Mst_NNT_Calc_InvalidInosCreateOrder
						, null
						, alParamsCoupleError.ToArray()
						);
				}
			}
			#endregion

			// Return Good:
			//TDALUtils.DBUtils.CommitSafety(_cf.db);
			mdsFinal.AcceptChanges();
			//return mdsFinal;
		}

		private void RptSv_Mst_NNT_CalcByUserExistX_New20200208(
			string strTid
			, string strGwUserCode
			, string strGwPassword
			, string strWAUserCode
			, string strWAUserPassword
			, string strAccessToken
			, ref DataSet mdsFinal
			, ref ArrayList alParamsCoupleError
			//// InosCreateOrg
			, object objParentId_InosCreateOrg
			, object objName_InosCreateOrg
			, object objBizTypeId_InosCreateOrg
			, object objBizTypeName_InosCreateOrg
			, object objBizFieldId_InosCreateOrg
			, object objBizFieldName_InosCreateOrg
			, object objContactName_InosCreateOrg
			, object objEmail_InosCreateOrg
			, object objPhoneNo_InosCreateOrg
			, object objDescription_InosCreateOrg
			, object objEnable_InosCreateOrg
			//// RptSv
			, object objMST
			, object objNNTFullName
			, object objMSTParent
			, object objProvinceCode
			, object objDistrictCode
			//, object objNNTType
			, object objDLCode
			, object objNNTAddress
			, object objNNTMobile
			, object objNTTPhone
			, object objNNTFax
			, object objPresentBy
			, object objBusinessRegNo
			, object objNNTPosition
			, object objPresentIDNo
			, object objPresentIDType
			, object objGovTaxID
			, object objContactName
			, object objContactPhone
			, object objContactEmail
			, object objWebsite
			, object objCANumber
			, object objCAOrg
			, object objCAEffDTimeUTCStart
			, object objCAEffDTimeUTCEnd
			, object objPackageCode
			, object objCreatedDate
			, object objAccNo
			, object objAccHolder
			, object objBankName
			, object objBizType
			, object objBizFieldCode
			, object objBizSizeCode
			, object objDealerType
			////
			, object objDepartmentCode
			////
			, object objUserPassword
			, object objUserPasswordRepeat
            , object objFlagIsCheckOrder // Thêm cờ Check Order
            //////
            //, object objQtyLicense
            ////
            //, DataSet dsData
            //// InosCreateOrder
            , Inos_LicOrder objInos_LicOrder
			////
			, ref RT_Mst_NNT objRT_Mst_NNT
			)
		{
			#region // Temp:
			//DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
			//int nTidSeq = 0;
			DateTime dtimeSys = DateTime.UtcNow;
			string strFunctionName = "RptSv_Mst_NNT_CalcByUserExistX";
			//string strErrorCodeDefault = TError.ErridnInventory.WA_Mst_NNT_Registry;
			alParamsCoupleError.AddRange(new object[]{
					"strFunctionName", strFunctionName
					, "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
			        ////
					, "objMST", objMST
					, "objNNTFullName", objNNTFullName
					, "objMSTParent", objMSTParent
					, "objProvinceCode", objProvinceCode
					, "objDistrictCode", objDistrictCode
                    //, "objNNTType", objNNTType
                    , "objDLCode", objDLCode
					, "objNNTAddress", objNNTAddress
					, "objNNTMobile", objNNTMobile
					, "objNTTPhone", objNTTPhone
					, "objNNTFax", objNNTFax
					, "objPresentBy", objPresentBy
					, "objBusinessRegNo", objBusinessRegNo
					, "objNNTPosition", objNNTPosition
					, "objPresentIDNo", objPresentIDNo
					, "objPresentIDType", objPresentIDType
					, "objGovTaxID", objGovTaxID
					, "objContactName", objContactName
					, "objContactPhone", objContactPhone
					, "objContactEmail", objContactEmail
					, "objWebsite", objWebsite
					, "objCANumber", objCANumber
					, "objCAOrg", objCAOrg
					, "objCAEffDTimeUTCStart", objCAEffDTimeUTCStart
					, "objCAEffDTimeUTCEnd", objCAEffDTimeUTCEnd
					, "objPackageCode", objPackageCode
					, "objAccNo", objAccNo
					, "objAccHolder", objAccHolder
					, "objBankName", objBankName
					, "objBankName", objBizType
					, "objBizFieldCode", objBizFieldCode
					, "objBizSizeCode", objBizSizeCode
                    /////
                    , "objDepartmentCode", objDepartmentCode
                    ////
                    , "objUserPassword", objUserPassword
					, "objUserPasswordRepeat", objUserPasswordRepeat
					////
					//, "objQtyLicense", objQtyLicense
					});
			#endregion

			#region // Refine and Check Input:
			//bool bFlagInosCreateUser = false;
			bool bFlagInosCreateOrg = false;
			bool bFlagRptSvMstNNtAdd = false;
			bool bFlagInosCreateOrder = false;
            bool bFlagIsCheckOrder = CmUtils.StringUtils.Equals(objFlagIsCheckOrder, TConst.Flag.Active);
            #endregion

            #region // Calc InosCreateUser:
            {
				//OSiNOSSv.AccountService objAccountService = new OSiNOSSv.AccountService(null);
				//InosUser dummy = new InosUser();
				//dummy.Email = Convert.ToString(objContactEmail);

				//InosUser inosUser = objAccountService.GetUser(dummy);

				//if (inosUser == null) bFlagInosCreateUser = true;

				//if (!bFlagInosCreateUser)
				//{
				//	//alParamsCoupleError.AddRange(new object[]{
				//	//		"Check.TableName", strTableCheck
				//	//		});
				//	throw CmUtils.CMyException.Raise(
				//		TError.ErridnInventory.Mst_NNT_Calc_InvalidInosCreateUser
				//		, null
				//		, alParamsCoupleError.ToArray()
				//		);
				//}
			}
			#endregion

			#region // Calc InosCreateOrg:
			{
				////
				bFlagInosCreateOrg = true;

				if (!bFlagInosCreateOrg)
				{
					//alParamsCoupleError.AddRange(new object[]{
					//		"Check.TableName", strTableCheck
					//		});
					throw CmUtils.CMyException.Raise(
						TError.ErridnInventory.Mst_NNT_Calc_InvalidInosCreateOrg
						, null
						, alParamsCoupleError.ToArray()
						);
				}
			}
			#endregion

			#region // Save RptSvMstNNtAdd:
			////
			DataTable dt_Lst_MstSv_Inos_User = TDALUtils.DBUtils.GetSchema(_cf.db, "MstSv_Inos_User").Tables[0];
			DataTable dt_Lst_MstSv_Inos_Org = TDALUtils.DBUtils.GetSchema(_cf.db, "MstSv_Inos_Org").Tables[0];
			{
				DataSet dsData = new DataSet();
				CmUtils.DataUtils.MoveDataTable(ref dsData, ref dt_Lst_MstSv_Inos_User);
				CmUtils.DataUtils.MoveDataTable(ref dsData, ref dt_Lst_MstSv_Inos_Org);
				//dsData.Tables.Add(dt_Lst_MstSv_Inos_User);
				//dsData.Tables.Add(dt_Lst_MstSv_Inos_Org);

				RptSv_Mst_NNT_RegisterX_New20200208(
					strTid // strTid
					, strGwUserCode // strGwUserCode
					, strGwPassword // strGwPassword
					, strWAUserCode // strWAUserCode
					, strWAUserPassword // strWAUserPassword
					, strAccessToken // strAccessToken
					, ref mdsFinal // mdsFinal
					, ref alParamsCoupleError // alParamsCoupleError
											  ////
					, objMST // objMST
					, objNNTFullName // objNNTFullName
					, objMSTParent // objMSTParent
					, objProvinceCode // objProvinceCode
					, objDistrictCode // objDistrictCode
									  //, objNNTType
					, objDLCode // objDLCode
					, objNNTAddress // objNNTAddress
					, objNNTMobile // objNNTMobile
					, objNTTPhone // objNTTPhone
					, objNNTFax // objNNTFax
					, objPresentBy // objPresentBy
					, objBusinessRegNo // objBusinessRegNo
					, objNNTPosition // objNNTPosition
					, objPresentIDNo // objPresentIDNo
					, objPresentIDType // objPresentIDType
					, objGovTaxID // objGovTaxID
					, objContactName // objContactName
					, objContactPhone // objContactPhone
					, objContactEmail // objContactEmail
					, objWebsite // objWebsite
					, objCANumber // objCANumber
					, objCAOrg // objCAOrg
					, objCAEffDTimeUTCStart // objCAEffDTimeUTCStart
					, objCAEffDTimeUTCEnd // objCAEffDTimeUTCEnd
					, objPackageCode // objPackageCode
					, objCreatedDate // objCreatedDate
					, objAccNo // objAccNo
					, objAccHolder // objAccHolder
					, objBankName // objBankName
					, objBizType // objBizType
					, objBizFieldCode // objBizFieldCode
					, objBizSizeCode // objBizSizeCode
					, objDealerType // objDealerType
									////
					, objDepartmentCode // objDepartmentCode
										////
					, objUserPassword // objUserPassword
					, objUserPasswordRepeat // objUserPasswordRepeat
											//////
											//, objQtyLicense
											////
					, dsData // dsData
					);

				bFlagRptSvMstNNtAdd = true;

				if (!bFlagRptSvMstNNtAdd)
				{
					//alParamsCoupleError.AddRange(new object[]{
					//		"Check.TableName", strTableCheck
					//		});
					throw CmUtils.CMyException.Raise(
						TError.ErridnInventory.Mst_NNT_Calc_InvalidRptSvMstNNtAdd
						, null
						, alParamsCoupleError.ToArray()
						);
				}
			}
			#endregion

			#region // Calc InosCreateOrder:
			{
				////
				if (objInos_LicOrder.DiscountCode != null)
				{
					////
					Inos_DiscountCode objInos_DiscountCode = Inos_OrderService_GetDiscountCodeX(
						strTid // strTid
						, strGwUserCode // strGwUserCode
						, strGwPassword // strGwPassword
						, strWAUserCode // strWAUserCode
						, strWAUserPassword // strWAUserPassword
						, strAccessToken // strAccessToken
						, ref alParamsCoupleError // alParamsCoupleError
						, dtimeSys // dtimeSys
						, objInos_LicOrder.DiscountCode // objcode
						);

					if (objInos_DiscountCode == null)
					{
						////
						bFlagInosCreateOrder = false;

						alParamsCoupleError.AddRange(new object[]{
							"Check.DiscountCode", objInos_LicOrder.DiscountCode
							, "Check.DiscountCode.Enabled", objInos_LicOrder.DiscountCode
							});
						throw CmUtils.CMyException.Raise(
							TError.ErridnInventory.Mst_NNT_Calc_InvalidInosCreateOrder
							, null
							, alParamsCoupleError.ToArray()
							);

					}
					if (objInos_DiscountCode.Enabled != true)
					{
						////
						bFlagInosCreateOrder = false;

						alParamsCoupleError.AddRange(new object[]{
							"Check.DiscountCode", objInos_LicOrder.DiscountCode
							, "Check.DiscountCode.Enabled", objInos_LicOrder.DiscountCode
							});
						throw CmUtils.CMyException.Raise(
							TError.ErridnInventory.Mst_NNT_Calc_InvalidInosCreateOrder_InvalidDiscountStatus
							, null
							, alParamsCoupleError.ToArray()
							);
					}

					////
					bFlagInosCreateOrder = true;
				}
				else
				{
					////
					bFlagInosCreateOrder = true;
				}
                ////
                if (bFlagIsCheckOrder)
                {
                    Inos_LicOrder objInos_LicOrderResult = Inos_OrderService_PrecheckOrderX(
                        strTid // strTid
                        , strGwUserCode // strGwUserCode
                        , strGwPassword // strGwPassword
                        , strWAUserCode // strWAUserCode
                        , strWAUserPassword // strWAUserPassword
                        , strAccessToken // strAccessToken
                        , ref alParamsCoupleError // alParamsCoupleError
                        , dtimeSys // dtimeSys
                        , objInos_LicOrder // strRt_Cols_OS_Inos_LicOrder
                        );

                    objRT_Mst_NNT.Inos_LicOrder = objInos_LicOrderResult;
                }

				if (!bFlagInosCreateOrder)
				{
					//alParamsCoupleError.AddRange(new object[]{
					//		"Check.TableName", strTableCheck
					//		});
					throw CmUtils.CMyException.Raise(
						TError.ErridnInventory.Mst_NNT_Calc_InvalidInosCreateOrder
						, null
						, alParamsCoupleError.ToArray()
						);
				}
			}
			#endregion

			// Return Good:
			//TDALUtils.DBUtils.CommitSafety(_cf.db);
			mdsFinal.AcceptChanges();
			//return mdsFinal;
		}

		private void RptSv_Mst_NNT_CalcByUserExistX_New20191128(
			string strTid
			, string strGwUserCode
			, string strGwPassword
			, string strWAUserCode
			, string strWAUserPassword
			, string strAccessToken
			, ref DataSet mdsFinal
			, ref ArrayList alParamsCoupleError
			//// InosCreateOrg
			, object objParentId_InosCreateOrg
			, object objName_InosCreateOrg
			, object objBizTypeId_InosCreateOrg
			, object objBizTypeName_InosCreateOrg
			, object objBizFieldId_InosCreateOrg
			, object objBizFieldName_InosCreateOrg
			, object objContactName_InosCreateOrg
			, object objEmail_InosCreateOrg
			, object objPhoneNo_InosCreateOrg
			, object objDescription_InosCreateOrg
			, object objEnable_InosCreateOrg
			//// RptSv
			, object objMST
			, object objNNTFullName
			, object objMSTParent
			, object objProvinceCode
			, object objDistrictCode
			//, object objNNTType
			, object objDLCode
			, object objNNTAddress
			, object objNNTMobile
			, object objNTTPhone
			, object objNNTFax
			, object objPresentBy
			, object objBusinessRegNo
			, object objNNTPosition
			, object objPresentIDNo
			, object objPresentIDType
			, object objGovTaxID
			, object objContactName
			, object objContactPhone
			, object objContactEmail
			, object objWebsite
			, object objCANumber
			, object objCAOrg
			, object objCAEffDTimeUTCStart
			, object objCAEffDTimeUTCEnd
			, object objPackageCode
			, object objCreatedDate
			, object objAccNo
			, object objAccHolder
			, object objBankName
			, object objBizType
			, object objBizFieldCode
			, object objBizSizeCode
			, object objDealerCode
			////
			, object objDepartmentCode
			////
			, object objUserPassword
			, object objUserPasswordRepeat
			//////
			//, object objQtyLicense
			////
			//, DataSet dsData
			//// InosCreateOrder
			, Inos_LicOrder objInos_LicOrder
			////
			, ref RT_Mst_NNT objRT_Mst_NNT
			)
		{
			#region // Temp:
			//DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
			//int nTidSeq = 0;
			DateTime dtimeSys = DateTime.UtcNow;
			string strFunctionName = "RptSv_Mst_NNT_CalcByUserExistX";
			//string strErrorCodeDefault = TError.ErridnInventory.WA_Mst_NNT_Registry;
			alParamsCoupleError.AddRange(new object[]{
					"strFunctionName", strFunctionName
					, "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
			        ////
					, "objMST", objMST
					, "objNNTFullName", objNNTFullName
					, "objMSTParent", objMSTParent
					, "objProvinceCode", objProvinceCode
					, "objDistrictCode", objDistrictCode
                    //, "objNNTType", objNNTType
                    , "objDLCode", objDLCode
					, "objNNTAddress", objNNTAddress
					, "objNNTMobile", objNNTMobile
					, "objNTTPhone", objNTTPhone
					, "objNNTFax", objNNTFax
					, "objPresentBy", objPresentBy
					, "objBusinessRegNo", objBusinessRegNo
					, "objNNTPosition", objNNTPosition
					, "objPresentIDNo", objPresentIDNo
					, "objPresentIDType", objPresentIDType
					, "objGovTaxID", objGovTaxID
					, "objContactName", objContactName
					, "objContactPhone", objContactPhone
					, "objContactEmail", objContactEmail
					, "objWebsite", objWebsite
					, "objCANumber", objCANumber
					, "objCAOrg", objCAOrg
					, "objCAEffDTimeUTCStart", objCAEffDTimeUTCStart
					, "objCAEffDTimeUTCEnd", objCAEffDTimeUTCEnd
					, "objPackageCode", objPackageCode
					, "objAccNo", objAccNo
					, "objAccHolder", objAccHolder
					, "objBankName", objBankName
					, "objBankName", objBizType
					, "objBizFieldCode", objBizFieldCode
					, "objBizSizeCode", objBizSizeCode
					, "objDealerCode", objDealerCode
                    /////
                    , "objDepartmentCode", objDepartmentCode
                    ////
                    , "objUserPassword", objUserPassword
					, "objUserPasswordRepeat", objUserPasswordRepeat
					////
					//, "objQtyLicense", objQtyLicense
					});
			#endregion

			#region // Refine and Check Input:
			//bool bFlagInosCreateUser = false;
			bool bFlagInosCreateOrg = false;
			bool bFlagRptSvMstNNtAdd = false;
			bool bFlagInosCreateOrder = false;
			#endregion

			#region // Calc InosCreateUser:
			{
				//OSiNOSSv.AccountService objAccountService = new OSiNOSSv.AccountService(null);
				//InosUser dummy = new InosUser();
				//dummy.Email = Convert.ToString(objContactEmail);

				//InosUser inosUser = objAccountService.GetUser(dummy);

				//if (inosUser == null) bFlagInosCreateUser = true;

				//if (!bFlagInosCreateUser)
				//{
				//	//alParamsCoupleError.AddRange(new object[]{
				//	//		"Check.TableName", strTableCheck
				//	//		});
				//	throw CmUtils.CMyException.Raise(
				//		TError.ErridnInventory.Mst_NNT_Calc_InvalidInosCreateUser
				//		, null
				//		, alParamsCoupleError.ToArray()
				//		);
				//}
			}
			#endregion

			#region // Calc InosCreateOrg:
			{
				////
				bFlagInosCreateOrg = true;

				if (!bFlagInosCreateOrg)
				{
					//alParamsCoupleError.AddRange(new object[]{
					//		"Check.TableName", strTableCheck
					//		});
					throw CmUtils.CMyException.Raise(
						TError.ErridnInventory.Mst_NNT_Calc_InvalidInosCreateOrg
						, null
						, alParamsCoupleError.ToArray()
						);
				}
			}
			#endregion

			#region // Save RptSvMstNNtAdd:
			////
			DataTable dt_Lst_MstSv_Inos_User = TDALUtils.DBUtils.GetSchema(_cf.db, "MstSv_Inos_User").Tables[0];
			DataTable dt_Lst_MstSv_Inos_Org = TDALUtils.DBUtils.GetSchema(_cf.db, "MstSv_Inos_Org").Tables[0];
			{
				DataSet dsData = new DataSet();
				CmUtils.DataUtils.MoveDataTable(ref dsData, ref dt_Lst_MstSv_Inos_User);
				CmUtils.DataUtils.MoveDataTable(ref dsData, ref dt_Lst_MstSv_Inos_Org);
				//dsData.Tables.Add(dt_Lst_MstSv_Inos_User);
				//dsData.Tables.Add(dt_Lst_MstSv_Inos_Org);

				RptSv_Mst_NNT_RegisterX_New20191128(
					strTid // strTid
					, strGwUserCode // strGwUserCode
					, strGwPassword // strGwPassword
					, strWAUserCode // strWAUserCode
					, strWAUserPassword // strWAUserPassword
					, strAccessToken // strAccessToken
					, ref mdsFinal // mdsFinal
					, ref alParamsCoupleError // alParamsCoupleError
											  ////
					, objMST // objMST
					, objNNTFullName // objNNTFullName
					, objMSTParent // objMSTParent
					, objProvinceCode // objProvinceCode
					, objDistrictCode // objDistrictCode
									  //, objNNTType
					, objDLCode // objDLCode
					, objNNTAddress // objNNTAddress
					, objNNTMobile // objNNTMobile
					, objNTTPhone // objNTTPhone
					, objNNTFax // objNNTFax
					, objPresentBy // objPresentBy
					, objBusinessRegNo // objBusinessRegNo
					, objNNTPosition // objNNTPosition
					, objPresentIDNo // objPresentIDNo
					, objPresentIDType // objPresentIDType
					, objGovTaxID // objGovTaxID
					, objContactName // objContactName
					, objContactPhone // objContactPhone
					, objContactEmail // objContactEmail
					, objWebsite // objWebsite
					, objCANumber // objCANumber
					, objCAOrg // objCAOrg
					, objCAEffDTimeUTCStart // objCAEffDTimeUTCStart
					, objCAEffDTimeUTCEnd // objCAEffDTimeUTCEnd
					, objPackageCode // objPackageCode
					, objCreatedDate // objCreatedDate
					, objAccNo // objAccNo
					, objAccHolder // objAccHolder
					, objBankName // objBankName
					, objBizType // objBizType
					, objBizFieldCode // objBizFieldCode
					, objBizSizeCode // objBizSizeCode
									 ////
					, objDepartmentCode // objDepartmentCode
										////
					, objUserPassword // objUserPassword
					, objUserPasswordRepeat // objUserPasswordRepeat
											//////
											//, objQtyLicense
											////
					, dsData // dsData
					);

				bFlagRptSvMstNNtAdd = true;

				if (!bFlagRptSvMstNNtAdd)
				{
					//alParamsCoupleError.AddRange(new object[]{
					//		"Check.TableName", strTableCheck
					//		});
					throw CmUtils.CMyException.Raise(
						TError.ErridnInventory.Mst_NNT_Calc_InvalidRptSvMstNNtAdd
						, null
						, alParamsCoupleError.ToArray()
						);
				}
			}
			#endregion

			#region // Calc InosCreateOrder:
			{
				////
				if (objInos_LicOrder.DiscountCode != null)
				{
					////
					Inos_DiscountCode objInos_DiscountCode = Inos_OrderService_GetDiscountCodeX(
						strTid // strTid
						, strGwUserCode // strGwUserCode
						, strGwPassword // strGwPassword
						, strWAUserCode // strWAUserCode
						, strWAUserPassword // strWAUserPassword
						, strAccessToken // strAccessToken
						, ref alParamsCoupleError // alParamsCoupleError
						, dtimeSys // dtimeSys
						, objInos_LicOrder.DiscountCode // objcode
						);

					if (objInos_DiscountCode == null)
					{
						////
						bFlagInosCreateOrder = false;

						alParamsCoupleError.AddRange(new object[]{
							"Check.DiscountCode", objInos_LicOrder.DiscountCode
							, "Check.DiscountCode.Enabled", objInos_LicOrder.DiscountCode
							});
						throw CmUtils.CMyException.Raise(
							TError.ErridnInventory.Mst_NNT_Calc_InvalidInosCreateOrder
							, null
							, alParamsCoupleError.ToArray()
							);

					}
					if (objInos_DiscountCode.Enabled != true)
					{
						////
						bFlagInosCreateOrder = false;

						alParamsCoupleError.AddRange(new object[]{
							"Check.DiscountCode", objInos_LicOrder.DiscountCode
							, "Check.DiscountCode.Enabled", objInos_LicOrder.DiscountCode
							});
						throw CmUtils.CMyException.Raise(
							TError.ErridnInventory.Mst_NNT_Calc_InvalidInosCreateOrder_InvalidDiscountStatus
							, null
							, alParamsCoupleError.ToArray()
							);
					}

					////
					bFlagInosCreateOrder = true;
				}
				else
				{
					////
					bFlagInosCreateOrder = true;
				}
				////

				Inos_LicOrder objInos_LicOrderResult = Inos_OrderService_PrecheckOrderX(
					strTid // strTid
					, strGwUserCode // strGwUserCode
					, strGwPassword // strGwPassword
					, strWAUserCode // strWAUserCode
					, strWAUserPassword // strWAUserPassword
					, strAccessToken // strAccessToken
					, ref alParamsCoupleError // alParamsCoupleError
					, dtimeSys // dtimeSys
					, objInos_LicOrder // strRt_Cols_OS_Inos_LicOrder
					);

				objRT_Mst_NNT.Inos_LicOrder = objInos_LicOrderResult;


				if (!bFlagInosCreateOrder)
				{
					//alParamsCoupleError.AddRange(new object[]{
					//		"Check.TableName", strTableCheck
					//		});
					throw CmUtils.CMyException.Raise(
						TError.ErridnInventory.Mst_NNT_Calc_InvalidInosCreateOrder
						, null
						, alParamsCoupleError.ToArray()
						);
				}
			}
			#endregion

			// Return Good:
			//TDALUtils.DBUtils.CommitSafety(_cf.db);
			mdsFinal.AcceptChanges();
			//return mdsFinal;
		}

		private void RptSv_Mst_NNT_AddByUserExistX(
			string strTid
			, string strGwUserCode
			, string strGwPassword
			, string strWAUserCode
			, string strWAUserPassword
			, string strAccessToken
			, ref DataSet mdsFinal
			, ref ArrayList alParamsCoupleError
			//// InosCreateOrg
			, object objId_InosCreateOrg
			, object objParentId_InosCreateOrg
			, object objName_InosCreateOrg
			, object objBizTypeId_InosCreateOrg
			, object objBizTypeName_InosCreateOrg
			, object objBizFieldId_InosCreateOrg
			, object objBizFieldName_InosCreateOrg
			, object objContactName_InosCreateOrg
			, object objEmail_InosCreateOrg
			, object objPhoneNo_InosCreateOrg
			, object objDescription_InosCreateOrg
			, object objEnable_InosCreateOrg
			//// RptSv
			, object objMST
			, object objNNTFullName
			, object objMSTParent
			, object objProvinceCode
			, object objDistrictCode
			//, object objNNTType
			, object objDLCode
			, object objNNTAddress
			, object objNNTMobile
			, object objNTTPhone
			, object objNNTFax
			, object objPresentBy
			, object objBusinessRegNo
			, object objNNTPosition
			, object objPresentIDNo
			, object objPresentIDType
			, object objGovTaxID
			, object objContactName
			, object objContactPhone
			, object objContactEmail
			, object objWebsite
			, object objCANumber
			, object objCAOrg
			, object objCAEffDTimeUTCStart
			, object objCAEffDTimeUTCEnd
			, object objPackageCode
			, object objCreatedDate
			, object objAccNo
			, object objAccHolder
			, object objBankName
			, object objBizType
			, object objBizFieldCode
			, object objBizSizeCode
			////
			, object objDepartmentCode
			////
			, object objUserPassword
			, object objUserPasswordRepeat
			//////
			//, object objQtyLicense
			////
			//, DataSet dsData
			//// InosCreateOrder
			, Inos_LicOrder objInos_LicOrder
			////
			, ref RT_Mst_NNT objRT_Mst_NNT
			)
		{
			#region // Temp:
			//DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
			//int nTidSeq = 0;
			DateTime dtimeSys = DateTime.UtcNow;
			string strFunctionName = "RptSv_Mst_NNT_AddX";
			//string strErrorCodeDefault = TError.ErridNTVAN.WA_Mst_NNT_Registry;
			alParamsCoupleError.AddRange(new object[]{
					"strFunctionName", strFunctionName
					, "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
			        ////
					, "objMST", objMST
					, "objNNTFullName", objNNTFullName
					, "objMSTParent", objMSTParent
					, "objProvinceCode", objProvinceCode
					, "objDistrictCode", objDistrictCode
                    //, "objNNTType", objNNTType
                    , "objDLCode", objDLCode
					, "objNNTAddress", objNNTAddress
					, "objNNTMobile", objNNTMobile
					, "objNTTPhone", objNTTPhone
					, "objNNTFax", objNNTFax
					, "objPresentBy", objPresentBy
					, "objBusinessRegNo", objBusinessRegNo
					, "objNNTPosition", objNNTPosition
					, "objPresentIDNo", objPresentIDNo
					, "objPresentIDType", objPresentIDType
					, "objGovTaxID", objGovTaxID
					, "objContactName", objContactName
					, "objContactPhone", objContactPhone
					, "objContactEmail", objContactEmail
					, "objWebsite", objWebsite
					, "objCANumber", objCANumber
					, "objCAOrg", objCAOrg
					, "objCAEffDTimeUTCStart", objCAEffDTimeUTCStart
					, "objCAEffDTimeUTCEnd", objCAEffDTimeUTCEnd
					, "objPackageCode", objPackageCode
					, "objAccNo", objAccNo
					, "objAccHolder", objAccHolder
					, "objBankName", objBankName
					, "objBankName", objBizType
					, "objBizFieldCode", objBizFieldCode
					, "objBizSizeCode", objBizSizeCode
                    /////
                    , "objDepartmentCode", objDepartmentCode
                    ////
                    , "objUserPassword", objUserPassword
					, "objUserPasswordRepeat", objUserPasswordRepeat
					////
					//, "objQtyLicense", objQtyLicense
					});
			#endregion

			#region // Refine and Check Input:
			//bool bFlagInosCreateUser = false;
			//bool bFlagInosCreateOrg = false;
			//bool bFlagRptSvMstNNtAdd = false;
			//bool bFlagInosCreateOrder = false;
			#endregion

			#region // Save InosCreateUser:
			////
			DataTable dt_Lst_MstSv_Inos_User = TDALUtils.DBUtils.GetSchema(_cf.db, "OS_Inos_User").Tables[0];
			dt_Lst_MstSv_Inos_User.TableName = "MstSv_Inos_User";
			TUtils.CUtils.MyForceNewColumn(ref dt_Lst_MstSv_Inos_User, "MST", typeof(object));
			TUtils.CUtils.MyForceNewColumn(ref dt_Lst_MstSv_Inos_User, "UUID", typeof(object));
			TUtils.CUtils.MyForceNewColumn(ref dt_Lst_MstSv_Inos_User, "FlagEmailActivate", typeof(object));
			TUtils.CUtils.MyForceNewColumn(ref dt_Lst_MstSv_Inos_User, "FlagAdmin", typeof(object));
			TUtils.CUtils.MyForceNewColumn(ref dt_Lst_MstSv_Inos_User, "FlagEmailSend", typeof(object));

			////
			OSiNOSSv.AccountService objAccountService = new OSiNOSSv.AccountService(null);
			InosUser dummy = new InosUser();
			dummy.Email = (string)objContactEmail;

			InosUser inosUser = objAccountService.GetUser(dummy);

			string strFN = "";
			DataRow drDB = dt_Lst_MstSv_Inos_User.NewRow();
			strFN = "Id"; drDB[strFN] = inosUser.Id;
			strFN = "Name"; drDB[strFN] = inosUser.Name;
			strFN = "Email"; drDB[strFN] = inosUser.Email;
			strFN = "Language"; drDB[strFN] = inosUser.Language;
			strFN = "TimeZone"; drDB[strFN] = inosUser.TimeZone;
			strFN = "Avatar"; drDB[strFN] = inosUser.Avatar;
			strFN = "MST"; drDB[strFN] = objMST;
			strFN = "UUID"; drDB[strFN] = "0";
			strFN = "FlagEmailActivate"; drDB[strFN] = TConst.Flag.Inactive;
			strFN = "FlagAdmin"; drDB[strFN] = TConst.Flag.Active;
			strFN = "FlagEmailSend"; drDB[strFN] = TConst.Flag.Inactive;
			//strFN = "FlagActive"; drDB[strFN] = TConst.Flag.Active;
			//strFN = "LogLUDTime"; drDB[strFN] = dtimeSys.ToString("yyyy-MM-dd HH:mm:ss");
			//strFN = "LogLUBy"; drDB[strFN] = _cf.sinf.strUserCode;
			dt_Lst_MstSv_Inos_User.Rows.Add(drDB);
			////

			#endregion

			#region // Save InosCreateOrg:
			object objAccessToken = strAccessToken;
			DataTable dt_Lst_MstSv_Inos_Org = null;
			{
				////
				DataSet dsGetData = null;

				////
				if (objId_InosCreateOrg != null)
				{
					////
					Inos_OrgService_GetOrgX(
						strTid // strTid
						, strGwUserCode // strGwUserCode
						, strGwPassword // strGwPassword
						, strWAUserCode // strWAUserCode
						, strWAUserPassword // strWAUserPassword
						, (string)objAccessToken // strAccessToken
						, ref mdsFinal // mdsFinal
						, ref alParamsCoupleError // alParamsCoupleError
						, dtimeSys // dtimeSys
								   ////
						, objId_InosCreateOrg // objId
											  ////
						, out dsGetData // dsData
						);
				}
				else
				{
					////
					RptSv_Inos_OrgService_CreateOrgX(
						strTid // strTid
						, strGwUserCode // strGwUserCode
						, strGwPassword // strGwPassword
						, strWAUserCode // strWAUserCode
						, strWAUserPassword // strWAUserPassword
						, (string)objAccessToken // strAccessToken
						, ref mdsFinal // mdsFinal
						, ref alParamsCoupleError // alParamsCoupleError
						, dtimeSys // dtimeSys
								   ////
						, objParentId_InosCreateOrg
						, objName_InosCreateOrg
						, objBizTypeId_InosCreateOrg
						, objBizTypeName_InosCreateOrg
						, objBizFieldId_InosCreateOrg
						, objBizFieldName_InosCreateOrg
						, objContactName_InosCreateOrg
						, objEmail_InosCreateOrg
						, objPhoneNo_InosCreateOrg
						, objDescription_InosCreateOrg
						, objEnable_InosCreateOrg
						////
						, out dsGetData // dsData
						);
				}


				dt_Lst_MstSv_Inos_Org = dsGetData.Tables[0].Copy();
				dt_Lst_MstSv_Inos_Org.TableName = "MstSv_Inos_Org";

				////
				TUtils.CUtils.MyForceNewColumn(ref dt_Lst_MstSv_Inos_Org, "MST", typeof(object));

				////
				for (int nScan = 0; nScan < dt_Lst_MstSv_Inos_Org.Rows.Count; nScan++)
				{
					////
					DataRow drScan = dt_Lst_MstSv_Inos_Org.Rows[nScan];

					////
					drScan["MST"] = objMST;

				}
			}
			#endregion

			#region // Save RptSvMstNNtAdd:
			{
				DataSet dsData = new DataSet();
				dsData.Tables.Add(dt_Lst_MstSv_Inos_User.Copy());
				dsData.Tables.Add(dt_Lst_MstSv_Inos_Org);

				RptSv_Mst_NNT_RegisterX_New20191128(
					strTid // strTid
					, strGwUserCode // strGwUserCode
					, strGwPassword // strGwPassword
					, strWAUserCode // strWAUserCode
					, strWAUserPassword // strWAUserPassword
					, (string)objAccessToken // strAccessToken
					, ref mdsFinal // mdsFinal
					, ref alParamsCoupleError // alParamsCoupleError
											  ////
					, objMST // objMST
					, objNNTFullName // objNNTFullName
					, objMSTParent // objMSTParent
					, objProvinceCode // objProvinceCode
					, objDistrictCode // objDistrictCode
									  //, objNNTType
					, objDLCode // objDLCode
					, objNNTAddress // objNNTAddress
					, objNNTMobile // objNNTMobile
					, objNTTPhone // objNTTPhone
					, objNNTFax // objNNTFax
					, objPresentBy // objPresentBy
					, objBusinessRegNo // objBusinessRegNo
					, objNNTPosition // objNNTPosition
					, objPresentIDNo // objPresentIDNo
					, objPresentIDType // objPresentIDType
					, objGovTaxID // objGovTaxID
					, objContactName // objContactName
					, objContactPhone // objContactPhone
					, objContactEmail // objContactEmail
					, objWebsite // objWebsite
					, objCANumber // objCANumber
					, objCAOrg // objCAOrg
					, objCAEffDTimeUTCStart // objCAEffDTimeUTCStart
					, objCAEffDTimeUTCEnd // objCAEffDTimeUTCEnd
					, objPackageCode // objPackageCode
					, objCreatedDate // objCreatedDate
					, objAccNo // objAccNo
					, objAccHolder // objAccHolder
					, objBankName // objBankName
					, objBizType // objBizType
					, objBizFieldCode // objBizFieldCode
					, objBizSizeCode // objBizSizeCode
									 ////
					, objDepartmentCode // objDepartmentCode
										////
					, objUserPassword // objUserPassword
					, objUserPasswordRepeat // objUserPasswordRepeat
											//////
											//, objQtyLicense
											////
					, dsData // dsData
					);

				//bFlagRptSvMstNNtAdd = true;
			}
			#endregion

			#region // Save InosCreateOrder:
			Inos_LicOrder objInos_LicOrderResult = null;
			{
				////
				objInos_LicOrder.OrgId = Convert.ToString(dt_Lst_MstSv_Inos_Org.Rows[0]["Id"]);

				objInos_LicOrderResult = Inos_OrderService_CreateOrderX_New20190913(
					strTid // strTid
					, strGwUserCode // strGwUserCode
					, strGwPassword // strGwPassword
					, strWAUserCode // strWAUserCode
					, strWAUserPassword // strWAUserPassword
					, (string)objAccessToken // strAccessToken
					, ref alParamsCoupleError // alParamsCoupleError
					, dtimeSys // dtimeSys
					, objInos_LicOrder // strRt_Cols_OS_Inos_LicOrder
					);

				objRT_Mst_NNT.Inos_LicOrder = objInos_LicOrderResult;
			}
			#endregion

			#region // Upd MstSv_Inos_Org:
			{
				////
				string strUpdDB_MstSv_Inos_Org = CmUtils.StringUtils.Replace(@"
						---- MstSv_Inos_Org:
						update t 
						set
							t.OrderId = '@strOrderId'
						from MstSv_Inos_Org t --//[mylock]
						where (1=1)
							and t.Id = '@strId'
						;
					"
					, "@strId", dt_Lst_MstSv_Inos_Org.Rows[0]["Id"]
					, "@strOrderId", objInos_LicOrderResult.Id
					);

				_cf.db.ExecQuery(
					strUpdDB_MstSv_Inos_Org
					);
			}
			#endregion

			#region // Save Lic:
			{
				////
				DataSet dsGetData = null;

				List<OrgLicense> lstOrgLicense = Inos_LicService_GetOrgLicenseX(
					 strTid // strTid
					, strGwUserCode // strGwUserCode
					, strGwPassword // strGwPassword
					, strWAUserCode // strWAUserCode
					, strWAUserPassword // strWAUserPassword
					, (string)objAccessToken // strAccessToken
					, ref mdsFinal // mdsFinal
					, ref alParamsCoupleError // alParamsCoupleError
					, dtimeSys // dtimeSys
							   ////
					, dt_Lst_MstSv_Inos_Org.Rows[0]["Id"] // objOrgID
														  ////
					, out dsGetData // dsData
					);
				////

				#region // Sys_Solution: Get.
				////
				DataTable dtDB_Sys_Solution = null;
				{
					// GetInfo:
					dtDB_Sys_Solution = TDALUtils.DBUtils.GetTableContents(
						_cf.db // db
						, "Sys_Solution" // strTableName
						, "top 1 *" // strColumnList
						, "" // strClauseOrderBy
						, "FlagActive", "=", TConst.Flag.Active // arrobjParamsTriple item
						);
				}
				#endregion

				////
				List<OrgSolutionUser> lstOrgSolutionUser = new List<OrgSolutionUser>();

				//foreach (var item in lstOrgLicense)
				//{
				//	OrgSolutionUser obj = new OrgSolutionUser();
				//	obj.LicId = item.Id;
				//	obj.UserId = Convert.ToInt64(dt_Lst_MstSv_Inos_User.Rows[0]["Id"]);
				//	lstOrgSolutionUser.Add(obj);
				//}
				////
				OrderService objOrderService = new OrderService(null);
				objOrderService.AccessToken = strAccessToken;
				objAccountService.AccessToken = strAccessToken;
				var user = objAccountService.GetCurrentUser();
				LicOrder ret = new LicOrder();
				ret.Id = Convert.ToInt64(objInos_LicOrderResult.Id);
				LicOrder objLicOrderResult = objOrderService.GetOrderDetail(ret);
				List<LicOrderDetail> objDetailList = objLicOrderResult.DetailList;

				foreach (var obj in objDetailList)
				{
					OrgLicense objOrgLicense = obj.Lic;

					List<OrgSolution> lstOrgSolutions = objOrgLicense.OrgSolutionList;

					foreach (var item in lstOrgSolutions)
					{
						OrgSolutionUser objOrgSolutionUser = new OrgSolutionUser();

						objOrgSolutionUser.LicId = item.LicId;
						objOrgSolutionUser.SolutionCode = item.SolutionCode;
						objOrgSolutionUser.UserId = user.Id;

						lstOrgSolutionUser.Add(objOrgSolutionUser);
					}

				}
				////
				OSiNOSSv.LicService objLicService = new OSiNOSSv.LicService(null);
				objLicService.AccessToken = strAccessToken;

				List<OrgSolutionUser> lstOrgSolutionUserFinal = new List<OrgSolutionUser>();

				foreach (var obj in lstOrgSolutionUser)
				{
					////
					List<OrgSolutionUser> ret1 = objLicService.GetOrgSolutionUsers(
						Convert.ToString(dtDB_Sys_Solution.Rows[0]["SolutionCode"])
						, obj.LicId
						, Convert.ToInt64(dt_Lst_MstSv_Inos_Org.Rows[0]["Id"])
						);

					var objOrgSolutionUser = ret1.FirstOrDefault(x => x.LicId == obj.LicId && x.UserId == obj.UserId);

					if (objOrgSolutionUser == null)
					{
						////
						lstOrgSolutionUserFinal.Add(obj);
					}
				}
				////
				long lgOrgID = Convert.ToInt64(dt_Lst_MstSv_Inos_Org.Rows[0]["Id"]);
				var result = objLicService.AddOrgSolutionUsers(null, lgOrgID, lstOrgSolutionUserFinal);
				////
				//DataSet dsData = null;

				//Int32 result = Inos_LicService_AddOrgSolutionUsersX(
				//	 strTid // strTid
				//	, strGwUserCode // strGwUserCode
				//	, strGwPassword // strGwPassword
				//	, strWAUserCode // strWAUserCode
				//	, strWAUserPassword // strWAUserPassword
				//	, (string)objAccessToken // strAccessToken
				//	, ref mdsFinal // mdsFinal
				//	, ref alParamsCoupleError // alParamsCoupleError
				//	, dtimeSys // dtimeSys
				//			   ////
				//	, dtDB_Sys_Solution.Rows[0]["SolutionCode"] // objSolutionCode
				//	, dt_Lst_MstSv_Inos_Org.Rows[0]["Id"] // objOrgID
				//	, lstOrgSolutionUserFinal // lstOrgSolutionUser
				//							  ////
				//	, out dsData
				//	);


			}
			#endregion

			// Return Good:
			//TDALUtils.DBUtils.CommitSafety(_cf.db);
			mdsFinal.AcceptChanges();
			//return mdsFinal;
		}

		private void RptSv_Mst_NNT_AddByUserExistX_New20200207(
			string strTid
			, string strGwUserCode
			, string strGwPassword
			, string strWAUserCode
			, string strWAUserPassword
			, string strAccessToken
			, ref DataSet mdsFinal
			, ref ArrayList alParamsCoupleError
			//// InosCreateOrg
			, object objId_InosCreateOrg
			, object objParentId_InosCreateOrg
			, object objName_InosCreateOrg
			, object objBizTypeId_InosCreateOrg
			, object objBizTypeName_InosCreateOrg
			, object objBizFieldId_InosCreateOrg
			, object objBizFieldName_InosCreateOrg
			, object objContactName_InosCreateOrg
			, object objEmail_InosCreateOrg
			, object objPhoneNo_InosCreateOrg
			, object objDescription_InosCreateOrg
			, object objEnable_InosCreateOrg
            , object objEmail_InosUser
            //// RptSv
            , object objMST
			, object objNNTFullName
			, object objMSTParent
			, object objProvinceCode
			, object objDistrictCode
			//, object objNNTType
			, object objDLCode
			, object objNNTAddress
			, object objNNTMobile
			, object objNTTPhone
			, object objNNTFax
			, object objPresentBy
			, object objBusinessRegNo
			, object objNNTPosition
			, object objPresentIDNo
			, object objPresentIDType
			, object objGovTaxID
			, object objContactName
			, object objContactPhone
			, object objContactEmail
			, object objWebsite
			, object objCANumber
			, object objCAOrg
			, object objCAEffDTimeUTCStart
			, object objCAEffDTimeUTCEnd
			, object objPackageCode
			, object objCreatedDate
			, object objAccNo
			, object objAccHolder
			, object objBankName
			, object objBizType
			, object objBizFieldCode
			, object objBizSizeCode
			, object objDealerType
			////
			, object objDepartmentCode
			////
			, object objUserPassword
			, object objUserPasswordRepeat
			//////
			//, object objQtyLicense
			////
			//, DataSet dsData
			//// InosCreateOrder
			, Inos_LicOrder objInos_LicOrder
			////
			, ref RT_Mst_NNT objRT_Mst_NNT
			////
			, object objFlagIsCreateOrder

			)
		{
			#region // Temp:
			//DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
			//int nTidSeq = 0;
			DateTime dtimeSys = DateTime.UtcNow;
			string strFunctionName = "RptSv_Mst_NNT_AddX";
			//string strErrorCodeDefault = TError.ErridNTVAN.WA_Mst_NNT_Registry;
			alParamsCoupleError.AddRange(new object[]{
					"strFunctionName", strFunctionName
					, "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
			        ////
					, "objMST", objMST
					, "objNNTFullName", objNNTFullName
					, "objMSTParent", objMSTParent
					, "objProvinceCode", objProvinceCode
					, "objDistrictCode", objDistrictCode
                    //, "objNNTType", objNNTType
                    , "objDLCode", objDLCode
					, "objNNTAddress", objNNTAddress
					, "objNNTMobile", objNNTMobile
					, "objNTTPhone", objNTTPhone
					, "objNNTFax", objNNTFax
					, "objPresentBy", objPresentBy
					, "objBusinessRegNo", objBusinessRegNo
					, "objNNTPosition", objNNTPosition
					, "objPresentIDNo", objPresentIDNo
					, "objPresentIDType", objPresentIDType
					, "objGovTaxID", objGovTaxID
					, "objContactName", objContactName
					, "objContactPhone", objContactPhone
					, "objContactEmail", objContactEmail
					, "objWebsite", objWebsite
					, "objCANumber", objCANumber
					, "objCAOrg", objCAOrg
					, "objCAEffDTimeUTCStart", objCAEffDTimeUTCStart
					, "objCAEffDTimeUTCEnd", objCAEffDTimeUTCEnd
					, "objPackageCode", objPackageCode
					, "objAccNo", objAccNo
					, "objAccHolder", objAccHolder
					, "objBankName", objBankName
					, "objBankName", objBizType
					, "objBizFieldCode", objBizFieldCode
					, "objBizSizeCode", objBizSizeCode
                    /////
                    , "objDepartmentCode", objDepartmentCode
                    ////
                    , "objUserPassword", objUserPassword
					, "objUserPasswordRepeat", objUserPasswordRepeat
					////
					//, "objQtyLicense", objQtyLicense
					});
			#endregion

			#region // Refine and Check Input:
			////
			bool bFlagIsCreateOrder = CmUtils.StringUtils.StringEqual(objFlagIsCreateOrder, TConst.Flag.Yes);
			//bool bFlagInosCreateUser = false;
			//bool bFlagInosCreateOrg = false;
			//bool bFlagRptSvMstNNtAdd = false;
			//bool bFlagInosCreateOrder = false;
			#endregion

			#region // Save InosCreateUser:
			////
			DataTable dt_Lst_MstSv_Inos_User = TDALUtils.DBUtils.GetSchema(_cf.db, "OS_Inos_User").Tables[0];
			dt_Lst_MstSv_Inos_User.TableName = "MstSv_Inos_User";
			TUtils.CUtils.MyForceNewColumn(ref dt_Lst_MstSv_Inos_User, "MST", typeof(object));
			TUtils.CUtils.MyForceNewColumn(ref dt_Lst_MstSv_Inos_User, "UUID", typeof(object));
			TUtils.CUtils.MyForceNewColumn(ref dt_Lst_MstSv_Inos_User, "FlagEmailActivate", typeof(object));
			TUtils.CUtils.MyForceNewColumn(ref dt_Lst_MstSv_Inos_User, "FlagAdmin", typeof(object));
			TUtils.CUtils.MyForceNewColumn(ref dt_Lst_MstSv_Inos_User, "FlagEmailSend", typeof(object));

			////
			OSiNOSSv.AccountService objAccountService = new OSiNOSSv.AccountService(null);
			InosUser dummy = new InosUser();
            dummy.Email = (string)objEmail_InosUser;

            InosUser inosUser = objAccountService.GetUser(dummy);

			string strFN = "";
			DataRow drDB = dt_Lst_MstSv_Inos_User.NewRow();
			strFN = "Id"; drDB[strFN] = inosUser.Id;
			strFN = "Name"; drDB[strFN] = inosUser.Name;
			strFN = "Email"; drDB[strFN] = inosUser.Email;
			strFN = "Language"; drDB[strFN] = inosUser.Language;
			strFN = "TimeZone"; drDB[strFN] = inosUser.TimeZone;
			strFN = "Avatar"; drDB[strFN] = inosUser.Avatar;
			strFN = "MST"; drDB[strFN] = objMST;
			strFN = "UUID"; drDB[strFN] = "0";
			strFN = "FlagEmailActivate"; drDB[strFN] = TConst.Flag.Inactive;
			strFN = "FlagAdmin"; drDB[strFN] = TConst.Flag.Active;
			strFN = "FlagEmailSend"; drDB[strFN] = TConst.Flag.Inactive;
			//strFN = "FlagActive"; drDB[strFN] = TConst.Flag.Active;
			//strFN = "LogLUDTime"; drDB[strFN] = dtimeSys.ToString("yyyy-MM-dd HH:mm:ss");
			//strFN = "LogLUBy"; drDB[strFN] = _cf.sinf.strUserCode;
			dt_Lst_MstSv_Inos_User.Rows.Add(drDB);
			////

			#endregion

			#region // Save InosCreateOrg:
			object objAccessToken = strAccessToken;
			DataTable dt_Lst_MstSv_Inos_Org = null;
			{
				////
				DataSet dsGetData = null;

				////
				if (objId_InosCreateOrg != null)
				{
					////
					Inos_OrgService_GetOrgX(
						strTid // strTid
						, strGwUserCode // strGwUserCode
						, strGwPassword // strGwPassword
						, strWAUserCode // strWAUserCode
						, strWAUserPassword // strWAUserPassword
						, (string)objAccessToken // strAccessToken
						, ref mdsFinal // mdsFinal
						, ref alParamsCoupleError // alParamsCoupleError
						, dtimeSys // dtimeSys
								   ////
						, objId_InosCreateOrg // objId
											  ////
						, out dsGetData // dsData
						);
				}
				else
				{
					////
					RptSv_Inos_OrgService_CreateOrgX(
						strTid // strTid
						, strGwUserCode // strGwUserCode
						, strGwPassword // strGwPassword
						, strWAUserCode // strWAUserCode
						, strWAUserPassword // strWAUserPassword
						, (string)objAccessToken // strAccessToken
						, ref mdsFinal // mdsFinal
						, ref alParamsCoupleError // alParamsCoupleError
						, dtimeSys // dtimeSys
								   ////
						, objParentId_InosCreateOrg
						, objName_InosCreateOrg
						, objBizTypeId_InosCreateOrg
						, objBizTypeName_InosCreateOrg
						, objBizFieldId_InosCreateOrg
						, objBizFieldName_InosCreateOrg
						, objContactName_InosCreateOrg
						, objEmail_InosCreateOrg
						, objPhoneNo_InosCreateOrg
						, objDescription_InosCreateOrg
						, objEnable_InosCreateOrg
						////
						, out dsGetData // dsData
						);
				}


				dt_Lst_MstSv_Inos_Org = dsGetData.Tables[0].Copy();
				dt_Lst_MstSv_Inos_Org.TableName = "MstSv_Inos_Org";

				////
				TUtils.CUtils.MyForceNewColumn(ref dt_Lst_MstSv_Inos_Org, "MST", typeof(object));

				////
				for (int nScan = 0; nScan < dt_Lst_MstSv_Inos_Org.Rows.Count; nScan++)
				{
					////
					DataRow drScan = dt_Lst_MstSv_Inos_Org.Rows[nScan];

					////
					drScan["MST"] = objMST;

				}
			}
			#endregion

			#region // Save RptSvMstNNtAdd:
			{
				DataSet dsData = new DataSet();
				dsData.Tables.Add(dt_Lst_MstSv_Inos_User.Copy());
				dsData.Tables.Add(dt_Lst_MstSv_Inos_Org);

				RptSv_Mst_NNT_RegisterX_New20200208(
					strTid // strTid
					, strGwUserCode // strGwUserCode
					, strGwPassword // strGwPassword
					, strWAUserCode // strWAUserCode
					, strWAUserPassword // strWAUserPassword
					, (string)objAccessToken // strAccessToken
					, ref mdsFinal // mdsFinal
					, ref alParamsCoupleError // alParamsCoupleError
											  ////
					, objMST // objMST
					, objNNTFullName // objNNTFullName
					, objMSTParent // objMSTParent
					, objProvinceCode // objProvinceCode
					, objDistrictCode // objDistrictCode
									  //, objNNTType
					, objDLCode // objDLCode
					, objNNTAddress // objNNTAddress
					, objNNTMobile // objNNTMobile
					, objNTTPhone // objNTTPhone
					, objNNTFax // objNNTFax
					, objPresentBy // objPresentBy
					, objBusinessRegNo // objBusinessRegNo
					, objNNTPosition // objNNTPosition
					, objPresentIDNo // objPresentIDNo
					, objPresentIDType // objPresentIDType
					, objGovTaxID // objGovTaxID
					, objContactName // objContactName
					, objContactPhone // objContactPhone
					, (string)objEmail_InosUser // objContactEmail
                    , objWebsite // objWebsite
					, objCANumber // objCANumber
					, objCAOrg // objCAOrg
					, objCAEffDTimeUTCStart // objCAEffDTimeUTCStart
					, objCAEffDTimeUTCEnd // objCAEffDTimeUTCEnd
					, objPackageCode // objPackageCode
					, objCreatedDate // objCreatedDate
					, objAccNo // objAccNo
					, objAccHolder // objAccHolder
					, objBankName // objBankName
					, objBizType // objBizType
					, objBizFieldCode // objBizFieldCode
					, objBizSizeCode // objBizSizeCode
					, objDealerType // objDealerType
									////
					, objDepartmentCode // objDepartmentCode
										////
					, objUserPassword // objUserPassword
					, objUserPasswordRepeat // objUserPasswordRepeat
											//////
											//, objQtyLicense
											////
					, dsData // dsData
					);

				//bFlagRptSvMstNNtAdd = true;
			}
			#endregion

			#region // Save Order:
			if (bFlagIsCreateOrder)
			{
				#region // Save InosCreateOrder:
				Inos_LicOrder objInos_LicOrderResult = null;
				{
					////
					objInos_LicOrder.OrgId = Convert.ToString(dt_Lst_MstSv_Inos_Org.Rows[0]["Id"]);

					objInos_LicOrderResult = Inos_OrderService_CreateOrderX_New20190913(
						strTid // strTid
						, strGwUserCode // strGwUserCode
						, strGwPassword // strGwPassword
						, strWAUserCode // strWAUserCode
						, strWAUserPassword // strWAUserPassword
						, (string)objAccessToken // strAccessToken
						, ref alParamsCoupleError // alParamsCoupleError
						, dtimeSys // dtimeSys
						, objInos_LicOrder // strRt_Cols_OS_Inos_LicOrder
						);

					objRT_Mst_NNT.Inos_LicOrder = objInos_LicOrderResult;
				}
				#endregion

				#region // Upd MstSv_Inos_Org:
				{
					////
					string strUpdDB_MstSv_Inos_Org = CmUtils.StringUtils.Replace(@"
							---- MstSv_Inos_Org:
							update t 
							set
								t.OrderId = '@strOrderId'
							from MstSv_Inos_Org t --//[mylock]
							where (1=1)
								and t.Id = '@strId'
							;
						"
						, "@strId", dt_Lst_MstSv_Inos_Org.Rows[0]["Id"]
						, "@strOrderId", objInos_LicOrderResult.Id
						);

					_cf.db.ExecQuery(
						strUpdDB_MstSv_Inos_Org
						);
				}
				#endregion

				#region // Save Lic:
				{
					////
					DataSet dsGetData = null;

					List<OrgLicense> lstOrgLicense = Inos_LicService_GetOrgLicenseX(
						 strTid // strTid
						, strGwUserCode // strGwUserCode
						, strGwPassword // strGwPassword
						, strWAUserCode // strWAUserCode
						, strWAUserPassword // strWAUserPassword
						, (string)objAccessToken // strAccessToken
						, ref mdsFinal // mdsFinal
						, ref alParamsCoupleError // alParamsCoupleError
						, dtimeSys // dtimeSys
								   ////
						, dt_Lst_MstSv_Inos_Org.Rows[0]["Id"] // objOrgID
															  ////
						, out dsGetData // dsData
						);
					////

					#region // Sys_Solution: Get.
					////
					DataTable dtDB_Sys_Solution = null;
					{
						// GetInfo:
						dtDB_Sys_Solution = TDALUtils.DBUtils.GetTableContents(
							_cf.db // db
							, "Sys_Solution" // strTableName
							, "top 1 *" // strColumnList
							, "" // strClauseOrderBy
							, "FlagActive", "=", TConst.Flag.Active // arrobjParamsTriple item
							);
					}
					#endregion

					////
					List<OrgSolutionUser> lstOrgSolutionUser = new List<OrgSolutionUser>();
					long lgOrgID = Convert.ToInt64(dt_Lst_MstSv_Inos_Org.Rows[0]["Id"]);
					//foreach (var item in lstOrgLicense)
					//{
					//	OrgSolutionUser obj = new OrgSolutionUser();
					//	obj.LicId = item.Id;
					//	obj.UserId = Convert.ToInt64(dt_Lst_MstSv_Inos_User.Rows[0]["Id"]);
					//	lstOrgSolutionUser.Add(obj);
					//}
					////
					OrderService objOrderService = new OrderService(null);
					objOrderService.AccessToken = strAccessToken;
					objAccountService.AccessToken = strAccessToken;
					var user = objAccountService.GetCurrentUser();
					LicOrder ret = new LicOrder();
					ret.Id = Convert.ToInt64(objInos_LicOrderResult.Id);
					LicOrder objLicOrderResult = objOrderService.GetOrderDetail(ret);
					List<LicOrderDetail> objDetailList = objLicOrderResult.DetailList;

					foreach (var obj in objDetailList)
					{
						OrgLicense objOrgLicense = obj.Lic;

						List<OrgSolution> lstOrgSolutions = objOrgLicense.OrgSolutionList;

						foreach (var item in lstOrgSolutions)
						{
							OrgSolutionUser objOrgSolutionUser = new OrgSolutionUser();

							objOrgSolutionUser.LicId = item.LicId;
							objOrgSolutionUser.SolutionCode = item.SolutionCode;
							objOrgSolutionUser.UserId = user.Id;

							lstOrgSolutionUser.Add(objOrgSolutionUser);
						}

					}

					////
					OSiNOSSv.LicService objLicService = new OSiNOSSv.LicService(null);
					objLicService.AccessToken = strAccessToken;

					List<OrgSolutionUser> lstOrgSolutionUserFinal = new List<OrgSolutionUser>();

					foreach (var obj in lstOrgSolutionUser)
					{
						////
						List<OrgSolutionUser> ret1 = objLicService.GetOrgSolutionUsers(
							Convert.ToString(dtDB_Sys_Solution.Rows[0]["SolutionCode"])
							, obj.LicId
							, lgOrgID
							);

						var objOrgSolutionUser = ret1.FirstOrDefault(x => x.LicId == obj.LicId && x.UserId == obj.UserId);

						if (objOrgSolutionUser == null)
						{
							////
							lstOrgSolutionUserFinal.Add(obj);
						}
					}
					////

					var result = objLicService.AddOrgSolutionUsers(null, lgOrgID, lstOrgSolutionUserFinal);
					////
					//DataSet dsData = null;

					//Int32 result = Inos_LicService_AddOrgSolutionUsersX(
					//	 strTid // strTid
					//	, strGwUserCode // strGwUserCode
					//	, strGwPassword // strGwPassword
					//	, strWAUserCode // strWAUserCode
					//	, strWAUserPassword // strWAUserPassword
					//	, (string)objAccessToken // strAccessToken
					//	, ref mdsFinal // mdsFinal
					//	, ref alParamsCoupleError // alParamsCoupleError
					//	, dtimeSys // dtimeSys
					//			   ////
					//	, dtDB_Sys_Solution.Rows[0]["SolutionCode"] // objSolutionCode
					//	, dt_Lst_MstSv_Inos_Org.Rows[0]["Id"] // objOrgID
					//	, lstOrgSolutionUserFinal // lstOrgSolutionUser
					//	////
					//	, out dsData
					//	);
				}
				#endregion
			}
			else
			{
				#region // Upd MstSv_Inos_Org:
				{
					////
					string strUpdDB_MstSv_Inos_Org = CmUtils.StringUtils.Replace(@"
							---- MstSv_Inos_Org:
							update t 
							set
								t.OrderId = '@strOrderId'
							from MstSv_Inos_Org t --//[mylock]
							where (1=1)
								and t.Id = '@strId'
							;
						"
                        , "@strId", objId_InosCreateOrg
                        , "@strOrderId", objInos_LicOrder.Id
                        );

					_cf.db.ExecQuery(
						strUpdDB_MstSv_Inos_Org
						);
				}
				#endregion
			}
			#endregion

			// Return Good:
			//TDALUtils.DBUtils.CommitSafety(_cf.db);
			mdsFinal.AcceptChanges();
			//return mdsFinal;
		}
		private void RptSv_Mst_NNT_AddX(
			string strTid
			, string strGwUserCode
			, string strGwPassword
			, string strWAUserCode
			, string strWAUserPassword
			, string strAccessToken
			, ref DataSet mdsFinal
			, ref ArrayList alParamsCoupleError
			//// InosCreateUser
			, object objName_InosCreateUser
			, object objEmail_InosCreateUser
			, object objPassword_InosCreateUser
			, object objLanguage_InosCreateUser
			, object objTimeZone_InosCreateUser
			, object objVerificationCode_InosCreateUser
			//// InosCreateOrg
			, object objParentId_InosCreateOrg
			, object objName_InosCreateOrg
			, object objBizTypeId_InosCreateOrg
			, object objBizTypeName_InosCreateOrg
			, object objBizFieldId_InosCreateOrg
			, object objBizFieldName_InosCreateOrg
			, object objContactName_InosCreateOrg
			, object objEmail_InosCreateOrg
			, object objPhoneNo_InosCreateOrg
			, object objDescription_InosCreateOrg
			, object objEnable_InosCreateOrg
			//// RptSv
			, object objMST
			, object objNNTFullName
			, object objMSTParent
			, object objProvinceCode
			, object objDistrictCode
			//, object objNNTType
			, object objDLCode
			, object objNNTAddress
			, object objNNTMobile
			, object objNTTPhone
			, object objNNTFax
			, object objPresentBy
			, object objBusinessRegNo
			, object objNNTPosition
			, object objPresentIDNo
			, object objPresentIDType
			, object objGovTaxID
			, object objContactName
			, object objContactPhone
			, object objContactEmail
			, object objWebsite
			, object objCANumber
			, object objCAOrg
			, object objCAEffDTimeUTCStart
			, object objCAEffDTimeUTCEnd
			, object objPackageCode
			, object objCreatedDate
			, object objAccNo
			, object objAccHolder
			, object objBankName
			, object objBizType
			, object objBizFieldCode
			, object objBizSizeCode
			////
			, object objDepartmentCode
			////
			, object objUserPassword
			, object objUserPasswordRepeat
			//////
			//, object objQtyLicense
			////
			//, DataSet dsData
			//// InosCreateOrder
			, Inos_LicOrder objInos_LicOrder
			////
			, ref RT_Mst_NNT objRT_Mst_NNT
			)
		{
			#region // Temp:
			//DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
			//int nTidSeq = 0;
			DateTime dtimeSys = DateTime.UtcNow;
			string strFunctionName = "RptSv_Mst_NNT_AddX";
			//string strErrorCodeDefault = TError.ErridnInventory.WA_Mst_NNT_Registry;
			alParamsCoupleError.AddRange(new object[]{
					"strFunctionName", strFunctionName
					, "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
			        ////
					, "objMST", objMST
					, "objNNTFullName", objNNTFullName
					, "objMSTParent", objMSTParent
					, "objProvinceCode", objProvinceCode
					, "objDistrictCode", objDistrictCode
                    //, "objNNTType", objNNTType
                    , "objDLCode", objDLCode
					, "objNNTAddress", objNNTAddress
					, "objNNTMobile", objNNTMobile
					//, "objNTTPhone", objNTTPhone
					//, "objNNTFax", objNNTFax
					//, "objPresentBy", objPresentBy
					//, "objBusinessRegNo", objBusinessRegNo
					//, "objNNTPosition", objNNTPosition
					//, "objPresentIDNo", objPresentIDNo
					//, "objPresentIDType", objPresentIDType
					//, "objGovTaxID", objGovTaxID
					, "objContactName", objContactName
					, "objContactPhone", objContactPhone
					, "objContactEmail", objContactEmail
					, "objWebsite", objWebsite
					, "objCANumber", objCANumber
					, "objCAOrg", objCAOrg
					, "objCAEffDTimeUTCStart", objCAEffDTimeUTCStart
					, "objCAEffDTimeUTCEnd", objCAEffDTimeUTCEnd
					, "objPackageCode", objPackageCode
					, "objAccNo", objAccNo
					, "objAccHolder", objAccHolder
					, "objBankName", objBankName
					, "objBankName", objBizType
					, "objBizFieldCode", objBizFieldCode
					, "objBizSizeCode", objBizSizeCode
                    /////
                    , "objDepartmentCode", objDepartmentCode
                    ////
                    , "objUserPassword", objUserPassword
					, "objUserPasswordRepeat", objUserPasswordRepeat
					////
					//, "objQtyLicense", objQtyLicense
					});
			#endregion

			#region // Refine and Check Input:
			//bool bFlagInosCreateUser = false;
			//bool bFlagInosCreateOrg = false;
			//bool bFlagRptSvMstNNtAdd = false;
			//bool bFlagInosCreateOrder = false;
			#endregion

			#region // Save InosCreateUser:
			////
			DataTable dt_Lst_MstSv_Inos_User = new DataTable();
			{
				#region // Get Data:
				DataSet dsGetData = null;
				string strRt_Cols_OS_Inos_User = "*";

				//// Refine:
				bool bGet_OS_Inos_User = (strRt_Cols_OS_Inos_User != null && strRt_Cols_OS_Inos_User.Length > 0);

				if (bGet_OS_Inos_User)
				{
					////
					RptSv_Inos_OrgService_CreateUserX(
						strTid // strTid
						, strGwUserCode // strGwUserCode
						, strGwPassword // strGwPassword
						, strWAUserCode // strWAUserCode
						, strWAUserPassword // strWAUserPassword
						, strAccessToken // strAccessToken
						, ref mdsFinal // mdsFinal
						, ref alParamsCoupleError // alParamsCoupleError
						, dtimeSys // dtimeSys
						////
						, objName_InosCreateUser
						, objEmail_InosCreateUser
						, objPassword_InosCreateUser
						, objLanguage_InosCreateUser
						, objTimeZone_InosCreateUser
						, objVerificationCode_InosCreateUser
						////
						, out dsGetData // dsData
						);

					dt_Lst_MstSv_Inos_User = dsGetData.Tables[0].Copy();
					dt_Lst_MstSv_Inos_User.TableName = "MstSv_Inos_User";
					////
					TUtils.CUtils.MyForceNewColumn(ref dt_Lst_MstSv_Inos_User, "MST", typeof(object));
					TUtils.CUtils.MyForceNewColumn(ref dt_Lst_MstSv_Inos_User, "UUID", typeof(object));
					TUtils.CUtils.MyForceNewColumn(ref dt_Lst_MstSv_Inos_User, "FlagEmailActivate", typeof(object));
					TUtils.CUtils.MyForceNewColumn(ref dt_Lst_MstSv_Inos_User, "FlagAdmin", typeof(object));
					TUtils.CUtils.MyForceNewColumn(ref dt_Lst_MstSv_Inos_User, "FlagEmailSend", typeof(object));

					////
					for (int nScan = 0; nScan < dt_Lst_MstSv_Inos_User.Rows.Count; nScan++)
					{
						////
						DataRow drScan = dt_Lst_MstSv_Inos_User.Rows[nScan];

						////
						drScan["MST"] = objMST;
						drScan["UUID"] = "0";
						drScan["FlagEmailActivate"] = TConst.Flag.Inactive;
						drScan["FlagAdmin"] = TConst.Flag.Active;
						drScan["FlagEmailSend"] = TConst.Flag.Inactive;

					}
				}				
				#endregion
			}
			#endregion

			#region // Save InosCreateOrg:
			object objAccessToken = null;
			DataTable dt_Lst_MstSv_Inos_Org = null;
			{
				////
				Inos_AccountService_GetAccessTokenX(
					strTid // strTid
					, strGwUserCode // strGwUserCode
					, strGwPassword // strGwPassword
					, strWAUserCode // strWAUserCode
					, strWAUserPassword // strWAUserPassword
					, ref mdsFinal // mdsFinal
					, ref alParamsCoupleError // alParamsCoupleError
					, dtimeSys // dtimeSys
							   ////
					, objEmail_InosCreateUser // objEmail
					, objPassword_InosCreateUser // objPassword
					////
					, out objAccessToken // objAccessToken
					);
				////
				DataSet dsGetData = null;

				////
				RptSv_Inos_OrgService_CreateOrgX(
					strTid // strTid
					, strGwUserCode // strGwUserCode
					, strGwPassword // strGwPassword
					, strWAUserCode // strWAUserCode
					, strWAUserPassword // strWAUserPassword
					, (string)objAccessToken // strAccessToken
					, ref mdsFinal // mdsFinal
					, ref alParamsCoupleError // alParamsCoupleError
					, dtimeSys // dtimeSys
							   ////
					, objParentId_InosCreateOrg
					, objName_InosCreateOrg
					, objBizTypeId_InosCreateOrg
					, objBizTypeName_InosCreateOrg
					, objBizFieldId_InosCreateOrg
					, objBizFieldName_InosCreateOrg
					, objContactName_InosCreateOrg
					, objEmail_InosCreateOrg
					, objPhoneNo_InosCreateOrg
					, objDescription_InosCreateOrg
					, objEnable_InosCreateOrg
					////
					, out dsGetData // dsData
					);

				dt_Lst_MstSv_Inos_Org = dsGetData.Tables[0].Copy();
				dt_Lst_MstSv_Inos_Org.TableName = "MstSv_Inos_Org";

				////
				TUtils.CUtils.MyForceNewColumn(ref dt_Lst_MstSv_Inos_Org, "MST", typeof(object));

				////
				for (int nScan = 0; nScan < dt_Lst_MstSv_Inos_Org.Rows.Count; nScan++)
				{
					////
					DataRow drScan = dt_Lst_MstSv_Inos_Org.Rows[nScan];

					////
					drScan["MST"] = objMST;

				}
			}
			#endregion

			#region // Save RptSvMstNNtAdd:
			{
				DataSet dsData = new DataSet();
				dsData.Tables.Add(dt_Lst_MstSv_Inos_User);
				dsData.Tables.Add(dt_Lst_MstSv_Inos_Org);

				RptSv_Mst_NNT_RegisterX(
					strTid // strTid
					, strGwUserCode // strGwUserCode
					, strGwPassword // strGwPassword
					, strWAUserCode // strWAUserCode
					, strWAUserPassword // strWAUserPassword
					, (string)objAccessToken // strAccessToken
					, ref mdsFinal // mdsFinal
					, ref alParamsCoupleError // alParamsCoupleError
											  ////
					, objMST // objMST
					, objNNTFullName // objNNTFullName
					, objMSTParent // objMSTParent
					, objProvinceCode // objProvinceCode
					, objDistrictCode // objDistrictCode
									  //, objNNTType
					, objDLCode // objDLCode
					, objNNTAddress // objNNTAddress
					, objNNTMobile // objNNTMobile
					, objNTTPhone // objNTTPhone
					, objNNTFax // objNNTFax
					, objPresentBy // objPresentBy
					, objBusinessRegNo // objBusinessRegNo
					, objNNTPosition // objNNTPosition
					, objPresentIDNo // objPresentIDNo
					, objPresentIDType // objPresentIDType
					, objGovTaxID // objGovTaxID
					, objContactName // objContactName
					, objContactPhone // objContactPhone
					, objContactEmail // objContactEmail
					, objWebsite // objWebsite
					, objCANumber // objCANumber
					, objCAOrg // objCAOrg
					, objCAEffDTimeUTCStart // objCAEffDTimeUTCStart
					, objCAEffDTimeUTCEnd // objCAEffDTimeUTCEnd
					, objPackageCode // objPackageCode
					, objCreatedDate // objCreatedDate
					, objAccNo // objAccNo
					, objAccHolder // objAccHolder
					, objBankName // objBankName
					, objBizType // objBizType
					, objBizFieldCode // objBizFieldCode
					, objBizSizeCode // objBizSizeCode
									 ////
					, objDepartmentCode // objDepartmentCode
										////
					, objUserPassword // objUserPassword
					, objUserPasswordRepeat // objUserPasswordRepeat
					//////
					//, objQtyLicense
					////
					, dsData // dsData
					);

				//bFlagRptSvMstNNtAdd = true;
			}
			#endregion

			#region // Save InosCreateOrder:
			Inos_LicOrder objInos_LicOrderResult = null;
			{
				////
				objInos_LicOrder.OrgId = Convert.ToString(dt_Lst_MstSv_Inos_Org.Rows[0]["Id"]);

				objInos_LicOrderResult = Inos_OrderService_CreateOrderX_New20190913(
					strTid // strTid
					, strGwUserCode // strGwUserCode
					, strGwPassword // strGwPassword
					, strWAUserCode // strWAUserCode
					, strWAUserPassword // strWAUserPassword
					, (string)objAccessToken // strAccessToken
					, ref alParamsCoupleError // alParamsCoupleError
					, dtimeSys // dtimeSys
					, objInos_LicOrder // strRt_Cols_OS_Inos_LicOrder
					);

				objRT_Mst_NNT.Inos_LicOrder = objInos_LicOrderResult;
			}
			#endregion

			#region // Upd MstSv_Inos_Org:
			{
				////
				string strUpdDB_MstSv_Inos_Org = CmUtils.StringUtils.Replace(@"
						---- MstSv_Inos_Org:
						update t 
						set
							t.OrderId = '@strOrderId'
						from MstSv_Inos_Org t --//[mylock]
						where (1=1)
							and t.Id = '@strId'
						;
					"
					, "@strId", dt_Lst_MstSv_Inos_Org.Rows[0]["Id"]
					, "@strOrderId", objInos_LicOrderResult.Id
					);

				_cf.db.ExecQuery(
					strUpdDB_MstSv_Inos_Org
					);
			}
			#endregion

			#region // Save Lic:
			{
				////
				DataSet dsGetData = null;

				List<OrgLicense> lstOrgLicense = Inos_LicService_GetOrgLicenseX(
					 strTid // strTid
					, strGwUserCode // strGwUserCode
					, strGwPassword // strGwPassword
					, strWAUserCode // strWAUserCode
					, strWAUserPassword // strWAUserPassword
					, (string)objAccessToken // strAccessToken
					, ref mdsFinal // mdsFinal
					, ref alParamsCoupleError // alParamsCoupleError
					, dtimeSys // dtimeSys
							   ////
					, dt_Lst_MstSv_Inos_Org.Rows[0]["Id"] // objOrgID
														  ////
					, out dsGetData // dsData
					);
				////

				#region // Sys_Solution: Get.
				////
				DataTable dtDB_Sys_Solution = null;
				{
					// GetInfo:
					dtDB_Sys_Solution = TDALUtils.DBUtils.GetTableContents(
						_cf.db // db
						, "Sys_Solution" // strTableName
						, "top 1 *" // strColumnList
						, "" // strClauseOrderBy
						, "FlagActive", "=", TConst.Flag.Active // arrobjParamsTriple item
						);
				}
				#endregion

				////
				List<OrgSolutionUser> lstOrgSolutionUser = new List<OrgSolutionUser>();

				foreach (var item in lstOrgLicense)
				{
					OrgSolutionUser obj = new OrgSolutionUser();
					obj.LicId = item.Id;
					obj.UserId = Convert.ToInt64(dt_Lst_MstSv_Inos_User.Rows[0]["Id"]);
					lstOrgSolutionUser.Add(obj);
				}

				Int32 result = Inos_LicService_AddOrgSolutionUsersX(
					 strTid // strTid
					, strGwUserCode // strGwUserCode
					, strGwPassword // strGwPassword
					, strWAUserCode // strWAUserCode
					, strWAUserPassword // strWAUserPassword
					, (string)objAccessToken // strAccessToken
					, ref mdsFinal // mdsFinal
					, ref alParamsCoupleError // alParamsCoupleError
					, dtimeSys // dtimeSys
							   ////
					, dtDB_Sys_Solution.Rows[0]["SolutionCode"] // objSolutionCode
					, dt_Lst_MstSv_Inos_Org.Rows[0]["Id"] // objOrgID
					, lstOrgSolutionUser // lstOrgSolutionUser
										 ////
					, out DataSet dsData
					);
			}
			#endregion

			// Return Good:
			//TDALUtils.DBUtils.CommitSafety(_cf.db);
			mdsFinal.AcceptChanges();
			//return mdsFinal;
		}


		private void RptSv_Mst_NNT_AddX_New20200208(
			string strTid
			, string strGwUserCode
			, string strGwPassword
			, string strWAUserCode
			, string strWAUserPassword
			, string strAccessToken
			, ref DataSet mdsFinal
			, ref ArrayList alParamsCoupleError
			//// InosCreateUser
			, object objName_InosCreateUser
			, object objEmail_InosCreateUser
			, object objPassword_InosCreateUser
			, object objLanguage_InosCreateUser
			, object objTimeZone_InosCreateUser
			, object objVerificationCode_InosCreateUser
			//// InosCreateOrg
			, object objParentId_InosCreateOrg
			, object objName_InosCreateOrg
			, object objBizTypeId_InosCreateOrg
			, object objBizTypeName_InosCreateOrg
			, object objBizFieldId_InosCreateOrg
			, object objBizFieldName_InosCreateOrg
			, object objContactName_InosCreateOrg
			, object objEmail_InosCreateOrg
			, object objPhoneNo_InosCreateOrg
			, object objDescription_InosCreateOrg
			, object objEnable_InosCreateOrg
			//// RptSv
			, object objMST
			, object objNNTFullName
			, object objMSTParent
			, object objProvinceCode
			, object objDistrictCode
			//, object objNNTType
			, object objDLCode
			, object objNNTAddress
			, object objNNTMobile
			, object objNTTPhone
			, object objNNTFax
			, object objPresentBy
			, object objBusinessRegNo
			, object objNNTPosition
			, object objPresentIDNo
			, object objPresentIDType
			, object objGovTaxID
			, object objContactName
			, object objContactPhone
			, object objContactEmail
			, object objWebsite
			, object objCANumber
			, object objCAOrg
			, object objCAEffDTimeUTCStart
			, object objCAEffDTimeUTCEnd
			, object objPackageCode
			, object objCreatedDate
			, object objAccNo
			, object objAccHolder
			, object objBankName
			, object objBizType
			, object objBizFieldCode
			, object objBizSizeCode
			, object objDealerType
			////
			, object objDepartmentCode
			////
			, object objUserPassword
			, object objUserPasswordRepeat
			//////
			//, object objQtyLicense
			////
			//, DataSet dsData
			//// InosCreateOrder
			, Inos_LicOrder objInos_LicOrder
			////
			, ref RT_Mst_NNT objRT_Mst_NNT
			)
		{
			#region // Temp:
			//DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
			//int nTidSeq = 0;
			DateTime dtimeSys = DateTime.UtcNow;
			string strFunctionName = "RptSv_Mst_NNT_AddX";
			//string strErrorCodeDefault = TError.ErridNTVAN.WA_Mst_NNT_Registry;
			alParamsCoupleError.AddRange(new object[]{
					"strFunctionName", strFunctionName
					, "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
			        ////
					, "objMST", objMST
					, "objNNTFullName", objNNTFullName
					, "objMSTParent", objMSTParent
					, "objProvinceCode", objProvinceCode
					, "objDistrictCode", objDistrictCode
                    //, "objNNTType", objNNTType
                    , "objDLCode", objDLCode
					, "objNNTAddress", objNNTAddress
					, "objNNTMobile", objNNTMobile
					, "objNTTPhone", objNTTPhone
					, "objNNTFax", objNNTFax
					, "objPresentBy", objPresentBy
					, "objBusinessRegNo", objBusinessRegNo
					, "objNNTPosition", objNNTPosition
					, "objPresentIDNo", objPresentIDNo
					, "objPresentIDType", objPresentIDType
					, "objGovTaxID", objGovTaxID
					, "objContactName", objContactName
					, "objContactPhone", objContactPhone
					, "objContactEmail", objContactEmail
					, "objWebsite", objWebsite
					, "objCANumber", objCANumber
					, "objCAOrg", objCAOrg
					, "objCAEffDTimeUTCStart", objCAEffDTimeUTCStart
					, "objCAEffDTimeUTCEnd", objCAEffDTimeUTCEnd
					, "objPackageCode", objPackageCode
					, "objAccNo", objAccNo
					, "objAccHolder", objAccHolder
					, "objBankName", objBankName
					, "objBankName", objBizType
					, "objBizFieldCode", objBizFieldCode
					, "objBizSizeCode", objBizSizeCode
                    /////
                    , "objDepartmentCode", objDepartmentCode
                    ////
                    , "objUserPassword", objUserPassword
					, "objUserPasswordRepeat", objUserPasswordRepeat
					////
					//, "objQtyLicense", objQtyLicense
					});
			#endregion

			#region // Refine and Check Input:
			//bool bFlagInosCreateUser = false;
			//bool bFlagInosCreateOrg = false;
			//bool bFlagRptSvMstNNtAdd = false;
			//bool bFlagInosCreateOrder = false;
			#endregion

			#region // Save InosCreateUser:
			////
			DataTable dt_Lst_MstSv_Inos_User = new DataTable();
			{
				#region // Get Data:
				DataSet dsGetData = null;
				string strRt_Cols_OS_Inos_User = "*";

				//// Refine:
				bool bGet_OS_Inos_User = (strRt_Cols_OS_Inos_User != null && strRt_Cols_OS_Inos_User.Length > 0);

				if (bGet_OS_Inos_User)
				{
					////
					RptSv_Inos_OrgService_CreateUserX(
						strTid // strTid
						, strGwUserCode // strGwUserCode
						, strGwPassword // strGwPassword
						, strWAUserCode // strWAUserCode
						, strWAUserPassword // strWAUserPassword
						, strAccessToken // strAccessToken
						, ref mdsFinal // mdsFinal
						, ref alParamsCoupleError // alParamsCoupleError
						, dtimeSys // dtimeSys
								   ////
						, objName_InosCreateUser
						, objEmail_InosCreateUser
						, objPassword_InosCreateUser
						, objLanguage_InosCreateUser
						, objTimeZone_InosCreateUser
						, objVerificationCode_InosCreateUser
						////
						, out dsGetData // dsData
						);

					dt_Lst_MstSv_Inos_User = dsGetData.Tables[0].Copy();
					dt_Lst_MstSv_Inos_User.TableName = "MstSv_Inos_User";
					////
					TUtils.CUtils.MyForceNewColumn(ref dt_Lst_MstSv_Inos_User, "MST", typeof(object));
					TUtils.CUtils.MyForceNewColumn(ref dt_Lst_MstSv_Inos_User, "UUID", typeof(object));
					TUtils.CUtils.MyForceNewColumn(ref dt_Lst_MstSv_Inos_User, "FlagEmailActivate", typeof(object));
					TUtils.CUtils.MyForceNewColumn(ref dt_Lst_MstSv_Inos_User, "FlagAdmin", typeof(object));
					TUtils.CUtils.MyForceNewColumn(ref dt_Lst_MstSv_Inos_User, "FlagEmailSend", typeof(object));

					////
					for (int nScan = 0; nScan < dt_Lst_MstSv_Inos_User.Rows.Count; nScan++)
					{
						////
						DataRow drScan = dt_Lst_MstSv_Inos_User.Rows[nScan];

						////
						drScan["MST"] = objMST;
						drScan["UUID"] = "0";
						drScan["FlagEmailActivate"] = TConst.Flag.Inactive;
						drScan["FlagAdmin"] = TConst.Flag.Active;
						drScan["FlagEmailSend"] = TConst.Flag.Inactive;

					}
				}
				#endregion
			}
			#endregion

			#region // Save InosCreateOrg:
			object objAccessToken = null;
			DataTable dt_Lst_MstSv_Inos_Org = null;
			{
				////
				Inos_AccountService_GetAccessTokenX(
					strTid // strTid
					, strGwUserCode // strGwUserCode
					, strGwPassword // strGwPassword
					, strWAUserCode // strWAUserCode
					, strWAUserPassword // strWAUserPassword
					, ref mdsFinal // mdsFinal
					, ref alParamsCoupleError // alParamsCoupleError
					, dtimeSys // dtimeSys
							   ////
					, objEmail_InosCreateUser // objEmail
					, objPassword_InosCreateUser // objPassword
												 ////
					, out objAccessToken // objAccessToken
					);
				////
				DataSet dsGetData = null;

				////
				RptSv_Inos_OrgService_CreateOrgX(
					strTid // strTid
					, strGwUserCode // strGwUserCode
					, strGwPassword // strGwPassword
					, strWAUserCode // strWAUserCode
					, strWAUserPassword // strWAUserPassword
					, (string)objAccessToken // strAccessToken
					, ref mdsFinal // mdsFinal
					, ref alParamsCoupleError // alParamsCoupleError
					, dtimeSys // dtimeSys
							   ////
					, objParentId_InosCreateOrg
					, objName_InosCreateOrg
					, objBizTypeId_InosCreateOrg
					, objBizTypeName_InosCreateOrg
					, objBizFieldId_InosCreateOrg
					, objBizFieldName_InosCreateOrg
					, objContactName_InosCreateOrg
					, objEmail_InosCreateOrg
					, objPhoneNo_InosCreateOrg
					, objDescription_InosCreateOrg
					, objEnable_InosCreateOrg
					////
					, out dsGetData // dsData
					);

				dt_Lst_MstSv_Inos_Org = dsGetData.Tables[0].Copy();
				dt_Lst_MstSv_Inos_Org.TableName = "MstSv_Inos_Org";

				////
				TUtils.CUtils.MyForceNewColumn(ref dt_Lst_MstSv_Inos_Org, "MST", typeof(object));

				////
				for (int nScan = 0; nScan < dt_Lst_MstSv_Inos_Org.Rows.Count; nScan++)
				{
					////
					DataRow drScan = dt_Lst_MstSv_Inos_Org.Rows[nScan];

					////
					drScan["MST"] = objMST;

				}
			}
			#endregion

			#region // Save RptSvMstNNtAdd:
			{
				DataSet dsData = new DataSet();
				dsData.Tables.Add(dt_Lst_MstSv_Inos_User);
				dsData.Tables.Add(dt_Lst_MstSv_Inos_Org);

				RptSv_Mst_NNT_RegisterX_New20200208(
					strTid // strTid
					, strGwUserCode // strGwUserCode
					, strGwPassword // strGwPassword
					, strWAUserCode // strWAUserCode
					, strWAUserPassword // strWAUserPassword
					, (string)objAccessToken // strAccessToken
					, ref mdsFinal // mdsFinal
					, ref alParamsCoupleError // alParamsCoupleError
											  ////
					, objMST // objMST
					, objNNTFullName // objNNTFullName
					, objMSTParent // objMSTParent
					, objProvinceCode // objProvinceCode
					, objDistrictCode // objDistrictCode
									  //, objNNTType
					, objDLCode // objDLCode
					, objNNTAddress // objNNTAddress
					, objNNTMobile // objNNTMobile
					, objNTTPhone // objNTTPhone
					, objNNTFax // objNNTFax
					, objPresentBy // objPresentBy
					, objBusinessRegNo // objBusinessRegNo
					, objNNTPosition // objNNTPosition
					, objPresentIDNo // objPresentIDNo
					, objPresentIDType // objPresentIDType
					, objGovTaxID // objGovTaxID
					, objContactName // objContactName
					, objContactPhone // objContactPhone
					, objContactEmail // objContactEmail
					, objWebsite // objWebsite
					, objCANumber // objCANumber
					, objCAOrg // objCAOrg
					, objCAEffDTimeUTCStart // objCAEffDTimeUTCStart
					, objCAEffDTimeUTCEnd // objCAEffDTimeUTCEnd
					, objPackageCode // objPackageCode
					, objCreatedDate // objCreatedDate
					, objAccNo // objAccNo
					, objAccHolder // objAccHolder
					, objBankName // objBankName
					, objBizType // objBizType
					, objBizFieldCode // objBizFieldCode
					, objBizSizeCode // objBizSizeCode
					, objDealerType // objDealerType
									////
					, objDepartmentCode // objDepartmentCode
										////
					, objUserPassword // objUserPassword
					, objUserPasswordRepeat // objUserPasswordRepeat
											//////
											//, objQtyLicense
											////
					, dsData // dsData
					);

				//bFlagRptSvMstNNtAdd = true;
			}
			#endregion

			#region // Save InosCreateOrder:
			Inos_LicOrder objInos_LicOrderResult = null;
			{
				////
				objInos_LicOrder.OrgId = Convert.ToString(dt_Lst_MstSv_Inos_Org.Rows[0]["Id"]);

				objInos_LicOrderResult = Inos_OrderService_CreateOrderX_New20190913(
					strTid // strTid
					, strGwUserCode // strGwUserCode
					, strGwPassword // strGwPassword
					, strWAUserCode // strWAUserCode
					, strWAUserPassword // strWAUserPassword
					, (string)objAccessToken // strAccessToken
					, ref alParamsCoupleError // alParamsCoupleError
					, dtimeSys // dtimeSys
					, objInos_LicOrder // strRt_Cols_OS_Inos_LicOrder
					);

				objRT_Mst_NNT.Inos_LicOrder = objInos_LicOrderResult;
			}
			#endregion

			#region // Upd MstSv_Inos_Org:
			{
				////
				string strUpdDB_MstSv_Inos_Org = CmUtils.StringUtils.Replace(@"
						---- MstSv_Inos_Org:
						update t 
						set
							t.OrderId = '@strOrderId'
						from MstSv_Inos_Org t --//[mylock]
						where (1=1)
							and t.Id = '@strId'
						;
					"
					, "@strId", dt_Lst_MstSv_Inos_Org.Rows[0]["Id"]
					, "@strOrderId", objInos_LicOrderResult.Id
					);

				_cf.db.ExecQuery(
					strUpdDB_MstSv_Inos_Org
					);
			}
			#endregion

			#region // Save Lic:
			{
				////
				DataSet dsGetData = null;

				List<OrgLicense> lstOrgLicense = Inos_LicService_GetOrgLicenseX(
					 strTid // strTid
					, strGwUserCode // strGwUserCode
					, strGwPassword // strGwPassword
					, strWAUserCode // strWAUserCode
					, strWAUserPassword // strWAUserPassword
					, (string)objAccessToken // strAccessToken
					, ref mdsFinal // mdsFinal
					, ref alParamsCoupleError // alParamsCoupleError
					, dtimeSys // dtimeSys
							   ////
					, dt_Lst_MstSv_Inos_Org.Rows[0]["Id"] // objOrgID
														  ////
					, out dsGetData // dsData
					);
				////

				#region // Sys_Solution: Get.
				////
				//DataTable dtDB_Sys_Solution = null;
				//{
				//    // GetInfo:
				//    dtDB_Sys_Solution = TDALUtils.DBUtils.GetTableContents(
				//        _cf.db // db
				//        , "Sys_Solution" // strTableName
				//        , "top 1 *" // strColumnList
				//        , "" // strClauseOrderBy
				//        , "FlagActive", "=", TConst.Flag.Active // arrobjParamsTriple item
				//        );
				//}
				#endregion

				////
				List<OrgSolutionUser> lstOrgSolutionUser = new List<OrgSolutionUser>();
				long lgOrgID = Convert.ToInt64(dt_Lst_MstSv_Inos_Org.Rows[0]["Id"]);

				OrderService objOrderService = new OrderService(null);
				AccountService objAccountService = new AccountService(null);

				objOrderService.AccessToken = (string)objAccessToken;
				objAccountService.AccessToken = (string)objAccessToken;
				////
				var user = objAccountService.GetCurrentUser();
				////
				LicOrder ret = new LicOrder();
				ret.Id = Convert.ToInt64(objInos_LicOrderResult.Id);
				LicOrder objLicOrderResult = objOrderService.GetOrderDetail(ret);
				List<LicOrderDetail> objDetailList = objLicOrderResult.DetailList;

				foreach (var obj in objDetailList)
				{
					OrgLicense objOrgLicense = obj.Lic;

					List<OrgSolution> lstOrgSolutions = objOrgLicense.OrgSolutionList;

					foreach (var item in lstOrgSolutions)
					{
						OrgSolutionUser objOrgSolutionUser = new OrgSolutionUser();

						objOrgSolutionUser.LicId = item.LicId;
						objOrgSolutionUser.SolutionCode = item.SolutionCode;
						objOrgSolutionUser.UserId = user.Id;

						lstOrgSolutionUser.Add(objOrgSolutionUser);
					}

				}

				////
				OSiNOSSv.LicService objLicService = new OSiNOSSv.LicService(null);
				objLicService.AccessToken = (string)objAccessToken;

				List<OrgSolutionUser> lstOrgSolutionUserFinal = new List<OrgSolutionUser>();

				foreach (var obj in lstOrgSolutionUser)
				{
					////
					List<OrgSolutionUser> ret1 = objLicService.GetOrgSolutionUsers(
						obj.SolutionCode
						, obj.LicId
						, lgOrgID
						);

					var objOrgSolutionUser = ret1.FirstOrDefault(x => x.LicId == obj.LicId && x.UserId == obj.UserId);

					if (objOrgSolutionUser == null)
					{
						////
						lstOrgSolutionUserFinal.Add(obj);
					}
				}
				////

				var result = objLicService.AddOrgSolutionUsers(null, lgOrgID, lstOrgSolutionUserFinal);

				//foreach (var item in lstOrgLicense)
				//{
				//    OrgSolutionUser obj = new OrgSolutionUser();
				//    obj.LicId = item.Id;
				//    obj.UserId = Convert.ToInt64(dt_Lst_MstSv_Inos_User.Rows[0]["Id"]);
				//    lstOrgSolutionUser.Add(obj);
				//}

				//Int32 result = Inos_LicService_AddOrgSolutionUsersX(
				//     strTid // strTid
				//    , strGwUserCode // strGwUserCode
				//    , strGwPassword // strGwPassword
				//    , strWAUserCode // strWAUserCode
				//    , strWAUserPassword // strWAUserPassword
				//    , (string)objAccessToken // strAccessToken
				//    , ref mdsFinal // mdsFinal
				//    , ref alParamsCoupleError // alParamsCoupleError
				//    , dtimeSys // dtimeSys
				//               ////
				//    , dtDB_Sys_Solution.Rows[0]["SolutionCode"] // objSolutionCode
				//    , dt_Lst_MstSv_Inos_Org.Rows[0]["Id"] // objOrgID
				//    , lstOrgSolutionUser // lstOrgSolutionUser
				//                         ////
				//    , out dsGetData
				//    );
			}
			#endregion

			// Return Good:
			//TDALUtils.DBUtils.CommitSafety(_cf.db);
			mdsFinal.AcceptChanges();
			//return mdsFinal;
		}

		private void RptSv_Mst_NNT_CalcX(
			string strTid
			, string strGwUserCode
			, string strGwPassword
			, string strWAUserCode
			, string strWAUserPassword
			, string strAccessToken
			, ref DataSet mdsFinal
			, ref ArrayList alParamsCoupleError
			//// InosCreateUser
			, object objName_InosCreateUser
			, object objEmail_InosCreateUser
			, object objPassword_InosCreateUser
			, object objLanguage_InosCreateUser
			, object objTimeZone_InosCreateUser
			, object objVerificationCode_InosCreateUser
			//// InosCreateOrg
			, object objParentId_InosCreateOrg
			, object objName_InosCreateOrg
			, object objBizTypeId_InosCreateOrg
			, object objBizTypeName_InosCreateOrg
			, object objBizFieldId_InosCreateOrg
			, object objBizFieldName_InosCreateOrg
			, object objContactName_InosCreateOrg
			, object objEmail_InosCreateOrg
			, object objPhoneNo_InosCreateOrg
			, object objDescription_InosCreateOrg
			, object objEnable_InosCreateOrg
			//// RptSv
			, object objMST
			, object objNNTFullName
			, object objMSTParent
			, object objProvinceCode
			, object objDistrictCode
			//, object objNNTType
			, object objDLCode
			, object objNNTAddress
			, object objNNTMobile
			, object objNTTPhone
			, object objNNTFax
			, object objPresentBy
			, object objBusinessRegNo
			, object objNNTPosition
			, object objPresentIDNo
			, object objPresentIDType
			, object objGovTaxID
			, object objContactName
			, object objContactPhone
			, object objContactEmail
			, object objWebsite
			, object objCANumber
			, object objCAOrg
			, object objCAEffDTimeUTCStart
			, object objCAEffDTimeUTCEnd
			, object objPackageCode
			, object objCreatedDate
			, object objAccNo
			, object objAccHolder
			, object objBankName
			, object objBizType
			, object objBizFieldCode
			, object objBizSizeCode
			////
			, object objDepartmentCode
			////
			, object objUserPassword
			, object objUserPasswordRepeat
			//////
			//, object objQtyLicense
			////
			//, DataSet dsData
			//// InosCreateOrder
			, Inos_LicOrder objInos_LicOrder
			////
			, ref RT_Mst_NNT objRT_Mst_NNT
			)
		{
			#region // Temp:
			//DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
			//int nTidSeq = 0;
			DateTime dtimeSys = DateTime.UtcNow;
			string strFunctionName = "RptSv_Mst_NNT_CalcX";
			//string strErrorCodeDefault = TError.ErridnInventory.WA_Mst_NNT_Registry;
			alParamsCoupleError.AddRange(new object[]{
					"strFunctionName", strFunctionName
					, "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
			        ////
					, "objMST", objMST
					, "objNNTFullName", objNNTFullName
					, "objMSTParent", objMSTParent
					, "objProvinceCode", objProvinceCode
					, "objDistrictCode", objDistrictCode
                    //, "objNNTType", objNNTType
                    , "objDLCode", objDLCode
					, "objNNTAddress", objNNTAddress
					, "objNNTMobile", objNNTMobile
					, "objNTTPhone", objNTTPhone
					, "objNNTFax", objNNTFax
					, "objPresentBy", objPresentBy
					, "objBusinessRegNo", objBusinessRegNo
					, "objNNTPosition", objNNTPosition
					, "objPresentIDNo", objPresentIDNo
					, "objPresentIDType", objPresentIDType
					, "objGovTaxID", objGovTaxID
					, "objContactName", objContactName
					, "objContactPhone", objContactPhone
					, "objContactEmail", objContactEmail
					, "objWebsite", objWebsite
					, "objCANumber", objCANumber
					, "objCAOrg", objCAOrg
					, "objCAEffDTimeUTCStart", objCAEffDTimeUTCStart
					, "objCAEffDTimeUTCEnd", objCAEffDTimeUTCEnd
					, "objPackageCode", objPackageCode
					, "objAccNo", objAccNo
					, "objAccHolder", objAccHolder
					, "objBankName", objBankName
					, "objBankName", objBizType
					, "objBizFieldCode", objBizFieldCode
					, "objBizSizeCode", objBizSizeCode
                    /////
                    , "objDepartmentCode", objDepartmentCode
                    ////
                    , "objUserPassword", objUserPassword
					, "objUserPasswordRepeat", objUserPasswordRepeat
					////
					//, "objQtyLicense", objQtyLicense
					});
			#endregion

			#region // Refine and Check Input:
			bool bFlagInosCreateUser = false;
			bool bFlagInosCreateOrg = false;
			bool bFlagRptSvMstNNtAdd = false;
			bool bFlagInosCreateOrder = false;
			#endregion

			#region // Calc InosCreateUser:
			{
				OSiNOSSv.AccountService objAccountService = new OSiNOSSv.AccountService(null);
				InosUser dummy = new InosUser();
				dummy.Email = Convert.ToString(objContactEmail);

				InosUser inosUser = objAccountService.GetUser(dummy);

				if (inosUser == null) bFlagInosCreateUser = true;

				if (!bFlagInosCreateUser)
				{
					//alParamsCoupleError.AddRange(new object[]{
					//		"Check.TableName", strTableCheck
					//		});
					throw CmUtils.CMyException.Raise(
						TError.ErridnInventory.Mst_NNT_Calc_InvalidInosCreateUser
						, null
						, alParamsCoupleError.ToArray()
						);
				}
			}
			#endregion

			#region // Calc InosCreateOrg:
			{
				////
				bFlagInosCreateOrg = true;

				if (!bFlagInosCreateOrg)
				{
					//alParamsCoupleError.AddRange(new object[]{
					//		"Check.TableName", strTableCheck
					//		});
					throw CmUtils.CMyException.Raise(
						TError.ErridnInventory.Mst_NNT_Calc_InvalidInosCreateOrg
						, null
						, alParamsCoupleError.ToArray()
						);
				}
			}
			#endregion

			#region // Save RptSvMstNNtAdd:
			////
			DataTable dt_Lst_MstSv_Inos_User = TDALUtils.DBUtils.GetSchema(_cf.db, "MstSv_Inos_User").Tables[0];
			DataTable dt_Lst_MstSv_Inos_Org = TDALUtils.DBUtils.GetSchema(_cf.db, "MstSv_Inos_Org").Tables[0];
			{
				DataSet dsData = new DataSet();
				CmUtils.DataUtils.MoveDataTable(ref dsData, ref dt_Lst_MstSv_Inos_User);
				CmUtils.DataUtils.MoveDataTable(ref dsData, ref dt_Lst_MstSv_Inos_Org);
				//dsData.Tables.Add(dt_Lst_MstSv_Inos_User);
				//dsData.Tables.Add(dt_Lst_MstSv_Inos_Org);

				RptSv_Mst_NNT_RegisterX(
					strTid // strTid
					, strGwUserCode // strGwUserCode
					, strGwPassword // strGwPassword
					, strWAUserCode // strWAUserCode
					, strWAUserPassword // strWAUserPassword
					, strAccessToken // strAccessToken
					, ref mdsFinal // mdsFinal
					, ref alParamsCoupleError // alParamsCoupleError
											  ////
					, objMST // objMST
					, objNNTFullName // objNNTFullName
					, objMSTParent // objMSTParent
					, objProvinceCode // objProvinceCode
					, objDistrictCode // objDistrictCode
									  //, objNNTType
					, objDLCode // objDLCode
					, objNNTAddress // objNNTAddress
					, objNNTMobile // objNNTMobile
					, objNTTPhone // objNTTPhone
					, objNNTFax // objNNTFax
					, objPresentBy // objPresentBy
					, objBusinessRegNo // objBusinessRegNo
					, objNNTPosition // objNNTPosition
					, objPresentIDNo // objPresentIDNo
					, objPresentIDType // objPresentIDType
					, objGovTaxID // objGovTaxID
					, objContactName // objContactName
					, objContactPhone // objContactPhone
					, objContactEmail // objContactEmail
					, objWebsite // objWebsite
					, objCANumber // objCANumber
					, objCAOrg // objCAOrg
					, objCAEffDTimeUTCStart // objCAEffDTimeUTCStart
					, objCAEffDTimeUTCEnd // objCAEffDTimeUTCEnd
					, objPackageCode // objPackageCode
					, objCreatedDate // objCreatedDate
					, objAccNo // objAccNo
					, objAccHolder // objAccHolder
					, objBankName // objBankName
					, objBizType // objBizType
					, objBizFieldCode // objBizFieldCode
					, objBizSizeCode // objBizSizeCode
									 ////
					, objDepartmentCode // objDepartmentCode
										////
					, objUserPassword // objUserPassword
					, objUserPasswordRepeat // objUserPasswordRepeat
											//////
											//, objQtyLicense
											////
					, dsData // dsData
					);

				bFlagRptSvMstNNtAdd = true;

				if (!bFlagRptSvMstNNtAdd)
				{
					//alParamsCoupleError.AddRange(new object[]{
					//		"Check.TableName", strTableCheck
					//		});
					throw CmUtils.CMyException.Raise(
						TError.ErridnInventory.Mst_NNT_Calc_InvalidRptSvMstNNtAdd
						, null
						, alParamsCoupleError.ToArray()
						);
				}
			}
			#endregion

			#region // Calc InosCreateOrder:
			{
				////
				if (objInos_LicOrder.DiscountCode != null)
				{
					////
					Inos_DiscountCode objInos_DiscountCode = Inos_OrderService_GetDiscountCodeX(
						strTid // strTid
						, strGwUserCode // strGwUserCode
						, strGwPassword // strGwPassword
						, strWAUserCode // strWAUserCode
						, strWAUserPassword // strWAUserPassword
						, strAccessToken // strAccessToken
						, ref alParamsCoupleError // alParamsCoupleError
						, dtimeSys // dtimeSys
						, objInos_LicOrder.DiscountCode // objcode
						);

					if (objInos_DiscountCode == null)
					{
						////
						bFlagInosCreateOrder = false;

						alParamsCoupleError.AddRange(new object[]{
							"Check.DiscountCode", objInos_LicOrder.DiscountCode
							, "Check.DiscountCode.Enabled", objInos_LicOrder.DiscountCode
							});
						throw CmUtils.CMyException.Raise(
							TError.ErridnInventory.Mst_NNT_Calc_InvalidInosCreateOrder
							, null
							, alParamsCoupleError.ToArray()
							);

					}
					if (objInos_DiscountCode.Enabled != true)
					{
						////
						bFlagInosCreateOrder = false;

						alParamsCoupleError.AddRange(new object[]{
							"Check.DiscountCode", objInos_LicOrder.DiscountCode
							, "Check.DiscountCode.Enabled", objInos_LicOrder.DiscountCode
							});
						throw CmUtils.CMyException.Raise(
							TError.ErridnInventory.Mst_NNT_Calc_InvalidInosCreateOrder_InvalidDiscountStatus
							, null
							, alParamsCoupleError.ToArray()
							);
					}

					////
					bFlagInosCreateOrder = true;
				}
				else
				{
					////
					bFlagInosCreateOrder = true;
				}
                ////

                Inos_LicOrder objInos_LicOrderResult = Inos_OrderService_PrecheckOrderX(
                    strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // strWAUserCode
                    , strWAUserPassword // strWAUserPassword
                    , strAccessToken // strAccessToken
                    , ref alParamsCoupleError // alParamsCoupleError
                    , dtimeSys // dtimeSys
                    , objInos_LicOrder // strRt_Cols_OS_Inos_LicOrder
                    );

                objRT_Mst_NNT.Inos_LicOrder = objInos_LicOrderResult;


                if (!bFlagInosCreateOrder)
				{
					//alParamsCoupleError.AddRange(new object[]{
					//		"Check.TableName", strTableCheck
					//		});
					throw CmUtils.CMyException.Raise(
						TError.ErridnInventory.Mst_NNT_Calc_InvalidInosCreateOrder
						, null
						, alParamsCoupleError.ToArray()
						);
				}
			}
			#endregion

			// Return Good:
			//TDALUtils.DBUtils.CommitSafety(_cf.db);
			mdsFinal.AcceptChanges();
			//return mdsFinal;
		}

		private void RptSv_Mst_NNT_CalcX_New20200208(
			string strTid
			, string strGwUserCode
			, string strGwPassword
			, string strWAUserCode
			, string strWAUserPassword
			, string strAccessToken
			, ref DataSet mdsFinal
			, ref ArrayList alParamsCoupleError
			//// InosCreateUser
			, object objName_InosCreateUser
			, object objEmail_InosCreateUser
			, object objPassword_InosCreateUser
			, object objLanguage_InosCreateUser
			, object objTimeZone_InosCreateUser
			, object objVerificationCode_InosCreateUser
			//// InosCreateOrg
			, object objParentId_InosCreateOrg
			, object objName_InosCreateOrg
			, object objBizTypeId_InosCreateOrg
			, object objBizTypeName_InosCreateOrg
			, object objBizFieldId_InosCreateOrg
			, object objBizFieldName_InosCreateOrg
			, object objContactName_InosCreateOrg
			, object objEmail_InosCreateOrg
			, object objPhoneNo_InosCreateOrg
			, object objDescription_InosCreateOrg
			, object objEnable_InosCreateOrg
			//// RptSv
			, object objMST
			, object objNNTFullName
			, object objMSTParent
			, object objProvinceCode
			, object objDistrictCode
			//, object objNNTType
			, object objDLCode
			, object objNNTAddress
			, object objNNTMobile
			, object objNTTPhone
			, object objNNTFax
			, object objPresentBy
			, object objBusinessRegNo
			, object objNNTPosition
			, object objPresentIDNo
			, object objPresentIDType
			, object objGovTaxID
			, object objContactName
			, object objContactPhone
			, object objContactEmail
			, object objWebsite
			, object objCANumber
			, object objCAOrg
			, object objCAEffDTimeUTCStart
			, object objCAEffDTimeUTCEnd
			, object objPackageCode
			, object objCreatedDate
			, object objAccNo
			, object objAccHolder
			, object objBankName
			, object objBizType
			, object objBizFieldCode
			, object objBizSizeCode
			, object objDealerType
			////
			, object objDepartmentCode
			////
			, object objUserPassword
			, object objUserPasswordRepeat
			//////
			//, object objQtyLicense
			////
			//, DataSet dsData
			//// InosCreateOrder
			, Inos_LicOrder objInos_LicOrder
			////
			, ref RT_Mst_NNT objRT_Mst_NNT
			)
		{
			#region // Temp:
			//DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
			//int nTidSeq = 0;
			DateTime dtimeSys = DateTime.UtcNow;
			string strFunctionName = "RptSv_Mst_NNT_CalcX";
			//string strErrorCodeDefault = TError.ErridnInventory.WA_Mst_NNT_Registry;
			alParamsCoupleError.AddRange(new object[]{
					"strFunctionName", strFunctionName
					, "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
			        ////
					, "objMST", objMST
					, "objNNTFullName", objNNTFullName
					, "objMSTParent", objMSTParent
					, "objProvinceCode", objProvinceCode
					, "objDistrictCode", objDistrictCode
                    //, "objNNTType", objNNTType
                    , "objDLCode", objDLCode
					, "objNNTAddress", objNNTAddress
					, "objNNTMobile", objNNTMobile
					, "objNTTPhone", objNTTPhone
					, "objNNTFax", objNNTFax
					, "objPresentBy", objPresentBy
					, "objBusinessRegNo", objBusinessRegNo
					, "objNNTPosition", objNNTPosition
					, "objPresentIDNo", objPresentIDNo
					, "objPresentIDType", objPresentIDType
					, "objGovTaxID", objGovTaxID
					, "objContactName", objContactName
					, "objContactPhone", objContactPhone
					, "objContactEmail", objContactEmail
					, "objWebsite", objWebsite
					, "objCANumber", objCANumber
					, "objCAOrg", objCAOrg
					, "objCAEffDTimeUTCStart", objCAEffDTimeUTCStart
					, "objCAEffDTimeUTCEnd", objCAEffDTimeUTCEnd
					, "objPackageCode", objPackageCode
					, "objAccNo", objAccNo
					, "objAccHolder", objAccHolder
					, "objBankName", objBankName
					, "objBankName", objBizType
					, "objBizFieldCode", objBizFieldCode
					, "objBizSizeCode", objBizSizeCode
					, "objDealerType", objDealerType
                    /////
                    , "objDepartmentCode", objDepartmentCode
                    ////
                    , "objUserPassword", objUserPassword
					, "objUserPasswordRepeat", objUserPasswordRepeat
					////
					//, "objQtyLicense", objQtyLicense
					});
			#endregion

			#region // Refine and Check Input:
			bool bFlagInosCreateUser = false;
			bool bFlagInosCreateOrg = false;
			bool bFlagRptSvMstNNtAdd = false;
			bool bFlagInosCreateOrder = false;
			#endregion

			#region // Calc InosCreateUser:
			{
				OSiNOSSv.AccountService objAccountService = new OSiNOSSv.AccountService(null);
				InosUser dummy = new InosUser();
				dummy.Email = Convert.ToString(objContactEmail);

				InosUser inosUser = objAccountService.GetUser(dummy);

				if (inosUser == null) bFlagInosCreateUser = true;

				if (!bFlagInosCreateUser)
				{
					//alParamsCoupleError.AddRange(new object[]{
					//		"Check.TableName", strTableCheck
					//		});
					throw CmUtils.CMyException.Raise(
						TError.ErridnInventory.Mst_NNT_Calc_InvalidInosCreateUser
						, null
						, alParamsCoupleError.ToArray()
						);
				}
			}
			#endregion

			#region // Calc InosCreateOrg:
			{
				////
				bFlagInosCreateOrg = true;

				if (!bFlagInosCreateOrg)
				{
					//alParamsCoupleError.AddRange(new object[]{
					//		"Check.TableName", strTableCheck
					//		});
					throw CmUtils.CMyException.Raise(
						TError.ErridnInventory.Mst_NNT_Calc_InvalidInosCreateOrg
						, null
						, alParamsCoupleError.ToArray()
						);
				}
			}
			#endregion

			#region // Save RptSvMstNNtAdd:
			////
			DataTable dt_Lst_MstSv_Inos_User = TDALUtils.DBUtils.GetSchema(_cf.db, "MstSv_Inos_User").Tables[0];
			DataTable dt_Lst_MstSv_Inos_Org = TDALUtils.DBUtils.GetSchema(_cf.db, "MstSv_Inos_Org").Tables[0];
			{
				DataSet dsData = new DataSet();
				CmUtils.DataUtils.MoveDataTable(ref dsData, ref dt_Lst_MstSv_Inos_User);
				CmUtils.DataUtils.MoveDataTable(ref dsData, ref dt_Lst_MstSv_Inos_Org);
				//dsData.Tables.Add(dt_Lst_MstSv_Inos_User);
				//dsData.Tables.Add(dt_Lst_MstSv_Inos_Org);

				RptSv_Mst_NNT_RegisterX_New20200208(
					strTid // strTid
					, strGwUserCode // strGwUserCode
					, strGwPassword // strGwPassword
					, strWAUserCode // strWAUserCode
					, strWAUserPassword // strWAUserPassword
					, strAccessToken // strAccessToken
					, ref mdsFinal // mdsFinal
					, ref alParamsCoupleError // alParamsCoupleError
											  ////
					, objMST // objMST
					, objNNTFullName // objNNTFullName
					, objMSTParent // objMSTParent
					, objProvinceCode // objProvinceCode
					, objDistrictCode // objDistrictCode
									  //, objNNTType
					, objDLCode // objDLCode
					, objNNTAddress // objNNTAddress
					, objNNTMobile // objNNTMobile
					, objNTTPhone // objNTTPhone
					, objNNTFax // objNNTFax
					, objPresentBy // objPresentBy
					, objBusinessRegNo // objBusinessRegNo
					, objNNTPosition // objNNTPosition
					, objPresentIDNo // objPresentIDNo
					, objPresentIDType // objPresentIDType
					, objGovTaxID // objGovTaxID
					, objContactName // objContactName
					, objContactPhone // objContactPhone
					, objContactEmail // objContactEmail
					, objWebsite // objWebsite
					, objCANumber // objCANumber
					, objCAOrg // objCAOrg
					, objCAEffDTimeUTCStart // objCAEffDTimeUTCStart
					, objCAEffDTimeUTCEnd // objCAEffDTimeUTCEnd
					, objPackageCode // objPackageCode
					, objCreatedDate // objCreatedDate
					, objAccNo // objAccNo
					, objAccHolder // objAccHolder
					, objBankName // objBankName
					, objBizType // objBizType
					, objBizFieldCode // objBizFieldCode
					, objBizSizeCode // objBizSizeCode
					, objDealerType // objDealerType
									////
					, objDepartmentCode // objDepartmentCode
										////
					, objUserPassword // objUserPassword
					, objUserPasswordRepeat // objUserPasswordRepeat
											//////
											//, objQtyLicense
											////
					, dsData // dsData
					);

				bFlagRptSvMstNNtAdd = true;

				if (!bFlagRptSvMstNNtAdd)
				{
					//alParamsCoupleError.AddRange(new object[]{
					//		"Check.TableName", strTableCheck
					//		});
					throw CmUtils.CMyException.Raise(
						TError.ErridnInventory.Mst_NNT_Calc_InvalidRptSvMstNNtAdd
						, null
						, alParamsCoupleError.ToArray()
						);
				}
			}
			#endregion

			#region // Calc InosCreateOrder:
			{
				////
				if (objInos_LicOrder.DiscountCode != null)
				{
					////
					Inos_DiscountCode objInos_DiscountCode = Inos_OrderService_GetDiscountCodeX(
						strTid // strTid
						, strGwUserCode // strGwUserCode
						, strGwPassword // strGwPassword
						, strWAUserCode // strWAUserCode
						, strWAUserPassword // strWAUserPassword
						, strAccessToken // strAccessToken
						, ref alParamsCoupleError // alParamsCoupleError
						, dtimeSys // dtimeSys
						, objInos_LicOrder.DiscountCode // objcode
						);

					if (objInos_DiscountCode == null)
					{
						////
						bFlagInosCreateOrder = false;

						alParamsCoupleError.AddRange(new object[]{
							"Check.DiscountCode", objInos_LicOrder.DiscountCode
							, "Check.DiscountCode.Enabled", objInos_LicOrder.DiscountCode
							});
						throw CmUtils.CMyException.Raise(
							TError.ErridnInventory.Mst_NNT_Calc_InvalidInosCreateOrder
							, null
							, alParamsCoupleError.ToArray()
							);

					}
					if (objInos_DiscountCode.Enabled != true)
					{
						////
						bFlagInosCreateOrder = false;

						alParamsCoupleError.AddRange(new object[]{
							"Check.DiscountCode", objInos_LicOrder.DiscountCode
							, "Check.DiscountCode.Enabled", objInos_LicOrder.DiscountCode
							});
						throw CmUtils.CMyException.Raise(
							TError.ErridnInventory.Mst_NNT_Calc_InvalidInosCreateOrder_InvalidDiscountStatus
							, null
							, alParamsCoupleError.ToArray()
							);
					}

					////
					bFlagInosCreateOrder = true;
				}
				else
				{
					////
					bFlagInosCreateOrder = true;
				}
				////

				Inos_LicOrder objInos_LicOrderResult = Inos_OrderService_PrecheckOrderX(
					strTid // strTid
					, strGwUserCode // strGwUserCode
					, strGwPassword // strGwPassword
					, strWAUserCode // strWAUserCode
					, strWAUserPassword // strWAUserPassword
					, strAccessToken // strAccessToken
					, ref alParamsCoupleError // alParamsCoupleError
					, dtimeSys // dtimeSys
					, objInos_LicOrder // strRt_Cols_OS_Inos_LicOrder
					);

				objRT_Mst_NNT.Inos_LicOrder = objInos_LicOrderResult;


				if (!bFlagInosCreateOrder)
				{
					//alParamsCoupleError.AddRange(new object[]{
					//		"Check.TableName", strTableCheck
					//		});
					throw CmUtils.CMyException.Raise(
						TError.ErridnInventory.Mst_NNT_Calc_InvalidInosCreateOrder
						, null
						, alParamsCoupleError.ToArray()
						);
				}
			}
			#endregion

			// Return Good:
			//TDALUtils.DBUtils.CommitSafety(_cf.db);
			mdsFinal.AcceptChanges();
			//return mdsFinal;
		}

		private void RptSv_Mst_NNT_RegisterX(
			string strTid
			, string strGwUserCode
			, string strGwPassword
			, string strWAUserCode
			, string strWAUserPassword
			, string strAccessToken
			, ref DataSet mdsFinal
			, ref ArrayList alParamsCoupleError
			////
			, object objMST
			, object objNNTFullName
			, object objMSTParent
			, object objProvinceCode
			, object objDistrictCode
			//, object objNNTType
			, object objDLCode
			, object objNNTAddress
			, object objNNTMobile
			, object objNTTPhone
			, object objNNTFax
			, object objPresentBy
			, object objBusinessRegNo
			, object objNNTPosition
			, object objPresentIDNo
			, object objPresentIDType
			, object objGovTaxID
			, object objContactName
			, object objContactPhone
			, object objContactEmail
			, object objWebsite
			, object objCANumber
			, object objCAOrg
			, object objCAEffDTimeUTCStart
			, object objCAEffDTimeUTCEnd
			, object objPackageCode
			, object objCreatedDate
			, object objAccNo
			, object objAccHolder
			, object objBankName
			, object objBizType
			, object objBizFieldCode
			, object objBizSizeCode
			////
			, object objDepartmentCode
			////
			, object objUserPassword
			, object objUserPasswordRepeat
			//////
			//, object objQtyLicense
			////
			, DataSet dsData
			////
			)
		{
			#region // Temp:
			//DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
			//int nTidSeq = 0;
			DateTime dtimeSys = DateTime.UtcNow;
			string strFunctionName = "RptSv_Mst_NNT_RegisterX";
			//string strErrorCodeDefault = TError.ErridnInventory.WA_Mst_NNT_Registry;
			alParamsCoupleError.AddRange(new object[]{
					"strFunctionName", strFunctionName
					, "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
			        ////
					, "objMST", objMST
					, "objNNTFullName", objNNTFullName
					, "objMSTParent", objMSTParent
					, "objProvinceCode", objProvinceCode
					, "objDistrictCode", objDistrictCode
                    //, "objNNTType", objNNTType
                    , "objDLCode", objDLCode
					, "objNNTAddress", objNNTAddress
					, "objNNTMobile", objNNTMobile
					//, "objNTTPhone", objNTTPhone
					//, "objNNTFax", objNNTFax
					//, "objPresentBy", objPresentBy
					//, "objBusinessRegNo", objBusinessRegNo
					//, "objNNTPosition", objNNTPosition
					//, "objPresentIDNo", objPresentIDNo
					//, "objPresentIDType", objPresentIDType
					//, "objGovTaxID", objGovTaxID
					, "objContactName", objContactName
					, "objContactPhone", objContactPhone
					, "objContactEmail", objContactEmail
					, "objWebsite", objWebsite
					, "objCANumber", objCANumber
					, "objCAOrg", objCAOrg
					, "objCAEffDTimeUTCStart", objCAEffDTimeUTCStart
					, "objCAEffDTimeUTCEnd", objCAEffDTimeUTCEnd
					, "objPackageCode", objPackageCode
					, "objAccNo", objAccNo
					, "objAccHolder", objAccHolder
					, "objBankName", objBankName
					, "objBankName", objBizType
					, "objBizFieldCode", objBizFieldCode
					, "objBizSizeCode", objBizSizeCode
                    /////
                    , "objDepartmentCode", objDepartmentCode
                    ////
                    , "objUserPassword", objUserPassword
					, "objUserPasswordRepeat", objUserPasswordRepeat
					////
					//, "objQtyLicense", objQtyLicense
					});
			#endregion

			#region // Init:
			//_cf.db.LogUserId = _cf.sinf.strUserCode;
			//_cf.db.BeginTransaction();

			// Write RequestLog:
			//_cf.ProcessBizReq_OutSide(
			//	strTid // strTid
			//	, strGwUserCode // strGwUserCode
			//	, strGwPassword // strGwPassword
			//	, strWAUserCode // objUserCode
			//	, strFunctionName // strFunctionName
			//	, alParamsCoupleError // alParamsCoupleError
			//	);

			//// rem lại do khong can dung user/pass để đăng ký NNT
			//// Sys_User_CheckAuthentication:
			//Sys_User_CheckAuthentication(
			//    ref alParamsCoupleError
			//    , strWAUserCode
			//    , strWAUserPassword
			//    );

			//// Check Access/Deny:
			//Sys_Access_CheckDenyV30(
			//    ref alParamsCoupleError
			//    , strWAUserCode
			//    , strFunctionName
			//    );
			#endregion

			#region // Mst_NNT_CreateX:
			//DataSet dsGetData = null;
			{
				Mst_NNT_CreateX(
					strTid // strTid
					, strGwUserCode // strGwUserCode
					, strGwPassword // strGwPassword
					, "SYSADMIN" // strWAUserCode
					, strWAUserPassword // strWAUserPassword
					, ref alParamsCoupleError // alParamsCoupleError
					, dtimeSys // dtimeSys
							   ////
					, objMST // objMST
					, objNNTFullName // objNNTFullName
					, objMSTParent // objMSTParent
					, objProvinceCode // objProvinceCode
					, objDistrictCode // objDistrictCode
									  //, objNNTType // objNNTType
					, objDLCode // objDLCode
					, objNNTAddress // objNNTAddress
					, objNNTMobile // objNNTMobile
					, objNTTPhone // objNTTPhone
					, objNNTFax // objNNTFax
					, objPresentBy // objPresentBy
					, objBusinessRegNo // objBusinessRegNo
					, objNNTPosition // objNNTPosition
					, objPresentIDNo // objPresentIDNo
					, objPresentIDType // objPresentIDType
					, objGovTaxID // objGovTaxID
					, objContactName // objContactName
					, objContactPhone // objContactPhone
					, objContactEmail // objContactEmail
					, objWebsite // objWebsite
					, objCANumber // objCANumber
					, objCAOrg // objCAOrg
					, objCAEffDTimeUTCStart // objCAEffDTimeUTCStart
					, objCAEffDTimeUTCEnd // objCAEffDTimeUTCEnd
					, objPackageCode // objPackageCode
					, objCreatedDate // objCreatedDate
					, objAccNo // objAccNo
					, objAccHolder // objAccHolder
					, objBankName // objBankName
					, objBizType // objBizType
					, objBizFieldCode // objBizFieldCode
					, objBizSizeCode // objBizSizeCode
					);
			}
			////
			//CmUtils.DataUtils.MoveDataTable(ref mdsFinal, ref dsGetData);
			#endregion

			#region // Mst_Department_CreateX:
			//DataSet dsGetData = null;
			{
				//Mst_Department_CreateX(
				//    strTid // strTid
				//    , strGwUserCode // strGwUserCode
				//    , strGwPassword // strGwPassword
				//    , strWAUserCode // strWAUserCode
				//    , strWAUserPassword // strWAUserPassword
				//    , ref alParamsCoupleError // alParamsCoupleError
				//    , dtimeSys // dtimeSys
				//               ////
				//    , objDepartmentCode // objDepartmentCode
				//    , null // objDepartmentCodeParent
				//    , objMST // objMST
				//    , objDepartmentName // objDepartmentName                   
				//    );
			}
			////
			//CmUtils.DataUtils.MoveDataTable(ref mdsFinal, ref dsGetData);
			#endregion

			#region // Sys_User_CreateX:
			{
				Sys_User_CreateX(
					strTid // strTid
					, strGwUserCode // strGwUserCode
					, strGwPassword // strGwPassword
					, strWAUserCode // strWAUserCode
					, strWAUserPassword // strWAUserPassword
					, ref alParamsCoupleError // alParamsCoupleError						
					, dtimeSys // dtimeSys
							   ////
					, objContactEmail // objUserCode
					, objContactName // objUserName
					, objUserPassword // objUserPassword
					, objContactPhone // objPhoneNo
					, objContactEmail // objEMail
					, objMST // objMST
					, objDepartmentCode // objDepartmentCode
					, "" // objPosition
					, TConst.Flag.Inactive // objFlagDLAdmin
					, TConst.Flag.Inactive // objFlagSysAdmin
					, TConst.Flag.Active // objFlagNTTAdmin
										 ////
					);
			}
			#endregion

			#region // MstSv_Inos_User_AddX:
			{
				// //
				DataTable dt_MstSv_Inos_User = dsData.Tables["MstSv_Inos_User"].Copy();

				if (dt_MstSv_Inos_User.Rows.Count > 0)
				{
					RptSv_Inos_User_AddX(
						strTid // strTid
						, strGwUserCode // strGwUserCode
						, strGwPassword // strGwPassword
						, strWAUserCode // strWAUserCode
						, strWAUserPassword // strWAUserPassword
						, ref alParamsCoupleError // alParamsCoupleError
						, dtimeSys // dtimeSys
								   // //
						, objMST // objMST
						, dt_MstSv_Inos_User.Rows[0]["Email"] // objEmail
						, dt_MstSv_Inos_User.Rows[0]["Name"] // objName
						, objUserPassword // objPassword
						, dt_MstSv_Inos_User.Rows[0]["Language"] // objLanguage
						, dt_MstSv_Inos_User.Rows[0]["TimeZone"] // objTimeZone
						, dt_MstSv_Inos_User.Rows[0]["Id"] // objId
						, dt_MstSv_Inos_User.Rows[0]["FlagEmailSend"] // objFlagEmailSend
						, dt_MstSv_Inos_User.Rows[0]["FlagEmailActivate"] // objFlagEmailActivate
						, dt_MstSv_Inos_User.Rows[0]["FlagAdmin"] // objFlagAdmin
																  ////
						, dsData // dsDataOut
						);
				}				
			}
			#endregion

			// Return Good:
			//TDALUtils.DBUtils.CommitSafety(_cf.db);
			mdsFinal.AcceptChanges();
			//return mdsFinal;
		}


		private void RptSv_Mst_NNT_RegisterX_New20200208_1117(
			string strTid
			, string strGwUserCode
			, string strGwPassword
			, string strWAUserCode
			, string strWAUserPassword
			, string strAccessToken
			, ref DataSet mdsFinal
			, ref ArrayList alParamsCoupleError
			////
			, object objMST
			, object objNNTFullName
			, object objMSTParent
			, object objProvinceCode
			, object objDistrictCode
			//, object objNNTType
			, object objDLCode
			, object objNNTAddress
			, object objNNTMobile
			, object objNTTPhone
			, object objNNTFax
			, object objPresentBy
			, object objBusinessRegNo
			, object objNNTPosition
			, object objPresentIDNo
			, object objPresentIDType
			, object objGovTaxID
			, object objContactName
			, object objContactPhone
			, object objContactEmail
			, object objWebsite
			, object objCANumber
			, object objCAOrg
			, object objCAEffDTimeUTCStart
			, object objCAEffDTimeUTCEnd
			, object objPackageCode
			, object objCreatedDate
			, object objAccNo
			, object objAccHolder
			, object objBankName
			, object objBizType
			, object objBizFieldCode
			, object objBizSizeCode
			, object objDealerType
			////
			, object objDepartmentCode
			////
			, object objUserPassword
			, object objUserPasswordRepeat
			//////
			//, object objQtyLicense
			////
			, DataSet dsData
			////
			)
		{
			#region // Temp:
			//DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
			//int nTidSeq = 0;
			DateTime dtimeSys = DateTime.UtcNow;
			string strFunctionName = "RptSv_Mst_NNT_RegisterX";
			//string strErrorCodeDefault = TError.ErridnInventory.WA_Mst_NNT_Registry;
			alParamsCoupleError.AddRange(new object[]{
					"strFunctionName", strFunctionName
					, "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
			        ////
					, "objMST", objMST
					, "objNNTFullName", objNNTFullName
					, "objMSTParent", objMSTParent
					, "objProvinceCode", objProvinceCode
					, "objDistrictCode", objDistrictCode
                    //, "objNNTType", objNNTType
                    , "objDLCode", objDLCode
					, "objNNTAddress", objNNTAddress
					, "objNNTMobile", objNNTMobile
					//, "objNTTPhone", objNTTPhone
					//, "objNNTFax", objNNTFax
					//, "objPresentBy", objPresentBy
					//, "objBusinessRegNo", objBusinessRegNo
					//, "objNNTPosition", objNNTPosition
					//, "objPresentIDNo", objPresentIDNo
					//, "objPresentIDType", objPresentIDType
					//, "objGovTaxID", objGovTaxID
					, "objContactName", objContactName
					, "objContactPhone", objContactPhone
					, "objContactEmail", objContactEmail
					, "objWebsite", objWebsite
					, "objCANumber", objCANumber
					, "objCAOrg", objCAOrg
					, "objCAEffDTimeUTCStart", objCAEffDTimeUTCStart
					, "objCAEffDTimeUTCEnd", objCAEffDTimeUTCEnd
					, "objPackageCode", objPackageCode
					, "objAccNo", objAccNo
					, "objAccHolder", objAccHolder
					, "objBankName", objBankName
					, "objBankName", objBizType
					, "objBizFieldCode", objBizFieldCode
					, "objBizSizeCode", objBizSizeCode
                    /////
                    , "objDepartmentCode", objDepartmentCode
                    ////
                    , "objUserPassword", objUserPassword
					, "objUserPasswordRepeat", objUserPasswordRepeat
					////
					//, "objQtyLicense", objQtyLicense
					});
			#endregion

			#region // Init:
			//_cf.db.LogUserId = _cf.sinf.strUserCode;
			//_cf.db.BeginTransaction();

			// Write RequestLog:
			//_cf.ProcessBizReq_OutSide(
			//	strTid // strTid
			//	, strGwUserCode // strGwUserCode
			//	, strGwPassword // strGwPassword
			//	, strWAUserCode // objUserCode
			//	, strFunctionName // strFunctionName
			//	, alParamsCoupleError // alParamsCoupleError
			//	);

			//// rem lại do khong can dung user/pass để đăng ký NNT
			//// Sys_User_CheckAuthentication:
			//Sys_User_CheckAuthentication(
			//    ref alParamsCoupleError
			//    , strWAUserCode
			//    , strWAUserPassword
			//    );

			//// Check Access/Deny:
			//Sys_Access_CheckDenyV30(
			//    ref alParamsCoupleError
			//    , strWAUserCode
			//    , strFunctionName
			//    );
			#endregion

			#region // Mst_NNT_CreateX:
			//DataSet dsGetData = null;
			{
				Mst_NNT_CreateX_New20200208(
					strTid // strTid
					, strGwUserCode // strGwUserCode
					, strGwPassword // strGwPassword
					, "SYSADMIN" // strWAUserCode
					, strWAUserPassword // strWAUserPassword
					, ref alParamsCoupleError // alParamsCoupleError
					, dtimeSys // dtimeSys
							   ////
					, objMST // objMST
					, objNNTFullName // objNNTFullName
					, objMSTParent // objMSTParent
					, objProvinceCode // objProvinceCode
					, objDistrictCode // objDistrictCode
									  //, objNNTType // objNNTType
					, objDLCode // objDLCode
					, objNNTAddress // objNNTAddress
					, objNNTMobile // objNNTMobile
					, objNTTPhone // objNTTPhone
					, objNNTFax // objNNTFax
					, objPresentBy // objPresentBy
					, objBusinessRegNo // objBusinessRegNo
					, objNNTPosition // objNNTPosition
					, objPresentIDNo // objPresentIDNo
					, objPresentIDType // objPresentIDType
					, objGovTaxID // objGovTaxID
					, objContactName // objContactName
					, objContactPhone // objContactPhone
					, objContactEmail // objContactEmail
					, objWebsite // objWebsite
					, objCANumber // objCANumber
					, objCAOrg // objCAOrg
					, objCAEffDTimeUTCStart // objCAEffDTimeUTCStart
					, objCAEffDTimeUTCEnd // objCAEffDTimeUTCEnd
					, objPackageCode // objPackageCode
					, objCreatedDate // objCreatedDate
					, objAccNo // objAccNo
					, objAccHolder // objAccHolder
					, objBankName // objBankName
					, objBizType // objBizType
					, objBizFieldCode // objBizFieldCode
					, objBizSizeCode // objBizSizeCode
					, objDealerType // objDealerType
					);
			}
			////
			//CmUtils.DataUtils.MoveDataTable(ref mdsFinal, ref dsGetData);
			#endregion

			#region // Mst_Department_CreateX:
			//DataSet dsGetData = null;
			{
				//Mst_Department_CreateX(
				//    strTid // strTid
				//    , strGwUserCode // strGwUserCode
				//    , strGwPassword // strGwPassword
				//    , strWAUserCode // strWAUserCode
				//    , strWAUserPassword // strWAUserPassword
				//    , ref alParamsCoupleError // alParamsCoupleError
				//    , dtimeSys // dtimeSys
				//               ////
				//    , objDepartmentCode // objDepartmentCode
				//    , null // objDepartmentCodeParent
				//    , objMST // objMST
				//    , objDepartmentName // objDepartmentName                   
				//    );
			}
			////
			//CmUtils.DataUtils.MoveDataTable(ref mdsFinal, ref dsGetData);
			#endregion

			#region // Sys_User_CreateX:
			{
				Sys_User_CreateX(
					strTid // strTid
					, strGwUserCode // strGwUserCode
					, strGwPassword // strGwPassword
					, strWAUserCode // strWAUserCode
					, strWAUserPassword // strWAUserPassword
					, ref alParamsCoupleError // alParamsCoupleError						
					, dtimeSys // dtimeSys
							   ////
					, objContactEmail // objUserCode
					, objContactName // objUserName
					, objUserPassword // objUserPassword
					, objContactPhone // objPhoneNo
					, objContactEmail // objEMail
					, objMST // objMST
					, objDepartmentCode // objDepartmentCode
					, "" // objPosition
					, TConst.Flag.Inactive // objFlagDLAdmin
					, TConst.Flag.Inactive // objFlagSysAdmin
					, TConst.Flag.Active // objFlagNTTAdmin
										 ////
					);
			}
			#endregion

			#region // MstSv_Inos_User_AddX:
			{
				// //
				DataTable dt_MstSv_Inos_User = dsData.Tables["MstSv_Inos_User"].Copy();

				if (dt_MstSv_Inos_User.Rows.Count > 0)
				{
					RptSv_Inos_User_AddX(
						strTid // strTid
						, strGwUserCode // strGwUserCode
						, strGwPassword // strGwPassword
						, strWAUserCode // strWAUserCode
						, strWAUserPassword // strWAUserPassword
						, ref alParamsCoupleError // alParamsCoupleError
						, dtimeSys // dtimeSys
								   // //
						, objMST // objMST
						, dt_MstSv_Inos_User.Rows[0]["Email"] // objEmail
						, dt_MstSv_Inos_User.Rows[0]["Name"] // objName
						, objUserPassword // objPassword
						, dt_MstSv_Inos_User.Rows[0]["Language"] // objLanguage
						, dt_MstSv_Inos_User.Rows[0]["TimeZone"] // objTimeZone
						, dt_MstSv_Inos_User.Rows[0]["Id"] // objId
						, dt_MstSv_Inos_User.Rows[0]["FlagEmailSend"] // objFlagEmailSend
						, dt_MstSv_Inos_User.Rows[0]["FlagEmailActivate"] // objFlagEmailActivate
						, dt_MstSv_Inos_User.Rows[0]["FlagAdmin"] // objFlagAdmin
																  ////
						, dsData // dsDataOut
						);
				}
			}
			#endregion

			// Return Good:
			//TDALUtils.DBUtils.CommitSafety(_cf.db);
			mdsFinal.AcceptChanges();
			//return mdsFinal;
		}

		private void RptSv_Mst_NNT_RegisterX_New20191128(
			string strTid
			, string strGwUserCode
			, string strGwPassword
			, string strWAUserCode
			, string strWAUserPassword
			, string strAccessToken
			, ref DataSet mdsFinal
			, ref ArrayList alParamsCoupleError
			////
			, object objMST
			, object objNNTFullName
			, object objMSTParent
			, object objProvinceCode
			, object objDistrictCode
			//, object objNNTType
			, object objDLCode
			, object objNNTAddress
			, object objNNTMobile
			, object objNTTPhone
			, object objNNTFax
			, object objPresentBy
			, object objBusinessRegNo
			, object objNNTPosition
			, object objPresentIDNo
			, object objPresentIDType
			, object objGovTaxID
			, object objContactName
			, object objContactPhone
			, object objContactEmail
			, object objWebsite
			, object objCANumber
			, object objCAOrg
			, object objCAEffDTimeUTCStart
			, object objCAEffDTimeUTCEnd
			, object objPackageCode
			, object objCreatedDate
			, object objAccNo
			, object objAccHolder
			, object objBankName
			, object objBizType
			, object objBizFieldCode
			, object objBizSizeCode
			////
			, object objDepartmentCode
			////
			, object objUserPassword
			, object objUserPasswordRepeat
			//////
			//, object objQtyLicense
			////
			, DataSet dsData
			////
			)
		{
			#region // Temp:
			//DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
			//int nTidSeq = 0;
			DateTime dtimeSys = DateTime.UtcNow;
			string strFunctionName = "RptSv_Mst_NNT_RegisterX";
			//string strErrorCodeDefault = TError.ErridNTVAN.WA_Mst_NNT_Registry;
			alParamsCoupleError.AddRange(new object[]{
					"strFunctionName", strFunctionName
					, "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
			        ////
					, "objMST", objMST
					, "objNNTFullName", objNNTFullName
					, "objMSTParent", objMSTParent
					, "objProvinceCode", objProvinceCode
					, "objDistrictCode", objDistrictCode
                    //, "objNNTType", objNNTType
                    , "objDLCode", objDLCode
					, "objNNTAddress", objNNTAddress
					, "objNNTMobile", objNNTMobile
					, "objNTTPhone", objNTTPhone
					, "objNNTFax", objNNTFax
					, "objPresentBy", objPresentBy
					, "objBusinessRegNo", objBusinessRegNo
					, "objNNTPosition", objNNTPosition
					, "objPresentIDNo", objPresentIDNo
					, "objPresentIDType", objPresentIDType
					, "objGovTaxID", objGovTaxID
					, "objContactName", objContactName
					, "objContactPhone", objContactPhone
					, "objContactEmail", objContactEmail
					, "objWebsite", objWebsite
					, "objCANumber", objCANumber
					, "objCAOrg", objCAOrg
					, "objCAEffDTimeUTCStart", objCAEffDTimeUTCStart
					, "objCAEffDTimeUTCEnd", objCAEffDTimeUTCEnd
					, "objPackageCode", objPackageCode
					, "objAccNo", objAccNo
					, "objAccHolder", objAccHolder
					, "objBankName", objBankName
					, "objBankName", objBizType
					, "objBizFieldCode", objBizFieldCode
					, "objBizSizeCode", objBizSizeCode
                    /////
                    , "objDepartmentCode", objDepartmentCode
                    ////
                    , "objUserPassword", objUserPassword
					, "objUserPasswordRepeat", objUserPasswordRepeat
					////
					//, "objQtyLicense", objQtyLicense
					});
			#endregion

			#region // Init:
			//_cf.db.LogUserId = _cf.sinf.strUserCode;
			//_cf.db.BeginTransaction();

			// Write RequestLog:
			//_cf.ProcessBizReq_OutSide(
			//	strTid // strTid
			//	, strGwUserCode // strGwUserCode
			//	, strGwPassword // strGwPassword
			//	, strWAUserCode // objUserCode
			//	, strFunctionName // strFunctionName
			//	, alParamsCoupleError // alParamsCoupleError
			//	);

			//// rem lại do khong can dung user/pass để đăng ký NNT
			//// Sys_User_CheckAuthentication:
			//Sys_User_CheckAuthentication(
			//    ref alParamsCoupleError
			//    , strWAUserCode
			//    , strWAUserPassword
			//    );

			//// Check Access/Deny:
			//Sys_Access_CheckDenyV30(
			//    ref alParamsCoupleError
			//    , strWAUserCode
			//    , strFunctionName
			//    );
			#endregion

			#region // Mst_NNT_CreateX:
			//DataSet dsGetData = null;
			{
				Mst_NNT_CreateX(
					strTid // strTid
					, strGwUserCode // strGwUserCode
					, strGwPassword // strGwPassword
					, "SYSADMIN" // strWAUserCode
					, strWAUserPassword // strWAUserPassword
					, ref alParamsCoupleError // alParamsCoupleError
					, dtimeSys // dtimeSys
							   ////
					, objMST // objMST
					, objNNTFullName // objNNTFullName
					, objMSTParent // objMSTParent
					, objProvinceCode // objProvinceCode
					, objDistrictCode // objDistrictCode
									  //, objNNTType // objNNTType
					, objDLCode // objDLCode
					, objNNTAddress // objNNTAddress
					, objNNTMobile // objNNTMobile
					, objNTTPhone // objNTTPhone
					, objNNTFax // objNNTFax
					, objPresentBy // objPresentBy
					, objBusinessRegNo // objBusinessRegNo
					, objNNTPosition // objNNTPosition
					, objPresentIDNo // objPresentIDNo
					, objPresentIDType // objPresentIDType
					, objGovTaxID // objGovTaxID
					, objContactName // objContactName
					, objContactPhone // objContactPhone
					, objContactEmail // objContactEmail
					, objWebsite // objWebsite
					, objCANumber // objCANumber
					, objCAOrg // objCAOrg
					, objCAEffDTimeUTCStart // objCAEffDTimeUTCStart
					, objCAEffDTimeUTCEnd // objCAEffDTimeUTCEnd
					, objPackageCode // objPackageCode
					, objCreatedDate // objCreatedDate
					, objAccNo // objAccNo
					, objAccHolder // objAccHolder
					, objBankName // objBankName
					, objBizType // objBizType
					, objBizFieldCode // objBizFieldCode
					, objBizSizeCode // objBizSizeCode
					);
			}
			////
			//CmUtils.DataUtils.MoveDataTable(ref mdsFinal, ref dsGetData);
			#endregion

			#region // Mst_Department_CreateX:
			//DataSet dsGetData = null;
			{
				//Mst_Department_CreateX(
				//    strTid // strTid
				//    , strGwUserCode // strGwUserCode
				//    , strGwPassword // strGwPassword
				//    , strWAUserCode // strWAUserCode
				//    , strWAUserPassword // strWAUserPassword
				//    , ref alParamsCoupleError // alParamsCoupleError
				//    , dtimeSys // dtimeSys
				//               ////
				//    , objDepartmentCode // objDepartmentCode
				//    , null // objDepartmentCodeParent
				//    , objMST // objMST
				//    , objDepartmentName // objDepartmentName                   
				//    );
			}
			////
			//CmUtils.DataUtils.MoveDataTable(ref mdsFinal, ref dsGetData);
			#endregion

			#region // Sys_User_CreateX:
			{
				RptSv_Sys_User_CreateX(
					strTid // strTid
					, strGwUserCode // strGwUserCode
					, strGwPassword // strGwPassword
					, strWAUserCode // strWAUserCode
					, strWAUserPassword // strWAUserPassword
					, ref alParamsCoupleError // alParamsCoupleError						
					, dtimeSys // dtimeSys
							   ////
					, objContactEmail // objUserCode
					, objContactName // objUserName
					, objUserPassword // objUserPassword
					, objContactPhone // objPhoneNo
					, objContactEmail // objEMail
					, objMST // objMST
					, objDepartmentCode // objDepartmentCode
					, "" // objPosition
					, TConst.Flag.Inactive // objFlagDLAdmin
					, TConst.Flag.Inactive // objFlagSysAdmin
					, TConst.Flag.Active // objFlagNTTAdmin
										 ////
					);
			}
			#endregion

			#region // MstSv_Inos_User_AddX:
			{
				// //
				DataTable dt_MstSv_Inos_User = dsData.Tables["MstSv_Inos_User"].Copy();

				if (dt_MstSv_Inos_User.Rows.Count > 0)
				{
					RptSv_Inos_User_AddX(
						strTid // strTid
						, strGwUserCode // strGwUserCode
						, strGwPassword // strGwPassword
						, strWAUserCode // strWAUserCode
						, strWAUserPassword // strWAUserPassword
						, ref alParamsCoupleError // alParamsCoupleError
						, dtimeSys // dtimeSys
								   // //
						, objMST // objMST
						, dt_MstSv_Inos_User.Rows[0]["Email"] // objEmail
						, dt_MstSv_Inos_User.Rows[0]["Name"] // objName
						, objUserPassword // objPassword
						, dt_MstSv_Inos_User.Rows[0]["Language"] // objLanguage
						, dt_MstSv_Inos_User.Rows[0]["TimeZone"] // objTimeZone
						, dt_MstSv_Inos_User.Rows[0]["Id"] // objId
						, dt_MstSv_Inos_User.Rows[0]["FlagEmailSend"] // objFlagEmailSend
						, dt_MstSv_Inos_User.Rows[0]["FlagEmailActivate"] // objFlagEmailActivate
						, dt_MstSv_Inos_User.Rows[0]["FlagAdmin"] // objFlagAdmin
																  ////
						, dsData // dsDataOut
						);
				}
			}
			#endregion

			// Return Good:
			//TDALUtils.DBUtils.CommitSafety(_cf.db);
			mdsFinal.AcceptChanges();
			//return mdsFinal;
		}

		private void RptSv_Mst_NNT_RegisterX_New20200208(
			string strTid
			, string strGwUserCode
			, string strGwPassword
			, string strWAUserCode
			, string strWAUserPassword
			, string strAccessToken
			, ref DataSet mdsFinal
			, ref ArrayList alParamsCoupleError
			////
			, object objMST
			, object objNNTFullName
			, object objMSTParent
			, object objProvinceCode
			, object objDistrictCode
			//, object objNNTType
			, object objDLCode
			, object objNNTAddress
			, object objNNTMobile
			, object objNTTPhone
			, object objNNTFax
			, object objPresentBy
			, object objBusinessRegNo
			, object objNNTPosition
			, object objPresentIDNo
			, object objPresentIDType
			, object objGovTaxID
			, object objContactName
			, object objContactPhone
			, object objContactEmail
			, object objWebsite
			, object objCANumber
			, object objCAOrg
			, object objCAEffDTimeUTCStart
			, object objCAEffDTimeUTCEnd
			, object objPackageCode
			, object objCreatedDate
			, object objAccNo
			, object objAccHolder
			, object objBankName
			, object objBizType
			, object objBizFieldCode
			, object objBizSizeCode
			, object objDealerType
			////
			, object objDepartmentCode
			////
			, object objUserPassword
			, object objUserPasswordRepeat
			//////
			//, object objQtyLicense
			////
			, DataSet dsData
			////
			)
		{
			#region // Temp:
			//DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
			//int nTidSeq = 0;
			DateTime dtimeSys = DateTime.UtcNow;
			string strFunctionName = "RptSv_Mst_NNT_RegisterX";
			//string strErrorCodeDefault = TError.ErridNTVAN.WA_Mst_NNT_Registry;
			alParamsCoupleError.AddRange(new object[]{
					"strFunctionName", strFunctionName
					, "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
			        ////
					, "objMST", objMST
					, "objNNTFullName", objNNTFullName
					, "objMSTParent", objMSTParent
					, "objProvinceCode", objProvinceCode
					, "objDistrictCode", objDistrictCode
                    //, "objNNTType", objNNTType
                    , "objDLCode", objDLCode
					, "objNNTAddress", objNNTAddress
					, "objNNTMobile", objNNTMobile
					, "objNTTPhone", objNTTPhone
					, "objNNTFax", objNNTFax
					, "objPresentBy", objPresentBy
					, "objBusinessRegNo", objBusinessRegNo
					, "objNNTPosition", objNNTPosition
					, "objPresentIDNo", objPresentIDNo
					, "objPresentIDType", objPresentIDType
					, "objGovTaxID", objGovTaxID
					, "objContactName", objContactName
					, "objContactPhone", objContactPhone
					, "objContactEmail", objContactEmail
					, "objWebsite", objWebsite
					, "objCANumber", objCANumber
					, "objCAOrg", objCAOrg
					, "objCAEffDTimeUTCStart", objCAEffDTimeUTCStart
					, "objCAEffDTimeUTCEnd", objCAEffDTimeUTCEnd
					, "objPackageCode", objPackageCode
					, "objAccNo", objAccNo
					, "objAccHolder", objAccHolder
					, "objBankName", objBankName
					, "objBankName", objBizType
					, "objBizFieldCode", objBizFieldCode
					, "objBizSizeCode", objBizSizeCode
					, "objDealerType", objDealerType
                    /////
                    , "objDepartmentCode", objDepartmentCode
                    ////
                    , "objUserPassword", objUserPassword
					, "objUserPasswordRepeat", objUserPasswordRepeat
					////
					//, "objQtyLicense", objQtyLicense
					});
			#endregion

			#region // Init:
			//_cf.db.LogUserId = _cf.sinf.strUserCode;
			//_cf.db.BeginTransaction();

			// Write RequestLog:
			//_cf.ProcessBizReq_OutSide(
			//	strTid // strTid
			//	, strGwUserCode // strGwUserCode
			//	, strGwPassword // strGwPassword
			//	, strWAUserCode // objUserCode
			//	, strFunctionName // strFunctionName
			//	, alParamsCoupleError // alParamsCoupleError
			//	);

			//// rem lại do khong can dung user/pass để đăng ký NNT
			//// Sys_User_CheckAuthentication:
			//Sys_User_CheckAuthentication(
			//    ref alParamsCoupleError
			//    , strWAUserCode
			//    , strWAUserPassword
			//    );

			//// Check Access/Deny:
			//Sys_Access_CheckDenyV30(
			//    ref alParamsCoupleError
			//    , strWAUserCode
			//    , strFunctionName
			//    );
			#endregion

			#region // Mst_NNT_CreateX:
			//DataSet dsGetData = null;
			{
				Mst_NNT_CreateX_New20200208(
					strTid // strTid
					, strGwUserCode // strGwUserCode
					, strGwPassword // strGwPassword
					, "SYSADMIN" // strWAUserCode
					, strWAUserPassword // strWAUserPassword
					, ref alParamsCoupleError // alParamsCoupleError
					, dtimeSys // dtimeSys
							   ////
					, objMST // objMST
					, objNNTFullName // objNNTFullName
					, objMSTParent // objMSTParent
					, objProvinceCode // objProvinceCode
					, objDistrictCode // objDistrictCode
									  //, objNNTType // objNNTType
					, objDLCode // objDLCode
					, objNNTAddress // objNNTAddress
					, objNNTMobile // objNNTMobile
					, objNTTPhone // objNTTPhone
					, objNNTFax // objNNTFax
					, objPresentBy // objPresentBy
					, objBusinessRegNo // objBusinessRegNo
					, objNNTPosition // objNNTPosition
					, objPresentIDNo // objPresentIDNo
					, objPresentIDType // objPresentIDType
					, objGovTaxID // objGovTaxID
					, objContactName // objContactName
					, objContactPhone // objContactPhone
					, objContactEmail // objContactEmail
					, objWebsite // objWebsite
					, objCANumber // objCANumber
					, objCAOrg // objCAOrg
					, objCAEffDTimeUTCStart // objCAEffDTimeUTCStart
					, objCAEffDTimeUTCEnd // objCAEffDTimeUTCEnd
					, objPackageCode // objPackageCode
					, objCreatedDate // objCreatedDate
					, objAccNo // objAccNo
					, objAccHolder // objAccHolder
					, objBankName // objBankName
					, objBizType // objBizType
					, objBizFieldCode // objBizFieldCode
					, objBizSizeCode // objBizSizeCode
					, objDealerType // objDealerType
					);
			}
			////
			//CmUtils.DataUtils.MoveDataTable(ref mdsFinal, ref dsGetData);
			#endregion

			#region // Mst_Department_CreateX:
			//DataSet dsGetData = null;
			{
				//Mst_Department_CreateX(
				//    strTid // strTid
				//    , strGwUserCode // strGwUserCode
				//    , strGwPassword // strGwPassword
				//    , strWAUserCode // strWAUserCode
				//    , strWAUserPassword // strWAUserPassword
				//    , ref alParamsCoupleError // alParamsCoupleError
				//    , dtimeSys // dtimeSys
				//               ////
				//    , objDepartmentCode // objDepartmentCode
				//    , null // objDepartmentCodeParent
				//    , objMST // objMST
				//    , objDepartmentName // objDepartmentName                   
				//    );
			}
			////
			//CmUtils.DataUtils.MoveDataTable(ref mdsFinal, ref dsGetData);
			#endregion

			#region // Sys_User_CreateX:
			{
				RptSv_Sys_User_CreateX(
					strTid // strTid
					, strGwUserCode // strGwUserCode
					, strGwPassword // strGwPassword
					, strWAUserCode // strWAUserCode
					, strWAUserPassword // strWAUserPassword
					, ref alParamsCoupleError // alParamsCoupleError						
					, dtimeSys // dtimeSys
							   ////
					, objContactEmail // objUserCode
					, objContactName // objUserName
					, objUserPassword // objUserPassword
					, objContactPhone // objPhoneNo
					, objContactEmail // objEMail
					, objMST // objMST
					, 'O' // objDepartmentCode
					, "" // objPosition
					, TConst.Flag.Inactive // objFlagDLAdmin
					, TConst.Flag.Inactive // objFlagSysAdmin
					, TConst.Flag.Active // objFlagNTTAdmin
										 ////
					);
			}
			#endregion

			#region // MstSv_Inos_User_AddX:
			{
				// //
				DataTable dt_MstSv_Inos_User = dsData.Tables["MstSv_Inos_User"].Copy();

				if (dt_MstSv_Inos_User.Rows.Count > 0)
				{
					RptSv_Inos_User_AddX(
						strTid // strTid
						, strGwUserCode // strGwUserCode
						, strGwPassword // strGwPassword
						, strWAUserCode // strWAUserCode
						, strWAUserPassword // strWAUserPassword
						, ref alParamsCoupleError // alParamsCoupleError
						, dtimeSys // dtimeSys
								   // //
						, objMST // objMST
						, dt_MstSv_Inos_User.Rows[0]["Email"] // objEmail
						, dt_MstSv_Inos_User.Rows[0]["Name"] // objName
						, objUserPassword // objPassword
						, dt_MstSv_Inos_User.Rows[0]["Language"] // objLanguage
						, dt_MstSv_Inos_User.Rows[0]["TimeZone"] // objTimeZone
						, dt_MstSv_Inos_User.Rows[0]["Id"] // objId
						, dt_MstSv_Inos_User.Rows[0]["FlagEmailSend"] // objFlagEmailSend
						, dt_MstSv_Inos_User.Rows[0]["FlagEmailActivate"] // objFlagEmailActivate
						, dt_MstSv_Inos_User.Rows[0]["FlagAdmin"] // objFlagAdmin
																  ////
						, dsData // dsDataOut
						);
				}
			}
			#endregion

			// Return Good:
			//TDALUtils.DBUtils.CommitSafety(_cf.db);
			mdsFinal.AcceptChanges();
			//return mdsFinal;
		}

		public DataSet WA_Mst_NNT_Registry(
            ref ArrayList alParamsCoupleError
            , RQ_Mst_NNT objRQ_Mst_NNT
            ////
            , out RT_Mst_NNT objRT_Mst_NNT
            )
        {
            #region // Temp:
            string strTid = objRQ_Mst_NNT.Tid;
            objRT_Mst_NNT = new RT_Mst_NNT();
            DataSet mdsResult = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            DateTime dtimeSys = DateTime.UtcNow;
            //DataSet mdsExec = null;
            //DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(objRQ_Mst_NNT.Tid);
            //int nTidSeq = 0;
            //bool bNeedTransaction = true;
            string strFunctionName = "WA_Mst_NNT_Registry";
            string strErrorCodeDefault = TError.ErridnInventory.WA_Mst_NNT_Registry;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
				, "ReportServer", "ReportServer"
				});
            #endregion

            try
            {
                #region // Init:
                #endregion

                #region // Refine and Check Input:
                List<Mst_NNT> lst_Mst_NNT = new List<Mst_NNT>();
                #endregion

                #region // Mst_NNT_CreateNNTAndDepartment:
                mdsResult = Mst_NNT_Register(
                    objRQ_Mst_NNT.Tid // strTid
                    , objRQ_Mst_NNT.GwUserCode // strGwUserCode
                    , objRQ_Mst_NNT.GwPassword // strGwPassword
                    , objRQ_Mst_NNT.WAUserCode // strUserCode
                    , objRQ_Mst_NNT.WAUserPassword // strUserPassword
					, objRQ_Mst_NNT.AccessToken // strAccessToken
					, ref alParamsCoupleError // alParamsCoupleError
                                              ////
                    , objRQ_Mst_NNT.Mst_NNT.MST // objMST
                    , objRQ_Mst_NNT.Mst_NNT.NNTFullName // objNNTFullName
                    , objRQ_Mst_NNT.Mst_NNT.MSTParent // objMSTParent
                    , objRQ_Mst_NNT.Mst_NNT.ProvinceCode // objProvinceCode
                    , objRQ_Mst_NNT.Mst_NNT.DistrictCode // objDistrictCode
                    //, objRQ_Mst_NNT.Mst_NNT.NNTType // objNNTType
                    , objRQ_Mst_NNT.Mst_NNT.DLCode // objDLCode
                    , objRQ_Mst_NNT.Mst_NNT.NNTAddress // objAddress
                    , objRQ_Mst_NNT.Mst_NNT.NNTMobile // objMobile
                    , objRQ_Mst_NNT.Mst_NNT.NNTPhone // objPhone
                    , objRQ_Mst_NNT.Mst_NNT.NNTFax // objFax
                    , objRQ_Mst_NNT.Mst_NNT.PresentBy // objPresentBy
                    , objRQ_Mst_NNT.Mst_NNT.BusinessRegNo // objBusinessRegNo
                    , objRQ_Mst_NNT.Mst_NNT.NNTPosition // objPosition
                    , objRQ_Mst_NNT.Mst_NNT.PresentIDNo // objPresentIDNo
                    , objRQ_Mst_NNT.Mst_NNT.PresentIDType // objPresentIDType
                    , objRQ_Mst_NNT.Mst_NNT.GovTaxID // objGovTaxID
                    , objRQ_Mst_NNT.Mst_NNT.ContactName // objContactName
                    , objRQ_Mst_NNT.Mst_NNT.ContactPhone // objContactPhone
                    , objRQ_Mst_NNT.Mst_NNT.ContactEmail // objContactEmail
                    , objRQ_Mst_NNT.Mst_NNT.Website // objWebsite
                    , objRQ_Mst_NNT.Mst_NNT.CANumber // objCANumber
                    , objRQ_Mst_NNT.Mst_NNT.CAOrg // objCAOrg
                    , objRQ_Mst_NNT.Mst_NNT.CAEffDTimeUTCStart // objCAEffDTimeUTCStart
                    , objRQ_Mst_NNT.Mst_NNT.CAEffDTimeUTCEnd // objCAEffDTimeUTCEnd
                    , objRQ_Mst_NNT.Mst_NNT.PackageCode // objPackageCode
                    , objRQ_Mst_NNT.Mst_NNT.CreatedDate // objCreatedDate
                    , objRQ_Mst_NNT.Mst_NNT.AccNo // objAccNo
                    , objRQ_Mst_NNT.Mst_NNT.AccHolder // objAccHolder
                    , objRQ_Mst_NNT.Mst_NNT.BankName // objBankName
                    , objRQ_Mst_NNT.Mst_NNT.BizType // objBizType
                    , objRQ_Mst_NNT.Mst_NNT.BizFieldCode // objBizFieldCode
                    , objRQ_Mst_NNT.Mst_NNT.BizSizeCode // objBizSizeCode
                    ////
                    , "O" // objDepartmentCode Fix Cung
                     ////
                    , objRQ_Mst_NNT.Mst_NNT.UserPassword // objUserPassword
                    , objRQ_Mst_NNT.Mst_NNT.UserPasswordRepeat // objUserPasswordRepeat
                    );
                #endregion

                // Return Good:
                return mdsResult;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsResult
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Write ReturnLog:
                //_cf.ProcessBizReturn(
                //	ref mdsResult // mdsFinal
                //	, strTid // strTid
                //	, strFunctionName // strFunctionName
                //	);
                #endregion
            }
        }

		public DataSet WA_Mst_NNT_Registry_New20190723(
			ref ArrayList alParamsCoupleError
			, RQ_Mst_NNT objRQ_Mst_NNT
			////
			, out RT_Mst_NNT objRT_Mst_NNT
			)
		{
			#region // Temp:
			string strTid = objRQ_Mst_NNT.Tid;
			objRT_Mst_NNT = new RT_Mst_NNT();
			DataSet mdsResult = CmUtils.CMyDataSet.NewMyDataSet(strTid);
			DateTime dtimeSys = DateTime.UtcNow;
			//DataSet mdsExec = null;
			//DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(objRQ_Mst_NNT.Tid);
			//int nTidSeq = 0;
			//bool bNeedTransaction = true;
			string strFunctionName = "WA_Mst_NNT_Registry";
			string strErrorCodeDefault = TError.ErridnInventory.WA_Mst_NNT_Registry;
			alParamsCoupleError.AddRange(new object[]{
				"strFunctionName", strFunctionName
				, "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
				, "ReportServer", "ReportServer"
				});
			#endregion

			try
			{
				#region // Init:
				#endregion

				#region // Refine and Check Input:
				List<Mst_NNT> lst_Mst_NNT = new List<Mst_NNT>();
				#endregion

				#region // Mst_NNT_CreateNNTAndDepartment:
				mdsResult = Mst_NNT_Register_New20190723(
					objRQ_Mst_NNT.Tid // strTid
					, objRQ_Mst_NNT.GwUserCode // strGwUserCode
					, objRQ_Mst_NNT.GwPassword // strGwPassword
					, objRQ_Mst_NNT.WAUserCode // strUserCode
					, objRQ_Mst_NNT.WAUserPassword // strUserPassword
					, objRQ_Mst_NNT.AccessToken // strAccessToken
					, ref alParamsCoupleError // alParamsCoupleError
											  ////
					, objRQ_Mst_NNT.Mst_NNT.MST // objMST
					, objRQ_Mst_NNT.Mst_NNT.NNTFullName // objNNTFullName
					, objRQ_Mst_NNT.Mst_NNT.MSTParent // objMSTParent
					, objRQ_Mst_NNT.Mst_NNT.ProvinceCode // objProvinceCode
					, objRQ_Mst_NNT.Mst_NNT.DistrictCode // objDistrictCode
														 //, objRQ_Mst_NNT.Mst_NNT.NNTType // objNNTType
					, objRQ_Mst_NNT.Mst_NNT.DLCode // objDLCode
					, objRQ_Mst_NNT.Mst_NNT.NNTAddress // objAddress
					, objRQ_Mst_NNT.Mst_NNT.NNTMobile // objMobile
					, objRQ_Mst_NNT.Mst_NNT.NNTPhone // objPhone
					, objRQ_Mst_NNT.Mst_NNT.NNTFax // objFax
					, objRQ_Mst_NNT.Mst_NNT.PresentBy // objPresentBy
					, objRQ_Mst_NNT.Mst_NNT.BusinessRegNo // objBusinessRegNo
					, objRQ_Mst_NNT.Mst_NNT.NNTPosition // objPosition
					, objRQ_Mst_NNT.Mst_NNT.PresentIDNo // objPresentIDNo
					, objRQ_Mst_NNT.Mst_NNT.PresentIDType // objPresentIDType
					, objRQ_Mst_NNT.Mst_NNT.GovTaxID // objGovTaxID
					, objRQ_Mst_NNT.Mst_NNT.ContactName // objContactName
					, objRQ_Mst_NNT.Mst_NNT.ContactPhone // objContactPhone
					, objRQ_Mst_NNT.Mst_NNT.ContactEmail // objContactEmail
					, objRQ_Mst_NNT.Mst_NNT.Website // objWebsite
					, objRQ_Mst_NNT.Mst_NNT.CANumber // objCANumber
					, objRQ_Mst_NNT.Mst_NNT.CAOrg // objCAOrg
					, objRQ_Mst_NNT.Mst_NNT.CAEffDTimeUTCStart // objCAEffDTimeUTCStart
					, objRQ_Mst_NNT.Mst_NNT.CAEffDTimeUTCEnd // objCAEffDTimeUTCEnd
					, objRQ_Mst_NNT.Mst_NNT.PackageCode // objPackageCode
					, objRQ_Mst_NNT.Mst_NNT.CreatedDate // objCreatedDate
					, objRQ_Mst_NNT.Mst_NNT.AccNo // objAccNo
					, objRQ_Mst_NNT.Mst_NNT.AccHolder // objAccHolder
					, objRQ_Mst_NNT.Mst_NNT.BankName // objBankName
					, objRQ_Mst_NNT.Mst_NNT.BizType // objBizType
					, objRQ_Mst_NNT.Mst_NNT.BizFieldCode // objBizFieldCode
					, objRQ_Mst_NNT.Mst_NNT.BizSizeCode // objBizSizeCode
														////
					, "O" // objDepartmentCode Fix Cung
						  ////
					, objRQ_Mst_NNT.Mst_NNT.UserPassword // objUserPassword
					, objRQ_Mst_NNT.Mst_NNT.UserPasswordRepeat // objUserPasswordRepeat

					, objRQ_Mst_NNT.Mst_NNT.QtyLicense // objQtyLicense
					);
				#endregion

				// Return Good:
				return mdsResult;
			}
			catch (Exception exc)
			{
				#region // Catch of try:
				// Return Bad:
				return TUtils.CProcessExc.Process(
					ref mdsResult
					, exc
					, strErrorCodeDefault
					, alParamsCoupleError.ToArray()
					);
				#endregion
			}
			finally
			{
				#region // Finally of try:
				// Write ReturnLog:
				//_cf.ProcessBizReturn(
				//	ref mdsResult // mdsFinal
				//	, strTid // strTid
				//	, strFunctionName // strFunctionName
				//	);
				#endregion
			}
		}

		public DataSet WAS_Mst_NNT_Registry_New20190817(
			ref ArrayList alParamsCoupleError
			, RQ_Mst_NNT objRQ_Mst_NNT
			////
			, out RT_Mst_NNT objRT_Mst_NNT
			)
		{
			#region // Temp:
			string strTid = objRQ_Mst_NNT.Tid;
			objRT_Mst_NNT = new RT_Mst_NNT();
			DataSet mdsResult = CmUtils.CMyDataSet.NewMyDataSet(strTid);
			DateTime dtimeSys = DateTime.UtcNow;
			//DataSet mdsExec = null;
			//DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(objRQ_Mst_NNT.Tid);
			//int nTidSeq = 0;
			//bool bNeedTransaction = true;
			string strFunctionName = "WA_Mst_NNT_Registry";
			string strErrorCodeDefault = TError.ErridnInventory.WA_Mst_NNT_Registry;
			alParamsCoupleError.AddRange(new object[]{
				"strFunctionName", strFunctionName
				, "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
				, "ReportServer", "ReportServer"
				});
			#endregion

			try
			{
				#region // Init:
				#endregion

				#region // Refine and Check Input:
				////
				List<Mst_NNT> lst_Mst_NNT = new List<Mst_NNT>();
				DataSet dsData = new DataSet();
				{
					////
					DataTable dt_MstSv_Inos_Package = TUtils.DataTableCmUtils.ToDataTable<MstSv_Inos_Package>(objRQ_Mst_NNT.Lst_MstSv_Inos_Package, "MstSv_Inos_Package");
					dsData.Tables.Add(dt_MstSv_Inos_Package);
				}
				#endregion

				#region // Mst_NNT_CreateNNTAndDepartment:
				mdsResult = Mst_NNT_Register_New20190817(
					objRQ_Mst_NNT.Tid // strTid
					, objRQ_Mst_NNT.GwUserCode // strGwUserCode
					, objRQ_Mst_NNT.GwPassword // strGwPassword
					, objRQ_Mst_NNT.WAUserCode // strUserCode
					, objRQ_Mst_NNT.WAUserPassword // strUserPassword
					, objRQ_Mst_NNT.AccessToken // strAccessToken
					, ref alParamsCoupleError // alParamsCoupleError
											  ////
					, objRQ_Mst_NNT.Mst_NNT.MST // objMST
					, objRQ_Mst_NNT.Mst_NNT.NNTFullName // objNNTFullName
					, objRQ_Mst_NNT.Mst_NNT.MSTParent // objMSTParent
					, objRQ_Mst_NNT.Mst_NNT.ProvinceCode // objProvinceCode
					, objRQ_Mst_NNT.Mst_NNT.DistrictCode // objDistrictCode
														 //, objRQ_Mst_NNT.Mst_NNT.NNTType // objNNTType
					, objRQ_Mst_NNT.Mst_NNT.DLCode // objDLCode
					, objRQ_Mst_NNT.Mst_NNT.NNTAddress // objAddress
					, objRQ_Mst_NNT.Mst_NNT.NNTMobile // objMobile
					, objRQ_Mst_NNT.Mst_NNT.NNTPhone // objPhone
					, objRQ_Mst_NNT.Mst_NNT.NNTFax // objFax
					, objRQ_Mst_NNT.Mst_NNT.PresentBy // objPresentBy
					, objRQ_Mst_NNT.Mst_NNT.BusinessRegNo // objBusinessRegNo
					, objRQ_Mst_NNT.Mst_NNT.NNTPosition // objPosition
					, objRQ_Mst_NNT.Mst_NNT.PresentIDNo // objPresentIDNo
					, objRQ_Mst_NNT.Mst_NNT.PresentIDType // objPresentIDType
					, objRQ_Mst_NNT.Mst_NNT.GovTaxID // objGovTaxID
					, objRQ_Mst_NNT.Mst_NNT.ContactName // objContactName
					, objRQ_Mst_NNT.Mst_NNT.ContactPhone // objContactPhone
					, objRQ_Mst_NNT.Mst_NNT.ContactEmail // objContactEmail
					, objRQ_Mst_NNT.Mst_NNT.Website // objWebsite
					, objRQ_Mst_NNT.Mst_NNT.CANumber // objCANumber
					, objRQ_Mst_NNT.Mst_NNT.CAOrg // objCAOrg
					, objRQ_Mst_NNT.Mst_NNT.CAEffDTimeUTCStart // objCAEffDTimeUTCStart
					, objRQ_Mst_NNT.Mst_NNT.CAEffDTimeUTCEnd // objCAEffDTimeUTCEnd
					, objRQ_Mst_NNT.Mst_NNT.PackageCode // objPackageCode
					, objRQ_Mst_NNT.Mst_NNT.CreatedDate // objCreatedDate
					, objRQ_Mst_NNT.Mst_NNT.AccNo // objAccNo
					, objRQ_Mst_NNT.Mst_NNT.AccHolder // objAccHolder
					, objRQ_Mst_NNT.Mst_NNT.BankName // objBankName
					, objRQ_Mst_NNT.Mst_NNT.BizType // objBizType
					, objRQ_Mst_NNT.Mst_NNT.BizFieldCode // objBizFieldCode
					, objRQ_Mst_NNT.Mst_NNT.BizSizeCode // objBizSizeCode
														////
					, "O" // objDepartmentCode Fix Cung
						  ////
					, objRQ_Mst_NNT.Mst_NNT.UserPassword // objUserPassword
					, objRQ_Mst_NNT.Mst_NNT.UserPasswordRepeat // objUserPasswordRepeat

					, objRQ_Mst_NNT.Mst_NNT.QtyLicense // objQtyLicense
					, dsData // dsData
					);
				#endregion

				// Return Good:
				return mdsResult;
			}
			catch (Exception exc)
			{
				#region // Catch of try:
				// Return Bad:
				return TUtils.CProcessExc.Process(
					ref mdsResult
					, exc
					, strErrorCodeDefault
					, alParamsCoupleError.ToArray()
					);
				#endregion
			}
			finally
			{
				#region // Finally of try:
				// Write ReturnLog:
				//_cf.ProcessBizReturn(
				//	ref mdsResult // mdsFinal
				//	, strTid // strTid
				//	, strFunctionName // strFunctionName
				//	);
				#endregion
			}
		}

		public DataSet WAS_RptSv_Mst_NNT_Register(
			ref ArrayList alParamsCoupleError
			, RQ_Mst_NNT objRQ_Mst_NNT
			////
			, out RT_Mst_NNT objRT_Mst_NNT
			)
		{
			#region // Temp:
			string strTid = objRQ_Mst_NNT.Tid;
			objRT_Mst_NNT = new RT_Mst_NNT();
			DataSet mdsResult = CmUtils.CMyDataSet.NewMyDataSet(strTid);
			DateTime dtimeSys = DateTime.UtcNow;
			//DataSet mdsExec = null;
			//DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(objRQ_Mst_NNT.Tid);
			//int nTidSeq = 0;
			//bool bNeedTransaction = true;
			string strFunctionName = "WAS_RptSv_Mst_NNT_Register";
			string strErrorCodeDefault = TError.ErridnInventory.WA_Mst_NNT_Registry;
			alParamsCoupleError.AddRange(new object[]{
				"strFunctionName", strFunctionName
				, "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
				, "ReportServer", "ReportServer"
				});
			#endregion

			try
			{
				#region // Init:
				#endregion

				#region // Refine and Check Input:
				////
				List<Mst_NNT> lst_Mst_NNT = new List<Mst_NNT>();
				DataSet dsData = new DataSet();
				{
					////
					DataTable dt_MstSv_Inos_User = TUtils.DataTableCmUtils.ToDataTable<MstSv_Inos_User>(objRQ_Mst_NNT.Lst_MstSv_Inos_User, "MstSv_Inos_User");
					dsData.Tables.Add(dt_MstSv_Inos_User);

					DataTable dt_MstSv_Inos_Org = TUtils.DataTableCmUtils.ToDataTable<MstSv_Inos_Org>(objRQ_Mst_NNT.Lst_MstSv_Inos_Org, "MstSv_Inos_Org");
					dsData.Tables.Add(dt_MstSv_Inos_Org);

					//DataTable dt_MstSv_Inos_OrgUser = TUtils.DataTableCmUtils.ToDataTable<MstSv_Inos_OrgUser>(objRQ_Mst_NNT.Lst_MstSv_Inos_OrgUser, "MstSv_Inos_OrgUser");
					//dsData.Tables.Add(dt_MstSv_Inos_OrgUser);

					//DataTable dt_MstSv_Inos_OrgInvite = TUtils.DataTableCmUtils.ToDataTable<MstSv_Inos_OrgInvite>(objRQ_Mst_NNT.Lst_MstSv_Inos_OrgInvite, "MstSv_Inos_OrgInvite");
					//dsData.Tables.Add(dt_MstSv_Inos_OrgInvite);


					//DataTable dt_MstSv_Inos_Package = TUtils.DataTableCmUtils.ToDataTable<MstSv_Inos_Package>(objRQ_Mst_NNT.Lst_MstSv_Inos_Package, "MstSv_Inos_Package");
					//dsData.Tables.Add(dt_MstSv_Inos_Package);
				}
				#endregion

				#region // RptSv_Mst_NNT_Register:
				mdsResult = RptSv_Mst_NNT_Register_New20200208(
					objRQ_Mst_NNT.Tid // strTid
					, objRQ_Mst_NNT.GwUserCode // strGwUserCode
					, objRQ_Mst_NNT.GwPassword // strGwPassword
					, objRQ_Mst_NNT.WAUserCode // strUserCode
					, objRQ_Mst_NNT.WAUserPassword // strUserPassword
					, objRQ_Mst_NNT.AccessToken // strAccessToken
					, ref alParamsCoupleError // alParamsCoupleError
											  ////
					, objRQ_Mst_NNT.Mst_NNT.MST // objMST
					, objRQ_Mst_NNT.Mst_NNT.NNTFullName // objNNTFullName
					, objRQ_Mst_NNT.Mst_NNT.MSTParent // objMSTParent
					, objRQ_Mst_NNT.Mst_NNT.ProvinceCode // objProvinceCode
					, objRQ_Mst_NNT.Mst_NNT.DistrictCode // objDistrictCode
														 //, objRQ_Mst_NNT.Mst_NNT.NNTType // objNNTType
					, objRQ_Mst_NNT.Mst_NNT.DLCode // objDLCode
					, objRQ_Mst_NNT.Mst_NNT.NNTAddress // objAddress
					, objRQ_Mst_NNT.Mst_NNT.NNTMobile // objMobile
					, objRQ_Mst_NNT.Mst_NNT.NNTPhone // objPhone
					, objRQ_Mst_NNT.Mst_NNT.NNTFax // objFax
					, objRQ_Mst_NNT.Mst_NNT.PresentBy // objPresentBy
					, objRQ_Mst_NNT.Mst_NNT.BusinessRegNo // objBusinessRegNo
					, objRQ_Mst_NNT.Mst_NNT.NNTPosition // objPosition
					, objRQ_Mst_NNT.Mst_NNT.PresentIDNo // objPresentIDNo
					, objRQ_Mst_NNT.Mst_NNT.PresentIDType // objPresentIDType
					, objRQ_Mst_NNT.Mst_NNT.GovTaxID // objGovTaxID
					, objRQ_Mst_NNT.Mst_NNT.ContactName // objContactName
					, objRQ_Mst_NNT.Mst_NNT.ContactPhone // objContactPhone
					, objRQ_Mst_NNT.Mst_NNT.ContactEmail // objContactEmail
					, objRQ_Mst_NNT.Mst_NNT.Website // objWebsite
					, objRQ_Mst_NNT.Mst_NNT.CANumber // objCANumber
					, objRQ_Mst_NNT.Mst_NNT.CAOrg // objCAOrg
					, objRQ_Mst_NNT.Mst_NNT.CAEffDTimeUTCStart // objCAEffDTimeUTCStart
					, objRQ_Mst_NNT.Mst_NNT.CAEffDTimeUTCEnd // objCAEffDTimeUTCEnd
					, objRQ_Mst_NNT.Mst_NNT.PackageCode // objPackageCode
					, objRQ_Mst_NNT.Mst_NNT.CreatedDate // objCreatedDate
					, objRQ_Mst_NNT.Mst_NNT.AccNo // objAccNo
					, objRQ_Mst_NNT.Mst_NNT.AccHolder // objAccHolder
					, objRQ_Mst_NNT.Mst_NNT.BankName // objBankName
					, objRQ_Mst_NNT.Mst_NNT.BizType // objBizType
					, objRQ_Mst_NNT.Mst_NNT.BizFieldCode // objBizFieldCode
					, objRQ_Mst_NNT.Mst_NNT.BizSizeCode // objBizSizeCode
					, objRQ_Mst_NNT.Mst_NNT.DealerType // objDealerType
													   ////
					, "O" // objDepartmentCode Fix Cung
						  ////
					, objRQ_Mst_NNT.Mst_NNT.UserPassword // objUserPassword
					, objRQ_Mst_NNT.Mst_NNT.UserPasswordRepeat // objUserPasswordRepeat
					, dsData // dsData
					);
				#endregion

				// Return Good:
				return mdsResult;
			}
			catch (Exception exc)
			{
				#region // Catch of try:
				// Return Bad:
				return TUtils.CProcessExc.Process(
					ref mdsResult
					, exc
					, strErrorCodeDefault
					, alParamsCoupleError.ToArray()
					);
				#endregion
			}
			finally
			{
				#region // Finally of try:
				// Write ReturnLog:
				//_cf.ProcessBizReturn(
				//	ref mdsResult // mdsFinal
				//	, strTid // strTid
				//	, strFunctionName // strFunctionName
				//	);
				#endregion
			}
		}

		public DataSet WAS_RptSv_Mst_NNT_Add(
			ref ArrayList alParamsCoupleError
			, RQ_Mst_NNT objRQ_Mst_NNT
			////
			, out RT_Mst_NNT objRT_Mst_NNT
			)
		{
			#region // Temp:
			string strTid = objRQ_Mst_NNT.Tid;
			objRT_Mst_NNT = new RT_Mst_NNT();
			DataSet mdsResult = CmUtils.CMyDataSet.NewMyDataSet(strTid);
			DateTime dtimeSys = DateTime.UtcNow;
			//DataSet mdsExec = null;
			//DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(objRQ_Mst_NNT.Tid);
			//int nTidSeq = 0;
			//bool bNeedTransaction = true;
			string strFunctionName = "WAS_RptSv_Mst_NNT_Register";
			string strErrorCodeDefault = TError.ErridnInventory.WA_Mst_NNT_Registry;
			alParamsCoupleError.AddRange(new object[]{
				"strFunctionName", strFunctionName
				, "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
				, "ReportServer", "ReportServer"
				});
			#endregion

			try
			{
				#region // Init:
				#endregion

				#region // Refine and Check Input:
				////
				List<Mst_NNT> lst_Mst_NNT = new List<Mst_NNT>();
				DataSet dsData = new DataSet();
				{
					////
					//DataTable dt_MstSv_Inos_User = TUtils.DataTableCmUtils.ToDataTable<MstSv_Inos_User>(objRQ_Mst_NNT.Lst_MstSv_Inos_User, "MstSv_Inos_User");
					//dsData.Tables.Add(dt_MstSv_Inos_User);

					//DataTable dt_MstSv_Inos_Org = TUtils.DataTableCmUtils.ToDataTable<MstSv_Inos_Org>(objRQ_Mst_NNT.Lst_MstSv_Inos_Org, "MstSv_Inos_Org");
					//dsData.Tables.Add(dt_MstSv_Inos_Org);

					//DataTable dt_MstSv_Inos_OrgUser = TUtils.DataTableCmUtils.ToDataTable<MstSv_Inos_OrgUser>(objRQ_Mst_NNT.Lst_MstSv_Inos_OrgUser, "MstSv_Inos_OrgUser");
					//dsData.Tables.Add(dt_MstSv_Inos_OrgUser);

					//DataTable dt_MstSv_Inos_OrgInvite = TUtils.DataTableCmUtils.ToDataTable<MstSv_Inos_OrgInvite>(objRQ_Mst_NNT.Lst_MstSv_Inos_OrgInvite, "MstSv_Inos_OrgInvite");
					//dsData.Tables.Add(dt_MstSv_Inos_OrgInvite);


					//DataTable dt_MstSv_Inos_Package = TUtils.DataTableCmUtils.ToDataTable<MstSv_Inos_Package>(objRQ_Mst_NNT.Lst_MstSv_Inos_Package, "MstSv_Inos_Package");
					//dsData.Tables.Add(dt_MstSv_Inos_Package);
				}
				#endregion

				#region // RptSv_Mst_NNT_Add:
				mdsResult = RptSv_Mst_NNT_Add(
					objRQ_Mst_NNT.Tid // strTid
					, objRQ_Mst_NNT.GwUserCode // strGwUserCode
					, objRQ_Mst_NNT.GwPassword // strGwPassword
					, objRQ_Mst_NNT.WAUserCode // strUserCode
					, objRQ_Mst_NNT.WAUserPassword // strUserPassword
					, objRQ_Mst_NNT.AccessToken // strAccessToken
					, ref alParamsCoupleError // alParamsCoupleError
											  //// InosCreateUser
					, objRQ_Mst_NNT.OS_Inos_User.Name // objName
					, objRQ_Mst_NNT.OS_Inos_User.Email // objEmail
					, objRQ_Mst_NNT.OS_Inos_User.Password // objPassword
					, objRQ_Mst_NNT.OS_Inos_User.Language // objLanguage
					, objRQ_Mst_NNT.OS_Inos_User.TimeZone // objTimeZone
					, objRQ_Mst_NNT.OS_Inos_User.VerificationCode // objVerificationCode
																  //// InosCreateOrg														
					, objRQ_Mst_NNT.OS_Inos_Org.ParentId // objParentId
					, objRQ_Mst_NNT.OS_Inos_Org.Name // objName
					, objRQ_Mst_NNT.iNOS_Mst_BizType.BizType // objBizType
					, objRQ_Mst_NNT.iNOS_Mst_BizType.BizTypeName // objBizTypeName
					, objRQ_Mst_NNT.iNOS_Mst_BizField.BizFieldCode // objBizField
					, objRQ_Mst_NNT.iNOS_Mst_BizField.BizFieldName // objBizFieldName
					, objRQ_Mst_NNT.OS_Inos_Org.ContactName // objContactName
					, objRQ_Mst_NNT.OS_Inos_Org.Email // objEmail
					, objRQ_Mst_NNT.OS_Inos_Org.PhoneNo // objPhoneNo
					, objRQ_Mst_NNT.OS_Inos_Org.Description // objDescription
					, objRQ_Mst_NNT.OS_Inos_Org.Enable // objEnable
														   ////
					, objRQ_Mst_NNT.Mst_NNT.MST // objMST
					, objRQ_Mst_NNT.Mst_NNT.NNTFullName // objNNTFullName
					, objRQ_Mst_NNT.Mst_NNT.MSTParent // objMSTParent
					, objRQ_Mst_NNT.Mst_NNT.ProvinceCode // objProvinceCode
					, objRQ_Mst_NNT.Mst_NNT.DistrictCode // objDistrictCode
														 //, objRQ_Mst_NNT.Mst_NNT.NNTType // objNNTType
					, objRQ_Mst_NNT.Mst_NNT.DLCode // objDLCode
					, objRQ_Mst_NNT.Mst_NNT.NNTAddress // objAddress
					, objRQ_Mst_NNT.Mst_NNT.NNTMobile // objMobile
					, objRQ_Mst_NNT.Mst_NNT.NNTPhone // objPhone
					, objRQ_Mst_NNT.Mst_NNT.NNTFax // objFax
					, objRQ_Mst_NNT.Mst_NNT.PresentBy // objPresentBy
					, objRQ_Mst_NNT.Mst_NNT.BusinessRegNo // objBusinessRegNo
					, objRQ_Mst_NNT.Mst_NNT.NNTPosition // objPosition
					, objRQ_Mst_NNT.Mst_NNT.PresentIDNo // objPresentIDNo
					, objRQ_Mst_NNT.Mst_NNT.PresentIDType // objPresentIDType
					, objRQ_Mst_NNT.Mst_NNT.GovTaxID // objGovTaxID
					, objRQ_Mst_NNT.Mst_NNT.ContactName // objContactName
					, objRQ_Mst_NNT.Mst_NNT.ContactPhone // objContactPhone
					, objRQ_Mst_NNT.Mst_NNT.ContactEmail // objContactEmail
					, objRQ_Mst_NNT.Mst_NNT.Website // objWebsite
					, objRQ_Mst_NNT.Mst_NNT.CANumber // objCANumber
					, objRQ_Mst_NNT.Mst_NNT.CAOrg // objCAOrg
					, objRQ_Mst_NNT.Mst_NNT.CAEffDTimeUTCStart // objCAEffDTimeUTCStart
					, objRQ_Mst_NNT.Mst_NNT.CAEffDTimeUTCEnd // objCAEffDTimeUTCEnd
					, objRQ_Mst_NNT.Mst_NNT.PackageCode // objPackageCode
					, objRQ_Mst_NNT.Mst_NNT.CreatedDate // objCreatedDate
					, objRQ_Mst_NNT.Mst_NNT.AccNo // objAccNo
					, objRQ_Mst_NNT.Mst_NNT.AccHolder // objAccHolder
					, objRQ_Mst_NNT.Mst_NNT.BankName // objBankName
					, objRQ_Mst_NNT.Mst_NNT.BizType // objBizType
					, objRQ_Mst_NNT.Mst_NNT.BizFieldCode // objBizFieldCode
					, objRQ_Mst_NNT.Mst_NNT.BizSizeCode // objBizSizeCode
													   ////
					, "O" // objDepartmentCode Fix Cung
						  ////
					, objRQ_Mst_NNT.Mst_NNT.UserPassword // objUserPassword
					, objRQ_Mst_NNT.Mst_NNT.UserPasswordRepeat // objUserPasswordRepeat
					//, dsData // dsData
					////
					, objRQ_Mst_NNT.Inos_LicOrder // Inos_LicOrder
					////
					, ref objRT_Mst_NNT // objRT_Mst_NNT
					);
				#endregion

				// Return Good:
				return mdsResult;
			}
			catch (Exception exc)
			{
				#region // Catch of try:
				// Return Bad:
				return TUtils.CProcessExc.Process(
					ref mdsResult
					, exc
					, strErrorCodeDefault
					, alParamsCoupleError.ToArray()
					);
				#endregion
			}
			finally
			{
				#region // Finally of try:
				// Write ReturnLog:
				//_cf.ProcessBizReturn(
				//	ref mdsResult // mdsFinal
				//	, strTid // strTid
				//	, strFunctionName // strFunctionName
				//	);
				#endregion
			}
		}


		public DataSet WAS_RptSv_Mst_NNT_Add_New20200208(
			ref ArrayList alParamsCoupleError
			, RQ_Mst_NNT objRQ_Mst_NNT
			////
			, out RT_Mst_NNT objRT_Mst_NNT
			)
		{
			#region // Temp:
			string strTid = objRQ_Mst_NNT.Tid;
			objRT_Mst_NNT = new RT_Mst_NNT();
			DataSet mdsResult = CmUtils.CMyDataSet.NewMyDataSet(strTid);
			DateTime dtimeSys = DateTime.UtcNow;
			//DataSet mdsExec = null;
			//DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(objRQ_Mst_NNT.Tid);
			//int nTidSeq = 0;
			//bool bNeedTransaction = true;
			string strFunctionName = "WAS_RptSv_Mst_NNT_Register";
			string strErrorCodeDefault = TError.ErridnInventory.WA_Mst_NNT_Registry;
			alParamsCoupleError.AddRange(new object[]{
				"strFunctionName", strFunctionName
				, "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
				, "ReportServer", "ReportServer"
				});
			#endregion

			try
			{
				#region // Init:
				#endregion

				#region // Refine and Check Input:
				////
				List<Mst_NNT> lst_Mst_NNT = new List<Mst_NNT>();
				DataSet dsData = new DataSet();
				{
					////
					//DataTable dt_MstSv_Inos_User = TUtils.DataTableCmUtils.ToDataTable<MstSv_Inos_User>(objRQ_Mst_NNT.Lst_MstSv_Inos_User, "MstSv_Inos_User");
					//dsData.Tables.Add(dt_MstSv_Inos_User);

					//DataTable dt_MstSv_Inos_Org = TUtils.DataTableCmUtils.ToDataTable<MstSv_Inos_Org>(objRQ_Mst_NNT.Lst_MstSv_Inos_Org, "MstSv_Inos_Org");
					//dsData.Tables.Add(dt_MstSv_Inos_Org);

					//DataTable dt_MstSv_Inos_OrgUser = TUtils.DataTableCmUtils.ToDataTable<MstSv_Inos_OrgUser>(objRQ_Mst_NNT.Lst_MstSv_Inos_OrgUser, "MstSv_Inos_OrgUser");
					//dsData.Tables.Add(dt_MstSv_Inos_OrgUser);

					//DataTable dt_MstSv_Inos_OrgInvite = TUtils.DataTableCmUtils.ToDataTable<MstSv_Inos_OrgInvite>(objRQ_Mst_NNT.Lst_MstSv_Inos_OrgInvite, "MstSv_Inos_OrgInvite");
					//dsData.Tables.Add(dt_MstSv_Inos_OrgInvite);


					//DataTable dt_MstSv_Inos_Package = TUtils.DataTableCmUtils.ToDataTable<MstSv_Inos_Package>(objRQ_Mst_NNT.Lst_MstSv_Inos_Package, "MstSv_Inos_Package");
					//dsData.Tables.Add(dt_MstSv_Inos_Package);
				}
				#endregion

				#region // RptSv_Mst_NNT_Add:
				mdsResult = RptSv_Mst_NNT_Add_New20200208(
					objRQ_Mst_NNT.Tid // strTid
					, objRQ_Mst_NNT.GwUserCode // strGwUserCode
					, objRQ_Mst_NNT.GwPassword // strGwPassword
					, objRQ_Mst_NNT.WAUserCode // strUserCode
					, objRQ_Mst_NNT.WAUserPassword // strUserPassword
					, objRQ_Mst_NNT.AccessToken // strAccessToken
					, ref alParamsCoupleError // alParamsCoupleError
											  //// InosCreateUser
					, objRQ_Mst_NNT.OS_Inos_User.Name // objName
					, objRQ_Mst_NNT.OS_Inos_User.Email // objEmail
					, objRQ_Mst_NNT.OS_Inos_User.Password // objPassword
					, objRQ_Mst_NNT.OS_Inos_User.Language // objLanguage
					, objRQ_Mst_NNT.OS_Inos_User.TimeZone // objTimeZone
					, objRQ_Mst_NNT.OS_Inos_User.VerificationCode // objVerificationCode
																  //// InosCreateOrg														
					, objRQ_Mst_NNT.OS_Inos_Org.ParentId // objParentId
					, objRQ_Mst_NNT.OS_Inos_Org.Name // objName
					, objRQ_Mst_NNT.iNOS_Mst_BizType.BizType // objBizType
					, objRQ_Mst_NNT.iNOS_Mst_BizType.BizTypeName // objBizTypeName
					, objRQ_Mst_NNT.iNOS_Mst_BizField.BizFieldCode // objBizField
					, objRQ_Mst_NNT.iNOS_Mst_BizField.BizFieldName // objBizFieldName
					, objRQ_Mst_NNT.OS_Inos_Org.ContactName // objContactName
					, objRQ_Mst_NNT.OS_Inos_Org.Email // objEmail
					, objRQ_Mst_NNT.OS_Inos_Org.PhoneNo // objPhoneNo
					, objRQ_Mst_NNT.OS_Inos_Org.Description // objDescription
					, objRQ_Mst_NNT.OS_Inos_Org.Enable // objEnable
													   ////
					, objRQ_Mst_NNT.Mst_NNT.MST // objMST
					, objRQ_Mst_NNT.Mst_NNT.NNTFullName // objNNTFullName
					, objRQ_Mst_NNT.Mst_NNT.MSTParent // objMSTParent
					, objRQ_Mst_NNT.Mst_NNT.ProvinceCode // objProvinceCode
					, objRQ_Mst_NNT.Mst_NNT.DistrictCode // objDistrictCode
														 //, objRQ_Mst_NNT.Mst_NNT.NNTType // objNNTType
					, objRQ_Mst_NNT.Mst_NNT.DLCode // objDLCode
					, objRQ_Mst_NNT.Mst_NNT.NNTAddress // objAddress
					, objRQ_Mst_NNT.Mst_NNT.NNTMobile // objMobile
					, objRQ_Mst_NNT.Mst_NNT.NNTPhone // objPhone
					, objRQ_Mst_NNT.Mst_NNT.NNTFax // objFax
					, objRQ_Mst_NNT.Mst_NNT.PresentBy // objPresentBy
					, objRQ_Mst_NNT.Mst_NNT.BusinessRegNo // objBusinessRegNo
					, objRQ_Mst_NNT.Mst_NNT.NNTPosition // objPosition
					, objRQ_Mst_NNT.Mst_NNT.PresentIDNo // objPresentIDNo
					, objRQ_Mst_NNT.Mst_NNT.PresentIDType // objPresentIDType
					, objRQ_Mst_NNT.Mst_NNT.GovTaxID // objGovTaxID
					, objRQ_Mst_NNT.Mst_NNT.ContactName // objContactName
					, objRQ_Mst_NNT.Mst_NNT.ContactPhone // objContactPhone
					, objRQ_Mst_NNT.Mst_NNT.ContactEmail // objContactEmail
					, objRQ_Mst_NNT.Mst_NNT.Website // objWebsite
					, objRQ_Mst_NNT.Mst_NNT.CANumber // objCANumber
					, objRQ_Mst_NNT.Mst_NNT.CAOrg // objCAOrg
					, objRQ_Mst_NNT.Mst_NNT.CAEffDTimeUTCStart // objCAEffDTimeUTCStart
					, objRQ_Mst_NNT.Mst_NNT.CAEffDTimeUTCEnd // objCAEffDTimeUTCEnd
					, objRQ_Mst_NNT.Mst_NNT.PackageCode // objPackageCode
					, objRQ_Mst_NNT.Mst_NNT.CreatedDate // objCreatedDate
					, objRQ_Mst_NNT.Mst_NNT.AccNo // objAccNo
					, objRQ_Mst_NNT.Mst_NNT.AccHolder // objAccHolder
					, objRQ_Mst_NNT.Mst_NNT.BankName // objBankName
					, objRQ_Mst_NNT.Mst_NNT.BizType // objBizType
					, objRQ_Mst_NNT.Mst_NNT.BizFieldCode // objBizFieldCode
					, objRQ_Mst_NNT.Mst_NNT.BizSizeCode // objBizSizeCode
					, objRQ_Mst_NNT.Mst_NNT.DealerType // objDealerType
													   ////
					, "O" // objDepartmentCode Fix Cung
						  ////
					, objRQ_Mst_NNT.Mst_NNT.UserPassword // objUserPassword
					, objRQ_Mst_NNT.Mst_NNT.UserPasswordRepeat // objUserPasswordRepeat
															   //, dsData // dsData
															   ////
					, objRQ_Mst_NNT.Inos_LicOrder // Inos_LicOrder
												  ////
					, ref objRT_Mst_NNT // objRT_Mst_NNT
					);
				#endregion

				// Return Good:
				return mdsResult;
			}
			catch (Exception exc)
			{
				#region // Catch of try:
				// Return Bad:
				return TUtils.CProcessExc.Process(
					ref mdsResult
					, exc
					, strErrorCodeDefault
					, alParamsCoupleError.ToArray()
					);
				#endregion
			}
			finally
			{
				#region // Finally of try:
				// Write ReturnLog:
				//_cf.ProcessBizReturn(
				//	ref mdsResult // mdsFinal
				//	, strTid // strTid
				//	, strFunctionName // strFunctionName
				//	);
				#endregion
			}
		}
		public DataSet WAS_RptSv_Mst_NNT_Calc(
			ref ArrayList alParamsCoupleError
			, RQ_Mst_NNT objRQ_Mst_NNT
			////
			, out RT_Mst_NNT objRT_Mst_NNT
			)
		{
			#region // Temp:
			string strTid = objRQ_Mst_NNT.Tid;
			objRT_Mst_NNT = new RT_Mst_NNT();
			DataSet mdsResult = CmUtils.CMyDataSet.NewMyDataSet(strTid);
			DateTime dtimeSys = DateTime.UtcNow;
			//DataSet mdsExec = null;
			//DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(objRQ_Mst_NNT.Tid);
			//int nTidSeq = 0;
			//bool bNeedTransaction = true;
			string strFunctionName = "WAS_RptSv_Mst_NNT_Register";
			string strErrorCodeDefault = TError.ErridnInventory.WA_Mst_NNT_Registry;
			alParamsCoupleError.AddRange(new object[]{
				"strFunctionName", strFunctionName
				, "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
				, "ReportServer", "ReportServer"
				});
			#endregion

			try
			{
				#region // Init:
				#endregion

				#region // Refine and Check Input:
				////
				List<Mst_NNT> lst_Mst_NNT = new List<Mst_NNT>();
				DataSet dsData = new DataSet();
				{
					////
					//DataTable dt_MstSv_Inos_User = TUtils.DataTableCmUtils.ToDataTable<MstSv_Inos_User>(objRQ_Mst_NNT.Lst_MstSv_Inos_User, "MstSv_Inos_User");
					//dsData.Tables.Add(dt_MstSv_Inos_User);

					//DataTable dt_MstSv_Inos_Org = TUtils.DataTableCmUtils.ToDataTable<MstSv_Inos_Org>(objRQ_Mst_NNT.Lst_MstSv_Inos_Org, "MstSv_Inos_Org");
					//dsData.Tables.Add(dt_MstSv_Inos_Org);

					//DataTable dt_MstSv_Inos_OrgUser = TUtils.DataTableCmUtils.ToDataTable<MstSv_Inos_OrgUser>(objRQ_Mst_NNT.Lst_MstSv_Inos_OrgUser, "MstSv_Inos_OrgUser");
					//dsData.Tables.Add(dt_MstSv_Inos_OrgUser);

					//DataTable dt_MstSv_Inos_OrgInvite = TUtils.DataTableCmUtils.ToDataTable<MstSv_Inos_OrgInvite>(objRQ_Mst_NNT.Lst_MstSv_Inos_OrgInvite, "MstSv_Inos_OrgInvite");
					//dsData.Tables.Add(dt_MstSv_Inos_OrgInvite);


					//DataTable dt_MstSv_Inos_Package = TUtils.DataTableCmUtils.ToDataTable<MstSv_Inos_Package>(objRQ_Mst_NNT.Lst_MstSv_Inos_Package, "MstSv_Inos_Package");
					//dsData.Tables.Add(dt_MstSv_Inos_Package);
				}
				#endregion

				#region // RptSv_Mst_NNT_Calc:
				mdsResult = RptSv_Mst_NNT_Calc_New20200208(
					objRQ_Mst_NNT.Tid // strTid
					, objRQ_Mst_NNT.GwUserCode // strGwUserCode
					, objRQ_Mst_NNT.GwPassword // strGwPassword
					, objRQ_Mst_NNT.WAUserCode // strUserCode
					, objRQ_Mst_NNT.WAUserPassword // strUserPassword
					, objRQ_Mst_NNT.AccessToken // strAccessToken
					, ref alParamsCoupleError // alParamsCoupleError
					//// InosCreateUser
					, objRQ_Mst_NNT.OS_Inos_User.Name // objName
					, objRQ_Mst_NNT.OS_Inos_User.Email // objEmail
					, objRQ_Mst_NNT.OS_Inos_User.Password // objPassword
					, objRQ_Mst_NNT.OS_Inos_User.Language // objLanguage
					, objRQ_Mst_NNT.OS_Inos_User.TimeZone // objTimeZone
					, objRQ_Mst_NNT.OS_Inos_User.VerificationCode // objVerificationCode
					//// InosCreateOrg														
					, objRQ_Mst_NNT.OS_Inos_Org.ParentId // objParentId
					, objRQ_Mst_NNT.OS_Inos_Org.Name // objName
					, objRQ_Mst_NNT.iNOS_Mst_BizType.BizType // objBizType
					, objRQ_Mst_NNT.iNOS_Mst_BizType.BizTypeName // objBizTypeName
					, objRQ_Mst_NNT.iNOS_Mst_BizField.BizFieldCode // objBizField
					, objRQ_Mst_NNT.iNOS_Mst_BizField.BizFieldName // objBizFieldName
					, objRQ_Mst_NNT.OS_Inos_Org.ContactName // objContactName
					, objRQ_Mst_NNT.OS_Inos_Org.Email // objEmail
					, objRQ_Mst_NNT.OS_Inos_Org.PhoneNo // objPhoneNo
					, objRQ_Mst_NNT.OS_Inos_Org.Description // objDescription
					, objRQ_Mst_NNT.OS_Inos_Org.Enable // objEnable
					////
					, objRQ_Mst_NNT.Mst_NNT.MST // objMST
					, objRQ_Mst_NNT.Mst_NNT.NNTFullName // objNNTFullName
					, objRQ_Mst_NNT.Mst_NNT.MSTParent // objMSTParent
					, objRQ_Mst_NNT.Mst_NNT.ProvinceCode // objProvinceCode
					, objRQ_Mst_NNT.Mst_NNT.DistrictCode // objDistrictCode
					//, objRQ_Mst_NNT.Mst_NNT.NNTType // objNNTType
					, objRQ_Mst_NNT.Mst_NNT.DLCode // objDLCode
					, objRQ_Mst_NNT.Mst_NNT.NNTAddress // objAddress
					, objRQ_Mst_NNT.Mst_NNT.NNTMobile // objMobile
					, objRQ_Mst_NNT.Mst_NNT.NNTPhone // objPhone
					, objRQ_Mst_NNT.Mst_NNT.NNTFax // objFax
					, objRQ_Mst_NNT.Mst_NNT.PresentBy // objPresentBy
					, objRQ_Mst_NNT.Mst_NNT.BusinessRegNo // objBusinessRegNo
					, objRQ_Mst_NNT.Mst_NNT.NNTPosition // objPosition
					, objRQ_Mst_NNT.Mst_NNT.PresentIDNo // objPresentIDNo
					, objRQ_Mst_NNT.Mst_NNT.PresentIDType // objPresentIDType
					, objRQ_Mst_NNT.Mst_NNT.GovTaxID // objGovTaxID
					, objRQ_Mst_NNT.Mst_NNT.ContactName // objContactName
					, objRQ_Mst_NNT.Mst_NNT.ContactPhone // objContactPhone
					, objRQ_Mst_NNT.Mst_NNT.ContactEmail // objContactEmail
					, objRQ_Mst_NNT.Mst_NNT.Website // objWebsite
					, objRQ_Mst_NNT.Mst_NNT.CANumber // objCANumber
					, objRQ_Mst_NNT.Mst_NNT.CAOrg // objCAOrg
					, objRQ_Mst_NNT.Mst_NNT.CAEffDTimeUTCStart // objCAEffDTimeUTCStart
					, objRQ_Mst_NNT.Mst_NNT.CAEffDTimeUTCEnd // objCAEffDTimeUTCEnd
					, objRQ_Mst_NNT.Mst_NNT.PackageCode // objPackageCode
					, objRQ_Mst_NNT.Mst_NNT.CreatedDate // objCreatedDate
					, objRQ_Mst_NNT.Mst_NNT.AccNo // objAccNo
					, objRQ_Mst_NNT.Mst_NNT.AccHolder // objAccHolder
					, objRQ_Mst_NNT.Mst_NNT.BankName // objBankName
					, objRQ_Mst_NNT.Mst_NNT.BizType // objBizType
					, objRQ_Mst_NNT.Mst_NNT.BizFieldCode // objBizFieldCode
					, objRQ_Mst_NNT.Mst_NNT.BizSizeCode // objBizSizeCode
					, objRQ_Mst_NNT.Mst_NNT.DealerType // objDealerType
													   ////
					, "O" // objDepartmentCode Fix Cung
						  ////
					, objRQ_Mst_NNT.Mst_NNT.UserPassword // objUserPassword
					, objRQ_Mst_NNT.Mst_NNT.UserPasswordRepeat // objUserPasswordRepeat
															   //, dsData // dsData
															   ////
					, objRQ_Mst_NNT.Inos_LicOrder // Inos_LicOrder
												  ////
					, ref objRT_Mst_NNT // objRT_Mst_NNT
					);
				#endregion

				// Return Good:
				return mdsResult;
			}
			catch (Exception exc)
			{
				#region // Catch of try:
				// Return Bad:
				return TUtils.CProcessExc.Process(
					ref mdsResult
					, exc
					, strErrorCodeDefault
					, alParamsCoupleError.ToArray()
					);
				#endregion
			}
			finally
			{
				#region // Finally of try:
				// Write ReturnLog:
				//_cf.ProcessBizReturn(
				//	ref mdsResult // mdsFinal
				//	, strTid // strTid
				//	, strFunctionName // strFunctionName
				//	);
				#endregion
			}
		}

		public DataSet WAS_RptSv_Mst_NNT_CalcByUserExist(
			ref ArrayList alParamsCoupleError
			, RQ_Mst_NNT objRQ_Mst_NNT
			////
			, out RT_Mst_NNT objRT_Mst_NNT
			)
		{
			#region // Temp:
			string strTid = objRQ_Mst_NNT.Tid;
			objRT_Mst_NNT = new RT_Mst_NNT();
			DataSet mdsResult = CmUtils.CMyDataSet.NewMyDataSet(strTid);
			DateTime dtimeSys = DateTime.UtcNow;
			//DataSet mdsExec = null;
			//DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(objRQ_Mst_NNT.Tid);
			//int nTidSeq = 0;
			//bool bNeedTransaction = true;
			string strFunctionName = "WAS_RptSv_Mst_NNT_CalcByUserExist";
			string strErrorCodeDefault = TError.ErridnInventory.WAS_RptSv_Mst_NNT_CalcByUserExist;
			alParamsCoupleError.AddRange(new object[]{
				"strFunctionName", strFunctionName
				, "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
				, "ReportServer", "ReportServer"
                , "FULLRQ", TJson.JsonConvert.SerializeObject(objRQ_Mst_NNT)
				});
			#endregion

			try
			{
				#region // Init:
				#endregion

				#region // Refine and Check Input:
				////
				List<Mst_NNT> lst_Mst_NNT = new List<Mst_NNT>();
				DataSet dsData = new DataSet();
				{
					////
					//DataTable dt_MstSv_Inos_User = TUtils.DataTableCmUtils.ToDataTable<MstSv_Inos_User>(objRQ_Mst_NNT.Lst_MstSv_Inos_User, "MstSv_Inos_User");
					//dsData.Tables.Add(dt_MstSv_Inos_User);

					//DataTable dt_MstSv_Inos_Org = TUtils.DataTableCmUtils.ToDataTable<MstSv_Inos_Org>(objRQ_Mst_NNT.Lst_MstSv_Inos_Org, "MstSv_Inos_Org");
					//dsData.Tables.Add(dt_MstSv_Inos_Org);

					//DataTable dt_MstSv_Inos_OrgUser = TUtils.DataTableCmUtils.ToDataTable<MstSv_Inos_OrgUser>(objRQ_Mst_NNT.Lst_MstSv_Inos_OrgUser, "MstSv_Inos_OrgUser");
					//dsData.Tables.Add(dt_MstSv_Inos_OrgUser);

					//DataTable dt_MstSv_Inos_OrgInvite = TUtils.DataTableCmUtils.ToDataTable<MstSv_Inos_OrgInvite>(objRQ_Mst_NNT.Lst_MstSv_Inos_OrgInvite, "MstSv_Inos_OrgInvite");
					//dsData.Tables.Add(dt_MstSv_Inos_OrgInvite);


					//DataTable dt_MstSv_Inos_Package = TUtils.DataTableCmUtils.ToDataTable<MstSv_Inos_Package>(objRQ_Mst_NNT.Lst_MstSv_Inos_Package, "MstSv_Inos_Package");
					//dsData.Tables.Add(dt_MstSv_Inos_Package);
				}
				#endregion

				#region // RptSv_Mst_NNT_Calc:
				mdsResult = RptSv_Mst_NNT_CalcByUserExist_New20200208(
					objRQ_Mst_NNT.Tid // strTid
					, objRQ_Mst_NNT.GwUserCode // strGwUserCode
					, objRQ_Mst_NNT.GwPassword // strGwPassword
					, objRQ_Mst_NNT.WAUserCode // strUserCode
					, objRQ_Mst_NNT.WAUserPassword // strUserPassword
					, objRQ_Mst_NNT.AccessToken // strAccessToken
					, ref alParamsCoupleError // alParamsCoupleError
											  //// InosCreateOrg														
					, objRQ_Mst_NNT.OS_Inos_Org.ParentId // objParentId
					, objRQ_Mst_NNT.OS_Inos_Org.Name // objName
					, objRQ_Mst_NNT.iNOS_Mst_BizType.BizType // objBizType
					, objRQ_Mst_NNT.iNOS_Mst_BizType.BizTypeName // objBizTypeName
					, objRQ_Mst_NNT.iNOS_Mst_BizField.BizFieldCode // objBizField
					, objRQ_Mst_NNT.iNOS_Mst_BizField.BizFieldName // objBizFieldName
					, objRQ_Mst_NNT.OS_Inos_Org.ContactName // objContactName
					, objRQ_Mst_NNT.OS_Inos_Org.Email // objEmail
					, objRQ_Mst_NNT.OS_Inos_Org.PhoneNo // objPhoneNo
					, objRQ_Mst_NNT.OS_Inos_Org.Description // objDescription
					, objRQ_Mst_NNT.OS_Inos_Org.Enable // objEnable
													   ////
					, objRQ_Mst_NNT.Mst_NNT.MST // objMST
					, objRQ_Mst_NNT.Mst_NNT.NNTFullName // objNNTFullName
					, objRQ_Mst_NNT.Mst_NNT.MSTParent // objMSTParent
					, objRQ_Mst_NNT.Mst_NNT.ProvinceCode // objProvinceCode
					, objRQ_Mst_NNT.Mst_NNT.DistrictCode // objDistrictCode
														 //, objRQ_Mst_NNT.Mst_NNT.NNTType // objNNTType
					, objRQ_Mst_NNT.Mst_NNT.DLCode // objDLCode
					, objRQ_Mst_NNT.Mst_NNT.NNTAddress // objAddress
					, objRQ_Mst_NNT.Mst_NNT.NNTMobile // objMobile
					, objRQ_Mst_NNT.Mst_NNT.NNTPhone // objPhone
					, objRQ_Mst_NNT.Mst_NNT.NNTFax // objFax
					, objRQ_Mst_NNT.Mst_NNT.PresentBy // objPresentBy
					, objRQ_Mst_NNT.Mst_NNT.BusinessRegNo // objBusinessRegNo
					, objRQ_Mst_NNT.Mst_NNT.NNTPosition // objPosition
					, objRQ_Mst_NNT.Mst_NNT.PresentIDNo // objPresentIDNo
					, objRQ_Mst_NNT.Mst_NNT.PresentIDType // objPresentIDType
					, objRQ_Mst_NNT.Mst_NNT.GovTaxID // objGovTaxID
					, objRQ_Mst_NNT.Mst_NNT.ContactName // objContactName
					, objRQ_Mst_NNT.Mst_NNT.ContactPhone // objContactPhone
					, objRQ_Mst_NNT.Mst_NNT.ContactEmail // objContactEmail
					, objRQ_Mst_NNT.Mst_NNT.Website // objWebsite
					, objRQ_Mst_NNT.Mst_NNT.CANumber // objCANumber
					, objRQ_Mst_NNT.Mst_NNT.CAOrg // objCAOrg
					, objRQ_Mst_NNT.Mst_NNT.CAEffDTimeUTCStart // objCAEffDTimeUTCStart
					, objRQ_Mst_NNT.Mst_NNT.CAEffDTimeUTCEnd // objCAEffDTimeUTCEnd
					, objRQ_Mst_NNT.Mst_NNT.PackageCode // objPackageCode
					, objRQ_Mst_NNT.Mst_NNT.CreatedDate // objCreatedDate
					, objRQ_Mst_NNT.Mst_NNT.AccNo // objAccNo
					, objRQ_Mst_NNT.Mst_NNT.AccHolder // objAccHolder
					, objRQ_Mst_NNT.Mst_NNT.BankName // objBankName
					, objRQ_Mst_NNT.Mst_NNT.BizType // objBizType
					, objRQ_Mst_NNT.Mst_NNT.BizFieldCode // objBizFieldCode
					, objRQ_Mst_NNT.Mst_NNT.BizSizeCode // objBizSizeCode
					, objRQ_Mst_NNT.Mst_NNT.DealerType // objDealerType
                    , objRQ_Mst_NNT.FlagIsCreateOrder
                    ////
                    , "O" // objDepartmentCode Fix Cung
						  ////
					, objRQ_Mst_NNT.Mst_NNT.UserPassword // objUserPassword
					, objRQ_Mst_NNT.Mst_NNT.UserPasswordRepeat // objUserPasswordRepeat
															   //, dsData // dsData
															   ////
					, objRQ_Mst_NNT.Inos_LicOrder // Inos_LicOrder
												  ////
					, ref objRT_Mst_NNT // objRT_Mst_NNT
					);
				#endregion

				// Return Good:
				return mdsResult;
			}
			catch (Exception exc)
			{
				#region // Catch of try:
				// Return Bad:
				return TUtils.CProcessExc.Process(
					ref mdsResult
					, exc
					, strErrorCodeDefault
					, alParamsCoupleError.ToArray()
					);
				#endregion
			}
			finally
			{
				#region // Finally of try:
				// Write ReturnLog:
				//_cf.ProcessBizReturn(
				//	ref mdsResult // mdsFinal
				//	, strTid // strTid
				//	, strFunctionName // strFunctionName
				//	);
				#endregion
			}
		}

		public DataSet WAS_RptSv_Mst_NNT_AddByUserExist(
			ref ArrayList alParamsCoupleError
			, RQ_Mst_NNT objRQ_Mst_NNT
			////
			, out RT_Mst_NNT objRT_Mst_NNT
			)
		{
			#region // Temp:
			string strTid = objRQ_Mst_NNT.Tid;
			objRT_Mst_NNT = new RT_Mst_NNT();
			DataSet mdsResult = CmUtils.CMyDataSet.NewMyDataSet(strTid);
			DateTime dtimeSys = DateTime.UtcNow;
			//DataSet mdsExec = null;
			//DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(objRQ_Mst_NNT.Tid);
			//int nTidSeq = 0;
			//bool bNeedTransaction = true;
			string strFunctionName = "WAS_RptSv_Mst_NNT_AddByUserExist";
			string strErrorCodeDefault = TError.ErridnInventory.WAS_RptSv_Mst_NNT_AddByUserExist;
			alParamsCoupleError.AddRange(new object[]{
				"strFunctionName", strFunctionName
				, "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
				, "ReportServer", "ReportServer"
				, "RQ_Mst_NNT", TJson.JsonConvert.SerializeObject(objRQ_Mst_NNT)
				});
			#endregion

			try
			{
				#region // Init:
				#endregion

				#region // Refine and Check Input:
				////
				List<Mst_NNT> lst_Mst_NNT = new List<Mst_NNT>();
				DataSet dsData = new DataSet();
				{
					////
					//DataTable dt_MstSv_Inos_User = TUtils.DataTableCmUtils.ToDataTable<MstSv_Inos_User>(objRQ_Mst_NNT.Lst_MstSv_Inos_User, "MstSv_Inos_User");
					//dsData.Tables.Add(dt_MstSv_Inos_User);

					//DataTable dt_MstSv_Inos_Org = TUtils.DataTableCmUtils.ToDataTable<MstSv_Inos_Org>(objRQ_Mst_NNT.Lst_MstSv_Inos_Org, "MstSv_Inos_Org");
					//dsData.Tables.Add(dt_MstSv_Inos_Org);

					//DataTable dt_MstSv_Inos_OrgUser = TUtils.DataTableCmUtils.ToDataTable<MstSv_Inos_OrgUser>(objRQ_Mst_NNT.Lst_MstSv_Inos_OrgUser, "MstSv_Inos_OrgUser");
					//dsData.Tables.Add(dt_MstSv_Inos_OrgUser);

					//DataTable dt_MstSv_Inos_OrgInvite = TUtils.DataTableCmUtils.ToDataTable<MstSv_Inos_OrgInvite>(objRQ_Mst_NNT.Lst_MstSv_Inos_OrgInvite, "MstSv_Inos_OrgInvite");
					//dsData.Tables.Add(dt_MstSv_Inos_OrgInvite);


					//DataTable dt_MstSv_Inos_Package = TUtils.DataTableCmUtils.ToDataTable<MstSv_Inos_Package>(objRQ_Mst_NNT.Lst_MstSv_Inos_Package, "MstSv_Inos_Package");
					//dsData.Tables.Add(dt_MstSv_Inos_Package);
				}
				#endregion

				#region // RptSv_Mst_NNT_Add:
				mdsResult = RptSv_Mst_NNT_AddByUserExist(
					objRQ_Mst_NNT.Tid // strTid
					, objRQ_Mst_NNT.GwUserCode // strGwUserCode
					, objRQ_Mst_NNT.GwPassword // strGwPassword
					, objRQ_Mst_NNT.WAUserCode // strUserCode
					, objRQ_Mst_NNT.WAUserPassword // strUserPassword
					, objRQ_Mst_NNT.AccessToken // strAccessToken
					, ref alParamsCoupleError // alParamsCoupleError
											  //// InosCreateOrg
					, objRQ_Mst_NNT.OS_Inos_Org.Id // objId_InosCreateOrg
					, objRQ_Mst_NNT.OS_Inos_Org.ParentId // objParentId
					, objRQ_Mst_NNT.OS_Inos_Org.Name // objName
					, objRQ_Mst_NNT.iNOS_Mst_BizType.BizType // objBizType
					, objRQ_Mst_NNT.iNOS_Mst_BizType.BizTypeName // objBizTypeName
					, objRQ_Mst_NNT.iNOS_Mst_BizField.BizFieldCode // objBizField
					, objRQ_Mst_NNT.iNOS_Mst_BizField.BizFieldName // objBizFieldName
					, objRQ_Mst_NNT.OS_Inos_Org.ContactName // objContactName
					, objRQ_Mst_NNT.OS_Inos_Org.Email // objEmail
					, objRQ_Mst_NNT.OS_Inos_Org.PhoneNo // objPhoneNo
					, objRQ_Mst_NNT.OS_Inos_Org.Description // objDescription
					, objRQ_Mst_NNT.OS_Inos_Org.Enable // objEnable
													   ////
					, objRQ_Mst_NNT.Mst_NNT.MST // objMST
					, objRQ_Mst_NNT.Mst_NNT.NNTFullName // objNNTFullName
					, objRQ_Mst_NNT.Mst_NNT.MSTParent // objMSTParent
					, objRQ_Mst_NNT.Mst_NNT.ProvinceCode // objProvinceCode
					, objRQ_Mst_NNT.Mst_NNT.DistrictCode // objDistrictCode
														 //, objRQ_Mst_NNT.Mst_NNT.NNTType // objNNTType
					, objRQ_Mst_NNT.Mst_NNT.DLCode // objDLCode
					, objRQ_Mst_NNT.Mst_NNT.NNTAddress // objAddress
					, objRQ_Mst_NNT.Mst_NNT.NNTMobile // objMobile
					, objRQ_Mst_NNT.Mst_NNT.NNTPhone // objPhone
					, objRQ_Mst_NNT.Mst_NNT.NNTFax // objFax
					, objRQ_Mst_NNT.Mst_NNT.PresentBy // objPresentBy
					, objRQ_Mst_NNT.Mst_NNT.BusinessRegNo // objBusinessRegNo
					, objRQ_Mst_NNT.Mst_NNT.NNTPosition // objPosition
					, objRQ_Mst_NNT.Mst_NNT.PresentIDNo // objPresentIDNo
					, objRQ_Mst_NNT.Mst_NNT.PresentIDType // objPresentIDType
					, objRQ_Mst_NNT.Mst_NNT.GovTaxID // objGovTaxID
					, objRQ_Mst_NNT.Mst_NNT.ContactName // objContactName
					, objRQ_Mst_NNT.Mst_NNT.ContactPhone // objContactPhone
					, objRQ_Mst_NNT.Mst_NNT.ContactEmail // objContactEmail
					, objRQ_Mst_NNT.Mst_NNT.Website // objWebsite
					, objRQ_Mst_NNT.Mst_NNT.CANumber // objCANumber
					, objRQ_Mst_NNT.Mst_NNT.CAOrg // objCAOrg
					, objRQ_Mst_NNT.Mst_NNT.CAEffDTimeUTCStart // objCAEffDTimeUTCStart
					, objRQ_Mst_NNT.Mst_NNT.CAEffDTimeUTCEnd // objCAEffDTimeUTCEnd
					, objRQ_Mst_NNT.Mst_NNT.PackageCode // objPackageCode
					, objRQ_Mst_NNT.Mst_NNT.CreatedDate // objCreatedDate
					, objRQ_Mst_NNT.Mst_NNT.AccNo // objAccNo
					, objRQ_Mst_NNT.Mst_NNT.AccHolder // objAccHolder
					, objRQ_Mst_NNT.Mst_NNT.BankName // objBankName
					, objRQ_Mst_NNT.Mst_NNT.BizType // objBizType
					, objRQ_Mst_NNT.Mst_NNT.BizFieldCode // objBizFieldCode
					, objRQ_Mst_NNT.Mst_NNT.BizSizeCode // objBizSizeCode
														////
					, "O" // objDepartmentCode Fix Cung
						  ////
					, objRQ_Mst_NNT.Mst_NNT.UserPassword // objUserPassword
					, objRQ_Mst_NNT.Mst_NNT.UserPasswordRepeat // objUserPasswordRepeat
															   //, dsData // dsData
															   ////
					, objRQ_Mst_NNT.Inos_LicOrder // Inos_LicOrder
												  ////
					, ref objRT_Mst_NNT // objRT_Mst_NNT
					);
				#endregion

				// Return Good:
				return mdsResult;
			}
			catch (Exception exc)
			{
				#region // Catch of try:
				// Return Bad:
				return TUtils.CProcessExc.Process(
					ref mdsResult
					, exc
					, strErrorCodeDefault
					, alParamsCoupleError.ToArray()
					);
				#endregion
			}
			finally
			{
				#region // Finally of try:
				// Write ReturnLog:
				//_cf.ProcessBizReturn(
				//	ref mdsResult // mdsFinal
				//	, strTid // strTid
				//	, strFunctionName // strFunctionName
				//	);
				#endregion
			}
		}

		public DataSet WAS_RptSv_Mst_NNT_AddByUserExist_New20200207(
			ref ArrayList alParamsCoupleError
			, RQ_Mst_NNT objRQ_Mst_NNT
			////
			, out RT_Mst_NNT objRT_Mst_NNT
			)
		{
			#region // Temp:
			string strTid = objRQ_Mst_NNT.Tid;
			objRT_Mst_NNT = new RT_Mst_NNT();
			DataSet mdsResult = CmUtils.CMyDataSet.NewMyDataSet(strTid);
			DateTime dtimeSys = DateTime.UtcNow;
			//DataSet mdsExec = null;
			//DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(objRQ_Mst_NNT.Tid);
			//int nTidSeq = 0;
			//bool bNeedTransaction = true;
			string strFunctionName = "WAS_RptSv_Mst_NNT_AddByUserExist";
			string strErrorCodeDefault = TError.ErridnInventory.WAS_RptSv_Mst_NNT_AddByUserExist;
			alParamsCoupleError.AddRange(new object[]{
				"strFunctionName", strFunctionName
				, "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
				, "ReportServer", "ReportServer"
				, "RQ_Mst_NNT", TJson.JsonConvert.SerializeObject(objRQ_Mst_NNT)
				});
			#endregion

			try
			{
				#region // Init:
				#endregion

				#region // Refine and Check Input:
				////
				List<Mst_NNT> lst_Mst_NNT = new List<Mst_NNT>();
				DataSet dsData = new DataSet();
				{
					////
					//DataTable dt_MstSv_Inos_User = TUtils.DataTableCmUtils.ToDataTable<MstSv_Inos_User>(objRQ_Mst_NNT.Lst_MstSv_Inos_User, "MstSv_Inos_User");
					//dsData.Tables.Add(dt_MstSv_Inos_User);

					//DataTable dt_MstSv_Inos_Org = TUtils.DataTableCmUtils.ToDataTable<MstSv_Inos_Org>(objRQ_Mst_NNT.Lst_MstSv_Inos_Org, "MstSv_Inos_Org");
					//dsData.Tables.Add(dt_MstSv_Inos_Org);

					//DataTable dt_MstSv_Inos_OrgUser = TUtils.DataTableCmUtils.ToDataTable<MstSv_Inos_OrgUser>(objRQ_Mst_NNT.Lst_MstSv_Inos_OrgUser, "MstSv_Inos_OrgUser");
					//dsData.Tables.Add(dt_MstSv_Inos_OrgUser);

					//DataTable dt_MstSv_Inos_OrgInvite = TUtils.DataTableCmUtils.ToDataTable<MstSv_Inos_OrgInvite>(objRQ_Mst_NNT.Lst_MstSv_Inos_OrgInvite, "MstSv_Inos_OrgInvite");
					//dsData.Tables.Add(dt_MstSv_Inos_OrgInvite);


					//DataTable dt_MstSv_Inos_Package = TUtils.DataTableCmUtils.ToDataTable<MstSv_Inos_Package>(objRQ_Mst_NNT.Lst_MstSv_Inos_Package, "MstSv_Inos_Package");
					//dsData.Tables.Add(dt_MstSv_Inos_Package);
				}
				#endregion

				#region // RptSv_Mst_NNT_Add:
				mdsResult = RptSv_Mst_NNT_AddByUserExist_New20200207(
					objRQ_Mst_NNT.Tid // strTid
					, objRQ_Mst_NNT.GwUserCode // strGwUserCode
					, objRQ_Mst_NNT.GwPassword // strGwPassword
					, objRQ_Mst_NNT.WAUserCode // strUserCode
					, objRQ_Mst_NNT.WAUserPassword // strUserPassword
					, objRQ_Mst_NNT.AccessToken // strAccessToken
					, ref alParamsCoupleError // alParamsCoupleError
											  //// InosCreateOrg
					, objRQ_Mst_NNT.OS_Inos_Org.Id // objId_InosCreateOrg
					, objRQ_Mst_NNT.OS_Inos_Org.ParentId // objParentId
					, objRQ_Mst_NNT.OS_Inos_Org.Name // objName
					, objRQ_Mst_NNT.iNOS_Mst_BizType.BizType // objBizType
					, objRQ_Mst_NNT.iNOS_Mst_BizType.BizTypeName // objBizTypeName
					, objRQ_Mst_NNT.iNOS_Mst_BizField.BizFieldCode // objBizField
					, objRQ_Mst_NNT.iNOS_Mst_BizField.BizFieldName // objBizFieldName
					, objRQ_Mst_NNT.OS_Inos_Org.ContactName // objContactName
					, objRQ_Mst_NNT.OS_Inos_Org.Email // objEmail
					, objRQ_Mst_NNT.OS_Inos_Org.PhoneNo // objPhoneNo
					, objRQ_Mst_NNT.OS_Inos_Org.Description // objDescription
					, objRQ_Mst_NNT.OS_Inos_Org.Enable // objEnable
                    , objRQ_Mst_NNT.OS_Inos_User.Email // objEmail
                                                       ////
                    , objRQ_Mst_NNT.Mst_NNT.MST // objMST
					, objRQ_Mst_NNT.Mst_NNT.NNTFullName // objNNTFullName
					, objRQ_Mst_NNT.Mst_NNT.MSTParent // objMSTParent
					, objRQ_Mst_NNT.Mst_NNT.ProvinceCode // objProvinceCode
					, objRQ_Mst_NNT.Mst_NNT.DistrictCode // objDistrictCode
														 //, objRQ_Mst_NNT.Mst_NNT.NNTType // objNNTType
					, objRQ_Mst_NNT.Mst_NNT.DLCode // objDLCode
					, objRQ_Mst_NNT.Mst_NNT.NNTAddress // objAddress
					, objRQ_Mst_NNT.Mst_NNT.NNTMobile // objMobile
					, objRQ_Mst_NNT.Mst_NNT.NNTPhone // objPhone
					, objRQ_Mst_NNT.Mst_NNT.NNTFax // objFax
					, objRQ_Mst_NNT.Mst_NNT.PresentBy // objPresentBy
					, objRQ_Mst_NNT.Mst_NNT.BusinessRegNo // objBusinessRegNo
					, objRQ_Mst_NNT.Mst_NNT.NNTPosition // objPosition
					, objRQ_Mst_NNT.Mst_NNT.PresentIDNo // objPresentIDNo
					, objRQ_Mst_NNT.Mst_NNT.PresentIDType // objPresentIDType
					, objRQ_Mst_NNT.Mst_NNT.GovTaxID // objGovTaxID
					, objRQ_Mst_NNT.Mst_NNT.ContactName // objContactName
					, objRQ_Mst_NNT.Mst_NNT.ContactPhone // objContactPhone
					, objRQ_Mst_NNT.Mst_NNT.ContactEmail // objContactEmail
					, objRQ_Mst_NNT.Mst_NNT.Website // objWebsite
					, objRQ_Mst_NNT.Mst_NNT.CANumber // objCANumber
					, objRQ_Mst_NNT.Mst_NNT.CAOrg // objCAOrg
					, objRQ_Mst_NNT.Mst_NNT.CAEffDTimeUTCStart // objCAEffDTimeUTCStart
					, objRQ_Mst_NNT.Mst_NNT.CAEffDTimeUTCEnd // objCAEffDTimeUTCEnd
					, objRQ_Mst_NNT.Mst_NNT.PackageCode // objPackageCode
					, objRQ_Mst_NNT.Mst_NNT.CreatedDate // objCreatedDate
					, objRQ_Mst_NNT.Mst_NNT.AccNo // objAccNo
					, objRQ_Mst_NNT.Mst_NNT.AccHolder // objAccHolder
					, objRQ_Mst_NNT.Mst_NNT.BankName // objBankName
					, objRQ_Mst_NNT.Mst_NNT.BizType // objBizType
					, objRQ_Mst_NNT.Mst_NNT.BizFieldCode // objBizFieldCode
					, objRQ_Mst_NNT.Mst_NNT.BizSizeCode // objBizSizeCode
					, objRQ_Mst_NNT.Mst_NNT.DealerType // objDealerType
													   ////
					, "O" // objDepartmentCode Fix Cung
						  ////
					, objRQ_Mst_NNT.Mst_NNT.UserPassword // objUserPassword
					, objRQ_Mst_NNT.Mst_NNT.UserPasswordRepeat // objUserPasswordRepeat
															   //, dsData // dsData
															   ////
					, objRQ_Mst_NNT.Inos_LicOrder // Inos_LicOrder
												  ////
					, ref objRT_Mst_NNT // objRT_Mst_NNT
										////
					, TConst.Flag.Yes // objFlagIsCreateOrder
					);
				#endregion

				// Return Good:
				return mdsResult;
			}
			catch (Exception exc)
			{
				#region // Catch of try:
				// Return Bad:
				return TUtils.CProcessExc.Process(
					ref mdsResult
					, exc
					, strErrorCodeDefault
					, alParamsCoupleError.ToArray()
					);
				#endregion
			}
			finally
			{
				#region // Finally of try:
				// Write ReturnLog:
				//_cf.ProcessBizReturn(
				//	ref mdsResult // mdsFinal
				//	, strTid // strTid
				//	, strFunctionName // strFunctionName
				//	);
				#endregion
			}
		}

		public DataSet WAS_OS_MstSvCenter_RptSv_Mst_NNT_AddByUserExist(
			ref ArrayList alParamsCoupleError
			, RQ_Mst_NNT objRQ_Mst_NNT
			////
			, out RT_Mst_NNT objRT_Mst_NNT
			)
		{
			#region // Temp:
			string strTid = objRQ_Mst_NNT.Tid;
			objRT_Mst_NNT = new RT_Mst_NNT();
			DataSet mdsResult = CmUtils.CMyDataSet.NewMyDataSet(strTid);
			DateTime dtimeSys = DateTime.UtcNow;
			//DataSet mdsExec = null;
			//DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(objRQ_Mst_NNT.Tid);
			//int nTidSeq = 0;
			//bool bNeedTransaction = true;
			string strFunctionName = "WAS_RptSv_Mst_NNT_AddByUserExist";
			string strErrorCodeDefault = TError.ErridnInventory.WAS_OS_MstSvCenter_RptSv_Mst_NNT_AddByUserExist;
			alParamsCoupleError.AddRange(new object[]{
				"strFunctionName", strFunctionName
				, "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
				, "ReportServer", "ReportServer"
				, "RQ_Mst_NNT", TJson.JsonConvert.SerializeObject(objRQ_Mst_NNT)
				});
			#endregion

			try
			{
				#region // Init:
				#endregion

				#region // Refine and Check Input:
				////
				List<Mst_NNT> lst_Mst_NNT = new List<Mst_NNT>();
				DataSet dsData = new DataSet();
				{
					////
					//DataTable dt_MstSv_Inos_User = TUtils.DataTableCmUtils.ToDataTable<MstSv_Inos_User>(objRQ_Mst_NNT.Lst_MstSv_Inos_User, "MstSv_Inos_User");
					//dsData.Tables.Add(dt_MstSv_Inos_User);

					//DataTable dt_MstSv_Inos_Org = TUtils.DataTableCmUtils.ToDataTable<MstSv_Inos_Org>(objRQ_Mst_NNT.Lst_MstSv_Inos_Org, "MstSv_Inos_Org");
					//dsData.Tables.Add(dt_MstSv_Inos_Org);

					//DataTable dt_MstSv_Inos_OrgUser = TUtils.DataTableCmUtils.ToDataTable<MstSv_Inos_OrgUser>(objRQ_Mst_NNT.Lst_MstSv_Inos_OrgUser, "MstSv_Inos_OrgUser");
					//dsData.Tables.Add(dt_MstSv_Inos_OrgUser);

					//DataTable dt_MstSv_Inos_OrgInvite = TUtils.DataTableCmUtils.ToDataTable<MstSv_Inos_OrgInvite>(objRQ_Mst_NNT.Lst_MstSv_Inos_OrgInvite, "MstSv_Inos_OrgInvite");
					//dsData.Tables.Add(dt_MstSv_Inos_OrgInvite);


					//DataTable dt_MstSv_Inos_Package = TUtils.DataTableCmUtils.ToDataTable<MstSv_Inos_Package>(objRQ_Mst_NNT.Lst_MstSv_Inos_Package, "MstSv_Inos_Package");
					//dsData.Tables.Add(dt_MstSv_Inos_Package);
				}
				#endregion

				#region // RptSv_Mst_NNT_Add:
				mdsResult = RptSv_Mst_NNT_AddByUserExist_New20200207(
					objRQ_Mst_NNT.Tid // strTid
					, objRQ_Mst_NNT.GwUserCode // strGwUserCode
					, objRQ_Mst_NNT.GwPassword // strGwPassword
					, objRQ_Mst_NNT.WAUserCode // strUserCode
					, objRQ_Mst_NNT.WAUserPassword // strUserPassword
					, objRQ_Mst_NNT.AccessToken // strAccessToken
					, ref alParamsCoupleError // alParamsCoupleError
											  //// InosCreateOrg
					, objRQ_Mst_NNT.OS_Inos_Org.Id // objId_InosCreateOrg
					, objRQ_Mst_NNT.OS_Inos_Org.ParentId // objParentId
					, objRQ_Mst_NNT.OS_Inos_Org.Name // objName
					, objRQ_Mst_NNT.iNOS_Mst_BizType.BizType // objBizType
					, objRQ_Mst_NNT.iNOS_Mst_BizType.BizTypeName // objBizTypeName
					, objRQ_Mst_NNT.iNOS_Mst_BizField.BizFieldCode // objBizField
					, objRQ_Mst_NNT.iNOS_Mst_BizField.BizFieldName // objBizFieldName
					, objRQ_Mst_NNT.OS_Inos_Org.ContactName // objContactName
					, objRQ_Mst_NNT.OS_Inos_Org.Email // objEmail
					, objRQ_Mst_NNT.OS_Inos_Org.PhoneNo // objPhoneNo
					, objRQ_Mst_NNT.OS_Inos_Org.Description // objDescription
					, objRQ_Mst_NNT.OS_Inos_Org.Enable // objEnable
                    , objRQ_Mst_NNT.OS_Inos_User.Email
                    ////
                    , objRQ_Mst_NNT.Mst_NNT.MST // objMST
					, objRQ_Mst_NNT.Mst_NNT.NNTFullName // objNNTFullName
					, objRQ_Mst_NNT.Mst_NNT.MSTParent // objMSTParent
					, objRQ_Mst_NNT.Mst_NNT.ProvinceCode // objProvinceCode
					, objRQ_Mst_NNT.Mst_NNT.DistrictCode // objDistrictCode
														 //, objRQ_Mst_NNT.Mst_NNT.NNTType // objNNTType
					, objRQ_Mst_NNT.Mst_NNT.DLCode // objDLCode
					, objRQ_Mst_NNT.Mst_NNT.NNTAddress // objAddress
					, objRQ_Mst_NNT.Mst_NNT.NNTMobile // objMobile
					, objRQ_Mst_NNT.Mst_NNT.NNTPhone // objPhone
					, objRQ_Mst_NNT.Mst_NNT.NNTFax // objFax
					, objRQ_Mst_NNT.Mst_NNT.PresentBy // objPresentBy
					, objRQ_Mst_NNT.Mst_NNT.BusinessRegNo // objBusinessRegNo
					, objRQ_Mst_NNT.Mst_NNT.NNTPosition // objPosition
					, objRQ_Mst_NNT.Mst_NNT.PresentIDNo // objPresentIDNo
					, objRQ_Mst_NNT.Mst_NNT.PresentIDType // objPresentIDType
					, objRQ_Mst_NNT.Mst_NNT.GovTaxID // objGovTaxID
					, objRQ_Mst_NNT.Mst_NNT.ContactName // objContactName
					, objRQ_Mst_NNT.Mst_NNT.ContactPhone // objContactPhone
					, objRQ_Mst_NNT.Mst_NNT.ContactEmail // objContactEmail
					, objRQ_Mst_NNT.Mst_NNT.Website // objWebsite
					, objRQ_Mst_NNT.Mst_NNT.CANumber // objCANumber
					, objRQ_Mst_NNT.Mst_NNT.CAOrg // objCAOrg
					, objRQ_Mst_NNT.Mst_NNT.CAEffDTimeUTCStart // objCAEffDTimeUTCStart
					, objRQ_Mst_NNT.Mst_NNT.CAEffDTimeUTCEnd // objCAEffDTimeUTCEnd
					, objRQ_Mst_NNT.Mst_NNT.PackageCode // objPackageCode
					, objRQ_Mst_NNT.Mst_NNT.CreatedDate // objCreatedDate
					, objRQ_Mst_NNT.Mst_NNT.AccNo // objAccNo
					, objRQ_Mst_NNT.Mst_NNT.AccHolder // objAccHolder
					, objRQ_Mst_NNT.Mst_NNT.BankName // objBankName
					, objRQ_Mst_NNT.Mst_NNT.BizType // objBizType
					, objRQ_Mst_NNT.Mst_NNT.BizFieldCode // objBizFieldCode
					, objRQ_Mst_NNT.Mst_NNT.BizSizeCode // objBizSizeCode
					, objRQ_Mst_NNT.Mst_NNT.DealerType // objDealerType
													   ////
					, "O" // objDepartmentCode Fix Cung
						  ////
					, objRQ_Mst_NNT.Mst_NNT.UserPassword // objUserPassword
					, objRQ_Mst_NNT.Mst_NNT.UserPasswordRepeat // objUserPasswordRepeat
															   //, dsData // dsData
															   ////
					, objRQ_Mst_NNT.Inos_LicOrder // Inos_LicOrder
												  ////
					, ref objRT_Mst_NNT // objRT_Mst_NNT
										////
					, objRQ_Mst_NNT.FlagIsCreateOrder // objFlagIsCreateOrder
					);
				#endregion

				// Return Good:
				return mdsResult;
			}
			catch (Exception exc)
			{
				#region // Catch of try:
				// Return Bad:
				return TUtils.CProcessExc.Process(
					ref mdsResult
					, exc
					, strErrorCodeDefault
					, alParamsCoupleError.ToArray()
					);
				#endregion
			}
			finally
			{
				#region // Finally of try:
				// Write ReturnLog:
				//_cf.ProcessBizReturn(
				//	ref mdsResult // mdsFinal
				//	, strTid // strTid
				//	, strFunctionName // strFunctionName
				//	);
				#endregion
			}
		}

		public DataSet WAS_Mst_NNT_Update(
            ref ArrayList alParamsCoupleError
            , RQ_Mst_NNT objRQ_Mst_NNT
            ////
            , out RT_Mst_NNT objRT_Mst_NNT
            )
        {
            #region // Temp:
            string strTid = objRQ_Mst_NNT.Tid;
            objRT_Mst_NNT = new RT_Mst_NNT();
            DataSet mdsResult = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            DateTime dtimeSys = DateTime.UtcNow;
            //DataSet mdsExec = null;
            //DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(objRQ_Mst_NNT.Tid);
            //int nTidSeq = 0;
            //bool bNeedTransaction = true;
            string strFunctionName = "WAS_Mst_NNT_Update";
            string strErrorCodeDefault = TError.ErridnInventory.WAS_Mst_NNT_Update;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
				});
            #endregion

            try
            {
                #region // Init:
                #endregion

                #region // Refine and Check Input:
                List<Mst_NNT> lst_Mst_NNT = new List<Mst_NNT>();
                #endregion

                #region // Mst_NNT_Update:
                mdsResult = Mst_NNT_Update(
                    objRQ_Mst_NNT.Tid // strTid
                    , objRQ_Mst_NNT.GwUserCode // strGwUserCode
                    , objRQ_Mst_NNT.GwPassword // strGwPassword
                    , objRQ_Mst_NNT.WAUserCode // strUserCode
                    , objRQ_Mst_NNT.WAUserPassword // strUserPassword
                    , ref alParamsCoupleError // alParamsCoupleError
                                              ////
                    , objRQ_Mst_NNT.Mst_NNT.MST // objMST
                    , objRQ_Mst_NNT.Mst_NNT.NNTFullName // objFullName
                    , objRQ_Mst_NNT.Mst_NNT.NNTAddress // objAddress
                    , objRQ_Mst_NNT.Mst_NNT.NNTMobile // objMobile
                    , objRQ_Mst_NNT.Mst_NNT.NNTPhone // objPhone
                    , objRQ_Mst_NNT.Mst_NNT.NNTFax // objFax
                    , objRQ_Mst_NNT.Mst_NNT.PresentBy // objPresentBy
                    , objRQ_Mst_NNT.Mst_NNT.BusinessRegNo // objBusinessRegNo
                    , objRQ_Mst_NNT.Mst_NNT.NNTPosition // objPosition
                    , objRQ_Mst_NNT.Mst_NNT.PresentIDNo // objPresentIDNo
                    , objRQ_Mst_NNT.Mst_NNT.PresentIDType // objPresentIDType
                    , objRQ_Mst_NNT.Mst_NNT.GovTaxID // objGovTaxID
                    , objRQ_Mst_NNT.Mst_NNT.ContactName // objContactName
                    , objRQ_Mst_NNT.Mst_NNT.ContactPhone // objContactPhone
                    , objRQ_Mst_NNT.Mst_NNT.ContactEmail // objContactEmail
                    , objRQ_Mst_NNT.Mst_NNT.Website // objWebsite
                    , objRQ_Mst_NNT.Mst_NNT.CANumber // objCANumber
                    , objRQ_Mst_NNT.Mst_NNT.CAOrg // objCAOrg
                    , objRQ_Mst_NNT.Mst_NNT.CAEffDTimeUTCStart // objCAEffDTimeUTCStart
                    , objRQ_Mst_NNT.Mst_NNT.CAEffDTimeUTCEnd // objCAEffDTimeUTCEnd
                    , objRQ_Mst_NNT.Mst_NNT.PackageCode // objPackageCode
                    , objRQ_Mst_NNT.Mst_NNT.CreatedDate // objCreatedDate
                    , objRQ_Mst_NNT.Mst_NNT.AccNo // objAccNo
                    , objRQ_Mst_NNT.Mst_NNT.AccHolder // objAccHolder
                    , objRQ_Mst_NNT.Mst_NNT.BankName // objBankName
                    , objRQ_Mst_NNT.Mst_NNT.TCTStatus // objTCTStatus
                    , objRQ_Mst_NNT.Mst_NNT.FlagActive // objFlagActive
                                                       ////
                    , objRQ_Mst_NNT.Ft_Cols_Upd // Ft_Cols_Upd
                    );
                #endregion

                // Return Good:
                return mdsResult;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsResult
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Write ReturnLog:
                //_cf.ProcessBizReturn(
                //	ref mdsResult // mdsFinal
                //	, strTid // strTid
                //	, strFunctionName // strFunctionName
                //	);
                #endregion
            }
        }

		public DataSet WAS_Mst_NNT_UpdateRegisterStatus(
			ref ArrayList alParamsCoupleError
			, RQ_Mst_NNT objRQ_Mst_NNT
			////
			, out RT_Mst_NNT objRT_Mst_NNT
			)
		{
			#region // Temp:
			string strTid = objRQ_Mst_NNT.Tid;
			objRT_Mst_NNT = new RT_Mst_NNT();
			DataSet mdsResult = CmUtils.CMyDataSet.NewMyDataSet(strTid);
			DateTime dtimeSys = DateTime.UtcNow;
			//DataSet mdsExec = null;
			//DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(objRQ_Mst_NNT.Tid);
			//int nTidSeq = 0;
			//bool bNeedTransaction = true;
			string strFunctionName = "WAS_Mst_NNT_UpdateRegisterStatus";
			string strErrorCodeDefault = TError.ErridnInventory.WAS_Mst_NNT_UpdateRegisterStatus;
			alParamsCoupleError.AddRange(new object[]{
				"strFunctionName", strFunctionName
				, "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
				});
			#endregion

			try
			{
				#region // Init:
				#endregion

				#region // Refine and Check Input:
				List<Mst_NNT> lst_Mst_NNT = new List<Mst_NNT>();
				#endregion

				#region // Mst_NNT_Update:
				mdsResult = Mst_NNT_UpdateRegisterStatus(
					objRQ_Mst_NNT.Tid // strTid
					, objRQ_Mst_NNT.GwUserCode // strGwUserCode
					, objRQ_Mst_NNT.GwPassword // strGwPassword
					, objRQ_Mst_NNT.WAUserCode // strUserCode
					, objRQ_Mst_NNT.WAUserPassword // strUserPassword
					, ref alParamsCoupleError // alParamsCoupleError
											  ////
					, objRQ_Mst_NNT.Mst_NNT.MST // objMST
					, objRQ_Mst_NNT.Mst_NNT.RegisterStatus // objRegisterStatus
					, objRQ_Mst_NNT.Mst_NNT.Remark// objRemark
					);
				#endregion

				// Return Good:
				return mdsResult;
			}
			catch (Exception exc)
			{
				#region // Catch of try:
				// Return Bad:
				return TUtils.CProcessExc.Process(
					ref mdsResult
					, exc
					, strErrorCodeDefault
					, alParamsCoupleError.ToArray()
					);
				#endregion
			}
			finally
			{
				#region // Finally of try:
				// Write ReturnLog:
				//_cf.ProcessBizReturn(
				//	ref mdsResult // mdsFinal
				//	, strTid // strTid
				//	, strFunctionName // strFunctionName
				//	);
				#endregion
			}
		}

		public DataSet Mst_NNT_Update(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            ////
            , object objMST
            , object objNNTFullName
            , object objNNTAddress
            , object objNNTMobile
            , object objNNTPhone
            , object objNNTFax
            , object objPresentBy
            , object objBusinessRegNo
            , object objNNTPosition
            , object objPresentIDNo
            , object objPresentIDType
            , object objGovTaxID
            , object objContactName
            , object objContactPhone
            , object objContactEmail
            , object objWebsite
            , object objCANumber
            , object objCAOrg
            , object objCAEffDTimeUTCStart
            , object objCAEffDTimeUTCEnd
            , object objPackageCode
            , object objCreatedDate
            , object objAccNo
            , object objAccHolder
            , object objBankName
            , object objTCTStatus
            , object objFlagActive
            ////
            , object objFt_Cols_Upd
            )
        {
            #region // Temp:
            DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            //int nTidSeq = 0;
            DateTime dtimeSys = DateTime.UtcNow;
            string strFunctionName = "Mst_NNT_Update";
            string strErrorCodeDefault = TError.ErridnInventory.Mst_NNT_Update;
            alParamsCoupleError.AddRange(new object[]{
                    "strFunctionName", strFunctionName
                    , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
			        ////
                    , "objMST", objMST
                    , "objNNTFullName", objNNTFullName
                    , "objNNTAddress", objNNTAddress
                    , "objNNTMobile", objNNTMobile
                    , "objNNTPhone", objNNTPhone
                    , "objNNTFax", objNNTFax
                    , "objPresentBy", objPresentBy
                    , "objBusinessRegNo", objBusinessRegNo
                    , "objNNTPosition", objNNTPosition
                    , "objPresentIDNo", objPresentIDNo
                    , "objPresentIDType", objPresentIDType
                    , "objGovTaxID", objGovTaxID
                    , "objContactName", objContactName
                    , "objContactPhone", objContactPhone
                    , "objContactEmail", objContactEmail
                    , "objWebsite", objWebsite
                    , "objCANumber", objCANumber
                    , "objCAOrg", objCAOrg
                    , "objCAEffDTimeUTCStart", objCAEffDTimeUTCStart
                    , "objCAEffDTimeUTCEnd", objCAEffDTimeUTCEnd
                    , "objPackageCode", objPackageCode
                    , "objCreatedDate", objCreatedDate
                    , "objAccNo", objAccNo
                    , "objAccHolder", objAccHolder
                    , "objBankName", objBankName
                    , "objTCTStatus", objTCTStatus
                    , "objFlagActive", objFlagActive
                    ////
                    , "objFt_Cols_Upd", objFt_Cols_Upd
                    });
            #endregion

            try
            {
                #region // Init:
                //_cf.db.LogUserId = _cf.sinf.strUserCode;
                _cf.db.BeginTransaction();

                // Write RequestLog:
                _cf.ProcessBizReq_OutSide(
                    strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    , alParamsCoupleError // alParamsCoupleError
                    );

                // Sys_User_CheckAuthentication:
                //Sys_User_CheckAuthentication(
                //    ref alParamsCoupleError
                //    , strWAUserCode
                //    , strWAUserPassword
                //    );

                // Check Access/Deny:
                Sys_Access_CheckDenyV30(
                    ref alParamsCoupleError
                    , strWAUserCode
                    , strFunctionName
                    );
                #endregion

                #region // Mst_NNT_UpdateX:
                //DataSet dsGetData = null;
                {
                    Mst_NNT_UpdateX(
                        strTid // strTid
                        , strGwUserCode // strGwUserCode
                        , strGwPassword // strGwPassword
                        , strWAUserCode // strWAUserCode
                        , strWAUserPassword // strWAUserPassword
                        , ref alParamsCoupleError // alParamsCoupleError
                        , dtimeSys // dtimeSys
                                   ////
                        , objMST // objMST
                        , objNNTFullName // objFullName
                        , objNNTAddress // objAddress
                        , objNNTMobile // objMobile
                        , objNNTPhone // objPhone
                        , objNNTFax // objFax
                        , objPresentBy // objPresentBy
                        , objBusinessRegNo // objBusinessRegNo
                        , objNNTPosition // objPosition
                        , objPresentIDNo // objPresentIDNo
                        , objPresentIDType // objPresentIDType
                        , objGovTaxID // objGovTaxID
                        , objContactName // objContactName
                        , objContactPhone // objContactPhone
                        , objContactEmail // objContactEmail
                        , objWebsite // objWebsite
                        , objCANumber // objCANumber
                        , objCAOrg // objCAOrg
                        , objCAEffDTimeUTCStart // objCAEffDTimeUTCEnd
                        , objCAEffDTimeUTCEnd // objCAEffDTimeUTCEnd
                        , objPackageCode // objPackageCode
                        , objCreatedDate // objCreatedDate
                        , objAccNo // objAccNo
                        , objAccHolder // objAccHolder
                        , objBankName // objBankName
                        , objTCTStatus // objTCTStatus
                        , objFlagActive
                        /////
                        , objFt_Cols_Upd // objFt_Cols_Upd
                        );
                }
                ////
                //CmUtils.DataUtils.MoveDataTable(ref mdsFinal, ref dsGetData);
                #endregion

                // Return Good:
                TDALUtils.DBUtils.CommitSafety(_cf.db);
                mdsFinal.AcceptChanges();
                return mdsFinal;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Rollback:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);

                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsFinal
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Rollback and Release resources:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);
                TDALUtils.DBUtils.ReleaseAllSemaphore(_cf.db_Sys, true);

                // Write ReturnLog:
                _cf.ProcessBizReturn_OutSide(
                    ref mdsFinal // mdsFinal
                    , strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    );
                #endregion
            }
        }

		public DataSet Mst_NNT_UpdateRegisterStatus(
			string strTid
			, string strGwUserCode
			, string strGwPassword
			, string strWAUserCode
			, string strWAUserPassword
			, ref ArrayList alParamsCoupleError
			////
			, object objMST
			, object objRegisterStatus
			, object objRemark
			)
		{
			#region // Temp:
			DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
			//int nTidSeq = 0;
			DateTime dtimeSys = DateTime.UtcNow;
			string strFunctionName = "Mst_NNT_Update";
			string strErrorCodeDefault = TError.ErridnInventory.Mst_NNT_UpdateRegisterStatus;
			alParamsCoupleError.AddRange(new object[]{
					"strFunctionName", strFunctionName
					, "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
			        ////
                    , "objMST", objMST
					, "objRegisterStatus", objRegisterStatus
					, "objRemark", objRemark
					});
			#endregion

			try
			{
				#region // Init:
				//_cf.db.LogUserId = _cf.sinf.strUserCode;
				_cf.db.BeginTransaction();

				// Write RequestLog:
				_cf.ProcessBizReq_OutSide(
					strTid // strTid
					, strGwUserCode // strGwUserCode
					, strGwPassword // strGwPassword
					, strWAUserCode // objUserCode
					, strFunctionName // strFunctionName
					, alParamsCoupleError // alParamsCoupleError
					);

				// Sys_User_CheckAuthentication:
				//Sys_User_CheckAuthentication(
				//	ref alParamsCoupleError
				//	, strWAUserCode
				//	, strWAUserPassword
				//	);

				// Check Access/Deny:
				Sys_Access_CheckDenyV30(
					ref alParamsCoupleError
					, strWAUserCode
					, strFunctionName
					);
				#endregion

				#region // Mst_NNT_UpdateX:
				//DataSet dsGetData = null;
				{
					Mst_NNT_UpdateRegisterStatusX(
						strTid // strTid
						, strGwUserCode // strGwUserCode
						, strGwPassword // strGwPassword
						, strWAUserCode // strWAUserCode
						, strWAUserPassword // strWAUserPassword
						, ref alParamsCoupleError // alParamsCoupleError
						, dtimeSys // dtimeSys
								   ////
						, objMST // objMST
						, objRegisterStatus // objRegisterStatus
						, objRemark // objRemark
						);
				}
				////
				//CmUtils.DataUtils.MoveDataTable(ref mdsFinal, ref dsGetData);
				#endregion

				// Return Good:
				TDALUtils.DBUtils.CommitSafety(_cf.db);
				mdsFinal.AcceptChanges();
				return mdsFinal;
			}
			catch (Exception exc)
			{
				#region // Catch of try:
				// Rollback:
				TDALUtils.DBUtils.RollbackSafety(_cf.db);

				// Return Bad:
				return TUtils.CProcessExc.Process(
					ref mdsFinal
					, exc
					, strErrorCodeDefault
					, alParamsCoupleError.ToArray()
					);
				#endregion
			}
			finally
			{
				#region // Finally of try:
				// Rollback and Release resources:
				TDALUtils.DBUtils.RollbackSafety(_cf.db);
				TDALUtils.DBUtils.ReleaseAllSemaphore(_cf.db_Sys, true);

				// Write ReturnLog:
				_cf.ProcessBizReturn_OutSide(
					ref mdsFinal // mdsFinal
					, strTid // strTid
					, strGwUserCode // strGwUserCode
					, strGwPassword // strGwPassword
					, strWAUserCode // objUserCode
					, strFunctionName // strFunctionName
					);
				#endregion
			}
		}

		public DataSet WAS_Mst_NNT_Delete(
            ref ArrayList alParamsCoupleError
            , RQ_Mst_NNT objRQ_Mst_NNT
            ////
            , out RT_Mst_NNT objRT_Mst_NNT
            )
        {
            #region // Temp:
            string strTid = objRQ_Mst_NNT.Tid;
            objRT_Mst_NNT = new RT_Mst_NNT();
            DataSet mdsResult = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            DateTime dtimeSys = DateTime.UtcNow;
            //DataSet mdsExec = null;
            //DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(objRQ_Mst_NNT.Tid);
            //int nTidSeq = 0;
            //bool bNeedTransaction = true;
            string strFunctionName = "WAS_Mst_NNT_Delete";
            string strErrorCodeDefault = TError.ErridnInventory.WAS_Mst_NNT_Delete;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
				});
            #endregion

            try
            {
                #region // Init:
                #endregion

                #region // Refine and Check Input:
                List<Mst_NNT> lst_Mst_NNT = new List<Mst_NNT>();
                #endregion

                #region // Mst_NNT_Delete:
                mdsResult = Mst_NNT_Delete(
                    objRQ_Mst_NNT.Tid // strTid
                    , objRQ_Mst_NNT.GwUserCode // strGwUserCode
                    , objRQ_Mst_NNT.GwPassword // strGwPassword
                    , objRQ_Mst_NNT.WAUserCode // strUserCode
                    , objRQ_Mst_NNT.WAUserPassword // strUserPassword
                    , ref alParamsCoupleError // alParamsCoupleError
                                              ////
                    , objRQ_Mst_NNT.Mst_NNT.MST // objMST
                    );
                #endregion

                // Return Good:
                return mdsResult;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsResult
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Write ReturnLog:
                //_cf.ProcessBizReturn(
                //	ref mdsResult // mdsFinal
                //	, strTid // strTid
                //	, strFunctionName // strFunctionName
                //	);
                #endregion
            }
        }
        public DataSet Mst_NNT_Delete(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            ////
            , object objMST
            )
        {
            #region // Temp:
            DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            //int nTidSeq = 0;
            DateTime dtimeSys = DateTime.UtcNow;
            string strFunctionName = "Mst_NNT_Delete";
            string strErrorCodeDefault = TError.ErridnInventory.Mst_NNT_Delete;
            alParamsCoupleError.AddRange(new object[]{
                    "strFunctionName", strFunctionName
                    , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
			        ////
					, "objMST", objMST
                    });
            #endregion

            try
            {
                #region // Init:
                //_cf.db.LogUserId = _cf.sinf.strUserCode;
                _cf.db.BeginTransaction();

                // Write RequestLog:
                _cf.ProcessBizReq_OutSide(
                    strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    , alParamsCoupleError // alParamsCoupleError
                    );

                // Sys_User_CheckAuthentication:
                //Sys_User_CheckAuthentication(
                //    ref alParamsCoupleError
                //    , strWAUserCode
                //    , strWAUserPassword
                //    );

                // Check Access/Deny:
                Sys_Access_CheckDenyV30(
                    ref alParamsCoupleError
                    , strWAUserCode
                    , strFunctionName
                    );
                #endregion

                #region // Mst_NNT_DeleteX:
                //DataSet dsGetData = null;
                {
                    Mst_NNT_DeleteX(
                        strTid // strTid
                        , strGwUserCode // strGwUserCode
                        , strGwPassword // strGwPassword
                        , strWAUserCode // strWAUserCode
                        , strWAUserPassword // strWAUserPassword
                        , ref alParamsCoupleError // alParamsCoupleError
                        , dtimeSys // dtimeSys
                                   ////
                        , objMST // objMST
                        );
                }
                ////
                //CmUtils.DataUtils.MoveDataTable(ref mdsFinal, ref dsGetData);
                #endregion

                // Return Good:
                TDALUtils.DBUtils.CommitSafety(_cf.db); // Always Rollback.
                mdsFinal.AcceptChanges();
                return mdsFinal;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Rollback:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);

                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsFinal
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Rollback and Release resources:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);
                TDALUtils.DBUtils.ReleaseAllSemaphore(_cf.db_Sys, true);

                // Write ReturnLog:
                _cf.ProcessBizReturn_OutSide(
                    ref mdsFinal // mdsFinal
                    , strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    );
                #endregion
            }
        }

        public DataSet WAS_RptSv_Mst_NNT_Delete(
            ref ArrayList alParamsCoupleError
            , RQ_Mst_NNT objRQ_Mst_NNT
            ////
            , out RT_Mst_NNT objRT_Mst_NNT
            )
        {
            #region // Temp:
            string strTid = objRQ_Mst_NNT.Tid;
            objRT_Mst_NNT = new RT_Mst_NNT();
            DataSet mdsResult = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            DateTime dtimeSys = DateTime.UtcNow;
            //DataSet mdsExec = null;
            //DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(objRQ_Mst_NNT.Tid);
            //int nTidSeq = 0;
            //bool bNeedTransaction = true;
            string strFunctionName = "WAS_RptSv_Mst_NNT_Delete";
            string strErrorCodeDefault = TError.ErridnInventory.WAS_RptSv_Mst_NNT_Delete;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
				});
            #endregion

            try
            {
                #region // Init:
                #endregion

                #region // Refine and Check Input:
                List<Mst_NNT> lst_Mst_NNT = new List<Mst_NNT>();
                #endregion

                #region // Mst_NNT_Delete:
                mdsResult = RptSv_Mst_NNT_Delete(
                    objRQ_Mst_NNT.Tid // strTid
                    , objRQ_Mst_NNT.GwUserCode // strGwUserCode
                    , objRQ_Mst_NNT.GwPassword // strGwPassword
                    , objRQ_Mst_NNT.WAUserCode // strUserCode
                    , objRQ_Mst_NNT.WAUserPassword // strUserPassword
                    , ref alParamsCoupleError // alParamsCoupleError
                                              ////
                    , objRQ_Mst_NNT.Mst_NNT.MST // objMST
                    );
                #endregion

                // Return Good:
                return mdsResult;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsResult
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Write ReturnLog:
                //_cf.ProcessBizReturn(
                //	ref mdsResult // mdsFinal
                //	, strTid // strTid
                //	, strFunctionName // strFunctionName
                //	);
                #endregion
            }
        }
        public DataSet RptSv_Mst_NNT_Delete(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            ////
            , object objMST
            )
        {
            #region // Temp:
            DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            //int nTidSeq = 0;
            DateTime dtimeSys = DateTime.UtcNow;
            string strFunctionName = "RptSv_Mst_NNT_Delete";
            string strErrorCodeDefault = TError.ErridnInventory.RptSv_Mst_NNT_Delete;
            alParamsCoupleError.AddRange(new object[]{
                    "strFunctionName", strFunctionName
                    , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
			        ////
					, "objMST", objMST
                    });
            #endregion

            try
            {
                #region // Init:
                //_cf.db.LogUserId = _cf.sinf.strUserCode;
                _cf.db.BeginTransaction();

                // Write RequestLog:
                _cf.ProcessBizReq_OutSide(
                    strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    , alParamsCoupleError // alParamsCoupleError
                    );

                // Sys_User_CheckAuthentication:
                //RptSv_Sys_User_CheckAuthentication(
                //    ref alParamsCoupleError
                //    , strWAUserCode
                //    , strWAUserPassword
                //    );

                //// Check Access/Deny:
                //Sys_Access_CheckDenyV30(
                //    ref alParamsCoupleError
                //    , strWAUserCode
                //    , strFunctionName
                //    );
                #endregion

                #region // Mst_NNT_DeleteX:
                //DataSet dsGetData = null;
                {
                    RptSv_Mst_NNT_DeleteX(
                        strTid // strTid
                        , strGwUserCode // strGwUserCode
                        , strGwPassword // strGwPassword
                        , strWAUserCode // strWAUserCode
                        , strWAUserPassword // strWAUserPassword
                        , ref alParamsCoupleError // alParamsCoupleError
                        , dtimeSys // dtimeSys
                                   ////
                        , objMST // objMST
                        );
                }
                ////
                //CmUtils.DataUtils.MoveDataTable(ref mdsFinal, ref dsGetData);
                #endregion

                // Return Good:
                TDALUtils.DBUtils.CommitSafety(_cf.db); // Always Rollback.
                mdsFinal.AcceptChanges();
                return mdsFinal;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Rollback:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);

                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsFinal
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Rollback and Release resources:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);
                TDALUtils.DBUtils.ReleaseAllSemaphore(_cf.db_Sys, true);

                // Write ReturnLog:
                _cf.ProcessBizReturn_OutSide(
                    ref mdsFinal // mdsFinal
                    , strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    );
                #endregion
            }
        }
        private void Mst_NNT_GetX(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            , DateTime dtimeSys
            //// Filter:
            , string strFt_RecordStart
            , string strFt_RecordCount
            , string strFt_WhereClause
            //// Return:
            , string strRt_Cols_Mst_NNT
            ////
            , out DataSet dsGetData
            )
        {
            #region // Temp:
            //DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            //DateTime dtimeSys = DateTime.UtcNow;
            //bool bNeedTransaction = true;
            string strFunctionName = "Mst_NNT_GetX";
            //string strErrorCodeDefault = TError.ErrHTCNM.Mnf_VIN_Get_QCX;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
                });
            #endregion

            #region // Check:
            //// Refine:
            long nFilterRecordStart = Convert.ToInt64(strFt_RecordStart);
            long nFilterRecordEnd = nFilterRecordStart + Convert.ToInt64(strFt_RecordCount) - 1;
            bool bGet_Mst_NNT = (strRt_Cols_Mst_NNT != null && strRt_Cols_Mst_NNT.Length > 0);

            // drAbilityOfUser:
            DataRow drAbilityOfUser = Sys_User_GetAbilityViewOfUser(strWAUserCode);
            zzzzClauseSelect_Mst_NNT_ViewAbility_Get(
                drAbilityOfUser // drAbilityOfUser
                , ref alParamsCoupleError // alParamsCoupleError
                );

            #endregion

            #region // Build Sql:
            ////
            ArrayList alParamsCoupleSql = new ArrayList();
            alParamsCoupleSql.AddRange(new object[] {
                "@nFilterRecordStart", nFilterRecordStart
                , "@nFilterRecordEnd", nFilterRecordEnd
                });
            ////
            //myCache_ViewAbility_GetDealerInfo(drAbilityOfUser);
            ////
            string strSqlGetData = CmUtils.StringUtils.Replace(@"
					---- #tbl_Mst_NNT_Filter_Draft:
					select distinct
						identity(bigint, 0, 1) MyIdxSeq
						, mnnt.MST
					into #tbl_Mst_NNT_Filter_Draft
					from Mst_NNT mnnt --//[mylock]
                        inner join #tbl_Mst_NNT_ViewAbility t_MstNNT_View --//[mylock] -- 20210929. Bỏ comment để thêm phần tầm nhìn giống như hệ thống DMSPlus
                            on mnnt.MST = t_MstNNT_View.MST
					where (1=1)
                        and mnnt.NetworkID <> '0' -- 20200803.HTTT.Không lấy NW 0
						zzB_Where_strFilter_zzE
					order by mnnt.MST asc
					;

					---- Summary:
					select Count(0) MyCount from #tbl_Mst_NNT_Filter_Draft t --//[mylock]
					;

					---- #tbl_Mst_NNT_Filter:
					select
						t.*
					into #tbl_Mst_NNT_Filter
					from #tbl_Mst_NNT_Filter_Draft t --//[mylock]
					where (1=1)
						and (t.MyIdxSeq >= @nFilterRecordStart)
						and (t.MyIdxSeq <= @nFilterRecordEnd)
					;

					-------- Mst_NNT -----:
					zzB_Select_Mst_NNT_zzE
					------------------------

					---- Clear for debug:
					--drop table #tbl_Mst_NNT_Filter_Draft;
					--drop table #tbl_Mst_NNT_Filter;
				"
                );
            ////
            string zzB_Select_Mst_NNT_zzE = "-- Nothing.";
            if (bGet_Mst_NNT)
            {
                #region // bGet_Mst_NNT:
                zzB_Select_Mst_NNT_zzE = CmUtils.StringUtils.Replace(@"
					---- Mst_NNT:
					select
						t.MyIdxSeq
						, mnnt.*
                        , mgt.GovTaxID mgt_GovTaxID
                        , mgt.GovTaxName mgt_GovTaxName
						----
						, mp.ProvinceCode mp_ProvinceCode
						, mp.ProvinceName mp_ProvinceName
						----
						, md.DistrictCode md_DistrictCode
						, md.DistrictName md_DistrictName
						----
						, ma.AreaCode ma_AreaCode
						, ma.AreaName ma_AreaName
					from #tbl_Mst_NNT_Filter t --//[mylock]
						inner join Mst_NNT mnnt --//[mylock]
							on t.MST = mnnt.MST
                        left join Mst_GovTaxID mgt --//[mylock]
							on mnnt.GovTaxID = mgt.GovTaxID
						left join Mst_Province mp --//[mylock]
							on mnnt.ProvinceCode = mp.ProvinceCode
						left join Mst_District md --//[mylock]
							on mnnt.ProvinceCode = md.ProvinceCode
								and mnnt.DistrictCode = md.DistrictCode
						left join Mst_Area ma --//[mylock]
							on mnnt.AreaCode = ma.AreaCode
								and mnnt.OrgID_MA = ma.OrgID
					order by t.MyIdxSeq asc
					;
				"
                );
                #endregion
            }
            ////
            string zzB_Where_strFilter_zzE = "";
            {
                Hashtable htSpCols = new Hashtable();
                {
                    #region // htSpCols:
                    ////
                    TUtils.CUtils.MyBuildHTSupportedColumns(
                        _cf.db // db
                        , ref htSpCols // htSupportedColumns
                        , "Mst_NNT" // strTableNameDB
                        , "Mst_NNT." // strPrefixStd
                        , "mnnt." // strPrefixAlias
                        );
                    ////
                    #endregion
                }
                zzB_Where_strFilter_zzE = CmUtils.SqlUtils.BuildWhere(
                    htSpCols // htSpCols
                    , strFt_WhereClause // strClause
                    , "@p_" // strParamPrefix
                    , ref alParamsCoupleSql // alParamsCoupleSql
                    );
                zzB_Where_strFilter_zzE = (zzB_Where_strFilter_zzE.Length <= 0 ? "" : string.Format(" and ({0})", zzB_Where_strFilter_zzE));
                alParamsCoupleError.AddRange(new object[]{
                    "zzB_Where_strFilter_zzE", zzB_Where_strFilter_zzE
                    });
            }
            ////
            strSqlGetData = CmUtils.StringUtils.Replace(
                strSqlGetData
                , "zzB_Where_strFilter_zzE", zzB_Where_strFilter_zzE
                , "zzB_Select_Mst_NNT_zzE", zzB_Select_Mst_NNT_zzE
                );
            #endregion

            #region // Get Data:
            dsGetData = _cf.db.ExecQuery(
                strSqlGetData
                , alParamsCoupleSql.ToArray()
                );
            int nIdxTable = 0;
            dsGetData.Tables[nIdxTable++].TableName = "MySummaryTable";
            if (bGet_Mst_NNT)
            {
                dsGetData.Tables[nIdxTable++].TableName = "Mst_NNT";
            }
            #endregion
        }

        private void RptSv_Mst_NNT_GetX(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            , DateTime dtimeSys
            //// Filter:
            , string strFt_RecordStart
            , string strFt_RecordCount
            , string strFt_WhereClause
            //// Return:
            , string strRt_Cols_Mst_NNT
            ////
            , out DataSet dsGetData
            )
        {
            #region // Temp:
            //DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            //DateTime dtimeSys = DateTime.UtcNow;
            //bool bNeedTransaction = true;
            string strFunctionName = "RptSv_Mst_NNT_GetX";
            //string strErrorCodeDefault = TError.ErrHTCNM.Mnf_VIN_Get_QCX;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
                });
            #endregion

            #region // Check:
            //// Refine:
            long nFilterRecordStart = Convert.ToInt64(strFt_RecordStart);
            long nFilterRecordEnd = nFilterRecordStart + Convert.ToInt64(strFt_RecordCount) - 1;
            bool bGet_Mst_NNT = (strRt_Cols_Mst_NNT != null && strRt_Cols_Mst_NNT.Length > 0);

            //// drAbilityOfUser:
            //DataRow drAbilityOfUser = Sys_User_GetAbilityViewOfUser(strWAUserCode);
            //zzzzClauseSelect_Mst_NNT_ViewAbility_Get(
            //    drAbilityOfUser // drAbilityOfUser
            //    , ref alParamsCoupleError // alParamsCoupleError
            //    );

            #endregion

            #region // Build Sql:
            ////
            ArrayList alParamsCoupleSql = new ArrayList();
            alParamsCoupleSql.AddRange(new object[] {
                "@nFilterRecordStart", nFilterRecordStart
                , "@nFilterRecordEnd", nFilterRecordEnd
                });
            ////
            //myCache_ViewAbility_GetDealerInfo(drAbilityOfUser);
            ////
            string strSqlGetData = CmUtils.StringUtils.Replace(@"
					---- #tbl_Mst_NNT_Filter_Draft:
					select distinct
						identity(bigint, 0, 1) MyIdxSeq
						, mnnt.MST
					into #tbl_Mst_NNT_Filter_Draft
					from Mst_NNT mnnt --//[mylock]
                        --inner join #tbl_Mst_NNT_ViewAbility t_MstNNT_View --//[mylock]
                        --    on mnnt.MST = t_MstNNT_View.MST
					where (1=1)
						zzB_Where_strFilter_zzE
					order by mnnt.MST asc
					;

					---- Summary:
					select Count(0) MyCount from #tbl_Mst_NNT_Filter_Draft t --//[mylock]
					;

					---- #tbl_Mst_NNT_Filter:
					select
						t.*
					into #tbl_Mst_NNT_Filter
					from #tbl_Mst_NNT_Filter_Draft t --//[mylock]
					where (1=1)
						and (t.MyIdxSeq >= @nFilterRecordStart)
						and (t.MyIdxSeq <= @nFilterRecordEnd)
					;

					-------- Mst_NNT -----:
					zzB_Select_Mst_NNT_zzE
					------------------------

					---- Clear for debug:
					--drop table #tbl_Mst_NNT_Filter_Draft;
					--drop table #tbl_Mst_NNT_Filter;
				"
                );
            ////
            string zzB_Select_Mst_NNT_zzE = "-- Nothing.";
            if (bGet_Mst_NNT)
            {
                #region // bGet_Mst_NNT:
                zzB_Select_Mst_NNT_zzE = CmUtils.StringUtils.Replace(@"
					---- Mst_NNT:
					select
						t.MyIdxSeq
						, mnnt.*
                        , mgt.GovTaxID mgt_GovTaxID
                        , mgt.GovTaxName mgt_GovTaxName
						----
						, mp.ProvinceCode mp_ProvinceCode
						, mp.ProvinceName mp_ProvinceName
						----
						, md.DistrictCode md_DistrictCode
						, md.DistrictName md_DistrictName
					from #tbl_Mst_NNT_Filter t --//[mylock]
						inner join Mst_NNT mnnt --//[mylock]
							on t.MST = mnnt.MST
                        left join Mst_GovTaxID mgt --//[mylock]
							on mnnt.GovTaxID = mgt.GovTaxID
						left join Mst_Province mp --//[mylock]
							on mnnt.ProvinceCode = mp.ProvinceCode
						left join Mst_District md --//[mylock]
							on mnnt.ProvinceCode = md.ProvinceCode
								and mnnt.DistrictCode = md.DistrictCode
					order by t.MyIdxSeq asc
					;
				"
                );
                #endregion
            }
            ////
            string zzB_Where_strFilter_zzE = "";
            {
                Hashtable htSpCols = new Hashtable();
                {
                    #region // htSpCols:
                    ////
                    TUtils.CUtils.MyBuildHTSupportedColumns(
                        _cf.db // db
                        , ref htSpCols // htSupportedColumns
                        , "Mst_NNT" // strTableNameDB
                        , "Mst_NNT." // strPrefixStd
                        , "mnnt." // strPrefixAlias
                        );
                    ////
                    #endregion
                }
                zzB_Where_strFilter_zzE = CmUtils.SqlUtils.BuildWhere(
                    htSpCols // htSpCols
                    , strFt_WhereClause // strClause
                    , "@p_" // strParamPrefix
                    , ref alParamsCoupleSql // alParamsCoupleSql
                    );
                zzB_Where_strFilter_zzE = (zzB_Where_strFilter_zzE.Length <= 0 ? "" : string.Format(" and ({0})", zzB_Where_strFilter_zzE));
                alParamsCoupleError.AddRange(new object[]{
                    "zzB_Where_strFilter_zzE", zzB_Where_strFilter_zzE
                    });
            }
            ////
            strSqlGetData = CmUtils.StringUtils.Replace(
                strSqlGetData
                , "zzB_Where_strFilter_zzE", zzB_Where_strFilter_zzE
                , "zzB_Select_Mst_NNT_zzE", zzB_Select_Mst_NNT_zzE
                );
            #endregion

            #region // Get Data:
            dsGetData = _cf.db.ExecQuery(
                strSqlGetData
                , alParamsCoupleSql.ToArray()
                );
            int nIdxTable = 0;
            dsGetData.Tables[nIdxTable++].TableName = "MySummaryTable";
            if (bGet_Mst_NNT)
            {
                dsGetData.Tables[nIdxTable++].TableName = "Mst_NNT";
            }
            #endregion
        }

		private void RptSv_Mst_NNT_GetX_New20200210(
			string strTid
			, string strGwUserCode
			, string strGwPassword
			, string strWAUserCode
			, string strWAUserPassword
			, ref ArrayList alParamsCoupleError
			, DateTime dtimeSys
			//// Filter:
			, string strFt_RecordStart
			, string strFt_RecordCount
			, string strFt_WhereClause
			//// Return:
			, string strRt_Cols_Mst_NNT
			////
			, out DataSet dsGetData
			)
		{
			#region // Temp:
			//DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
			//DateTime dtimeSys = DateTime.UtcNow;
			//bool bNeedTransaction = true;
			string strFunctionName = "RptSv_Mst_NNT_GetX";
			//string strErrorCodeDefault = TError.ErrHTCNM.Mnf_VIN_Get_QCX;
			alParamsCoupleError.AddRange(new object[]{
				"strFunctionName", strFunctionName
				, "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
                });
			#endregion

			#region // Check:
			//// Refine:
			long nFilterRecordStart = Convert.ToInt64(strFt_RecordStart);
			long nFilterRecordEnd = nFilterRecordStart + Convert.ToInt64(strFt_RecordCount) - 1;
			bool bGet_Mst_NNT = (strRt_Cols_Mst_NNT != null && strRt_Cols_Mst_NNT.Length > 0);

			//// drAbilityOfUser:
			//DataRow drAbilityOfUser = Sys_User_GetAbilityViewOfUser(strWAUserCode);
			//zzzzClauseSelect_Mst_NNT_ViewAbility_Get(
			//    drAbilityOfUser // drAbilityOfUser
			//    , ref alParamsCoupleError // alParamsCoupleError
			//    );

			#endregion

			#region // Build Sql:
			////
			ArrayList alParamsCoupleSql = new ArrayList();
			alParamsCoupleSql.AddRange(new object[] {
				"@nFilterRecordStart", nFilterRecordStart
				, "@nFilterRecordEnd", nFilterRecordEnd
				});
			////
			//myCache_ViewAbility_GetDealerInfo(drAbilityOfUser);
			////
			string strSqlGetData = CmUtils.StringUtils.Replace(@"
					---- #tbl_Mst_NNT_Filter_Draft:
					select distinct
						identity(bigint, 0, 1) MyIdxSeq
						, mnnt.MST
					into #tbl_Mst_NNT_Filter_Draft
					from Mst_NNT mnnt --//[mylock]
                        --inner join #tbl_Mst_NNT_ViewAbility t_MstNNT_View --//[mylock]
                        --    on mnnt.MST = t_MstNNT_View.MST
					where (1=1)
						zzB_Where_strFilter_zzE
					order by mnnt.MST asc
					;

					---- Summary:
					select Count(0) MyCount from #tbl_Mst_NNT_Filter_Draft t --//[mylock]
					;

					---- #tbl_Mst_NNT_Filter:
					select
						t.*
					into #tbl_Mst_NNT_Filter
					from #tbl_Mst_NNT_Filter_Draft t --//[mylock]
					where (1=1)
						and (t.MyIdxSeq >= @nFilterRecordStart)
						and (t.MyIdxSeq <= @nFilterRecordEnd)
					;

					-------- Mst_NNT -----:
					zzB_Select_Mst_NNT_zzE
					------------------------

					---- Clear for debug:
					--drop table #tbl_Mst_NNT_Filter_Draft;
					--drop table #tbl_Mst_NNT_Filter;
				"
				);
			////
			string zzB_Select_Mst_NNT_zzE = "-- Nothing.";
			if (bGet_Mst_NNT)
			{
				#region // bGet_Mst_NNT:
				zzB_Select_Mst_NNT_zzE = CmUtils.StringUtils.Replace(@"
					---- Mst_NNT:
					select
						t.MyIdxSeq
						, mnnt.*
                        , mgt.GovTaxID mgt_GovTaxID
                        , mgt.GovTaxName mgt_GovTaxName
						----
						, mp.ProvinceCode mp_ProvinceCode
						, mp.ProvinceName mp_ProvinceName
						----
						, md.DistrictCode md_DistrictCode
						, md.DistrictName md_DistrictName
						----
						, msio.OrderId msio_OrderId
					from #tbl_Mst_NNT_Filter t --//[mylock]
						inner join Mst_NNT mnnt --//[mylock]
							on t.MST = mnnt.MST
                        left join Mst_GovTaxID mgt --//[mylock]
							on mnnt.GovTaxID = mgt.GovTaxID
						left join Mst_Province mp --//[mylock]
							on mnnt.ProvinceCode = mp.ProvinceCode
						left join Mst_District md --//[mylock]
							on mnnt.ProvinceCode = md.ProvinceCode
								and mnnt.DistrictCode = md.DistrictCode
						left join MstSv_Inos_Org msio --//[mylock]
							on mnnt.MST = msio.MST
					order by t.MyIdxSeq asc
					;
				"
				);
				#endregion
			}
			////
			string zzB_Where_strFilter_zzE = "";
			{
				Hashtable htSpCols = new Hashtable();
				{
					#region // htSpCols:
					////
					TUtils.CUtils.MyBuildHTSupportedColumns(
						_cf.db // db
						, ref htSpCols // htSupportedColumns
						, "Mst_NNT" // strTableNameDB
						, "Mst_NNT." // strPrefixStd
						, "mnnt." // strPrefixAlias
						);
					////
					#endregion
				}
				zzB_Where_strFilter_zzE = CmUtils.SqlUtils.BuildWhere(
					htSpCols // htSpCols
					, strFt_WhereClause // strClause
					, "@p_" // strParamPrefix
					, ref alParamsCoupleSql // alParamsCoupleSql
					);
				zzB_Where_strFilter_zzE = (zzB_Where_strFilter_zzE.Length <= 0 ? "" : string.Format(" and ({0})", zzB_Where_strFilter_zzE));
				alParamsCoupleError.AddRange(new object[]{
					"zzB_Where_strFilter_zzE", zzB_Where_strFilter_zzE
					});
			}
			////
			strSqlGetData = CmUtils.StringUtils.Replace(
				strSqlGetData
				, "zzB_Where_strFilter_zzE", zzB_Where_strFilter_zzE
				, "zzB_Select_Mst_NNT_zzE", zzB_Select_Mst_NNT_zzE
				);
			#endregion

			#region // Get Data:
			dsGetData = _cf.db.ExecQuery(
				strSqlGetData
				, alParamsCoupleSql.ToArray()
				);
			int nIdxTable = 0;
			dsGetData.Tables[nIdxTable++].TableName = "MySummaryTable";
			if (bGet_Mst_NNT)
			{
				dsGetData.Tables[nIdxTable++].TableName = "Mst_NNT";
			}
			#endregion
		}
		private void Mst_NNT_CreateX_New20200208(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            , DateTime dtimeSys
            //// 
            , object objMST
            , object objNNTFullName
            , object objMSTParent
            , object objProvinceCode
            , object objDistrictCode
            //, object objNNTType
            , object objDLCode
            , object objNNTAddress
            , object objNNTMobile
			, object objNNTPhone
			, object objNNTFax
			, object objPresentBy
			, object objBusinessRegNo
			, object objNNTPosition
			, object objPresentIDNo
			, object objPresentIDType
			, object objGovTaxID
			, object objContactName
            , object objContactPhone
            , object objContactEmail
            , object objWebsite
            , object objCANumber
            , object objCAOrg
            , object objCAEffDTimeUTCStart
            , object objCAEffDTimeUTCEnd
            , object objPackageCode
            , object objCreatedDate
            , object objAccNo
            , object objAccHolder
            , object objBankName
            , object objBizType // objBizType
            , object objBizFieldCode // objBizFieldCode
            , object objBizSizeCode // objBizSizeCode
			, object objDealerType // objDealerType
								   ////
			)
		{
			#region // Temp:
			string strFunctionName = "Mst_NNT_CreateX";
			//string strErrorCodeDefault = TError.ErrHTCNM.Mnf_VIN_Get_QCX;
			alParamsCoupleError.AddRange(new object[]{
				"strFunctionName", strFunctionName
				, "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
                , "objMST", objMST
				, "objNNTFullName", objNNTFullName
				, "objMSTParent", objMSTParent
				, "objProvinceCode", objProvinceCode
				, "objDistrictCode", objDistrictCode
                //, "objNNTType", objNNTType
                , "objDLCode", objDLCode
				, "objNNTAddress", objNNTAddress
				, "objNNTMobile", objNNTMobile
                //, "objNNTPhone", objNNTPhone
                //, "objNNTFax", objNNTFax
                //, "objPresentBy", objPresentBy
                //, "objBusinessRegNo", objBusinessRegNo
                //, "objNNTPosition", objNNTPosition
                //, "objPresentIDNo", objPresentIDNo
                //, "objPresentIDType", objPresentIDType
                //, "objGovTaxID", objGovTaxID
                , "objContactName", objContactName
				, "objContactPhone", objContactPhone
				, "objContactEmail", objContactEmail
				, "objWebsite", objWebsite
				, "objCANumber", objCANumber
				, "objCAOrg", objCAOrg
				, "objCAEffDTimeUTCStart", objCAEffDTimeUTCStart
				, "objCAEffDTimeUTCEnd", objCAEffDTimeUTCEnd
				, "objPackageCode", objPackageCode
				, "objCreatedDate", objCreatedDate
				, "objAccNo", objAccNo
				, "objAccHolder", objAccHolder
				, "objBankName", objBankName
				, "objBizType", objBizType
				, "objBizFieldCode", objBizFieldCode
				, "objBizSizeCode", objBizSizeCode
                /////
                , "objDealerType", objDealerType
				});
			#endregion

			#region // Refine and Check Input:
			////
			string strMST = TUtils.CUtils.StdParam(objMST);
			string strNNTFullName = string.Format("{0}", objNNTFullName).Trim();
			string strMSTParent = TUtils.CUtils.StdParam(objMSTParent);
			string strProvinceCode = TUtils.CUtils.StdParam(objProvinceCode);
			string strDistrictCode = TUtils.CUtils.StdParam(objDistrictCode);
			//string strNNTType = TUtils.CUtils.StdParam(objNNTType);
			string strDLCode = TUtils.CUtils.StdParam(objDLCode);
			string strNNTAddress = string.Format("{0}", objNNTAddress).Trim();
			string strNNTMobile = string.Format("{0}", objNNTMobile).Trim();
			string strNNTPhone = string.Format("{0}", objNNTPhone).Trim();
			string strNNTFax = string.Format("{0}", objNNTFax).Trim();
			string strPresentBy = string.Format("{0}", objPresentBy).Trim();
			string strBusinessRegNo = string.Format("{0}", objBusinessRegNo).Trim();
			string strNNTPosition = string.Format("{0}", objNNTPosition).Trim();
			string strPresentIDNo = string.Format("{0}", objPresentIDNo).Trim();
			string strPresentIDType = string.Format("{0}", objPresentIDType).Trim();
			string strGovTaxID = TUtils.CUtils.StdParam(objGovTaxID);
			string strContactName = string.Format("{0}", objContactName).Trim();
			string strContactPhone = string.Format("{0}", objContactPhone).Trim();
			string strContactEmail = string.Format("{0}", objContactEmail).Trim();
			string strWebsite = string.Format("{0}", objWebsite).Trim();
			string strCANumber = string.Format("{0}", objCANumber).Trim();
			string strCAOrg = string.Format("{0}", objCAOrg).Trim();
			string strCAEffDTimeUTCStart = TUtils.CUtils.StdDTime(objCAEffDTimeUTCStart);
			string strCAEffDTimeUTCEnd = TUtils.CUtils.StdDTime(objCAEffDTimeUTCEnd);
			string strPackageCode = string.Format("{0}", objPackageCode).Trim();
			string strCreatedDate = TUtils.CUtils.StdDate(objCreatedDate);
			string strAccNo = string.Format("{0}", objAccNo).Trim();
			string strAccHolder = string.Format("{0}", objAccHolder).Trim();
			string strBankName = string.Format("{0}", objBankName).Trim();
			string strBizType = TUtils.CUtils.StdParam(objBizType);
			string strBizFieldCode = TUtils.CUtils.StdParam(objBizFieldCode);
			string strBizSizeCode = TUtils.CUtils.StdParam(objBizSizeCode);
			string strDealerType = TUtils.CUtils.StdParam(objDealerType);

			// drAbilityOfUser:
			//DataRow drAbilityOfUser = Sys_User_GetAbilityViewOfUser(_cf.sinf.strUserCode);
			////
			DataTable dtDB_Mst_NNT = null;
			{
				////
				if (strMST == null || strMST.Length < 1)
				{
					alParamsCoupleError.AddRange(new object[]{
						"Check.strMST", strMST
						});
					throw CmUtils.CMyException.Raise(
						TError.ErridnInventory.Mst_NNT_Create_InvalidMST
						, null
						, alParamsCoupleError.ToArray()
						);
				}
				////
				Mst_NNT_CheckDB(
					ref alParamsCoupleError // alParamsCoupleError
					, strMST // objMST
					, TConst.Flag.No // strFlagExistToCheck
					, "" // strFlagActiveListToCheck
					, "" // strTCTStatusListToCheck
					, out dtDB_Mst_NNT // dtDB_Mst_NNT
					);
				////
				DataTable dtDB_Mst_NNT_Parent = null;

				if (!string.IsNullOrEmpty(strMSTParent))
				{
					/////
					Mst_NNT_CheckDB(
						ref alParamsCoupleError // alParamsCoupleError
						, strMSTParent // objMSTParent
						, TConst.Flag.Yes // strFlagExistToCheck
						, TConst.Flag.Active // strFlagActiveListToCheck
						, "" // strTCTStatusListToCheck
						, out dtDB_Mst_NNT_Parent // dtDB_Mst_NNT_Parent
						);
					////
				}
				////
				//DataTable dtDB_Mst_Province = null;

				//Mst_Province_CheckDB(
				//	ref alParamsCoupleError // alParamsCoupleError
				//	, strProvinceCode // objProvinceCode
				//	, TConst.Flag.Yes // strFlagExistToCheck
				//	, TConst.Flag.Active // strFlagActiveListToCheck
				//	, out dtDB_Mst_Province // dtDB_Mst_Province
				//	);
				////
				//DataTable dtDB_Mst_District = null;

				//Mst_District_CheckDB(
				//	ref alParamsCoupleError // alParamsCoupleError
				//	, strProvinceCode // objProvinceCode
				//	, strDistrictCode // objDistrictCode
				//	, TConst.Flag.Yes // strFlagExistToCheck
				//	, TConst.Flag.Active // strFlagActiveListToCheck
				//	, out dtDB_Mst_District // dtDB_Mst_District
				//	);
				////
				//DataTable dtDB_Mst_NNTType = null;

				//Mst_NNTType_CheckDB(
				//    ref alParamsCoupleError // alParamsCoupleError
				//    , strNNTType // objNNTType
				//    , TConst.Flag.Yes // strFlagExistToCheck
				//    , TConst.Flag.Active // strFlagActiveListToCheck
				//    , out dtDB_Mst_NNTType // dtDB_Mst_NNTType
				//    );
				//////
				DataTable dtDB_Mst_Dealer = null;

				Mst_Dealer_CheckDB(
					ref alParamsCoupleError // alParamsCoupleError
					, strDLCode // strDLCode
					, TConst.Flag.Yes // strFlagExistToCheck
					, TConst.Flag.Active // strFlagActiveListToCheck
					, out dtDB_Mst_Dealer // dtDB_Mst_Dealer
					);
				////
				//DataTable dtDB_Mst_GovTaxID = null;

				//Mst_GovTaxID_CheckDB(
				//	ref alParamsCoupleError // alParamsCoupleError
				//	, strGovTaxID // objGovTaxID
				//	, TConst.Flag.Yes // strFlagExistToCheck
				//	, TConst.Flag.Active // strFlagActiveListToCheck
				//	, out dtDB_Mst_GovTaxID // dtDB_Mst_GovTaxID
				//	);
				////
				if (strNNTFullName.Length < 1)
				{
					alParamsCoupleError.AddRange(new object[]{
						"Check.strNNTFullName", strNNTFullName
						});
					throw CmUtils.CMyException.Raise(
						TError.ErridnInventory.Mst_NNT_Create_InvalidNNTFullName
						, null
						, alParamsCoupleError.ToArray()
						);
				}
				////
				//if (strNNTAddress.Length < 1)
				//{
				//	alParamsCoupleError.AddRange(new object[]{
				//		"Check.strNNTAddress", strNNTAddress
				//		});
				//	throw CmUtils.CMyException.Raise(
				//		TError.ErridnInventory.Mst_NNT_Create_InvalidNNTAddress
				//		, null
				//		, alParamsCoupleError.ToArray()
				//		);
				//}
				////
				//if (strPresentBy.Length < 1)
				//{
				//    alParamsCoupleError.AddRange(new object[]{
				//        "Check.strPresentBy", strPresentBy
				//        });
				//    throw CmUtils.CMyException.Raise(
				//        TError.ErridnInventory.Mst_NNT_Create_InvalidPresentBy
				//        , null
				//        , alParamsCoupleError.ToArray()
				//        );
				//}
				////
				//if (strNNTPosition.Length < 1)
				//{
				//    alParamsCoupleError.AddRange(new object[]{
				//        "Check.strNNTPosition", strNNTPosition
				//        });
				//    throw CmUtils.CMyException.Raise(
				//        TError.ErridnInventory.Mst_NNT_Create_InvalidNNTPosition
				//        , null
				//        , alParamsCoupleError.ToArray()
				//        );
				//}
				////
				if (strContactName.Length < 1)
				{
					alParamsCoupleError.AddRange(new object[]{
						"Check.strContactName", strContactName
						});
					throw CmUtils.CMyException.Raise(
						TError.ErridnInventory.Mst_NNT_Create_InvalidContactName
						, null
						, alParamsCoupleError.ToArray()
						);
				}
				////
				//if (strContactPhone.Length < 1)
				//{
				//	alParamsCoupleError.AddRange(new object[]{
				//		"Check.strContactPhone", strContactPhone
				//		});
				//	throw CmUtils.CMyException.Raise(
				//		TError.ErridnInventory.Mst_NNT_Create_InvalidContactPhone
				//		, null
				//		, alParamsCoupleError.ToArray()
				//		);
				//}
				////
				if (strContactEmail.Length < 1)
				{
					alParamsCoupleError.AddRange(new object[]{
						"Check.strContactEmail", strContactEmail
						});
					throw CmUtils.CMyException.Raise(
						TError.ErridnInventory.Mst_NNT_Create_InvalidContactEmail
						, null
						, alParamsCoupleError.ToArray()
						);
				}
			}
			#endregion

			#region // SaveDB Mst_NNT:
			{
				// Init:
				//ArrayList alColumnEffective = new ArrayList();
				string strFN = "";
				DataRow drDB = dtDB_Mst_NNT.NewRow();
				strFN = "OrgID"; drDB[strFN] = strMST; // Tạm thời để = strOrgID
				strFN = "MST"; drDB[strFN] = strMST;
				strFN = "NNTFullName"; drDB[strFN] = strNNTFullName;
				strFN = "NetworkID"; drDB[strFN] = nNetworkID;
				strFN = "MSTParent"; drDB[strFN] = strMSTParent;
				strFN = "MSTBUCode"; drDB[strFN] = "X";
				strFN = "MSTBUPattern"; drDB[strFN] = "X";
				strFN = "MSTLevel"; drDB[strFN] = 1;
				strFN = "ProvinceCode"; drDB[strFN] = strProvinceCode;
				strFN = "DistrictCode"; drDB[strFN] = strDistrictCode;
				//strFN = "NNTType"; drDB[strFN] = strNNTType;
				strFN = "DLCode"; drDB[strFN] = strDLCode;
				strFN = "NNTAddress"; drDB[strFN] = strNNTAddress;
				strFN = "NNTMobile"; drDB[strFN] = strNNTMobile;
				strFN = "NNTPhone"; drDB[strFN] = strNNTPhone;
				strFN = "NNTFax"; drDB[strFN] = strNNTFax;
				strFN = "PresentBy"; drDB[strFN] = strPresentBy;
				strFN = "BusinessRegNo"; drDB[strFN] = strBusinessRegNo;
				strFN = "NNTPosition"; drDB[strFN] = strNNTPosition;
				strFN = "PresentIDNo"; drDB[strFN] = strPresentIDNo;
				strFN = "PresentIDType"; drDB[strFN] = strPresentIDType;
				strFN = "GovTaxID"; drDB[strFN] = strGovTaxID;
				strFN = "ContactName"; drDB[strFN] = strContactName;
				strFN = "ContactPhone"; drDB[strFN] = strContactPhone;
				strFN = "ContactEmail"; drDB[strFN] = strContactEmail;
				strFN = "Website"; drDB[strFN] = strWebsite;
				strFN = "CANumber"; drDB[strFN] = strCANumber;
				strFN = "CAOrg"; drDB[strFN] = strCAOrg;
				strFN = "CAEffDTimeUTCStart"; drDB[strFN] = strCAEffDTimeUTCStart;
				strFN = "CAEffDTimeUTCEnd"; drDB[strFN] = strCAEffDTimeUTCEnd;
				strFN = "PackageCode"; drDB[strFN] = strPackageCode;
				strFN = "CreatedDate"; drDB[strFN] = strCreatedDate;
				strFN = "AccNo"; drDB[strFN] = strAccNo;
				strFN = "AccHolder"; drDB[strFN] = strAccHolder;
				strFN = "BankName"; drDB[strFN] = strBankName;
				strFN = "BizType"; drDB[strFN] = strBizType;
				strFN = "BizFieldCode"; drDB[strFN] = strBizFieldCode;
				strFN = "BizSizeCode"; drDB[strFN] = strBizSizeCode;
				strFN = "DealerType"; drDB[strFN] = strDealerType;
				strFN = "RegisterStatus"; drDB[strFN] = TConst.RegisterStatus.Pending;
				strFN = "FlagActive"; drDB[strFN] = TConst.Flag.Active;
				strFN = "TCTStatus"; drDB[strFN] = TConst.Flag.Active;
				strFN = "CreateDTimeUTC"; drDB[strFN] = dtimeSys.ToString("yyyy-MM-dd HH:mm:ss");
				strFN = "CreateBy"; drDB[strFN] = strWAUserCode;
				strFN = "LogLUDTimeUTC"; drDB[strFN] = dtimeSys.ToString("yyyy-MM-dd HH:mm:ss");
				strFN = "LogLUBy"; drDB[strFN] = strWAUserCode;
				dtDB_Mst_NNT.Rows.Add(drDB);

				// Save:
				_cf.db.SaveData(
					"Mst_NNT" // strTableName
					, dtDB_Mst_NNT // dtData
								   //, alColumnEffective.ToArray()
					);
			}
			#endregion

			#region // Post Save:
			{
				Mst_NNT_UpdBU();
			}
			#endregion

			#region // Check:
			{
				string sqlPostCheck = CmUtils.StringUtils.Replace(@"
                        -----
                        select 
	                        count(t.MST) TotalQtyNetWork
                        from Mst_NNT t --//[mylock]
                        where(1=1)
	                        and t.MSTLevel = '1'
	                        and (t.MST != 'ALL' and t.MSTParent is null)
                    
                ");
				DataTable dsPostCheck = _cf.db.ExecQuery(sqlPostCheck).Tables[0];
				////
				if (dsPostCheck.Rows.Count > 0)
				{
					Int64 nTotalQtyNetWork = Convert.ToInt64(dsPostCheck.Rows[0]["TotalQtyNetWork"]);
					if (nTotalQtyNetWork > 1)
					{
						alParamsCoupleError.AddRange(new object[]{
							"Check.TotalQtyNetWork", nTotalQtyNetWork
							, "Check.TotalQtyNetWork", nTotalQtyNetWork
							});
						throw CmUtils.CMyException.Raise(
							TError.ErridnInventory.Mst_NNT_Create_InvalidTotalNetworkID
							, null
							, alParamsCoupleError.ToArray()
							);
					}
				}
				////
			}
			#endregion
		}

		private void Mst_NNT_CreateX(
			string strTid
			, string strGwUserCode
			, string strGwPassword
			, string strWAUserCode
			, string strWAUserPassword
			, ref ArrayList alParamsCoupleError
			, DateTime dtimeSys
			//// 
			, object objMST
			, object objNNTFullName
			, object objMSTParent
			, object objProvinceCode
			, object objDistrictCode
			//, object objNNTType
			, object objDLCode
			, object objNNTAddress
			, object objNNTMobile
			, object objNNTPhone
			, object objNNTFax
			, object objPresentBy
			, object objBusinessRegNo
			, object objNNTPosition
			, object objPresentIDNo
			, object objPresentIDType
			, object objGovTaxID
			, object objContactName
			, object objContactPhone
			, object objContactEmail
			, object objWebsite
			, object objCANumber
			, object objCAOrg
			, object objCAEffDTimeUTCStart
			, object objCAEffDTimeUTCEnd
			, object objPackageCode
			, object objCreatedDate
			, object objAccNo
			, object objAccHolder
			, object objBankName
			, object objBizType // objBizType
			, object objBizFieldCode // objBizFieldCode
			, object objBizSizeCode // objBizSizeCode
									////
			)
		{
			#region // Temp:
			string strFunctionName = "Mst_NNT_CreateX";
			//string strErrorCodeDefault = TError.ErrHTCNM.Mnf_VIN_Get_QCX;
			alParamsCoupleError.AddRange(new object[]{
				"strFunctionName", strFunctionName
				, "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
                , "objMST", objMST
				, "objNNTFullName", objNNTFullName
				, "objMSTParent", objMSTParent
				, "objProvinceCode", objProvinceCode
				, "objDistrictCode", objDistrictCode
                //, "objNNTType", objNNTType
                , "objDLCode", objDLCode
				, "objNNTAddress", objNNTAddress
				, "objNNTMobile", objNNTMobile
                //, "objNNTPhone", objNNTPhone
                //, "objNNTFax", objNNTFax
                //, "objPresentBy", objPresentBy
                //, "objBusinessRegNo", objBusinessRegNo
                //, "objNNTPosition", objNNTPosition
                //, "objPresentIDNo", objPresentIDNo
                //, "objPresentIDType", objPresentIDType
                //, "objGovTaxID", objGovTaxID
                , "objContactName", objContactName
				, "objContactPhone", objContactPhone
				, "objContactEmail", objContactEmail
				, "objWebsite", objWebsite
				, "objCANumber", objCANumber
				, "objCAOrg", objCAOrg
				, "objCAEffDTimeUTCStart", objCAEffDTimeUTCStart
				, "objCAEffDTimeUTCEnd", objCAEffDTimeUTCEnd
				, "objPackageCode", objPackageCode
				, "objCreatedDate", objCreatedDate
				, "objAccNo", objAccNo
				, "objAccHolder", objAccHolder
				, "objBankName", objBankName
				, "objBizType", objBizType
				, "objBizFieldCode", objBizFieldCode
				, "objBizSizeCode", objBizSizeCode
				});
			#endregion

			#region // Refine and Check Input:
			////
			string strMST = TUtils.CUtils.StdParam(objMST);
			string strNNTFullName = string.Format("{0}", objNNTFullName).Trim();
			string strMSTParent = TUtils.CUtils.StdParam(objMSTParent);
			string strProvinceCode = TUtils.CUtils.StdParam(objProvinceCode);
			string strDistrictCode = TUtils.CUtils.StdParam(objDistrictCode);
			//string strNNTType = TUtils.CUtils.StdParam(objNNTType);
			string strDLCode = TUtils.CUtils.StdParam(objDLCode);
			string strNNTAddress = string.Format("{0}", objNNTAddress).Trim();
			string strNNTMobile = string.Format("{0}", objNNTMobile).Trim();
			string strNNTPhone = string.Format("{0}", objNNTPhone).Trim();
			string strNNTFax = string.Format("{0}", objNNTFax).Trim();
			string strPresentBy = string.Format("{0}", objPresentBy).Trim();
			string strBusinessRegNo = string.Format("{0}", objBusinessRegNo).Trim();
			string strNNTPosition = string.Format("{0}", objNNTPosition).Trim();
			string strPresentIDNo = string.Format("{0}", objPresentIDNo).Trim();
			string strPresentIDType = string.Format("{0}", objPresentIDType).Trim();
			string strGovTaxID = TUtils.CUtils.StdParam(objGovTaxID);
			string strContactName = string.Format("{0}", objContactName).Trim();
			string strContactPhone = string.Format("{0}", objContactPhone).Trim();
			string strContactEmail = string.Format("{0}", objContactEmail).Trim();
			string strWebsite = string.Format("{0}", objWebsite).Trim();
			string strCANumber = string.Format("{0}", objCANumber).Trim();
			string strCAOrg = string.Format("{0}", objCAOrg).Trim();
			string strCAEffDTimeUTCStart = TUtils.CUtils.StdDTime(objCAEffDTimeUTCStart);
			string strCAEffDTimeUTCEnd = TUtils.CUtils.StdDTime(objCAEffDTimeUTCEnd);
			string strPackageCode = string.Format("{0}", objPackageCode).Trim();
			string strCreatedDate = TUtils.CUtils.StdDate(objCreatedDate);
			string strAccNo = string.Format("{0}", objAccNo).Trim();
			string strAccHolder = string.Format("{0}", objAccHolder).Trim();
			string strBankName = string.Format("{0}", objBankName).Trim();
			string strBizType = TUtils.CUtils.StdParam(objBizType);
			string strBizFieldCode = TUtils.CUtils.StdParam(objBizFieldCode);
			string strBizSizeCode = TUtils.CUtils.StdParam(objBizSizeCode);

			// drAbilityOfUser:
			//DataRow drAbilityOfUser = Sys_User_GetAbilityViewOfUser(_cf.sinf.strUserCode);
			////
			DataTable dtDB_Mst_NNT = null;
			{
				////
				if (strMST == null || strMST.Length < 1)
				{
					alParamsCoupleError.AddRange(new object[]{
						"Check.strMST", strMST
						});
					throw CmUtils.CMyException.Raise(
						TError.ErridnInventory.Mst_NNT_Create_InvalidMST
						, null
						, alParamsCoupleError.ToArray()
						);
				}
				////
				Mst_NNT_CheckDB(
					ref alParamsCoupleError // alParamsCoupleError
					, strMST // objMST
					, TConst.Flag.No // strFlagExistToCheck
					, "" // strFlagActiveListToCheck
					, "" // strTCTStatusListToCheck
					, out dtDB_Mst_NNT // dtDB_Mst_NNT
					);
				////
				DataTable dtDB_Mst_NNT_Parent = null;

				if (!string.IsNullOrEmpty(strMSTParent))
				{
					/////
					Mst_NNT_CheckDB(
						ref alParamsCoupleError // alParamsCoupleError
						, strMSTParent // objMSTParent
						, TConst.Flag.Yes // strFlagExistToCheck
						, TConst.Flag.Active // strFlagActiveListToCheck
						, "" // strTCTStatusListToCheck
						, out dtDB_Mst_NNT_Parent // dtDB_Mst_NNT_Parent
						);
					////
				}
				////
				DataTable dtDB_Mst_Province = null;

				Mst_Province_CheckDB(
					ref alParamsCoupleError // alParamsCoupleError
					, strProvinceCode // objProvinceCode
					, TConst.Flag.Yes // strFlagExistToCheck
					, TConst.Flag.Active // strFlagActiveListToCheck
					, out dtDB_Mst_Province // dtDB_Mst_Province
					);
				////
				DataTable dtDB_Mst_District = null;

				Mst_District_CheckDB(
					ref alParamsCoupleError // alParamsCoupleError
					, strProvinceCode // objProvinceCode
					, strDistrictCode // objDistrictCode
					, TConst.Flag.Yes // strFlagExistToCheck
					, TConst.Flag.Active // strFlagActiveListToCheck
					, out dtDB_Mst_District // dtDB_Mst_District
					);
				////
				//DataTable dtDB_Mst_NNTType = null;

				//Mst_NNTType_CheckDB(
				//    ref alParamsCoupleError // alParamsCoupleError
				//    , strNNTType // objNNTType
				//    , TConst.Flag.Yes // strFlagExistToCheck
				//    , TConst.Flag.Active // strFlagActiveListToCheck
				//    , out dtDB_Mst_NNTType // dtDB_Mst_NNTType
				//    );
				//////
				DataTable dtDB_Mst_Dealer = null;

				Mst_Dealer_CheckDB(
					ref alParamsCoupleError // alParamsCoupleError
					, strDLCode // strDLCode
					, TConst.Flag.Yes // strFlagExistToCheck
					, TConst.Flag.Active // strFlagActiveListToCheck
					, out dtDB_Mst_Dealer // dtDB_Mst_Dealer
					);
				////
				//DataTable dtDB_Mst_GovTaxID = null;

				//Mst_GovTaxID_CheckDB(
				//	ref alParamsCoupleError // alParamsCoupleError
				//	, strGovTaxID // objGovTaxID
				//	, TConst.Flag.Yes // strFlagExistToCheck
				//	, TConst.Flag.Active // strFlagActiveListToCheck
				//	, out dtDB_Mst_GovTaxID // dtDB_Mst_GovTaxID
				//	);
				////
				if (strNNTFullName.Length < 1)
				{
					alParamsCoupleError.AddRange(new object[]{
						"Check.strNNTFullName", strNNTFullName
						});
					throw CmUtils.CMyException.Raise(
						TError.ErridnInventory.Mst_NNT_Create_InvalidNNTFullName
						, null
						, alParamsCoupleError.ToArray()
						);
				}
				////
				if (strNNTAddress.Length < 1)
				{
					alParamsCoupleError.AddRange(new object[]{
						"Check.strNNTAddress", strNNTAddress
						});
					throw CmUtils.CMyException.Raise(
						TError.ErridnInventory.Mst_NNT_Create_InvalidNNTAddress
						, null
						, alParamsCoupleError.ToArray()
						);
				}
				////
				//if (strPresentBy.Length < 1)
				//{
				//    alParamsCoupleError.AddRange(new object[]{
				//        "Check.strPresentBy", strPresentBy
				//        });
				//    throw CmUtils.CMyException.Raise(
				//        TError.ErridnInventory.Mst_NNT_Create_InvalidPresentBy
				//        , null
				//        , alParamsCoupleError.ToArray()
				//        );
				//}
				////
				//if (strNNTPosition.Length < 1)
				//{
				//    alParamsCoupleError.AddRange(new object[]{
				//        "Check.strNNTPosition", strNNTPosition
				//        });
				//    throw CmUtils.CMyException.Raise(
				//        TError.ErridnInventory.Mst_NNT_Create_InvalidNNTPosition
				//        , null
				//        , alParamsCoupleError.ToArray()
				//        );
				//}
				////
				if (strContactName.Length < 1)
				{
					alParamsCoupleError.AddRange(new object[]{
						"Check.strContactName", strContactName
						});
					throw CmUtils.CMyException.Raise(
						TError.ErridnInventory.Mst_NNT_Create_InvalidContactName
						, null
						, alParamsCoupleError.ToArray()
						);
				}
				////
				if (strContactPhone.Length < 1)
				{
					alParamsCoupleError.AddRange(new object[]{
						"Check.strContactPhone", strContactPhone
						});
					throw CmUtils.CMyException.Raise(
						TError.ErridnInventory.Mst_NNT_Create_InvalidContactPhone
						, null
						, alParamsCoupleError.ToArray()
						);
				}
				////
				if (strContactEmail.Length < 1)
				{
					alParamsCoupleError.AddRange(new object[]{
						"Check.strContactEmail", strContactEmail
						});
					throw CmUtils.CMyException.Raise(
						TError.ErridnInventory.Mst_NNT_Create_InvalidContactEmail
						, null
						, alParamsCoupleError.ToArray()
						);
				}
			}
			#endregion

			#region // SaveDB Mst_NNT:
			{
				// Init:
				//ArrayList alColumnEffective = new ArrayList();
				string strFN = "";
				DataRow drDB = dtDB_Mst_NNT.NewRow();
				strFN = "OrgID"; drDB[strFN] = strMST; // Tạm thời để = strOrgID
				strFN = "MST"; drDB[strFN] = strMST;
				strFN = "NNTFullName"; drDB[strFN] = strNNTFullName;
				strFN = "NetworkID"; drDB[strFN] = nNetworkID;
				strFN = "MSTParent"; drDB[strFN] = strMSTParent;
				strFN = "MSTBUCode"; drDB[strFN] = "X";
				strFN = "MSTBUPattern"; drDB[strFN] = "X";
				strFN = "MSTLevel"; drDB[strFN] = 1;
				strFN = "ProvinceCode"; drDB[strFN] = strProvinceCode;
				strFN = "DistrictCode"; drDB[strFN] = strDistrictCode;
				//strFN = "NNTType"; drDB[strFN] = strNNTType;
				strFN = "DLCode"; drDB[strFN] = strDLCode;
				strFN = "NNTAddress"; drDB[strFN] = strNNTAddress;
				strFN = "NNTMobile"; drDB[strFN] = strNNTMobile;
				strFN = "NNTPhone"; drDB[strFN] = strNNTPhone;
				strFN = "NNTFax"; drDB[strFN] = strNNTFax;
				strFN = "PresentBy"; drDB[strFN] = strPresentBy;
				strFN = "BusinessRegNo"; drDB[strFN] = strBusinessRegNo;
				strFN = "NNTPosition"; drDB[strFN] = strNNTPosition;
				strFN = "PresentIDNo"; drDB[strFN] = strPresentIDNo;
				strFN = "PresentIDType"; drDB[strFN] = strPresentIDType;
				strFN = "GovTaxID"; drDB[strFN] = strGovTaxID;
				strFN = "ContactName"; drDB[strFN] = strContactName;
				strFN = "ContactPhone"; drDB[strFN] = strContactPhone;
				strFN = "ContactEmail"; drDB[strFN] = strContactEmail;
				strFN = "Website"; drDB[strFN] = strWebsite;
				strFN = "CANumber"; drDB[strFN] = strCANumber;
				strFN = "CAOrg"; drDB[strFN] = strCAOrg;
				strFN = "CAEffDTimeUTCStart"; drDB[strFN] = strCAEffDTimeUTCStart;
				strFN = "CAEffDTimeUTCEnd"; drDB[strFN] = strCAEffDTimeUTCEnd;
				strFN = "PackageCode"; drDB[strFN] = strPackageCode;
				strFN = "CreatedDate"; drDB[strFN] = strCreatedDate;
				strFN = "AccNo"; drDB[strFN] = strAccNo;
				strFN = "AccHolder"; drDB[strFN] = strAccHolder;
				strFN = "BankName"; drDB[strFN] = strBankName;
				strFN = "BizType"; drDB[strFN] = strBizType;
				strFN = "BizFieldCode"; drDB[strFN] = strBizFieldCode;
				strFN = "BizSizeCode"; drDB[strFN] = strBizSizeCode;
				strFN = "RegisterStatus"; drDB[strFN] = TConst.RegisterStatus.Pending;
				strFN = "FlagActive"; drDB[strFN] = TConst.Flag.Active;
				strFN = "TCTStatus"; drDB[strFN] = TConst.Flag.Active;
				strFN = "CreateDTimeUTC"; drDB[strFN] = dtimeSys.ToString("yyyy-MM-dd HH:mm:ss");
				strFN = "CreateBy"; drDB[strFN] = strWAUserCode;
				strFN = "LogLUDTimeUTC"; drDB[strFN] = dtimeSys.ToString("yyyy-MM-dd HH:mm:ss");
				strFN = "LogLUBy"; drDB[strFN] = strWAUserCode;
				dtDB_Mst_NNT.Rows.Add(drDB);

				// Save:
				_cf.db.SaveData(
					"Mst_NNT" // strTableName
					, dtDB_Mst_NNT // dtData
								   //, alColumnEffective.ToArray()
					);
			}
			#endregion

			#region // Post Save:
			{
				Mst_NNT_UpdBU();
			}
			#endregion

			#region // Check:
			{
				string sqlPostCheck = CmUtils.StringUtils.Replace(@"
                        -----
                        select 
	                        count(t.MST) TotalQtyNetWork
                        from Mst_NNT t --//[mylock]
                        where(1=1)
	                        and t.MSTLevel = '1'
	                        and (t.MST != 'ALL' and t.MSTParent is null)
                    
                ");
				DataTable dsPostCheck = _cf.db.ExecQuery(sqlPostCheck).Tables[0];
				////
				if (dsPostCheck.Rows.Count > 0)
				{
					Int64 nTotalQtyNetWork = Convert.ToInt64(dsPostCheck.Rows[0]["TotalQtyNetWork"]);
					if (nTotalQtyNetWork > 1)
					{
						alParamsCoupleError.AddRange(new object[]{
							"Check.TotalQtyNetWork", nTotalQtyNetWork
							, "Check.TotalQtyNetWork", nTotalQtyNetWork
							});
						throw CmUtils.CMyException.Raise(
							TError.ErridnInventory.Mst_NNT_Create_InvalidTotalNetworkID
							, null
							, alParamsCoupleError.ToArray()
							);
					}
				}
				////
			}
			#endregion
		}

		private void Mst_NNT_CreateX_New20200110(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            , DateTime dtimeSys
            //// 
            , object objMST
            , object objNNTFullName
            , object objMSTParent
            , object objProvinceCode
            , object objDistrictCode
            //, object objNNTType
            , object objDLCode
            , object objNNTAddress
            , object objNNTMobile
            , object objNNTPhone
            , object objNNTFax
            , object objPresentBy
            , object objBusinessRegNo
            , object objNNTPosition
            , object objPresentIDNo
            , object objPresentIDType
            , object objGovTaxID
            , object objContactName
            , object objContactPhone
            , object objContactEmail
            , object objWebsite
            , object objCANumber
            , object objCAOrg
            , object objCAEffDTimeUTCStart
            , object objCAEffDTimeUTCEnd
            , object objPackageCode
            , object objCreatedDate
            , object objAccNo
            , object objAccHolder
            , object objBankName
            , object objBizType // objBizType
            , object objBizFieldCode // objBizFieldCode
            , object objBizSizeCode // objBizSizeCode
                                    ////
            , object objDealerType
            )
        {
            #region // Temp:
            string strFunctionName = "Mst_NNT_CreateX";
            //string strErrorCodeDefault = TError.ErrHTCNM.Mnf_VIN_Get_QCX;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
                , "objMST", objMST
                , "objNNTFullName", objNNTFullName
                , "objMSTParent", objMSTParent
                , "objProvinceCode", objProvinceCode
                , "objDistrictCode", objDistrictCode
                //, "objNNTType", objNNTType
                , "objDLCode", objDLCode
                , "objNNTAddress", objNNTAddress
                , "objNNTMobile", objNNTMobile
                //, "objNNTPhone", objNNTPhone
                //, "objNNTFax", objNNTFax
                //, "objPresentBy", objPresentBy
                //, "objBusinessRegNo", objBusinessRegNo
                //, "objNNTPosition", objNNTPosition
                //, "objPresentIDNo", objPresentIDNo
                //, "objPresentIDType", objPresentIDType
                //, "objGovTaxID", objGovTaxID
                , "objContactName", objContactName
                , "objContactPhone", objContactPhone
                , "objContactEmail", objContactEmail
                , "objWebsite", objWebsite
                , "objCANumber", objCANumber
                , "objCAOrg", objCAOrg
                , "objCAEffDTimeUTCStart", objCAEffDTimeUTCStart
                , "objCAEffDTimeUTCEnd", objCAEffDTimeUTCEnd
                , "objPackageCode", objPackageCode
                , "objCreatedDate", objCreatedDate
                , "objAccNo", objAccNo
                , "objAccHolder", objAccHolder
                , "objBankName", objBankName
                , "objBizType", objBizType
                , "objBizFieldCode", objBizFieldCode
                , "objBizSizeCode", objBizSizeCode
                /////
                , "objDealerType", objDealerType
                });
            #endregion

            #region // Refine and Check Input:
            ////
            string strMST = TUtils.CUtils.StdParam(objMST);
            string strNNTFullName = string.Format("{0}", objNNTFullName).Trim();
            string strMSTParent = TUtils.CUtils.StdParam(objMSTParent);
            string strProvinceCode = TUtils.CUtils.StdParam(objProvinceCode);
            string strDistrictCode = TUtils.CUtils.StdParam(objDistrictCode);
            //string strNNTType = TUtils.CUtils.StdParam(objNNTType);
            string strDLCode = TUtils.CUtils.StdParam(objDLCode);
            string strNNTAddress = string.Format("{0}", objNNTAddress).Trim();
            string strNNTMobile = string.Format("{0}", objNNTMobile).Trim();
            string strNNTPhone = string.Format("{0}", objNNTPhone).Trim();
            string strNNTFax = string.Format("{0}", objNNTFax).Trim();
            string strPresentBy = string.Format("{0}", objPresentBy).Trim();
            string strBusinessRegNo = string.Format("{0}", objBusinessRegNo).Trim();
            string strNNTPosition = string.Format("{0}", objNNTPosition).Trim();
            string strPresentIDNo = string.Format("{0}", objPresentIDNo).Trim();
            string strPresentIDType = string.Format("{0}", objPresentIDType).Trim();
            string strGovTaxID = TUtils.CUtils.StdParam(objGovTaxID);
            string strContactName = string.Format("{0}", objContactName).Trim();
            string strContactPhone = string.Format("{0}", objContactPhone).Trim();
            string strContactEmail = string.Format("{0}", objContactEmail).Trim();
            string strWebsite = string.Format("{0}", objWebsite).Trim();
            string strCANumber = string.Format("{0}", objCANumber).Trim();
            string strCAOrg = string.Format("{0}", objCAOrg).Trim();
            string strCAEffDTimeUTCStart = TUtils.CUtils.StdDTime(objCAEffDTimeUTCStart);
            string strCAEffDTimeUTCEnd = TUtils.CUtils.StdDTime(objCAEffDTimeUTCEnd);
            string strPackageCode = string.Format("{0}", objPackageCode).Trim();
            string strCreatedDate = TUtils.CUtils.StdDate(objCreatedDate);
            string strAccNo = string.Format("{0}", objAccNo).Trim();
            string strAccHolder = string.Format("{0}", objAccHolder).Trim();
            string strBankName = string.Format("{0}", objBankName).Trim();
            string strBizType = TUtils.CUtils.StdParam(objBizType);
            string strBizFieldCode = TUtils.CUtils.StdParam(objBizFieldCode);
            string strBizSizeCode = TUtils.CUtils.StdParam(objBizSizeCode);
            string strDealerType = TUtils.CUtils.StdParam(objDealerType);

            // drAbilityOfUser:
            //DataRow drAbilityOfUser = Sys_User_GetAbilityViewOfUser(_cf.sinf.strUserCode);
            ////
            DataTable dtDB_Mst_NNT = null;
            {
                ////
                if (strMST == null || strMST.Length < 1)
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.strMST", strMST
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Mst_NNT_Create_InvalidMST
                        , null
                        , alParamsCoupleError.ToArray()
                        );
                }
                ////
                Mst_NNT_CheckDB(
                    ref alParamsCoupleError // alParamsCoupleError
                    , strMST // objMST
                    , TConst.Flag.No // strFlagExistToCheck
                    , "" // strFlagActiveListToCheck
                    , "" // strTCTStatusListToCheck
                    , out dtDB_Mst_NNT // dtDB_Mst_NNT
                    );
                ////
                DataTable dtDB_Mst_NNT_Parent = null;

                if (!string.IsNullOrEmpty(strMSTParent))
                {
                    /////
                    Mst_NNT_CheckDB(
                        ref alParamsCoupleError // alParamsCoupleError
                        , strMSTParent // objMSTParent
                        , TConst.Flag.Yes // strFlagExistToCheck
                        , TConst.Flag.Active // strFlagActiveListToCheck
                        , "" // strTCTStatusListToCheck
                        , out dtDB_Mst_NNT_Parent // dtDB_Mst_NNT_Parent
                        );
                    ////
                }
                ////
                DataTable dtDB_Mst_Province = null;

                Mst_Province_CheckDB(
                    ref alParamsCoupleError // alParamsCoupleError
                    , strProvinceCode // objProvinceCode
                    , TConst.Flag.Yes // strFlagExistToCheck
                    , TConst.Flag.Active // strFlagActiveListToCheck
                    , out dtDB_Mst_Province // dtDB_Mst_Province
                    );
                ////
                DataTable dtDB_Mst_District = null;

                Mst_District_CheckDB(
                    ref alParamsCoupleError // alParamsCoupleError
                    , strProvinceCode // objProvinceCode
                    , strDistrictCode // objDistrictCode
                    , TConst.Flag.Yes // strFlagExistToCheck
                    , TConst.Flag.Active // strFlagActiveListToCheck
                    , out dtDB_Mst_District // dtDB_Mst_District
                    );
                ////
                //DataTable dtDB_Mst_NNTType = null;

                //Mst_NNTType_CheckDB(
                //    ref alParamsCoupleError // alParamsCoupleError
                //    , strNNTType // objNNTType
                //    , TConst.Flag.Yes // strFlagExistToCheck
                //    , TConst.Flag.Active // strFlagActiveListToCheck
                //    , out dtDB_Mst_NNTType // dtDB_Mst_NNTType
                //    );
                //////
                DataTable dtDB_Mst_Dealer = null;

                Mst_Dealer_CheckDB(
                    ref alParamsCoupleError // alParamsCoupleError
                    , strDLCode // strDLCode
                    , TConst.Flag.Yes // strFlagExistToCheck
                    , TConst.Flag.Active // strFlagActiveListToCheck
                    , out dtDB_Mst_Dealer // dtDB_Mst_Dealer
                    );
                ////
                //DataTable dtDB_Mst_GovTaxID = null;

                //Mst_GovTaxID_CheckDB(
                //	ref alParamsCoupleError // alParamsCoupleError
                //	, strGovTaxID // objGovTaxID
                //	, TConst.Flag.Yes // strFlagExistToCheck
                //	, TConst.Flag.Active // strFlagActiveListToCheck
                //	, out dtDB_Mst_GovTaxID // dtDB_Mst_GovTaxID
                //	);
                ////
                if (strNNTFullName.Length < 1)
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.strNNTFullName", strNNTFullName
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Mst_NNT_Create_InvalidNNTFullName
                        , null
                        , alParamsCoupleError.ToArray()
                        );
                }
                ////
                if (strNNTAddress.Length < 1)
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.strNNTAddress", strNNTAddress
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Mst_NNT_Create_InvalidNNTAddress
                        , null
                        , alParamsCoupleError.ToArray()
                        );
                }
                ////
                //if (strPresentBy.Length < 1)
                //{
                //    alParamsCoupleError.AddRange(new object[]{
                //        "Check.strPresentBy", strPresentBy
                //        });
                //    throw CmUtils.CMyException.Raise(
                //        TError.ErridnInventory.Mst_NNT_Create_InvalidPresentBy
                //        , null
                //        , alParamsCoupleError.ToArray()
                //        );
                //}
                ////
                //if (strNNTPosition.Length < 1)
                //{
                //    alParamsCoupleError.AddRange(new object[]{
                //        "Check.strNNTPosition", strNNTPosition
                //        });
                //    throw CmUtils.CMyException.Raise(
                //        TError.ErridnInventory.Mst_NNT_Create_InvalidNNTPosition
                //        , null
                //        , alParamsCoupleError.ToArray()
                //        );
                //}
                ////
                if (strContactName.Length < 1)
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.strContactName", strContactName
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Mst_NNT_Create_InvalidContactName
                        , null
                        , alParamsCoupleError.ToArray()
                        );
                }
                ////
                if (strContactPhone.Length < 1)
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.strContactPhone", strContactPhone
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Mst_NNT_Create_InvalidContactPhone
                        , null
                        , alParamsCoupleError.ToArray()
                        );
                }
                ////
                if (strContactEmail.Length < 1)
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.strContactEmail", strContactEmail
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Mst_NNT_Create_InvalidContactEmail
                        , null
                        , alParamsCoupleError.ToArray()
                        );
                }
            }
            #endregion

            #region // SaveDB Mst_NNT:
            {
                // Init:
                //ArrayList alColumnEffective = new ArrayList();
                string strFN = "";
                DataRow drDB = dtDB_Mst_NNT.NewRow();
                strFN = "OrgID"; drDB[strFN] = strMST; // Tạm thời để = strOrgID
                strFN = "MST"; drDB[strFN] = strMST;
                strFN = "NNTFullName"; drDB[strFN] = strNNTFullName;
                strFN = "NetworkID"; drDB[strFN] = nNetworkID;
                strFN = "MSTParent"; drDB[strFN] = strMSTParent;
                strFN = "MSTBUCode"; drDB[strFN] = "X";
                strFN = "MSTBUPattern"; drDB[strFN] = "X";
                strFN = "MSTLevel"; drDB[strFN] = 1;
                strFN = "ProvinceCode"; drDB[strFN] = strProvinceCode;
                strFN = "DistrictCode"; drDB[strFN] = strDistrictCode;
                //strFN = "NNTType"; drDB[strFN] = strNNTType;
                strFN = "DLCode"; drDB[strFN] = strDLCode;
                strFN = "NNTAddress"; drDB[strFN] = strNNTAddress;
                strFN = "NNTMobile"; drDB[strFN] = strNNTMobile;
                strFN = "NNTPhone"; drDB[strFN] = strNNTPhone;
                strFN = "NNTFax"; drDB[strFN] = strNNTFax;
                strFN = "PresentBy"; drDB[strFN] = strPresentBy;
                strFN = "BusinessRegNo"; drDB[strFN] = strBusinessRegNo;
                strFN = "NNTPosition"; drDB[strFN] = strNNTPosition;
                strFN = "PresentIDNo"; drDB[strFN] = strPresentIDNo;
                strFN = "PresentIDType"; drDB[strFN] = strPresentIDType;
                strFN = "GovTaxID"; drDB[strFN] = strGovTaxID;
                strFN = "ContactName"; drDB[strFN] = strContactName;
                strFN = "ContactPhone"; drDB[strFN] = strContactPhone;
                strFN = "ContactEmail"; drDB[strFN] = strContactEmail;
                strFN = "Website"; drDB[strFN] = strWebsite;
                strFN = "CANumber"; drDB[strFN] = strCANumber;
                strFN = "CAOrg"; drDB[strFN] = strCAOrg;
                strFN = "CAEffDTimeUTCStart"; drDB[strFN] = strCAEffDTimeUTCStart;
                strFN = "CAEffDTimeUTCEnd"; drDB[strFN] = strCAEffDTimeUTCEnd;
                strFN = "PackageCode"; drDB[strFN] = strPackageCode;
                strFN = "CreatedDate"; drDB[strFN] = strCreatedDate;
                strFN = "AccNo"; drDB[strFN] = strAccNo;
                strFN = "AccHolder"; drDB[strFN] = strAccHolder;
                strFN = "BankName"; drDB[strFN] = strBankName;
                strFN = "BizType"; drDB[strFN] = strBizType;
                strFN = "BizFieldCode"; drDB[strFN] = strBizFieldCode;
                strFN = "BizSizeCode"; drDB[strFN] = strBizSizeCode;
                strFN = "DealerType"; drDB[strFN] = strDealerType;
                strFN = "RegisterStatus"; drDB[strFN] = TConst.RegisterStatus.Pending;
                strFN = "FlagActive"; drDB[strFN] = TConst.Flag.Active;
                strFN = "TCTStatus"; drDB[strFN] = TConst.Flag.Active;
                strFN = "CreateDTimeUTC"; drDB[strFN] = dtimeSys.ToString("yyyy-MM-dd HH:mm:ss");
                strFN = "CreateBy"; drDB[strFN] = strWAUserCode;
                strFN = "LogLUDTimeUTC"; drDB[strFN] = dtimeSys.ToString("yyyy-MM-dd HH:mm:ss");
                strFN = "LogLUBy"; drDB[strFN] = strWAUserCode;
                dtDB_Mst_NNT.Rows.Add(drDB);

                // Save:
                _cf.db.SaveData(
                    "Mst_NNT" // strTableName
                    , dtDB_Mst_NNT // dtData
                                   //, alColumnEffective.ToArray()
                    );
            }
            #endregion

            #region // Post Save:
            {
                Mst_NNT_UpdBU();
            }
            #endregion

            #region // Check:
            {
                string sqlPostCheck = CmUtils.StringUtils.Replace(@"
                        -----
                        select 
	                        count(t.MST) TotalQtyNetWork
                        from Mst_NNT t --//[mylock]
                        where(1=1)
	                        and t.MSTLevel = '1'
	                        and (t.MST != 'ALL' and t.MSTParent is null)
                    
                ");
                DataTable dsPostCheck = _cf.db.ExecQuery(sqlPostCheck).Tables[0];
                ////
                if (dsPostCheck.Rows.Count > 0)
                {
                    Int64 nTotalQtyNetWork = Convert.ToInt64(dsPostCheck.Rows[0]["TotalQtyNetWork"]);
                    if (nTotalQtyNetWork > 1)
                    {
                        alParamsCoupleError.AddRange(new object[]{
                            "Check.TotalQtyNetWork", nTotalQtyNetWork
                            , "Check.TotalQtyNetWork", nTotalQtyNetWork
                            });
                        throw CmUtils.CMyException.Raise(
                            TError.ErridnInventory.Mst_NNT_Create_InvalidTotalNetworkID
                            , null
                            , alParamsCoupleError.ToArray()
                            );
                    }
                }
                ////
            }
            #endregion
        }
        private void Mst_NNT_UpdateX(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            , DateTime dtimeSys
            //// 
            , object objMST
            , object objNNTFullName
            , object objNNTAddress
            , object objNNTMobile
            , object objNNTPhone
            , object objNNTFax
            , object objPresentBy
            , object objBusinessRegNo
            , object objNNTPosition
            , object objPresentIDNo
            , object objPresentIDType
            , object objGovTaxID
            , object objContactName
            , object objContactPhone
            , object objContactEmail
            , object objWebsite
            , object objCANumber
            , object objCAOrg
            , object objCAEffDTimeUTCStart
            , object objCAEffDTimeUTCEnd
            , object objPackageCode
            , object objCreatedDate
            , object objAccNo
            , object objAccHolder
            , object objBankName
            , object objTCTStatus
            , object objFlagActive
            ////
            , object objFt_Cols_Upd
            ////
            )
        {
            #region // Temp:
            string strFunctionName = "Mst_NNT_UpdateX";
            //string strErrorCodeDefault = TError.ErrHTCNM.Mst_NNT_UpdateX;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
                , "objMST", objMST
                , "objNNTFullName", objNNTFullName
                , "objNNTAddress", objNNTAddress
                , "objNNTMobile", objNNTMobile
                , "objNNTPhone", objNNTPhone
                , "objNNTFax", objNNTFax
                , "objPresentBy", objPresentBy
                , "objBusinessRegNo", objBusinessRegNo
                , "objNNTPosition", objNNTPosition
                , "objPresentIDNo", objPresentIDNo
                , "objPresentIDType", objPresentIDType
                , "objGovTaxID", objGovTaxID
                , "objContactName", objContactName
                , "objContactPhone", objContactPhone
                , "objContactEmail", objContactEmail
                , "objWebsite", objWebsite
                , "objCANumber", objCANumber
                , "objCAOrg", objCAOrg
                , "objCAEffDTimeUTCStart", objCAEffDTimeUTCStart
                , "objCAEffDTimeUTCEnd", objCAEffDTimeUTCEnd
                , "objPackageCode", objPackageCode
                , "objCreatedDate", objCreatedDate
                , "objAccNo", objAccNo
                , "objAccHolder", objAccHolder
                , "objBankName", objBankName
                , "objTCTStatus", objTCTStatus
                , "objFlagActive", objFlagActive
                ////
                , "objFt_Cols_Upd", objFt_Cols_Upd
                });
            #endregion

            #region // Refine and Check Input:
            ////
            string strFt_Cols_Upd = TUtils.CUtils.StdParam(objFt_Cols_Upd);
            strFt_Cols_Upd = (strFt_Cols_Upd == null ? "" : strFt_Cols_Upd);
            ////
            string strMST = TUtils.CUtils.StdParam(objMST);
            string strNNTFullName = string.Format("{0}", objNNTFullName).Trim();
            string strNNTAddress = string.Format("{0}", objNNTAddress).Trim();
            string strNNTMobile = string.Format("{0}", objNNTMobile).Trim();
            string strNNTPhone = string.Format("{0}", objNNTPhone).Trim();
            string strNNTFax = string.Format("{0}", objNNTFax).Trim();
            string strPresentBy = string.Format("{0}", objPresentBy).Trim();
            string strBusinessRegNo = string.Format("{0}", objBusinessRegNo).Trim();
            string strNNTPosition = string.Format("{0}", objNNTPosition).Trim();
            string strPresentIDNo = string.Format("{0}", objPresentIDNo).Trim();
            string strPresentIDType = string.Format("{0}", objPresentIDType).Trim();
            string strGovTaxID = TUtils.CUtils.StdParam(objGovTaxID);
            string strContactName = string.Format("{0}", objContactName).Trim();
            string strContactPhone = string.Format("{0}", objContactPhone).Trim();
            string strContactEmail = string.Format("{0}", objContactEmail).Trim();
            string strWebsite = string.Format("{0}", objWebsite).Trim();
            string strCANumber = string.Format("{0}", objCANumber).Trim();
            string strCAOrg = string.Format("{0}", objCAOrg).Trim();
            string strCAEffDTimeUTCStart = TUtils.CUtils.StdDTime(objCAEffDTimeUTCStart);
            string strCAEffDTimeUTCEnd = TUtils.CUtils.StdDTime(objCAEffDTimeUTCEnd);
            string strPackageCode = string.Format("{0}", objPackageCode).Trim();
            string strAccNo = string.Format("{0}", objAccNo).Trim();
            string strAccHolder = string.Format("{0}", objAccHolder).Trim();
            string strBankName = string.Format("{0}", objBankName).Trim();
            string strTCTStatus = TUtils.CUtils.StdFlag(objTCTStatus);
            string strFlagActive = TUtils.CUtils.StdFlag(objFlagActive);
            ////
            bool bUpd_NNTFullName = strFt_Cols_Upd.Contains("Mst_NNT.NNTFullName".ToUpper());
            bool bUpd_NNTAddress = strFt_Cols_Upd.Contains("Mst_NNT.NNTAddress".ToUpper());
            bool bUpd_NNTMobile = strFt_Cols_Upd.Contains("Mst_NNT.NNTMobile".ToUpper());
            bool bUpd_NNTPhone = strFt_Cols_Upd.Contains("Mst_NNT.NNTPhone".ToUpper());
            bool bUpd_NNTFax = strFt_Cols_Upd.Contains("Mst_NNT.NNTFax".ToUpper());
            bool bUpd_PresentBy = strFt_Cols_Upd.Contains("Mst_NNT.PresentBy".ToUpper());
            bool bUpd_BusinessRegNo = strFt_Cols_Upd.Contains("Mst_NNT.BusinessRegNo".ToUpper());
            bool bUpd_NNTPosition = strFt_Cols_Upd.Contains("Mst_NNT.NNTPosition".ToUpper());
            bool bUpd_PresentIDNo = strFt_Cols_Upd.Contains("Mst_NNT.PresentIDNo".ToUpper());
            bool bUpd_PresentIDType = strFt_Cols_Upd.Contains("Mst_NNT.PresentIDType".ToUpper());
            bool bUpd_GovTaxID = strFt_Cols_Upd.Contains("Mst_NNT.GovTaxID".ToUpper());
            bool bUpd_ContactName = strFt_Cols_Upd.Contains("Mst_NNT.ContactName".ToUpper());
            bool bUpd_ContactPhone = strFt_Cols_Upd.Contains("Mst_NNT.ContactPhone".ToUpper());
            bool bUpd_ContactEmail = strFt_Cols_Upd.Contains("Mst_NNT.ContactEmail".ToUpper());
            bool bUpd_Website = strFt_Cols_Upd.Contains("Mst_NNT.Website".ToUpper());
            bool bUpd_CANumber = strFt_Cols_Upd.Contains("Mst_NNT.CANumber".ToUpper());
            bool bUpd_CAOrg = strFt_Cols_Upd.Contains("Mst_NNT.CAOrg".ToUpper());
            bool bUpd_CAEffDTimeUTCStart = strFt_Cols_Upd.Contains("Mst_NNT.CAEffDTimeUTCStart".ToUpper());
            bool bUpd_CAEffDTimeUTCEnd = strFt_Cols_Upd.Contains("Mst_NNT.CAEffDTimeUTCEnd".ToUpper());
            bool bUpd_PackageCode = strFt_Cols_Upd.Contains("Mst_NNT.PackageCode".ToUpper());
            bool bUpd_CreatedDate = strFt_Cols_Upd.Contains("Mst_NNT.CreatedDate".ToUpper());
            bool bUpd_AccNo = strFt_Cols_Upd.Contains("Mst_NNT.AccNo".ToUpper());
            bool bUpd_AccHolder = strFt_Cols_Upd.Contains("Mst_NNT.AccHolder".ToUpper());
            bool bUpd_BankName = strFt_Cols_Upd.Contains("Mst_NNT.BankName".ToUpper());
            bool bUpd_FlagActive = strFt_Cols_Upd.Contains("Mst_NNT.FlagActive".ToUpper());

            ////
            DataTable dtDB_Mst_NNT = null;
            {
                ////
                Mst_NNT_CheckDB(
                    ref alParamsCoupleError // alParamsCoupleError
                    , strMST // strMST 
                    , TConst.Flag.Yes // strFlagExistToCheck
                    , "" // strFlagActiveListToCheck
                    , "" // strTCTStatusListToCheck
                    , out dtDB_Mst_NNT // dtDB_Mst_Organ
                    );
                ////
                if (strNNTFullName.Length < 1)
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.strNNTFullName", strNNTFullName
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Mst_NNT_Update_InvalidNNTFullName
                        , null
                        , alParamsCoupleError.ToArray()
                        );
                }
                ////
                if (strNNTAddress.Length < 1)
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.strNNTAddress", strNNTAddress
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Mst_NNT_Update_InvalidNNTAddress
                        , null
                        , alParamsCoupleError.ToArray()
                        );
                }
                ////
                if (strPresentBy.Length < 1)
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.strPresentBy", strPresentBy
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Mst_NNT_Update_InvalidPresentBy
                        , null
                        , alParamsCoupleError.ToArray()
                        );
                }
                ////
                if (strNNTPosition.Length < 1)
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.strNNTPosition", strNNTPosition
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Mst_NNT_Update_InvalidNNTPosition
                        , null
                        , alParamsCoupleError.ToArray()
                        );
                }
                ////
                if (strContactName.Length < 1)
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.strContactName", strContactName
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Mst_NNT_Update_InvalidContactName
                        , null
                        , alParamsCoupleError.ToArray()
                        );
                }
                ////
                if (strContactPhone.Length < 1)
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.strContactPhone", strContactPhone
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Mst_NNT_Update_InvalidContactPhone
                        , null
                        , alParamsCoupleError.ToArray()
                        );
                }
                ////
                if (strContactEmail.Length < 1)
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.strContactEmail", strContactEmail
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Mst_NNT_Update_InvalidContactEmail
                        , null
                        , alParamsCoupleError.ToArray()
                        );
                }
            }
            #endregion

            #region // Save Mst_Chain:
            {
                // Init:
                ArrayList alColumnEffective = new ArrayList();
                string strFN = "";
                DataRow drDB = dtDB_Mst_NNT.Rows[0];
                if (bUpd_NNTFullName) { strFN = "NNTFullName"; drDB[strFN] = strNNTFullName; alColumnEffective.Add(strFN); }
                if (bUpd_NNTAddress) { strFN = "NNTAddress"; drDB[strFN] = strNNTAddress; alColumnEffective.Add(strFN); }
                if (bUpd_NNTMobile) { strFN = "NNTMobile"; drDB[strFN] = strNNTMobile; alColumnEffective.Add(strFN); }
                if (bUpd_NNTPhone) { strFN = "NNTPhone"; drDB[strFN] = strNNTPhone; alColumnEffective.Add(strFN); }
                if (bUpd_NNTFax) { strFN = "NNTFax"; drDB[strFN] = strNNTFax; alColumnEffective.Add(strFN); }
                if (bUpd_PresentBy) { strFN = "PresentBy"; drDB[strFN] = strPresentBy; alColumnEffective.Add(strFN); }
                if (bUpd_BusinessRegNo) { strFN = "BusinessRegNo"; drDB[strFN] = strBusinessRegNo; alColumnEffective.Add(strFN); }
                if (bUpd_NNTPosition) { strFN = "NNTPosition"; drDB[strFN] = strNNTPosition; alColumnEffective.Add(strFN); }
                if (bUpd_PresentIDNo) { strFN = "PresentIDNo"; drDB[strFN] = strPresentIDNo; alColumnEffective.Add(strFN); }
                if (bUpd_PresentIDType) { strFN = "PresentIDType"; drDB[strFN] = strPresentIDType; alColumnEffective.Add(strFN); }
                if (bUpd_GovTaxID) { strFN = "GovTaxID"; drDB[strFN] = strGovTaxID; alColumnEffective.Add(strFN); }
                if (bUpd_ContactName) { strFN = "ContactName"; drDB[strFN] = strContactName; alColumnEffective.Add(strFN); }
                if (bUpd_ContactPhone) { strFN = "ContactPhone"; drDB[strFN] = strContactPhone; alColumnEffective.Add(strFN); }
                if (bUpd_ContactEmail) { strFN = "ContactEmail"; drDB[strFN] = strContactEmail; alColumnEffective.Add(strFN); }
                if (bUpd_Website) { strFN = "Website"; drDB[strFN] = strWebsite; alColumnEffective.Add(strFN); }
                if (bUpd_CANumber) { strFN = "CANumber"; drDB[strFN] = strCANumber; alColumnEffective.Add(strFN); }
                if (bUpd_CAOrg) { strFN = "CAOrg"; drDB[strFN] = strCAOrg; alColumnEffective.Add(strFN); }
                if (bUpd_CAEffDTimeUTCStart) { strFN = "CAEffDTimeUTCStart"; drDB[strFN] = strCAEffDTimeUTCStart; alColumnEffective.Add(strFN); }
                if (bUpd_CAEffDTimeUTCEnd) { strFN = "CAEffDTimeUTCEnd"; drDB[strFN] = strCAEffDTimeUTCEnd; alColumnEffective.Add(strFN); }
                if (bUpd_PackageCode) { strFN = "PackageCode"; drDB[strFN] = strPackageCode; alColumnEffective.Add(strFN); }
                if (bUpd_AccNo) { strFN = "AccNo"; drDB[strFN] = strAccNo; alColumnEffective.Add(strFN); }
                if (bUpd_AccHolder) { strFN = "AccHolder"; drDB[strFN] = strAccHolder; alColumnEffective.Add(strFN); }
                if (bUpd_BankName) { strFN = "BankName"; drDB[strFN] = strBankName; alColumnEffective.Add(strFN); }
                if (bUpd_FlagActive) { strFN = "FlagActive"; drDB[strFN] = strFlagActive; alColumnEffective.Add(strFN); }
                strFN = "LogLUDTimeUTC"; drDB[strFN] = dtimeSys.ToString("yyyy-MM-dd HH:mm:ss"); alColumnEffective.Add(strFN);
                strFN = "LogLUBy"; drDB[strFN] = strWAUserCode; alColumnEffective.Add(strFN);

                // Save:
                _cf.db.SaveData(
                    "Mst_NNT"
                    , dtDB_Mst_NNT
                    , alColumnEffective.ToArray()
                    );
            }
            #endregion
        }

		private void Mst_NNT_UpdateRegisterStatusX(
			string strTid
			, string strGwUserCode
			, string strGwPassword
			, string strWAUserCode
			, string strWAUserPassword
			, ref ArrayList alParamsCoupleError
			, DateTime dtimeSys
			//// 
			, object objMST
			, object objRegisterStatus
			, object objRemark
			////
			)
		{
			#region // Temp:
			string strFunctionName = "Mst_NNT_UpdateRegisterStatusX";
			//string strErrorCodeDefault = TError.ErrHTCNM.Mst_NNT_UpdateRegisterStatusX;
			alParamsCoupleError.AddRange(new object[]{
				"strFunctionName", strFunctionName
				, "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
                , "objMST", objMST
				, "objRegisterStatus", objRegisterStatus
				, "objRemark", objRemark
				});
			#endregion

			#region // Refine and Check Input:
			////
			object objFt_Cols_Upd = "Mst_NNT.RegisterStatus, Mst_NNT.Remark";
			string strFt_Cols_Upd = TUtils.CUtils.StdParam(objFt_Cols_Upd);
			strFt_Cols_Upd = (strFt_Cols_Upd == null ? "" : strFt_Cols_Upd);
			////
			string strMST = TUtils.CUtils.StdParam(objMST);
			string strRegisterStatus = TUtils.CUtils.StdParam(objRegisterStatus);
			string strRemark = string.Format("{0}", objRemark).Trim();
			////
			bool bUpd_RegisterStatus = strFt_Cols_Upd.Contains("Mst_NNT.RegisterStatus".ToUpper());
			bool bUpd_Remark = strFt_Cols_Upd.Contains("Mst_NNT.Remark".ToUpper());

			////
			DataTable dtDB_Mst_NNT = null;
			{
				////
				Mst_NNT_CheckDB(
					ref alParamsCoupleError // alParamsCoupleError
					, strMST // strMST 
					, TConst.Flag.Yes // strFlagExistToCheck
					, "" // strFlagActiveListToCheck
					, "" // strTCTStatusListToCheck
					, out dtDB_Mst_NNT // dtDB_Mst_Organ
					);
			}
			#endregion

			#region // Save Mst_Chain:
			{
				// Init:
				ArrayList alColumnEffective = new ArrayList();
				string strFN = "";
				DataRow drDB = dtDB_Mst_NNT.Rows[0];
				if (bUpd_RegisterStatus) { strFN = "RegisterStatus"; drDB[strFN] = strRegisterStatus; alColumnEffective.Add(strFN); }
				if (bUpd_Remark) { strFN = "Remark"; drDB[strFN] = strRemark; alColumnEffective.Add(strFN); }
				strFN = "LogLUDTimeUTC"; drDB[strFN] = dtimeSys.ToString("yyyy-MM-dd HH:mm:ss"); alColumnEffective.Add(strFN);
				strFN = "LogLUBy"; drDB[strFN] = strWAUserCode; alColumnEffective.Add(strFN);

				// Save:
				_cf.db.SaveData(
					"Mst_NNT"
					, dtDB_Mst_NNT
					, alColumnEffective.ToArray()
					);
			}
			#endregion
		}
		private void Mst_NNT_DeleteX(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            , DateTime dtimeSys
            //// 
            , object objMST
            ////
            )
        {
            #region // Temp:
            string strFunctionName = "Mst_Organ_DeleteX";
            //string strErrorCodeDefault = TError.ErrHTCNM.Mnf_VIN_Get_QCX;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
                , "objMST", objMST
                });
            #endregion

            #region // Refine and Check Input:
            ////
            string strMST = TUtils.CUtils.StdParam(objMST);

            ////
            DataTable dtDB_Mst_NNT = null;
            {
                ////
                Mst_NNT_CheckDB(
                    ref alParamsCoupleError // alParamsCoupleError
                    , strMST // strMST
                    , TConst.Flag.Yes // strFlagExistToCheck
                    , "" // strFlagActiveListToCheck
                    , "" // strTCTStatusListToCheck
                    , out dtDB_Mst_NNT // dtDB_Mst_NNT
                    );
                ////
            }
            #endregion

            #region // SaveDB:
            {
                // Init:
                dtDB_Mst_NNT.Rows[0].Delete();

                // Save:
                _cf.db.SaveData(
                    "Mst_NNT"
                    , dtDB_Mst_NNT
                    );
            }
            #endregion
        }

        private void RptSv_Mst_NNT_DeleteX(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            , DateTime dtimeSys
            //// 
            , object objMST
            ////
            )
        {
            #region // Temp:
            string strFunctionName = "RptSv_Mst_NNT_DeleteX";
            //string strErrorCodeDefault = TError.ErrHTCNM.Mnf_VIN_Get_QCX;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
                , "objMST", objMST
                });
            #endregion

            #region // Refine and Check Input:
            ////
            string strMST = TUtils.CUtils.StdParam(objMST);

            ////
            DataTable dtDB_Mst_NNT = null;
            {
                ////
                Mst_NNT_CheckDB(
                    ref alParamsCoupleError // alParamsCoupleError
                    , strMST // strMST
                    , TConst.Flag.Yes // strFlagExistToCheck
                    , "" // strFlagActiveListToCheck
                    , "" // strTCTStatusListToCheck
                    , out dtDB_Mst_NNT // dtDB_Mst_NNT
                    );
                ////
            }
            #endregion

            #region // SaveDB:
            if(CmUtils.StringUtils.StringEqualIgnoreCase(dtDB_Mst_NNT.Rows[0]["RegisterStatus"], TConst.RegisterStatus.Pending) )
            {
                //// Clear All:
                {
                    string strSqlDelete = CmUtils.StringUtils.Replace(@"
                            ---- Sys_User:
                            delete t
                            from Sys_User t --//[mylock]
                            where (1=1)
	                            and t.MST = '@strMST'
                            ;


                            ---- MstSv_Inos_Package:
                            delete t
                            from MstSv_Inos_Package t --//[mylock]
                            where (1=1)
	                            and t.MST = '@strMST'
                            ;

                            ---- MstSv_Inos_OrgInvite:
                            delete t
                            from MstSv_Inos_OrgInvite t --//[mylock]
                            where (1=1)
	                            and t.MST = '@strMST'
                            ;

                            ---- MstSv_Inos_OrgUser:
                            delete t
                            from MstSv_Inos_OrgUser t --//[mylock]
                            where (1=1)
	                            and t.MST = '@strMST'
                            ;

                            ---- MstSv_Inos_Org:
                            delete t
                            from MstSv_Inos_Org t --//[mylock]
                            where (1=1)
	                            and t.MST = '@strMST'
                            ;

                            ---- MstSv_Inos_User:
                            delete t
                            from MstSv_Inos_User t --//[mylock]
                            where (1=1)
	                            and t.MST = '@strMST'
                            ;
						"
                        , "@strMST", strMST
                        );
                    DataSet dtDB = _cf.db.ExecQuery(
                        strSqlDelete
                        );
                }

                // Init:
                dtDB_Mst_NNT.Rows[0].Delete();

                // Save:
                _cf.db.SaveData(
                    "Mst_NNT"
                    , dtDB_Mst_NNT
                    );
            }
            else
            {
                alParamsCoupleError.AddRange(new object[]{
                        "Check.strMST", strMST
                        , "DB.RegisterStatus", dtDB_Mst_NNT.Rows[0]["RegisterStatus"]
                        });
                throw CmUtils.CMyException.Raise(
                    TError.ErridnInventory.Mst_NNT_CheckDB_RegisterStatusNotMatched
                    , null
                    , alParamsCoupleError.ToArray()
                    );
            }
            #endregion
        }

        public DataSet WA_Mst_NNT_MSTChild_Registry(
            ref ArrayList alParamsCoupleError
            , RQ_Mst_NNT objRQ_Mst_NNT
            ////
            , out RT_Mst_NNT objRT_Mst_NNT
            )
        {
            #region // Temp:
            string strTid = objRQ_Mst_NNT.Tid;
            objRT_Mst_NNT = new RT_Mst_NNT();
            DataSet mdsResult = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            DateTime dtimeSys = DateTime.UtcNow;
            //DataSet mdsExec = null;
            //DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(objRQ_Mst_NNT.Tid);
            //int nTidSeq = 0;
            //bool bNeedTransaction = true;
            string strFunctionName = "WA_Mst_NNT_MSTChild_Registry";
            string strErrorCodeDefault = TError.ErridnInventory.WA_Mst_NNT_MSTChild_Registry;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
				, "ReportServer", "ReportServer"
                });
            #endregion

            try
            {
                #region // Init:
                #endregion

                #region // Refine and Check Input:
                List<Mst_NNT> lst_Mst_NNT = new List<Mst_NNT>();
                #endregion

                #region // Mst_NNT_CreateNNTAndDepartment:
                mdsResult = Mst_NNT_MSTChild_Registry(
                    objRQ_Mst_NNT.Tid // strTid
                    , objRQ_Mst_NNT.GwUserCode // strGwUserCode
                    , objRQ_Mst_NNT.GwPassword // strGwPassword
                    , objRQ_Mst_NNT.WAUserCode // strUserCode
                    , objRQ_Mst_NNT.WAUserPassword // strUserPassword
                    , objRQ_Mst_NNT.AccessToken // strAccessToken
                    , ref alParamsCoupleError // alParamsCoupleError
                                              ////
                    , objRQ_Mst_NNT.Mst_NNT.MST // objMST
                    , objRQ_Mst_NNT.Mst_NNT.NNTFullName // objNNTFullName
                                                        //, objRQ_Mst_NNT.Mst_NNT.MSTParent // objMSTParent
                    , objRQ_Mst_NNT.Mst_NNT.ProvinceCode // objProvinceCode
                    , objRQ_Mst_NNT.Mst_NNT.DistrictCode // objDistrictCode
                                                         //, objRQ_Mst_NNT.Mst_NNT.NNTType // objNNTType
                    , objRQ_Mst_NNT.Mst_NNT.DLCode // objDLCode
                    , objRQ_Mst_NNT.Mst_NNT.NNTAddress // objAddress
                    , objRQ_Mst_NNT.Mst_NNT.NNTMobile // objMobile
                    , objRQ_Mst_NNT.Mst_NNT.NNTPhone // objPhone
                    , objRQ_Mst_NNT.Mst_NNT.NNTFax // objFax
                    , objRQ_Mst_NNT.Mst_NNT.PresentBy // objPresentBy
                    , objRQ_Mst_NNT.Mst_NNT.BusinessRegNo // objBusinessRegNo
                    , objRQ_Mst_NNT.Mst_NNT.NNTPosition // objPosition
                    , objRQ_Mst_NNT.Mst_NNT.PresentIDNo // objPresentIDNo
                    , objRQ_Mst_NNT.Mst_NNT.PresentIDType // objPresentIDType
                    , objRQ_Mst_NNT.Mst_NNT.GovTaxID // objGovTaxID
                    , objRQ_Mst_NNT.Mst_NNT.ContactName // objContactName
                    , objRQ_Mst_NNT.Mst_NNT.ContactPhone // objContactPhone
                    , objRQ_Mst_NNT.Mst_NNT.ContactEmail // objContactEmail
                    , objRQ_Mst_NNT.Mst_NNT.Website // objWebsite
                    , objRQ_Mst_NNT.Mst_NNT.CANumber // objCANumber
                    , objRQ_Mst_NNT.Mst_NNT.CAOrg // objCAOrg
                    , objRQ_Mst_NNT.Mst_NNT.CAEffDTimeUTCStart // objCAEffDTimeUTCStart
                    , objRQ_Mst_NNT.Mst_NNT.CAEffDTimeUTCEnd // objCAEffDTimeUTCEnd
                    , objRQ_Mst_NNT.Mst_NNT.PackageCode // objPackageCode
                    , objRQ_Mst_NNT.Mst_NNT.CreatedDate // objCreatedDate
                    , objRQ_Mst_NNT.Mst_NNT.AccNo // objAccNo
                    , objRQ_Mst_NNT.Mst_NNT.AccHolder // objAccHolder
                    , objRQ_Mst_NNT.Mst_NNT.BankName // objBankName
                    , objRQ_Mst_NNT.Mst_NNT.BizType // objBizType
                    , objRQ_Mst_NNT.Mst_NNT.BizFieldCode // objBizFieldCode
                    , objRQ_Mst_NNT.Mst_NNT.BizSizeCode // objBizSizeCode
                                                        ////
                    , "O" // objDepartmentCode Fix Cung
                          ////
                    , objRQ_Mst_NNT.Mst_NNT.UserPassword // objUserPassword
                    , objRQ_Mst_NNT.Mst_NNT.UserPasswordRepeat // objUserPasswordRepeat
                    );
                #endregion

                // Return Good:
                return mdsResult;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsResult
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Write ReturnLog:
                //_cf.ProcessBizReturn(
                //	ref mdsResult // mdsFinal
                //	, strTid // strTid
                //	, strFunctionName // strFunctionName
                //	);
                #endregion
            }
        }
        public DataSet Mst_NNT_MSTChild_Registry(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , string strAccessToken
            , ref ArrayList alParamsCoupleError
            ////
            , object objMST
            , object objNNTFullName
            //, object objMSTParent
            , object objProvinceCode
            , object objDistrictCode
            //, object objNNTType
            , object objDLCode
            , object objNNTAddress
            , object objNNTMobile
            , object objNTTPhone
            , object objNNTFax
            , object objPresentBy
            , object objBusinessRegNo
            , object objNNTPosition
            , object objPresentIDNo
            , object objPresentIDType
            , object objGovTaxID
            , object objContactName
            , object objContactPhone
            , object objContactEmail
            , object objWebsite
            , object objCANumber
            , object objCAOrg
            , object objCAEffDTimeUTCStart
            , object objCAEffDTimeUTCEnd
            , object objPackageCode
            , object objCreatedDate
            , object objAccNo
            , object objAccHolder
            , object objBankName
            , object objBizType
            , object objBizFieldCode
            , object objBizSizeCode
            ////
            , object objDepartmentCode
            ////
            , object objUserPassword
            , object objUserPasswordRepeat
            )
        {
            #region // Temp:
            DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            //int nTidSeq = 0;
            DateTime dtimeSys = DateTime.UtcNow;
            string strFunctionName = "Mst_NNT_MSTChild_Registry";
            string strErrorCodeDefault = TError.ErridnInventory.Mst_NNT_MSTChild_Registry;
            alParamsCoupleError.AddRange(new object[]{
                    "strFunctionName", strFunctionName
                    , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
			        ////
					, "objMST", objMST
                    , "objNNTFullName", objNNTFullName
                    //, "objMSTParent", objMSTParent
                    , "objProvinceCode", objProvinceCode
                    , "objDistrictCode", objDistrictCode
                    //, "objNNTType", objNNTType
                    , "objDLCode", objDLCode
                    , "objNNTAddress", objNNTAddress
                    , "objNNTMobile", objNNTMobile
                    , "objNTTPhone", objNTTPhone
                    , "objNNTFax", objNNTFax
                    , "objPresentBy", objPresentBy
                    , "objBusinessRegNo", objBusinessRegNo
                    , "objNNTPosition", objNNTPosition
                    , "objPresentIDNo", objPresentIDNo
                    , "objPresentIDType", objPresentIDType
                    , "objGovTaxID", objGovTaxID
                    , "objContactName", objContactName
                    , "objContactPhone", objContactPhone
                    , "objContactEmail", objContactEmail
                    , "objWebsite", objWebsite
                    , "objCANumber", objCANumber
                    , "objCAOrg", objCAOrg
                    , "objCAEffDTimeUTCStart", objCAEffDTimeUTCStart
                    , "objCAEffDTimeUTCEnd", objCAEffDTimeUTCEnd
                    , "objPackageCode", objPackageCode
                    , "objAccNo", objAccNo
                    , "objAccHolder", objAccHolder
                    , "objBankName", objBankName
                    , "objBankName", objBizType
                    , "objBizFieldCode", objBizFieldCode
                    , "objBizSizeCode", objBizSizeCode
                    /////
                    , "objDepartmentCode", objDepartmentCode
                    ////
                    , "objUserPassword", objUserPassword
                    , "objUserPasswordRepeat", objUserPasswordRepeat
                    });
            #endregion

            try
            {
                #region // Init:
                //_cf.db.LogUserId = _cf.sinf.strUserCode;
                _cf.db.BeginTransaction();

                // Write RequestLog:
                _cf.ProcessBizReq_OutSide(
                    strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    , alParamsCoupleError // alParamsCoupleError
                    );

                //// rem lại do khong can dung user/pass để đăng ký NNT
                //// Sys_User_CheckAuthentication:
                //Sys_User_CheckAuthentication(
                //    ref alParamsCoupleError
                //    , strWAUserCode
                //    , strWAUserPassword
                //    );

                //// Check Access/Deny:
                //Sys_Access_CheckDenyV30(
                //    ref alParamsCoupleError
                //    , strWAUserCode
                //    , strFunctionName
                //    );
                #endregion

                #region // Mst_NNT_CreateX:
                {
                    //DataSet dsGetData = null;


                    Mst_NNT_MSTChild_CreateX(
                        strTid // strTid
                        , strGwUserCode // strGwUserCode
                        , strGwPassword // strGwPassword
                        , strWAUserCode // strWAUserCode
                        , strWAUserPassword // strWAUserPassword
                        , ref alParamsCoupleError // alParamsCoupleError
                        , dtimeSys // dtimeSys
                                   ////
                        , objMST // objMST
                        , objNNTFullName // objNNTFullName
                                         //, objMSTParent // objMSTParent
                        , objProvinceCode // objProvinceCode
                        , objDistrictCode // objDistrictCode
                                          //, objNNTType // objNNTType
                        , objDLCode // objDLCode
                        , objNNTAddress // objNNTAddress
                        , objNNTMobile // objNNTMobile
                        , objNTTPhone // objNTTPhone
                        , objNNTFax // objNNTFax
                        , objPresentBy // objPresentBy
                        , objBusinessRegNo // objBusinessRegNo
                        , objNNTPosition // objNNTPosition
                        , objPresentIDNo // objPresentIDNo
                        , objPresentIDType // objPresentIDType
                        , objGovTaxID // objGovTaxID
                        , objContactName // objContactName
                        , objContactPhone // objContactPhone
                        , objContactEmail // objContactEmail
                        , objWebsite // objWebsite
                        , objCANumber // objCANumber
                        , objCAOrg // objCAOrg
                        , objCAEffDTimeUTCStart // objCAEffDTimeUTCStart
                        , objCAEffDTimeUTCEnd // objCAEffDTimeUTCEnd
                        , objPackageCode // objPackageCode
                        , objCreatedDate // objCreatedDate
                        , objAccNo // objAccNo
                        , objAccHolder // objAccHolder
                        , objBankName // objBankName
                        , objBizType // objBizType
                        , objBizFieldCode // objBizFieldCode
                        , objBizSizeCode // objBizSizeCode
                        );
                }
                ////
                //CmUtils.DataUtils.MoveDataTable(ref mdsFinal, ref dsGetData);
                #endregion

                #region // Mst_Department_CreateX:
                //DataSet dsGetData = null;
                {
                    //Mst_Department_CreateX(
                    //    strTid // strTid
                    //    , strGwUserCode // strGwUserCode
                    //    , strGwPassword // strGwPassword
                    //    , strWAUserCode // strWAUserCode
                    //    , strWAUserPassword // strWAUserPassword
                    //    , ref alParamsCoupleError // alParamsCoupleError
                    //    , dtimeSys // dtimeSys
                    //               ////
                    //    , objDepartmentCode // objDepartmentCode
                    //    , null // objDepartmentCodeParent
                    //    , objMST // objMST
                    //    , objDepartmentName // objDepartmentName                   
                    //    );
                }
                ////
                //CmUtils.DataUtils.MoveDataTable(ref mdsFinal, ref dsGetData);
                #endregion

                #region // Sys_User_CreateX:
                {
                    //Sys_User_CreateX(
                    //    strTid // strTid
                    //    , strGwUserCode // strGwUserCode
                    //    , strGwPassword // strGwPassword
                    //    , strWAUserCode // strWAUserCode
                    //    , strWAUserPassword // strWAUserPassword
                    //    , ref alParamsCoupleError // alParamsCoupleError
                    //    , dtimeSys // dtimeSys
                    //               ////
                    //    , objContactEmail // objUserCode
                    //    , objContactName // objUserName
                    //    , objUserPassword // objUserPassword
                    //    , objContactPhone // objPhoneNo
                    //    , objContactEmail // objEMail
                    //    , objMST // objMST
                    //    , objDepartmentCode // objDepartmentCode
                    //    , "" // objPosition
                    //    , TConst.Flag.Inactive // objFlagDLAdmin
                    //    , TConst.Flag.Inactive // objFlagSysAdmin
                    //    , TConst.Flag.Active // objFlagNTTAdmin
                    //                         ////
                    //    );
                }
                #endregion

                #region // MasterServer:
                //{
                //    // //
                //    DataSet dsData = new DataSet();

                //    MstSv_Inos_User_BuildX(
                //        strTid // strTid
                //        , strGwUserCode // strGwUserCode
                //        , strGwPassword // strGwPassword
                //        , strWAUserCode // strWAUserCode
                //        , strWAUserPassword // strWAUserPassword
                //        , ref alParamsCoupleError // alParamsCoupleError
                //        , dtimeSys // dtimeSys
                //                   // //
                //        , objMST // objMST
                //                 // //
                //        , out dsData // dsData
                //        );

                //    // //
                //    DataTable dt_MstSv_Inos_User = dsData.Tables["MstSv_Inos_User"].Copy();

                //    MstSv_Inos_User_AddX(
                //        strTid // strTid
                //        , strGwUserCode // strGwUserCode
                //        , strGwPassword // strGwPassword
                //        , strWAUserCode // strWAUserCode
                //        , strWAUserPassword // strWAUserPassword
                //        , ref alParamsCoupleError // alParamsCoupleError
                //        , dtimeSys // dtimeSys
                //                   // //
                //        , objMST // objMST
                //        , dt_MstSv_Inos_User.Rows[0]["Email"] // objEmail
                //        , dt_MstSv_Inos_User.Rows[0]["Name"] // objName
                //        , objUserPassword // objPassword
                //        , dt_MstSv_Inos_User.Rows[0]["Language"] // objLanguage
                //        , dt_MstSv_Inos_User.Rows[0]["TimeZone"] // objTimeZone
                //        , dt_MstSv_Inos_User.Rows[0]["FlagEmailSend"] // objFlagEmailSend
                //        , dt_MstSv_Inos_User.Rows[0]["FlagEmailActivate"] // objFlagEmailActivate
                //        , dt_MstSv_Inos_User.Rows[0]["FlagAdmin"] // objFlagAdmin
                //                                                  // //
                //        , dsData // dsData
                //        );
                //    // //
                //    Inos_AccountService_RegisterX(
                //        strTid // strTid
                //        , strGwUserCode // strGwUserCode
                //        , strGwPassword // strGwPassword
                //        , strWAUserCode // strWAUserCode
                //        , strWAUserPassword // strWAUserPassword
                //                            //, strAccessToken // strAccessToken
                //        , ref mdsFinal // mdsFinal
                //        , ref alParamsCoupleError // alParamsCoupleError
                //        , dtimeSys // dtimeSys
                //                   // //
                //        , objMST // objMST
                //        , dt_MstSv_Inos_User.Rows[0]["Email"] // objEmail
                //        , dt_MstSv_Inos_User.Rows[0]["Name"] // objName
                //        , objUserPassword // objPassword
                //        , dt_MstSv_Inos_User.Rows[0]["Language"] // objLanguage
                //        , dt_MstSv_Inos_User.Rows[0]["TimeZone"] // objTimeZone
                //                                                 // //
                //        , out dsData // dsData
                //        );

                //    // //
                //    DataTable dtUpd_MstSv_Inos_User = dsData.Tables["MstSv_Inos_User"];

                //    if (dtUpd_MstSv_Inos_User.Rows.Count > 0)
                //    {
                //        object objFt_Cols_Upd = "MstSv_Inos_User.UUID";

                //        MstSv_Inos_User_UpdateX(
                //            strTid // strTid
                //            , strGwUserCode // strGwUserCode
                //            , strGwPassword // strGwPassword
                //            , strWAUserCode // strWAUserCode
                //            , strWAUserPassword // strWAUserPassword
                //            , ref alParamsCoupleError // alParamsCoupleError
                //            , dtimeSys // dtimeSys
                //                       // //
                //            , objMST // objMST
                //            , objContactEmail // objEmail
                //            , dtUpd_MstSv_Inos_User.Rows[0]["Name"] // objName
                //            , objUserPassword // objPassword
                //            , dtUpd_MstSv_Inos_User.Rows[0]["Language"] // objLanguage
                //            , dtUpd_MstSv_Inos_User.Rows[0]["TimeZone"] // objTimeZone
                //            , dtUpd_MstSv_Inos_User.Rows[0]["UUID"] // objUUID
                //            , dtUpd_MstSv_Inos_User.Rows[0]["Id"] // objId
                //            , dtUpd_MstSv_Inos_User.Rows[0]["FlagEmailActivate"] // objFlagEmailActivate
                //            , dtUpd_MstSv_Inos_User.Rows[0]["FlagActive"] // objFlagActive
                //                                                          ////
                //            , objFt_Cols_Upd // objFt_Cols_Upd
                //            );
                //    }

                //}
                #endregion

                // Return Good:
                TDALUtils.DBUtils.CommitSafety(_cf.db);
                mdsFinal.AcceptChanges();
                return mdsFinal;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Rollback:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);

                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsFinal
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Rollback and Release resources:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);
                TDALUtils.DBUtils.ReleaseAllSemaphore(_cf.db_Sys, true);

                // Write ReturnLog:
                _cf.ProcessBizReturn_OutSide(
                    ref mdsFinal // mdsFinal
                    , strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    );
                #endregion
            }
        }
        
        private void Mst_NNT_MSTChild_CreateX(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            , DateTime dtimeSys
            //// 
            , object objMST
            , object objNNTFullName
            //, object objMSTParent
            , object objProvinceCode
            , object objDistrictCode
            //, object objNNTType
            , object objDLCode
            , object objNNTAddress
            , object objNNTMobile
            , object objNNTPhone
            , object objNNTFax
            , object objPresentBy
            , object objBusinessRegNo
            , object objNNTPosition
            , object objPresentIDNo
            , object objPresentIDType
            , object objGovTaxID
            , object objContactName
            , object objContactPhone
            , object objContactEmail
            , object objWebsite
            , object objCANumber
            , object objCAOrg
            , object objCAEffDTimeUTCStart
            , object objCAEffDTimeUTCEnd
            , object objPackageCode
            , object objCreatedDate
            , object objAccNo
            , object objAccHolder
            , object objBankName
            , object objBizType // objBizType
            , object objBizFieldCode // objBizFieldCode
            , object objBizSizeCode // objBizSizeCode
            )
        {
            #region // Temp:
            string strFunctionName = "Mst_NNT_CreateX";
            //string strErrorCodeDefault = TError.ErrHTCNM.Mnf_VIN_Get_QCX;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
                , "objMST", objMST
                , "objNNTFullName", objNNTFullName
                //, "objMSTParent", objMSTParent
                , "objProvinceCode", objProvinceCode
                , "objDistrictCode", objDistrictCode
                //, "objNNTType", objNNTType
                , "objDLCode", objDLCode
                , "objNNTAddress", objNNTAddress
                , "objNNTMobile", objNNTMobile
                , "objNNTPhone", objNNTPhone
                , "objNNTFax", objNNTFax
                , "objPresentBy", objPresentBy
                , "objBusinessRegNo", objBusinessRegNo
                , "objNNTPosition", objNNTPosition
                , "objPresentIDNo", objPresentIDNo
                , "objPresentIDType", objPresentIDType
                , "objGovTaxID", objGovTaxID
                , "objContactName", objContactName
                , "objContactPhone", objContactPhone
                , "objContactEmail", objContactEmail
                , "objWebsite", objWebsite
                , "objCANumber", objCANumber
                , "objCAOrg", objCAOrg
                , "objCAEffDTimeUTCStart", objCAEffDTimeUTCStart
                , "objCAEffDTimeUTCEnd", objCAEffDTimeUTCEnd
                , "objPackageCode", objPackageCode
                , "objCreatedDate", objCreatedDate
                , "objAccNo", objAccNo
                , "objAccHolder", objAccHolder
                , "objBankName", objBankName
                , "objBizType", objBizType
                , "objBizFieldCode", objBizFieldCode
                , "objBizSizeCode", objBizSizeCode
                });
            #endregion

            #region // Refine and Check Input:
            ////
            string strMST = TUtils.CUtils.StdParam(objMST);
            string strNNTFullName = string.Format("{0}", objNNTFullName).Trim();
            //string strMSTParent = TUtils.CUtils.StdParam(objMSTParent);
            string strProvinceCode = TUtils.CUtils.StdParam(objProvinceCode);
            string strDistrictCode = TUtils.CUtils.StdParam(objDistrictCode);
            //string strNNTType = TUtils.CUtils.StdParam(objNNTType);
            string strDLCode = TUtils.CUtils.StdParam(objDLCode);
            string strNNTAddress = string.Format("{0}", objNNTAddress).Trim();
            string strNNTMobile = string.Format("{0}", objNNTMobile).Trim();
            string strNNTPhone = string.Format("{0}", objNNTPhone).Trim();
            string strNNTFax = string.Format("{0}", objNNTFax).Trim();
            string strPresentBy = string.Format("{0}", objPresentBy).Trim();
            string strBusinessRegNo = string.Format("{0}", objBusinessRegNo).Trim();
            string strNNTPosition = string.Format("{0}", objNNTPosition).Trim();
            string strPresentIDNo = string.Format("{0}", objPresentIDNo).Trim();
            string strPresentIDType = string.Format("{0}", objPresentIDType).Trim();
            string strGovTaxID = TUtils.CUtils.StdParam(objGovTaxID);
            string strContactName = string.Format("{0}", objContactName).Trim();
            string strContactPhone = string.Format("{0}", objContactPhone).Trim();
            string strContactEmail = string.Format("{0}", objContactEmail).Trim();
            string strWebsite = string.Format("{0}", objWebsite).Trim();
            string strCANumber = string.Format("{0}", objCANumber).Trim();
            string strCAOrg = string.Format("{0}", objCAOrg).Trim();
            string strCAEffDTimeUTCStart = TUtils.CUtils.StdDTime(objCAEffDTimeUTCStart);
            string strCAEffDTimeUTCEnd = TUtils.CUtils.StdDTime(objCAEffDTimeUTCEnd);
            string strPackageCode = string.Format("{0}", objPackageCode).Trim();
            string strCreatedDate = TUtils.CUtils.StdDate(objCreatedDate);
            string strAccNo = string.Format("{0}", objAccNo).Trim();
            string strAccHolder = string.Format("{0}", objAccHolder).Trim();
            string strBankName = string.Format("{0}", objBankName).Trim();
            string strBizType = TUtils.CUtils.StdParam(objBizType);
            string strBizFieldCode = TUtils.CUtils.StdParam(objBizFieldCode);
            string strBizSizeCode = TUtils.CUtils.StdParam(objBizSizeCode);

            // drAbilityOfUser:
            //DataRow drAbilityOfUser = Sys_User_GetAbilityViewOfUser(_cf.sinf.strUserCode);
            ////
            DataTable dtDB_Sys_User = null;

            string strMST_User = null;
            string strFlagSysAdmin_User = null;
            {
                Sys_User_CheckDB(
                ref alParamsCoupleError
                , strWAUserCode // UserCode
                , TConst.Flag.Active // strFlagExistToCheck
                , TConst.Flag.Active //strFlagActiveListToCheck
                , out dtDB_Sys_User // dtDB_Sys_User
                );

                //strCreateDTimeUTC = TUtils.CUtils.StdDTime(dtDB_Invoice_TempInvoice.Rows[0]["CreateDTimeUTC"]);
                strFlagSysAdmin_User = TUtils.CUtils.StdFlag(dtDB_Sys_User.Rows[0]["FlagSysAdmin"]);

                ////
                if (!CmUtils.StringUtils.StringEqualIgnoreCase(strFlagSysAdmin_User, TConst.Flag.Active))
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.strFlagSysAdmin_User", strFlagSysAdmin_User
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Mst_NNT_MSTChild_Registry_InvalidFlagSysAdmin_User
                        , null
                        , alParamsCoupleError.ToArray()
                        );

                }
                ////
                strMST_User = TUtils.CUtils.StdParam(dtDB_Sys_User.Rows[0]["MST"]);
            }
            ////
            DataTable dtDB_Mst_NNT = null;
            {
                ////
                if (strMST == null || strMST.Length < 1)
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.strMST", strMST
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Mst_NNT_Create_InvalidMST
                        , null
                        , alParamsCoupleError.ToArray()
                        );
                }
                ////
                Mst_NNT_CheckDB(
                    ref alParamsCoupleError // alParamsCoupleError
                    , strMST // objMST
                    , TConst.Flag.No // strFlagExistToCheck
                    , "" // strFlagActiveListToCheck
                    , "" // strTCTStatusListToCheck
                    , out dtDB_Mst_NNT // dtDB_Mst_NNT
                    );

                ////
                DataTable dtDB_Mst_NNT_Parent = null;
                {
                    /////
                    Mst_NNT_CheckDB(
                        ref alParamsCoupleError // alParamsCoupleError
                        , strMST_User // objMST_User 
                        , TConst.Flag.Yes // strFlagExistToCheck
                        , TConst.Flag.Active // strFlagActiveListToCheck
                        , "" // strTCTStatusListToCheck
                        , out dtDB_Mst_NNT_Parent // dtDB_Mst_NNT_Parent
                        );
                }

                ////
                DataTable dtDB_Mst_Province = null;

                Mst_Province_CheckDB(
                    ref alParamsCoupleError // alParamsCoupleError
                    , strProvinceCode // objProvinceCode
                    , TConst.Flag.Yes // strFlagExistToCheck
                    , TConst.Flag.Active // strFlagActiveListToCheck
                    , out dtDB_Mst_Province // dtDB_Mst_Province
                    );
                ////
                DataTable dtDB_Mst_District = null;

                Mst_District_CheckDB(
                    ref alParamsCoupleError // alParamsCoupleError
                    , strProvinceCode // objProvinceCode
                    , strDistrictCode // objDistrictCode
                    , TConst.Flag.Yes // strFlagExistToCheck
                    , TConst.Flag.Active // strFlagActiveListToCheck
                    , out dtDB_Mst_District // dtDB_Mst_District
                    );
                ////
                //DataTable dtDB_Mst_NNTType = null;

                //Mst_NNTType_CheckDB(
                //    ref alParamsCoupleError // alParamsCoupleError
                //    , strNNTType // objNNTType
                //    , TConst.Flag.Yes // strFlagExistToCheck
                //    , TConst.Flag.Active // strFlagActiveListToCheck
                //    , out dtDB_Mst_NNTType // dtDB_Mst_NNTType
                //    );
                //////
                DataTable dtDB_Mst_Dealer = null;

				Mst_Dealer_CheckDB(
					ref alParamsCoupleError // alParamsCoupleError
					, strDLCode // strDLCode
					, TConst.Flag.Yes // strFlagExistToCheck
					, TConst.Flag.Active // strFlagActiveListToCheck
					, out dtDB_Mst_Dealer // dtDB_Mst_Dealer
					);
				////
				DataTable dtDB_Mst_GovTaxID = null;

                Mst_GovTaxID_CheckDB(
                    ref alParamsCoupleError // alParamsCoupleError
                    , strGovTaxID // objGovTaxID
                    , TConst.Flag.Yes // strFlagExistToCheck
                    , TConst.Flag.Active // strFlagActiveListToCheck
                    , out dtDB_Mst_GovTaxID // dtDB_Mst_GovTaxID
                    );
                ////
                if (strNNTFullName.Length < 1)
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.strNNTFullName", strNNTFullName
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Mst_NNT_Create_InvalidNNTFullName
                        , null
                        , alParamsCoupleError.ToArray()
                        );
                }
                ////
                if (strNNTAddress.Length < 1)
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.strNNTAddress", strNNTAddress
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Mst_NNT_Create_InvalidNNTAddress
                        , null
                        , alParamsCoupleError.ToArray()
                        );
                }
                ////
                if (strPresentBy.Length < 1)
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.strPresentBy", strPresentBy
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Mst_NNT_Create_InvalidPresentBy
                        , null
                        , alParamsCoupleError.ToArray()
                        );
                }
                ////
                if (strNNTPosition.Length < 1)
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.strNNTPosition", strNNTPosition
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Mst_NNT_Create_InvalidNNTPosition
                        , null
                        , alParamsCoupleError.ToArray()
                        );
                }
                ////
                if (strContactName.Length < 1)
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.strContactName", strContactName
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Mst_NNT_Create_InvalidContactName
                        , null
                        , alParamsCoupleError.ToArray()
                        );
                }
                ////
                if (strContactPhone.Length < 1)
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.strContactPhone", strContactPhone
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Mst_NNT_Create_InvalidContactPhone
                        , null
                        , alParamsCoupleError.ToArray()
                        );
                }
                ////
                if (strContactEmail.Length < 1)
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.strContactEmail", strContactEmail
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Mst_NNT_Create_InvalidContactEmail
                        , null
                        , alParamsCoupleError.ToArray()
                        );
                }
            }
            #endregion

            #region // SaveDB Mst_NNT:
            {
                // Init:
                //ArrayList alColumnEffective = new ArrayList();
                string strFN = "";
                DataRow drDB = dtDB_Mst_NNT.NewRow();
                strFN = "OrgID"; drDB[strFN] = strMST; // Tạm thời để = strOrgID
                strFN = "MST"; drDB[strFN] = strMST;
                strFN = "NNTFullName"; drDB[strFN] = strNNTFullName;
                strFN = "NetworkID"; drDB[strFN] = nNetworkID;
                strFN = "MSTParent"; drDB[strFN] = strMST_User;
                strFN = "MSTBUCode"; drDB[strFN] = "X";
                strFN = "MSTBUPattern"; drDB[strFN] = "X";
                strFN = "MSTLevel"; drDB[strFN] = 1;
                strFN = "ProvinceCode"; drDB[strFN] = strProvinceCode;
                strFN = "DistrictCode"; drDB[strFN] = strDistrictCode;
                //strFN = "NNTType"; drDB[strFN] = strNNTType;
                strFN = "DLCode"; drDB[strFN] = strDLCode;
                strFN = "NNTAddress"; drDB[strFN] = strNNTAddress;
                strFN = "NNTMobile"; drDB[strFN] = strNNTMobile;
                strFN = "NNTPhone"; drDB[strFN] = strNNTPhone;
                strFN = "NNTFax"; drDB[strFN] = strNNTFax;
                strFN = "PresentBy"; drDB[strFN] = strPresentBy;
                strFN = "BusinessRegNo"; drDB[strFN] = strBusinessRegNo;
                strFN = "NNTPosition"; drDB[strFN] = strNNTPosition;
                strFN = "PresentIDNo"; drDB[strFN] = strPresentIDNo;
                strFN = "PresentIDType"; drDB[strFN] = strPresentIDType;
                strFN = "GovTaxID"; drDB[strFN] = strGovTaxID;
                strFN = "ContactName"; drDB[strFN] = strContactName;
                strFN = "ContactPhone"; drDB[strFN] = strContactPhone;
                strFN = "ContactEmail"; drDB[strFN] = strContactEmail;
                strFN = "Website"; drDB[strFN] = strWebsite;
                strFN = "CANumber"; drDB[strFN] = strCANumber;
                strFN = "CAOrg"; drDB[strFN] = strCAOrg;
                strFN = "CAEffDTimeUTCStart"; drDB[strFN] = strCAEffDTimeUTCStart;
                strFN = "CAEffDTimeUTCEnd"; drDB[strFN] = strCAEffDTimeUTCEnd;
                strFN = "PackageCode"; drDB[strFN] = strPackageCode;
                strFN = "CreatedDate"; drDB[strFN] = strCreatedDate;
                strFN = "AccNo"; drDB[strFN] = strAccNo;
                strFN = "AccHolder"; drDB[strFN] = strAccHolder;
                strFN = "BankName"; drDB[strFN] = strBankName;
                strFN = "BizType"; drDB[strFN] = strBizType;
                strFN = "BizFieldCode"; drDB[strFN] = strBizFieldCode;
                strFN = "BizSizeCode"; drDB[strFN] = strBizSizeCode;
                strFN = "RegisterStatus"; drDB[strFN] = TConst.RegisterStatus.Pending;
                strFN = "FlagActive"; drDB[strFN] = TConst.Flag.Active;
                strFN = "TCTStatus"; drDB[strFN] = TConst.Flag.Active;
                strFN = "CreateDTimeUTC"; drDB[strFN] = dtimeSys.ToString("yyyy-MM-dd HH:mm:ss");
                strFN = "CreateBy"; drDB[strFN] = strWAUserCode;
                strFN = "LogLUDTimeUTC"; drDB[strFN] = dtimeSys.ToString("yyyy-MM-dd HH:mm:ss");
                strFN = "LogLUBy"; drDB[strFN] = strWAUserCode;
                dtDB_Mst_NNT.Rows.Add(drDB);

                // Save:
                _cf.db.SaveData(
                    "Mst_NNT" // strTableName
                    , dtDB_Mst_NNT // dtData
                                   //, alColumnEffective.ToArray()
                    );
            }
            #endregion

            #region // Post Save:
            {
                Mst_NNT_UpdBU();
            }
            #endregion

            #region // Check:
            {
                string sqlPostCheck = CmUtils.StringUtils.Replace(@"
                        -----
                        select 
	                        count(t.MST) TotalQtyNetWork
                        from Mst_NNT t --//[mylock]
                        where(1=1)
	                        and t.MSTLevel = '1'
	                        and (t.MST != 'ALL' and t.MSTParent is null)
                    
                ");
                DataTable dsPostCheck = _cf.db.ExecQuery(sqlPostCheck).Tables[0];
                ////
                if (dsPostCheck.Rows.Count > 0)
                {
                    Int64 nTotalQtyNetWork = Convert.ToInt64(dsPostCheck.Rows[0]["TotalQtyNetWork"]);
                    if (nTotalQtyNetWork > 1)
                    {
                        alParamsCoupleError.AddRange(new object[]{
                            "Check.TotalQtyNetWork", nTotalQtyNetWork
                            , "Check.TotalQtyNetWork", nTotalQtyNetWork
                            });
                        throw CmUtils.CMyException.Raise(
                            TError.ErridnInventory.Mst_NNT_Create_InvalidTotalNetworkID
                            , null
                            , alParamsCoupleError.ToArray()
                            );
                    }
                }
                ////
            }
            #endregion
        }

        public DataSet WAS_RptSv_Mst_NNT_Update_New20190822(
            ref ArrayList alParamsCoupleError
            , RQ_Mst_NNT objRQ_Mst_NNT
            ////
            , out RT_Mst_NNT objRT_Mst_NNT
            )
        {
            #region // Temp:
            string strTid = objRQ_Mst_NNT.Tid;
            objRT_Mst_NNT = new RT_Mst_NNT();
            DataSet mdsResult = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            DateTime dtimeSys = DateTime.UtcNow;
            //DataSet mdsExec = null;
            //DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(objRQ_Mst_NNT.Tid);
            //int nTidSeq = 0;
            //bool bNeedTransaction = true;
            string strFunctionName = "WAS_RptSv_Mst_NNT_Update";
            string strErrorCodeDefault = TError.ErridnInventory.WAS_RptSv_Mst_NNT_Update;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
				});
            #endregion

            try
            {
                #region // Init:
                #endregion

                #region // Refine and Check Input:
                List<Mst_NNT> lst_Mst_NNT = new List<Mst_NNT>();
                #endregion

                #region // Mst_NNT_Update:
                mdsResult = RptSv_Mst_NNT_Update_New20190822(
                    objRQ_Mst_NNT.Tid // strTid
                    , objRQ_Mst_NNT.GwUserCode // strGwUserCode
                    , objRQ_Mst_NNT.GwPassword // strGwPassword
                    , objRQ_Mst_NNT.WAUserCode // strUserCode
                    , objRQ_Mst_NNT.WAUserPassword // strUserPassword
                    , ref alParamsCoupleError // alParamsCoupleError
                                              ////
                    , objRQ_Mst_NNT.Mst_NNT.MST // objMST
                    , objRQ_Mst_NNT.Mst_NNT.NNTFullName // objFullName
                    , objRQ_Mst_NNT.Mst_NNT.NNTAddress // objAddress
                    , objRQ_Mst_NNT.Mst_NNT.NNTMobile // objMobile
                    , objRQ_Mst_NNT.Mst_NNT.NNTPhone // objPhone
                    , objRQ_Mst_NNT.Mst_NNT.NNTFax // objFax
                    , objRQ_Mst_NNT.Mst_NNT.PresentBy // objPresentBy
                    , objRQ_Mst_NNT.Mst_NNT.BusinessRegNo // objBusinessRegNo
                    , objRQ_Mst_NNT.Mst_NNT.NNTPosition // objPosition
                    , objRQ_Mst_NNT.Mst_NNT.PresentIDNo // objPresentIDNo
                    , objRQ_Mst_NNT.Mst_NNT.PresentIDType // objPresentIDType
                                                          ////
                    , objRQ_Mst_NNT.Mst_NNT.GovTaxID // objGovTaxID
                    , objRQ_Mst_NNT.Mst_NNT.ProvinceCode // objProvinceCode
                    , objRQ_Mst_NNT.Mst_NNT.DistrictCode // objDistrictCode
                    , objRQ_Mst_NNT.Mst_NNT.BizType // objBizType
                    , objRQ_Mst_NNT.Mst_NNT.BizFieldCode // objBizFieldCode
                    , objRQ_Mst_NNT.Mst_NNT.BizSizeCode // objBizSizeCode
                                                        ////
                    , objRQ_Mst_NNT.Mst_NNT.ContactName // objContactName
                    , objRQ_Mst_NNT.Mst_NNT.ContactPhone // objContactPhone
                    , objRQ_Mst_NNT.Mst_NNT.ContactEmail // objContactEmail
                    , objRQ_Mst_NNT.Mst_NNT.Website // objWebsite
                    , objRQ_Mst_NNT.Mst_NNT.CANumber // objCANumber
                    , objRQ_Mst_NNT.Mst_NNT.CAOrg // objCAOrg
                    , objRQ_Mst_NNT.Mst_NNT.CAEffDTimeUTCStart // objCAEffDTimeUTCStart
                    , objRQ_Mst_NNT.Mst_NNT.CAEffDTimeUTCEnd // objCAEffDTimeUTCEnd
                    , objRQ_Mst_NNT.Mst_NNT.PackageCode // objPackageCode
                    , objRQ_Mst_NNT.Mst_NNT.CreatedDate // objCreatedDate
                    , objRQ_Mst_NNT.Mst_NNT.AccNo // objAccNo
                    , objRQ_Mst_NNT.Mst_NNT.AccHolder // objAccHolder
                    , objRQ_Mst_NNT.Mst_NNT.BankName // objBankName
                    , objRQ_Mst_NNT.Mst_NNT.TCTStatus // objTCTStatus
                    , objRQ_Mst_NNT.Mst_NNT.FlagActive // objFlagActive
                                                       ////
                    , objRQ_Mst_NNT.Ft_Cols_Upd // Ft_Cols_Upd
                    );
                #endregion

                // Return Good:
                return mdsResult;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsResult
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Write ReturnLog:
                //_cf.ProcessBizReturn(
                //	ref mdsResult // mdsFinal
                //	, strTid // strTid
                //	, strFunctionName // strFunctionName
                //	);
                #endregion
            }
        }

		public DataSet WAS_RptSv_Mst_NNT_Update_New20200208(
			ref ArrayList alParamsCoupleError
			, RQ_Mst_NNT objRQ_Mst_NNT
			////
			, out RT_Mst_NNT objRT_Mst_NNT
			)
		{
			#region // Temp:
			string strTid = objRQ_Mst_NNT.Tid;
			objRT_Mst_NNT = new RT_Mst_NNT();
			DataSet mdsResult = CmUtils.CMyDataSet.NewMyDataSet(strTid);
			DateTime dtimeSys = DateTime.UtcNow;
			//DataSet mdsExec = null;
			//DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(objRQ_Mst_NNT.Tid);
			//int nTidSeq = 0;
			//bool bNeedTransaction = true;
			string strFunctionName = "WAS_RptSv_Mst_NNT_Update";
			string strErrorCodeDefault = TError.ErridnInventory.WAS_RptSv_Mst_NNT_Update;
			alParamsCoupleError.AddRange(new object[]{
				"strFunctionName", strFunctionName
				, "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
				});
			#endregion

			try
			{
				#region // Init:
				#endregion

				#region // Refine and Check Input:
				List<Mst_NNT> lst_Mst_NNT = new List<Mst_NNT>();
				#endregion

				#region // Mst_NNT_Update:
				mdsResult = RptSv_Mst_NNT_Update_New20200208(
					objRQ_Mst_NNT.Tid // strTid
					, objRQ_Mst_NNT.GwUserCode // strGwUserCode
					, objRQ_Mst_NNT.GwPassword // strGwPassword
					, objRQ_Mst_NNT.WAUserCode // strUserCode
					, objRQ_Mst_NNT.WAUserPassword // strUserPassword
					, ref alParamsCoupleError // alParamsCoupleError
											  ////
					, objRQ_Mst_NNT.Mst_NNT.MST // objMST
					, objRQ_Mst_NNT.Mst_NNT.NNTFullName // objFullName
					, objRQ_Mst_NNT.Mst_NNT.NNTAddress // objAddress
					, objRQ_Mst_NNT.Mst_NNT.NNTMobile // objMobile
					, objRQ_Mst_NNT.Mst_NNT.NNTPhone // objPhone
					, objRQ_Mst_NNT.Mst_NNT.NNTFax // objFax
					, objRQ_Mst_NNT.Mst_NNT.PresentBy // objPresentBy
					, objRQ_Mst_NNT.Mst_NNT.BusinessRegNo // objBusinessRegNo
					, objRQ_Mst_NNT.Mst_NNT.NNTPosition // objPosition
					, objRQ_Mst_NNT.Mst_NNT.PresentIDNo // objPresentIDNo
					, objRQ_Mst_NNT.Mst_NNT.PresentIDType // objPresentIDType
														  ////
					, objRQ_Mst_NNT.Mst_NNT.GovTaxID // objGovTaxID
					, objRQ_Mst_NNT.Mst_NNT.ProvinceCode // objProvinceCode
					, objRQ_Mst_NNT.Mst_NNT.DistrictCode // objDistrictCode
					, objRQ_Mst_NNT.Mst_NNT.BizType // objBizType
					, objRQ_Mst_NNT.Mst_NNT.BizFieldCode // objBizFieldCode
					, objRQ_Mst_NNT.Mst_NNT.BizSizeCode // objBizSizeCode
														////
					, objRQ_Mst_NNT.Mst_NNT.ContactName // objContactName
					, objRQ_Mst_NNT.Mst_NNT.ContactPhone // objContactPhone
					, objRQ_Mst_NNT.Mst_NNT.ContactEmail // objContactEmail
					, objRQ_Mst_NNT.Mst_NNT.Website // objWebsite
					, objRQ_Mst_NNT.Mst_NNT.CANumber // objCANumber
					, objRQ_Mst_NNT.Mst_NNT.CAOrg // objCAOrg
					, objRQ_Mst_NNT.Mst_NNT.CAEffDTimeUTCStart // objCAEffDTimeUTCStart
					, objRQ_Mst_NNT.Mst_NNT.CAEffDTimeUTCEnd // objCAEffDTimeUTCEnd
					, objRQ_Mst_NNT.Mst_NNT.PackageCode // objPackageCode
					, objRQ_Mst_NNT.Mst_NNT.CreatedDate // objCreatedDate
					, objRQ_Mst_NNT.Mst_NNT.AccNo // objAccNo
					, objRQ_Mst_NNT.Mst_NNT.AccHolder // objAccHolder
					, objRQ_Mst_NNT.Mst_NNT.BankName // objBankName
					, objRQ_Mst_NNT.Mst_NNT.TCTStatus // objTCTStatus
					, objRQ_Mst_NNT.Mst_NNT.DealerType // objDealerType
                    , objRQ_Mst_NNT.Mst_NNT.AreaCode // objAreaCode
                    , objRQ_Mst_NNT.Mst_NNT.OrgID_MA // objOrgID_MA
                    , objRQ_Mst_NNT.Mst_NNT.FlagActive // objFlagActive
													   ////
					, objRQ_Mst_NNT.Ft_Cols_Upd // Ft_Cols_Upd
					);
				#endregion

				// Return Good:
				return mdsResult;
			}
			catch (Exception exc)
			{
				#region // Catch of try:
				// Return Bad:
				return TUtils.CProcessExc.Process(
					ref mdsResult
					, exc
					, strErrorCodeDefault
					, alParamsCoupleError.ToArray()
					);
				#endregion
			}
			finally
			{
				#region // Finally of try:
				// Write ReturnLog:
				//_cf.ProcessBizReturn(
				//	ref mdsResult // mdsFinal
				//	, strTid // strTid
				//	, strFunctionName // strFunctionName
				//	);
				#endregion
			}
		}

		public DataSet RptSv_Mst_NNT_Update_New20200208(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            ////
            , object objMST
            , object objNNTFullName
            , object objNNTAddress
            , object objNNTMobile
            , object objNNTPhone
            , object objNNTFax
            , object objPresentBy
            , object objBusinessRegNo
            , object objNNTPosition
            , object objPresentIDNo
            , object objPresentIDType
            ////
            , object objGovTaxID
            , object objProvinceCode
            , object objDistrictCode
            , object objBizType // objBizType
            , object objBizFieldCode // objBizFieldCode
            , object objBizSizeCode // objBizSizeCode
                                    ////
            , object objContactName
            , object objContactPhone
            , object objContactEmail
            , object objWebsite
            , object objCANumber
            , object objCAOrg
            , object objCAEffDTimeUTCStart
            , object objCAEffDTimeUTCEnd
            , object objPackageCode
            , object objCreatedDate
            , object objAccNo
            , object objAccHolder
            , object objBankName
            , object objTCTStatus
			, object objDealerType
            , object objAreaCode
            , object objOrgID_MA
            , object objFlagActive
            ////
            , object objFt_Cols_Upd
            )
        {
            #region // Temp:
            DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            //int nTidSeq = 0;
            DateTime dtimeSys = DateTime.UtcNow;
            string strFunctionName = "RptSv_Mst_NNT_Update";
            string strErrorCodeDefault = TError.ErridnInventory.RptSv_Mst_NNT_Update;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
			    ////
                , "objMST", objMST
                , "objNNTFullName", objNNTFullName
                , "objNNTAddress", objNNTAddress
                , "objNNTMobile", objNNTMobile
                , "objNNTPhone", objNNTPhone
                , "objNNTFax", objNNTFax
                , "objPresentBy", objPresentBy
                , "objBusinessRegNo", objBusinessRegNo
                , "objNNTPosition", objNNTPosition
                , "objPresentIDNo", objPresentIDNo
                , "objPresentIDType", objPresentIDType
                ////
                , "objGovTaxID", objGovTaxID
                , "objProvinceCode", objProvinceCode
                , "objDistrictCode", objDistrictCode
                , "objBizType", objBizType
                , "objBizFieldCode", objBizFieldCode
                , "objBizSizeCode", objBizSizeCode
                ////
                , "objContactName", objContactName
                , "objContactPhone", objContactPhone
                , "objContactEmail", objContactEmail
                , "objWebsite", objWebsite
                , "objCANumber", objCANumber
                , "objCAOrg", objCAOrg
                , "objCAEffDTimeUTCStart", objCAEffDTimeUTCStart
                , "objCAEffDTimeUTCEnd", objCAEffDTimeUTCEnd
                , "objPackageCode", objPackageCode
                , "objCreatedDate", objCreatedDate
                , "objAccNo", objAccNo
                , "objAccHolder", objAccHolder
                , "objBankName", objBankName
                , "objTCTStatus", objTCTStatus
                , "objFlagActive", objFlagActive
                ////
                , "objFt_Cols_Upd", objFt_Cols_Upd
                });
            #endregion

            try
            {
                #region // Init:
                //_cf.db.LogUserId = _cf.sinf.strUserCode;
                _cf.db.BeginTransaction();

                // Write RequestLog:
                _cf.ProcessBizReq_OutSide(
                    strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    , alParamsCoupleError // alParamsCoupleError
                    );

                // Sys_User_CheckAuthentication:
                //RptSv_Sys_User_CheckAuthentication(
                //    ref alParamsCoupleError
                //    , strWAUserCode
                //    , strWAUserPassword
                //    );

                // Check Access/Deny:
                //Sys_Access_CheckDenyV30(
                //    ref alParamsCoupleError
                //    , strWAUserCode
                //    , strFunctionName
                    //);
                #endregion

                #region // Mst_NNT_UpdateX:
                //DataSet dsGetData = null;
                {
                    Mst_NNT_UpdateX_New20200208(
                        strTid // strTid
                        , strGwUserCode // strGwUserCode
                        , strGwPassword // strGwPassword
                        , strWAUserCode // strWAUserCode
                        , strWAUserPassword // strWAUserPassword
                        , ref alParamsCoupleError // alParamsCoupleError
                        , dtimeSys // dtimeSys
                                   ////
                        , objMST // objMST
                        , objNNTFullName // objFullName
                        , objNNTAddress // objAddress
                        , objNNTMobile // objMobile
                        , objNNTPhone // objPhone
                        , objNNTFax // objFax
                        , objPresentBy // objPresentBy
                        , objBusinessRegNo // objBusinessRegNo
                        , objNNTPosition // objPosition
                        , objPresentIDNo // objPresentIDNo
                        , objPresentIDType // objPresentIDType
                                           ////
                        , objGovTaxID // objGovTaxID
                        , objProvinceCode // objProvinceCode
                        , objDistrictCode // objDistrictCode
                        , objBizType // objBizType
                        , objBizFieldCode // objBizFieldCode
                        , objBizSizeCode // objBizSizeCode
                                         ////
                        , objContactName // objContactName
                        , objContactPhone // objContactPhone
                        , objContactEmail // objContactEmail
                        , objWebsite // objWebsite
                        , objCANumber // objCANumber
                        , objCAOrg // objCAOrg
                        , objCAEffDTimeUTCStart // objCAEffDTimeUTCEnd
                        , objCAEffDTimeUTCEnd // objCAEffDTimeUTCEnd
                        , objPackageCode // objPackageCode
                        , objCreatedDate // objCreatedDate
                        , objAccNo // objAccNo
                        , objAccHolder // objAccHolder
                        , objBankName // objBankName
                        , objTCTStatus // objTCTStatus
						, objDealerType // objDealerType
                        , objAreaCode // objAreaCode
                        , objOrgID_MA // objOrgID_MA
                        , objFlagActive
                        /////
                        , objFt_Cols_Upd // objFt_Cols_Upd
                        );
                }
                ////
                //CmUtils.DataUtils.MoveDataTable(ref mdsFinal, ref dsGetData);
                #endregion

                // Return Good:
                TDALUtils.DBUtils.CommitSafety(_cf.db);
                mdsFinal.AcceptChanges();
                return mdsFinal;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Rollback:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);

                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsFinal
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Rollback and Release resources:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);
                TDALUtils.DBUtils.ReleaseAllSemaphore(_cf.db_Sys, true);

                // Write ReturnLog:
                _cf.ProcessBizReturn_OutSide(
                    ref mdsFinal // mdsFinal
                    , strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    );
                #endregion
            }
        }

		public DataSet RptSv_Mst_NNT_Update_New20190822(
			string strTid
			, string strGwUserCode
			, string strGwPassword
			, string strWAUserCode
			, string strWAUserPassword
			, ref ArrayList alParamsCoupleError
			////
			, object objMST
			, object objNNTFullName
			, object objNNTAddress
			, object objNNTMobile
			, object objNNTPhone
			, object objNNTFax
			, object objPresentBy
			, object objBusinessRegNo
			, object objNNTPosition
			, object objPresentIDNo
			, object objPresentIDType
			////
			, object objGovTaxID
			, object objProvinceCode
			, object objDistrictCode
			, object objBizType // objBizType
			, object objBizFieldCode // objBizFieldCode
			, object objBizSizeCode // objBizSizeCode
									////
			, object objContactName
			, object objContactPhone
			, object objContactEmail
			, object objWebsite
			, object objCANumber
			, object objCAOrg
			, object objCAEffDTimeUTCStart
			, object objCAEffDTimeUTCEnd
			, object objPackageCode
			, object objCreatedDate
			, object objAccNo
			, object objAccHolder
			, object objBankName
			, object objTCTStatus
			, object objFlagActive
			////
			, object objFt_Cols_Upd
			)
		{
			#region // Temp:
			DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
			//int nTidSeq = 0;
			DateTime dtimeSys = DateTime.UtcNow;
			string strFunctionName = "RptSv_Mst_NNT_Update";
			string strErrorCodeDefault = TError.ErridnInventory.RptSv_Mst_NNT_Update;
			alParamsCoupleError.AddRange(new object[]{
				"strFunctionName", strFunctionName
				, "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
			    ////
                , "objMST", objMST
				, "objNNTFullName", objNNTFullName
				, "objNNTAddress", objNNTAddress
				, "objNNTMobile", objNNTMobile
				, "objNNTPhone", objNNTPhone
				, "objNNTFax", objNNTFax
				, "objPresentBy", objPresentBy
				, "objBusinessRegNo", objBusinessRegNo
				, "objNNTPosition", objNNTPosition
				, "objPresentIDNo", objPresentIDNo
				, "objPresentIDType", objPresentIDType
                ////
                , "objGovTaxID", objGovTaxID
				, "objProvinceCode", objProvinceCode
				, "objDistrictCode", objDistrictCode
				, "objBizType", objBizType
				, "objBizFieldCode", objBizFieldCode
				, "objBizSizeCode", objBizSizeCode
                ////
                , "objContactName", objContactName
				, "objContactPhone", objContactPhone
				, "objContactEmail", objContactEmail
				, "objWebsite", objWebsite
				, "objCANumber", objCANumber
				, "objCAOrg", objCAOrg
				, "objCAEffDTimeUTCStart", objCAEffDTimeUTCStart
				, "objCAEffDTimeUTCEnd", objCAEffDTimeUTCEnd
				, "objPackageCode", objPackageCode
				, "objCreatedDate", objCreatedDate
				, "objAccNo", objAccNo
				, "objAccHolder", objAccHolder
				, "objBankName", objBankName
				, "objTCTStatus", objTCTStatus
				, "objFlagActive", objFlagActive
                ////
                , "objFt_Cols_Upd", objFt_Cols_Upd
				});
			#endregion

			try
			{
				#region // Init:
				//_cf.db.LogUserId = _cf.sinf.strUserCode;
				_cf.db.BeginTransaction();

				// Write RequestLog:
				_cf.ProcessBizReq_OutSide(
					strTid // strTid
					, strGwUserCode // strGwUserCode
					, strGwPassword // strGwPassword
					, strWAUserCode // objUserCode
					, strFunctionName // strFunctionName
					, alParamsCoupleError // alParamsCoupleError
					);

				// Sys_User_CheckAuthentication:
				//RptSv_Sys_User_CheckAuthentication(
				//	ref alParamsCoupleError
				//	, strWAUserCode
				//	, strWAUserPassword
				//	);

				// Check Access/Deny:
				//Sys_Access_CheckDenyV30(
				//    ref alParamsCoupleError
				//    , strWAUserCode
				//    , strFunctionName
				//);
				#endregion

				#region // Mst_NNT_UpdateX:
				//DataSet dsGetData = null;
				{
					Mst_NNT_UpdateX_New20190822(
						strTid // strTid
						, strGwUserCode // strGwUserCode
						, strGwPassword // strGwPassword
						, strWAUserCode // strWAUserCode
						, strWAUserPassword // strWAUserPassword
						, ref alParamsCoupleError // alParamsCoupleError
						, dtimeSys // dtimeSys
								   ////
						, objMST // objMST
						, objNNTFullName // objFullName
						, objNNTAddress // objAddress
						, objNNTMobile // objMobile
						, objNNTPhone // objPhone
						, objNNTFax // objFax
						, objPresentBy // objPresentBy
						, objBusinessRegNo // objBusinessRegNo
						, objNNTPosition // objPosition
						, objPresentIDNo // objPresentIDNo
						, objPresentIDType // objPresentIDType
										   ////
						, objGovTaxID // objGovTaxID
						, objProvinceCode // objProvinceCode
						, objDistrictCode // objDistrictCode
						, objBizType // objBizType
						, objBizFieldCode // objBizFieldCode
						, objBizSizeCode // objBizSizeCode
										 ////
						, objContactName // objContactName
						, objContactPhone // objContactPhone
						, objContactEmail // objContactEmail
						, objWebsite // objWebsite
						, objCANumber // objCANumber
						, objCAOrg // objCAOrg
						, objCAEffDTimeUTCStart // objCAEffDTimeUTCEnd
						, objCAEffDTimeUTCEnd // objCAEffDTimeUTCEnd
						, objPackageCode // objPackageCode
						, objCreatedDate // objCreatedDate
						, objAccNo // objAccNo
						, objAccHolder // objAccHolder
						, objBankName // objBankName
						, objTCTStatus // objTCTStatus
						, objFlagActive
						/////
						, objFt_Cols_Upd // objFt_Cols_Upd
						);
				}
				////
				//CmUtils.DataUtils.MoveDataTable(ref mdsFinal, ref dsGetData);
				#endregion

				// Return Good:
				TDALUtils.DBUtils.CommitSafety(_cf.db);
				mdsFinal.AcceptChanges();
				return mdsFinal;
			}
			catch (Exception exc)
			{
				#region // Catch of try:
				// Rollback:
				TDALUtils.DBUtils.RollbackSafety(_cf.db);

				// Return Bad:
				return TUtils.CProcessExc.Process(
					ref mdsFinal
					, exc
					, strErrorCodeDefault
					, alParamsCoupleError.ToArray()
					);
				#endregion
			}
			finally
			{
				#region // Finally of try:
				// Rollback and Release resources:
				TDALUtils.DBUtils.RollbackSafety(_cf.db);
				TDALUtils.DBUtils.ReleaseAllSemaphore(_cf.db_Sys, true);

				// Write ReturnLog:
				_cf.ProcessBizReturn_OutSide(
					ref mdsFinal // mdsFinal
					, strTid // strTid
					, strGwUserCode // strGwUserCode
					, strGwPassword // strGwPassword
					, strWAUserCode // objUserCode
					, strFunctionName // strFunctionName
					);
				#endregion
			}
		}

		public DataSet WAS_Mst_NNT_Update_New20190822(
            ref ArrayList alParamsCoupleError
            , RQ_Mst_NNT objRQ_Mst_NNT
            ////
            , out RT_Mst_NNT objRT_Mst_NNT
            )
        {
            #region // Temp:
            string strTid = objRQ_Mst_NNT.Tid;
            objRT_Mst_NNT = new RT_Mst_NNT();
            DataSet mdsResult = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            DateTime dtimeSys = DateTime.UtcNow;
            //DataSet mdsExec = null;
            //DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(objRQ_Mst_NNT.Tid);
            //int nTidSeq = 0;
            //bool bNeedTransaction = true;
            string strFunctionName = "WAS_Mst_NNT_Update";
            string strErrorCodeDefault = TError.ErridnInventory.WAS_Mst_NNT_Update;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
				});
            #endregion

            try
            {
                #region // Init:
                #endregion

                #region // Refine and Check Input:
                List<Mst_NNT> lst_Mst_NNT = new List<Mst_NNT>();
                #endregion

                #region // Mst_NNT_Update:
                mdsResult = Mst_NNT_Update_New20200208(
                    objRQ_Mst_NNT.Tid // strTid
                    , objRQ_Mst_NNT.GwUserCode // strGwUserCode
                    , objRQ_Mst_NNT.GwPassword // strGwPassword
                    , objRQ_Mst_NNT.WAUserCode // strUserCode
                    , objRQ_Mst_NNT.WAUserPassword // strUserPassword
                    , ref alParamsCoupleError // alParamsCoupleError
                                              ////
                    , objRQ_Mst_NNT.Mst_NNT.MST // objMST
                    , objRQ_Mst_NNT.Mst_NNT.NNTFullName // objFullName
                    , objRQ_Mst_NNT.Mst_NNT.NNTAddress // objAddress
                    , objRQ_Mst_NNT.Mst_NNT.NNTMobile // objMobile
                    , objRQ_Mst_NNT.Mst_NNT.NNTPhone // objPhone
                    , objRQ_Mst_NNT.Mst_NNT.NNTFax // objFax
                    , objRQ_Mst_NNT.Mst_NNT.PresentBy // objPresentBy
                    , objRQ_Mst_NNT.Mst_NNT.BusinessRegNo // objBusinessRegNo
                    , objRQ_Mst_NNT.Mst_NNT.NNTPosition // objPosition
                    , objRQ_Mst_NNT.Mst_NNT.PresentIDNo // objPresentIDNo
                    , objRQ_Mst_NNT.Mst_NNT.PresentIDType // objPresentIDType
                                                          ////
                    , objRQ_Mst_NNT.Mst_NNT.GovTaxID // objGovTaxID
                    , objRQ_Mst_NNT.Mst_NNT.ProvinceCode // objProvinceCode
                    , objRQ_Mst_NNT.Mst_NNT.DistrictCode // objDistrictCode
                    , objRQ_Mst_NNT.Mst_NNT.BizType // objBizType
                    , objRQ_Mst_NNT.Mst_NNT.BizFieldCode // objBizFieldCode
                    , objRQ_Mst_NNT.Mst_NNT.BizSizeCode // objBizSizeCode
                                                        ////
                    , objRQ_Mst_NNT.Mst_NNT.ContactName // objContactName
                    , objRQ_Mst_NNT.Mst_NNT.ContactPhone // objContactPhone
                    , objRQ_Mst_NNT.Mst_NNT.ContactEmail // objContactEmail
                    , objRQ_Mst_NNT.Mst_NNT.Website // objWebsite
                    , objRQ_Mst_NNT.Mst_NNT.CANumber // objCANumber
                    , objRQ_Mst_NNT.Mst_NNT.CAOrg // objCAOrg
                    , objRQ_Mst_NNT.Mst_NNT.CAEffDTimeUTCStart // objCAEffDTimeUTCStart
                    , objRQ_Mst_NNT.Mst_NNT.CAEffDTimeUTCEnd // objCAEffDTimeUTCEnd
                    , objRQ_Mst_NNT.Mst_NNT.PackageCode // objPackageCode
                    , objRQ_Mst_NNT.Mst_NNT.CreatedDate // objCreatedDate
                    , objRQ_Mst_NNT.Mst_NNT.AccNo // objAccNo
                    , objRQ_Mst_NNT.Mst_NNT.AccHolder // objAccHolder
                    , objRQ_Mst_NNT.Mst_NNT.BankName // objBankName
                    , objRQ_Mst_NNT.Mst_NNT.TCTStatus // objTCTStatus
                    , objRQ_Mst_NNT.Mst_NNT.DealerType // objDealerType
                    , objRQ_Mst_NNT.Mst_NNT.AreaCode // objAreaCode
                    , objRQ_Mst_NNT.Mst_NNT.OrgID_MA // objOrgID_MA
                    , objRQ_Mst_NNT.Mst_NNT.FlagActive // objFlagActive
                                                       ////
                    , objRQ_Mst_NNT.Ft_Cols_Upd // Ft_Cols_Upd
                    );
                #endregion

                // Return Good:
                return mdsResult;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsResult
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Write ReturnLog:
                //_cf.ProcessBizReturn(
                //	ref mdsResult // mdsFinal
                //	, strTid // strTid
                //	, strFunctionName // strFunctionName
                //	);
                #endregion
            }
        }

        public DataSet WAS_Mst_NNT_Update_New20200110(
            ref ArrayList alParamsCoupleError
            , RQ_Mst_NNT objRQ_Mst_NNT
            ////
            , out RT_Mst_NNT objRT_Mst_NNT
            )
        {
            #region // Temp:
            string strTid = objRQ_Mst_NNT.Tid;
            objRT_Mst_NNT = new RT_Mst_NNT();
            DataSet mdsResult = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            DateTime dtimeSys = DateTime.UtcNow;
            //DataSet mdsExec = null;
            //DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(objRQ_Mst_NNT.Tid);
            //int nTidSeq = 0;
            //bool bNeedTransaction = true;
            string strFunctionName = "WAS_Mst_NNT_Update";
            string strErrorCodeDefault = TError.ErridnInventory.WAS_Mst_NNT_Update;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
				});
            #endregion

            try
            {
                #region // Init:
                #endregion

                #region // Refine and Check Input:
                List<Mst_NNT> lst_Mst_NNT = new List<Mst_NNT>();
                #endregion

                #region // Mst_NNT_Update:
                mdsResult = Mst_NNT_Update_New20190822(
                    objRQ_Mst_NNT.Tid // strTid
                    , objRQ_Mst_NNT.GwUserCode // strGwUserCode
                    , objRQ_Mst_NNT.GwPassword // strGwPassword
                    , objRQ_Mst_NNT.WAUserCode // strUserCode
                    , objRQ_Mst_NNT.WAUserPassword // strUserPassword
                    , ref alParamsCoupleError // alParamsCoupleError
                                              ////
                    , objRQ_Mst_NNT.Mst_NNT.MST // objMST
                    , objRQ_Mst_NNT.Mst_NNT.NNTFullName // objFullName
                    , objRQ_Mst_NNT.Mst_NNT.NNTAddress // objAddress
                    , objRQ_Mst_NNT.Mst_NNT.NNTMobile // objMobile
                    , objRQ_Mst_NNT.Mst_NNT.NNTPhone // objPhone
                    , objRQ_Mst_NNT.Mst_NNT.NNTFax // objFax
                    , objRQ_Mst_NNT.Mst_NNT.PresentBy // objPresentBy
                    , objRQ_Mst_NNT.Mst_NNT.BusinessRegNo // objBusinessRegNo
                    , objRQ_Mst_NNT.Mst_NNT.NNTPosition // objPosition
                    , objRQ_Mst_NNT.Mst_NNT.PresentIDNo // objPresentIDNo
                    , objRQ_Mst_NNT.Mst_NNT.PresentIDType // objPresentIDType
                                                          ////
                    , objRQ_Mst_NNT.Mst_NNT.GovTaxID // objGovTaxID
                    , objRQ_Mst_NNT.Mst_NNT.ProvinceCode // objProvinceCode
                    , objRQ_Mst_NNT.Mst_NNT.DistrictCode // objDistrictCode
                    , objRQ_Mst_NNT.Mst_NNT.BizType // objBizType
                    , objRQ_Mst_NNT.Mst_NNT.BizFieldCode // objBizFieldCode
                    , objRQ_Mst_NNT.Mst_NNT.BizSizeCode // objBizSizeCode
                                                        ////
                    , objRQ_Mst_NNT.Mst_NNT.ContactName // objContactName
                    , objRQ_Mst_NNT.Mst_NNT.ContactPhone // objContactPhone
                    , objRQ_Mst_NNT.Mst_NNT.ContactEmail // objContactEmail
                    , objRQ_Mst_NNT.Mst_NNT.Website // objWebsite
                    , objRQ_Mst_NNT.Mst_NNT.CANumber // objCANumber
                    , objRQ_Mst_NNT.Mst_NNT.CAOrg // objCAOrg
                    , objRQ_Mst_NNT.Mst_NNT.CAEffDTimeUTCStart // objCAEffDTimeUTCStart
                    , objRQ_Mst_NNT.Mst_NNT.CAEffDTimeUTCEnd // objCAEffDTimeUTCEnd
                    , objRQ_Mst_NNT.Mst_NNT.PackageCode // objPackageCode
                    , objRQ_Mst_NNT.Mst_NNT.CreatedDate // objCreatedDate
                    , objRQ_Mst_NNT.Mst_NNT.AccNo // objAccNo
                    , objRQ_Mst_NNT.Mst_NNT.AccHolder // objAccHolder
                    , objRQ_Mst_NNT.Mst_NNT.BankName // objBankName
                    , objRQ_Mst_NNT.Mst_NNT.TCTStatus // objTCTStatus
                    , objRQ_Mst_NNT.Mst_NNT.FlagActive // objFlagActive
                                                       ////
                    , objRQ_Mst_NNT.Ft_Cols_Upd // Ft_Cols_Upd
                    );
                #endregion

                // Return Good:
                return mdsResult;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsResult
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Write ReturnLog:
                //_cf.ProcessBizReturn(
                //	ref mdsResult // mdsFinal
                //	, strTid // strTid
                //	, strFunctionName // strFunctionName
                //	);
                #endregion
            }
        }
        public DataSet Mst_NNT_Update_New20190822(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            ////
            , object objMST
            , object objNNTFullName
            , object objNNTAddress
            , object objNNTMobile
            , object objNNTPhone
            , object objNNTFax
            , object objPresentBy
            , object objBusinessRegNo
            , object objNNTPosition
            , object objPresentIDNo
            , object objPresentIDType
            ////
            , object objGovTaxID
            , object objProvinceCode
            , object objDistrictCode
            , object objBizType // objBizType
            , object objBizFieldCode // objBizFieldCode
            , object objBizSizeCode // objBizSizeCode
                                    ////
            , object objContactName
            , object objContactPhone
            , object objContactEmail
            , object objWebsite
            , object objCANumber
            , object objCAOrg
            , object objCAEffDTimeUTCStart
            , object objCAEffDTimeUTCEnd
            , object objPackageCode
            , object objCreatedDate
            , object objAccNo
            , object objAccHolder
            , object objBankName
            , object objTCTStatus
            , object objFlagActive
            ////
            , object objFt_Cols_Upd
            )
        {
            #region // Temp:
            DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            //int nTidSeq = 0;
            DateTime dtimeSys = DateTime.UtcNow;
            string strFunctionName = "Mst_NNT_Update";
            string strErrorCodeDefault = TError.ErridnInventory.Mst_NNT_Update;
            alParamsCoupleError.AddRange(new object[]{
                    "strFunctionName", strFunctionName
                    , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
			        ////
                    , "objMST", objMST
                    , "objNNTFullName", objNNTFullName
                    , "objNNTAddress", objNNTAddress
                    , "objNNTMobile", objNNTMobile
                    , "objNNTPhone", objNNTPhone
                    , "objNNTFax", objNNTFax
                    , "objPresentBy", objPresentBy
                    , "objBusinessRegNo", objBusinessRegNo
                    , "objNNTPosition", objNNTPosition
                    , "objPresentIDNo", objPresentIDNo
                    , "objPresentIDType", objPresentIDType
                    ////
                    , "objGovTaxID", objGovTaxID
                    , "objProvinceCode", objProvinceCode
                    , "objDistrictCode", objDistrictCode
                    , "objBizType", objBizType
                    , "objBizFieldCode", objBizFieldCode
                    , "objBizSizeCode", objBizSizeCode
                    ////
                    , "objContactName", objContactName
                    , "objContactPhone", objContactPhone
                    , "objContactEmail", objContactEmail
                    , "objWebsite", objWebsite
                    , "objCANumber", objCANumber
                    , "objCAOrg", objCAOrg
                    , "objCAEffDTimeUTCStart", objCAEffDTimeUTCStart
                    , "objCAEffDTimeUTCEnd", objCAEffDTimeUTCEnd
                    , "objPackageCode", objPackageCode
                    , "objCreatedDate", objCreatedDate
                    , "objAccNo", objAccNo
                    , "objAccHolder", objAccHolder
                    , "objBankName", objBankName
                    , "objTCTStatus", objTCTStatus
                    , "objFlagActive", objFlagActive
                    ////
                    , "objFt_Cols_Upd", objFt_Cols_Upd
                    });
            #endregion

            try
            {
                #region // Init:
                //_cf.db.LogUserId = _cf.sinf.strUserCode;
                _cf.db.BeginTransaction();

                // Write RequestLog:
                _cf.ProcessBizReq_OutSide(
                    strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    , alParamsCoupleError // alParamsCoupleError
                    );

                // Sys_User_CheckAuthentication:
                //Sys_User_CheckAuthentication(
                //    ref alParamsCoupleError
                //    , strWAUserCode
                //    , strWAUserPassword
                //    );

                // Check Access/Deny:
                Sys_Access_CheckDenyV30(
                    ref alParamsCoupleError
                    , strWAUserCode
                    , strFunctionName
                    );
                #endregion

                #region // Mst_NNT_UpdateX:
                //DataSet dsGetData = null;
                {
                    Mst_NNT_UpdateX_New20190822(
                        strTid // strTid
                        , strGwUserCode // strGwUserCode
                        , strGwPassword // strGwPassword
                        , strWAUserCode // strWAUserCode
                        , strWAUserPassword // strWAUserPassword
                        , ref alParamsCoupleError // alParamsCoupleError
                        , dtimeSys // dtimeSys
                                   ////
                        , objMST // objMST
                        , objNNTFullName // objFullName
                        , objNNTAddress // objAddress
                        , objNNTMobile // objMobile
                        , objNNTPhone // objPhone
                        , objNNTFax // objFax
                        , objPresentBy // objPresentBy
                        , objBusinessRegNo // objBusinessRegNo
                        , objNNTPosition // objPosition
                        , objPresentIDNo // objPresentIDNo
                        , objPresentIDType // objPresentIDType
                                           ////
                        , objGovTaxID // objGovTaxID
                        , objProvinceCode // objProvinceCode
                        , objDistrictCode // objDistrictCode
                        , objBizType // objBizType
                        , objBizFieldCode // objBizFieldCode
                        , objBizSizeCode // objBizSizeCode
                                         ////
                        , objContactName // objContactName
                        , objContactPhone // objContactPhone
                        , objContactEmail // objContactEmail
                        , objWebsite // objWebsite
                        , objCANumber // objCANumber
                        , objCAOrg // objCAOrg
                        , objCAEffDTimeUTCStart // objCAEffDTimeUTCEnd
                        , objCAEffDTimeUTCEnd // objCAEffDTimeUTCEnd
                        , objPackageCode // objPackageCode
                        , objCreatedDate // objCreatedDate
                        , objAccNo // objAccNo
                        , objAccHolder // objAccHolder
                        , objBankName // objBankName
                        , objTCTStatus // objTCTStatus
                        , objFlagActive
                        /////
                        , objFt_Cols_Upd // objFt_Cols_Upd
                        );
                }
                ////
                //CmUtils.DataUtils.MoveDataTable(ref mdsFinal, ref dsGetData);
                #endregion

                // Return Good:
                TDALUtils.DBUtils.CommitSafety(_cf.db);
                mdsFinal.AcceptChanges();
                return mdsFinal;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Rollback:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);

                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsFinal
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Rollback and Release resources:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);
                TDALUtils.DBUtils.ReleaseAllSemaphore(_cf.db_Sys, true);

                // Write ReturnLog:
                _cf.ProcessBizReturn_OutSide(
                    ref mdsFinal // mdsFinal
                    , strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    );
                #endregion
            }
        }

        public DataSet Mst_NNT_Update_New20200110(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            ////
            , object objMST
            , object objNNTFullName
            , object objNNTAddress
            , object objNNTMobile
            , object objNNTPhone
            , object objNNTFax
            , object objPresentBy
            , object objBusinessRegNo
            , object objNNTPosition
            , object objPresentIDNo
            , object objPresentIDType
            ////
            , object objGovTaxID
            , object objProvinceCode
            , object objDistrictCode
            , object objBizType // objBizType
            , object objBizFieldCode // objBizFieldCode
            , object objBizSizeCode // objBizSizeCode
                                    ////
            , object objContactName
            , object objContactPhone
            , object objContactEmail
            , object objWebsite
            , object objCANumber
            , object objCAOrg
            , object objCAEffDTimeUTCStart
            , object objCAEffDTimeUTCEnd
            , object objPackageCode
            , object objCreatedDate
            , object objAccNo
            , object objAccHolder
            , object objBankName
            , object objTCTStatus
            , object objDealerType
            , object objFlagActive
            ////
            ////
            , object objFt_Cols_Upd
            )
        {
            #region // Temp:
            DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            //int nTidSeq = 0;
            DateTime dtimeSys = DateTime.UtcNow;
            string strFunctionName = "Mst_NNT_Update";
            string strErrorCodeDefault = TError.ErridnInventory.Mst_NNT_Update;
            alParamsCoupleError.AddRange(new object[]{
                    "strFunctionName", strFunctionName
                    , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
			        ////
                    , "objMST", objMST
                    , "objNNTFullName", objNNTFullName
                    , "objNNTAddress", objNNTAddress
                    , "objNNTMobile", objNNTMobile
                    , "objNNTPhone", objNNTPhone
                    , "objNNTFax", objNNTFax
                    , "objPresentBy", objPresentBy
                    , "objBusinessRegNo", objBusinessRegNo
                    , "objNNTPosition", objNNTPosition
                    , "objPresentIDNo", objPresentIDNo
                    , "objPresentIDType", objPresentIDType
                    ////
                    , "objGovTaxID", objGovTaxID
                    , "objProvinceCode", objProvinceCode
                    , "objDistrictCode", objDistrictCode
                    , "objBizType", objBizType
                    , "objBizFieldCode", objBizFieldCode
                    , "objBizSizeCode", objBizSizeCode
                    ////
                    , "objContactName", objContactName
                    , "objContactPhone", objContactPhone
                    , "objContactEmail", objContactEmail
                    , "objWebsite", objWebsite
                    , "objCANumber", objCANumber
                    , "objCAOrg", objCAOrg
                    , "objCAEffDTimeUTCStart", objCAEffDTimeUTCStart
                    , "objCAEffDTimeUTCEnd", objCAEffDTimeUTCEnd
                    , "objPackageCode", objPackageCode
                    , "objCreatedDate", objCreatedDate
                    , "objAccNo", objAccNo
                    , "objAccHolder", objAccHolder
                    , "objBankName", objBankName
                    , "objTCTStatus", objTCTStatus
                    , "objDealerType", objDealerType
                    , "objFlagActive", objFlagActive
                    ////
                    , "objFt_Cols_Upd", objFt_Cols_Upd
                    });
            #endregion

            try
            {
                #region // Init:
                //_cf.db.LogUserId = _cf.sinf.strUserCode;
                _cf.db.BeginTransaction();

                // Write RequestLog:
                _cf.ProcessBizReq_OutSide(
                    strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    , alParamsCoupleError // alParamsCoupleError
                    );

                // Sys_User_CheckAuthentication:
                //Sys_User_CheckAuthentication(
                //    ref alParamsCoupleError
                //    , strWAUserCode
                //    , strWAUserPassword
                //    );

                // Check Access/Deny:
                Sys_Access_CheckDenyV30(
                    ref alParamsCoupleError
                    , strWAUserCode
                    , strFunctionName
                    );
                #endregion

                #region // Mst_NNT_UpdateX:
                //DataSet dsGetData = null;
                {
                    Mst_NNT_UpdateX_New20200110(
                        strTid // strTid
                        , strGwUserCode // strGwUserCode
                        , strGwPassword // strGwPassword
                        , strWAUserCode // strWAUserCode
                        , strWAUserPassword // strWAUserPassword
                        , ref alParamsCoupleError // alParamsCoupleError
                        , dtimeSys // dtimeSys
                                   ////
                        , objMST // objMST
                        , objNNTFullName // objFullName
                        , objNNTAddress // objAddress
                        , objNNTMobile // objMobile
                        , objNNTPhone // objPhone
                        , objNNTFax // objFax
                        , objPresentBy // objPresentBy
                        , objBusinessRegNo // objBusinessRegNo
                        , objNNTPosition // objPosition
                        , objPresentIDNo // objPresentIDNo
                        , objPresentIDType // objPresentIDType
                                           ////
                        , objGovTaxID // objGovTaxID
                        , objProvinceCode // objProvinceCode
                        , objDistrictCode // objDistrictCode
                        , objBizType // objBizType
                        , objBizFieldCode // objBizFieldCode
                        , objBizSizeCode // objBizSizeCode
                                         ////
                        , objContactName // objContactName
                        , objContactPhone // objContactPhone
                        , objContactEmail // objContactEmail
                        , objWebsite // objWebsite
                        , objCANumber // objCANumber
                        , objCAOrg // objCAOrg
                        , objCAEffDTimeUTCStart // objCAEffDTimeUTCEnd
                        , objCAEffDTimeUTCEnd // objCAEffDTimeUTCEnd
                        , objPackageCode // objPackageCode
                        , objCreatedDate // objCreatedDate
                        , objAccNo // objAccNo
                        , objAccHolder // objAccHolder
                        , objBankName // objBankName
                        , objTCTStatus // objTCTStatus
                        , objDealerType // objDealerType
                        , objFlagActive
                        /////
                        , objFt_Cols_Upd // objFt_Cols_Upd
                        );
                }
                ////
                //CmUtils.DataUtils.MoveDataTable(ref mdsFinal, ref dsGetData);
                #endregion

                // Return Good:
                TDALUtils.DBUtils.CommitSafety(_cf.db);
                mdsFinal.AcceptChanges();
                return mdsFinal;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Rollback:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);

                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsFinal
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Rollback and Release resources:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);
                TDALUtils.DBUtils.ReleaseAllSemaphore(_cf.db_Sys, true);

                // Write ReturnLog:
                _cf.ProcessBizReturn_OutSide(
                    ref mdsFinal // mdsFinal
                    , strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    );
                #endregion
            }
        }

		public DataSet Mst_NNT_Update_New20200208(
			string strTid
			, string strGwUserCode
			, string strGwPassword
			, string strWAUserCode
			, string strWAUserPassword
			, ref ArrayList alParamsCoupleError
			////
			, object objMST
			, object objNNTFullName
			, object objNNTAddress
			, object objNNTMobile
			, object objNNTPhone
			, object objNNTFax
			, object objPresentBy
			, object objBusinessRegNo
			, object objNNTPosition
			, object objPresentIDNo
			, object objPresentIDType
			////
			, object objGovTaxID
			, object objProvinceCode
			, object objDistrictCode
			, object objBizType // objBizType
			, object objBizFieldCode // objBizFieldCode
			, object objBizSizeCode // objBizSizeCode
									////
			, object objContactName
			, object objContactPhone
			, object objContactEmail
			, object objWebsite
			, object objCANumber
			, object objCAOrg
			, object objCAEffDTimeUTCStart
			, object objCAEffDTimeUTCEnd
			, object objPackageCode
			, object objCreatedDate
			, object objAccNo
			, object objAccHolder
			, object objBankName
			, object objTCTStatus
			, object objDealerType
            , object objAreaCode
            , object objOrgID_MA
            , object objFlagActive
			////
			////
			, object objFt_Cols_Upd
			)
		{
			#region // Temp:
			DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
			//int nTidSeq = 0;
			DateTime dtimeSys = DateTime.UtcNow;
			string strFunctionName = "Mst_NNT_Update";
			string strErrorCodeDefault = TError.ErridnInventory.Mst_NNT_Update;
			alParamsCoupleError.AddRange(new object[]{
					"strFunctionName", strFunctionName
					, "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
			        ////
                    , "objMST", objMST
					, "objNNTFullName", objNNTFullName
					, "objNNTAddress", objNNTAddress
					, "objNNTMobile", objNNTMobile
					, "objNNTPhone", objNNTPhone
					, "objNNTFax", objNNTFax
					, "objPresentBy", objPresentBy
					, "objBusinessRegNo", objBusinessRegNo
					, "objNNTPosition", objNNTPosition
					, "objPresentIDNo", objPresentIDNo
					, "objPresentIDType", objPresentIDType
                    ////
                    , "objGovTaxID", objGovTaxID
					, "objProvinceCode", objProvinceCode
					, "objDistrictCode", objDistrictCode
					, "objBizType", objBizType
					, "objBizFieldCode", objBizFieldCode
					, "objBizSizeCode", objBizSizeCode
                    ////
                    , "objContactName", objContactName
					, "objContactPhone", objContactPhone
					, "objContactEmail", objContactEmail
					, "objWebsite", objWebsite
					, "objCANumber", objCANumber
					, "objCAOrg", objCAOrg
					, "objCAEffDTimeUTCStart", objCAEffDTimeUTCStart
					, "objCAEffDTimeUTCEnd", objCAEffDTimeUTCEnd
					, "objPackageCode", objPackageCode
					, "objCreatedDate", objCreatedDate
					, "objAccNo", objAccNo
					, "objAccHolder", objAccHolder
					, "objBankName", objBankName
					, "objTCTStatus", objTCTStatus
					, "objDealerType", objDealerType
                    , "objAreaCode", objAreaCode
                    , "objFlagActive", objFlagActive
                    ////
                    , "objFt_Cols_Upd", objFt_Cols_Upd
					});
			#endregion

			try
			{
				#region // Init:
				//_cf.db.LogUserId = _cf.sinf.strUserCode;
				_cf.db.BeginTransaction();

				// Write RequestLog:
				_cf.ProcessBizReq_OutSide(
					strTid // strTid
					, strGwUserCode // strGwUserCode
					, strGwPassword // strGwPassword
					, strWAUserCode // objUserCode
					, strFunctionName // strFunctionName
					, alParamsCoupleError // alParamsCoupleError
					);

				// Sys_User_CheckAuthentication:
				//Sys_User_CheckAuthentication(
				//	ref alParamsCoupleError
				//	, strWAUserCode
				//	, strWAUserPassword
				//	);

				// Check Access/Deny:
				Sys_Access_CheckDenyV30(
					ref alParamsCoupleError
					, strWAUserCode
					, strFunctionName
					);
				#endregion

				#region // Mst_NNT_UpdateX:
				//DataSet dsGetData = null;
				{
					Mst_NNT_UpdateX_New20200208(
						strTid // strTid
						, strGwUserCode // strGwUserCode
						, strGwPassword // strGwPassword
						, strWAUserCode // strWAUserCode
						, strWAUserPassword // strWAUserPassword
						, ref alParamsCoupleError // alParamsCoupleError
						, dtimeSys // dtimeSys
								   ////
						, objMST // objMST
						, objNNTFullName // objFullName
						, objNNTAddress // objAddress
						, objNNTMobile // objMobile
						, objNNTPhone // objPhone
						, objNNTFax // objFax
						, objPresentBy // objPresentBy
						, objBusinessRegNo // objBusinessRegNo
						, objNNTPosition // objPosition
						, objPresentIDNo // objPresentIDNo
						, objPresentIDType // objPresentIDType
										   ////
						, objGovTaxID // objGovTaxID
						, objProvinceCode // objProvinceCode
						, objDistrictCode // objDistrictCode
						, objBizType // objBizType
						, objBizFieldCode // objBizFieldCode
						, objBizSizeCode // objBizSizeCode
										 ////
						, objContactName // objContactName
						, objContactPhone // objContactPhone
						, objContactEmail // objContactEmail
						, objWebsite // objWebsite
						, objCANumber // objCANumber
						, objCAOrg // objCAOrg
						, objCAEffDTimeUTCStart // objCAEffDTimeUTCEnd
						, objCAEffDTimeUTCEnd // objCAEffDTimeUTCEnd
						, objPackageCode // objPackageCode
						, objCreatedDate // objCreatedDate
						, objAccNo // objAccNo
						, objAccHolder // objAccHolder
						, objBankName // objBankName
						, objTCTStatus // objTCTStatus
						, objDealerType // objDealerType
                        , objAreaCode // objAreaCode
                        , objOrgID_MA // objOrgID_MA
                        , objFlagActive
						/////
						, objFt_Cols_Upd // objFt_Cols_Upd
						);
				}
				////
				//CmUtils.DataUtils.MoveDataTable(ref mdsFinal, ref dsGetData);
				#endregion

				// Return Good:
				TDALUtils.DBUtils.CommitSafety(_cf.db);
				mdsFinal.AcceptChanges();
				return mdsFinal;
			}
			catch (Exception exc)
			{
				#region // Catch of try:
				// Rollback:
				TDALUtils.DBUtils.RollbackSafety(_cf.db);

				// Return Bad:
				return TUtils.CProcessExc.Process(
					ref mdsFinal
					, exc
					, strErrorCodeDefault
					, alParamsCoupleError.ToArray()
					);
				#endregion
			}
			finally
			{
				#region // Finally of try:
				// Rollback and Release resources:
				TDALUtils.DBUtils.RollbackSafety(_cf.db);
				TDALUtils.DBUtils.ReleaseAllSemaphore(_cf.db_Sys, true);

				// Write ReturnLog:
				_cf.ProcessBizReturn_OutSide(
					ref mdsFinal // mdsFinal
					, strTid // strTid
					, strGwUserCode // strGwUserCode
					, strGwPassword // strGwPassword
					, strWAUserCode // objUserCode
					, strFunctionName // strFunctionName
					);
				#endregion
			}
		}
		private void Mst_NNT_UpdateX_New20200110(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            , DateTime dtimeSys
            //// 
            , object objMST
            , object objNNTFullName
            , object objNNTAddress
            , object objNNTMobile
            , object objNNTPhone
            , object objNNTFax
            , object objPresentBy
            , object objBusinessRegNo
            , object objNNTPosition
            , object objPresentIDNo
            , object objPresentIDType
            ////
            , object objGovTaxID
            , object objProvinceCode
            , object objDistrictCode
            , object objBizType // objBizType
            , object objBizFieldCode // objBizFieldCode
            , object objBizSizeCode // objBizSizeCode
            , object objContactName
            , object objContactPhone
            , object objContactEmail
            , object objWebsite
            , object objCANumber
            , object objCAOrg
            , object objCAEffDTimeUTCStart
            , object objCAEffDTimeUTCEnd
            , object objPackageCode
            , object objCreatedDate
            , object objAccNo
            , object objAccHolder
            , object objBankName
            , object objTCTStatus
            , object objDealerType
            , object objFlagActive
            ////
            , object objFt_Cols_Upd
            ////
            )
        {
            #region // Temp:
            string strFunctionName = "Mst_NNT_UpdateX";
            //string strErrorCodeDefault = TError.ErrHTCNM.Mst_NNT_UpdateX;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
                , "objMST", objMST
                , "objNNTFullName", objNNTFullName
                , "objNNTAddress", objNNTAddress
                , "objNNTMobile", objNNTMobile
                , "objNNTPhone", objNNTPhone
                , "objNNTFax", objNNTFax
                , "objPresentBy", objPresentBy
                , "objBusinessRegNo", objBusinessRegNo
                , "objNNTPosition", objNNTPosition
                , "objPresentIDNo", objPresentIDNo
                , "objPresentIDType", objPresentIDType
                ////
                , "objGovTaxID", objGovTaxID
                , "objProvinceCode", objProvinceCode
                , "objDistrictCode", objDistrictCode
                , "objBizType", objBizType
                , "objBizFieldCode", objBizFieldCode
                , "objBizSizeCode", objBizSizeCode
                ////
                , "objContactName", objContactName
                , "objContactPhone", objContactPhone
                , "objContactEmail", objContactEmail
                , "objWebsite", objWebsite
                , "objCANumber", objCANumber
                , "objCAOrg", objCAOrg
                , "objCAEffDTimeUTCStart", objCAEffDTimeUTCStart
                , "objCAEffDTimeUTCEnd", objCAEffDTimeUTCEnd
                , "objPackageCode", objPackageCode
                , "objCreatedDate", objCreatedDate
                , "objAccNo", objAccNo
                , "objAccHolder", objAccHolder
                , "objBankName", objBankName
                , "objTCTStatus", objTCTStatus
                , "objDealerType", objDealerType
                , "objFlagActive", objFlagActive
                ////
                , "objFt_Cols_Upd", objFt_Cols_Upd
                });
            #endregion

            #region // Refine and Check Input:
            ////
            string strFt_Cols_Upd = TUtils.CUtils.StdParam(objFt_Cols_Upd);
            strFt_Cols_Upd = (strFt_Cols_Upd == null ? "" : strFt_Cols_Upd);
            ////
            string strMST = TUtils.CUtils.StdParam(objMST);
            string strNNTFullName = string.Format("{0}", objNNTFullName).Trim();
            string strNNTAddress = string.Format("{0}", objNNTAddress).Trim();
            string strNNTMobile = string.Format("{0}", objNNTMobile).Trim();
            string strNNTPhone = string.Format("{0}", objNNTPhone).Trim();
            string strNNTFax = string.Format("{0}", objNNTFax).Trim();
            string strPresentBy = string.Format("{0}", objPresentBy).Trim();
            string strBusinessRegNo = string.Format("{0}", objBusinessRegNo).Trim();
            string strNNTPosition = string.Format("{0}", objNNTPosition).Trim();
            string strPresentIDNo = string.Format("{0}", objPresentIDNo).Trim();
            string strPresentIDType = string.Format("{0}", objPresentIDType).Trim();
            ////
            string strGovTaxID = TUtils.CUtils.StdParam(objGovTaxID);
            string strProvinceCode = TUtils.CUtils.StdParam(objProvinceCode);
            string strDistrictCode = TUtils.CUtils.StdParam(objDistrictCode);
            string strBizType = TUtils.CUtils.StdParam(objBizType);
            string strBizFieldCode = TUtils.CUtils.StdParam(objBizFieldCode);
            string strBizSizeCode = TUtils.CUtils.StdParam(objBizSizeCode);
            ////
            string strContactName = string.Format("{0}", objContactName).Trim();
            string strContactPhone = string.Format("{0}", objContactPhone).Trim();
            string strContactEmail = string.Format("{0}", objContactEmail).Trim();
            string strWebsite = string.Format("{0}", objWebsite).Trim();
            string strCANumber = string.Format("{0}", objCANumber).Trim();
            string strCAOrg = string.Format("{0}", objCAOrg).Trim();
            string strCAEffDTimeUTCStart = TUtils.CUtils.StdDTime(objCAEffDTimeUTCStart);
            string strCAEffDTimeUTCEnd = TUtils.CUtils.StdDTime(objCAEffDTimeUTCEnd);
            string strPackageCode = string.Format("{0}", objPackageCode).Trim();
            string strAccNo = string.Format("{0}", objAccNo).Trim();
            string strAccHolder = string.Format("{0}", objAccHolder).Trim();
            string strBankName = string.Format("{0}", objBankName).Trim();
            string strTCTStatus = TUtils.CUtils.StdFlag(objTCTStatus);
            string strDealerType = TUtils.CUtils.StdParam(objDealerType);
            string strFlagActive = TUtils.CUtils.StdFlag(objFlagActive);
            ////
            bool bUpd_NNTFullName = strFt_Cols_Upd.Contains("Mst_NNT.NNTFullName".ToUpper());
            bool bUpd_NNTAddress = strFt_Cols_Upd.Contains("Mst_NNT.NNTAddress".ToUpper());
            bool bUpd_NNTMobile = strFt_Cols_Upd.Contains("Mst_NNT.NNTMobile".ToUpper());
            bool bUpd_NNTPhone = strFt_Cols_Upd.Contains("Mst_NNT.NNTPhone".ToUpper());
            bool bUpd_NNTFax = strFt_Cols_Upd.Contains("Mst_NNT.NNTFax".ToUpper());
            bool bUpd_PresentBy = strFt_Cols_Upd.Contains("Mst_NNT.PresentBy".ToUpper());
            bool bUpd_BusinessRegNo = strFt_Cols_Upd.Contains("Mst_NNT.BusinessRegNo".ToUpper());
            bool bUpd_NNTPosition = strFt_Cols_Upd.Contains("Mst_NNT.NNTPosition".ToUpper());
            bool bUpd_PresentIDNo = strFt_Cols_Upd.Contains("Mst_NNT.PresentIDNo".ToUpper());
            bool bUpd_PresentIDType = strFt_Cols_Upd.Contains("Mst_NNT.PresentIDType".ToUpper());
            ////
            bool bUpd_GovTaxID = strFt_Cols_Upd.Contains("Mst_NNT.GovTaxID".ToUpper());
            bool bUpd_ProvinceCode = strFt_Cols_Upd.Contains("Mst_NNT.ProvinceCode".ToUpper());
            bool bUpd_DistrictCode = strFt_Cols_Upd.Contains("Mst_NNT.DistrictCode".ToUpper());
            bool bUpd_BizType = strFt_Cols_Upd.Contains("Mst_NNT.BizType".ToUpper());
            bool bUpd_BizFieldCode = strFt_Cols_Upd.Contains("Mst_NNT.BizFieldCode".ToUpper());
            bool bUpd_BizSizeCode = strFt_Cols_Upd.Contains("Mst_NNT.BizSizeCode".ToUpper());
            ///
            bool bUpd_ContactName = strFt_Cols_Upd.Contains("Mst_NNT.ContactName".ToUpper());
            bool bUpd_ContactPhone = strFt_Cols_Upd.Contains("Mst_NNT.ContactPhone".ToUpper());
            bool bUpd_ContactEmail = strFt_Cols_Upd.Contains("Mst_NNT.ContactEmail".ToUpper());
            bool bUpd_Website = strFt_Cols_Upd.Contains("Mst_NNT.Website".ToUpper());
            bool bUpd_CANumber = strFt_Cols_Upd.Contains("Mst_NNT.CANumber".ToUpper());
            bool bUpd_CAOrg = strFt_Cols_Upd.Contains("Mst_NNT.CAOrg".ToUpper());
            bool bUpd_CAEffDTimeUTCStart = strFt_Cols_Upd.Contains("Mst_NNT.CAEffDTimeUTCStart".ToUpper());
            bool bUpd_CAEffDTimeUTCEnd = strFt_Cols_Upd.Contains("Mst_NNT.CAEffDTimeUTCEnd".ToUpper());
            bool bUpd_PackageCode = strFt_Cols_Upd.Contains("Mst_NNT.PackageCode".ToUpper());
            bool bUpd_CreatedDate = strFt_Cols_Upd.Contains("Mst_NNT.CreatedDate".ToUpper());
            bool bUpd_AccNo = strFt_Cols_Upd.Contains("Mst_NNT.AccNo".ToUpper());
            bool bUpd_AccHolder = strFt_Cols_Upd.Contains("Mst_NNT.AccHolder".ToUpper());
            bool bUpd_BankName = strFt_Cols_Upd.Contains("Mst_NNT.BankName".ToUpper());
            bool bUpd_DealerType = strFt_Cols_Upd.Contains("Mst_NNT.DealerType".ToUpper());
            bool bUpd_FlagActive = strFt_Cols_Upd.Contains("Mst_NNT.FlagActive".ToUpper());

            ////
            DataTable dtDB_Mst_NNT = null;
            {
                ////
                Mst_NNT_CheckDB(
                    ref alParamsCoupleError // alParamsCoupleError
                    , strMST // strMST 
                    , TConst.Flag.Yes // strFlagExistToCheck
                    , "" // strFlagActiveListToCheck
                    , "" // strTCTStatusListToCheck
                    , out dtDB_Mst_NNT // dtDB_Mst_Organ
                    );
                ////
                if (strNNTFullName.Length < 1)
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.strNNTFullName", strNNTFullName
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Mst_NNT_Update_InvalidNNTFullName
                        , null
                        , alParamsCoupleError.ToArray()
                        );
                }
                ////
                if (strNNTAddress.Length < 1)
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.strNNTAddress", strNNTAddress
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Mst_NNT_Update_InvalidNNTAddress
                        , null
                        , alParamsCoupleError.ToArray()
                        );
                }
                ////
                if (strPresentBy.Length < 1)
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.strPresentBy", strPresentBy
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Mst_NNT_Update_InvalidPresentBy
                        , null
                        , alParamsCoupleError.ToArray()
                        );
                }
                ////
                if (strNNTPosition.Length < 1)
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.strNNTPosition", strNNTPosition
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Mst_NNT_Update_InvalidNNTPosition
                        , null
                        , alParamsCoupleError.ToArray()
                        );
                }
                ////
                if (bUpd_ProvinceCode && string.IsNullOrEmpty(strProvinceCode))
                {
                    ////
                    DataTable dtDB_Mst_Province = null;

                    Mst_Province_CheckDB(
                        ref alParamsCoupleError // alParamsCoupleError
                        , strProvinceCode // objProvinceCode
                        , TConst.Flag.Yes // strFlagExistToCheck
                        , TConst.Flag.Active // strFlagActiveListToCheck
                        , out dtDB_Mst_Province // dtDB_Mst_Province
                        );
                }

                ////
                if (bUpd_DistrictCode && string.IsNullOrEmpty(strDistrictCode))
                {
                    ////
                    DataTable dtDB_Mst_District = null;

                    Mst_District_CheckDB(
                        ref alParamsCoupleError // alParamsCoupleError
                        , strProvinceCode // objProvinceCode
                        , strDistrictCode // strDistrictCode
                        , TConst.Flag.Yes // strFlagExistToCheck
                        , TConst.Flag.Active // strFlagActiveListToCheck
                        , out dtDB_Mst_District // dtDB_Mst_District
                        );
                }
                ////
                if (bUpd_GovTaxID && string.IsNullOrEmpty(strGovTaxID))
                {
                    ////
                    DataTable dtDB_Mst_GovTaxID = null;

                    Mst_GovTaxID_CheckDB(
                        ref alParamsCoupleError // alParamsCoupleError
                        , strGovTaxID // objGovTaxID
                        , TConst.Flag.Yes // strFlagExistToCheck
                        , TConst.Flag.Active // strFlagActiveListToCheck
                        , out dtDB_Mst_GovTaxID // dtDB_Mst_GovTaxID
                        );
                }
                ////
                if (strContactName.Length < 1)
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.strContactName", strContactName
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Mst_NNT_Update_InvalidContactName
                        , null
                        , alParamsCoupleError.ToArray()
                        );
                }
                ////
                if (strContactPhone.Length < 1)
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.strContactPhone", strContactPhone
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Mst_NNT_Update_InvalidContactPhone
                        , null
                        , alParamsCoupleError.ToArray()
                        );
                }
                ////
                if (strContactEmail.Length < 1)
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.strContactEmail", strContactEmail
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Mst_NNT_Update_InvalidContactEmail
                        , null
                        , alParamsCoupleError.ToArray()
                        );
                }
            }
            #endregion

            #region // Save Mst_Chain:
            {
                // Init:
                ArrayList alColumnEffective = new ArrayList();
                string strFN = "";
                DataRow drDB = dtDB_Mst_NNT.Rows[0];
                if (bUpd_NNTFullName) { strFN = "NNTFullName"; drDB[strFN] = strNNTFullName; alColumnEffective.Add(strFN); }
                if (bUpd_NNTAddress) { strFN = "NNTAddress"; drDB[strFN] = strNNTAddress; alColumnEffective.Add(strFN); }
                if (bUpd_NNTMobile) { strFN = "NNTMobile"; drDB[strFN] = strNNTMobile; alColumnEffective.Add(strFN); }
                if (bUpd_NNTPhone) { strFN = "NNTPhone"; drDB[strFN] = strNNTPhone; alColumnEffective.Add(strFN); }
                if (bUpd_NNTFax) { strFN = "NNTFax"; drDB[strFN] = strNNTFax; alColumnEffective.Add(strFN); }
                if (bUpd_PresentBy) { strFN = "PresentBy"; drDB[strFN] = strPresentBy; alColumnEffective.Add(strFN); }
                if (bUpd_BusinessRegNo) { strFN = "BusinessRegNo"; drDB[strFN] = strBusinessRegNo; alColumnEffective.Add(strFN); }
                if (bUpd_NNTPosition) { strFN = "NNTPosition"; drDB[strFN] = strNNTPosition; alColumnEffective.Add(strFN); }
                if (bUpd_PresentIDNo) { strFN = "PresentIDNo"; drDB[strFN] = strPresentIDNo; alColumnEffective.Add(strFN); }
                if (bUpd_PresentIDType) { strFN = "PresentIDType"; drDB[strFN] = strPresentIDType; alColumnEffective.Add(strFN); }
                if (bUpd_GovTaxID) { strFN = "GovTaxID"; drDB[strFN] = strGovTaxID; alColumnEffective.Add(strFN); }
                ////
                if (bUpd_ProvinceCode) { strFN = "ProvinceCode"; drDB[strFN] = strProvinceCode; alColumnEffective.Add(strFN); }
                if (bUpd_DistrictCode) { strFN = "DistrictCode"; drDB[strFN] = strDistrictCode; alColumnEffective.Add(strFN); }
                if (bUpd_BizType) { strFN = "BizType"; drDB[strFN] = strBizType; alColumnEffective.Add(strFN); }
                if (bUpd_BizFieldCode) { strFN = "BizFieldCode"; drDB[strFN] = strBizFieldCode; alColumnEffective.Add(strFN); }
                if (bUpd_BizSizeCode) { strFN = "BizSizeCode"; drDB[strFN] = strBizSizeCode; alColumnEffective.Add(strFN); }
                ////
                if (bUpd_ContactName) { strFN = "ContactName"; drDB[strFN] = strContactName; alColumnEffective.Add(strFN); }
                if (bUpd_ContactPhone) { strFN = "ContactPhone"; drDB[strFN] = strContactPhone; alColumnEffective.Add(strFN); }
                if (bUpd_ContactEmail) { strFN = "ContactEmail"; drDB[strFN] = strContactEmail; alColumnEffective.Add(strFN); }
                if (bUpd_Website) { strFN = "Website"; drDB[strFN] = strWebsite; alColumnEffective.Add(strFN); }
                if (bUpd_CANumber) { strFN = "CANumber"; drDB[strFN] = strCANumber; alColumnEffective.Add(strFN); }
                if (bUpd_CAOrg) { strFN = "CAOrg"; drDB[strFN] = strCAOrg; alColumnEffective.Add(strFN); }
                if (bUpd_CAEffDTimeUTCStart) { strFN = "CAEffDTimeUTCStart"; drDB[strFN] = strCAEffDTimeUTCStart; alColumnEffective.Add(strFN); }
                if (bUpd_CAEffDTimeUTCEnd) { strFN = "CAEffDTimeUTCEnd"; drDB[strFN] = strCAEffDTimeUTCEnd; alColumnEffective.Add(strFN); }
                if (bUpd_PackageCode) { strFN = "PackageCode"; drDB[strFN] = strPackageCode; alColumnEffective.Add(strFN); }
                if (bUpd_AccNo) { strFN = "AccNo"; drDB[strFN] = strAccNo; alColumnEffective.Add(strFN); }
                if (bUpd_AccHolder) { strFN = "AccHolder"; drDB[strFN] = strAccHolder; alColumnEffective.Add(strFN); }
                if (bUpd_BankName) { strFN = "BankName"; drDB[strFN] = strBankName; alColumnEffective.Add(strFN); }
                if (bUpd_DealerType) { strFN = "DealerType"; drDB[strFN] = strDealerType; alColumnEffective.Add(strFN); }
                if (bUpd_FlagActive) { strFN = "FlagActive"; drDB[strFN] = strFlagActive; alColumnEffective.Add(strFN); }
                strFN = "LogLUDTimeUTC"; drDB[strFN] = dtimeSys.ToString("yyyy-MM-dd HH:mm:ss"); alColumnEffective.Add(strFN);
                strFN = "LogLUBy"; drDB[strFN] = strWAUserCode; alColumnEffective.Add(strFN);

                // Save:
                _cf.db.SaveData(
                    "Mst_NNT"
                    , dtDB_Mst_NNT
                    , alColumnEffective.ToArray()
                    );
            }
            #endregion
        }

		private void Mst_NNT_UpdateX_New20200208(
			string strTid
			, string strGwUserCode
			, string strGwPassword
			, string strWAUserCode
			, string strWAUserPassword
			, ref ArrayList alParamsCoupleError
			, DateTime dtimeSys
			//// 
			, object objMST
			, object objNNTFullName
			, object objNNTAddress
			, object objNNTMobile
			, object objNNTPhone
			, object objNNTFax
			, object objPresentBy
			, object objBusinessRegNo
			, object objNNTPosition
			, object objPresentIDNo
			, object objPresentIDType
			////
			, object objGovTaxID
			, object objProvinceCode
			, object objDistrictCode
			, object objBizType // objBizType
			, object objBizFieldCode // objBizFieldCode
			, object objBizSizeCode // objBizSizeCode
			, object objContactName
			, object objContactPhone
			, object objContactEmail
			, object objWebsite
			, object objCANumber
			, object objCAOrg
			, object objCAEffDTimeUTCStart
			, object objCAEffDTimeUTCEnd
			, object objPackageCode
			, object objCreatedDate
			, object objAccNo
			, object objAccHolder
			, object objBankName
			, object objTCTStatus
			, object objDealerType
            , object objAreaCode
            , object objOrgID_MA
            , object objFlagActive
			////
			, object objFt_Cols_Upd
			////
			)
		{
			#region // Temp:
			string strFunctionName = "Mst_NNT_UpdateX";
			//string strErrorCodeDefault = TError.ErrHTCNM.Mst_NNT_UpdateX;
			alParamsCoupleError.AddRange(new object[]{
				"strFunctionName", strFunctionName
				, "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
                , "objMST", objMST
				, "objNNTFullName", objNNTFullName
				, "objNNTAddress", objNNTAddress
				, "objNNTMobile", objNNTMobile
				, "objNNTPhone", objNNTPhone
				, "objNNTFax", objNNTFax
				, "objPresentBy", objPresentBy
				, "objBusinessRegNo", objBusinessRegNo
				, "objNNTPosition", objNNTPosition
				, "objPresentIDNo", objPresentIDNo
				, "objPresentIDType", objPresentIDType
                ////
                , "objGovTaxID", objGovTaxID
				, "objProvinceCode", objProvinceCode
				, "objDistrictCode", objDistrictCode
				, "objBizType", objBizType
				, "objBizFieldCode", objBizFieldCode
				, "objBizSizeCode", objBizSizeCode
                ////
                , "objContactName", objContactName
				, "objContactPhone", objContactPhone
				, "objContactEmail", objContactEmail
				, "objWebsite", objWebsite
				, "objCANumber", objCANumber
				, "objCAOrg", objCAOrg
				, "objCAEffDTimeUTCStart", objCAEffDTimeUTCStart
				, "objCAEffDTimeUTCEnd", objCAEffDTimeUTCEnd
				, "objPackageCode", objPackageCode
				, "objCreatedDate", objCreatedDate
				, "objAccNo", objAccNo
				, "objAccHolder", objAccHolder
				, "objBankName", objBankName
				, "objTCTStatus", objTCTStatus
				, "objDealerType", objDealerType
				, "objFlagActive", objFlagActive
                ////
                , "objFt_Cols_Upd", objFt_Cols_Upd
				});
			#endregion

			#region // Refine and Check Input:
			////
			string strFt_Cols_Upd = TUtils.CUtils.StdParam(objFt_Cols_Upd);
			strFt_Cols_Upd = (strFt_Cols_Upd == null ? "" : strFt_Cols_Upd);
			////
			string strMST = TUtils.CUtils.StdParam(objMST);
			string strNNTFullName = string.Format("{0}", objNNTFullName).Trim();
			string strNNTAddress = string.Format("{0}", objNNTAddress).Trim();
			string strNNTMobile = string.Format("{0}", objNNTMobile).Trim();
			string strNNTPhone = string.Format("{0}", objNNTPhone).Trim();
			string strNNTFax = string.Format("{0}", objNNTFax).Trim();
			string strPresentBy = string.Format("{0}", objPresentBy).Trim();
			string strBusinessRegNo = string.Format("{0}", objBusinessRegNo).Trim();
			string strNNTPosition = string.Format("{0}", objNNTPosition).Trim();
			string strPresentIDNo = string.Format("{0}", objPresentIDNo).Trim();
			string strPresentIDType = string.Format("{0}", objPresentIDType).Trim();
			////
			string strGovTaxID = TUtils.CUtils.StdParam(objGovTaxID);
			string strProvinceCode = TUtils.CUtils.StdParam(objProvinceCode);
			string strDistrictCode = TUtils.CUtils.StdParam(objDistrictCode);
			string strBizType = TUtils.CUtils.StdParam(objBizType);
			string strBizFieldCode = TUtils.CUtils.StdParam(objBizFieldCode);
			string strBizSizeCode = TUtils.CUtils.StdParam(objBizSizeCode);
			////
			string strContactName = string.Format("{0}", objContactName).Trim();
			string strContactPhone = string.Format("{0}", objContactPhone).Trim();
			string strContactEmail = string.Format("{0}", objContactEmail).Trim();
			string strWebsite = string.Format("{0}", objWebsite).Trim();
			string strCANumber = string.Format("{0}", objCANumber).Trim();
			string strCAOrg = string.Format("{0}", objCAOrg).Trim();
			string strCAEffDTimeUTCStart = TUtils.CUtils.StdDTime(objCAEffDTimeUTCStart);
			string strCAEffDTimeUTCEnd = TUtils.CUtils.StdDTime(objCAEffDTimeUTCEnd);
			string strPackageCode = string.Format("{0}", objPackageCode).Trim();
			string strAccNo = string.Format("{0}", objAccNo).Trim();
			string strAccHolder = string.Format("{0}", objAccHolder).Trim();
			string strBankName = string.Format("{0}", objBankName).Trim();
			string strTCTStatus = TUtils.CUtils.StdFlag(objTCTStatus);
			string strDealerType = TUtils.CUtils.StdParam(objDealerType);
            string strAreaCode = TUtils.CUtils.StdParam(objAreaCode);
            string strOrgID_MA = TUtils.CUtils.StdParam(objOrgID_MA);
            string strFlagActive = TUtils.CUtils.StdFlag(objFlagActive);
			////
			bool bUpd_NNTFullName = strFt_Cols_Upd.Contains("Mst_NNT.NNTFullName".ToUpper());
			bool bUpd_NNTAddress = strFt_Cols_Upd.Contains("Mst_NNT.NNTAddress".ToUpper());
			bool bUpd_NNTMobile = strFt_Cols_Upd.Contains("Mst_NNT.NNTMobile".ToUpper());
			bool bUpd_NNTPhone = strFt_Cols_Upd.Contains("Mst_NNT.NNTPhone".ToUpper());
			bool bUpd_NNTFax = strFt_Cols_Upd.Contains("Mst_NNT.NNTFax".ToUpper());
			bool bUpd_PresentBy = strFt_Cols_Upd.Contains("Mst_NNT.PresentBy".ToUpper());
			bool bUpd_BusinessRegNo = strFt_Cols_Upd.Contains("Mst_NNT.BusinessRegNo".ToUpper());
			bool bUpd_NNTPosition = strFt_Cols_Upd.Contains("Mst_NNT.NNTPosition".ToUpper());
			bool bUpd_PresentIDNo = strFt_Cols_Upd.Contains("Mst_NNT.PresentIDNo".ToUpper());
			bool bUpd_PresentIDType = strFt_Cols_Upd.Contains("Mst_NNT.PresentIDType".ToUpper());
			////
			bool bUpd_GovTaxID = strFt_Cols_Upd.Contains("Mst_NNT.GovTaxID".ToUpper());
			bool bUpd_ProvinceCode = strFt_Cols_Upd.Contains("Mst_NNT.ProvinceCode".ToUpper());
			bool bUpd_DistrictCode = strFt_Cols_Upd.Contains("Mst_NNT.DistrictCode".ToUpper());
			bool bUpd_BizType = strFt_Cols_Upd.Contains("Mst_NNT.BizType".ToUpper());
			bool bUpd_BizFieldCode = strFt_Cols_Upd.Contains("Mst_NNT.BizFieldCode".ToUpper());
			bool bUpd_BizSizeCode = strFt_Cols_Upd.Contains("Mst_NNT.BizSizeCode".ToUpper());
			///
			bool bUpd_ContactName = strFt_Cols_Upd.Contains("Mst_NNT.ContactName".ToUpper());
			bool bUpd_ContactPhone = strFt_Cols_Upd.Contains("Mst_NNT.ContactPhone".ToUpper());
			bool bUpd_ContactEmail = strFt_Cols_Upd.Contains("Mst_NNT.ContactEmail".ToUpper());
			bool bUpd_Website = strFt_Cols_Upd.Contains("Mst_NNT.Website".ToUpper());
			bool bUpd_CANumber = strFt_Cols_Upd.Contains("Mst_NNT.CANumber".ToUpper());
			bool bUpd_CAOrg = strFt_Cols_Upd.Contains("Mst_NNT.CAOrg".ToUpper());
			bool bUpd_CAEffDTimeUTCStart = strFt_Cols_Upd.Contains("Mst_NNT.CAEffDTimeUTCStart".ToUpper());
			bool bUpd_CAEffDTimeUTCEnd = strFt_Cols_Upd.Contains("Mst_NNT.CAEffDTimeUTCEnd".ToUpper());
			bool bUpd_PackageCode = strFt_Cols_Upd.Contains("Mst_NNT.PackageCode".ToUpper());
			bool bUpd_CreatedDate = strFt_Cols_Upd.Contains("Mst_NNT.CreatedDate".ToUpper());
			bool bUpd_AccNo = strFt_Cols_Upd.Contains("Mst_NNT.AccNo".ToUpper());
			bool bUpd_AccHolder = strFt_Cols_Upd.Contains("Mst_NNT.AccHolder".ToUpper());
			bool bUpd_BankName = strFt_Cols_Upd.Contains("Mst_NNT.BankName".ToUpper());
			bool bUpd_DealerType = strFt_Cols_Upd.Contains("Mst_NNT.DealerType".ToUpper());
            bool bUpd_AreaCode = strFt_Cols_Upd.Contains("Mst_NNT.AreaCode".ToUpper());
            bool bUpd_FlagActive = strFt_Cols_Upd.Contains("Mst_NNT.FlagActive".ToUpper());

			////
			DataTable dtDB_Mst_NNT = null;
			{
				////
				Mst_NNT_CheckDB(
					ref alParamsCoupleError // alParamsCoupleError
					, strMST // strMST 
					, TConst.Flag.Yes // strFlagExistToCheck
					, "" // strFlagActiveListToCheck
					, "" // strTCTStatusListToCheck
					, out dtDB_Mst_NNT // dtDB_Mst_Organ
					);
				////
				if (strNNTFullName.Length < 1)
				{
					alParamsCoupleError.AddRange(new object[]{
						"Check.strNNTFullName", strNNTFullName
						});
					throw CmUtils.CMyException.Raise(
						TError.ErridnInventory.Mst_NNT_Update_InvalidNNTFullName
						, null
						, alParamsCoupleError.ToArray()
						);
				}
				////
				//if (strNNTAddress.Length < 1)
				//{
				//	alParamsCoupleError.AddRange(new object[]{
				//		"Check.strNNTAddress", strNNTAddress
				//		});
				//	throw CmUtils.CMyException.Raise(
				//		TError.ErridnInventory.Mst_NNT_Update_InvalidNNTAddress
				//		, null
				//		, alParamsCoupleError.ToArray()
				//		);
				//}
				////
				if (strPresentBy.Length < 1)
				{
					alParamsCoupleError.AddRange(new object[]{
						"Check.strPresentBy", strPresentBy
						});
					throw CmUtils.CMyException.Raise(
						TError.ErridnInventory.Mst_NNT_Update_InvalidPresentBy
						, null
						, alParamsCoupleError.ToArray()
						);
				}
				////
				if (strNNTPosition.Length < 1)
				{
					alParamsCoupleError.AddRange(new object[]{
						"Check.strNNTPosition", strNNTPosition
						});
					throw CmUtils.CMyException.Raise(
						TError.ErridnInventory.Mst_NNT_Update_InvalidNNTPosition
						, null
						, alParamsCoupleError.ToArray()
						);
				}
				////
				//if (bUpd_ProvinceCode && string.IsNullOrEmpty(strProvinceCode))
				//{
				//	////
				//	DataTable dtDB_Mst_Province = null;

				//	Mst_Province_CheckDB(
				//		ref alParamsCoupleError // alParamsCoupleError
				//		, strProvinceCode // objProvinceCode
				//		, TConst.Flag.Yes // strFlagExistToCheck
				//		, TConst.Flag.Active // strFlagActiveListToCheck
				//		, out dtDB_Mst_Province // dtDB_Mst_Province
				//		);
				//}

				////
				//if (bUpd_DistrictCode && string.IsNullOrEmpty(strDistrictCode))
				//{
				//	////
				//	DataTable dtDB_Mst_District = null;

				//	Mst_District_CheckDB(
				//		ref alParamsCoupleError // alParamsCoupleError
				//		, strProvinceCode // objProvinceCode
				//		, strDistrictCode // strDistrictCode
				//		, TConst.Flag.Yes // strFlagExistToCheck
				//		, TConst.Flag.Active // strFlagActiveListToCheck
				//		, out dtDB_Mst_District // dtDB_Mst_District
				//		);
				//}
				////
				if (bUpd_GovTaxID && string.IsNullOrEmpty(strGovTaxID))
				{
					////
					DataTable dtDB_Mst_GovTaxID = null;

					Mst_GovTaxID_CheckDB(
						ref alParamsCoupleError // alParamsCoupleError
						, strGovTaxID // objGovTaxID
						, TConst.Flag.Yes // strFlagExistToCheck
						, TConst.Flag.Active // strFlagActiveListToCheck
						, out dtDB_Mst_GovTaxID // dtDB_Mst_GovTaxID
						);
				}
				////
				if (strContactName.Length < 1)
				{
					alParamsCoupleError.AddRange(new object[]{
						"Check.strContactName", strContactName
						});
					throw CmUtils.CMyException.Raise(
						TError.ErridnInventory.Mst_NNT_Update_InvalidContactName
						, null
						, alParamsCoupleError.ToArray()
						);
				}
				////
				//if (strContactPhone.Length < 1)
				//{
				//	alParamsCoupleError.AddRange(new object[]{
				//		"Check.strContactPhone", strContactPhone
				//		});
				//	throw CmUtils.CMyException.Raise(
				//		TError.ErridnInventory.Mst_NNT_Update_InvalidContactPhone
				//		, null
				//		, alParamsCoupleError.ToArray()
				//		);
				//}
				////
				if (strContactEmail.Length < 1)
				{
					alParamsCoupleError.AddRange(new object[]{
						"Check.strContactEmail", strContactEmail
						});
					throw CmUtils.CMyException.Raise(
						TError.ErridnInventory.Mst_NNT_Update_InvalidContactEmail
						, null
						, alParamsCoupleError.ToArray()
						);
				}
			}
			#endregion

			#region // Save Mst_Chain:
			{
				// Init:
				ArrayList alColumnEffective = new ArrayList();
				string strFN = "";
				DataRow drDB = dtDB_Mst_NNT.Rows[0];
				if (bUpd_NNTFullName) { strFN = "NNTFullName"; drDB[strFN] = strNNTFullName; alColumnEffective.Add(strFN); }
				if (bUpd_NNTAddress) { strFN = "NNTAddress"; drDB[strFN] = strNNTAddress; alColumnEffective.Add(strFN); }
				if (bUpd_NNTMobile) { strFN = "NNTMobile"; drDB[strFN] = strNNTMobile; alColumnEffective.Add(strFN); }
				if (bUpd_NNTPhone) { strFN = "NNTPhone"; drDB[strFN] = strNNTPhone; alColumnEffective.Add(strFN); }
				if (bUpd_NNTFax) { strFN = "NNTFax"; drDB[strFN] = strNNTFax; alColumnEffective.Add(strFN); }
				if (bUpd_PresentBy) { strFN = "PresentBy"; drDB[strFN] = strPresentBy; alColumnEffective.Add(strFN); }
				if (bUpd_BusinessRegNo) { strFN = "BusinessRegNo"; drDB[strFN] = strBusinessRegNo; alColumnEffective.Add(strFN); }
				if (bUpd_NNTPosition) { strFN = "NNTPosition"; drDB[strFN] = strNNTPosition; alColumnEffective.Add(strFN); }
				if (bUpd_PresentIDNo) { strFN = "PresentIDNo"; drDB[strFN] = strPresentIDNo; alColumnEffective.Add(strFN); }
				if (bUpd_PresentIDType) { strFN = "PresentIDType"; drDB[strFN] = strPresentIDType; alColumnEffective.Add(strFN); }
				if (bUpd_GovTaxID) { strFN = "GovTaxID"; drDB[strFN] = strGovTaxID; alColumnEffective.Add(strFN); }
				////
				if (bUpd_ProvinceCode) { strFN = "ProvinceCode"; drDB[strFN] = strProvinceCode; alColumnEffective.Add(strFN); }
				if (bUpd_DistrictCode) { strFN = "DistrictCode"; drDB[strFN] = strDistrictCode; alColumnEffective.Add(strFN); }
				if (bUpd_BizType) { strFN = "BizType"; drDB[strFN] = strBizType; alColumnEffective.Add(strFN); }
				if (bUpd_BizFieldCode) { strFN = "BizFieldCode"; drDB[strFN] = strBizFieldCode; alColumnEffective.Add(strFN); }
				if (bUpd_BizSizeCode) { strFN = "BizSizeCode"; drDB[strFN] = strBizSizeCode; alColumnEffective.Add(strFN); }
				////
				if (bUpd_ContactName) { strFN = "ContactName"; drDB[strFN] = strContactName; alColumnEffective.Add(strFN); }
				if (bUpd_ContactPhone) { strFN = "ContactPhone"; drDB[strFN] = strContactPhone; alColumnEffective.Add(strFN); }
				if (bUpd_ContactEmail) { strFN = "ContactEmail"; drDB[strFN] = strContactEmail; alColumnEffective.Add(strFN); }
				if (bUpd_Website) { strFN = "Website"; drDB[strFN] = strWebsite; alColumnEffective.Add(strFN); }
				if (bUpd_CANumber) { strFN = "CANumber"; drDB[strFN] = strCANumber; alColumnEffective.Add(strFN); }
				if (bUpd_CAOrg) { strFN = "CAOrg"; drDB[strFN] = strCAOrg; alColumnEffective.Add(strFN); }
				if (bUpd_CAEffDTimeUTCStart) { strFN = "CAEffDTimeUTCStart"; drDB[strFN] = strCAEffDTimeUTCStart; alColumnEffective.Add(strFN); }
				if (bUpd_CAEffDTimeUTCEnd) { strFN = "CAEffDTimeUTCEnd"; drDB[strFN] = strCAEffDTimeUTCEnd; alColumnEffective.Add(strFN); }
				if (bUpd_PackageCode) { strFN = "PackageCode"; drDB[strFN] = strPackageCode; alColumnEffective.Add(strFN); }
				if (bUpd_AccNo) { strFN = "AccNo"; drDB[strFN] = strAccNo; alColumnEffective.Add(strFN); }
				if (bUpd_AccHolder) { strFN = "AccHolder"; drDB[strFN] = strAccHolder; alColumnEffective.Add(strFN); }
				if (bUpd_BankName) { strFN = "BankName"; drDB[strFN] = strBankName; alColumnEffective.Add(strFN); }
				if (bUpd_DealerType) { strFN = "DealerType"; drDB[strFN] = strDealerType; alColumnEffective.Add(strFN); }
                if (bUpd_AreaCode) { strFN = "AreaCode"; drDB[strFN] = strAreaCode; alColumnEffective.Add(strFN); }
                if (bUpd_AreaCode) { strFN = "OrgID_MA"; drDB[strFN] = strOrgID_MA; alColumnEffective.Add(strFN); }
                if (bUpd_FlagActive) { strFN = "FlagActive"; drDB[strFN] = strFlagActive; alColumnEffective.Add(strFN); }
				strFN = "LogLUDTimeUTC"; drDB[strFN] = dtimeSys.ToString("yyyy-MM-dd HH:mm:ss"); alColumnEffective.Add(strFN);
				strFN = "LogLUBy"; drDB[strFN] = strWAUserCode; alColumnEffective.Add(strFN);

				// Save:
				_cf.db.SaveData(
					"Mst_NNT"
					, dtDB_Mst_NNT
					, alColumnEffective.ToArray()
					);
			}
			#endregion
		}


		private void Mst_NNT_UpdateX_New20190822(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            , DateTime dtimeSys
            //// 
            , object objMST
            , object objNNTFullName
            , object objNNTAddress
            , object objNNTMobile
            , object objNNTPhone
            , object objNNTFax
            , object objPresentBy
            , object objBusinessRegNo
            , object objNNTPosition
            , object objPresentIDNo
            , object objPresentIDType
            ////
            , object objGovTaxID
            , object objProvinceCode
            , object objDistrictCode
            , object objBizType // objBizType
            , object objBizFieldCode // objBizFieldCode
            , object objBizSizeCode // objBizSizeCode
            , object objContactName
            , object objContactPhone
            , object objContactEmail
            , object objWebsite
            , object objCANumber
            , object objCAOrg
            , object objCAEffDTimeUTCStart
            , object objCAEffDTimeUTCEnd
            , object objPackageCode
            , object objCreatedDate
            , object objAccNo
            , object objAccHolder
            , object objBankName
            , object objTCTStatus
            , object objFlagActive
            ////
            , object objFt_Cols_Upd
            ////
            )
        {
            #region // Temp:
            string strFunctionName = "Mst_NNT_UpdateX";
            //string strErrorCodeDefault = TError.ErrHTCNM.Mst_NNT_UpdateX;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
                , "objMST", objMST
                , "objNNTFullName", objNNTFullName
                , "objNNTAddress", objNNTAddress
                , "objNNTMobile", objNNTMobile
                , "objNNTPhone", objNNTPhone
                , "objNNTFax", objNNTFax
                , "objPresentBy", objPresentBy
                , "objBusinessRegNo", objBusinessRegNo
                , "objNNTPosition", objNNTPosition
                , "objPresentIDNo", objPresentIDNo
                , "objPresentIDType", objPresentIDType
                ////
                , "objGovTaxID", objGovTaxID
                , "objProvinceCode", objProvinceCode
                , "objDistrictCode", objDistrictCode
                , "objBizType", objBizType
                , "objBizFieldCode", objBizFieldCode
                , "objBizSizeCode", objBizSizeCode
                ////
                , "objContactName", objContactName
                , "objContactPhone", objContactPhone
                , "objContactEmail", objContactEmail
                , "objWebsite", objWebsite
                , "objCANumber", objCANumber
                , "objCAOrg", objCAOrg
                , "objCAEffDTimeUTCStart", objCAEffDTimeUTCStart
                , "objCAEffDTimeUTCEnd", objCAEffDTimeUTCEnd
                , "objPackageCode", objPackageCode
                , "objCreatedDate", objCreatedDate
                , "objAccNo", objAccNo
                , "objAccHolder", objAccHolder
                , "objBankName", objBankName
                , "objTCTStatus", objTCTStatus
                , "objFlagActive", objFlagActive
                ////
                , "objFt_Cols_Upd", objFt_Cols_Upd
                });
            #endregion

            #region // Refine and Check Input:
            ////
            string strFt_Cols_Upd = TUtils.CUtils.StdParam(objFt_Cols_Upd);
            strFt_Cols_Upd = (strFt_Cols_Upd == null ? "" : strFt_Cols_Upd);
            ////
            string strMST = TUtils.CUtils.StdParam(objMST);
            string strNNTFullName = string.Format("{0}", objNNTFullName).Trim();
            string strNNTAddress = string.Format("{0}", objNNTAddress).Trim();
            string strNNTMobile = string.Format("{0}", objNNTMobile).Trim();
            string strNNTPhone = string.Format("{0}", objNNTPhone).Trim();
            string strNNTFax = string.Format("{0}", objNNTFax).Trim();
            string strPresentBy = string.Format("{0}", objPresentBy).Trim();
            string strBusinessRegNo = string.Format("{0}", objBusinessRegNo).Trim();
            string strNNTPosition = string.Format("{0}", objNNTPosition).Trim();
            string strPresentIDNo = string.Format("{0}", objPresentIDNo).Trim();
            string strPresentIDType = string.Format("{0}", objPresentIDType).Trim();
            ////
            string strGovTaxID = TUtils.CUtils.StdParam(objGovTaxID);
            string strProvinceCode = TUtils.CUtils.StdParam(objProvinceCode);
            string strDistrictCode = TUtils.CUtils.StdParam(objDistrictCode);
            string strBizType = TUtils.CUtils.StdParam(objBizType);
            string strBizFieldCode = TUtils.CUtils.StdParam(objBizFieldCode);
            string strBizSizeCode = TUtils.CUtils.StdParam(objBizSizeCode);
            ////
            string strContactName = string.Format("{0}", objContactName).Trim();
            string strContactPhone = string.Format("{0}", objContactPhone).Trim();
            string strContactEmail = string.Format("{0}", objContactEmail).Trim();
            string strWebsite = string.Format("{0}", objWebsite).Trim();
            string strCANumber = string.Format("{0}", objCANumber).Trim();
            string strCAOrg = string.Format("{0}", objCAOrg).Trim();
            string strCAEffDTimeUTCStart = TUtils.CUtils.StdDTime(objCAEffDTimeUTCStart);
            string strCAEffDTimeUTCEnd = TUtils.CUtils.StdDTime(objCAEffDTimeUTCEnd);
            string strPackageCode = string.Format("{0}", objPackageCode).Trim();
            string strAccNo = string.Format("{0}", objAccNo).Trim();
            string strAccHolder = string.Format("{0}", objAccHolder).Trim();
            string strBankName = string.Format("{0}", objBankName).Trim();
            string strTCTStatus = TUtils.CUtils.StdFlag(objTCTStatus);
            string strFlagActive = TUtils.CUtils.StdFlag(objFlagActive);
            ////
            bool bUpd_NNTFullName = strFt_Cols_Upd.Contains("Mst_NNT.NNTFullName".ToUpper());
            bool bUpd_NNTAddress = strFt_Cols_Upd.Contains("Mst_NNT.NNTAddress".ToUpper());
            bool bUpd_NNTMobile = strFt_Cols_Upd.Contains("Mst_NNT.NNTMobile".ToUpper());
            bool bUpd_NNTPhone = strFt_Cols_Upd.Contains("Mst_NNT.NNTPhone".ToUpper());
            bool bUpd_NNTFax = strFt_Cols_Upd.Contains("Mst_NNT.NNTFax".ToUpper());
            bool bUpd_PresentBy = strFt_Cols_Upd.Contains("Mst_NNT.PresentBy".ToUpper());
            bool bUpd_BusinessRegNo = strFt_Cols_Upd.Contains("Mst_NNT.BusinessRegNo".ToUpper());
            bool bUpd_NNTPosition = strFt_Cols_Upd.Contains("Mst_NNT.NNTPosition".ToUpper());
            bool bUpd_PresentIDNo = strFt_Cols_Upd.Contains("Mst_NNT.PresentIDNo".ToUpper());
            bool bUpd_PresentIDType = strFt_Cols_Upd.Contains("Mst_NNT.PresentIDType".ToUpper());
            ////
            bool bUpd_GovTaxID = strFt_Cols_Upd.Contains("Mst_NNT.GovTaxID".ToUpper());
            bool bUpd_ProvinceCode = strFt_Cols_Upd.Contains("Mst_NNT.ProvinceCode".ToUpper());
            bool bUpd_DistrictCode = strFt_Cols_Upd.Contains("Mst_NNT.DistrictCode".ToUpper());
            bool bUpd_BizType = strFt_Cols_Upd.Contains("Mst_NNT.BizType".ToUpper());
            bool bUpd_BizFieldCode = strFt_Cols_Upd.Contains("Mst_NNT.BizFieldCode".ToUpper());
            bool bUpd_BizSizeCode = strFt_Cols_Upd.Contains("Mst_NNT.BizSizeCode".ToUpper());
            ///
            bool bUpd_ContactName = strFt_Cols_Upd.Contains("Mst_NNT.ContactName".ToUpper());
            bool bUpd_ContactPhone = strFt_Cols_Upd.Contains("Mst_NNT.ContactPhone".ToUpper());
            bool bUpd_ContactEmail = strFt_Cols_Upd.Contains("Mst_NNT.ContactEmail".ToUpper());
            bool bUpd_Website = strFt_Cols_Upd.Contains("Mst_NNT.Website".ToUpper());
            bool bUpd_CANumber = strFt_Cols_Upd.Contains("Mst_NNT.CANumber".ToUpper());
            bool bUpd_CAOrg = strFt_Cols_Upd.Contains("Mst_NNT.CAOrg".ToUpper());
            bool bUpd_CAEffDTimeUTCStart = strFt_Cols_Upd.Contains("Mst_NNT.CAEffDTimeUTCStart".ToUpper());
            bool bUpd_CAEffDTimeUTCEnd = strFt_Cols_Upd.Contains("Mst_NNT.CAEffDTimeUTCEnd".ToUpper());
            bool bUpd_PackageCode = strFt_Cols_Upd.Contains("Mst_NNT.PackageCode".ToUpper());
            bool bUpd_CreatedDate = strFt_Cols_Upd.Contains("Mst_NNT.CreatedDate".ToUpper());
            bool bUpd_AccNo = strFt_Cols_Upd.Contains("Mst_NNT.AccNo".ToUpper());
            bool bUpd_AccHolder = strFt_Cols_Upd.Contains("Mst_NNT.AccHolder".ToUpper());
            bool bUpd_BankName = strFt_Cols_Upd.Contains("Mst_NNT.BankName".ToUpper());
            bool bUpd_FlagActive = strFt_Cols_Upd.Contains("Mst_NNT.FlagActive".ToUpper());

            ////
            DataTable dtDB_Mst_NNT = null;
            {
                ////
                Mst_NNT_CheckDB(
                    ref alParamsCoupleError // alParamsCoupleError
                    , strMST // strMST 
                    , TConst.Flag.Yes // strFlagExistToCheck
                    , "" // strFlagActiveListToCheck
                    , "" // strTCTStatusListToCheck
                    , out dtDB_Mst_NNT // dtDB_Mst_Organ
                    );
                ////
                if (strNNTFullName.Length < 1)
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.strNNTFullName", strNNTFullName
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Mst_NNT_Update_InvalidNNTFullName
                        , null
                        , alParamsCoupleError.ToArray()
                        );
                }
                ////
                if (strNNTAddress.Length < 1)
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.strNNTAddress", strNNTAddress
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Mst_NNT_Update_InvalidNNTAddress
                        , null
                        , alParamsCoupleError.ToArray()
                        );
                }
                ////
                if (strPresentBy.Length < 1)
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.strPresentBy", strPresentBy
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Mst_NNT_Update_InvalidPresentBy
                        , null
                        , alParamsCoupleError.ToArray()
                        );
                }
                ////
                if (strNNTPosition.Length < 1)
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.strNNTPosition", strNNTPosition
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Mst_NNT_Update_InvalidNNTPosition
                        , null
                        , alParamsCoupleError.ToArray()
                        );
                }
                ////
                if (bUpd_ProvinceCode && string.IsNullOrEmpty(strProvinceCode))
                {
                    ////
                    DataTable dtDB_Mst_Province = null;

                    Mst_Province_CheckDB(
                        ref alParamsCoupleError // alParamsCoupleError
                        , strProvinceCode // objProvinceCode
                        , TConst.Flag.Yes // strFlagExistToCheck
                        , TConst.Flag.Active // strFlagActiveListToCheck
                        , out dtDB_Mst_Province // dtDB_Mst_Province
                        );
                }

                ////
                if (bUpd_DistrictCode && string.IsNullOrEmpty(strDistrictCode))
                {
                    ////
                    DataTable dtDB_Mst_District = null;

                    Mst_District_CheckDB(
                        ref alParamsCoupleError // alParamsCoupleError
                        , strProvinceCode // objProvinceCode
                        , strDistrictCode // strDistrictCode
                        , TConst.Flag.Yes // strFlagExistToCheck
                        , TConst.Flag.Active // strFlagActiveListToCheck
                        , out dtDB_Mst_District // dtDB_Mst_District
                        );
                }
                ////
                if (bUpd_GovTaxID && string.IsNullOrEmpty(strGovTaxID))
                {
                    ////
                    DataTable dtDB_Mst_GovTaxID = null;

                    Mst_GovTaxID_CheckDB(
                        ref alParamsCoupleError // alParamsCoupleError
                        , strGovTaxID // objGovTaxID
                        , TConst.Flag.Yes // strFlagExistToCheck
                        , TConst.Flag.Active // strFlagActiveListToCheck
                        , out dtDB_Mst_GovTaxID // dtDB_Mst_GovTaxID
                        );
                }
                ////
                if (strContactName.Length < 1)
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.strContactName", strContactName
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Mst_NNT_Update_InvalidContactName
                        , null
                        , alParamsCoupleError.ToArray()
                        );
                }
                ////
                if (strContactPhone.Length < 1)
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.strContactPhone", strContactPhone
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Mst_NNT_Update_InvalidContactPhone
                        , null
                        , alParamsCoupleError.ToArray()
                        );
                }
                ////
                if (strContactEmail.Length < 1)
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.strContactEmail", strContactEmail
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Mst_NNT_Update_InvalidContactEmail
                        , null
                        , alParamsCoupleError.ToArray()
                        );
                }
            }
            #endregion

            #region // Save Mst_Chain:
            {
                // Init:
                ArrayList alColumnEffective = new ArrayList();
                string strFN = "";
                DataRow drDB = dtDB_Mst_NNT.Rows[0];
                if (bUpd_NNTFullName) { strFN = "NNTFullName"; drDB[strFN] = strNNTFullName; alColumnEffective.Add(strFN); }
                if (bUpd_NNTAddress) { strFN = "NNTAddress"; drDB[strFN] = strNNTAddress; alColumnEffective.Add(strFN); }
                if (bUpd_NNTMobile) { strFN = "NNTMobile"; drDB[strFN] = strNNTMobile; alColumnEffective.Add(strFN); }
                if (bUpd_NNTPhone) { strFN = "NNTPhone"; drDB[strFN] = strNNTPhone; alColumnEffective.Add(strFN); }
                if (bUpd_NNTFax) { strFN = "NNTFax"; drDB[strFN] = strNNTFax; alColumnEffective.Add(strFN); }
                if (bUpd_PresentBy) { strFN = "PresentBy"; drDB[strFN] = strPresentBy; alColumnEffective.Add(strFN); }
                if (bUpd_BusinessRegNo) { strFN = "BusinessRegNo"; drDB[strFN] = strBusinessRegNo; alColumnEffective.Add(strFN); }
                if (bUpd_NNTPosition) { strFN = "NNTPosition"; drDB[strFN] = strNNTPosition; alColumnEffective.Add(strFN); }
                if (bUpd_PresentIDNo) { strFN = "PresentIDNo"; drDB[strFN] = strPresentIDNo; alColumnEffective.Add(strFN); }
                if (bUpd_PresentIDType) { strFN = "PresentIDType"; drDB[strFN] = strPresentIDType; alColumnEffective.Add(strFN); }
                if (bUpd_GovTaxID) { strFN = "GovTaxID"; drDB[strFN] = strGovTaxID; alColumnEffective.Add(strFN); }
                ////
                if (bUpd_ProvinceCode) { strFN = "ProvinceCode"; drDB[strFN] = strProvinceCode; alColumnEffective.Add(strFN); }
                if (bUpd_DistrictCode) { strFN = "DistrictCode"; drDB[strFN] = strDistrictCode; alColumnEffective.Add(strFN); }
                if (bUpd_BizType) { strFN = "BizType"; drDB[strFN] = strBizType; alColumnEffective.Add(strFN); }
                if (bUpd_BizFieldCode) { strFN = "BizFieldCode"; drDB[strFN] = strBizFieldCode; alColumnEffective.Add(strFN); }
                if (bUpd_BizSizeCode) { strFN = "BizSizeCode"; drDB[strFN] = strBizSizeCode; alColumnEffective.Add(strFN); }
                ////
                if (bUpd_ContactName) { strFN = "ContactName"; drDB[strFN] = strContactName; alColumnEffective.Add(strFN); }
                if (bUpd_ContactPhone) { strFN = "ContactPhone"; drDB[strFN] = strContactPhone; alColumnEffective.Add(strFN); }
                if (bUpd_ContactEmail) { strFN = "ContactEmail"; drDB[strFN] = strContactEmail; alColumnEffective.Add(strFN); }
                if (bUpd_Website) { strFN = "Website"; drDB[strFN] = strWebsite; alColumnEffective.Add(strFN); }
                if (bUpd_CANumber) { strFN = "CANumber"; drDB[strFN] = strCANumber; alColumnEffective.Add(strFN); }
                if (bUpd_CAOrg) { strFN = "CAOrg"; drDB[strFN] = strCAOrg; alColumnEffective.Add(strFN); }
                if (bUpd_CAEffDTimeUTCStart) { strFN = "CAEffDTimeUTCStart"; drDB[strFN] = strCAEffDTimeUTCStart; alColumnEffective.Add(strFN); }
                if (bUpd_CAEffDTimeUTCEnd) { strFN = "CAEffDTimeUTCEnd"; drDB[strFN] = strCAEffDTimeUTCEnd; alColumnEffective.Add(strFN); }
                if (bUpd_PackageCode) { strFN = "PackageCode"; drDB[strFN] = strPackageCode; alColumnEffective.Add(strFN); }
                if (bUpd_AccNo) { strFN = "AccNo"; drDB[strFN] = strAccNo; alColumnEffective.Add(strFN); }
                if (bUpd_AccHolder) { strFN = "AccHolder"; drDB[strFN] = strAccHolder; alColumnEffective.Add(strFN); }
                if (bUpd_BankName) { strFN = "BankName"; drDB[strFN] = strBankName; alColumnEffective.Add(strFN); }
                if (bUpd_FlagActive) { strFN = "FlagActive"; drDB[strFN] = strFlagActive; alColumnEffective.Add(strFN); }
                strFN = "LogLUDTimeUTC"; drDB[strFN] = dtimeSys.ToString("yyyy-MM-dd HH:mm:ss"); alColumnEffective.Add(strFN);
                strFN = "LogLUBy"; drDB[strFN] = strWAUserCode; alColumnEffective.Add(strFN);

                // Save:
                _cf.db.SaveData(
                    "Mst_NNT"
                    , dtDB_Mst_NNT
                    , alColumnEffective.ToArray()
                    );
            }
            #endregion
        }

        public DataSet WAS_RptSv_Mst_NNT_UpdateRegisterStatus(
            ref ArrayList alParamsCoupleError
            , RQ_Mst_NNT objRQ_Mst_NNT
            ////
            , out RT_Mst_NNT objRT_Mst_NNT
            )
        {
            #region // Temp:
            string strTid = objRQ_Mst_NNT.Tid;
            objRT_Mst_NNT = new RT_Mst_NNT();
            DataSet mdsResult = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            DateTime dtimeSys = DateTime.UtcNow;
            //DataSet mdsExec = null;
            //DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(objRQ_Mst_NNT.Tid);
            //int nTidSeq = 0;
            //bool bNeedTransaction = true;
            string strFunctionName = "WAS_RptSv_Mst_NNT_UpdateRegisterStatus";
            string strErrorCodeDefault = TError.ErridnInventory.WAS_RptSv_Mst_NNT_UpdateRegisterStatus;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
				});
            #endregion

            try
            {
                #region // Init:
                #endregion

                #region // Refine and Check Input:
                List<Mst_NNT> lst_Mst_NNT = new List<Mst_NNT>();
                #endregion

                #region // Mst_NNT_Update:
                mdsResult = RptSv_Mst_NNT_UpdateRegisterStatus(
                    objRQ_Mst_NNT.Tid // strTid
                    , objRQ_Mst_NNT.GwUserCode // strGwUserCode
                    , objRQ_Mst_NNT.GwPassword // strGwPassword
                    , objRQ_Mst_NNT.WAUserCode // strUserCode
                    , objRQ_Mst_NNT.WAUserPassword // strUserPassword
                    , ref alParamsCoupleError // alParamsCoupleError
                                              ////
                    , objRQ_Mst_NNT.Mst_NNT.MST // objMST
                    , objRQ_Mst_NNT.Mst_NNT.RegisterStatus // objRegisterStatus
                    , objRQ_Mst_NNT.Mst_NNT.Remark// objRemark
                    );
                #endregion

                // Return Good:
                return mdsResult;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsResult
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Write ReturnLog:
                //_cf.ProcessBizReturn(
                //	ref mdsResult // mdsFinal
                //	, strTid // strTid
                //	, strFunctionName // strFunctionName
                //	);
                #endregion
            }
        }

        public DataSet RptSv_Mst_NNT_UpdateRegisterStatus(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            ////
            , object objMST
            , object objRegisterStatus
            , object objRemark
            )
        {
            #region // Temp:
            DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            //int nTidSeq = 0;
            DateTime dtimeSys = DateTime.UtcNow;
            string strFunctionName = "RptSv_Mst_NNT_UpdateRegisterStatus";
            string strErrorCodeDefault = TError.ErridnInventory.RptSv_Mst_NNT_UpdateRegisterStatus;
            alParamsCoupleError.AddRange(new object[]{
                    "strFunctionName", strFunctionName
                    , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
			        ////
                    , "objMST", objMST
                    , "objRegisterStatus", objRegisterStatus
                    , "objRemark", objRemark
                    });
            #endregion

            try
            {
                #region // Init:
                //_cf.db.LogUserId = _cf.sinf.strUserCode;
                _cf.db.BeginTransaction();

                // Write RequestLog:
                _cf.ProcessBizReq_OutSide(
                    strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    , alParamsCoupleError // alParamsCoupleError
                    );

                // Sys_User_CheckAuthentication:
                //RptSv_Sys_User_CheckAuthentication(
                //    ref alParamsCoupleError
                //    , strWAUserCode
                //    , strWAUserPassword
                //    );

                //// Check Access/Deny:
                //Sys_Access_CheckDenyV30(
                //    ref alParamsCoupleError
                //    , strWAUserCode
                //    , strFunctionName
                //    );
                #endregion

                #region // Mst_NNT_UpdateX:
                //DataSet dsGetData = null;
                {
                    Mst_NNT_UpdateRegisterStatusX(
                        strTid // strTid
                        , strGwUserCode // strGwUserCode
                        , strGwPassword // strGwPassword
                        , strWAUserCode // strWAUserCode
                        , strWAUserPassword // strWAUserPassword
                        , ref alParamsCoupleError // alParamsCoupleError
                        , dtimeSys // dtimeSys
                                   ////
                        , objMST // objMST
                        , objRegisterStatus // objRegisterStatus
                        , objRemark // objRemark
                        );
                }
                ////
                //CmUtils.DataUtils.MoveDataTable(ref mdsFinal, ref dsGetData);
                #endregion

                // Return Good:
                TDALUtils.DBUtils.CommitSafety(_cf.db);
                mdsFinal.AcceptChanges();
                return mdsFinal;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Rollback:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);

                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsFinal
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Rollback and Release resources:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);
                TDALUtils.DBUtils.ReleaseAllSemaphore(_cf.db_Sys, true);

                // Write ReturnLog:
                _cf.ProcessBizReturn_OutSide(
                    ref mdsFinal // mdsFinal
                    , strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    );
                #endregion
            }
        }

        public DataSet WAS_Mst_NNT_CreateForNetwork(
            ref ArrayList alParamsCoupleError
            , RQ_Mst_NNT objRQ_Mst_NNT
            ////
            , out RT_Mst_NNT objRT_Mst_NNT
            )
        {
            #region // Temp:
            string strTid = objRQ_Mst_NNT.Tid;
            objRT_Mst_NNT = new RT_Mst_NNT();
            DataSet mdsResult = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            DateTime dtimeSys = DateTime.UtcNow;
            //DataSet mdsExec = null;
            //DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(objRQ_Mst_NNT.Tid);
            //int nTidSeq = 0;
            //bool bNeedTransaction = true;
            string strFunctionName = "WAS_Mst_NNT_CreateForNetwork";
            string strErrorCodeDefault = TError.ErridnInventory.WAS_Mst_NNT_CreateForNetwork;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
				});
            #endregion

            try
            {
                #region // Init:
                #endregion

                #region // Refine and Check Input:
                List<Mst_NNT> lst_Mst_NNT = new List<Mst_NNT>();
                #endregion

                #region // Inos_OrgService_CreateOrgForNetworkX
                object objOrgId = null;
                Inos_OrgService_CreateOrgForNetwork(
                    objRQ_Mst_NNT.Tid // strTid
                    , objRQ_Mst_NNT.GwUserCode // strGwUserCode
                    , objRQ_Mst_NNT.GwPassword // strGwPassword
                    , objRQ_Mst_NNT.WAUserCode // strUserCode
                    , objRQ_Mst_NNT.WAUserPassword // strUserPassword
					, objRQ_Mst_NNT.AccessToken // strAccessToken
					, ref alParamsCoupleError // alParamsCoupleError
                    , objRQ_Mst_NNT.Mst_NNT.MST // objMST
                    ////
                    , objRQ_Mst_NNT.Mst_NNT.NNTFullName // objNNTFullName
                    , objRQ_Mst_NNT.Mst_NNT.ContactName // objContactName
                    , objRQ_Mst_NNT.Mst_NNT.ContactPhone // ContactPhone
                    , objRQ_Mst_NNT.Mst_NNT.ContactEmail // ContactEmail
                    ////
                    , objRQ_Mst_NNT.Mst_NNT.BizType //  BizType
                    , objRQ_Mst_NNT.Mst_NNT.BizFieldCode // BizFieldCode
                    , objRQ_Mst_NNT.Mst_NNT.BizSizeCode // BizSizeCode
                    , out objOrgId
                    );
                #endregion

                #region // Mst_Org_Create
                mdsResult = Mst_Org_Create(
                    objRQ_Mst_NNT.Tid // strTid
                    , objRQ_Mst_NNT.GwUserCode // strGwUserCode
                    , objRQ_Mst_NNT.GwPassword // strGwPassword
                    , objRQ_Mst_NNT.WAUserCode // strUserCode
                    , objRQ_Mst_NNT.WAUserPassword // strUserPassword
                    , ref alParamsCoupleError // alParamsCoupleError
                    , dtimeSys
                    ////
                    , objOrgId
                    , nNetworkID
                    , objRQ_Mst_NNT.Mst_NNT.Remark
                    );
                #endregion

                #region // OS_PrdCenter_Mst_Org_Create
                mdsResult = OS_PrdCenter_Mst_Org_Create(
                    objRQ_Mst_NNT.Tid // strTid
                    , objRQ_Mst_NNT.GwUserCode // strGwUserCode
                    , objRQ_Mst_NNT.GwPassword // strGwPassword
                    , objRQ_Mst_NNT.WAUserCode // strUserCode
                    , objRQ_Mst_NNT.WAUserPassword // strUserPassword
                    , ref alParamsCoupleError // alParamsCoupleError
                    ////
                    , objOrgId
                    , nNetworkID
                    , objRQ_Mst_NNT.Mst_NNT.Remark
                    );
                #endregion

                #region // OS_MstSv_OrgInNetwork_Create:
                mdsResult = OS_MstSv_OrgInNetwork_Create(
                    objRQ_Mst_NNT.Tid // strTid
                    , objRQ_Mst_NNT.GwUserCode // strGwUserCode
                    , objRQ_Mst_NNT.GwPassword // strGwPassword
                    , objRQ_Mst_NNT.WAUserCode // strUserCode
                    , objRQ_Mst_NNT.WAUserPassword // strUserPassword
                    , nNetworkID.ToString()
                    , ref alParamsCoupleError // alParamsCoupleError
                                              ////
                    , objOrgId
                    , objRQ_Mst_NNT.Mst_NNT.MST
                    );
                #endregion

                #region // WS_Mst_NNT_CreateForNetwork:
                mdsResult = Mst_NNT_CreateForNetwork(
                    objRQ_Mst_NNT.Tid // strTid
                    , objRQ_Mst_NNT.GwUserCode // strGwUserCode
                    , objRQ_Mst_NNT.GwPassword // strGwPassword
                    , objRQ_Mst_NNT.WAUserCode // strUserCode
                    , objRQ_Mst_NNT.WAUserPassword // strUserPassword
                    , ref alParamsCoupleError // alParamsCoupleError
                                              ////
                    , objRQ_Mst_NNT.Mst_NNT.MST // objMST
                    , objOrgId // strOrgID
                    , objRQ_Mst_NNT.Mst_NNT.NNTFullName // objNNTFullName
                    , objRQ_Mst_NNT.Mst_NNT.MSTParent // objMSTParent
                    , objRQ_Mst_NNT.Mst_NNT.ProvinceCode // objProvinceCode
                    , objRQ_Mst_NNT.Mst_NNT.DistrictCode // objDistrictCode
                                                         //, objRQ_Mst_NNT.Mst_NNT.NNTType // objNNTType
                    , objRQ_Mst_NNT.Mst_NNT.DLCode // objDLCode
                    , objRQ_Mst_NNT.Mst_NNT.NNTAddress // objAddress
                    , objRQ_Mst_NNT.Mst_NNT.NNTMobile // objMobile
                    , objRQ_Mst_NNT.Mst_NNT.NNTPhone // objPhone
                    , objRQ_Mst_NNT.Mst_NNT.NNTFax // objFax
                    , objRQ_Mst_NNT.Mst_NNT.PresentBy // objPresentBy
                    , objRQ_Mst_NNT.Mst_NNT.BusinessRegNo // objBusinessRegNo
                    , objRQ_Mst_NNT.Mst_NNT.NNTPosition // objPosition
                    , objRQ_Mst_NNT.Mst_NNT.PresentIDNo // objPresentIDNo
                    , objRQ_Mst_NNT.Mst_NNT.PresentIDType // objPresentIDType
                    , objRQ_Mst_NNT.Mst_NNT.GovTaxID // objGovTaxID
                    , objRQ_Mst_NNT.Mst_NNT.ContactName // objContactName
                    , objRQ_Mst_NNT.Mst_NNT.ContactPhone // objContactPhone
                    , objRQ_Mst_NNT.Mst_NNT.ContactEmail // objContactEmail
                    , objRQ_Mst_NNT.Mst_NNT.Website // objWebsite
                    , objRQ_Mst_NNT.Mst_NNT.CANumber // objCANumber
                    , objRQ_Mst_NNT.Mst_NNT.CAOrg // objCAOrg
                    , objRQ_Mst_NNT.Mst_NNT.CAEffDTimeUTCStart // objCAEffDTimeUTCStart
                    , objRQ_Mst_NNT.Mst_NNT.CAEffDTimeUTCEnd // objCAEffDTimeUTCEnd
                    , objRQ_Mst_NNT.Mst_NNT.PackageCode // objPackageCode
                    , objRQ_Mst_NNT.Mst_NNT.CreatedDate // objCreatedDate
                    , objRQ_Mst_NNT.Mst_NNT.AccNo // objAccNo
                    , objRQ_Mst_NNT.Mst_NNT.AccHolder // objAccHolder
                    , objRQ_Mst_NNT.Mst_NNT.BankName // objBankName
                    , objRQ_Mst_NNT.Mst_NNT.BizType // objBizType
                    , objRQ_Mst_NNT.Mst_NNT.BizFieldCode // objBizFieldCode
                    , objRQ_Mst_NNT.Mst_NNT.BizSizeCode // objBizSizeCode
                    );
                #endregion

                // Return Good:
                return mdsResult;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsResult
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Write ReturnLog:
                //_cf.ProcessBizReturn(
                //	ref mdsResult // mdsFinal
                //	, strTid // strTid
                //	, strFunctionName // strFunctionName
                //	);
                #endregion
            }
        }

		public DataSet WAS_Mst_NNT_CreateForNetwork_New20200207(
			ref ArrayList alParamsCoupleError
			, RQ_Mst_NNT objRQ_Mst_NNT
			////
			, out RT_Mst_NNT objRT_Mst_NNT
			)
		{
			#region // Temp:
			string strTid = objRQ_Mst_NNT.Tid;
			objRT_Mst_NNT = new RT_Mst_NNT();
			DataSet mdsResult = CmUtils.CMyDataSet.NewMyDataSet(strTid);
			DateTime dtimeSys = DateTime.UtcNow;
			//DataSet mdsExec = null;
			//DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(objRQ_Mst_NNT.Tid);
			//int nTidSeq = 0;
			//bool bNeedTransaction = true;
			string strFunctionName = "WAS_Mst_NNT_CreateForNetwork";
			string strErrorCodeDefault = TError.ErridnInventory.WAS_Mst_NNT_CreateForNetwork;
			alParamsCoupleError.AddRange(new object[]{
				"strFunctionName", strFunctionName
				, "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
				});
			#endregion

			try
			{
				#region // Init:
				#endregion

				#region // Refine and Check Input:
				List<Mst_NNT> lst_Mst_NNT = new List<Mst_NNT>();
				#endregion

				#region // Inos_OrgService_CreateOrgForNetworkX
				object objOrgId = null;
				Inos_OrgService_CreateOrgForNetwork(
					objRQ_Mst_NNT.Tid // strTid
					, objRQ_Mst_NNT.GwUserCode // strGwUserCode
					, objRQ_Mst_NNT.GwPassword // strGwPassword
					, objRQ_Mst_NNT.WAUserCode // strUserCode
					, objRQ_Mst_NNT.WAUserPassword // strUserPassword
					, objRQ_Mst_NNT.AccessToken // strAccessToken
					, ref alParamsCoupleError // alParamsCoupleError
					, objRQ_Mst_NNT.Mst_NNT.MST // objMST
												////
					, objRQ_Mst_NNT.Mst_NNT.NNTFullName // objNNTFullName
					, objRQ_Mst_NNT.Mst_NNT.ContactName // objContactName
					, objRQ_Mst_NNT.Mst_NNT.ContactPhone // ContactPhone
					, objRQ_Mst_NNT.Mst_NNT.ContactEmail // ContactEmail
														 ////
					, objRQ_Mst_NNT.Mst_NNT.BizType //  BizType
					, objRQ_Mst_NNT.Mst_NNT.BizFieldCode // BizFieldCode
					, objRQ_Mst_NNT.Mst_NNT.BizSizeCode // BizSizeCode
					, out objOrgId
					);
				#endregion

				#region // OS_MstSv_OrgInNetwork_Create:
				mdsResult = OS_MstSv_OrgInNetwork_Create(
					objRQ_Mst_NNT.Tid // strTid
					, objRQ_Mst_NNT.GwUserCode // strGwUserCode
					, objRQ_Mst_NNT.GwPassword // strGwPassword
					, objRQ_Mst_NNT.WAUserCode // strUserCode
					, objRQ_Mst_NNT.WAUserPassword // strUserPassword
					, nNetworkID.ToString()
					, ref alParamsCoupleError // alParamsCoupleError
											  ////
					, objOrgId
					, objRQ_Mst_NNT.Mst_NNT.MST
					);

				string strOrgIDSln = Convert.ToString(CmUtils.CMyDataSet.GetRemark(mdsResult));
				#endregion

				#region // Mst_Org_Create
				mdsResult = Mst_Org_Create_New20200208(
					objRQ_Mst_NNT.Tid // strTid
					, objRQ_Mst_NNT.GwUserCode // strGwUserCode
					, objRQ_Mst_NNT.GwPassword // strGwPassword
					, objRQ_Mst_NNT.WAUserCode // strUserCode
					, objRQ_Mst_NNT.WAUserPassword // strUserPassword
					, ref alParamsCoupleError // alParamsCoupleError
					, dtimeSys
					////
					, objOrgId
					, nNetworkID
					, strOrgIDSln
					, objRQ_Mst_NNT.Mst_NNT.Remark
					);
				#endregion

				#region // WS_Mst_NNT_CreateForNetwork:
				mdsResult = Mst_NNT_CreateForNetwork_New20200208(
					objRQ_Mst_NNT.Tid // strTid
					, objRQ_Mst_NNT.GwUserCode // strGwUserCode
					, objRQ_Mst_NNT.GwPassword // strGwPassword
					, objRQ_Mst_NNT.WAUserCode // strUserCode
					, objRQ_Mst_NNT.WAUserPassword // strUserPassword
					, ref alParamsCoupleError // alParamsCoupleError
											  ////
					, objRQ_Mst_NNT.Mst_NNT.MST // objMST
					, objOrgId // strOrgID
					, objRQ_Mst_NNT.Mst_NNT.NNTFullName // objNNTFullName
					, objRQ_Mst_NNT.Mst_NNT.MSTParent // objMSTParent
					, objRQ_Mst_NNT.Mst_NNT.ProvinceCode // objProvinceCode
					, objRQ_Mst_NNT.Mst_NNT.DistrictCode // objDistrictCode
														 //, objRQ_Mst_NNT.Mst_NNT.NNTType // objNNTType
					, objRQ_Mst_NNT.Mst_NNT.DLCode // objDLCode
					, objRQ_Mst_NNT.Mst_NNT.NNTAddress // objAddress
					, objRQ_Mst_NNT.Mst_NNT.NNTMobile // objMobile
					, objRQ_Mst_NNT.Mst_NNT.NNTPhone // objPhone
					, objRQ_Mst_NNT.Mst_NNT.NNTFax // objFax
					, objRQ_Mst_NNT.Mst_NNT.PresentBy // objPresentBy
					, objRQ_Mst_NNT.Mst_NNT.BusinessRegNo // objBusinessRegNo
					, objRQ_Mst_NNT.Mst_NNT.NNTPosition // objPosition
					, objRQ_Mst_NNT.Mst_NNT.PresentIDNo // objPresentIDNo
					, objRQ_Mst_NNT.Mst_NNT.PresentIDType // objPresentIDType
					, objRQ_Mst_NNT.Mst_NNT.GovTaxID // objGovTaxID
					, objRQ_Mst_NNT.Mst_NNT.ContactName // objContactName
					, objRQ_Mst_NNT.Mst_NNT.ContactPhone // objContactPhone
					, objRQ_Mst_NNT.Mst_NNT.ContactEmail // objContactEmail
					, objRQ_Mst_NNT.Mst_NNT.Website // objWebsite
					, objRQ_Mst_NNT.Mst_NNT.CANumber // objCANumber
					, objRQ_Mst_NNT.Mst_NNT.CAOrg // objCAOrg
					, objRQ_Mst_NNT.Mst_NNT.CAEffDTimeUTCStart // objCAEffDTimeUTCStart
					, objRQ_Mst_NNT.Mst_NNT.CAEffDTimeUTCEnd // objCAEffDTimeUTCEnd
					, objRQ_Mst_NNT.Mst_NNT.PackageCode // objPackageCode
					, objRQ_Mst_NNT.Mst_NNT.CreatedDate // objCreatedDate
					, objRQ_Mst_NNT.Mst_NNT.AccNo // objAccNo
					, objRQ_Mst_NNT.Mst_NNT.AccHolder // objAccHolder
					, objRQ_Mst_NNT.Mst_NNT.BankName // objBankName
					, objRQ_Mst_NNT.Mst_NNT.BizType // objBizType
					, objRQ_Mst_NNT.Mst_NNT.BizFieldCode // objBizFieldCode
					, objRQ_Mst_NNT.Mst_NNT.BizSizeCode // objBizSizeCode
					, objRQ_Mst_NNT.Mst_NNT.DealerType // objDealerType
					, objRQ_Mst_NNT.Mst_NNT.AreaCode // objAreaCode
                    , objRQ_Mst_NNT.Mst_NNT.OrgID_MA // objOrgID_MA
                    );
				#endregion

				#region // OS_RptSv_Mst_NNT_Create:
				mdsResult = OS_RptSv_Mst_NNT_Create(
					objRQ_Mst_NNT.Tid // strTid
					, objRQ_Mst_NNT.GwUserCode // strGwUserCode
					, objRQ_Mst_NNT.GwPassword // strGwPassword
					, objRQ_Mst_NNT.WAUserCode // strUserCode
					, objRQ_Mst_NNT.WAUserPassword // strUserPassword
					, ref alParamsCoupleError // alParamsCoupleError
											  ////
					, objRQ_Mst_NNT.Mst_NNT.MST // objMST
					, objOrgId // strOrgID
					, objRQ_Mst_NNT.Mst_NNT.NNTFullName // objNNTFullName
					, objRQ_Mst_NNT.Mst_NNT.MSTParent // objMSTParent
					, objRQ_Mst_NNT.Mst_NNT.ProvinceCode // objProvinceCode
					, objRQ_Mst_NNT.Mst_NNT.DistrictCode // objDistrictCode
														 //, objRQ_Mst_NNT.Mst_NNT.NNTType // objNNTType
					, objRQ_Mst_NNT.Mst_NNT.DLCode // objDLCode
					, objRQ_Mst_NNT.Mst_NNT.NNTAddress // objAddress
					, objRQ_Mst_NNT.Mst_NNT.NNTMobile // objMobile
					, objRQ_Mst_NNT.Mst_NNT.NNTPhone // objPhone
					, objRQ_Mst_NNT.Mst_NNT.NNTFax // objFax
					, objRQ_Mst_NNT.Mst_NNT.PresentBy // objPresentBy
					, objRQ_Mst_NNT.Mst_NNT.BusinessRegNo // objBusinessRegNo
					, objRQ_Mst_NNT.Mst_NNT.NNTPosition // objPosition
					, objRQ_Mst_NNT.Mst_NNT.PresentIDNo // objPresentIDNo
					, objRQ_Mst_NNT.Mst_NNT.PresentIDType // objPresentIDType
					, objRQ_Mst_NNT.Mst_NNT.GovTaxID // objGovTaxID
					, objRQ_Mst_NNT.Mst_NNT.ContactName // objContactName
					, objRQ_Mst_NNT.Mst_NNT.ContactPhone // objContactPhone
					, objRQ_Mst_NNT.Mst_NNT.ContactEmail // objContactEmail
					, objRQ_Mst_NNT.Mst_NNT.Website // objWebsite
					, objRQ_Mst_NNT.Mst_NNT.CANumber // objCANumber
					, objRQ_Mst_NNT.Mst_NNT.CAOrg // objCAOrg
					, objRQ_Mst_NNT.Mst_NNT.CAEffDTimeUTCStart // objCAEffDTimeUTCStart
					, objRQ_Mst_NNT.Mst_NNT.CAEffDTimeUTCEnd // objCAEffDTimeUTCEnd
					, objRQ_Mst_NNT.Mst_NNT.PackageCode // objPackageCode
					, objRQ_Mst_NNT.Mst_NNT.CreatedDate // objCreatedDate
					, objRQ_Mst_NNT.Mst_NNT.AccNo // objAccNo
					, objRQ_Mst_NNT.Mst_NNT.AccHolder // objAccHolder
					, objRQ_Mst_NNT.Mst_NNT.BankName // objBankName
					, objRQ_Mst_NNT.Mst_NNT.BizType // objBizType
					, objRQ_Mst_NNT.Mst_NNT.BizFieldCode // objBizFieldCode
					, objRQ_Mst_NNT.Mst_NNT.BizSizeCode // objBizSizeCode
					, objRQ_Mst_NNT.Mst_NNT.DealerType // objDealerType
					//
					, strOrgIDSln
					);
				#endregion

				// Return Good:
				return mdsResult;
			}
			catch (Exception exc)
			{
				#region // Catch of try:
				// Return Bad:
				return TUtils.CProcessExc.Process(
					ref mdsResult
					, exc
					, strErrorCodeDefault
					, alParamsCoupleError.ToArray()
					);
				#endregion
			}
			finally
			{
				#region // Finally of try:
				// Write ReturnLog:
				//_cf.ProcessBizReturn(
				//	ref mdsResult // mdsFinal
				//	, strTid // strTid
				//	, strFunctionName // strFunctionName
				//	);
				#endregion
			}
		}

		public DataSet WAS_Mst_NNT_CreateForNetwork_New20200416(
			ref ArrayList alParamsCoupleError
			, RQ_Mst_NNT objRQ_Mst_NNT
			////
			, out RT_Mst_NNT objRT_Mst_NNT
			)
		{
			#region // Temp:
			string strTid = objRQ_Mst_NNT.Tid;
			objRT_Mst_NNT = new RT_Mst_NNT();
			DataSet mdsResult = CmUtils.CMyDataSet.NewMyDataSet(strTid);
			DateTime dtimeSys = DateTime.UtcNow;
			//DataSet mdsExec = null;
			//DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(objRQ_Mst_NNT.Tid);
			//int nTidSeq = 0;
			//bool bNeedTransaction = true;
			string strFunctionName = "WAS_Mst_NNT_CreateForNetwork";
			string strErrorCodeDefault = TError.ErridnInventory.WAS_Mst_NNT_CreateForNetwork;
			alParamsCoupleError.AddRange(new object[]{
				"strFunctionName", strFunctionName
				, "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
				});
			#endregion

			try
			{
				#region // Init:
				Sys_User_CheckAuthorize(
					strTid // strTid
					, objRQ_Mst_NNT.GwUserCode // strGwUserCode
					, objRQ_Mst_NNT.GwPassword // strGwPassword
					, objRQ_Mst_NNT.WAUserCode // strWAUserCode
												//, strWAUserPassword // strWAUserPassword
					, ref mdsResult // mdsFinal
					, ref alParamsCoupleError // alParamsCoupleError
					, dtimeSys // dtimeSys
					, objRQ_Mst_NNT.AccessToken // strAccessToken
					, objRQ_Mst_NNT.NetworkID // strNetworkID
					, objRQ_Mst_NNT.OrgID // strOrgID
					, TConst.Flag.Active // strFlagUserCodeToCheck
					);
				#endregion

				#region // Refine and Check Input:
				List<Mst_NNT> lst_Mst_NNT = new List<Mst_NNT>();
				#endregion

				#region // Inos_OrgService_CreateOrgForNetworkX
				object objOrgId = null;
				Inos_OrgService_CreateOrgForNetwork(
					objRQ_Mst_NNT.Tid // strTid
					, objRQ_Mst_NNT.GwUserCode // strGwUserCode
					, objRQ_Mst_NNT.GwPassword // strGwPassword
					, objRQ_Mst_NNT.WAUserCode // strUserCode
					, objRQ_Mst_NNT.WAUserPassword // strUserPassword
					, objRQ_Mst_NNT.AccessToken // strAccessToken
					, ref alParamsCoupleError // alParamsCoupleError
					, objRQ_Mst_NNT.Mst_NNT.MST // objMST
												////
					, objRQ_Mst_NNT.Mst_NNT.NNTFullName // objNNTFullName
					, objRQ_Mst_NNT.Mst_NNT.ContactName // objContactName
					, objRQ_Mst_NNT.Mst_NNT.ContactPhone // ContactPhone
					, objRQ_Mst_NNT.Mst_NNT.ContactEmail // ContactEmail
														 ////
					, objRQ_Mst_NNT.Mst_NNT.BizType //  BizType
					, objRQ_Mst_NNT.Mst_NNT.BizFieldCode // BizFieldCode
					, objRQ_Mst_NNT.Mst_NNT.BizSizeCode // BizSizeCode
					, out objOrgId
					);
				#endregion

				#region // OS_MstSv_OrgInNetwork_Create:
				mdsResult = OS_MstSv_OrgInNetwork_Create(
					objRQ_Mst_NNT.Tid // strTid
					, objRQ_Mst_NNT.GwUserCode // strGwUserCode
					, objRQ_Mst_NNT.GwPassword // strGwPassword
					, objRQ_Mst_NNT.WAUserCode // strUserCode
					, objRQ_Mst_NNT.WAUserPassword // strUserPassword
					, nNetworkID.ToString()
					, ref alParamsCoupleError // alParamsCoupleError
											  ////
					, objOrgId
					, objRQ_Mst_NNT.Mst_NNT.MST
					);

				string strOrgIDSln = Convert.ToString(CmUtils.CMyDataSet.GetRemark(mdsResult));
				#endregion

				#region // Mst_Org_Create
				mdsResult = Mst_Org_Create_New20200208(
					objRQ_Mst_NNT.Tid // strTid
					, objRQ_Mst_NNT.GwUserCode // strGwUserCode
					, objRQ_Mst_NNT.GwPassword // strGwPassword
					, objRQ_Mst_NNT.WAUserCode // strUserCode
					, objRQ_Mst_NNT.WAUserPassword // strUserPassword
					, ref alParamsCoupleError // alParamsCoupleError
					, dtimeSys
					////
					, objOrgId
					, nNetworkID
					, strOrgIDSln
					, objRQ_Mst_NNT.Mst_NNT.Remark
					);
				#endregion

				#region // WS_Mst_NNT_CreateForNetwork:
				mdsResult = Mst_NNT_CreateForNetwork_New20200208(
					objRQ_Mst_NNT.Tid // strTid
					, objRQ_Mst_NNT.GwUserCode // strGwUserCode
					, objRQ_Mst_NNT.GwPassword // strGwPassword
					, objRQ_Mst_NNT.WAUserCode // strUserCode
					, objRQ_Mst_NNT.WAUserPassword // strUserPassword
					, ref alParamsCoupleError // alParamsCoupleError
											  ////
					, objRQ_Mst_NNT.Mst_NNT.MST // objMST
					, objOrgId // strOrgID
					, objRQ_Mst_NNT.Mst_NNT.NNTFullName // objNNTFullName
					, objRQ_Mst_NNT.Mst_NNT.MSTParent // objMSTParent
					, objRQ_Mst_NNT.Mst_NNT.ProvinceCode // objProvinceCode
					, objRQ_Mst_NNT.Mst_NNT.DistrictCode // objDistrictCode
														 //, objRQ_Mst_NNT.Mst_NNT.NNTType // objNNTType
					, objRQ_Mst_NNT.Mst_NNT.DLCode // objDLCode
					, objRQ_Mst_NNT.Mst_NNT.NNTAddress // objAddress
					, objRQ_Mst_NNT.Mst_NNT.NNTMobile // objMobile
					, objRQ_Mst_NNT.Mst_NNT.NNTPhone // objPhone
					, objRQ_Mst_NNT.Mst_NNT.NNTFax // objFax
					, objRQ_Mst_NNT.Mst_NNT.PresentBy // objPresentBy
					, objRQ_Mst_NNT.Mst_NNT.BusinessRegNo // objBusinessRegNo
					, objRQ_Mst_NNT.Mst_NNT.NNTPosition // objPosition
					, objRQ_Mst_NNT.Mst_NNT.PresentIDNo // objPresentIDNo
					, objRQ_Mst_NNT.Mst_NNT.PresentIDType // objPresentIDType
					, objRQ_Mst_NNT.Mst_NNT.GovTaxID // objGovTaxID
					, objRQ_Mst_NNT.Mst_NNT.ContactName // objContactName
					, objRQ_Mst_NNT.Mst_NNT.ContactPhone // objContactPhone
					, objRQ_Mst_NNT.Mst_NNT.ContactEmail // objContactEmail
					, objRQ_Mst_NNT.Mst_NNT.Website // objWebsite
					, objRQ_Mst_NNT.Mst_NNT.CANumber // objCANumber
					, objRQ_Mst_NNT.Mst_NNT.CAOrg // objCAOrg
					, objRQ_Mst_NNT.Mst_NNT.CAEffDTimeUTCStart // objCAEffDTimeUTCStart
					, objRQ_Mst_NNT.Mst_NNT.CAEffDTimeUTCEnd // objCAEffDTimeUTCEnd
					, objRQ_Mst_NNT.Mst_NNT.PackageCode // objPackageCode
					, objRQ_Mst_NNT.Mst_NNT.CreatedDate // objCreatedDate
					, objRQ_Mst_NNT.Mst_NNT.AccNo // objAccNo
					, objRQ_Mst_NNT.Mst_NNT.AccHolder // objAccHolder
					, objRQ_Mst_NNT.Mst_NNT.BankName // objBankName
					, objRQ_Mst_NNT.Mst_NNT.BizType // objBizType
					, objRQ_Mst_NNT.Mst_NNT.BizFieldCode // objBizFieldCode
					, objRQ_Mst_NNT.Mst_NNT.BizSizeCode // objBizSizeCode
					, objRQ_Mst_NNT.Mst_NNT.DealerType // objDealerType
					, objRQ_Mst_NNT.Mst_NNT.AreaCode // objAreaCode
                    , objRQ_Mst_NNT.Mst_NNT.OrgID_MA // objOrgID_MA
                    );
				#endregion

				#region // OS_MstSv_OrgInNetwork_Create:
				mdsResult = OS_MstSv_OrgInNetwork_Create_MstSv(
					objRQ_Mst_NNT.Tid // strTid
					, objRQ_Mst_NNT.GwUserCode // strGwUserCode
					, objRQ_Mst_NNT.GwPassword // strGwPassword
					, objRQ_Mst_NNT.WAUserCode // strUserCode
					, objRQ_Mst_NNT.WAUserPassword // strUserPassword
					, nNetworkID.ToString()
					, ref alParamsCoupleError // alParamsCoupleError
											  ////
					, objOrgId
					, objRQ_Mst_NNT.Mst_NNT.MST
					, strOrgIDSln
					);
				#endregion

				#region // OS_RptSv_Mst_NNT_Create:
				mdsResult = OS_RptSv_Mst_NNT_Create(
					objRQ_Mst_NNT.Tid // strTid
					, objRQ_Mst_NNT.GwUserCode // strGwUserCode
					, objRQ_Mst_NNT.GwPassword // strGwPassword
					, objRQ_Mst_NNT.WAUserCode // strUserCode
					, objRQ_Mst_NNT.WAUserPassword // strUserPassword
					, ref alParamsCoupleError // alParamsCoupleError
											  ////
					, objRQ_Mst_NNT.Mst_NNT.MST // objMST
					, objOrgId // strOrgID
					, objRQ_Mst_NNT.Mst_NNT.NNTFullName // objNNTFullName
					, objRQ_Mst_NNT.Mst_NNT.MSTParent // objMSTParent
					, objRQ_Mst_NNT.Mst_NNT.ProvinceCode // objProvinceCode
					, objRQ_Mst_NNT.Mst_NNT.DistrictCode // objDistrictCode
														 //, objRQ_Mst_NNT.Mst_NNT.NNTType // objNNTType
					, objRQ_Mst_NNT.Mst_NNT.DLCode // objDLCode
					, objRQ_Mst_NNT.Mst_NNT.NNTAddress // objAddress
					, objRQ_Mst_NNT.Mst_NNT.NNTMobile // objMobile
					, objRQ_Mst_NNT.Mst_NNT.NNTPhone // objPhone
					, objRQ_Mst_NNT.Mst_NNT.NNTFax // objFax
					, objRQ_Mst_NNT.Mst_NNT.PresentBy // objPresentBy
					, objRQ_Mst_NNT.Mst_NNT.BusinessRegNo // objBusinessRegNo
					, objRQ_Mst_NNT.Mst_NNT.NNTPosition // objPosition
					, objRQ_Mst_NNT.Mst_NNT.PresentIDNo // objPresentIDNo
					, objRQ_Mst_NNT.Mst_NNT.PresentIDType // objPresentIDType
					, objRQ_Mst_NNT.Mst_NNT.GovTaxID // objGovTaxID
					, objRQ_Mst_NNT.Mst_NNT.ContactName // objContactName
					, objRQ_Mst_NNT.Mst_NNT.ContactPhone // objContactPhone
					, objRQ_Mst_NNT.Mst_NNT.ContactEmail // objContactEmail
					, objRQ_Mst_NNT.Mst_NNT.Website // objWebsite
					, objRQ_Mst_NNT.Mst_NNT.CANumber // objCANumber
					, objRQ_Mst_NNT.Mst_NNT.CAOrg // objCAOrg
					, objRQ_Mst_NNT.Mst_NNT.CAEffDTimeUTCStart // objCAEffDTimeUTCStart
					, objRQ_Mst_NNT.Mst_NNT.CAEffDTimeUTCEnd // objCAEffDTimeUTCEnd
					, objRQ_Mst_NNT.Mst_NNT.PackageCode // objPackageCode
					, objRQ_Mst_NNT.Mst_NNT.CreatedDate // objCreatedDate
					, objRQ_Mst_NNT.Mst_NNT.AccNo // objAccNo
					, objRQ_Mst_NNT.Mst_NNT.AccHolder // objAccHolder
					, objRQ_Mst_NNT.Mst_NNT.BankName // objBankName
					, objRQ_Mst_NNT.Mst_NNT.BizType // objBizType
					, objRQ_Mst_NNT.Mst_NNT.BizFieldCode // objBizFieldCode
					, objRQ_Mst_NNT.Mst_NNT.BizSizeCode // objBizSizeCode
					, objRQ_Mst_NNT.Mst_NNT.DealerType // objDealerType
													   //
					, strOrgIDSln
					);
				#endregion

				// Return Good:
				return mdsResult;
			}
			catch (Exception exc)
			{
				#region // Catch of try:
				// Return Bad:
				return TUtils.CProcessExc.Process(
					ref mdsResult
					, exc
					, strErrorCodeDefault
					, alParamsCoupleError.ToArray()
					);
				#endregion
			}
			finally
			{
				#region // Finally of try:
				// Write ReturnLog:
				//_cf.ProcessBizReturn(
				//	ref mdsResult // mdsFinal
				//	, strTid // strTid
				//	, strFunctionName // strFunctionName
				//	);
				#endregion
			}
		}

		public DataSet WAS_RptSv_Mst_NNT_CreateForNetwork(
			ref ArrayList alParamsCoupleError
			, RQ_Mst_NNT objRQ_Mst_NNT
			////
			, out RT_Mst_NNT objRT_Mst_NNT
			)
		{
			#region // Temp:
			string strTid = objRQ_Mst_NNT.Tid;
			objRT_Mst_NNT = new RT_Mst_NNT();
			DataSet mdsResult = CmUtils.CMyDataSet.NewMyDataSet(strTid);
			DateTime dtimeSys = DateTime.UtcNow;
			//DataSet mdsExec = null;
			//DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(objRQ_Mst_NNT.Tid);
			//int nTidSeq = 0;
			//bool bNeedTransaction = true;
			string strFunctionName = "WAS_RptSv_Mst_NNT_CreateForNetwork";
			string strErrorCodeDefault = TError.ErridnInventory.WAS_RptSv_Mst_NNT_CreateForNetwork;
			alParamsCoupleError.AddRange(new object[]{
				"strFunctionName", strFunctionName
				, "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
				});
			#endregion

			try
			{
				#region // Init:
				#endregion

				#region // Refine and Check Input:
				List<Mst_NNT> lst_Mst_NNT = new List<Mst_NNT>();
				#endregion

				#region // WS_Mst_NNT_Create:
				mdsResult = RptSv_Mst_NNT_CreateForNetwork(
					objRQ_Mst_NNT.Tid // strTid
					, objRQ_Mst_NNT.GwUserCode // strGwUserCode
					, objRQ_Mst_NNT.GwPassword // strGwPassword
					, objRQ_Mst_NNT.WAUserCode // strUserCode
					, objRQ_Mst_NNT.WAUserPassword // strUserPassword
					, ref alParamsCoupleError // alParamsCoupleError
											  ////
					, objRQ_Mst_NNT.Mst_NNT.MST // objMST
					, objRQ_Mst_NNT.OrgID // objOrgID
					, objRQ_Mst_NNT.Mst_NNT.NNTFullName // objNNTFullName
					, objRQ_Mst_NNT.Mst_NNT.MSTParent // objMSTParent
					, objRQ_Mst_NNT.Mst_NNT.ProvinceCode // objProvinceCode
					, objRQ_Mst_NNT.Mst_NNT.DistrictCode // objDistrictCode
														 //, objRQ_Mst_NNT.Mst_NNT.NNTType // objNNTType
					, objRQ_Mst_NNT.Mst_NNT.DLCode // objDLCode
					, objRQ_Mst_NNT.Mst_NNT.NNTAddress // objAddress
					, objRQ_Mst_NNT.Mst_NNT.NNTMobile // objMobile
					, objRQ_Mst_NNT.Mst_NNT.NNTPhone // objPhone
					, objRQ_Mst_NNT.Mst_NNT.NNTFax // objFax
					, objRQ_Mst_NNT.Mst_NNT.PresentBy // objPresentBy
					, objRQ_Mst_NNT.Mst_NNT.BusinessRegNo // objBusinessRegNo
					, objRQ_Mst_NNT.Mst_NNT.NNTPosition // objPosition
					, objRQ_Mst_NNT.Mst_NNT.PresentIDNo // objPresentIDNo
					, objRQ_Mst_NNT.Mst_NNT.PresentIDType // objPresentIDType
					, objRQ_Mst_NNT.Mst_NNT.GovTaxID // objGovTaxID
					, objRQ_Mst_NNT.Mst_NNT.ContactName // objContactName
					, objRQ_Mst_NNT.Mst_NNT.ContactPhone // objContactPhone
					, objRQ_Mst_NNT.Mst_NNT.ContactEmail // objContactEmail
					, objRQ_Mst_NNT.Mst_NNT.Website // objWebsite
					, objRQ_Mst_NNT.Mst_NNT.CANumber // objCANumber
					, objRQ_Mst_NNT.Mst_NNT.CAOrg // objCAOrg
					, objRQ_Mst_NNT.Mst_NNT.CAEffDTimeUTCStart // objCAEffDTimeUTCStart
					, objRQ_Mst_NNT.Mst_NNT.CAEffDTimeUTCEnd // objCAEffDTimeUTCEnd
					, objRQ_Mst_NNT.Mst_NNT.PackageCode // objPackageCode
					, objRQ_Mst_NNT.Mst_NNT.CreatedDate // objCreatedDate
					, objRQ_Mst_NNT.Mst_NNT.AccNo // objAccNo
					, objRQ_Mst_NNT.Mst_NNT.AccHolder // objAccHolder
					, objRQ_Mst_NNT.Mst_NNT.BankName // objBankName
					, objRQ_Mst_NNT.Mst_NNT.BizType // objBizType
					, objRQ_Mst_NNT.Mst_NNT.BizFieldCode // objBizFieldCode
					, objRQ_Mst_NNT.Mst_NNT.BizSizeCode // objBizSizeCode
					, objRQ_Mst_NNT.Mst_NNT.DealerType // objDealerType
					, objRQ_Mst_NNT.Mst_NNT.AreaCode // objAreaCode
													 //
					, objRQ_Mst_NNT.Mst_NNT.OrgIDSln // objOrgIDSln
					);
				#endregion

				// Return Good:
				return mdsResult;
			}
			catch (Exception exc)
			{
				#region // Catch of try:
				// Return Bad:
				return TUtils.CProcessExc.Process(
					ref mdsResult
					, exc
					, strErrorCodeDefault
					, alParamsCoupleError.ToArray()
					);
				#endregion
			}
			finally
			{
				#region // Finally of try:
				// Write ReturnLog:
				//_cf.ProcessBizReturn(
				//	ref mdsResult // mdsFinal
				//	, strTid // strTid
				//	, strFunctionName // strFunctionName
				//	);
				#endregion
			}
		}

		public DataSet Mst_NNT_CreateForNetwork(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            ////
            , object objMST
            , object objOrgID
            , object objNNTFullName
            , object objMSTParent
            , object objProvinceCode
            , object objDistrictCode
            //, object objNNTType
            , object objDLCode
            , object objNNTAddress
            , object objNNTMobile
            , object objNTTPhone
            , object objNNTFax
            , object objPresentBy
            , object objBusinessRegNo
            , object objNNTPosition
            , object objPresentIDNo
            , object objPresentIDType
            , object objGovTaxID
            , object objContactName
            , object objContactPhone
            , object objContactEmail
            , object objWebsite
            , object objCANumber
            , object objCAOrg
            , object objCAEffDTimeUTCStart
            , object objCAEffDTimeUTCEnd
            , object objPackageCode
            , object objCreatedDate
            , object objAccNo
            , object objAccHolder
            , object objBankName
            , object objBizType // objBizType
            , object objBizFieldCode // objBizFieldCode
            , object objBizSizeCode // objBizSizeCode
            )
        {
            #region // Temp:
            DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            //int nTidSeq = 0;
            DateTime dtimeSys = DateTime.UtcNow;
            string strFunctionName = "Mst_NNT_CreateForNetwork";
            string strErrorCodeDefault = TError.ErridnInventory.Mst_NNT_CreateForNetwork;
            alParamsCoupleError.AddRange(new object[]{
                    "strFunctionName", strFunctionName
                    , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
			        ////
					, "objMST", objMST
                    , "objOrgID", objOrgID
                    , "objMSTParent", objMSTParent
                    , "objProvinceCode", objProvinceCode
                    , "objDistrictCode", objDistrictCode
                    //, "objNNTType", objNNTType
                    , "objDLCode", objDLCode
                    , "objNNTFullName", objNNTFullName
                    , "objNNTAddress", objNNTAddress
                    , "objNNTMobile", objNNTMobile
                    , "objNTTPhone", objNTTPhone
                    , "objNNTFax", objNNTFax
                    , "objPresentBy", objPresentBy
                    , "objBusinessRegNo", objBusinessRegNo
                    , "objNNTPosition", objNNTPosition
                    , "objPresentIDNo", objPresentIDNo
                    , "objPresentIDType", objPresentIDType
                    , "objGovTaxID", objGovTaxID
                    , "objContactName", objContactName
                    , "objContactPhone", objContactPhone
                    , "objContactEmail", objContactEmail
                    , "objWebsite", objWebsite
                    , "objCANumber", objCANumber
                    , "objCAOrg", objCAOrg
                    , "objCAEffDTimeUTCStart", objCAEffDTimeUTCStart
                    , "objCAEffDTimeUTCEnd", objCAEffDTimeUTCEnd
                    , "objPackageCode", objPackageCode
                    , "objAccNo", objAccNo
                    , "objAccHolder", objAccHolder
                    , "objBankName", objBankName
                    });
            #endregion

            try
            {
                #region // Init:
                //_cf.db.LogUserId = _cf.sinf.strUserCode;
                _cf.db.BeginTransaction();

                // Write RequestLog:
                _cf.ProcessBizReq_OutSide(
                    strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    , alParamsCoupleError // alParamsCoupleError
                    );

                // Sys_User_CheckAuthentication:
                //Sys_User_CheckAuthentication(
                //    ref alParamsCoupleError
                //    , strWAUserCode
                //    , strWAUserPassword
                //    );

                // Check Access/Deny:
                Sys_Access_CheckDenyV30(
                    ref alParamsCoupleError
                    , strWAUserCode
                    , strFunctionName
                    );
                #endregion

                #region // Mst_NNT_CreateForNetworkX:
                //DataSet dsGetData = null;
                {
                    Mst_NNT_CreateForNetworkX(
                        strTid // strTid
                        , strGwUserCode // strGwUserCode
                        , strGwPassword // strGwPassword
                        , strWAUserCode // strWAUserCode
                        , strWAUserPassword // strWAUserPassword
                        , ref alParamsCoupleError // alParamsCoupleError
                        , dtimeSys // dtimeSys
                        ////
                        , objMST // objMST
                        , objOrgID // objOrgID
                        , objNNTFullName // objNNTFullName
                        , objMSTParent // objMSTParent
                        , objProvinceCode // objProvinceCode
                        , objDistrictCode // objDistrictCode
                                          //, objNNTType // objNNTType
                        , objDLCode // objDLCode
                        , objNNTAddress // objNNTAddress
                        , objNNTMobile // objNNTMobile
                        , objNTTPhone // objNTTPhone
                        , objNNTFax // objNNTFax
                        , objPresentBy // objPresentBy
                        , objBusinessRegNo // objBusinessRegNo
                        , objNNTPosition // objNNTPosition
                        , objPresentIDNo // objPresentIDNo
                        , objPresentIDType // objPresentIDType
                        , objGovTaxID // objGovTaxID
                        , objContactName // objContactName
                        , objContactPhone // objContactPhone
                        , objContactEmail // objContactEmail
                        , objWebsite // objWebsite
                        , objCANumber // objCANumber
                        , objCAOrg // objCAOrg
                        , objCAEffDTimeUTCStart // objCAEffDTimeUTCStart
                        , objCAEffDTimeUTCEnd // objCAEffDTimeUTCEnd
                        , objPackageCode // objPackageCode
                        , objCreatedDate // objCreatedDate
                        , objAccNo // objAccNo
                        , objAccHolder // objAccHolder
                        , objBankName // objBankName
                        , objBizType // objBizType
                        , objBizFieldCode // objBizFieldCode
                        , objBizSizeCode // objBizSizeCode
                        );
                }
                ////
                //CmUtils.DataUtils.MoveDataTable(ref mdsFinal, ref dsGetData);
                #endregion

                // Return Good:
                TDALUtils.DBUtils.CommitSafety(_cf.db);
                mdsFinal.AcceptChanges();
                return mdsFinal;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Rollback:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);

                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsFinal
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Rollback and Release resources:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);
                TDALUtils.DBUtils.ReleaseAllSemaphore(_cf.db_Sys, true);

                // Write ReturnLog:
                _cf.ProcessBizReturn_OutSide(
                    ref mdsFinal // mdsFinal
                    , strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    );
                #endregion
            }
        }

		public DataSet Mst_NNT_CreateForNetwork_New20200208(
			string strTid
			, string strGwUserCode
			, string strGwPassword
			, string strWAUserCode
			, string strWAUserPassword
			, ref ArrayList alParamsCoupleError
			////
			, object objMST
			, object objOrgID
			, object objNNTFullName
			, object objMSTParent
			, object objProvinceCode
			, object objDistrictCode
			//, object objNNTType
			, object objDLCode
			, object objNNTAddress
			, object objNNTMobile
			, object objNTTPhone
			, object objNNTFax
			, object objPresentBy
			, object objBusinessRegNo
			, object objNNTPosition
			, object objPresentIDNo
			, object objPresentIDType
			, object objGovTaxID
			, object objContactName
			, object objContactPhone
			, object objContactEmail
			, object objWebsite
			, object objCANumber
			, object objCAOrg
			, object objCAEffDTimeUTCStart
			, object objCAEffDTimeUTCEnd
			, object objPackageCode
			, object objCreatedDate
			, object objAccNo
			, object objAccHolder
			, object objBankName
			, object objBizType // objBizType
			, object objBizFieldCode // objBizFieldCode
			, object objBizSizeCode // objBizSizeCode
			, object objDealerType // objDealerType
			, object objAreaCode // objAreaCode
            , object objOrgID_MA // objOrgID_MA
            )
		{
			#region // Temp:
			DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
			//int nTidSeq = 0;
			DateTime dtimeSys = DateTime.UtcNow;
			string strFunctionName = "Mst_NNT_CreateForNetwork";
			string strErrorCodeDefault = TError.ErridnInventory.Mst_NNT_CreateForNetwork;
			alParamsCoupleError.AddRange(new object[]{
					"strFunctionName", strFunctionName
					, "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
			        ////
					, "objMST", objMST
					, "objOrgID", objOrgID
					, "objMSTParent", objMSTParent
					, "objProvinceCode", objProvinceCode
					, "objDistrictCode", objDistrictCode
                    //, "objNNTType", objNNTType
                    , "objDLCode", objDLCode
					, "objNNTFullName", objNNTFullName
					, "objNNTAddress", objNNTAddress
					, "objNNTMobile", objNNTMobile
					, "objNTTPhone", objNTTPhone
					, "objNNTFax", objNNTFax
					, "objPresentBy", objPresentBy
					, "objBusinessRegNo", objBusinessRegNo
					, "objNNTPosition", objNNTPosition
					, "objPresentIDNo", objPresentIDNo
					, "objPresentIDType", objPresentIDType
					, "objGovTaxID", objGovTaxID
					, "objContactName", objContactName
					, "objContactPhone", objContactPhone
					, "objContactEmail", objContactEmail
					, "objWebsite", objWebsite
					, "objCANumber", objCANumber
					, "objCAOrg", objCAOrg
					, "objCAEffDTimeUTCStart", objCAEffDTimeUTCStart
					, "objCAEffDTimeUTCEnd", objCAEffDTimeUTCEnd
					, "objPackageCode", objPackageCode
					, "objAccNo", objAccNo
					, "objAccHolder", objAccHolder
					, "objBankName", objBankName
					});
			#endregion

			try
			{
				#region // Init:
				//_cf.db.LogUserId = _cf.sinf.strUserCode;
				_cf.db.BeginTransaction();

				// Write RequestLog:
				_cf.ProcessBizReq_OutSide(
					strTid // strTid
					, strGwUserCode // strGwUserCode
					, strGwPassword // strGwPassword
					, strWAUserCode // objUserCode
					, strFunctionName // strFunctionName
					, alParamsCoupleError // alParamsCoupleError
					);

				// Sys_User_CheckAuthentication:
				//Sys_User_CheckAuthentication(
				//	ref alParamsCoupleError
				//	, strWAUserCode
				//	, strWAUserPassword
				//	);

				// Check Access/Deny:
				Sys_Access_CheckDenyV30(
					ref alParamsCoupleError
					, strWAUserCode
					, strFunctionName
					);
				#endregion

				#region // Mst_NNT_CreateForNetworkX:
				//DataSet dsGetData = null;
				{
					Mst_NNT_CreateForNetworkX_New20200208(
						strTid // strTid
						, strGwUserCode // strGwUserCode
						, strGwPassword // strGwPassword
						, strWAUserCode // strWAUserCode
						, strWAUserPassword // strWAUserPassword
						, ref alParamsCoupleError // alParamsCoupleError
						, dtimeSys // dtimeSys
								   ////
						, objMST // objMST
						, objOrgID // objOrgID
						, objNNTFullName // objNNTFullName
						, objMSTParent // objMSTParent
						, objProvinceCode // objProvinceCode
						, objDistrictCode // objDistrictCode
										  //, objNNTType // objNNTType
						, objDLCode // objDLCode
						, objNNTAddress // objNNTAddress
						, objNNTMobile // objNNTMobile
						, objNTTPhone // objNTTPhone
						, objNNTFax // objNNTFax
						, objPresentBy // objPresentBy
						, objBusinessRegNo // objBusinessRegNo
						, objNNTPosition // objNNTPosition
						, objPresentIDNo // objPresentIDNo
						, objPresentIDType // objPresentIDType
						, objGovTaxID // objGovTaxID
						, objContactName // objContactName
						, objContactPhone // objContactPhone
						, objContactEmail // objContactEmail
						, objWebsite // objWebsite
						, objCANumber // objCANumber
						, objCAOrg // objCAOrg
						, objCAEffDTimeUTCStart // objCAEffDTimeUTCStart
						, objCAEffDTimeUTCEnd // objCAEffDTimeUTCEnd
						, objPackageCode // objPackageCode
						, objCreatedDate // objCreatedDate
						, objAccNo // objAccNo
						, objAccHolder // objAccHolder
						, objBankName // objBankName
						, objBizType // objBizType
						, objBizFieldCode // objBizFieldCode
						, objBizSizeCode // objBizSizeCode
						, objDealerType // objDealerType
						, objAreaCode // objAreaCode
                        , objOrgID_MA // objOrgID_MA
                        );
				}
				////
				//CmUtils.DataUtils.MoveDataTable(ref mdsFinal, ref dsGetData);
				#endregion

				// Return Good:
				TDALUtils.DBUtils.CommitSafety(_cf.db);
				mdsFinal.AcceptChanges();
				return mdsFinal;
			}
			catch (Exception exc)
			{
				#region // Catch of try:
				// Rollback:
				TDALUtils.DBUtils.RollbackSafety(_cf.db);

				// Return Bad:
				return TUtils.CProcessExc.Process(
					ref mdsFinal
					, exc
					, strErrorCodeDefault
					, alParamsCoupleError.ToArray()
					);
				#endregion
			}
			finally
			{
				#region // Finally of try:
				// Rollback and Release resources:
				TDALUtils.DBUtils.RollbackSafety(_cf.db);
				TDALUtils.DBUtils.ReleaseAllSemaphore(_cf.db_Sys, true);

				// Write ReturnLog:
				_cf.ProcessBizReturn_OutSide(
					ref mdsFinal // mdsFinal
					, strTid // strTid
					, strGwUserCode // strGwUserCode
					, strGwPassword // strGwPassword
					, strWAUserCode // objUserCode
					, strFunctionName // strFunctionName
					);
				#endregion
			}
		}

		public DataSet RptSv_Mst_NNT_CreateForNetwork(
			string strTid
			, string strGwUserCode
			, string strGwPassword
			, string strWAUserCode
			, string strWAUserPassword
			, ref ArrayList alParamsCoupleError
			////
			, object objMST
			, object objOrgID
			, object objNNTFullName
			, object objMSTParent
			, object objProvinceCode
			, object objDistrictCode
			//, object objNNTType
			, object objDLCode
			, object objNNTAddress
			, object objNNTMobile
			, object objNTTPhone
			, object objNNTFax
			, object objPresentBy
			, object objBusinessRegNo
			, object objNNTPosition
			, object objPresentIDNo
			, object objPresentIDType
			, object objGovTaxID
			, object objContactName
			, object objContactPhone
			, object objContactEmail
			, object objWebsite
			, object objCANumber
			, object objCAOrg
			, object objCAEffDTimeUTCStart
			, object objCAEffDTimeUTCEnd
			, object objPackageCode
			, object objCreatedDate
			, object objAccNo
			, object objAccHolder
			, object objBankName
			, object objBizType // objBizType
			, object objBizFieldCode // objBizFieldCode
			, object objBizSizeCode // objBizSizeCode
			, object objDealerType // objDealerType
			, object objAreaCode // objAreaCode
								 //
			, object objOrgIDSln // objOrgIDSln
			)
		{
			#region // Temp:
			DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
			//int nTidSeq = 0;
			DateTime dtimeSys = DateTime.UtcNow;
			string strFunctionName = "RptSv_Mst_NNT_CreateForNetwork";
			string strErrorCodeDefault = TError.ErridnInventory.RptSv_Mst_NNT_CreateForNetwork;
			alParamsCoupleError.AddRange(new object[]{
					"strFunctionName", strFunctionName
					, "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
			        ////
					, "objMST", objMST
					, "objOrgID", objOrgID
					, "objMSTParent", objMSTParent
					, "objProvinceCode", objProvinceCode
					, "objDistrictCode", objDistrictCode
                    //, "objNNTType", objNNTType
                    , "objDLCode", objDLCode
					, "objNNTFullName", objNNTFullName
					, "objNNTAddress", objNNTAddress
					, "objNNTMobile", objNNTMobile
					, "objNTTPhone", objNTTPhone
					, "objNNTFax", objNNTFax
					, "objPresentBy", objPresentBy
					, "objBusinessRegNo", objBusinessRegNo
					, "objNNTPosition", objNNTPosition
					, "objPresentIDNo", objPresentIDNo
					, "objPresentIDType", objPresentIDType
					, "objGovTaxID", objGovTaxID
					, "objContactName", objContactName
					, "objContactPhone", objContactPhone
					, "objContactEmail", objContactEmail
					, "objWebsite", objWebsite
					, "objCANumber", objCANumber
					, "objCAOrg", objCAOrg
					, "objCAEffDTimeUTCStart", objCAEffDTimeUTCStart
					, "objCAEffDTimeUTCEnd", objCAEffDTimeUTCEnd
					, "objPackageCode", objPackageCode
					, "objAccNo", objAccNo
					, "objAccHolder", objAccHolder
					, "objBankName", objBankName
					, "objDealerType", objDealerType
					});
			#endregion

			try
			{
				#region // Init:
				//_cf.db.LogUserId = _cf.sinf.strUserCode;
				_cf.db.BeginTransaction();

				// Write RequestLog:
				_cf.ProcessBizReq_OutSide(
					strTid // strTid
					, strGwUserCode // strGwUserCode
					, strGwPassword // strGwPassword
					, strWAUserCode // objUserCode
					, strFunctionName // strFunctionName
					, alParamsCoupleError // alParamsCoupleError
					);

				// Sys_User_CheckAuthentication:
				//RptSv_Sys_User_CheckAuthentication(
				//	ref alParamsCoupleError
				//	, strWAUserCode
				//	, strWAUserPassword
				//	);

				// Check Access/Deny:
				RptSv_Sys_Access_CheckDeny(
					ref alParamsCoupleError
					, strWAUserCode
					, strFunctionName
					);
				#endregion

				#region // Mst_NNT_CreateForNetworkX:
				//DataSet dsGetData = null;
				{
					Mst_NNT_CreateForNetworkX_New20200208(
						strTid // strTid
						, strGwUserCode // strGwUserCode
						, strGwPassword // strGwPassword
						, strWAUserCode // strWAUserCode
						, strWAUserPassword // strWAUserPassword
						, ref alParamsCoupleError // alParamsCoupleError
						, dtimeSys // dtimeSys
								   ////
						, objMST // objMST
						, objOrgID // objOrgID
						, objNNTFullName // objNNTFullName
						, objMSTParent // objMSTParent
						, objProvinceCode // objProvinceCode
						, objDistrictCode // objDistrictCode
										  //, objNNTType // objNNTType
						, objDLCode // objDLCode
						, objNNTAddress // objNNTAddress
						, objNNTMobile // objNNTMobile
						, objNTTPhone // objNTTPhone
						, objNNTFax // objNNTFax
						, objPresentBy // objPresentBy
						, objBusinessRegNo // objBusinessRegNo
						, objNNTPosition // objNNTPosition
						, objPresentIDNo // objPresentIDNo
						, objPresentIDType // objPresentIDType
						, objGovTaxID // objGovTaxID
						, objContactName // objContactName
						, objContactPhone // objContactPhone
						, objContactEmail // objContactEmail
						, objWebsite // objWebsite
						, objCANumber // objCANumber
						, objCAOrg // objCAOrg
						, objCAEffDTimeUTCStart // objCAEffDTimeUTCStart
						, objCAEffDTimeUTCEnd // objCAEffDTimeUTCEnd
						, objPackageCode // objPackageCode
						, objCreatedDate // objCreatedDate
						, objAccNo // objAccNo
						, objAccHolder // objAccHolder
						, objBankName // objBankName
						, objBizType // objBizType
						, objBizFieldCode // objBizFieldCode
						, objBizSizeCode // objBizSizeCode
						, objDealerType // objDealerType
						, "ALL" // objAreaCode
                        , objOrgID // objOrgID_MA
						);
				}
				////
				//CmUtils.DataUtils.MoveDataTable(ref mdsFinal, ref dsGetData);
				#endregion

				#region // Upd MstSv_OrgIDSln:
				{
					string strOrgIDSln = string.Format("{0}", objOrgIDSln).Trim();

					string sqlUpd_MstSv_OrgIDSln = CmUtils.StringUtils.Replace(@"
                        -----
                        update t 
						set
							t.FlagActive = '0'
						from MstSv_OrgIDSln t --//[mylock]
						where(1=1)
							and t.OrgIDSln = '@strOrgIDSln'
						;
                    
						"
						, "@strOrgIDSln", strOrgIDSln
						);
					_cf.db.ExecQuery(sqlUpd_MstSv_OrgIDSln);

				}
				#endregion

				// Return Good:
				TDALUtils.DBUtils.CommitSafety(_cf.db);
				mdsFinal.AcceptChanges();
				return mdsFinal;
			}
			catch (Exception exc)
			{
				#region // Catch of try:
				// Rollback:
				TDALUtils.DBUtils.RollbackSafety(_cf.db);

				// Return Bad:
				return TUtils.CProcessExc.Process(
					ref mdsFinal
					, exc
					, strErrorCodeDefault
					, alParamsCoupleError.ToArray()
					);
				#endregion
			}
			finally
			{
				#region // Finally of try:
				// Rollback and Release resources:
				TDALUtils.DBUtils.RollbackSafety(_cf.db);
				TDALUtils.DBUtils.ReleaseAllSemaphore(_cf.db_Sys, true);

				// Write ReturnLog:
				_cf.ProcessBizReturn_OutSide(
					ref mdsFinal // mdsFinal
					, strTid // strTid
					, strGwUserCode // strGwUserCode
					, strGwPassword // strGwPassword
					, strWAUserCode // objUserCode
					, strFunctionName // strFunctionName
					);
				#endregion
			}
		}

		private void Mst_NNT_CreateForNetworkX(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            , DateTime dtimeSys
            //// 
            , object objMST
            , object objOrgID
            , object objNNTFullName
            , object objMSTParent
            , object objProvinceCode
            , object objDistrictCode
            //, object objNNTType
            , object objDLCode
            , object objNNTAddress
            , object objNNTMobile
            , object objNNTPhone
            , object objNNTFax
            , object objPresentBy
            , object objBusinessRegNo
            , object objNNTPosition
            , object objPresentIDNo
            , object objPresentIDType
            , object objGovTaxID
            , object objContactName
            , object objContactPhone
            , object objContactEmail
            , object objWebsite
            , object objCANumber
            , object objCAOrg
            , object objCAEffDTimeUTCStart
            , object objCAEffDTimeUTCEnd
            , object objPackageCode
            , object objCreatedDate
            , object objAccNo
            , object objAccHolder
            , object objBankName
            , object objBizType // objBizType
            , object objBizFieldCode // objBizFieldCode
            , object objBizSizeCode // objBizSizeCode
            ////
            )
        {
            #region // Temp:
            string strFunctionName = "Mst_NNT_CreateForNetworkX";
            //string strErrorCodeDefault = TError.ErrHTCNM.Mnf_VIN_Get_QCX;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
                , "objMST", objMST
                , "objOrgID", objOrgID
                , "objNNTFullName", objNNTFullName
                , "objMSTParent", objMSTParent
                , "objProvinceCode", objProvinceCode
                , "objDistrictCode", objDistrictCode
                //, "objNNTType", objNNTType
                , "objDLCode", objDLCode
                , "objNNTAddress", objNNTAddress
                , "objNNTMobile", objNNTMobile
                , "objNNTPhone", objNNTPhone
                , "objNNTFax", objNNTFax
                , "objPresentBy", objPresentBy
                , "objBusinessRegNo", objBusinessRegNo
                , "objNNTPosition", objNNTPosition
                , "objPresentIDNo", objPresentIDNo
                , "objPresentIDType", objPresentIDType
                , "objGovTaxID", objGovTaxID
                , "objContactName", objContactName
                , "objContactPhone", objContactPhone
                , "objContactEmail", objContactEmail
                , "objWebsite", objWebsite
                , "objCANumber", objCANumber
                , "objCAOrg", objCAOrg
                , "objCAEffDTimeUTCStart", objCAEffDTimeUTCStart
                , "objCAEffDTimeUTCEnd", objCAEffDTimeUTCEnd
                , "objPackageCode", objPackageCode
                , "objCreatedDate", objCreatedDate
                , "objAccNo", objAccNo
                , "objAccHolder", objAccHolder
                , "objBankName", objBankName
                , "objBizType", objBizType
                , "objBizFieldCode", objBizFieldCode
                , "objBizSizeCode", objBizSizeCode
                });
            #endregion

            #region // Refine and Check Input:
            ////
            string strMST = TUtils.CUtils.StdParam(objMST);
            string strOrgID = TUtils.CUtils.StdParam(objOrgID);
            string strNNTFullName = string.Format("{0}", objNNTFullName).Trim();
            string strMSTParent = TUtils.CUtils.StdParam(objMSTParent);
            string strProvinceCode = TUtils.CUtils.StdParam(objProvinceCode);
            string strDistrictCode = TUtils.CUtils.StdParam(objDistrictCode);
            //string strNNTType = TUtils.CUtils.StdParam(objNNTType);
            string strDLCode = TUtils.CUtils.StdParam(objDLCode);
            string strNNTAddress = string.Format("{0}", objNNTAddress).Trim();
            string strNNTMobile = string.Format("{0}", objNNTMobile).Trim();
            string strNNTPhone = string.Format("{0}", objNNTPhone).Trim();
            string strNNTFax = string.Format("{0}", objNNTFax).Trim();
            string strPresentBy = string.Format("{0}", objPresentBy).Trim();
            string strBusinessRegNo = string.Format("{0}", objBusinessRegNo).Trim();
            string strNNTPosition = string.Format("{0}", objNNTPosition).Trim();
            string strPresentIDNo = string.Format("{0}", objPresentIDNo).Trim();
            string strPresentIDType = string.Format("{0}", objPresentIDType).Trim();
            string strGovTaxID = TUtils.CUtils.StdParam(objGovTaxID);
            string strContactName = string.Format("{0}", objContactName).Trim();
            string strContactPhone = string.Format("{0}", objContactPhone).Trim();
            string strContactEmail = string.Format("{0}", objContactEmail).Trim();
            string strWebsite = string.Format("{0}", objWebsite).Trim();
            string strCANumber = string.Format("{0}", objCANumber).Trim();
            string strCAOrg = string.Format("{0}", objCAOrg).Trim();
            string strCAEffDTimeUTCStart = TUtils.CUtils.StdDTime(objCAEffDTimeUTCStart);
            string strCAEffDTimeUTCEnd = TUtils.CUtils.StdDTime(objCAEffDTimeUTCEnd);
            string strPackageCode = string.Format("{0}", objPackageCode).Trim();
            string strCreatedDate = TUtils.CUtils.StdDate(objCreatedDate);
            string strAccNo = string.Format("{0}", objAccNo).Trim();
            string strAccHolder = string.Format("{0}", objAccHolder).Trim();
            string strBankName = string.Format("{0}", objBankName).Trim();
            string strBizType = TUtils.CUtils.StdParam(objBizType);
            string strBizFieldCode = TUtils.CUtils.StdParam(objBizFieldCode);
            string strBizSizeCode = TUtils.CUtils.StdParam(objBizSizeCode);

            // drAbilityOfUser:
            //DataRow drAbilityOfUser = Sys_User_GetAbilityViewOfUser(_cf.sinf.strUserCode);
            ////
            DataTable dtDB_Mst_NNT = null;
            {
                ////
                if (strMST == null || strMST.Length < 1)
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.strMST", strMST
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Mst_NNT_Create_InvalidMST
                        , null
                        , alParamsCoupleError.ToArray()
                        );
                }
                ////
                Mst_NNT_CheckDB(
                    ref alParamsCoupleError // alParamsCoupleError
                    , strMST // objMST
                    , TConst.Flag.No // strFlagExistToCheck
                    , "" // strFlagActiveListToCheck
                    , "" // strTCTStatusListToCheck
                    , out dtDB_Mst_NNT // dtDB_Mst_NNT
                    );
                ////
                DataTable dtDB_Mst_NNT_Parent = null;

                if (!string.IsNullOrEmpty(strMSTParent))
                {
                    /////
                    Mst_NNT_CheckDB(
                        ref alParamsCoupleError // alParamsCoupleError
                        , strMSTParent // objMSTParent
                        , TConst.Flag.Yes // strFlagExistToCheck
                        , TConst.Flag.Active // strFlagActiveListToCheck
                        , "" // strTCTStatusListToCheck
                        , out dtDB_Mst_NNT_Parent // dtDB_Mst_NNT_Parent
                        );
                    ////
                }
                ////
                DataTable dtDB_Mst_Province = null;

                Mst_Province_CheckDB(
                    ref alParamsCoupleError // alParamsCoupleError
                    , strProvinceCode // objProvinceCode
                    , TConst.Flag.Yes // strFlagExistToCheck
                    , TConst.Flag.Active // strFlagActiveListToCheck
                    , out dtDB_Mst_Province // dtDB_Mst_Province
                    );
                ////
                DataTable dtDB_Mst_District = null;

                Mst_District_CheckDB(
                    ref alParamsCoupleError // alParamsCoupleError
                    , strProvinceCode // objProvinceCode
                    , strDistrictCode // objDistrictCode
                    , TConst.Flag.Yes // strFlagExistToCheck
                    , TConst.Flag.Active // strFlagActiveListToCheck
                    , out dtDB_Mst_District // dtDB_Mst_District
                    );
                ////
                //DataTable dtDB_Mst_NNTType = null;

                //Mst_NNTType_CheckDB(
                //    ref alParamsCoupleError // alParamsCoupleError
                //    , strNNTType // objNNTType
                //    , TConst.Flag.Yes // strFlagExistToCheck
                //    , TConst.Flag.Active // strFlagActiveListToCheck
                //    , out dtDB_Mst_NNTType // dtDB_Mst_NNTType
                //    );
                //////
                DataTable dtDB_Mst_Dealer = null;

				Mst_Dealer_CheckDB(
					ref alParamsCoupleError // alParamsCoupleError
					, strDLCode // strDLCode
					, TConst.Flag.Yes // strFlagExistToCheck
					, TConst.Flag.Active // strFlagActiveListToCheck
					, out dtDB_Mst_Dealer // dtDB_Mst_Dealer
					);
				////
				DataTable dtDB_Mst_GovTaxID = null;

                Mst_GovTaxID_CheckDB(
                    ref alParamsCoupleError // alParamsCoupleError
                    , strGovTaxID // objGovTaxID
                    , TConst.Flag.Yes // strFlagExistToCheck
                    , TConst.Flag.Active // strFlagActiveListToCheck
                    , out dtDB_Mst_GovTaxID // dtDB_Mst_GovTaxID
                    );
                ////
                if (strNNTFullName.Length < 1)
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.strNNTFullName", strNNTFullName
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Mst_NNT_Create_InvalidNNTFullName
                        , null
                        , alParamsCoupleError.ToArray()
                        );
                }
                ////
                if (strNNTAddress.Length < 1)
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.strNNTAddress", strNNTAddress
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Mst_NNT_Create_InvalidNNTAddress
                        , null
                        , alParamsCoupleError.ToArray()
                        );
                }
                ////
                if (strPresentBy.Length < 1)
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.strPresentBy", strPresentBy
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Mst_NNT_Create_InvalidPresentBy
                        , null
                        , alParamsCoupleError.ToArray()
                        );
                }
                ////
                if (strNNTPosition.Length < 1)
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.strNNTPosition", strNNTPosition
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Mst_NNT_Create_InvalidNNTPosition
                        , null
                        , alParamsCoupleError.ToArray()
                        );
                }
                ////
                if (strContactName.Length < 1)
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.strContactName", strContactName
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Mst_NNT_Create_InvalidContactName
                        , null
                        , alParamsCoupleError.ToArray()
                        );
                }
                ////
                if (strContactPhone.Length < 1)
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.strContactPhone", strContactPhone
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Mst_NNT_Create_InvalidContactPhone
                        , null
                        , alParamsCoupleError.ToArray()
                        );
                }
                ////
                if (strContactEmail.Length < 1)
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.strContactEmail", strContactEmail
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Mst_NNT_Create_InvalidContactEmail
                        , null
                        , alParamsCoupleError.ToArray()
                        );
                }
            }
            #endregion

            #region // SaveDB Mst_NNT:
            {
                // Init:
                //ArrayList alColumnEffective = new ArrayList();
                string strFN = "";
                DataRow drDB = dtDB_Mst_NNT.NewRow();
                strFN = "OrgID"; drDB[strFN] = strOrgID; // Tạm thời để = strOrgID
                strFN = "MST"; drDB[strFN] = strMST;
                strFN = "NNTFullName"; drDB[strFN] = strNNTFullName;
                strFN = "NetworkID"; drDB[strFN] = nNetworkID;
                strFN = "MSTParent"; drDB[strFN] = strMSTParent;
                strFN = "MSTBUCode"; drDB[strFN] = "X";
                strFN = "MSTBUPattern"; drDB[strFN] = "X";
                strFN = "MSTLevel"; drDB[strFN] = 1;
                strFN = "ProvinceCode"; drDB[strFN] = strProvinceCode;
                strFN = "DistrictCode"; drDB[strFN] = strDistrictCode;
                //strFN = "NNTType"; drDB[strFN] = strNNTType;
                strFN = "DLCode"; drDB[strFN] = strDLCode;
                strFN = "NNTAddress"; drDB[strFN] = strNNTAddress;
                strFN = "NNTMobile"; drDB[strFN] = strNNTMobile;
                strFN = "NNTPhone"; drDB[strFN] = strNNTPhone;
                strFN = "NNTFax"; drDB[strFN] = strNNTFax;
                strFN = "PresentBy"; drDB[strFN] = strPresentBy;
                strFN = "BusinessRegNo"; drDB[strFN] = strBusinessRegNo;
                strFN = "NNTPosition"; drDB[strFN] = strNNTPosition;
                strFN = "PresentIDNo"; drDB[strFN] = strPresentIDNo;
                strFN = "PresentIDType"; drDB[strFN] = strPresentIDType;
                strFN = "GovTaxID"; drDB[strFN] = strGovTaxID;
                strFN = "ContactName"; drDB[strFN] = strContactName;
                strFN = "ContactPhone"; drDB[strFN] = strContactPhone;
                strFN = "ContactEmail"; drDB[strFN] = strContactEmail;
                strFN = "Website"; drDB[strFN] = strWebsite;
                strFN = "CANumber"; drDB[strFN] = strCANumber;
                strFN = "CAOrg"; drDB[strFN] = strCAOrg;
                strFN = "CAEffDTimeUTCStart"; drDB[strFN] = strCAEffDTimeUTCStart;
                strFN = "CAEffDTimeUTCEnd"; drDB[strFN] = strCAEffDTimeUTCEnd;
                strFN = "PackageCode"; drDB[strFN] = strPackageCode;
                strFN = "CreatedDate"; drDB[strFN] = strCreatedDate;
                strFN = "AccNo"; drDB[strFN] = strAccNo;
                strFN = "AccHolder"; drDB[strFN] = strAccHolder;
                strFN = "BankName"; drDB[strFN] = strBankName;
                strFN = "BizType"; drDB[strFN] = strBizType;
                strFN = "BizFieldCode"; drDB[strFN] = strBizFieldCode;
                strFN = "BizSizeCode"; drDB[strFN] = strBizSizeCode;
                strFN = "RegisterStatus"; drDB[strFN] = TConst.RegisterStatus.Pending;
                strFN = "FlagActive"; drDB[strFN] = TConst.Flag.Active;
                strFN = "TCTStatus"; drDB[strFN] = TConst.Flag.Active;
                strFN = "CreateDTimeUTC"; drDB[strFN] = dtimeSys.ToString("yyyy-MM-dd HH:mm:ss");
                strFN = "CreateBy"; drDB[strFN] = strWAUserCode;
                strFN = "LogLUDTimeUTC"; drDB[strFN] = dtimeSys.ToString("yyyy-MM-dd HH:mm:ss");
                strFN = "LogLUBy"; drDB[strFN] = strWAUserCode;
                dtDB_Mst_NNT.Rows.Add(drDB);

                // Save:
                _cf.db.SaveData(
                    "Mst_NNT" // strTableName
                    , dtDB_Mst_NNT // dtData
                                   //, alColumnEffective.ToArray()
                    );
            }
            #endregion

            #region // Post Save:
            {
                Mst_NNT_UpdBU();
            }
            #endregion

            #region // Check:
            {
                string sqlPostCheck = CmUtils.StringUtils.Replace(@"
                        -----
                        select 
	                        count(t.MST) TotalQtyNetWork
                        from Mst_NNT t --//[mylock]
                        where(1=1)
	                        and t.MSTLevel = '1'
	                        and (t.MST != 'ALL' and t.MSTParent is null)
                    
                ");
                DataTable dsPostCheck = _cf.db.ExecQuery(sqlPostCheck).Tables[0];
                ////
                if (dsPostCheck.Rows.Count > 0)
                {
                    Int64 nTotalQtyNetWork = Convert.ToInt64(dsPostCheck.Rows[0]["TotalQtyNetWork"]);
                    if (nTotalQtyNetWork > 1)
                    {
                        alParamsCoupleError.AddRange(new object[]{
                            "Check.TotalQtyNetWork", nTotalQtyNetWork
                            , "Check.TotalQtyNetWork", nTotalQtyNetWork
                            });
                        throw CmUtils.CMyException.Raise(
                            TError.ErridnInventory.Mst_NNT_Create_InvalidTotalNetworkID
                            , null
                            , alParamsCoupleError.ToArray()
                            );
                    }
                }
                ////
            }
            #endregion
        }
		private void Mst_NNT_CreateForNetworkX_New20200208(
			string strTid
			, string strGwUserCode
			, string strGwPassword
			, string strWAUserCode
			, string strWAUserPassword
			, ref ArrayList alParamsCoupleError
			, DateTime dtimeSys
			//// 
			, object objMST
			, object objOrgID
			, object objNNTFullName
			, object objMSTParent
			, object objProvinceCode
			, object objDistrictCode
			//, object objNNTType
			, object objDLCode
			, object objNNTAddress
			, object objNNTMobile
			, object objNNTPhone
			, object objNNTFax
			, object objPresentBy
			, object objBusinessRegNo
			, object objNNTPosition
			, object objPresentIDNo
			, object objPresentIDType
			, object objGovTaxID
			, object objContactName
			, object objContactPhone
			, object objContactEmail
			, object objWebsite
			, object objCANumber
			, object objCAOrg
			, object objCAEffDTimeUTCStart
			, object objCAEffDTimeUTCEnd
			, object objPackageCode
			, object objCreatedDate
			, object objAccNo
			, object objAccHolder
			, object objBankName
			, object objBizType // objBizType
			, object objBizFieldCode // objBizFieldCode
			, object objBizSizeCode // objBizSizeCode
			, object objDealerType // objDealerType
			, object objAreaCode // Vùng thị trường
            , object objOrgID_MA // OrgID của vùng thị trường
            )
		{
			#region // Temp:
			string strFunctionName = "Mst_NNT_CreateForNetworkX";
			//string strErrorCodeDefault = TError.ErrHTCNM.Mnf_VIN_Get_QCX;
			alParamsCoupleError.AddRange(new object[]{
				"strFunctionName", strFunctionName
				, "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
                , "objMST", objMST
				, "objOrgID", objOrgID
				, "objNNTFullName", objNNTFullName
				, "objMSTParent", objMSTParent
				, "objProvinceCode", objProvinceCode
				, "objDistrictCode", objDistrictCode
                //, "objNNTType", objNNTType
                , "objDLCode", objDLCode
				, "objNNTAddress", objNNTAddress
				, "objNNTMobile", objNNTMobile
				, "objNNTPhone", objNNTPhone
				, "objNNTFax", objNNTFax
				, "objPresentBy", objPresentBy
				, "objBusinessRegNo", objBusinessRegNo
				, "objNNTPosition", objNNTPosition
				, "objPresentIDNo", objPresentIDNo
				, "objPresentIDType", objPresentIDType
				, "objGovTaxID", objGovTaxID
				, "objContactName", objContactName
				, "objContactPhone", objContactPhone
				, "objContactEmail", objContactEmail
				, "objWebsite", objWebsite
				, "objCANumber", objCANumber
				, "objCAOrg", objCAOrg
				, "objCAEffDTimeUTCStart", objCAEffDTimeUTCStart
				, "objCAEffDTimeUTCEnd", objCAEffDTimeUTCEnd
				, "objPackageCode", objPackageCode
				, "objCreatedDate", objCreatedDate
				, "objAccNo", objAccNo
				, "objAccHolder", objAccHolder
				, "objBankName", objBankName
				, "objBizType", objBizType
				, "objBizFieldCode", objBizFieldCode
				, "objBizSizeCode", objBizSizeCode
				, "objDealerType", objDealerType
				, "objAreaCode", objAreaCode
				});
			#endregion

			#region // Refine and Check Input:
			////
			string strMST = TUtils.CUtils.StdParam(objMST);
			string strOrgID = TUtils.CUtils.StdParam(objOrgID);
			string strNNTFullName = string.Format("{0}", objNNTFullName).Trim();
			string strMSTParent = TUtils.CUtils.StdParam(objMSTParent);
			string strProvinceCode = TUtils.CUtils.StdParam(objProvinceCode);
			string strDistrictCode = TUtils.CUtils.StdParam(objDistrictCode);
			//string strNNTType = TUtils.CUtils.StdParam(objNNTType);
			string strDLCode = TUtils.CUtils.StdParam(objDLCode);
			string strNNTAddress = string.Format("{0}", objNNTAddress).Trim();
			string strNNTMobile = string.Format("{0}", objNNTMobile).Trim();
			string strNNTPhone = string.Format("{0}", objNNTPhone).Trim();
			string strNNTFax = string.Format("{0}", objNNTFax).Trim();
			string strPresentBy = string.Format("{0}", objPresentBy).Trim();
			string strBusinessRegNo = string.Format("{0}", objBusinessRegNo).Trim();
			string strNNTPosition = string.Format("{0}", objNNTPosition).Trim();
			string strPresentIDNo = string.Format("{0}", objPresentIDNo).Trim();
			string strPresentIDType = string.Format("{0}", objPresentIDType).Trim();
			string strGovTaxID = TUtils.CUtils.StdParam(objGovTaxID);
			string strContactName = string.Format("{0}", objContactName).Trim();
			string strContactPhone = string.Format("{0}", objContactPhone).Trim();
			string strContactEmail = string.Format("{0}", objContactEmail).Trim();
			string strWebsite = string.Format("{0}", objWebsite).Trim();
			string strCANumber = string.Format("{0}", objCANumber).Trim();
			string strCAOrg = string.Format("{0}", objCAOrg).Trim();
			string strCAEffDTimeUTCStart = TUtils.CUtils.StdDTime(objCAEffDTimeUTCStart);
			string strCAEffDTimeUTCEnd = TUtils.CUtils.StdDTime(objCAEffDTimeUTCEnd);
			string strPackageCode = string.Format("{0}", objPackageCode).Trim();
			string strCreatedDate = TUtils.CUtils.StdDate(objCreatedDate);
			string strAccNo = string.Format("{0}", objAccNo).Trim();
			string strAccHolder = string.Format("{0}", objAccHolder).Trim();
			string strBankName = string.Format("{0}", objBankName).Trim();
			string strBizType = TUtils.CUtils.StdParam(objBizType);
			string strBizFieldCode = TUtils.CUtils.StdParam(objBizFieldCode);
			string strBizSizeCode = TUtils.CUtils.StdParam(objBizSizeCode);
			string strDealerType = TUtils.CUtils.StdParam(objDealerType);
			string strAreaCode = TUtils.CUtils.StdParam(objAreaCode);
            string strOrgID_MA = TUtils.CUtils.StdParam(objOrgID_MA);

            // drAbilityOfUser:
            //DataRow drAbilityOfUser = Sys_User_GetAbilityViewOfUser(_cf.sinf.strUserCode);
            ////
            DataTable dtDB_Mst_NNT = null;
			{
				////
				if (strMST == null || strMST.Length < 1)
				{
					alParamsCoupleError.AddRange(new object[]{
						"Check.strMST", strMST
						});
					throw CmUtils.CMyException.Raise(
						TError.ErridnInventory.Mst_NNT_Create_InvalidMST
						, null
						, alParamsCoupleError.ToArray()
						);
				}
				////
				Mst_NNT_CheckDB(
					ref alParamsCoupleError // alParamsCoupleError
					, strMST // objMST
					, TConst.Flag.No // strFlagExistToCheck
					, "" // strFlagActiveListToCheck
					, "" // strTCTStatusListToCheck
					, out dtDB_Mst_NNT // dtDB_Mst_NNT
					);
				////
				DataTable dtDB_Mst_NNT_Parent = null;

				if (!string.IsNullOrEmpty(strMSTParent))
				{
					/////
					Mst_NNT_CheckDB(
						ref alParamsCoupleError // alParamsCoupleError
						, strMSTParent // objMSTParent
						, TConst.Flag.Yes // strFlagExistToCheck
						, TConst.Flag.Active // strFlagActiveListToCheck
						, "" // strTCTStatusListToCheck
						, out dtDB_Mst_NNT_Parent // dtDB_Mst_NNT_Parent
						);
					////
				}
				////
				//DataTable dtDB_Mst_Province = null;

				//Mst_Province_CheckDB(
				//	ref alParamsCoupleError // alParamsCoupleError
				//	, strProvinceCode // objProvinceCode
				//	, TConst.Flag.Yes // strFlagExistToCheck
				//	, TConst.Flag.Active // strFlagActiveListToCheck
				//	, out dtDB_Mst_Province // dtDB_Mst_Province
				//	);
				////
				//DataTable dtDB_Mst_District = null;

				//Mst_District_CheckDB(
				//	ref alParamsCoupleError // alParamsCoupleError
				//	, strProvinceCode // objProvinceCode
				//	, strDistrictCode // objDistrictCode
				//	, TConst.Flag.Yes // strFlagExistToCheck
				//	, TConst.Flag.Active // strFlagActiveListToCheck
				//	, out dtDB_Mst_District // dtDB_Mst_District
				//	);
				////
				//DataTable dtDB_Mst_NNTType = null;

				//Mst_NNTType_CheckDB(
				//    ref alParamsCoupleError // alParamsCoupleError
				//    , strNNTType // objNNTType
				//    , TConst.Flag.Yes // strFlagExistToCheck
				//    , TConst.Flag.Active // strFlagActiveListToCheck
				//    , out dtDB_Mst_NNTType // dtDB_Mst_NNTType
				//    );
				//////
				DataTable dtDB_Mst_Dealer = null;

				Mst_Dealer_CheckDB(
					ref alParamsCoupleError // alParamsCoupleError
					, strDLCode // strDLCode
					, TConst.Flag.Yes // strFlagExistToCheck
					, TConst.Flag.Active // strFlagActiveListToCheck
					, out dtDB_Mst_Dealer // dtDB_Mst_Dealer
					);
				//// NC20200210
				//DataTable dtDB_Mst_GovTaxID = null;

				//Mst_GovTaxID_CheckDB(
				//	ref alParamsCoupleError // alParamsCoupleError
				//	, strGovTaxID // objGovTaxID
				//	, TConst.Flag.Yes // strFlagExistToCheck
				//	, TConst.Flag.Active // strFlagActiveListToCheck
				//	, out dtDB_Mst_GovTaxID // dtDB_Mst_GovTaxID
				//	);
				////
				if (strNNTFullName.Length < 1)
				{
					alParamsCoupleError.AddRange(new object[]{
						"Check.strNNTFullName", strNNTFullName
						});
					throw CmUtils.CMyException.Raise(
						TError.ErridnInventory.Mst_NNT_Create_InvalidNNTFullName
						, null
						, alParamsCoupleError.ToArray()
						);
				}
				////
				//if (strNNTAddress.Length < 1)
				//{
				//	alParamsCoupleError.AddRange(new object[]{
				//		"Check.strNNTAddress", strNNTAddress
				//		});
				//	throw CmUtils.CMyException.Raise(
				//		TError.ErridnInventory.Mst_NNT_Create_InvalidNNTAddress
				//		, null
				//		, alParamsCoupleError.ToArray()
				//		);
				//}
				//// NC20200210
				//if (strPresentBy.Length < 1)
				//{
				//	alParamsCoupleError.AddRange(new object[]{
				//		"Check.strPresentBy", strPresentBy
				//		});
				//	throw CmUtils.CMyException.Raise(
				//		TError.ErridnInventory.Mst_NNT_Create_InvalidPresentBy
				//		, null
				//		, alParamsCoupleError.ToArray()
				//		);
				//}
				//// NC20200210
				//if (strNNTPosition.Length < 1)
				//{
				//	alParamsCoupleError.AddRange(new object[]{
				//		"Check.strNNTPosition", strNNTPosition
				//		});
				//	throw CmUtils.CMyException.Raise(
				//		TError.ErridnInventory.Mst_NNT_Create_InvalidNNTPosition
				//		, null
				//		, alParamsCoupleError.ToArray()
				//		);
				//}
				//// NC20200210
				//if (strContactName.Length < 1)
				//{
				//	alParamsCoupleError.AddRange(new object[]{
				//		"Check.strContactName", strContactName
				//		});
				//	throw CmUtils.CMyException.Raise(
				//		TError.ErridnInventory.Mst_NNT_Create_InvalidContactName
				//		, null
				//		, alParamsCoupleError.ToArray()
				//		);
				//}
				//// NC20200210
				//if (strContactPhone.Length < 1)
				//{
				//	alParamsCoupleError.AddRange(new object[]{
				//		"Check.strContactPhone", strContactPhone
				//		});
				//	throw CmUtils.CMyException.Raise(
				//		TError.ErridnInventory.Mst_NNT_Create_InvalidContactPhone
				//		, null
				//		, alParamsCoupleError.ToArray()
				//		);
				//}
				//// NC20200210
				//if (strContactEmail.Length < 1)
				//{
				//	alParamsCoupleError.AddRange(new object[]{
				//		"Check.strContactEmail", strContactEmail
				//		});
				//	throw CmUtils.CMyException.Raise(
				//		TError.ErridnInventory.Mst_NNT_Create_InvalidContactEmail
				//		, null
				//		, alParamsCoupleError.ToArray()
				//		);
				//}
			}
			#endregion

			#region // SaveDB Mst_NNT:
			{
				// Init:
				//ArrayList alColumnEffective = new ArrayList();
				string strFN = "";
				DataRow drDB = dtDB_Mst_NNT.NewRow();
				strFN = "OrgID"; drDB[strFN] = strOrgID; // Tạm thời để = strOrgID
				strFN = "MST"; drDB[strFN] = strMST;
				strFN = "NNTFullName"; drDB[strFN] = strNNTFullName;
				strFN = "NetworkID"; drDB[strFN] = nNetworkID;
				strFN = "MSTParent"; drDB[strFN] = strMSTParent;
				strFN = "MSTBUCode"; drDB[strFN] = "X";
				strFN = "MSTBUPattern"; drDB[strFN] = "X";
				strFN = "MSTLevel"; drDB[strFN] = 1;
				strFN = "ProvinceCode"; drDB[strFN] = strProvinceCode;
				strFN = "DistrictCode"; drDB[strFN] = strDistrictCode;
				//strFN = "NNTType"; drDB[strFN] = strNNTType;
				strFN = "DLCode"; drDB[strFN] = strDLCode;
				strFN = "NNTAddress"; drDB[strFN] = strNNTAddress;
				strFN = "NNTMobile"; drDB[strFN] = strNNTMobile;
				strFN = "NNTPhone"; drDB[strFN] = strNNTPhone;
				strFN = "NNTFax"; drDB[strFN] = strNNTFax;
				strFN = "PresentBy"; drDB[strFN] = strPresentBy;
				strFN = "BusinessRegNo"; drDB[strFN] = strBusinessRegNo;
				strFN = "NNTPosition"; drDB[strFN] = strNNTPosition;
				strFN = "PresentIDNo"; drDB[strFN] = strPresentIDNo;
				strFN = "PresentIDType"; drDB[strFN] = strPresentIDType;
				strFN = "GovTaxID"; drDB[strFN] = strGovTaxID;
				strFN = "ContactName"; drDB[strFN] = strContactName;
				strFN = "ContactPhone"; drDB[strFN] = strContactPhone;
				strFN = "ContactEmail"; drDB[strFN] = strContactEmail;
				strFN = "Website"; drDB[strFN] = strWebsite;
				strFN = "CANumber"; drDB[strFN] = strCANumber;
				strFN = "CAOrg"; drDB[strFN] = strCAOrg;
				strFN = "CAEffDTimeUTCStart"; drDB[strFN] = strCAEffDTimeUTCStart;
				strFN = "CAEffDTimeUTCEnd"; drDB[strFN] = strCAEffDTimeUTCEnd;
				strFN = "PackageCode"; drDB[strFN] = strPackageCode;
				strFN = "CreatedDate"; drDB[strFN] = strCreatedDate;
				strFN = "AccNo"; drDB[strFN] = strAccNo;
				strFN = "AccHolder"; drDB[strFN] = strAccHolder;
				strFN = "BankName"; drDB[strFN] = strBankName;
				strFN = "BizType"; drDB[strFN] = strBizType;
				strFN = "BizFieldCode"; drDB[strFN] = strBizFieldCode;
				strFN = "BizSizeCode"; drDB[strFN] = strBizSizeCode;
				strFN = "AreaCode"; drDB[strFN] = strAreaCode;
                strFN = "OrgID_MA"; drDB[strFN] = strOrgID_MA;
                strFN = "DealerType"; drDB[strFN] = strDealerType;
				strFN = "RegisterStatus"; drDB[strFN] = TConst.RegisterStatus.Finish;
				strFN = "FlagActive"; drDB[strFN] = TConst.Flag.Active;
				strFN = "TCTStatus"; drDB[strFN] = TConst.Flag.Active;
				strFN = "CreateDTimeUTC"; drDB[strFN] = dtimeSys.ToString("yyyy-MM-dd HH:mm:ss");
				strFN = "CreateBy"; drDB[strFN] = strWAUserCode;
				strFN = "LogLUDTimeUTC"; drDB[strFN] = dtimeSys.ToString("yyyy-MM-dd HH:mm:ss");
				strFN = "LogLUBy"; drDB[strFN] = strWAUserCode;
				dtDB_Mst_NNT.Rows.Add(drDB);

				// Save:
				_cf.db.SaveData(
					"Mst_NNT" // strTableName
					, dtDB_Mst_NNT // dtData
								   //, alColumnEffective.ToArray()
					);
			}
			#endregion

			#region // Post Save:
			{
				Mst_NNT_UpdBU();
			}
			#endregion

			#region // Check:
			{
				string sqlPostCheck = CmUtils.StringUtils.Replace(@"
                        -----
                        select 
	                        count(t.MST) TotalQtyNetWork
                        from Mst_NNT t --//[mylock]
                        where(1=1)
	                        and t.MSTLevel = '1'
	                        and (t.MST != 'ALL' and t.MSTParent is null)
                    
                ");
				DataTable dsPostCheck = _cf.db.ExecQuery(sqlPostCheck).Tables[0];
				////
				if (dsPostCheck.Rows.Count > 0)
				{
					Int64 nTotalQtyNetWork = Convert.ToInt64(dsPostCheck.Rows[0]["TotalQtyNetWork"]);
					if (nTotalQtyNetWork > 1)
					{
						alParamsCoupleError.AddRange(new object[]{
							"Check.TotalQtyNetWork", nTotalQtyNetWork
							, "Check.TotalQtyNetWork", nTotalQtyNetWork
							});
						throw CmUtils.CMyException.Raise(
							TError.ErridnInventory.Mst_NNT_Create_InvalidTotalNetworkID
							, null
							, alParamsCoupleError.ToArray()
							);
					}
				}
				////
			}
			#endregion

			#region // Upd Mst_Inventory:
			//// NC.HTTT.20200512: Khi tao Org con thi tao Kho cha I cho Org con do
			{
				//string sqlUpdMst_Inventory = CmUtils.StringUtils.Replace(@"
				//		---- Mst_InventoryLevelType:
				//		insert into Mst_InventoryLevelType
				//		(
				//			OrgID
				//			, InvLevelType
				//			, NetworkID
				//			, InvLevelTypeName
				//			, FlagActive
				//			, LogLUDTimeUTC
				//			, LogLUBy
				//		)
				//		select
				//			'@strOrgID' OrgID
				//			, t.InvLevelType
				//			, '@strNetworkID' NetworkID
				//			, t.InvLevelTypeName
				//			, t.FlagActive
				//			, '2000-01-01 00:00:00' LogLUDTimeUTC
				//			, 'SYS' LogLUBy
				//		from Mst_InventoryLevelType t -- //[mylock]
				//		where(1=1)
				//			and t.OrgID = '0'
				//		;
    //                    ----- Mst_InventoryType:
    //                    insert into Mst_InventoryType
				//		(
				//			OrgID
				//			, InvType
				//			, NetworkID
				//			, InvTypeName
				//			, FlagActive
				//			, LogLUDTimeUTC
				//			, LogLUBy
				//		)
				//		select
				//			'@strOrgID' OrgID
				//			, t.InvType
				//			, '@strNetworkID' NetworkID
				//			, t.InvTypeName
				//			, t.FlagActive
				//			, '2000-01-01 00:00:00' LogLUDTimeUTC
				//			, 'SYS' LogLUBy
				//		from Mst_InventoryType t --//[mylock]
				//		where(1=1)
				//			and t.OrgID = '0'
				//		;

				//		---- Mst_Inventory:
				//		insert into Mst_Inventory
				//		(
				//			OrgID
				//			, InvCode
				//			, NetworkID
				//			, InvCodeParent
				//			, InvBUCode
				//			, InvBUPattern
				//			, InvLevel
				//			, InvLevelType
				//			, InvType
				//			, InvName
				//			, InvAddress
				//			, InvContactName
				//			, InvContactPhone
				//			, InvContactEmail
				//			, FlagIn_Out
				//			, FlagActive
				//			, Remark
				//			, LogLUDTimeUTC
				//			, LogLUBy
				//		)
				//		select
				//			'@strOrgID' OrgID
				//			, t.InvCode
				//			, '@strNetworkID' NetworkID
				//			, t.InvCodeParent
				//			, t.InvBUCode
				//			, t.InvBUPattern
				//			, t.InvLevel
				//			, t.InvLevelType
				//			, t.InvType
				//			, t.InvName
				//			, t.InvAddress
				//			, t.InvContactName
				//			, t.InvContactPhone
				//			, t.InvContactEmail
				//			, t.FlagIn_Out
				//			, t.FlagActive
				//			, t.Remark
				//			, '2000-01-01 00:00:00' LogLUDTimeUTC
				//			, 'SYS' LogLUBy
				//		from Mst_Inventory t --//[mylock]
				//		where(1=1)
				//			and t.OrgID = '0'
				//		;
    //                "
				//	, "@strOrgID", strOrgID
				//	, "@strNetworkID", nNetworkID
				//);
				//DataSet dtDB = _cf.db.ExecQuery(
				//		sqlUpdMst_Inventory
				//		);
				////
			}
			#endregion
		}
		 
		// NC.20200519. Tao Org con cho case OrgID da ton tai tren Inos( truoc dang xu ly case OrgID moi hoan toan):
		public DataSet WAS_Mst_NNT_CreateForNetwork_New20200417(
			ref ArrayList alParamsCoupleError
			, RQ_Mst_NNT objRQ_Mst_NNT
			////
			, out RT_Mst_NNT objRT_Mst_NNT
			)
		{
			#region // Temp:
			string strTid = objRQ_Mst_NNT.Tid;
			objRT_Mst_NNT = new RT_Mst_NNT();
			DataSet mdsResult = CmUtils.CMyDataSet.NewMyDataSet(strTid);
			DateTime dtimeSys = DateTime.UtcNow;
			//DataSet mdsExec = null;
			//DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(objRQ_Mst_NNT.Tid);
			//int nTidSeq = 0;
			//bool bNeedTransaction = true;
			string strFunctionName = "WAS_Mst_NNT_CreateForNetwork";
			string strErrorCodeDefault = TError.ErridnInventory.WAS_Mst_NNT_CreateForNetwork;
			alParamsCoupleError.AddRange(new object[]{
				"strFunctionName", strFunctionName
				, "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
				});
			#endregion

			try
			{
				#region // Init:
				#endregion

				#region // Refine and Check Input:
				List<Mst_NNT> lst_Mst_NNT = new List<Mst_NNT>();
				#endregion

				#region // WS_Mst_NNT_CreateForNetwork:
				// C Đông chốt thêm vùng thị trường cho Inventory cho đồng bộ cac DA
				mdsResult = Mst_NNT_CreateForNetwork_New20200417(
					objRQ_Mst_NNT.Tid // strTid
					, objRQ_Mst_NNT.GwUserCode // strGwUserCode
					, objRQ_Mst_NNT.GwPassword // strGwPassword
					, objRQ_Mst_NNT.WAUserCode // strUserCode
					, objRQ_Mst_NNT.WAUserPassword // strUserPassword
					, objRQ_Mst_NNT.AccessToken // AccessToken
					, objRQ_Mst_NNT.NetworkID // NetworkID
					, objRQ_Mst_NNT.OrgID // OrgID
					//, objRQ_Mst_NNT.FlagIsEndUser // strFlagIsEndUser
					, ref alParamsCoupleError // alParamsCoupleError
											  ////
					, objRQ_Mst_NNT.Mst_NNT.MST // objMST
					, objRQ_Mst_NNT.Mst_NNT.OrgID // strOrgID
					, objRQ_Mst_NNT.Mst_NNT.NNTFullName // objNNTFullName
					//, objRQ_Mst_NNT.Mst_NNT.NNTShortName // objNNTShortName
					, objRQ_Mst_NNT.Mst_NNT.MSTParent // objMSTParent
					, objRQ_Mst_NNT.Mst_NNT.ProvinceCode // objProvinceCode
					, objRQ_Mst_NNT.Mst_NNT.DistrictCode // objDistrictCode
														 //, objRQ_Mst_NNT.Mst_NNT.NNTType // objNNTType
					, objRQ_Mst_NNT.Mst_NNT.DLCode // objDLCode
					, objRQ_Mst_NNT.Mst_NNT.NNTAddress // objAddress
					, objRQ_Mst_NNT.Mst_NNT.NNTMobile // objMobile
					, objRQ_Mst_NNT.Mst_NNT.NNTPhone // objPhone
					, objRQ_Mst_NNT.Mst_NNT.NNTFax // objFax
					, objRQ_Mst_NNT.Mst_NNT.PresentBy // objPresentBy
					, objRQ_Mst_NNT.Mst_NNT.BusinessRegNo // objBusinessRegNo
					, objRQ_Mst_NNT.Mst_NNT.NNTPosition // objPosition
					, objRQ_Mst_NNT.Mst_NNT.PresentIDNo // objPresentIDNo
					, objRQ_Mst_NNT.Mst_NNT.PresentIDType // objPresentIDType
					, objRQ_Mst_NNT.Mst_NNT.GovTaxID // objGovTaxID
					, objRQ_Mst_NNT.Mst_NNT.ContactName // objContactName
					, objRQ_Mst_NNT.Mst_NNT.ContactPhone // objContactPhone
					, objRQ_Mst_NNT.Mst_NNT.ContactEmail // objContactEmail
					, objRQ_Mst_NNT.Mst_NNT.Website // objWebsite
					, objRQ_Mst_NNT.Mst_NNT.CANumber // objCANumber
					, objRQ_Mst_NNT.Mst_NNT.CAOrg // objCAOrg
					, objRQ_Mst_NNT.Mst_NNT.CAEffDTimeUTCStart // objCAEffDTimeUTCStart
					, objRQ_Mst_NNT.Mst_NNT.CAEffDTimeUTCEnd // objCAEffDTimeUTCEnd
					, objRQ_Mst_NNT.Mst_NNT.PackageCode // objPackageCode
					, objRQ_Mst_NNT.Mst_NNT.CreatedDate // objCreatedDate
					, objRQ_Mst_NNT.Mst_NNT.AccNo // objAccNo
					, objRQ_Mst_NNT.Mst_NNT.AccHolder // objAccHolder
					, objRQ_Mst_NNT.Mst_NNT.BankName // objBankName
					, objRQ_Mst_NNT.Mst_NNT.BizType // objBizType
					, objRQ_Mst_NNT.Mst_NNT.BizFieldCode // objBizFieldCode
					, objRQ_Mst_NNT.Mst_NNT.BizSizeCode // objBizSizeCode
					, objRQ_Mst_NNT.Mst_NNT.DealerType // objDealerType
                    , objRQ_Mst_NNT.Mst_NNT.AreaCode // objAreaCode
                    , objRQ_Mst_NNT.Mst_NNT.OrgID_MA // objOrgID_MA
                                                     //, "ALL" // AreaCode
                    );
				#endregion

				// Return Good:
				return mdsResult;
			}
			catch (Exception exc)
			{
				#region // Catch of try:
				// Return Bad:
				return TUtils.CProcessExc.Process(
					ref mdsResult
					, exc
					, strErrorCodeDefault
					, alParamsCoupleError.ToArray()
					);
				#endregion
			}
			finally
			{
				#region // Finally of try:
				// Write ReturnLog:
				//_cf.ProcessBizReturn(
				//	ref mdsResult // mdsFinal
				//	, strTid // strTid
				//	, strFunctionName // strFunctionName
				//	);
				#endregion
			}
		}

		public DataSet Mst_NNT_CreateForNetwork_New20200417(
			string strTid
			, string strGwUserCode
			, string strGwPassword
			, string strWAUserCode
			, string strWAUserPassword
			, string strAccessToken
			, string strNetworkID
			, string strOrgID
			//, string strFlagIsEndUser
			, ref ArrayList alParamsCoupleError
			////
			, object objMST
			, object objOrgID
			, object objNNTFullName
			//, object objNNTShortName
			, object objMSTParent
			, object objProvinceCode
			, object objDistrictCode
			//, object objNNTType
			, object objDLCode
			, object objNNTAddress
			, object objNNTMobile
			, object objNTTPhone
			, object objNNTFax
			, object objPresentBy
			, object objBusinessRegNo
			, object objNNTPosition
			, object objPresentIDNo
			, object objPresentIDType
			, object objGovTaxID
			, object objContactName
			, object objContactPhone
			, object objContactEmail
			, object objWebsite
			, object objCANumber
			, object objCAOrg
			, object objCAEffDTimeUTCStart
			, object objCAEffDTimeUTCEnd
			, object objPackageCode
			, object objCreatedDate
			, object objAccNo
			, object objAccHolder
			, object objBankName
			, object objBizType // objBizType
			, object objBizFieldCode // objBizFieldCode
			, object objBizSizeCode // objBizSizeCode
			, object objDealerType // objDealerType
			, object objAreaCode // AreaCode
            , object objOrgID_MA // OrgID_MA
            )
		{
			#region // Temp:
			DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
			//int nTidSeq = 0;
			DateTime dtimeSys = DateTime.UtcNow;
			string strFunctionName = "Mst_NNT_CreateForNetwork";
			string strErrorCodeDefault = TError.ErridnInventory.Mst_NNT_CreateForNetwork;
			alParamsCoupleError.AddRange(new object[]{
					"strFunctionName", strFunctionName
					, "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
			        ////
					, "objMST", objMST
					, "objOrgID", objOrgID
					, "objMSTParent", objMSTParent
					, "objProvinceCode", objProvinceCode
					, "objDistrictCode", objDistrictCode
                    //, "objNNTType", objNNTType
                    , "objDLCode", objDLCode
					, "objNNTFullName", objNNTFullName
					//, "objNNTShortName", objNNTShortName
					, "objNNTAddress", objNNTAddress
					, "objNNTMobile", objNNTMobile
					, "objNTTPhone", objNTTPhone
					, "objNNTFax", objNNTFax
					, "objPresentBy", objPresentBy
					, "objBusinessRegNo", objBusinessRegNo
					, "objNNTPosition", objNNTPosition
					, "objPresentIDNo", objPresentIDNo
					, "objPresentIDType", objPresentIDType
					, "objGovTaxID", objGovTaxID
					, "objContactName", objContactName
					, "objContactPhone", objContactPhone
					, "objContactEmail", objContactEmail
					, "objWebsite", objWebsite
					, "objCANumber", objCANumber
					, "objCAOrg", objCAOrg
					, "objCAEffDTimeUTCStart", objCAEffDTimeUTCStart
					, "objCAEffDTimeUTCEnd", objCAEffDTimeUTCEnd
					, "objPackageCode", objPackageCode
					, "objAccNo", objAccNo
					, "objAccHolder", objAccHolder
					, "objBankName", objBankName
					, "objAreaCode", objAreaCode
					});
			#endregion

			try
			{
				#region // Init:
				//_cf.db.LogUserId = _cf.sinf.strUserCode;
				_cf.db.BeginTransaction();

				// Write RequestLog:
				_cf.ProcessBizReq_OutSide(
					strTid // strTid
					, strGwUserCode // strGwUserCode
					, strGwPassword // strGwPassword
					, strWAUserCode // objUserCode
					, strFunctionName // strFunctionName
					, alParamsCoupleError // alParamsCoupleError
					);

				//bool bFlagIsEndUser = CmUtils.StringUtils.StringEqual(strFlagIsEndUser, TConst.Flag.Yes);
				//if (!bFlagIsEndUser)
				{
					Sys_User_CheckAuthorize(
						strTid // strTid
						, strGwUserCode // strGwUserCode
						, strGwPassword // strGwPassword
						, strWAUserCode // strWAUserCode
										//, strWAUserPassword // strWAUserPassword
						, ref mdsFinal // mdsFinal
						, ref alParamsCoupleError // alParamsCoupleError
						, dtimeSys // dtimeSys
						, strAccessToken // strAccessToken
						, strNetworkID // strNetworkID
						, strOrgID // strOrgID
						, TConst.Flag.Active // strFlagUserCodeToCheck
						);

					//Check Access/ Deny:
					Sys_Access_CheckDenyV30(
						ref alParamsCoupleError
						, strWAUserCode
						, strFunctionName
						);
				}
				#endregion

				#region // Call Inos Get Org:
				// 2020-05-19: Nếu OrgID chưa tồn tại trên Inos (OrgID truyền vào = null) thì gọi hàm tạo OrgID mới, ngược lại OrgID đã tồn tại trên Inos thì lấy OrgID truyền vào
				if (string.IsNullOrEmpty((string)objOrgID))
				{
					Inos_OrgService_CreateOrgForNetworkX(
						strTid // strTid
						, strGwUserCode // strGwUserCode
						, strGwPassword // strGwPassword
						, strWAUserCode // strWAUserCode
						, strWAUserPassword // strWAUserPassword
						, strAccessToken // (string)objAccessToken // strAccessToken
						, ref mdsFinal // mdsFinal
						, ref alParamsCoupleError // alParamsCoupleError
						, dtimeSys // dtimeSys
								   ////
						, objMST
						, objNNTFullName
						, objContactName
						, objContactPhone
						, objContactEmail
						, objBizType
						, objBizFieldCode
						, objBizSizeCode
						, out objOrgID
						);
				}
				#endregion

				#region // CheckOrg:
				{
					DataSet dsGetData = null;

					Inos_OrgService_GetOrgX(
						strTid // strTid
						, strGwUserCode // strGwUserCode
						, strGwPassword // strGwPassword
						, strWAUserCode // strWAUserCode
						, strWAUserPassword // strWAUserPassword
						, strAccessToken // strAccessToken
						, ref mdsFinal // mdsFinal
						, ref alParamsCoupleError // alParamsCoupleError
						, dtimeSys // dtimeSys
								   ////
						, objOrgID // objId
								   ////
						, out dsGetData // dsData
						);
				}
				#endregion

				#region // Call MasterServer:
				string strOrgIDSln = null;
				{
					OS_MstSv_OrgInNetwork_CreateX(
						strTid // strTid
						, strGwUserCode // strGwUserCode
						, strGwPassword // strGwPassword
						, strWAUserCode // strWAUserCode
						, strWAUserPassword // strWAUserPassword
						, strAccessToken // strAccessToken
						, strNetworkID // strNetworkID
						, strOrgID // strOrgID
						, ref alParamsCoupleError // alParamsCoupleError
												  ////
						, objOrgID // objOrgID
						, objMST // objMST
						, out strOrgIDSln // strOrgIDSln
						);
				}
				#endregion

				#region // Create Org:
				{
					Mst_Org_Create_X(
						strTid // strTid
						, strGwUserCode // strGwUserCode
						, strGwPassword // strGwPassword
						, strWAUserCode // strWAUserCode
						, strWAUserPassword // strWAUserPassword
						, strAccessToken // strAccessToken
						, strNetworkID // strNetworkID
						, strOrgID // strOrgID
						, ref alParamsCoupleError // alParamsCoupleError
						, dtimeSys // dtimeSys
						, objOrgID // objOrgID
						, strNetworkID // strNetworkID
						, strOrgIDSln // strOrgIDSln
						);

					OS_MstSvPrdCenter_MstOrgCreate(
						strTid // strTid
						, strGwUserCode // strGwUserCode
						, strGwPassword // strGwPassword
						, strWAUserCode // strWAUserCode
						, strWAUserPassword // strWAUserPassword
						, strNetworkID // strNetworkID
						, ref alParamsCoupleError // strOrgID
						, objOrgID
						, strNetworkID
						, objMST
						);
				}
				#endregion

				#region // Mst_NNT_CreateForNetworkX:
				//DataSet dsGetData = null;
				{
					Mst_NNT_CreateForNetworkX_New20200208(
						strTid // strTid
						, strGwUserCode // strGwUserCode
						, strGwPassword // strGwPassword
						, strWAUserCode // strWAUserCode
						, strWAUserPassword // strWAUserPassword
						, ref alParamsCoupleError // alParamsCoupleError
						, dtimeSys // dtimeSys
								   ////
						, objMST // objMST
						, objOrgID // objOrgID
						, objNNTFullName // objNNTFullName
						//, objNNTShortName // objNNTShortName
						, objMSTParent // objMSTParent
						, objProvinceCode // objProvinceCode
						, objDistrictCode // objDistrictCode
										  //, objNNTType // objNNTType
						, objDLCode // objDLCode
						, objNNTAddress // objNNTAddress
						, objNNTMobile // objNNTMobile
						, objNTTPhone // objNTTPhone
						, objNNTFax // objNNTFax
						, objPresentBy // objPresentBy
						, objBusinessRegNo // objBusinessRegNo
						, objNNTPosition // objNNTPosition
						, objPresentIDNo // objPresentIDNo
						, objPresentIDType // objPresentIDType
						, objGovTaxID // objGovTaxID
						, objContactName // objContactName
						, objContactPhone // objContactPhone
						, objContactEmail // objContactEmail
						, objWebsite // objWebsite
						, objCANumber // objCANumber
						, objCAOrg // objCAOrg
						, objCAEffDTimeUTCStart // objCAEffDTimeUTCStart
						, objCAEffDTimeUTCEnd // objCAEffDTimeUTCEnd
						, objPackageCode // objPackageCode
						, objCreatedDate // objCreatedDate
						, objAccNo // objAccNo
						, objAccHolder // objAccHolder
						, objBankName // objBankName
						, objBizType // objBizType
						, objBizFieldCode // objBizFieldCode
						, objBizSizeCode // objBizSizeCode
						, objDealerType // objDealerType
						, objAreaCode // objAreaCode
                        , objOrgID_MA // objOrgID_MA
                        );

					#region // Init Values Default:
					{
						string str_InitValuesDefault = CmUtils.StringUtils.Replace(@"
								---- Mst_InventoryLevelType:
								insert into Mst_InventoryLevelType
								(
									OrgID
									, InvLevelType
									, NetworkID
									, InvLevelTypeName
									, FlagActive
									, LogLUDTimeUTC
									, LogLUBy
								)
								select
									'@strOrgID' OrgID
									, t.InvLevelType
									, '@strNetworkID' NetworkID
									, t.InvLevelTypeName
									, t.FlagActive
									, '2000-01-01 00:00:00' LogLUDTimeUTC
									, 'SYS' LogLUBy
								from Mst_InventoryLevelType t -- //[mylock]
								where(1=1)
									and t.OrgID = '0'
								;
								----- Mst_InventoryType:
								insert into Mst_InventoryType
								(
									OrgID
									, InvType
									, NetworkID
									, InvTypeName
									, FlagActive
									, LogLUDTimeUTC
									, LogLUBy
								)
								select
									'@strOrgID' OrgID
									, t.InvType
									, '@strNetworkID' NetworkID
									, t.InvTypeName
									, t.FlagActive
									, '2000-01-01 00:00:00' LogLUDTimeUTC
									, 'SYS' LogLUBy
								from Mst_InventoryType t --//[mylock]
								where(1=1)
									and t.OrgID = '0'
								;

								---- Mst_Inventory:
								insert into Mst_Inventory
								(
									OrgID
									, InvCode
									, NetworkID
									, InvCodeParent
									, InvBUCode
									, InvBUPattern
									, InvLevel
									, InvLevelType
									, InvType
									, InvName
									, InvAddress
									, InvContactName
									, InvContactPhone
									, InvContactEmail
									, FlagIn_Out
									, FlagActive
									, Remark
									, LogLUDTimeUTC
									, LogLUBy
								)
								select
									'@strOrgID' OrgID
									, t.InvCode
									, '@strNetworkID' NetworkID
									, t.InvCodeParent
									, t.InvBUCode
									, t.InvBUPattern
									, t.InvLevel
									, t.InvLevelType
									, t.InvType
									, t.InvName
									, t.InvAddress
									, t.InvContactName
									, t.InvContactPhone
									, t.InvContactEmail
									, t.FlagIn_Out
									, t.FlagActive
									, t.Remark
									, '2000-01-01 00:00:00' LogLUDTimeUTC
									, 'SYS' LogLUBy
								from Mst_Inventory t --//[mylock]
								where(1=1)
									and t.OrgID = '0'
								;

                                ---- Mst_Area:
                                insert into Mst_Area
                                (
                                    OrgID
                                    , AreaCode
                                    , NetworkID
                                    , AreaCodeParent
                                    , AreaBUCode
                                    , AreaBUPattern
                                    , AreaLevel
                                    , AreaName
                                    , AreaDesc
                                    , FlagActive
                                    , LogLUDTimeUTC
                                    , LogLUBy
                                )
                                select
                                    '@strOrgID' OrgID
                                    , t.AreaCode
                                    , '@strNetworkID' NetworkID
                                    , t.AreaCodeParent
                                    , t.AreaBUCode
                                    , t.AreaBUPattern
                                    , t.AreaLevel
                                    , t.AreaName
                                    , t.AreaDesc
                                    , t.FlagActive
                                    , t.LogLUDTimeUTC
                                    , t.LogLUBy
                                from Mst_Area t --//[mylock]
                                where (1 = 1)
                                    and t.OrgID = '0'
                                ;

                                insert into Mst_Brand
                                (
                                    OrgID
                                    , BrandCode
                                    , NetworkID
                                    , BrandName
                                    , NetworkBrandCode
                                    , Remark
                                    , FlagActive
                                    , LogLUDTimeUTC
                                    , LogLUBy
                                )
                                select
                                    '@strOrgID' OrgID
                                    , t.BrandCode
                                    , '@strNetworkID' NetworkID
                                    , t.BrandName
                                    , t.NetworkBrandCode
                                    , t.Remark
                                    , t.FlagActive
                                    , t.LogLUDTimeUTC
                                    , t.LogLUBy
                                from Mst_Brand t --//[mylock]
                                where (1 = 1)
	                                and t.OrgID = '0'
									--and not exists (	select
									--						mb.OrgID
									--						, mb.BrandCode
									--					from Mst_Brand mb --//[mylock]
									--					where(1=1)
									--						and mb.OrgID = '@strOrgID'
									--						and mb.BrandCode = 'SYSBRAND'
									--				)
                                ;

                                insert into Mst_ProductGroup
                                (
                                    OrgID
                                    , ProductGrpCode
                                    , NetworkID
                                    , ProductGrpCodeParent
                                    , ProductGrpBUCode
                                    , ProductGrpBUPattern
                                    , ProductGrpLevel
                                    , ProductGrpName
                                    , FlagActive
                                    , LogLUDTimeUTC
                                    , LogLUBy
                                    , BrandCode
                                )
                                select
                                    '@strOrgID' OrgID
                                    , t.ProductGrpCode
                                    , '@strNetworkID' NetworkID
                                    , t.ProductGrpCodeParent
                                    , t.ProductGrpBUCode
                                    , t.ProductGrpBUPattern
                                    , t.ProductGrpLevel
                                    , t.ProductGrpName
                                    , t.FlagActive
                                    , t.LogLUDTimeUTC
                                    , t.LogLUBy
                                    , t.BrandCode
                                from Mst_ProductGroup t --//[mylock]
                                where (1 = 1)
                                      and t.OrgID = '0'
									  --and not exists (	select
											--				mpg.OrgID
											--				, mpg.ProductGrpCode
											--			from Mst_ProductGroup mpg --//[mylock]
											--			where(1=1)
											--				and mpg.OrgID = '@strOrgID'
											--				and mpg.ProductGrpCode = 'ALL'
											--		)
                                ;

                                ---- Prd_DynamicField:
                                insert into Prd_DynamicField
                                (
                                    OrgID
                                    , NetworkID
                                    , Detail
                                    , FlagActive
                                    , LogLUDTimeUTC
                                    , LogLUBy
                                )
                                select
                                    '@strOrgID' OrgID
                                    , '@strNetworkID' NetworkID
                                    , t.Detail
                                    , t.FlagActive
                                    , t.LogLUDTimeUTC
                                    , t.LogLUBy
                                from Prd_DynamicField t --//[mylock]
                                where (1 = 1)
                                      and t.OrgID = '0'
									  --and not exists (
											--			select	
											--				pdf.*
											--			from Prd_DynamicField pdf --//[mylock]
											--			where(1=1)
											--				and pdf.OrgID = '@strOrgID'
									  --)
                                ;

                                ---- Mst_InvInType: -- 20200908
                                insert into Mst_InvInType
                                (
                                    OrgID
                                    , InvInType
                                    , NetworkID
                                    , InvInTypeName
									, FlagActive
									, FlagStatistic
                                    , LogLUDTimeUTC
                                    , LogLUBy
                                )
                                select
                                    '@strOrgID' OrgID
									, t.InvInType
                                    , '@strNetworkID' NetworkID
                                    , t.InvInTypeName
                                    , t.FlagActive
									, t.FlagStatistic
                                    , t.LogLUDTimeUTC
                                    , t.LogLUBy
                                from Mst_InvInType t --//[mylock]
                                where (1 = 1)
                                      and t.OrgID = '0'
                                ;

                                ---- Mst_InvOutType: -- 20200908
                                insert into Mst_InvOutType
                                (
                                    OrgID
                                    , InvOutType
                                    , NetworkID
                                    , InvOutTypeName
									, FlagActive
									, FlagStatistic
                                    , LogLUDTimeUTC
                                    , LogLUBy
                                )
                                select
                                    '@strOrgID' OrgID
									, t.InvOutType
                                    , '@strNetworkID' NetworkID
                                    , t.InvOutTypeName
                                    , t.FlagActive
									, t.FlagStatistic
                                    , t.LogLUDTimeUTC
                                    , t.LogLUBy
                                from Mst_InvOutType t --//[mylock]
                                where (1 = 1)
                                      and t.OrgID = '0'
                                ;
                            "
                        , "@strOrgID", objOrgID
						, "@strNetworkID", strNetworkID
						);

						_cf.db.ExecQuery(str_InitValuesDefault);
					}
					#endregion
				}


				#region // Call MstSv:
				{
					OS_MstSv_OrgInNetwork_Create_MstSvX(
						strTid // strTid
						, strGwUserCode // strGwUserCode
						, strGwPassword // strGwPassword
						, strWAUserCode // strWAUserCode
						, strWAUserPassword // strWAUserPassword
						, strNetworkID
						, ref alParamsCoupleError
						, objOrgID
						, objMST
						, strOrgIDSln
						);
				}

				#region // Call RptSv:
				{
					OS_RptSv_Mst_NNT_CreateX(
						strTid
						, strGwUserCode
						, strGwPassword
						, strWAUserCode
						, strWAUserPassword
						, ref alParamsCoupleError
						, objMST
						, objOrgID
						, objNNTFullName
						, objMSTParent
						, objProvinceCode
						, objDistrictCode
						, objDLCode
						, objNNTAddress
						, objNNTMobile
						, objNTTPhone
						, objNNTFax
						, objPresentBy
						, objBusinessRegNo
						, objNNTPosition
						, objPresentIDNo
						, objPresentIDType
						, objGovTaxID
						, objContactName
						, objContactPhone
						, objContactEmail
						, objWebsite
						, objCANumber
						, objCAOrg
						, objCAEffDTimeUTCStart
						, objCAEffDTimeUTCEnd
						, objPackageCode
						, objCreatedDate
						, objAccNo
						, objAccHolder
						, objBankName
						, objBizType
						, objBizFieldCode
						, objBizSizeCode
						, objDealerType
						//, objAreaCode
						, strOrgIDSln
						);
				}
				#endregion
				#endregion
				////
				//CmUtils.DataUtils.MoveDataTable(ref mdsFinal, ref dsGetData);
				#endregion

				// Return Good:
				TDALUtils.DBUtils.CommitSafety(_cf.db);
				mdsFinal.AcceptChanges();
				return mdsFinal;
			}
			catch (Exception exc)
			{
				#region // Catch of try:
				// Rollback:
				TDALUtils.DBUtils.RollbackSafety(_cf.db);

				// Return Bad:
				return TUtils.CProcessExc.Process(
					ref mdsFinal
					, exc
					, strErrorCodeDefault
					, alParamsCoupleError.ToArray()
					);
				#endregion
			}
			finally
			{
				#region // Finally of try:
				// Rollback and Release resources:
				TDALUtils.DBUtils.RollbackSafety(_cf.db);
				TDALUtils.DBUtils.ReleaseAllSemaphore(_cf.db_Sys, true);

				// Write ReturnLog:
				_cf.ProcessBizReturn_OutSide(
					ref mdsFinal // mdsFinal
					, strTid // strTid
					, strGwUserCode // strGwUserCode
					, strGwPassword // strGwPassword
					, strWAUserCode // objUserCode
					, strFunctionName // strFunctionName
					);
				#endregion
			}
		}

		public void OS_RptSv_Mst_NNT_CreateX(
			string strTid
			, string strGwUserCode
			, string strGwPassword
			, string strWAUserCode
			, string strWAUserPassword
			, ref ArrayList alParamsCoupleError
			////
			, object objMST
			, object objOrgID
			, object objNNTFullName
			, object objMSTParent
			, object objProvinceCode
			, object objDistrictCode
			//, object objNNTType
			, object objDLCode
			, object objNNTAddress
			, object objNNTMobile
			, object objNTTPhone
			, object objNNTFax
			, object objPresentBy
			, object objBusinessRegNo
			, object objNNTPosition
			, object objPresentIDNo
			, object objPresentIDType
			, object objGovTaxID
			, object objContactName
			, object objContactPhone
			, object objContactEmail
			, object objWebsite
			, object objCANumber
			, object objCAOrg
			, object objCAEffDTimeUTCStart
			, object objCAEffDTimeUTCEnd
			, object objPackageCode
			, object objCreatedDate
			, object objAccNo
			, object objAccHolder
			, object objBankName
			, object objBizType // objBizType
			, object objBizFieldCode // objBizFieldCode
			, object objBizSizeCode // objBizSizeCode
			, object objDealerType // objDealerType
			//, object objAreaCode
			//
			, object objOrgIDSln // strOrgIDSln
			)
		{
			#region // Temp:
			DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
			//int nTidSeq = 0;
			DateTime dtimeSys = DateTime.UtcNow;
			string strFunctionName = "OS_RptSv_Mst_NNT_Create";
			string strErrorCodeDefault = TError.ErridnInventory.OS_RptSv_Mst_NNT_Create;
			alParamsCoupleError.AddRange(new object[]{
				"strFunctionName", strFunctionName
				, "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				//// Filter
                //, "objNetworkID", objNetworkID
                //, "objOrgParent", objOrgParent
                , "objMST", objMST
				, "objOrgID", objOrgID
				, "objNNTFullName", objNNTFullName
				, "objMSTParent", objMSTParent
				, "objProvinceCode", objProvinceCode
				, "objDistrictCode", objDistrictCode
				, "objDLCode", objDLCode
				, "objNNTAddress", objNNTAddress
				, "objNNTMobile", objNNTMobile
				, "objNTTPhone", objNTTPhone
				, "objNNTFax", objNNTFax
				, "objPresentBy", objPresentBy
				, "objBusinessRegNo", objBusinessRegNo
				, "objNNTPosition", objNNTPosition
				, "objPresentIDNo", objPresentIDNo
				, "objPresentIDType", objPresentIDType
				, "objGovTaxID", objGovTaxID
				, "objContactName", objContactName
				, "objContactPhone", objContactPhone
				, "objContactEmail", objContactEmail
				, "objWebsite", objWebsite
				, "objCANumber", objCANumber
				, "objCAOrg", objCAOrg
				, "objCAEffDTimeUTCStart", objCAEffDTimeUTCStart
				, "objCAEffDTimeUTCEnd", objCAEffDTimeUTCEnd
				, "objPackageCode", objPackageCode
				, "objCreatedDate", objCreatedDate
				, "objAccNo", objAccNo
				, "objAccHolder", objAccHolder
				, "objBankName", objBankName
				, "objBizType", objBizType // objBizType
                , "objBizFieldCode", objBizFieldCode // objBizFieldCode
                , "objBizSizeCode", objBizSizeCode // objBizSizeCode
				, "objDealerType", objDealerType
				});
			#endregion

			#region // Refine and Check Input:
			// drAbilityOfUser:
			string strMST = TUtils.CUtils.StdParam(objMST);
			string strOrgID = TUtils.CUtils.StdParam(objOrgID);
			string strNNTFullName = string.Format("{0}", objNNTFullName).Trim();
			string strMSTParent = TUtils.CUtils.StdParam(objMSTParent);
			string strProvinceCode = TUtils.CUtils.StdParam(objProvinceCode);
			string strDistrictCode = TUtils.CUtils.StdParam(objDistrictCode);
			//string strNNTType = TUtils.CUtils.StdParam(objNNTType);
			string strDLCode = TUtils.CUtils.StdParam(objDLCode);
			string strNNTAddress = string.Format("{0}", objNNTAddress).Trim();
			string strNNTMobile = string.Format("{0}", objNNTMobile).Trim();
			string strNNTPhone = string.Format("{0}", objNTTPhone).Trim();
			string strNNTFax = string.Format("{0}", objNNTFax).Trim();
			string strPresentBy = string.Format("{0}", objPresentBy).Trim();
			string strBusinessRegNo = string.Format("{0}", objBusinessRegNo).Trim();
			string strNNTPosition = string.Format("{0}", objNNTPosition).Trim();
			string strPresentIDNo = string.Format("{0}", objPresentIDNo).Trim();
			string strPresentIDType = string.Format("{0}", objPresentIDType).Trim();
			string strGovTaxID = TUtils.CUtils.StdParam(objGovTaxID);
			string strContactName = string.Format("{0}", objContactName).Trim();
			string strContactPhone = string.Format("{0}", objContactPhone).Trim();
			string strContactEmail = string.Format("{0}", objContactEmail).Trim();
			string strWebsite = string.Format("{0}", objWebsite).Trim();
			string strCANumber = string.Format("{0}", objCANumber).Trim();
			string strCAOrg = string.Format("{0}", objCAOrg).Trim();
			string strCAEffDTimeUTCStart = TUtils.CUtils.StdDTime(objCAEffDTimeUTCStart);
			string strCAEffDTimeUTCEnd = TUtils.CUtils.StdDTime(objCAEffDTimeUTCEnd);
			string strPackageCode = string.Format("{0}", objPackageCode).Trim();
			string strCreatedDate = TUtils.CUtils.StdDate(objCreatedDate);
			string strAccNo = string.Format("{0}", objAccNo).Trim();
			string strAccHolder = string.Format("{0}", objAccHolder).Trim();
			string strBankName = string.Format("{0}", objBankName).Trim();
			string strBizType = TUtils.CUtils.StdParam(objBizType);
			string strBizFieldCode = TUtils.CUtils.StdParam(objBizFieldCode);
			string strBizSizeCode = TUtils.CUtils.StdParam(objBizSizeCode);
			string strDealerType = TUtils.CUtils.StdParam(objDealerType);
			string strOrgIDSln = TUtils.CUtils.StdParam(objOrgIDSln);
			////
			DataTable dtDB_Mst_Param_CheckDB = null;

			Mst_Param_CheckDB(
				ref alParamsCoupleError // alParamsCoupleError
				, TConst.Mst_Param.INVENTORY_RPTSV_URL //INVENTORY_RPTSV_URL
				, TConst.Flag.Yes // strFlagExistToCheck
				, out dtDB_Mst_Param_CheckDB // dtDB_Mst_Param_CheckDB
				);

			string strUrl = dtDB_Mst_Param_CheckDB.Rows[0]["ParamValue"].ToString();
			////
			Mst_Param_CheckDB(
				ref alParamsCoupleError // alParamsCoupleError
				, TConst.Mst_Param.PARAM_OS_REPORTSERVER_BG_WAUSERCODE // PARAM_OS_REPORTSERVER_BG_WAUSERCODE
				, TConst.Flag.Yes // strFlagExistToCheck
				, out dtDB_Mst_Param_CheckDB // dtDB_Mst_Param_CheckDB
				);

			string strRptSvUserCode = dtDB_Mst_Param_CheckDB.Rows[0]["ParamValue"].ToString();
			////
			Mst_Param_CheckDB(
				ref alParamsCoupleError // alParamsCoupleError
				, TConst.Mst_Param.PARAM_OS_REPORTSERVER_BG_WAUSERPASSWORD // PARAM_OS_REPORTSERVER_BG_WAUSERPASSWORD
				, TConst.Flag.Yes // strFlagExistToCheck
				, out dtDB_Mst_Param_CheckDB // dtDB_Mst_Param_CheckDB
				);

			string strRptSvUserPasswork = dtDB_Mst_Param_CheckDB.Rows[0]["ParamValue"].ToString();
			////
			#endregion

			#region // Call Func:
			RT_Mst_NNT objRT_Mst_NNT = null;
			{
				#region // Init:
				Mst_NNT objMst_NNT = new Mst_NNT();
				objMst_NNT.MST = strMST;
				objMst_NNT.OrgID = strOrgID;
				objMst_NNT.NNTFullName = strNNTFullName;
				objMst_NNT.MSTParent = strMSTParent;
				objMst_NNT.ProvinceCode = strProvinceCode;
				objMst_NNT.DistrictCode = strDistrictCode;
				//objMst_NNT.NNTType = strNNTType;
				objMst_NNT.DLCode = strDLCode;
				objMst_NNT.NNTAddress = strNNTAddress;
				objMst_NNT.NNTMobile = strNNTMobile;
				objMst_NNT.NNTPhone = strNNTPhone;
				objMst_NNT.NNTFax = strNNTFax;
				objMst_NNT.PresentBy = strPresentBy;
				objMst_NNT.BusinessRegNo = strBusinessRegNo;
				objMst_NNT.NNTPosition = strNNTPosition;
				objMst_NNT.PresentIDNo = strPresentIDNo;
				objMst_NNT.PresentIDType = strPresentIDType;
				objMst_NNT.GovTaxID = strGovTaxID;
				objMst_NNT.ContactName = strContactName;
				objMst_NNT.ContactPhone = strContactPhone;
				objMst_NNT.ContactEmail = strContactEmail;
				objMst_NNT.Website = strWebsite;
				objMst_NNT.CANumber = strCANumber;
				objMst_NNT.CAOrg = strCAOrg;
				objMst_NNT.CAEffDTimeUTCStart = strCAEffDTimeUTCStart;
				objMst_NNT.CAEffDTimeUTCEnd = strCAEffDTimeUTCEnd;
				objMst_NNT.PackageCode = strPackageCode;
				objMst_NNT.CreatedDate = strCreatedDate;
				objMst_NNT.AccNo = strAccNo;
				objMst_NNT.AccHolder = strAccHolder;
				objMst_NNT.BankName = strBankName;
				objMst_NNT.BizType = strBizType;
				objMst_NNT.BizFieldCode = strBizFieldCode;
				objMst_NNT.BizSizeCode = strBizSizeCode;
				objMst_NNT.DealerType = strDealerType;
				objMst_NNT.OrgIDSln = strOrgIDSln;
				/////
				RQ_Mst_NNT objRQ_Mst_NNT = new RQ_Mst_NNT()
				{
					Tid = strTid,
					TokenID = strOS_MasterServer_Solution_API_Url,
					NetworkID = nNetworkID.ToString(),
					GwUserCode = strOS_MasterServer_Solution_GwUserCode,
					GwPassword = strOS_MasterServer_Solution_GwPassword,
					WAUserCode = strRptSvUserCode,
					WAUserPassword = strRptSvUserPasswork,
					Mst_NNT = objMst_NNT,
				};
				////
				try
				{

					objRT_Mst_NNT = OS_RptSvInventory_Mst_NNTService.Instance.WA_OS_RptSv_Mst_NNT_Create(strUrl, objRQ_Mst_NNT);
					////
				}
				catch (Exception cex)
				{
					string strErrorCodeOS = null;

					TUtils.CProcessExc.BizShowException(
						ref alParamsCoupleError // alParamsCoupleError
						, cex // cex
						, out strErrorCodeOS
						);

					throw CmUtils.CMyException.Raise(
						TError.ErridnInventory.CmSys_InvalidOutSite + "." + "INVENTORY" + "." + strErrorCodeOS
                        , null
						, alParamsCoupleError.ToArray()
						);
				}
				////
				#endregion
			}
			#endregion
		}

		#endregion

		#region // Mst_Department:
		private void Mst_Department_CheckDB(
            ref ArrayList alParamsCoupleError
            , object objDepartmentCode
            , string strFlagExistToCheck
            , string strFlagActiveListToCheck
            , out DataTable dtDB_Mst_Department
            )
        {
            // GetInfo:
            string strSqlExec = CmUtils.StringUtils.Replace(@"
					select top 1
						t.*
					from Mst_Department t --//[mylock]
					where (1=1)
						and t.DepartmentCode = @objDepartmentCode
					;
				");
            dtDB_Mst_Department = _cf.db.ExecQuery(
                strSqlExec
                , "@objDepartmentCode", objDepartmentCode
                ).Tables[0];
            dtDB_Mst_Department.TableName = "Mst_Department";

            // strFlagExistToCheck:
            if (strFlagExistToCheck.Length > 0)
            {
                if (CmUtils.StringUtils.StringEqual(strFlagExistToCheck, TConst.Flag.Active) && dtDB_Mst_Department.Rows.Count < 1)
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.DepartmentCode", objDepartmentCode
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Mst_Department_CheckDB_DepartmentNotFound
                        , null
                        , alParamsCoupleError.ToArray()
                        );
                }
                if (CmUtils.StringUtils.StringEqual(strFlagExistToCheck, TConst.Flag.Inactive) && dtDB_Mst_Department.Rows.Count > 0)
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.DepartmentCode", objDepartmentCode
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Mst_Department_CheckDB_DepartmentExist
                        , null
                        , alParamsCoupleError.ToArray()
                        );
                }
            }

            // strFlagActiveListToCheck:
            if (strFlagActiveListToCheck.Length > 0 && !strFlagActiveListToCheck.Contains(Convert.ToString(dtDB_Mst_Department.Rows[0]["FlagActive"])))
            {
                alParamsCoupleError.AddRange(new object[]{
                    "Check.DepartmentCode", objDepartmentCode
                    , "Check.strFlagActiveListToCheck", strFlagActiveListToCheck
                    , "DB.FlagActive", dtDB_Mst_Department.Rows[0]["FlagActive"]
                    });
                throw CmUtils.CMyException.Raise(
                    TError.ErridnInventory.Mst_Department_CheckDB_FlagActiveNotMatched
                    , null
                    , alParamsCoupleError.ToArray()
                    );
            }
        }

        private void Mst_Department_UpdBU()
        {
            string sqlPostSave = CmUtils.StringUtils.Replace(@"
                        declare @strDepartmentCode_Root nvarchar(100); select @strDepartmentCode_Root = 'HO';

                        update t
                        set
                         t.DepartmentBUCode = @strDepartmentCode_Root
                         , t.DepartmentBUPattern = @strDepartmentCode_Root + '%'
                         , t.DepartmentLevel = 1
                        from Mst_Department t --//[mylock]
                         left join Mst_Department t_Parent
                          on t.DepartmentCodeParent = t_Parent.DepartmentCode
                        where (1=1)
                         and t.DepartmentCode in (@strDepartmentCode_Root)
                        ;

                        declare @nDeepDealer int; select @nDeepDealer = 0;
                        while (@nDeepDealer <= 6)
                        begin
                         select @nDeepDealer = @nDeepDealer + 1;

                         update t
                         set
                          t.DepartmentBUCode = IsNull(t_Parent.DepartmentBUCode + '.', '') + t.DepartmentCode
                          , t.DepartmentBUPattern = IsNull(t_Parent.DepartmentBUCode + '.', '') + t.DepartmentCode + '%'
                          , t.DepartmentLevel = IsNull(t_Parent.DepartmentLevel, 0) + 1
                         from Mst_Department t --//[mylock]
                          left join Mst_Department t_Parent --//[mylock]
                           on t.DepartmentCodeParent = t_Parent.DepartmentCode
                         where (1=1)
                          and t.DepartmentCode not in (@strDepartmentCode_Root)
                         ;
                        end;
                    ");
            DataSet dsPostSave = _cf.db.ExecQuery(sqlPostSave);
        }
        public DataSet WAS_Mst_Department_Get(
            ref ArrayList alParamsCoupleError
            , RQ_Mst_Department objRQ_Mst_Department
            ////
            , out RT_Mst_Department objRT_Mst_Department
            )
        {
            #region // Temp:
            string strTid = objRQ_Mst_Department.Tid;
            objRT_Mst_Department = new RT_Mst_Department();
            DataSet mdsResult = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            DateTime dtimeSys = DateTime.UtcNow;
            //DataSet mdsExec = null;
            //DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(objRQ_Mst_Department.Tid);
            //int nTidSeq = 0;
            //bool bNeedTransaction = true;
            string strFunctionName = "WAS_Mst_Department_Get";
            string strErrorCodeDefault = TError.ErridnInventory.WAS_Mst_Department_Get;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
        });
            #endregion

            try
            {
                #region // Init:
                #endregion

                #region // Refine and Check Input:
                List<MySummaryTable> lst_MySummaryTable = new List<MySummaryTable>();

                List<Mst_Department> lst_Mst_Department = new List<Mst_Department>();
                #endregion

                #region // WS_Mst_Department_Get:
                mdsResult = Mst_Department_Get(
                    objRQ_Mst_Department.Tid // strTid
                    , objRQ_Mst_Department.GwUserCode // strGwUserCode
                    , objRQ_Mst_Department.GwPassword // strGwPassword
                    , objRQ_Mst_Department.WAUserCode // strUserCode
                    , objRQ_Mst_Department.WAUserPassword // strUserPassword
                    , ref alParamsCoupleError // alParamsCoupleError
                                              //// Filter:
                    , objRQ_Mst_Department.Ft_RecordStart // strFt_RecordStart
                    , objRQ_Mst_Department.Ft_RecordCount // strFt_RecordCount
                    , objRQ_Mst_Department.Ft_WhereClause // strFt_WhereClause
                                                          //// Return:
                    , objRQ_Mst_Department.Rt_Cols_Mst_Department // strRt_Cols_Mst_Department
                    );
                #endregion

                #region // GetData:
                if (!CmUtils.CMyDataSet.HasError(mdsResult))
                {
                    ////
                    DataTable dt_MySummaryTable = mdsResult.Tables["MySummaryTable"].Copy();
                    lst_MySummaryTable = TUtils.DataTableCmUtils.ToListof<MySummaryTable>(dt_MySummaryTable);
                    objRT_Mst_Department.MySummaryTable = lst_MySummaryTable[0];

                    ////
                    DataTable dt_Mst_Department = mdsResult.Tables["Mst_Department"].Copy();
                    lst_Mst_Department = TUtils.DataTableCmUtils.ToListof<Mst_Department>(dt_Mst_Department);
                    objRT_Mst_Department.Lst_Mst_Department = lst_Mst_Department;
                    /////
                }
                #endregion

                // Return Good:
                return mdsResult;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsResult
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Write ReturnLog:
                //_cf.ProcessBizReturn(
                //	ref mdsResult // mdsFinal
                //	, strTid // strTid
                //	, strFunctionName // strFunctionName
                //	);
                #endregion
            }
        }
        public DataSet Mst_Department_Get(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            //// Filter:
            , string strFt_RecordStart
            , string strFt_RecordCount
            , string strFt_WhereClause
            //// Return:
            , string strRt_Cols_Mst_Department
            )
        {
            #region // Temp:
            DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            //int nTidSeq = 0;
            DateTime dtimeSys = DateTime.UtcNow;
            string strFunctionName = "Mst_Department_Get";
            string strErrorCodeDefault = TError.ErridnInventory.Mst_Department_Get;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
               //// Filter
        	    , "strFt_RecordStart", strFt_RecordStart
                , "strFt_RecordCount", strFt_RecordCount
                , "strFt_WhereClause", strFt_WhereClause
               //// Return
        	    , "strRt_Cols_Mst_Department", strRt_Cols_Mst_Department
                        });
            #endregion

            try
            {
                #region // Init:
                //_cf.db.LogUserId = _cf.sinf.strUserCode;
                _cf.db.BeginTransaction();

                // Write RequestLog:
                _cf.ProcessBizReq_OutSide(
                    strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    , alParamsCoupleError // alParamsCoupleError
                    );

                // Sys_User_CheckAuthentication:
                //Sys_User_CheckAuthentication(
                //    ref alParamsCoupleError
                //    , strWAUserCode
                //    , strWAUserPassword
                //    );

                // Check Access/Deny:
                Sys_Access_CheckDenyV30(
                    ref alParamsCoupleError
                    , strWAUserCode
                    , strFunctionName
                    );
                #endregion

                #region // Mst_Department_GetX:
                DataSet dsGetData = null;
                {
                    ////
                    Mst_Department_GetX(
                        strTid // strTid
                        , strGwUserCode // strGwUserCode
                        , strGwPassword // strGwPassword
                        , strWAUserCode // strWAUserCode
                        , strWAUserPassword // strWAUserPassword
                        , ref alParamsCoupleError // alParamsCoupleError
                        , dtimeSys // dtimeSys
                                   ////
                        , strFt_RecordStart // strFt_RecordStart
                        , strFt_RecordCount // strFt_RecordCount
                        , strFt_WhereClause // strFt_WhereClause
                                            ////
                        , strRt_Cols_Mst_Department // strRt_Cols_Mst_Department
                                                    ////
                        , out dsGetData // dsGetData
                        );
                    ////
                    CmUtils.DataUtils.MoveDataTable(ref mdsFinal, ref dsGetData);
                }
                #endregion

                // Return Good:
                TDALUtils.DBUtils.RollbackSafety(_cf.db); // Always Rollback.
                mdsFinal.AcceptChanges();
                return mdsFinal;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Rollback:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);

                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsFinal
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Rollback and Release resources:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);
                TDALUtils.DBUtils.ReleaseAllSemaphore(_cf.db_Sys, true);

                // Write ReturnLog:
                _cf.ProcessBizReturn_OutSide(
                    ref mdsFinal // mdsFinal
                    , strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    );
                #endregion
            }
        }
        public DataSet WAS_Mst_Department_Create(
            ref ArrayList alParamsCoupleError
            , RQ_Mst_Department objRQ_Mst_Department
            ////
            , out RT_Mst_Department objRT_Mst_Department
            )
        {
            #region // Temp:
            string strTid = objRQ_Mst_Department.Tid;
            objRT_Mst_Department = new RT_Mst_Department();
            DataSet mdsResult = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            DateTime dtimeSys = DateTime.UtcNow;
            //DataSet mdsExec = null;
            //DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(objRQ_Mst_Department.Tid);
            //int nTidSeq = 0;
            //bool bNeedTransaction = true;
            string strFunctionName = "WAS_Mst_Department_Create";
            string strErrorCodeDefault = TError.ErridnInventory.WAS_Mst_Department_Create;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
        ////
        });
            #endregion

            try
            {
                #region // Init:
                #endregion

                #region // Refine and Check Input:
                List<Mst_Department> lst_Mst_Department = new List<Mst_Department>();
                #endregion

                #region // WS_Mst_Department_Create:
                mdsResult = Mst_Department_Create(
                    objRQ_Mst_Department.Tid // strTid
                    , objRQ_Mst_Department.GwUserCode // strGwUserCode
                    , objRQ_Mst_Department.GwPassword // strGwPassword
                    , objRQ_Mst_Department.WAUserCode // strUserCode
                    , objRQ_Mst_Department.WAUserPassword // strUserPassword
                    , ref alParamsCoupleError // alParamsCoupleError
                                              ////
                    , objRQ_Mst_Department.Mst_Department.DepartmentCode // objDepartmentCode
                    , objRQ_Mst_Department.Mst_Department.DepartmentCodeParent // objDepartmentCodeParent
                    , objRQ_Mst_Department.Mst_Department.MST // objMST
                    , objRQ_Mst_Department.Mst_Department.DepartmentName // objDepartmentName
                    );
                #endregion

                // Return Good:
                return mdsResult;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsResult
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Write ReturnLog:
                //_cf.ProcessBizReturn(
                //	ref mdsResult // mdsFinal
                //	, strTid // strTid
                //	, strFunctionName // strFunctionName
                //	);
                #endregion
            }
        }
        public DataSet Mst_Department_Create(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            ////
            , object objDepartmentCode
            , object objDepartmentCodeParent
            , object objMST
            , object objDepartmentName
            )
        {
            #region // Temp:
            DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            //int nTidSeq = 0;
            DateTime dtimeSys = DateTime.UtcNow;
            string strFunctionName = "Mst_Department_Create";
            string strErrorCodeDefault = TError.ErridnInventory.Mst_Department_Create;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
                    ////
        	    , "objDepartmentCode", objDepartmentCode
                , "objDepartmentCodeParent", objDepartmentCodeParent
                , "objMST", objMST
                , "objDepartmentName", objDepartmentName
                        });
            #endregion

            try
            {
                #region // Init:
                //_cf.db.LogUserId = _cf.sinf.strUserCode;
                _cf.db.BeginTransaction();

                // Write RequestLog:
                _cf.ProcessBizReq_OutSide(
                    strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    , alParamsCoupleError // alParamsCoupleError
                    );

                // Sys_User_CheckAuthentication:
                //Sys_User_CheckAuthentication(
                //    ref alParamsCoupleError
                //    , strWAUserCode
                //    , strWAUserPassword
                //    );

                // Check Access/Deny:
                Sys_Access_CheckDenyV30(
                    ref alParamsCoupleError
                    , strWAUserCode
                    , strFunctionName
                    );
                #endregion

                #region // Mst_Department_CreateX:
                //DataSet dsGetData = null;
                {
                    Mst_Department_CreateX(
                        strTid // strTid
                        , strGwUserCode // strGwUserCode
                        , strGwPassword // strGwPassword
                        , strWAUserCode // strWAUserCode
                        , strWAUserPassword // strWAUserPassword
                        , ref alParamsCoupleError // alParamsCoupleError
                        , dtimeSys // dtimeSys
                                   ////
                        , objDepartmentCode // objDepartmentCode
                        , objDepartmentCodeParent // objDepartmentCodeParent
                        , objMST // objMST
                        , objDepartmentName // objDepartmentName                   
                        );
                }
                ////
                //CmUtils.DataUtils.MoveDataTable(ref mdsFinal, ref dsGetData);
                #endregion

                // Return Good:
                TDALUtils.DBUtils.CommitSafety(_cf.db);
                mdsFinal.AcceptChanges();
                return mdsFinal;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Rollback:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);

                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsFinal
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Rollback and Release resources:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);
                TDALUtils.DBUtils.ReleaseAllSemaphore(_cf.db_Sys, true);

                // Write ReturnLog:
                _cf.ProcessBizReturn_OutSide(
                    ref mdsFinal // mdsFinal
                    , strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    );
                #endregion
            }
        }
        public DataSet WAS_Mst_Department_Update(
            ref ArrayList alParamsCoupleError
            , RQ_Mst_Department objRQ_Mst_Department
            ////
            , out RT_Mst_Department objRT_Mst_Department
            )
        {
            #region // Temp:
            string strTid = objRQ_Mst_Department.Tid;
            objRT_Mst_Department = new RT_Mst_Department();
            DataSet mdsResult = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            DateTime dtimeSys = DateTime.UtcNow;
            //DataSet mdsExec = null;
            //DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(objRQ_Mst_Department.Tid);
            //int nTidSeq = 0;
            //bool bNeedTransaction = true;
            string strFunctionName = "WAS_Mst_Department_Update";
            string strErrorCodeDefault = TError.ErridnInventory.WAS_Mst_Department_Update;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
        ////
        });
            #endregion

            try
            {
                #region // Init:
                #endregion

                #region // Refine and Check Input:
                List<Mst_Department> lst_Mst_Department = new List<Mst_Department>();
                #endregion

                #region // Mst_Department_Update:
                mdsResult = Mst_Department_Update(
                    objRQ_Mst_Department.Tid // strTid
                    , objRQ_Mst_Department.GwUserCode // strGwUserCode
                    , objRQ_Mst_Department.GwPassword // strGwPassword
                    , objRQ_Mst_Department.WAUserCode // strUserCode
                    , objRQ_Mst_Department.WAUserPassword // strUserPassword
                    , ref alParamsCoupleError // alParamsCoupleError
                                              ////
                    , objRQ_Mst_Department.Mst_Department.DepartmentCode // objDepartmentCode
                    , objRQ_Mst_Department.Mst_Department.DepartmentCodeParent // objDepartmentCodeParent
                    , objRQ_Mst_Department.Mst_Department.MST // objMST
                    , objRQ_Mst_Department.Mst_Department.DepartmentName // objDepartmentName
                    , objRQ_Mst_Department.Mst_Department.FlagActive // objFlagActive
                                                                     ////
                    , objRQ_Mst_Department.Ft_Cols_Upd // Ft_Cols_Upd
                    );
                #endregion

                // Return Good:
                return mdsResult;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsResult
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Write ReturnLog:
                //_cf.ProcessBizReturn(
                //	ref mdsResult // mdsFinal
                //	, strTid // strTid
                //	, strFunctionName // strFunctionName
                //	);
                #endregion
            }
        }
        public DataSet Mst_Department_Update(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            ////
            , object objDepartmentCode
            , object objDepartmentCodeParent
            , object objMST
            , object objDepartmentName
            , object objFlagActive
            ////
            , object objFt_Cols_Upd
            )
        {
            #region // Temp:
            DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            //int nTidSeq = 0;
            DateTime dtimeSys = DateTime.UtcNow;
            string strFunctionName = "Mst_Department_Update";
            string strErrorCodeDefault = TError.ErridnInventory.Mst_Department_Update;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
                    ////
        	    , "objDepartmentCode", objDepartmentCode
                , "objDepartmentCodeParent", objDepartmentCodeParent
                , "objMST", objMST
                , "objDepartmentName", objDepartmentName
                , "objFlagActive", objFlagActive
                ////
                , "objFt_Cols_Upd", objFt_Cols_Upd
                });
            #endregion

            try
            {
                #region // Init:
                //_cf.db.LogUserId = _cf.sinf.strUserCode;
                _cf.db.BeginTransaction();

                // Write RequestLog:
                _cf.ProcessBizReq_OutSide(
                    strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    , alParamsCoupleError // alParamsCoupleError
                    );

                // Sys_User_CheckAuthentication:
                //Sys_User_CheckAuthentication(
                //    ref alParamsCoupleError
                //    , strWAUserCode
                //    , strWAUserPassword
                //    );

                // Check Access/Deny:
                Sys_Access_CheckDenyV30(
                    ref alParamsCoupleError
                    , strWAUserCode
                    , strFunctionName
                    );
                #endregion

                #region // Mst_Department_UpdateX:
                //DataSet dsGetData = null;
                {
                    Mst_Department_UpdateX(
                        strTid // strTid
                        , strGwUserCode // strGwUserCode
                        , strGwPassword // strGwPassword
                        , strWAUserCode // strWAUserCode
                        , strWAUserPassword // strWAUserPassword
                        , ref alParamsCoupleError // alParamsCoupleError
                        , dtimeSys // dtimeSys
                                   ////
                        , objDepartmentCode
                        , objDepartmentCodeParent
                        , objMST
                        , objDepartmentName
                        , objFlagActive
                        /////
                        , objFt_Cols_Upd // objFt_Cols_Upd
                        );
                }
                ////
                //CmUtils.DataUtils.MoveDataTable(ref mdsFinal, ref dsGetData);
                #endregion

                // Return Good:
                TDALUtils.DBUtils.CommitSafety(_cf.db);
                mdsFinal.AcceptChanges();
                return mdsFinal;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Rollback:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);

                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsFinal
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Rollback and Release resources:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);
                TDALUtils.DBUtils.ReleaseAllSemaphore(_cf.db_Sys, true);

                // Write ReturnLog:
                _cf.ProcessBizReturn_OutSide(
                    ref mdsFinal // mdsFinal
                    , strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    );
                #endregion
            }
        }
        public DataSet WAS_Mst_Department_Delete(
            ref ArrayList alParamsCoupleError
            , RQ_Mst_Department objRQ_Mst_Department
            ////
            , out RT_Mst_Department objRT_Mst_Department
            )
        {
            #region // Temp:
            string strTid = objRQ_Mst_Department.Tid;
            objRT_Mst_Department = new RT_Mst_Department();
            DataSet mdsResult = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            DateTime dtimeSys = DateTime.UtcNow;
            //DataSet mdsExec = null;
            //DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(objRQ_Mst_Department.Tid);
            //int nTidSeq = 0;
            //bool bNeedTransaction = true;
            string strFunctionName = "WAS_Mst_Department_Delete";
            string strErrorCodeDefault = TError.ErridnInventory.WAS_Mst_Department_Delete;
            alParamsCoupleError.AddRange(new object[]{
                    "strFunctionName", strFunctionName
                    , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
        ////
        });
            #endregion

            try
            {
                #region // Init:
                #endregion

                #region // Refine and Check Input:
                List<Mst_Department> lst_Mst_Department = new List<Mst_Department>();
                #endregion

                #region // Mst_Department_Delete:
                mdsResult = Mst_Department_Delete(
                    objRQ_Mst_Department.Tid // strTid
                    , objRQ_Mst_Department.GwUserCode // strGwUserCode
                    , objRQ_Mst_Department.GwPassword // strGwPassword
                    , objRQ_Mst_Department.WAUserCode // strUserCode
                    , objRQ_Mst_Department.WAUserPassword // strUserPassword
                    , ref alParamsCoupleError // alParamsCoupleError
                                              ////
                    , objRQ_Mst_Department.Mst_Department.DepartmentCode // objOrganCode
                    );
                #endregion

                // Return Good:
                return mdsResult;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsResult
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Write ReturnLog:
                //_cf.ProcessBizReturn(
                //	ref mdsResult // mdsFinal
                //	, strTid // strTid
                //	, strFunctionName // strFunctionName
                //	);
                #endregion
            }
        }
        public DataSet Mst_Department_Delete(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            ////
            , object objDepartmentCode
            )
        {
            #region // Temp:
            DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            //int nTidSeq = 0;
            DateTime dtimeSys = DateTime.UtcNow;
            string strFunctionName = "Mst_Department_Delete";
            string strErrorCodeDefault = TError.ErridnInventory.Mst_Department_Delete;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
                ////
        	    , "objDepartmentCode", objDepartmentCode
                        });
            #endregion

            try
            {
                #region // Init:
                //_cf.db.LogUserId = _cf.sinf.strUserCode;
                _cf.db.BeginTransaction();

                // Write RequestLog:
                _cf.ProcessBizReq_OutSide(
                    strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    , alParamsCoupleError // alParamsCoupleError
                    );

                // Sys_User_CheckAuthentication:
                //Sys_User_CheckAuthentication(
                //    ref alParamsCoupleError
                //    , strWAUserCode
                //    , strWAUserPassword
                //    );

                // Check Access/Deny:
                Sys_Access_CheckDenyV30(
                    ref alParamsCoupleError
                    , strWAUserCode
                    , strFunctionName
                    );
                #endregion

                #region // Mst_Department_DeleteX:
                //DataSet dsGetData = null;
                {
                    Mst_Department_DeleteX(
                        strTid // strTid
                        , strGwUserCode // strGwUserCode
                        , strGwPassword // strGwPassword
                        , strWAUserCode // strWAUserCode
                        , strWAUserPassword // strWAUserPassword
                        , ref alParamsCoupleError // alParamsCoupleError
                        , dtimeSys // dtimeSys
                                   ////
                        , objDepartmentCode // objDepartmentCode
                        );
                }
                ////
                //CmUtils.DataUtils.MoveDataTable(ref mdsFinal, ref dsGetData);
                #endregion

                // Return Good:
                TDALUtils.DBUtils.CommitSafety(_cf.db); // Always Rollback.
                mdsFinal.AcceptChanges();
                return mdsFinal;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Rollback:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);

                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsFinal
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Rollback and Release resources:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);
                TDALUtils.DBUtils.ReleaseAllSemaphore(_cf.db_Sys, true);

                // Write ReturnLog:
                _cf.ProcessBizReturn_OutSide(
                    ref mdsFinal // mdsFinal
                    , strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    );
                #endregion
            }
        }
        private void Mst_Department_GetX(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            , DateTime dtimeSys
            //// Filter:
            , string strFt_RecordStart
            , string strFt_RecordCount
            , string strFt_WhereClause
            //// Return:
            , string strRt_Cols_Mst_Department
            ////
            , out DataSet dsGetData
            )
        {
            #region // Temp:
            //DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            //DateTime dtimeSys = DateTime.UtcNow;
            //bool bNeedTransaction = true;
            string strFunctionName = "Mst_Department_GetX";
            //string strErrorCodeDefault = TError.ErrHTCNM.Mnf_VIN_Get_QCX;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
                    });
            #endregion

            #region // Check:
            //// Refine:
            long nFilterRecordStart = Convert.ToInt64(strFt_RecordStart);
            long nFilterRecordEnd = nFilterRecordStart + Convert.ToInt64(strFt_RecordCount) - 1;
            bool bGet_Mst_Department = (strRt_Cols_Mst_Department != null && strRt_Cols_Mst_Department.Length > 0);

            //// drAbilityOfUser:
            //DataRow drAbilityOfUser = myCache_ViewAbility_GetUserInfo(_cf.sinf.strUserCode);

            #endregion

            #region // Build Sql:
            ////
            ArrayList alParamsCoupleSql = new ArrayList();
            alParamsCoupleSql.AddRange(new object[] {
                    "@nFilterRecordStart", nFilterRecordStart
                    , "@nFilterRecordEnd", nFilterRecordEnd
                    });
            ////
            //myCache_ViewAbility_GetDealerInfo(drAbilityOfUser);
            ////
            string strSqlGetData = CmUtils.StringUtils.Replace(@"
        	        ---- #tbl_Mst_Department_Filter_Draft:
        	        select distinct
        		        identity(bigint, 0, 1) MyIdxSeq
        		        , mdept.DepartmentCode
        	        into #tbl_Mst_Department_Filter_Draft
        	        from Mst_Department mdept --//[mylock]
        	        where (1=1)
        		        zzB_Where_strFilter_zzE
        	        order by mdept.DepartmentCode asc
        	        ;

        	        ---- Summary:
        	        select Count(0) MyCount from #tbl_Mst_Department_Filter_Draft t --//[mylock]
        	        ;

        	        ---- #tbl_Mst_Department_Filter:
        	        select
        		        t.*
        	        into #tbl_Mst_Department_Filter
        	        from #tbl_Mst_Department_Filter_Draft t --//[mylock]
        	        where (1=1)
        		        and (t.MyIdxSeq >= @nFilterRecordStart)
        		        and (t.MyIdxSeq <= @nFilterRecordEnd)
        	        ;

        	        -------- Mst_Department -----:
        	        zzB_Select_Mst_Department_zzE
        	        ------------------------

        	        ---- Clear for debug:
        	        --drop table #tbl_Mst_Department_Filter_Draft;
        	        --drop table #tbl_Mst_Department_Filter;
                "
                );
            ////
            string zzB_Select_Mst_Department_zzE = "-- Nothing.";
            if (bGet_Mst_Department)
            {
                #region // bGet_Mst_Department:
                zzB_Select_Mst_Department_zzE = CmUtils.StringUtils.Replace(@"
        	            ---- Mst_Department:
        	            select
        		            t.MyIdxSeq
        		            , mdept.*
        	            from #tbl_Mst_Department_Filter t --//[mylock]
        		            inner join Mst_Department mdept --//[mylock]
        			            on t.DepartmentCode = mdept.DepartmentCode
        	            order by t.MyIdxSeq asc
        	            ;
                    "
                    );
                #endregion
            }
            ////
            string zzB_Where_strFilter_zzE = "";
            {
                Hashtable htSpCols = new Hashtable();
                {
                    #region // htSpCols:
                    ////
                    TUtils.CUtils.MyBuildHTSupportedColumns(
                        _cf.db // db
                        , ref htSpCols // htSupportedColumns
                        , "Mst_Department" // strTableNameDB
                        , "Mst_Department." // strPrefixStd
                        , "mdept." // strPrefixAlias
                        );
                    ////
                    #endregion
                }
                zzB_Where_strFilter_zzE = CmUtils.SqlUtils.BuildWhere(
                    htSpCols // htSpCols
                    , strFt_WhereClause // strClause
                    , "@p_" // strParamPrefix
                    , ref alParamsCoupleSql // alParamsCoupleSql
                    );
                zzB_Where_strFilter_zzE = (zzB_Where_strFilter_zzE.Length <= 0 ? "" : string.Format(" and ({0})", zzB_Where_strFilter_zzE));
                alParamsCoupleError.AddRange(new object[]{
                        "zzB_Where_strFilter_zzE", zzB_Where_strFilter_zzE
                        });
            }
            ////
            strSqlGetData = CmUtils.StringUtils.Replace(
                strSqlGetData
                , "zzB_Where_strFilter_zzE", zzB_Where_strFilter_zzE
                , "zzB_Select_Mst_Department_zzE", zzB_Select_Mst_Department_zzE
                );
            #endregion

            #region // Get Data:
            dsGetData = _cf.db.ExecQuery(
                strSqlGetData
                , alParamsCoupleSql.ToArray()
                );
            int nIdxTable = 0;
            dsGetData.Tables[nIdxTable++].TableName = "MySummaryTable";
            if (bGet_Mst_Department)
            {
                dsGetData.Tables[nIdxTable++].TableName = "Mst_Department";
            }
            #endregion
        }
        private void Mst_Department_CreateX(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            , DateTime dtimeSys
            //// 
            , object objDepartmentCode
            , object objDepartmentCodeParent
            , object objMST
            , object objDepartmentName
            ////
            )
        {
            #region // Temp:
            string strFunctionName = "Mst_Department_CreateX";
            //string strErrorCodeDefault = TError.ErrHTCNM.Mnf_VIN_Get_QCX;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
                ////
                , "objDepartmentCode", objDepartmentCode
                , "objDepartmentCodeParent", objDepartmentCodeParent
                , "objMST", objMST
                , "objDepartmentName", objDepartmentName
                });
            #endregion

            #region // Refine and Check Input:
            ////
            string strDepartmentCode = TUtils.CUtils.StdParam(objDepartmentCode);
            string strDepartmentCodeParent = TUtils.CUtils.StdParam(objDepartmentCodeParent);
            string strMST = TUtils.CUtils.StdParam(objMST);
            string strDepartmentName = string.Format("{0}", objDepartmentName).Trim();

            // drAbilityOfUser:
            //DataRow drAbilityOfUser = Sys_User_GetAbilityViewOfUser(_cf.sinf.strUserCode);
            ////
            DataTable dtDB_Mst_Department = null;
            {
                ////
                if (strDepartmentCode == null || strDepartmentCode.Length < 1)
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.strDepartmentCode", strDepartmentCode
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Mst_Department_Create_InvalidDepartmentCode
                        , null
                        , alParamsCoupleError.ToArray()
                        );
                }
                ////
                Mst_Department_CheckDB(
                    ref alParamsCoupleError // alParamsCoupleError
                    , strDepartmentCode // objDepartmentCode
                    , TConst.Flag.No // strFlagExistToCheck
                    , "" // strFlagActiveListToCheck
                    , out dtDB_Mst_Department // dtDB_Mst_Department
                    );
                ////
                DataTable dtDB_Mst_NNT = null;

                Mst_NNT_CheckDB(
                    ref alParamsCoupleError // alParamsCoupleError
                    , strMST // objOrganCode
                    , TConst.Flag.Yes // strFlagExistToCheck
                    , TConst.Flag.Active // strFlagActiveListToCheck
                    , "" // strTCTStatusListToCheck
                    , out dtDB_Mst_NNT // dtDB_Mst_NNT
                    );
                ////
                DataTable dtDB_Mst_Department_Parent = null;

                if (!string.IsNullOrEmpty(strDepartmentCodeParent))
                {
                    /////
                    Mst_Department_CheckDB(
                        ref alParamsCoupleError // alParamsCoupleError
                        , strDepartmentCodeParent // objDepartmentCode
                        , TConst.Flag.Yes // strFlagExistToCheck
                        , TConst.Flag.Active // strFlagActiveListToCheck
                        , out dtDB_Mst_Department_Parent // dtDB_Mst_Department
                        );
                    ////
                }
                ////
                if (strDepartmentName.Length < 1)
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.strDepartmentName", strDepartmentName
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Mst_Department_Create_InvalidDepartmentName
                        , null
                        , alParamsCoupleError.ToArray()
                        );
                }
            }
            #endregion

            #region // SaveDB Mst_Chain:
            {
                // Init:
                //ArrayList alColumnEffective = new ArrayList();
                string strFN = "";
                DataRow drDB = dtDB_Mst_Department.NewRow();
                strFN = "DepartmentCode"; drDB[strFN] = strDepartmentCode;
                strFN = "NetworkID"; drDB[strFN] = nNetworkID;
                strFN = "DepartmentCodeParent"; drDB[strFN] = strDepartmentCodeParent;
                strFN = "DepartmentBUCode"; drDB[strFN] = "X";
                strFN = "DepartmentBUPattern"; drDB[strFN] = "X";
                strFN = "DepartmentLevel"; drDB[strFN] = 1;
                strFN = "MST"; drDB[strFN] = strMST;
                strFN = "DepartmentName"; drDB[strFN] = strDepartmentName;
                strFN = "FlagActive"; drDB[strFN] = TConst.Flag.Active;
                strFN = "LogLUDTimeUTC"; drDB[strFN] = dtimeSys.ToString("yyyy-MM-dd HH:mm:ss");
                strFN = "LogLUBy"; drDB[strFN] = strWAUserCode;
                dtDB_Mst_Department.Rows.Add(drDB);

                // Save:
                _cf.db.SaveData(
                    "Mst_Department" // strTableName
                    , dtDB_Mst_Department // dtData
                                          //, alColumnEffective.ToArray()
                    );
            }
            #endregion

            #region // Post Save:
            {
                Mst_Department_UpdBU();
            }
            #endregion
        }
        private void Mst_Department_UpdateX(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            , DateTime dtimeSys
            //// 
            , object objDepartmentCode
            , object objDepartmentCodeParent
            , object objMST
            , object objDepartmentName
            , object objFlagActive
            ////
            , object objFt_Cols_Upd
            ////
            )
        {
            #region // Temp:
            string strFunctionName = "Mst_Department_UpdateX";
            //string strErrorCodeDefault = TError.ErrHTCNM.Mst_Department_UpdateX;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
                ////
                , "objDepartmentCode", objDepartmentCode
                , "objDepartmentCodeParent", objDepartmentCodeParent
                , "objMST", objMST
                , "objDepartmentName", objDepartmentName
                , "objFlagActive", objFlagActive
                ////
                , "objFt_Cols_Upd", objFt_Cols_Upd
                });
            #endregion

            #region // Refine and Check Input:
            ////
            string strFt_Cols_Upd = TUtils.CUtils.StdParam(objFt_Cols_Upd);
            strFt_Cols_Upd = (strFt_Cols_Upd == null ? "" : strFt_Cols_Upd);
            ////
            string strDepartmentCode = TUtils.CUtils.StdParam(objDepartmentCode);
            string strDepartmentCodeParent = TUtils.CUtils.StdParam(objDepartmentCodeParent);
            string strMST = TUtils.CUtils.StdParam(objMST);
            string strDepartmentName = string.Format("{0}", objDepartmentName).Trim();
            string strFlagActive = TUtils.CUtils.StdFlag(objFlagActive);
            ////
            bool bUpd_MST = strFt_Cols_Upd.Contains("Mst_Department.MST".ToUpper());
            bool bUpd_DepartmentName = strFt_Cols_Upd.Contains("Mst_Department.DepartmentName".ToUpper());
            bool bUpd_FlagActive = strFt_Cols_Upd.Contains("Mst_Department.FlagActive".ToUpper());

            ////
            DataTable dtDB_Mst_Department = null;
            {
                ////
                Mst_Department_CheckDB(
                     ref alParamsCoupleError // alParamsCoupleError
                     , strDepartmentCode // strDepartmentCode 
                     , TConst.Flag.Yes // strFlagExistToCheck
                     , "" // strFlagActiveListToCheck
                     , out dtDB_Mst_Department // dtDB_Mst_Organ
                    );
                ////
                DataTable dtDB_Mst_NNT = null;

                Mst_NNT_CheckDB(
                    ref alParamsCoupleError // alParamsCoupleError
                    , strMST // strMST 
                    , TConst.Flag.Yes // strFlagExistToCheck
                    , TConst.Flag.Active // strFlagActiveListToCheck
                    , "" // strTCTStatusListToCheck
                    , out dtDB_Mst_NNT // dtDB_Mst_NNT
                    );
                ////

                if (bUpd_DepartmentName && string.IsNullOrEmpty(strDepartmentName))
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.strDepartmentName", strDepartmentName
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Mst_Department_UpdateX_InvalidDepartmentName
                        , null
                        , alParamsCoupleError.ToArray()
                        );
                }
            }
            #endregion

            #region // Save Mst_Chain:
            {
                // Init:
                ArrayList alColumnEffective = new ArrayList();
                string strFN = "";
                DataRow drDB = dtDB_Mst_Department.Rows[0];
                if (bUpd_MST) { strFN = "MST"; drDB[strFN] = strMST; alColumnEffective.Add(strFN); }
                if (bUpd_DepartmentName) { strFN = "DepartmentName"; drDB[strFN] = strDepartmentName; alColumnEffective.Add(strFN); }
                if (bUpd_FlagActive) { strFN = "FlagActive"; drDB[strFN] = strFlagActive; alColumnEffective.Add(strFN); }
                strFN = "LogLUDTimeUTC"; drDB[strFN] = dtimeSys.ToString("yyyy-MM-dd HH:mm:ss"); alColumnEffective.Add(strFN);
                strFN = "LogLUBy"; drDB[strFN] = strWAUserCode; alColumnEffective.Add(strFN);

                // Save:
                _cf.db.SaveData(
                    "Mst_Department"
                    , dtDB_Mst_Department
                    , alColumnEffective.ToArray()
                    );
            }
            #endregion
        }
        private void Mst_Department_DeleteX(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            , DateTime dtimeSys
            //// 
            , object objDepartmentCode
            ////
            )
        {
            #region // Temp:
            string strFunctionName = "Mst_Organ_DeleteX";
            //string strErrorCodeDefault = TError.ErrHTCNM.Mnf_VIN_Get_QCX;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
                ////
                , "objDepartmentCode", objDepartmentCode
                });
            #endregion

            #region // Refine and Check Input:
            ////
            string strDepartmentCode = TUtils.CUtils.StdParam(objDepartmentCode);

            ////
            DataTable dtDB_Mst_Department = null;
            {
                ////
                Mst_Department_CheckDB(
                     ref alParamsCoupleError // alParamsCoupleError
                     , strDepartmentCode // strDepartmentCode 
                     , TConst.Flag.Yes // strFlagExistToCheck
                     , "" // strFlagActiveListToCheck
                     , out dtDB_Mst_Department // dtDB_Mst_Department
                    );
                ////
            }
            #endregion

            #region // SaveDB:
            {
                // Init:
                dtDB_Mst_Department.Rows[0].Delete();

                // Save:
                _cf.db.SaveData(
                    "Mst_Department"
                    , dtDB_Mst_Department
                    );
            }
            #endregion
        }
        #endregion

        #region // Mst_InvoiceType:
        private void Mst_InvoiceType_CheckDB(
            ref ArrayList alParamsCoupleError
            , object objInvoiceType
            , string strFlagExistToCheck
            , string strFlagActiveListToCheck
            , out DataTable dtDB_Mst_InvoiceType
            )
        {
            // GetInfo:
            string strSqlExec = CmUtils.StringUtils.Replace(@"
					select top 1
						t.*
					from Mst_InvoiceType t --//[mylock]
					where (1=1)
						and t.InvoiceType = @objInvoiceType
					;
				");
            dtDB_Mst_InvoiceType = _cf.db.ExecQuery(
                strSqlExec
                , "@objInvoiceType", objInvoiceType
                ).Tables[0];
            dtDB_Mst_InvoiceType.TableName = "Mst_InvoiceType";

            // strFlagExistToCheck:
            if (strFlagExistToCheck.Length > 0)
            {
                if (CmUtils.StringUtils.StringEqual(strFlagExistToCheck, TConst.Flag.Active) && dtDB_Mst_InvoiceType.Rows.Count < 1)
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.InvoiceType", objInvoiceType
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Mst_InvoiceType_CheckDB_InvoiceTypeNotFound
                        , null
                        , alParamsCoupleError.ToArray()
                        );
                }
                if (CmUtils.StringUtils.StringEqual(strFlagExistToCheck, TConst.Flag.Inactive) && dtDB_Mst_InvoiceType.Rows.Count > 0)
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.InvoiceType", objInvoiceType
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Mst_InvoiceType_CheckDB_InvoiceTypeExist
                        , null
                        , alParamsCoupleError.ToArray()
                        );
                }
            }

            // strFlagActiveListToCheck:
            if (strFlagActiveListToCheck.Length > 0 && !strFlagActiveListToCheck.Contains(Convert.ToString(dtDB_Mst_InvoiceType.Rows[0]["FlagActive"])))
            {
                alParamsCoupleError.AddRange(new object[]{
                    "Check.InvoiceType", objInvoiceType
                    , "Check.strFlagActiveListToCheck", strFlagActiveListToCheck
                    , "DB.FlagActive", dtDB_Mst_InvoiceType.Rows[0]["FlagActive"]
                    });
                throw CmUtils.CMyException.Raise(
                    TError.ErridnInventory.Mst_InvoiceType_CheckDB_FlagActiveNotMatched
                    , null
                    , alParamsCoupleError.ToArray()
                    );
            }
        }

        public DataSet WAS_Mst_InvoiceType_Get(
           ref ArrayList alParamsCoupleError
           , RQ_Mst_InvoiceType objRQ_Mst_InvoiceType
           ////
           , out RT_Mst_InvoiceType objRT_Mst_InvoiceType
           )
        {
            #region // Temp:
            string strTid = objRQ_Mst_InvoiceType.Tid;
            objRT_Mst_InvoiceType = new RT_Mst_InvoiceType();
            DataSet mdsResult = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            DateTime dtimeSys = DateTime.UtcNow;
            //DataSet mdsExec = null;
            //DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(objRQ_Mst_InvoiceType.Tid);
            //int nTidSeq = 0;
            //bool bNeedTransaction = true;
            string strFunctionName = "WAS_Mst_InvoiceType_Get";
            string strErrorCodeDefault = TError.ErridnInventory.WAS_Mst_InvoiceType_Get;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
                });
            #endregion

            try
            {
                #region // Init:
                #endregion

                #region // Refine and Check Input:
                List<MySummaryTable> lst_MySummaryTable = new List<MySummaryTable>();

                List<Mst_InvoiceType> lst_Mst_InvoiceType = new List<Mst_InvoiceType>();
                #endregion

                #region // WS_Mst_InvoiceType_Get:
                mdsResult = Mst_InvoiceType_Get(
                    objRQ_Mst_InvoiceType.Tid // strTid
                    , objRQ_Mst_InvoiceType.GwUserCode // strGwUserCode
                    , objRQ_Mst_InvoiceType.GwPassword // strGwPassword
                    , objRQ_Mst_InvoiceType.WAUserCode // strUserCode
                    , objRQ_Mst_InvoiceType.WAUserPassword // strUserPassword
                    , ref alParamsCoupleError // alParamsCoupleError
                                              //// Filter:
                    , objRQ_Mst_InvoiceType.Ft_RecordStart // strFt_RecordStart
                    , objRQ_Mst_InvoiceType.Ft_RecordCount // strFt_RecordCount
                    , objRQ_Mst_InvoiceType.Ft_WhereClause // strFt_WhereClause
                                                          //// Return:
                    , objRQ_Mst_InvoiceType.Rt_Cols_Mst_InvoiceType // Rt_Cols_Mst_InvoiceType
                    );
                #endregion

                #region // GetData:
                if (!CmUtils.CMyDataSet.HasError(mdsResult))
                {
                    ////
                    DataTable dt_MySummaryTable = mdsResult.Tables["MySummaryTable"].Copy();
                    lst_MySummaryTable = TUtils.DataTableCmUtils.ToListof<MySummaryTable>(dt_MySummaryTable);
                    objRT_Mst_InvoiceType.MySummaryTable = lst_MySummaryTable[0];

                    ////
                    DataTable dt_Mst_InvoiceType = mdsResult.Tables["Mst_InvoiceType"].Copy();
                    lst_Mst_InvoiceType = TUtils.DataTableCmUtils.ToListof<Mst_InvoiceType>(dt_Mst_InvoiceType);
                    objRT_Mst_InvoiceType.Lst_Mst_InvoiceType = lst_Mst_InvoiceType;
                    /////
                }
                #endregion

                // Return Good:
                return mdsResult;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsResult
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Write ReturnLog:
                //_cf.ProcessBizReturn(
                //	ref mdsResult // mdsFinal
                //	, strTid // strTid
                //	, strFunctionName // strFunctionName
                //	);
                #endregion
            }
        }

        public DataSet Mst_InvoiceType_Get(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            //// Filter:
            , string strFt_RecordStart
            , string strFt_RecordCount
            , string strFt_WhereClause
            //// Return:
            , string strRt_Cols_Mst_InvoiceType
            )
        {
            #region // Temp:
            DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            //int nTidSeq = 0;
            DateTime dtimeSys = DateTime.UtcNow;
            // bool bNeedTransaction = true;
            string strFunctionName = "Mst_InvoiceType_Get";
            string strErrorCodeDefault = TError.ErridnInventory.Mst_InvoiceType_Get;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				//// Filter
				, "strFt_RecordStart", strFt_RecordStart
                , "strFt_RecordCount", strFt_RecordCount
                , "strFt_WhereClause", strFt_WhereClause
				//// Return
				, "strRt_Cols_Mst_InvoiceType", strRt_Cols_Mst_InvoiceType
                });
            #endregion

            try
            {
                #region // Init:
                //_cf.db.LogUserId = _cf.sinf.strUserCode;
                _cf.db.BeginTransaction();

                // Write RequestLog:
                _cf.ProcessBizReq_OutSide(
                    strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    , alParamsCoupleError // alParamsCoupleError
                    );

				//// RptSv_Sys_User_CheckAuthentication:
				//RptSv_Sys_User_CheckAuthentication(
				//	ref alParamsCoupleError
				//	, strWAUserCode
				//	, strWAUserPassword
				//	);

				//// Check Access/Deny:
				//RptSv_Sys_Access_CheckDeny(
				//	ref alParamsCoupleError
				//	, strWAUserCode
				//	, strFunctionName
				//	);
				#endregion

				#region // Mst_InvoiceType_GetX:
				DataSet dsGetData = null;
                {
                    ////
                    Mst_InvoiceType_GetX(
                        strTid // strTid
                        , strGwUserCode // strGwUserCode
                        , strGwPassword // strGwPassword
                        , strWAUserCode // strWAUserCode
                        , strWAUserPassword // strWAUserPassword
                        , ref alParamsCoupleError // alParamsCoupleError
                        , dtimeSys // dtimeSys
                        ////
                        , strFt_RecordStart // strFt_RecordStart
                        , strFt_RecordCount // strFt_RecordCount
                        , strFt_WhereClause // strFt_WhereClause
                        ////
                        , strRt_Cols_Mst_InvoiceType // strRt_Cols_Mst_InvoiceType
                        ////
                        , out dsGetData // dsGetData
                        );
                    ////
                    CmUtils.DataUtils.MoveDataTable(ref mdsFinal, ref dsGetData);
                }
                #endregion

                // Return Good:
                TDALUtils.DBUtils.RollbackSafety(_cf.db); // Always Rollback.
                mdsFinal.AcceptChanges();
                return mdsFinal;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Rollback:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);

                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsFinal
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Rollback and Release resources:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);
                TDALUtils.DBUtils.ReleaseAllSemaphore(_cf.db_Sys, true);

                // Write ReturnLog:
                _cf.ProcessBizReturn_OutSide(
                    ref mdsFinal // mdsFinal
                    , strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    );
                #endregion
            }
        }

        private void Mst_InvoiceType_GetX(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            , DateTime dtimeSys
            //// Filter:
            , string strFt_RecordStart
            , string strFt_RecordCount
            , string strFt_WhereClause
            //// Return:
            , string strRt_Cols_Mst_InvoiceType
            ////
            , out DataSet dsGetData
           )
        {
            #region // Temp:
            //DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            //DateTime dtimeSys = DateTime.UtcNow;
            //bool bNeedTransaction = true;
            string strFunctionName = "Mst_InvoiceType_GetX";
            //string strErrorCodeDefault = TError.ErrHTCNM.Mnf_VIN_Get_QCX;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
                    });
            #endregion

            #region // Check:
            //// Refine:
            long nFilterRecordStart = Convert.ToInt64(strFt_RecordStart);
            long nFilterRecordEnd = nFilterRecordStart + Convert.ToInt64(strFt_RecordCount) - 1;
            bool bGet_Mst_InvoiceType = (strRt_Cols_Mst_InvoiceType != null && strRt_Cols_Mst_InvoiceType.Length > 0);

            //// drAbilityOfUser:
            //DataRow drAbilityOfUser = myCache_ViewAbility_GetUserInfo(strWAUserCode);

            #endregion

            #region // Build Sql:
            ////
            ArrayList alParamsCoupleSql = new ArrayList();
            alParamsCoupleSql.AddRange(new object[] {
                    "@nFilterRecordStart", nFilterRecordStart
                    , "@nFilterRecordEnd", nFilterRecordEnd
                    });
            ////
            //myCache_ViewAbility_GetDealerInfo(drAbilityOfUser);
            ////
            string strSqlGetData = CmUtils.StringUtils.Replace(@"
						---- #tbl_Mst_InvoiceType_Filter_Draft:
						select distinct
							identity(bigint, 0, 1) MyIdxSeq
							, mit.InvoiceType
						into #tbl_Mst_InvoiceType_Filter_Draft
						from Mst_InvoiceType mit --//[mylock]
						where (1=1)
							zzB_Where_strFilter_zzE
						order by mit.InvoiceType asc
						;

						---- Summary:
						select Count(0) MyCount from #tbl_Mst_InvoiceType_Filter_Draft t --//[mylock]
						;

						---- #tbl_Mst_InvoiceType_Filter:
						select
							t.*
						into #tbl_Mst_InvoiceType_Filter
						from #tbl_Mst_InvoiceType_Filter_Draft t --//[mylock]
						where
							(t.MyIdxSeq >= @nFilterRecordStart)
							and (t.MyIdxSeq <= @nFilterRecordEnd)
						;

						-------- Mst_InvoiceType --------:
						zzB_Select_Mst_InvoiceType_zzE
						----------------------------------------

						---- Clear for debug:
						--drop table #tbl_Mst_InvoiceType_Filter_Draft;
						--drop table #tbl_Mst_InvoiceType_Filter;
					"
                );
            ////
            string zzB_Select_Mst_InvoiceType_zzE = "-- Nothing.";
            if (bGet_Mst_InvoiceType)
            {
                #region // bGet_Mst_InvoiceType:
                zzB_Select_Mst_InvoiceType_zzE = CmUtils.StringUtils.Replace(@"
							---- Mst_InvoiceType:
							select
								t.MyIdxSeq
								, mit.*
							from #tbl_Mst_InvoiceType_Filter t --//[mylock]
								inner join Mst_InvoiceType mit --//[mylock]
									on t.InvoiceType = mit.InvoiceType
							order by t.MyIdxSeq asc
							;
						"
                    );
                #endregion
            }
            ////
            string zzB_Where_strFilter_zzE = "";
            {
                Hashtable htSpCols = new Hashtable();
                {
                    #region // htSpCols:
                    ////
                    TUtils.CUtils.MyBuildHTSupportedColumns(
                        _cf.db // db
                        , ref htSpCols // htSupportedColumns
                        , "Mst_InvoiceType" // strTableNameDB
                        , "Mst_InvoiceType." // strPrefixStd
                        , "mit." // strPrefixAlias
                        );
                    ////
                    #endregion
                }
                zzB_Where_strFilter_zzE = CmUtils.SqlUtils.BuildWhere(
                    htSpCols // htSpCols
                    , strFt_WhereClause // strClause
                    , "@p_" // strParamPrefix
                    , ref alParamsCoupleSql // alParamsCoupleSql
                    );
                zzB_Where_strFilter_zzE = (zzB_Where_strFilter_zzE.Length <= 0 ? "" : string.Format(" and ({0})", zzB_Where_strFilter_zzE));
                alParamsCoupleError.AddRange(new object[]{
                        "zzB_Where_strFilter_zzE", zzB_Where_strFilter_zzE
                        });
            }
            ////
            strSqlGetData = CmUtils.StringUtils.Replace(
                strSqlGetData
                , "zzB_Where_strFilter_zzE", zzB_Where_strFilter_zzE
                , "zzB_Select_Mst_InvoiceType_zzE", zzB_Select_Mst_InvoiceType_zzE
                );
            #endregion

            #region // Get Data:
            dsGetData = _cf.db.ExecQuery(
                strSqlGetData
                , alParamsCoupleSql.ToArray()
                );
            int nIdxTable = 0;
            dsGetData.Tables[nIdxTable++].TableName = "MySummaryTable";
            if (bGet_Mst_InvoiceType)
            {
                dsGetData.Tables[nIdxTable++].TableName = "Mst_InvoiceType";
            }
            #endregion
        }
        #endregion

        #region // Mst_PaymentMethods:
        private void Mst_PaymentMethods_CheckDB(
            ref ArrayList alParamsCoupleError
            , object objPaymentMethodCode
            , string strFlagExistToCheck
            , string strFlagActiveListToCheck
            , out DataTable dtDB_Mst_PaymentMethods
            )
        {
            // GetInfo:
            string strSqlExec = CmUtils.StringUtils.Replace(@"
					select top 1
						t.*
					from Mst_PaymentMethods t --//[mylock]
					where (1=1)
						and t.PaymentMethodCode = @objPaymentMethodCode
					;
				");
            dtDB_Mst_PaymentMethods = _cf.db.ExecQuery(
                strSqlExec
                , "@objPaymentMethodCode", objPaymentMethodCode
                ).Tables[0];
            dtDB_Mst_PaymentMethods.TableName = "Mst_PaymentMethods";

            // strFlagExistToCheck:
            if (strFlagExistToCheck.Length > 0)
            {
                if (CmUtils.StringUtils.StringEqual(strFlagExistToCheck, TConst.Flag.Active) && dtDB_Mst_PaymentMethods.Rows.Count < 1)
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.PaymentMethodCode", objPaymentMethodCode
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Mst_PaymentMethods_CheckDB_PaymentMethodsNotFound
                        , null
                        , alParamsCoupleError.ToArray()
                        );
                }
                if (CmUtils.StringUtils.StringEqual(strFlagExistToCheck, TConst.Flag.Inactive) && dtDB_Mst_PaymentMethods.Rows.Count > 0)
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.PaymentMethodCode", objPaymentMethodCode
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Mst_PaymentMethods_CheckDB_PaymentMethodsExist
                        , null
                        , alParamsCoupleError.ToArray()
                        );
                }
            }

            // strFlagActiveListToCheck:
            if (strFlagActiveListToCheck.Length > 0 && !strFlagActiveListToCheck.Contains(Convert.ToString(dtDB_Mst_PaymentMethods.Rows[0]["FlagActive"])))
            {
                alParamsCoupleError.AddRange(new object[]{
                    "Check.PaymentMethodCode", objPaymentMethodCode
                    , "Check.strFlagActiveListToCheck", strFlagActiveListToCheck
                    , "DB.FlagActive", dtDB_Mst_PaymentMethods.Rows[0]["FlagActive"]
                    });
                throw CmUtils.CMyException.Raise(
                    TError.ErridnInventory.Mst_PaymentMethods_CheckDB_FlagActiveNotMatched
                    , null
                    , alParamsCoupleError.ToArray()
                    );
            }
        }

        public DataSet WAS_Mst_PaymentMethods_Get(
          ref ArrayList alParamsCoupleError
          , RQ_Mst_PaymentMethods objRQ_Mst_PaymentMethods
          ////
          , out RT_Mst_PaymentMethods objRT_Mst_PaymentMethods
          )
        {
            #region // Temp:
            string strTid = objRQ_Mst_PaymentMethods.Tid;
            objRT_Mst_PaymentMethods = new RT_Mst_PaymentMethods();
            DataSet mdsResult = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            DateTime dtimeSys = DateTime.UtcNow;
            //DataSet mdsExec = null;
            //DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(objRQ_Mst_PaymentMethods.Tid);
            //int nTidSeq = 0;
            //bool bNeedTransaction = true;
            string strFunctionName = "WAS_Mst_PaymentMethods_Get";
            string strErrorCodeDefault = TError.ErridnInventory.WAS_Mst_PaymentMethods_Get;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
        });
            #endregion

            try
            {
                #region // Init:
                #endregion

                #region // Refine and Check Input:
                List<MySummaryTable> lst_MySummaryTable = new List<MySummaryTable>();

                List<Mst_PaymentMethods> lst_Mst_PaymentMethods = new List<Mst_PaymentMethods>();
                #endregion

                #region // WS_Mst_PaymentMethods_Get:
                mdsResult = Mst_PaymentMethods_Get(
                    objRQ_Mst_PaymentMethods.Tid // strTid
                    , objRQ_Mst_PaymentMethods.GwUserCode // strGwUserCode
                    , objRQ_Mst_PaymentMethods.GwPassword // strGwPassword
                    , objRQ_Mst_PaymentMethods.WAUserCode // strUserCode
                    , objRQ_Mst_PaymentMethods.WAUserPassword // strUserPassword
                    , ref alParamsCoupleError // alParamsCoupleError
                                              //// Filter:
                    , objRQ_Mst_PaymentMethods.Ft_RecordStart // strFt_RecordStart
                    , objRQ_Mst_PaymentMethods.Ft_RecordCount // strFt_RecordCount
                    , objRQ_Mst_PaymentMethods.Ft_WhereClause // strFt_WhereClause
                                                           //// Return:
                    , objRQ_Mst_PaymentMethods.Rt_Cols_Mst_PaymentMethods // Rt_Cols_Mst_PaymentMethods
                    );
                #endregion

                #region // GetData:
                if (!CmUtils.CMyDataSet.HasError(mdsResult))
                {
                    ////
                    DataTable dt_MySummaryTable = mdsResult.Tables["MySummaryTable"].Copy();
                    lst_MySummaryTable = TUtils.DataTableCmUtils.ToListof<MySummaryTable>(dt_MySummaryTable);
                    objRT_Mst_PaymentMethods.MySummaryTable = lst_MySummaryTable[0];
                    ////
                    DataTable dt_Mst_PaymentMethods = mdsResult.Tables["Mst_PaymentMethods"].Copy();
                    lst_Mst_PaymentMethods = TUtils.DataTableCmUtils.ToListof<Mst_PaymentMethods>(dt_Mst_PaymentMethods);
                    objRT_Mst_PaymentMethods.Lst_Mst_PaymentMethods = lst_Mst_PaymentMethods;
                    /////
                }
                #endregion

                // Return Good:
                return mdsResult;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsResult
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Write ReturnLog:
                //_cf.ProcessBizReturn(
                //	ref mdsResult // mdsFinal
                //	, strTid // strTid
                //	, strFunctionName // strFunctionName
                //	);
                #endregion
            }
        }

        public DataSet Mst_PaymentMethods_Get(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            //// Filter:
            , string strFt_RecordStart
            , string strFt_RecordCount
            , string strFt_WhereClause
            //// Return:
            , string strRt_Cols_Mst_PaymentMethods
            )
        {
            #region // Temp:
            DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            //int nTidSeq = 0;
            DateTime dtimeSys = DateTime.UtcNow;
            // bool bNeedTransaction = true;
            string strFunctionName = "Mst_PaymentMethods_Get";
            string strErrorCodeDefault = TError.ErridnInventory.Mst_PaymentMethods_Get;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				//// Filter
				, "strFt_RecordStart", strFt_RecordStart
                , "strFt_RecordCount", strFt_RecordCount
                , "strFt_WhereClause", strFt_WhereClause
				//// Return
				, "strRt_Cols_Mst_PaymentMethods", strRt_Cols_Mst_PaymentMethods
                });
            #endregion

            try
            {
                #region // Init:
                //_cf.db.LogUserId = _cf.sinf.strUserCode;
                _cf.db.BeginTransaction();

                // Write RequestLog:
                _cf.ProcessBizReq_OutSide(
                    strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    , alParamsCoupleError // alParamsCoupleError
                    );

                // Sys_User_CheckAuthentication:
                //Sys_User_CheckAuthentication(
                //    ref alParamsCoupleError
                //    , strWAUserCode
                //    , strWAUserPassword
                //    );

                // Check Access/Deny:
                Sys_Access_CheckDenyV30(
                    ref alParamsCoupleError
                    , strWAUserCode
                    , strFunctionName
                    );
                #endregion

                #region // Mst_PaymentMethods_GetX:
                DataSet dsGetData = null;
                {
                    ////
                    Mst_PaymentMethods_GetX(
                        strTid // strTid
                        , strGwUserCode // strGwUserCode
                        , strGwPassword // strGwPassword
                        , strWAUserCode // strWAUserCode
                        , strWAUserPassword // strWAUserPassword
                        , ref alParamsCoupleError // alParamsCoupleError
                        , dtimeSys // dtimeSys
                        ////
                        , strFt_RecordStart // strFt_RecordStart
                        , strFt_RecordCount // strFt_RecordCount
                        , strFt_WhereClause // strFt_WhereClause
                        ////
                        , strRt_Cols_Mst_PaymentMethods // strRt_Cols_Mst_PaymentMethods
                        ////
                        , out dsGetData // dsGetData
                        );
                    ////
                    CmUtils.DataUtils.MoveDataTable(ref mdsFinal, ref dsGetData);
                }
                #endregion

                // Return Good:
                TDALUtils.DBUtils.RollbackSafety(_cf.db); // Always Rollback.
                mdsFinal.AcceptChanges();
                return mdsFinal;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Rollback:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);

                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsFinal
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Rollback and Release resources:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);
                TDALUtils.DBUtils.ReleaseAllSemaphore(_cf.db_Sys, true);

                // Write ReturnLog:
                _cf.ProcessBizReturn_OutSide(
                    ref mdsFinal // mdsFinal
                    , strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    );
                #endregion
            }
        }

        private void Mst_PaymentMethods_GetX(
           string strTid
           , string strGwUserCode
           , string strGwPassword
           , string strWAUserCode
           , string strWAUserPassword
           , ref ArrayList alParamsCoupleError
           , DateTime dtimeSys
           //// Filter:
           , string strFt_RecordStart
           , string strFt_RecordCount
           , string strFt_WhereClause
           //// Return:
           , string strRt_Cols_Mst_PaymentMethods
           ////
           , out DataSet dsGetData
          )
        {
            #region // Temp:
            //DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            //DateTime dtimeSys = DateTime.UtcNow;
            //bool bNeedTransaction = true;
            string strFunctionName = "Mst_PaymentMethods_GetX";
            //string strErrorCodeDefault = TError.ErrHTCNM.Mst_PaymentMethods_GetX;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
                    });
            #endregion

            #region // Check:
            //// Refine:
            long nFilterRecordStart = Convert.ToInt64(strFt_RecordStart);
            long nFilterRecordEnd = nFilterRecordStart + Convert.ToInt64(strFt_RecordCount) - 1;
            bool bGet_Mst_PaymentMethods = (strRt_Cols_Mst_PaymentMethods != null && strRt_Cols_Mst_PaymentMethods.Length > 0);

            //// drAbilityOfUser:
            //DataRow drAbilityOfUser = myCache_ViewAbility_GetUserInfo(strWAUserCode);

            #endregion

            #region // Build Sql:
            ////
            ArrayList alParamsCoupleSql = new ArrayList();
            alParamsCoupleSql.AddRange(new object[] {
                    "@nFilterRecordStart", nFilterRecordStart
                    , "@nFilterRecordEnd", nFilterRecordEnd
                    });
            ////
            //myCache_ViewAbility_GetDealerInfo(drAbilityOfUser);
            ////
            string strSqlGetData = CmUtils.StringUtils.Replace(@"
						---- #tbl_Mst_PaymentMethods_Filter_Draft:
						select distinct
							identity(bigint, 0, 1) MyIdxSeq
							, mpm.PaymentMethodCode
						into #tbl_Mst_PaymentMethods_Filter_Draft
						from Mst_PaymentMethods mpm --//[mylock]
						where (1=1)
							zzB_Where_strFilter_zzE
						order by mpm.PaymentMethodCode asc
						;

						---- Summary:
						select Count(0) MyCount from #tbl_Mst_PaymentMethods_Filter_Draft t --//[mylock]
						;

						---- #tbl_Mst_PaymentMethods_Filter:
						select
							t.*
						into #tbl_Mst_PaymentMethods_Filter
						from #tbl_Mst_PaymentMethods_Filter_Draft t --//[mylock]
						where
							(t.MyIdxSeq >= @nFilterRecordStart)
							and (t.MyIdxSeq <= @nFilterRecordEnd)
						;

						-------- Mst_PaymentMethods --------:
						zzB_Select_Mst_PaymentMethods_zzE
						----------------------------------------

						---- Clear for debug:
						--drop table #tbl_Mst_PaymentMethods_Filter_Draft;
						--drop table #tbl_Mst_PaymentMethods_Filter;
					"
                );
            ////
            string zzB_Select_Mst_PaymentMethods_zzE = "-- Nothing.";
            if (bGet_Mst_PaymentMethods)
            {
                #region // bGet_Mst_PaymentMethods:
                zzB_Select_Mst_PaymentMethods_zzE = CmUtils.StringUtils.Replace(@"
							---- Mst_PaymentMethods:
							select
								t.MyIdxSeq
								, mpm.*
							from #tbl_Mst_PaymentMethods_Filter t --//[mylock]
								inner join Mst_PaymentMethods mpm --//[mylock]
									on t.PaymentMethodCode = mpm.PaymentMethodCode
							order by t.MyIdxSeq asc
							;
						"
                    );
                #endregion
            }
            ////
            string zzB_Where_strFilter_zzE = "";
            {
                Hashtable htSpCols = new Hashtable();
                {
                    #region // htSpCols:
                    ////
                    TUtils.CUtils.MyBuildHTSupportedColumns(
                        _cf.db // db
                        , ref htSpCols // htSupportedColumns
                        , "Mst_PaymentMethods" // strTableNameDB
                        , "Mst_PaymentMethods." // strPrefixStd
                        , "mpm." // strPrefixAlias
                        );
                    ////
                    #endregion
                }
                zzB_Where_strFilter_zzE = CmUtils.SqlUtils.BuildWhere(
                    htSpCols // htSpCols
                    , strFt_WhereClause // strClause
                    , "@p_" // strParamPrefix
                    , ref alParamsCoupleSql // alParamsCoupleSql
                    );
                zzB_Where_strFilter_zzE = (zzB_Where_strFilter_zzE.Length <= 0 ? "" : string.Format(" and ({0})", zzB_Where_strFilter_zzE));
                alParamsCoupleError.AddRange(new object[]{
                        "zzB_Where_strFilter_zzE", zzB_Where_strFilter_zzE
                        });
            }
            ////
            strSqlGetData = CmUtils.StringUtils.Replace(
                strSqlGetData
                , "zzB_Where_strFilter_zzE", zzB_Where_strFilter_zzE
                , "zzB_Select_Mst_PaymentMethods_zzE", zzB_Select_Mst_PaymentMethods_zzE
                );
            #endregion

            #region // Get Data:
            dsGetData = _cf.db.ExecQuery(
                strSqlGetData
                , alParamsCoupleSql.ToArray()
                );
            int nIdxTable = 0;
            dsGetData.Tables[nIdxTable++].TableName = "MySummaryTable";
            if (bGet_Mst_PaymentMethods)
            {
                dsGetData.Tables[nIdxTable++].TableName = "Mst_PaymentMethods";
            }
            #endregion
        }
        #endregion

        #region // Mst_VATRate:
        private void Mst_VATRate_CheckDB(
            ref ArrayList alParamsCoupleError
            , object objVATRateCode
            , string strFlagExistToCheck
            , string strFlagActiveListToCheck
            , out DataTable dtDB_Mst_VATRate
            )
        {
            // GetInfo:
            string strSqlExec = CmUtils.StringUtils.Replace(@"
					select top 1
						t.*
					from Mst_VATRate t --//[mylock]
					where (1=1)
						and t.VATRateCode = @objVATRateCode
					;
				");
            dtDB_Mst_VATRate = _cf.db.ExecQuery(
                strSqlExec
                , "@objVATRateCode", objVATRateCode
                ).Tables[0];
            dtDB_Mst_VATRate.TableName = "Mst_VATRate";

            // strFlagExistToCheck:
            if (strFlagExistToCheck.Length > 0)
            {
                if (CmUtils.StringUtils.StringEqual(strFlagExistToCheck, TConst.Flag.Active) && dtDB_Mst_VATRate.Rows.Count < 1)
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.VATRateCode", objVATRateCode
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Mst_VATRate_CheckDB_VATRateNotFound
                        , null
                        , alParamsCoupleError.ToArray()
                        );
                }
                if (CmUtils.StringUtils.StringEqual(strFlagExistToCheck, TConst.Flag.Inactive) && dtDB_Mst_VATRate.Rows.Count > 0)
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.VATRateCode", objVATRateCode
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Mst_VATRate_CheckDB_VATRateExist
                        , null
                        , alParamsCoupleError.ToArray()
                        );
                }
            }

            // strFlagActiveListToCheck:
            if (strFlagActiveListToCheck.Length > 0 && !strFlagActiveListToCheck.Contains(Convert.ToString(dtDB_Mst_VATRate.Rows[0]["FlagActive"])))
            {
                alParamsCoupleError.AddRange(new object[]{
                    "Check.VATRateCode", objVATRateCode
                    , "Check.strFlagActiveListToCheck", strFlagActiveListToCheck
                    , "DB.FlagActive", dtDB_Mst_VATRate.Rows[0]["FlagActive"]
                    });
                throw CmUtils.CMyException.Raise(
                    TError.ErridnInventory.Mst_VATRate_CheckDB_FlagActiveNotMatched
                    , null
                    , alParamsCoupleError.ToArray()
                    );
            }
        }

        public DataSet WAS_Mst_VATRate_Get(
          ref ArrayList alParamsCoupleError
          , RQ_Mst_VATRate objRQ_Mst_VATRate
          ////
          , out RT_Mst_VATRate objRT_Mst_VATRate
          )
        {
            #region // Temp:
            string strTid = objRQ_Mst_VATRate.Tid;
            objRT_Mst_VATRate = new RT_Mst_VATRate();
            DataSet mdsResult = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            DateTime dtimeSys = DateTime.UtcNow;
            //DataSet mdsExec = null;
            //DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(objRQ_Mst_VATRate.Tid);
            //int nTidSeq = 0;
            //bool bNeedTransaction = true;
            string strFunctionName = "WAS_Mst_VATRate_Get";
            string strErrorCodeDefault = TError.ErridnInventory.WAS_Mst_VATRate_Get;
            alParamsCoupleError.AddRange(new object[]{
                    "strFunctionName", strFunctionName
                    , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
                    });
            #endregion

            try
            {
                #region // Init:
                #endregion

                #region // Refine and Check Input:
                List<MySummaryTable> lst_MySummaryTable = new List<MySummaryTable>();

                List<Mst_VATRate> lst_Mst_VATRate = new List<Mst_VATRate>();
                #endregion

                #region // WS_Mst_VATRate_Get:
                mdsResult = Mst_VATRate_Get(
                    objRQ_Mst_VATRate.Tid // strTid
                    , objRQ_Mst_VATRate.GwUserCode // strGwUserCode
                    , objRQ_Mst_VATRate.GwPassword // strGwPassword
                    , objRQ_Mst_VATRate.WAUserCode // strUserCode
                    , objRQ_Mst_VATRate.WAUserPassword // strUserPassword
                    , ref alParamsCoupleError // alParamsCoupleError
                    //// Filter:
                    , objRQ_Mst_VATRate.Ft_RecordStart // strFt_RecordStart
                    , objRQ_Mst_VATRate.Ft_RecordCount // strFt_RecordCount
                    , objRQ_Mst_VATRate.Ft_WhereClause // strFt_WhereClause
                    //// Return:
                    , objRQ_Mst_VATRate.Rt_Cols_Mst_VATRate // Rt_Cols_Mst_VATRate
                    );
                #endregion

                #region // GetData:
                if (!CmUtils.CMyDataSet.HasError(mdsResult))
                {
                    ////
                    DataTable dt_MySummaryTable = mdsResult.Tables["MySummaryTable"].Copy();
                    lst_MySummaryTable = TUtils.DataTableCmUtils.ToListof<MySummaryTable>(dt_MySummaryTable);
                    objRT_Mst_VATRate.MySummaryTable = lst_MySummaryTable[0];

                    ////
                    DataTable dt_Mst_VATRate = mdsResult.Tables["Mst_VATRate"].Copy();
                    lst_Mst_VATRate = TUtils.DataTableCmUtils.ToListof<Mst_VATRate>(dt_Mst_VATRate);
                    objRT_Mst_VATRate.Lst_Mst_VATRate = lst_Mst_VATRate;
                    /////
                }
                #endregion

                // Return Good:
                return mdsResult;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsResult
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Write ReturnLog:
                //_cf.ProcessBizReturn(
                //	ref mdsResult // mdsFinal
                //	, strTid // strTid
                //	, strFunctionName // strFunctionName
                //	);
                #endregion
            }
        }

        public DataSet Mst_VATRate_Get(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            //// Filter:
            , string strFt_RecordStart
            , string strFt_RecordCount
            , string strFt_WhereClause
            //// Return:
            , string strRt_Cols_Mst_VATRate
            )
        {
            #region // Temp:
            DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
			Stopwatch stopWatchFunc = new Stopwatch();
			//int nTidSeq = 0;
			DateTime dtimeSys = DateTime.UtcNow;
            // bool bNeedTransaction = true;
            string strFunctionName = "Mst_VATRate_Get";
            string strErrorCodeDefault = TError.ErridnInventory.Mst_VATRate_Get;
			ArrayList alParamsCoupleSW = new ArrayList();
			alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				//// Filter
				, "strFt_RecordStart", strFt_RecordStart
                , "strFt_RecordCount", strFt_RecordCount
                , "strFt_WhereClause", strFt_WhereClause
				//// Return
				, "strRt_Cols_Mst_VATRate", strRt_Cols_Mst_VATRate
                });
            #endregion

            try
            {
				#region // SW:				
				stopWatchFunc.Start();
				alParamsCoupleSW.AddRange(new object[]{
					"strFunctionName", strFunctionName
					, "stopWatchFunc.Start", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
					});
				#endregion

				#region // Init:
				//_cf.db.LogUserId = _cf.sinf.strUserCode;
				_cf.db.BeginTransaction();

                // Write RequestLog:
                _cf.ProcessBizReq_OutSide(
                    strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    , alParamsCoupleError // alParamsCoupleError
                    );

                // Sys_User_CheckAuthentication:
                //Sys_User_CheckAuthentication(
                //    ref alParamsCoupleError
                //    , strWAUserCode
                //    , strWAUserPassword
                //    );

                // Check Access/Deny:
                Sys_Access_CheckDenyV30(
                    ref alParamsCoupleError
                    , strWAUserCode
                    , strFunctionName
                    );
                #endregion

                #region // Mst_VATRate_GetX:
                DataSet dsGetData = null;
                {
                    ////
                    Mst_VATRate_GetX(
                        strTid // strTid
                        , strGwUserCode // strGwUserCode
                        , strGwPassword // strGwPassword
                        , strWAUserCode // strWAUserCode
                        , strWAUserPassword // strWAUserPassword
                        , ref alParamsCoupleError // alParamsCoupleError
                        , dtimeSys // dtimeSys
                        ////
                        , strFt_RecordStart // strFt_RecordStart
                        , strFt_RecordCount // strFt_RecordCount
                        , strFt_WhereClause // strFt_WhereClause
                        ////
                        , strRt_Cols_Mst_VATRate // strRt_Cols_Mst_VATRate
                        ////
                        , out dsGetData // dsGetData
                        );
                    ////
                    CmUtils.DataUtils.MoveDataTable(ref mdsFinal, ref dsGetData);
                }
                #endregion

                // Return Good:
                TDALUtils.DBUtils.RollbackSafety(_cf.db); // Always Rollback.
                mdsFinal.AcceptChanges();
                return mdsFinal;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Rollback:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);

                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsFinal
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Rollback and Release resources:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);
                TDALUtils.DBUtils.ReleaseAllSemaphore(_cf.db_Sys, true);

				stopWatchFunc.Stop();
				alParamsCoupleSW.AddRange(new object[]{
					"strFunctionName", strFunctionName
					, "stopWatchFunc.Stop", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
					, "stopWatchFunc.ElapsedMilliseconds", stopWatchFunc.ElapsedMilliseconds
					});

				// Write ReturnLog:
				_cf.ProcessBizReturn_OutSide(
                    ref mdsFinal // mdsFinal
                    , strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
					, alParamsCoupleSW // alParamsCoupleSW
					);
                #endregion
            }
        }

        private void Mst_VATRate_GetX(
           string strTid
           , string strGwUserCode
           , string strGwPassword
           , string strWAUserCode
           , string strWAUserPassword
           , ref ArrayList alParamsCoupleError
           , DateTime dtimeSys
           //// Filter:
           , string strFt_RecordStart
           , string strFt_RecordCount
           , string strFt_WhereClause
           //// Return:
           , string strRt_Cols_Mst_VATRate
           ////
           , out DataSet dsGetData
          )
        {
            #region // Temp:
            //DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            //DateTime dtimeSys = DateTime.UtcNow;
            //bool bNeedTransaction = true;
            string strFunctionName = "Mst_VATRate_GetX";
            //string strErrorCodeDefault = TError.ErrHTCNM.Mst_VATRate_GetX;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
                    });
            #endregion

            #region // Check:
            //// Refine:
            long nFilterRecordStart = Convert.ToInt64(strFt_RecordStart);
            long nFilterRecordEnd = nFilterRecordStart + Convert.ToInt64(strFt_RecordCount) - 1;
            bool bGet_Mst_VATRate = (strRt_Cols_Mst_VATRate != null && strRt_Cols_Mst_VATRate.Length > 0);

            //// drAbilityOfUser:
            //DataRow drAbilityOfUser = myCache_ViewAbility_GetUserInfo(strWAUserCode);

            #endregion

            #region // Build Sql:
            ////
            ArrayList alParamsCoupleSql = new ArrayList();
            alParamsCoupleSql.AddRange(new object[] {
                    "@nFilterRecordStart", nFilterRecordStart
                    , "@nFilterRecordEnd", nFilterRecordEnd
                    });
            ////
            //myCache_ViewAbility_GetDealerInfo(drAbilityOfUser);
            ////
            string strSqlGetData = CmUtils.StringUtils.Replace(@"
						---- #tbl_Mst_VATRate_Filter_Draft:
						select distinct
							identity(bigint, 0, 1) MyIdxSeq
							, mvatr.VATRateCode
						into #tbl_Mst_VATRate_Filter_Draft
						from Mst_VATRate mvatr --//[mylock]
						where (1=1)
							zzB_Where_strFilter_zzE
						order by mvatr.VATRateCode asc
						;

						---- Summary:
						select Count(0) MyCount from #tbl_Mst_VATRate_Filter_Draft t --//[mylock]
						;

						---- #tbl_Mst_VATRate_Filter:
						select
							t.*
						into #tbl_Mst_VATRate_Filter
						from #tbl_Mst_VATRate_Filter_Draft t --//[mylock]
						where
							(t.MyIdxSeq >= @nFilterRecordStart)
							and (t.MyIdxSeq <= @nFilterRecordEnd)
						;

						-------- Mst_VATRate --------:
						zzB_Select_Mst_VATRate_zzE
						----------------------------------------

						---- Clear for debug:
						--drop table #tbl_Mst_VATRate_Filter_Draft;
						--drop table #tbl_Mst_VATRate_Filter;
					"
                );
            ////
            string zzB_Select_Mst_VATRate_zzE = "-- Nothing.";
            if (bGet_Mst_VATRate)
            {
                #region // bGet_Mst_VATRate:
                zzB_Select_Mst_VATRate_zzE = CmUtils.StringUtils.Replace(@"
							---- Mst_VATRate:
							select
								t.MyIdxSeq
								, mvatr.*
							from #tbl_Mst_VATRate_Filter t --//[mylock]
								inner join Mst_VATRate mvatr --//[mylock]
									on t.VATRateCode = mvatr.VATRateCode
							order by t.MyIdxSeq asc
							;
						"
                    );
                #endregion
            }
            ////
            string zzB_Where_strFilter_zzE = "";
            {
                Hashtable htSpCols = new Hashtable();
                {
                    #region // htSpCols:
                    ////
                    TUtils.CUtils.MyBuildHTSupportedColumns(
                        _cf.db // db
                        , ref htSpCols // htSupportedColumns
                        , "Mst_VATRate" // strTableNameDB
                        , "Mst_VATRate." // strPrefixStd
                        , "mvatr." // strPrefixAlias
                        );
                    ////
                    #endregion
                }
                zzB_Where_strFilter_zzE = CmUtils.SqlUtils.BuildWhere(
                    htSpCols // htSpCols
                    , strFt_WhereClause // strClause
                    , "@p_" // strParamPrefix
                    , ref alParamsCoupleSql // alParamsCoupleSql
                    );
                zzB_Where_strFilter_zzE = (zzB_Where_strFilter_zzE.Length <= 0 ? "" : string.Format(" and ({0})", zzB_Where_strFilter_zzE));
                alParamsCoupleError.AddRange(new object[]{
                        "zzB_Where_strFilter_zzE", zzB_Where_strFilter_zzE
                        });
            }
            ////
            strSqlGetData = CmUtils.StringUtils.Replace(
                strSqlGetData
                , "zzB_Where_strFilter_zzE", zzB_Where_strFilter_zzE
                , "zzB_Select_Mst_VATRate_zzE", zzB_Select_Mst_VATRate_zzE
                );
            #endregion

            #region // Get Data:
            dsGetData = _cf.db.ExecQuery(
                strSqlGetData
                , alParamsCoupleSql.ToArray()
                );
            int nIdxTable = 0;
            dsGetData.Tables[nIdxTable++].TableName = "MySummaryTable";
            if (bGet_Mst_VATRate)
            {
                dsGetData.Tables[nIdxTable++].TableName = "Mst_VATRate";
            }
            #endregion
        }
        #endregion

        #region // Mst_GovIDType:
        private void Mst_GovIDType_CheckDB(
           ref ArrayList alParamsCoupleError
           , object objGovIDType
           , string strFlagExistToCheck
           , string strFlagActiveListToCheck
           , out DataTable dtDB_Mst_GovIDType
           )
        {
            // GetInfo:
            string strSqlExec = CmUtils.StringUtils.Replace(@"
					select top 1
						t.*
					from Mst_GovIDType t --//[mylock]
					where (1=1)
						and t.GovIDType = @objGovIDType
					;
				");
            dtDB_Mst_GovIDType = _cf.db.ExecQuery(
                strSqlExec
                , "@objGovIDType", objGovIDType
                ).Tables[0];
            dtDB_Mst_GovIDType.TableName = "Mst_GovIDType";

            // strFlagExistToCheck:
            if (strFlagExistToCheck.Length > 0)
            {
                if (CmUtils.StringUtils.StringEqual(strFlagExistToCheck, TConst.Flag.Active) && dtDB_Mst_GovIDType.Rows.Count < 1)
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.GovIDType", objGovIDType
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Mst_GovIDType_CheckDB_GovIDTypeNotFound
                        , null
                        , alParamsCoupleError.ToArray()
                        );
                }
                if (CmUtils.StringUtils.StringEqual(strFlagExistToCheck, TConst.Flag.Inactive) && dtDB_Mst_GovIDType.Rows.Count > 0)
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.GovIDType", objGovIDType
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Mst_GovIDType_CheckDB_GovIDTypeExist
                        , null
                        , alParamsCoupleError.ToArray()
                        );
                }
            }

            // strFlagActiveListToCheck:
            if (strFlagActiveListToCheck.Length > 0 && !strFlagActiveListToCheck.Contains(Convert.ToString(dtDB_Mst_GovIDType.Rows[0]["FlagActive"])))
            {
                alParamsCoupleError.AddRange(new object[]{
                    "Check.GovIDType", objGovIDType
                    , "Check.strFlagActiveListToCheck", strFlagActiveListToCheck
                    , "DB.FlagActive", dtDB_Mst_GovIDType.Rows[0]["FlagActive"]
                    });
                throw CmUtils.CMyException.Raise(
                    TError.ErridnInventory.Mst_GovIDType_CheckDB_FlagActiveNotMatched
                    , null
                    , alParamsCoupleError.ToArray()
                    );
            }
        }

        public DataSet WAS_RptSv_Mst_GovIDType_Get(
         ref ArrayList alParamsCoupleError
         , RQ_Mst_GovIDType objRQ_Mst_GovIDType
         ////
         , out RT_Mst_GovIDType objRT_Mst_GovIDType
         )
        {
            #region // Temp:
            string strTid = objRQ_Mst_GovIDType.Tid;
            objRT_Mst_GovIDType = new RT_Mst_GovIDType();
            DataSet mdsResult = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            DateTime dtimeSys = DateTime.UtcNow;
            //DataSet mdsExec = null;
            //DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(objRQ_Mst_GovIDType.Tid);
            //int nTidSeq = 0;
            //bool bNeedTransaction = true;
            string strFunctionName = "WAS_RptSv_Mst_GovIDType_Get";
            string strErrorCodeDefault = TError.ErridnInventory.WAS_Mst_GovIDType_Get;
            alParamsCoupleError.AddRange(new object[]{
                    "strFunctionName", strFunctionName
                    , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
                    });
            #endregion

            try
            {
                #region // Init:
                #endregion

                #region // Refine and Check Input:
                List<MySummaryTable> lst_MySummaryTable = new List<MySummaryTable>();

                List<Mst_GovIDType> lst_Mst_GovIDType = new List<Mst_GovIDType>();
                #endregion

                #region // WS_RptSv_Mst_GovIDType_Get:
                mdsResult = RptSv_Mst_GovIDType_Get(
                    objRQ_Mst_GovIDType.Tid // strTid
                    , objRQ_Mst_GovIDType.GwUserCode // strGwUserCode
                    , objRQ_Mst_GovIDType.GwPassword // strGwPassword
                    , objRQ_Mst_GovIDType.WAUserCode // strUserCode
                    , objRQ_Mst_GovIDType.WAUserPassword // strUserPassword
                    , ref alParamsCoupleError // alParamsCoupleError
                                              //// Filter:
                    , objRQ_Mst_GovIDType.Ft_RecordStart // strFt_RecordStart
                    , objRQ_Mst_GovIDType.Ft_RecordCount // strFt_RecordCount
                    , objRQ_Mst_GovIDType.Ft_WhereClause // strFt_WhereClause
                                                         //// Return:
                    , objRQ_Mst_GovIDType.Rt_Cols_Mst_GovIDType // Rt_Cols_Mst_GovIDType
                    );
                #endregion

                #region // GetData:
                if (!CmUtils.CMyDataSet.HasError(mdsResult))
                {
                    ////
                    DataTable dt_MySummaryTable = mdsResult.Tables["MySummaryTable"].Copy();
                    lst_MySummaryTable = TUtils.DataTableCmUtils.ToListof<MySummaryTable>(dt_MySummaryTable);
                    objRT_Mst_GovIDType.MySummaryTable = lst_MySummaryTable[0];

                    ////
                    DataTable dt_Mst_GovIDType = mdsResult.Tables["Mst_GovIDType"].Copy();
                    lst_Mst_GovIDType = TUtils.DataTableCmUtils.ToListof<Mst_GovIDType>(dt_Mst_GovIDType);
                    objRT_Mst_GovIDType.Lst_Mst_GovIDType = lst_Mst_GovIDType;
                    /////
                }
                #endregion

                // Return Good:
                return mdsResult;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsResult
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Write ReturnLog:
                //_cf.ProcessBizReturn(
                //	ref mdsResult // mdsFinal
                //	, strTid // strTid
                //	, strFunctionName // strFunctionName
                //	);
                #endregion
            }
        }

        public DataSet RptSv_Mst_GovIDType_Get(
           string strTid
           , string strGwUserCode
           , string strGwPassword
           , string strWAUserCode
           , string strWAUserPassword
           , ref ArrayList alParamsCoupleError
           //// Filter:
           , string strFt_RecordStart
           , string strFt_RecordCount
           , string strFt_WhereClause
           //// Return:
           , string strRt_Cols_Mst_GovIDType
           )
        {
            #region // Temp:
            DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            //int nTidSeq = 0;
            DateTime dtimeSys = DateTime.UtcNow;
            // bool bNeedTransaction = true;
            string strFunctionName = "RptSv_Mst_GovIDType_Get";
            string strErrorCodeDefault = TError.ErridnInventory.Mst_GovIDType_Get;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				//// Filter
				, "strFt_RecordStart", strFt_RecordStart
                , "strFt_RecordCount", strFt_RecordCount
                , "strFt_WhereClause", strFt_WhereClause
				//// Return
				, "strRt_Cols_Mst_GovIDType", strRt_Cols_Mst_GovIDType
                });
            #endregion

            try
            {
                #region // Init:
                //_cf.db.LogUserId = _cf.sinf.strUserCode;
                _cf.db.BeginTransaction();

                // Write RequestLog:
                _cf.ProcessBizReq_OutSide(
                    strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    , alParamsCoupleError // alParamsCoupleError
                    );

                // RptSv_Sys_User_CheckAuthentication:
                //RptSv_Sys_User_CheckAuthentication(
                //    ref alParamsCoupleError
                //    , strWAUserCode
                //    , strWAUserPassword
                //    );

                //// Check Access/Deny:
                //Sys_Access_CheckDenyV30(
                //    ref alParamsCoupleError
                //    , strWAUserCode
                //    , strFunctionName
                //    );
                #endregion

                #region // Mst_GovIDType_GetX:
                DataSet dsGetData = null;
                {
                    ////
                    Mst_GovIDType_GetX(
                        strTid // strTid
                        , strGwUserCode // strGwUserCode
                        , strGwPassword // strGwPassword
                        , strWAUserCode // strWAUserCode
                        , strWAUserPassword // strWAUserPassword
                        , ref alParamsCoupleError // alParamsCoupleError
                        , dtimeSys // dtimeSys
                                   ////
                        , strFt_RecordStart // strFt_RecordStart
                        , strFt_RecordCount // strFt_RecordCount
                        , strFt_WhereClause // strFt_WhereClause
                                            ////
                        , strRt_Cols_Mst_GovIDType // strRt_Cols_Mst_GovIDType
                                                   ////
                        , out dsGetData // dsGetData
                        );
                    ////
                    CmUtils.DataUtils.MoveDataTable(ref mdsFinal, ref dsGetData);
                }
                #endregion

                // Return Good:
                TDALUtils.DBUtils.RollbackSafety(_cf.db); // Always Rollback.
                mdsFinal.AcceptChanges();
                return mdsFinal;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Rollback:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);

                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsFinal
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Rollback and Release resources:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);
                TDALUtils.DBUtils.ReleaseAllSemaphore(_cf.db_Sys, true);

                // Write ReturnLog:
                _cf.ProcessBizReturn_OutSide(
                    ref mdsFinal // mdsFinal
                    , strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    );
                #endregion
            }
        }

        public DataSet WAS_Mst_GovIDType_Get(
         ref ArrayList alParamsCoupleError
         , RQ_Mst_GovIDType objRQ_Mst_GovIDType
         ////
         , out RT_Mst_GovIDType objRT_Mst_GovIDType
         )
        {
            #region // Temp:
            string strTid = objRQ_Mst_GovIDType.Tid;
            objRT_Mst_GovIDType = new RT_Mst_GovIDType();
            DataSet mdsResult = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            DateTime dtimeSys = DateTime.UtcNow;
            //DataSet mdsExec = null;
            //DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(objRQ_Mst_GovIDType.Tid);
            //int nTidSeq = 0;
            //bool bNeedTransaction = true;
            string strFunctionName = "WAS_Mst_GovIDType_Get";
            string strErrorCodeDefault = TError.ErridnInventory.WAS_Mst_GovIDType_Get;
            alParamsCoupleError.AddRange(new object[]{
                    "strFunctionName", strFunctionName
                    , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
                    });
            #endregion

            try
            {
                #region // Init:
                #endregion

                #region // Refine and Check Input:
                List<MySummaryTable> lst_MySummaryTable = new List<MySummaryTable>();

                List<Mst_GovIDType> lst_Mst_GovIDType = new List<Mst_GovIDType>();
                #endregion

                #region // WS_Mst_GovIDType_Get:
                mdsResult = Mst_GovIDType_Get(
                    objRQ_Mst_GovIDType.Tid // strTid
                    , objRQ_Mst_GovIDType.GwUserCode // strGwUserCode
                    , objRQ_Mst_GovIDType.GwPassword // strGwPassword
                    , objRQ_Mst_GovIDType.WAUserCode // strUserCode
                    , objRQ_Mst_GovIDType.WAUserPassword // strUserPassword
                    , ref alParamsCoupleError // alParamsCoupleError
                    //// Filter:
                    , objRQ_Mst_GovIDType.Ft_RecordStart // strFt_RecordStart
                    , objRQ_Mst_GovIDType.Ft_RecordCount // strFt_RecordCount
                    , objRQ_Mst_GovIDType.Ft_WhereClause // strFt_WhereClause
                    //// Return:
                    , objRQ_Mst_GovIDType.Rt_Cols_Mst_GovIDType // Rt_Cols_Mst_GovIDType
                    );
                #endregion

                #region // GetData:
                if (!CmUtils.CMyDataSet.HasError(mdsResult))
                {
                    ////
                    DataTable dt_MySummaryTable = mdsResult.Tables["MySummaryTable"].Copy();
                    lst_MySummaryTable = TUtils.DataTableCmUtils.ToListof<MySummaryTable>(dt_MySummaryTable);
                    objRT_Mst_GovIDType.MySummaryTable = lst_MySummaryTable[0];

                    ////
                    DataTable dt_Mst_GovIDType = mdsResult.Tables["Mst_GovIDType"].Copy();
                    lst_Mst_GovIDType = TUtils.DataTableCmUtils.ToListof<Mst_GovIDType>(dt_Mst_GovIDType);
                    objRT_Mst_GovIDType.Lst_Mst_GovIDType = lst_Mst_GovIDType;
                    /////
                }
                #endregion

                // Return Good:
                return mdsResult;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsResult
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Write ReturnLog:
                //_cf.ProcessBizReturn(
                //	ref mdsResult // mdsFinal
                //	, strTid // strTid
                //	, strFunctionName // strFunctionName
                //	);
                #endregion
            }
        }

        public DataSet Mst_GovIDType_Get(
           string strTid
           , string strGwUserCode
           , string strGwPassword
           , string strWAUserCode
           , string strWAUserPassword
           , ref ArrayList alParamsCoupleError
           //// Filter:
           , string strFt_RecordStart
           , string strFt_RecordCount
           , string strFt_WhereClause
           //// Return:
           , string strRt_Cols_Mst_GovIDType
           )
        {
            #region // Temp:
            DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
			Stopwatch stopWatchFunc = new Stopwatch();
			//int nTidSeq = 0;
			DateTime dtimeSys = DateTime.UtcNow;
            // bool bNeedTransaction = true;
            string strFunctionName = "Mst_GovIDType_Get";
            string strErrorCodeDefault = TError.ErridnInventory.Mst_GovIDType_Get;
			ArrayList alParamsCoupleSW = new ArrayList();
			alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				//// Filter
				, "strFt_RecordStart", strFt_RecordStart
                , "strFt_RecordCount", strFt_RecordCount
                , "strFt_WhereClause", strFt_WhereClause
				//// Return
				, "strRt_Cols_Mst_GovIDType", strRt_Cols_Mst_GovIDType
                });
            #endregion

            try
            {
				#region // SW:				
				stopWatchFunc.Start();
				alParamsCoupleSW.AddRange(new object[]{
					"strFunctionName", strFunctionName
					, "stopWatchFunc.Start", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
					});
				#endregion

				#region // Init:
				//_cf.db.LogUserId = _cf.sinf.strUserCode;
				_cf.db.BeginTransaction();

                // Write RequestLog:
                _cf.ProcessBizReq_OutSide(
                    strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    , alParamsCoupleError // alParamsCoupleError
                    );

                // Sys_User_CheckAuthentication:
                //Sys_User_CheckAuthentication(
                //    ref alParamsCoupleError
                //    , strWAUserCode
                //    , strWAUserPassword
                //    );

                //// Check Access/Deny:
                //Sys_Access_CheckDenyV30(
                //    ref alParamsCoupleError
                //    , strWAUserCode
                //    , strFunctionName
                //    );
                #endregion

                #region // Mst_GovIDType_GetX:
                DataSet dsGetData = null;
                {
                    ////
                    Mst_GovIDType_GetX(
                        strTid // strTid
                        , strGwUserCode // strGwUserCode
                        , strGwPassword // strGwPassword
                        , strWAUserCode // strWAUserCode
                        , strWAUserPassword // strWAUserPassword
                        , ref alParamsCoupleError // alParamsCoupleError
                        , dtimeSys // dtimeSys
                        ////
                        , strFt_RecordStart // strFt_RecordStart
                        , strFt_RecordCount // strFt_RecordCount
                        , strFt_WhereClause // strFt_WhereClause
                        ////
                        , strRt_Cols_Mst_GovIDType // strRt_Cols_Mst_GovIDType
                        ////
                        , out dsGetData // dsGetData
                        );
                    ////
                    CmUtils.DataUtils.MoveDataTable(ref mdsFinal, ref dsGetData);
                }
                #endregion

                // Return Good:
                TDALUtils.DBUtils.RollbackSafety(_cf.db); // Always Rollback.
                mdsFinal.AcceptChanges();
                return mdsFinal;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Rollback:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);

                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsFinal
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Rollback and Release resources:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);
                TDALUtils.DBUtils.ReleaseAllSemaphore(_cf.db_Sys, true);

				stopWatchFunc.Stop();
				alParamsCoupleSW.AddRange(new object[]{
					"strFunctionName", strFunctionName
					, "stopWatchFunc.Stop", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
					, "stopWatchFunc.ElapsedMilliseconds", stopWatchFunc.ElapsedMilliseconds
					});

				// Write ReturnLog:
				_cf.ProcessBizReturn_OutSide(
                    ref mdsFinal // mdsFinal
                    , strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
					, alParamsCoupleSW // alParamsCoupleSW
					);
                #endregion
            }
        }

        private void Mst_GovIDType_GetX(
          string strTid
          , string strGwUserCode
          , string strGwPassword
          , string strWAUserCode
          , string strWAUserPassword
          , ref ArrayList alParamsCoupleError
          , DateTime dtimeSys
          //// Filter:
          , string strFt_RecordStart
          , string strFt_RecordCount
          , string strFt_WhereClause
          //// Return:
          , string strRt_Cols_Mst_GovIDType
          ////
          , out DataSet dsGetData
         )
        {
            #region // Temp:
            //DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            //DateTime dtimeSys = DateTime.UtcNow;
            //bool bNeedTransaction = true;
            string strFunctionName = "Mst_GovIDType_Get";
            //string strErrorCodeDefault = TError.ErrHTCNM.Mst_GovIDType_Get;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
                    });
            #endregion

            #region // Check:
            //// Refine:
            long nFilterRecordStart = Convert.ToInt64(strFt_RecordStart);
            long nFilterRecordEnd = nFilterRecordStart + Convert.ToInt64(strFt_RecordCount) - 1;
            bool bGet_Mst_GovIDType = (strRt_Cols_Mst_GovIDType != null && strRt_Cols_Mst_GovIDType.Length > 0);

            //// drAbilityOfUser:
            //DataRow drAbilityOfUser = myCache_ViewAbility_GetUserInfo(strWAUserCode);

            #endregion

            #region // Build Sql:
            ////
            ArrayList alParamsCoupleSql = new ArrayList();
            alParamsCoupleSql.AddRange(new object[] {
                    "@nFilterRecordStart", nFilterRecordStart
                    , "@nFilterRecordEnd", nFilterRecordEnd
                    });
            ////
            //myCache_ViewAbility_GetDealerInfo(drAbilityOfUser);
            ////
            string strSqlGetData = CmUtils.StringUtils.Replace(@"
						---- #tbl_Mst_GovIDType_Filter_Draft:
						select distinct
							identity(bigint, 0, 1) MyIdxSeq
							, mgi.GovIDType
						into #tbl_Mst_GovIDType_Filter_Draft
						from Mst_GovIDType mgi --//[mylock]
						where (1=1)
							zzB_Where_strFilter_zzE
						order by mgi.GovIDType asc
						;

						---- Summary:
						select Count(0) MyCount from #tbl_Mst_GovIDType_Filter_Draft t --//[mylock]
						;

						---- #tbl_Mst_GovIDType_Filter:
						select
							t.*
						into #tbl_Mst_GovIDType_Filter
						from #tbl_Mst_GovIDType_Filter_Draft t --//[mylock]
						where
							(t.MyIdxSeq >= @nFilterRecordStart)
							and (t.MyIdxSeq <= @nFilterRecordEnd)
						;

						-------- Mst_GovIDType --------:
						zzB_Select_Mst_GovIDType_zzE
						----------------------------------------

						---- Clear for debug:
						--drop table #tbl_Mst_GovIDType_Filter_Draft;
						--drop table #tbl_Mst_GovIDType_Filter;
					"
                );
            ////
            string zzB_Select_Mst_GovIDType_zzE = "-- Nothing.";
            if (bGet_Mst_GovIDType)
            {
                #region // bGet_Mst_GovIDType:
                zzB_Select_Mst_GovIDType_zzE = CmUtils.StringUtils.Replace(@"
							---- Mst_GovIDType:
							select
								t.MyIdxSeq
								, mgi.*
							from #tbl_Mst_GovIDType_Filter t --//[mylock]
								inner join Mst_GovIDType mgi --//[mylock]
									on t.GovIDType = mgi.GovIDType
							order by t.MyIdxSeq asc
							;
						"
                    );
                #endregion
            }
            ////
            string zzB_Where_strFilter_zzE = "";
            {
                Hashtable htSpCols = new Hashtable();
                {
                    #region // htSpCols:
                    ////
                    TUtils.CUtils.MyBuildHTSupportedColumns(
                        _cf.db // db
                        , ref htSpCols // htSupportedColumns
                        , "Mst_GovIDType" // strTableNameDB
                        , "Mst_GovIDType." // strPrefixStd
                        , "mgi." // strPrefixAlias
                        );
                    ////
                    #endregion
                }
                zzB_Where_strFilter_zzE = CmUtils.SqlUtils.BuildWhere(
                    htSpCols // htSpCols
                    , strFt_WhereClause // strClause
                    , "@p_" // strParamPrefix
                    , ref alParamsCoupleSql // alParamsCoupleSql
                    );
                zzB_Where_strFilter_zzE = (zzB_Where_strFilter_zzE.Length <= 0 ? "" : string.Format(" and ({0})", zzB_Where_strFilter_zzE));
                alParamsCoupleError.AddRange(new object[]{
                        "zzB_Where_strFilter_zzE", zzB_Where_strFilter_zzE
                        });
            }
            ////
            strSqlGetData = CmUtils.StringUtils.Replace(
                strSqlGetData
                , "zzB_Where_strFilter_zzE", zzB_Where_strFilter_zzE
                , "zzB_Select_Mst_GovIDType_zzE", zzB_Select_Mst_GovIDType_zzE
                );
            #endregion

            #region // Get Data:
            dsGetData = _cf.db.ExecQuery(
                strSqlGetData
                , alParamsCoupleSql.ToArray()
                );
            int nIdxTable = 0;
            dsGetData.Tables[nIdxTable++].TableName = "MySummaryTable";
            if (bGet_Mst_GovIDType)
            {
                dsGetData.Tables[nIdxTable++].TableName = "Mst_GovIDType";
            }
            #endregion
        }
        #endregion

        #region // Mst_SourceInvoice:
        private void Mst_SourceInvoice_CheckDB(
            ref ArrayList alParamsCoupleError
            , object objSourceInvoiceCode
            , string strFlagExistToCheck
            , string strFlagActiveListToCheck
            , out DataTable dtDB_Mst_Province
            )
        {
            // GetInfo:
            string strSqlExec = CmUtils.StringUtils.Replace(@"
					select top 1
						t.*
					from Mst_SourceInvoice t --//[mylock]
					where (1=1)
						and t.SourceInvoiceCode = @objSourceInvoiceCode
					;
				");
            dtDB_Mst_Province = _cf.db.ExecQuery(
                strSqlExec
                , "@objSourceInvoiceCode", objSourceInvoiceCode
                ).Tables[0];
            dtDB_Mst_Province.TableName = "Mst_SourceInvoice";

            // strFlagExistToCheck:
            if (strFlagExistToCheck.Length > 0)
            {
                if (CmUtils.StringUtils.StringEqual(strFlagExistToCheck, TConst.Flag.Active) && dtDB_Mst_Province.Rows.Count < 1)
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.SourceInvoiceCode", objSourceInvoiceCode
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Mst_SourceInvoice_CheckDB_SourceInvoiceNotFound
                        , null
                        , alParamsCoupleError.ToArray()
                        );
                }
                if (CmUtils.StringUtils.StringEqual(strFlagExistToCheck, TConst.Flag.Inactive) && dtDB_Mst_Province.Rows.Count > 0)
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.SourceInvoiceCode", objSourceInvoiceCode
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Mst_SourceInvoice_CheckDB_SourceInvoiceExist
                        , null
                        , alParamsCoupleError.ToArray()
                        );
                }
            }

            // strFlagActiveListToCheck:
            if (strFlagActiveListToCheck.Length > 0 && !strFlagActiveListToCheck.Contains(Convert.ToString(dtDB_Mst_Province.Rows[0]["FlagActive"])))
            {
                alParamsCoupleError.AddRange(new object[]{
                    "Check.SourceInvoiceCode", objSourceInvoiceCode
                    , "Check.strFlagActiveListToCheck", strFlagActiveListToCheck
                    , "DB.FlagActive", dtDB_Mst_Province.Rows[0]["FlagActive"]
                    });
                throw CmUtils.CMyException.Raise(
                    TError.ErridnInventory.Mst_SourceInvoice_CheckDB_CheckDB_InvoiceStatusNotMatched
                    , null
                    , alParamsCoupleError.ToArray()
                    );
            }
        }
        #endregion

        #region // Mst_CustomerNNT:
        private void Mst_CustomerNNT_CheckDB(
            ref ArrayList alParamsCoupleError
            , object objCustomerNNTCode
            , object objMST
            , string strFlagExistToCheck
            , string strFlagActiveListToCheck
            , out DataTable dtDB_Mst_CustomerNNT
            )
        {
            // GetInfo:
            string strSqlExec = CmUtils.StringUtils.Replace(@"
					select top 1
						t.*
					from Mst_CustomerNNT t --//[mylock]
					where (1=1)
						and t.CustomerNNTCode = @objCustomerNNTCode
						and t.MST = @objMST
					;
				");
            dtDB_Mst_CustomerNNT = _cf.db.ExecQuery(
                strSqlExec
                , "@objCustomerNNTCode", objCustomerNNTCode
                , "@objMST", objMST
                ).Tables[0];
            dtDB_Mst_CustomerNNT.TableName = "Mst_CustomerNNT";

            // strFlagExistToCheck:
            if (strFlagExistToCheck.Length > 0)
            {
                if (CmUtils.StringUtils.StringEqual(strFlagExistToCheck, TConst.Flag.Active) && dtDB_Mst_CustomerNNT.Rows.Count < 1)
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.CustomerNNTCode", objCustomerNNTCode
                        , "Check.MST", objMST
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Mst_CustomerNNT_CheckDB_CustomerNNTNotFound
                        , null
                        , alParamsCoupleError.ToArray()
                        );
                }
                if (CmUtils.StringUtils.StringEqual(strFlagExistToCheck, TConst.Flag.Inactive) && dtDB_Mst_CustomerNNT.Rows.Count > 0)
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.CustomerNNTCode", objCustomerNNTCode
                        , "Check.MST", objMST
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Mst_CustomerNNT_CheckDB_CustomerNNTExist
                        , null
                        , alParamsCoupleError.ToArray()
                        );
                }
            }

            // strFlagActiveListToCheck:
            if (strFlagActiveListToCheck.Length > 0 && !strFlagActiveListToCheck.Contains(Convert.ToString(dtDB_Mst_CustomerNNT.Rows[0]["FlagActive"])))
            {
                alParamsCoupleError.AddRange(new object[]{
                    "Check.CustomerNNTCode", objCustomerNNTCode
                    , "Check.MST", objMST
                    , "Check.strFlagActiveListToCheck", strFlagActiveListToCheck
                    , "DB.FlagActive", dtDB_Mst_CustomerNNT.Rows[0]["FlagActive"]
                    });
                throw CmUtils.CMyException.Raise(
                    TError.ErridnInventory.Mst_CustomerNNT_CheckDB_FlagActiveNotMatched
                    , null
                    , alParamsCoupleError.ToArray()
                    );
            }
        }
        public DataSet WAS_Mst_CustomerNNT_Get(
            ref ArrayList alParamsCoupleError
            , RQ_Mst_CustomerNNT objRQ_Mst_CustomerNNT
            ////
            , out RT_Mst_CustomerNNT objRT_Mst_CustomerNNT
            )
        {
            #region // Temp:
            string strTid = objRQ_Mst_CustomerNNT.Tid;
            objRT_Mst_CustomerNNT = new RT_Mst_CustomerNNT();
            DataSet mdsResult = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            DateTime dtimeSys = DateTime.UtcNow;
            //DataSet mdsExec = null;
            //DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(objRQ_Mst_CustomerNNT.Tid);
            //int nTidSeq = 0;
            //bool bNeedTransaction = true;
            string strFunctionName = "WAS_Mst_CustomerNNT_Get";
            string strErrorCodeDefault = TError.ErridnInventory.WAS_Mst_CustomerNNT_Get;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
				});
            #endregion

            try
            {
                #region // Init:
                #endregion

                #region // Refine and Check Input:
                List<MySummaryTable> lst_MySummaryTable = new List<MySummaryTable>();
                List<Mst_CustomerNNT> lst_Mst_CustomerNNT = new List<Mst_CustomerNNT>();
                bool bGet_Mst_CustomerNNT = (objRQ_Mst_CustomerNNT.Rt_Cols_Mst_CustomerNNT != null && objRQ_Mst_CustomerNNT.Rt_Cols_Mst_CustomerNNT.Length > 0);
                #endregion

                #region // WS_Mst_CustomerNNT_Get:
                mdsResult = Mst_CustomerNNT_Get(
                    objRQ_Mst_CustomerNNT.Tid // strTid
                    , objRQ_Mst_CustomerNNT.GwUserCode // strGwUserCode
                    , objRQ_Mst_CustomerNNT.GwPassword // strGwPassword
                    , objRQ_Mst_CustomerNNT.WAUserCode // strUserCode
                    , objRQ_Mst_CustomerNNT.WAUserPassword // strUserPassword
                    , ref alParamsCoupleError // alParamsCoupleError
                                              //// Filter:
                    , objRQ_Mst_CustomerNNT.Ft_RecordStart // strFt_RecordStart
                    , objRQ_Mst_CustomerNNT.Ft_RecordCount // strFt_RecordCount
                    , objRQ_Mst_CustomerNNT.Ft_WhereClause // strFt_WhereClause
                                                        //// Return:
                    , objRQ_Mst_CustomerNNT.Rt_Cols_Mst_CustomerNNT // strRt_Cols_Mst_CustomerNNT
                    );
                #endregion

                #region // GetData:
                if (!CmUtils.CMyDataSet.HasError(mdsResult))
                {
                    ////
                    DataTable dt_MySummaryTable = mdsResult.Tables["MySummaryTable"].Copy();
                    lst_MySummaryTable = TUtils.DataTableCmUtils.ToListof<MySummaryTable>(dt_MySummaryTable);
                    objRT_Mst_CustomerNNT.MySummaryTable = lst_MySummaryTable[0];
                    ////
                    if (bGet_Mst_CustomerNNT)
                    {
                        DataTable dt_Mst_CustomerNNT = mdsResult.Tables["Mst_CustomerNNT"].Copy();
                        lst_Mst_CustomerNNT = TUtils.DataTableCmUtils.ToListof<Mst_CustomerNNT>(dt_Mst_CustomerNNT);
                        objRT_Mst_CustomerNNT.Lst_Mst_CustomerNNT = lst_Mst_CustomerNNT;

                    }
                    /////
                }
                #endregion

                // Return Good:
                return mdsResult;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsResult
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Write ReturnLog:
                //_cf.ProcessBizReturn(
                //	ref mdsResult // mdsFinal
                //	, strTid // strTid
                //	, strFunctionName // strFunctionName
                //	);
                #endregion
            }
        }
        public DataSet Mst_CustomerNNT_Get(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            //// Filter:
            , string strFt_RecordStart
            , string strFt_RecordCount
            , string strFt_WhereClause
            //// Return:
            , string strRt_Cols_Mst_CustomerNNT
            )
        {
            #region // Temp:
            DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            Stopwatch stopWatchFunc = new Stopwatch();
            //int nTidSeq = 0;
            DateTime dtimeSys = DateTime.UtcNow;
            string strFunctionName = "Mst_CustomerNNT_Get";
            string strErrorCodeDefault = TError.ErridnInventory.Mst_CustomerNNT_Get;
            ArrayList alParamsCoupleSW = new ArrayList();
            alParamsCoupleError.AddRange(new object[]{
                    "strFunctionName", strFunctionName
                    , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
			        //// Filter
					, "strFt_RecordStart", strFt_RecordStart
                    , "strFt_RecordCount", strFt_RecordCount
                    , "strFt_WhereClause", strFt_WhereClause
			        //// Return
					, "strRt_Cols_Mst_CustomerNNT", strRt_Cols_Mst_CustomerNNT
                    });
            #endregion

            try
            {
                #region // SW:				
                stopWatchFunc.Start();
                alParamsCoupleSW.AddRange(new object[]{
                    "strFunctionName", strFunctionName
                    , "stopWatchFunc.Start", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
                    });
                #endregion

                #region // Init:
                //_cf.db.LogUserId = _cf.sinf.strUserCode;
                _cf.db.BeginTransaction();

                // Write RequestLog:
                _cf.ProcessBizReq_OutSide(
                    strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    , alParamsCoupleError // alParamsCoupleError
                    );

                // Sys_User_CheckAuthentication:
                //Sys_User_CheckAuthentication(
                //    ref alParamsCoupleError
                //    , strWAUserCode
                //    , strWAUserPassword
                //    );

                // Check Access/Deny:
                Sys_Access_CheckDenyV30(
                    ref alParamsCoupleError
                    , strWAUserCode
                    , strFunctionName
                    );
                #endregion

                #region // Mst_CustomerNNT_GetX:
                DataSet dsGetData = null;
                {
                    ////
                    Mst_CustomerNNT_GetX(
                        strTid // strTid
                        , strGwUserCode // strGwUserCode
                        , strGwPassword // strGwPassword
                        , strWAUserCode // strWAUserCode
                        , strWAUserPassword // strWAUserPassword
                        , ref alParamsCoupleError // alParamsCoupleError
                        , dtimeSys // dtimeSys
                                   ////
                        , strFt_RecordStart // strFt_RecordStart
                        , strFt_RecordCount // strFt_RecordCount
                        , strFt_WhereClause // strFt_WhereClause
                                            ////
                        , strRt_Cols_Mst_CustomerNNT // strRt_Cols_Mst_CustomerNNT
                                                  ////
                        , out dsGetData // dsGetData
                        );
                    ////
                    CmUtils.DataUtils.MoveDataTable(ref mdsFinal, ref dsGetData);
                }
                #endregion

                // Return Good:
                TDALUtils.DBUtils.RollbackSafety(_cf.db); // Always Rollback.
                mdsFinal.AcceptChanges();
                return mdsFinal;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Rollback:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);

                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsFinal
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Rollback and Release resources:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);
                TDALUtils.DBUtils.ReleaseAllSemaphore(_cf.db_Sys, true);

                stopWatchFunc.Stop();
                alParamsCoupleSW.AddRange(new object[]{
                    "strFunctionName", strFunctionName
                    , "stopWatchFunc.Stop", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
                    , "stopWatchFunc.ElapsedMilliseconds", stopWatchFunc.ElapsedMilliseconds
                    });

                // Write ReturnLog:
                _cf.ProcessBizReturn_OutSide(
                    ref mdsFinal // mdsFinal
                    , strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    , alParamsCoupleSW // alParamsCoupleSW
                    );
                #endregion
            }
        }
        public DataSet WAS_Mst_CustomerNNT_Create(
            ref ArrayList alParamsCoupleError
            , RQ_Mst_CustomerNNT objRQ_Mst_CustomerNNT
            ////
            , out RT_Mst_CustomerNNT objRT_Mst_CustomerNNT
            )
        {
            #region // Temp:
            string strTid = objRQ_Mst_CustomerNNT.Tid;
            objRT_Mst_CustomerNNT = new RT_Mst_CustomerNNT();
            DataSet mdsResult = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            DateTime dtimeSys = DateTime.UtcNow;
            //DataSet mdsExec = null;
            //DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(objRQ_Mst_CustomerNNT.Tid);
            //int nTidSeq = 0;
            //bool bNeedTransaction = true;
            string strFunctionName = "WAS_Mst_CustomerNNT_Create";
            string strErrorCodeDefault = TError.ErridnInventory.WAS_Mst_CustomerNNT_Create;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
				});
            #endregion

            try
            {
                #region // Init:
                #endregion

                #region // Refine and Check Input:
                List<Mst_CustomerNNT> lst_Mst_CustomerNNT = new List<Mst_CustomerNNT>();
                #endregion

                #region // WS_Mst_CustomerNNT_Create:
                mdsResult = Mst_CustomerNNT_Create(
                    objRQ_Mst_CustomerNNT.Tid // strTid
                    , objRQ_Mst_CustomerNNT.GwUserCode // strGwUserCode
                    , objRQ_Mst_CustomerNNT.GwPassword // strGwPassword
                    , objRQ_Mst_CustomerNNT.WAUserCode // strUserCode
                    , objRQ_Mst_CustomerNNT.WAUserPassword // strUserPassword
                    , ref alParamsCoupleError // alParamsCoupleError
                                              ////
                    , objRQ_Mst_CustomerNNT.Mst_CustomerNNT.CustomerNNTCode // objCustomerNNTCode
                    , objRQ_Mst_CustomerNNT.Mst_CustomerNNT.MST // objMST
                    , objRQ_Mst_CustomerNNT.Mst_CustomerNNT.AccCenterCode // objAccCenterCode
                    , objRQ_Mst_CustomerNNT.Mst_CustomerNNT.CustomerNNTName // objCustomerNNTName
                    , objRQ_Mst_CustomerNNT.Mst_CustomerNNT.CustomerNNTType // objCustomerNNTType
                    , objRQ_Mst_CustomerNNT.Mst_CustomerNNT.CustomerNNTAddress // objCustomerNNTAddress
                    , objRQ_Mst_CustomerNNT.Mst_CustomerNNT.CustomerNNTEmail // objCustomerNNTEmail
                    , objRQ_Mst_CustomerNNT.Mst_CustomerNNT.CustomerNNTPhone // objCustomerNNTPhone
                    , objRQ_Mst_CustomerNNT.Mst_CustomerNNT.CustomerNNTFax // objCustomerNNTFax
                    , objRQ_Mst_CustomerNNT.Mst_CustomerNNT.ContactName // objContactName
                    , objRQ_Mst_CustomerNNT.Mst_CustomerNNT.ContactPhone // objContactPhone
                    , objRQ_Mst_CustomerNNT.Mst_CustomerNNT.ContactEmail // objContactEmail
                    , objRQ_Mst_CustomerNNT.Mst_CustomerNNT.CustomerNNTDOB // objCustomerNNTDOB
                    , objRQ_Mst_CustomerNNT.Mst_CustomerNNT.CustomerMST // objCustomerMST
                    , objRQ_Mst_CustomerNNT.Mst_CustomerNNT.ProvinceCode // objProvinceCode
                    , objRQ_Mst_CustomerNNT.Mst_CustomerNNT.DistrictCode // objDistrictCode
                    , objRQ_Mst_CustomerNNT.Mst_CustomerNNT.AccNo // objAccNo
                    , objRQ_Mst_CustomerNNT.Mst_CustomerNNT.BankName // objBankName
                    , objRQ_Mst_CustomerNNT.Mst_CustomerNNT.GovIDType // objGovIDType
                    , objRQ_Mst_CustomerNNT.Mst_CustomerNNT.GovID // objGovID
                    , objRQ_Mst_CustomerNNT.Mst_CustomerNNT.Remark // objRemark
                    );
                #endregion

                // Return Good:
                return mdsResult;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsResult
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Write ReturnLog:
                //_cf.ProcessBizReturn(
                //	ref mdsResult // mdsFinal
                //	, strTid // strTid
                //	, strFunctionName // strFunctionName
                //	);
                #endregion
            }
        }
        public DataSet Mst_CustomerNNT_Create(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            ////
            , object objCustomerNNTCode
            , object objMST
            , object objAccCenterCode
            , object objCustomerNNTName
            , object objCustomerNNTType
            , object objCustomerNNTAddress
            , object objCustomerNNTEmail
            , object objCustomerNNTPhone
            , object objCustomerNNTFax
            , object objContactName
            , object objContactPhone
            , object objContactEmail
            , object objCustomerNNTDOB
            , object objCustomerMST
            , object objProvinceCode
            , object objDistrictCode
            , object objAccNo
            , object objBankName
            , object objGovIDType
            , object objGovID
            , object objRemark
            )
        {
            #region // Temp:
            DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            Stopwatch stopWatchFunc = new Stopwatch();
            //int nTidSeq = 0;
            DateTime dtimeSys = DateTime.UtcNow;
            string strFunctionName = "Mst_CustomerNNT_Create";
            string strErrorCodeDefault = TError.ErridnInventory.Mst_CustomerNNT_Create;
            ArrayList alParamsCoupleSW = new ArrayList();
            alParamsCoupleError.AddRange(new object[]{
                    "strFunctionName", strFunctionName
                    , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
			        ////
					, "objCustomerNNTCode", objCustomerNNTCode
                    , "objMST", objMST
                    , "objAccCenterCode", objAccCenterCode
                    , "objCustomerNNTName", objCustomerNNTName
                    , "objCustomerNNTType", objCustomerNNTType
                    , "objCustomerNNTAddress", objCustomerNNTAddress
                    , "objCustomerNNTEmail", objCustomerNNTEmail
                    , "objCustomerNNTPhone", objCustomerNNTPhone
                    , "objCustomerNNTFax", objCustomerNNTFax
                    , "objContactName", objContactName
                    , "objContactPhone", objContactPhone
                    , "objContactEmail", objContactEmail
                    , "objCustomerNNTDOB", objCustomerNNTDOB
                    , "objCustomerMST", objCustomerMST
                    , "objProvinceCode", objProvinceCode
                    , "objDistrictCode", objDistrictCode
                    , "objAccNo", objAccNo
                    , "objBankName", objBankName
                    , "objGovIDType", objGovIDType
                    , "objGovID", objGovID
                    , "objRemark", objRemark
                    });
            #endregion

            try
            {
                #region // SW:				
                stopWatchFunc.Start();
                alParamsCoupleSW.AddRange(new object[]{
                    "strFunctionName", strFunctionName
                    , "stopWatchFunc.Start", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
                    });
                #endregion

                #region // Init:
                //_cf.db.LogUserId = _cf.sinf.strUserCode;
                _cf.db.BeginTransaction();

                // Write RequestLog:
                _cf.ProcessBizReq_OutSide(
                    strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    , alParamsCoupleError // alParamsCoupleError
                    );

                // Sys_User_CheckAuthentication:
                //Sys_User_CheckAuthentication(
                //    ref alParamsCoupleError
                //    , strWAUserCode
                //    , strWAUserPassword
                //    );

                // Check Access/Deny:
                Sys_Access_CheckDenyV30(
                    ref alParamsCoupleError
                    , strWAUserCode
                    , strFunctionName
                    );
                #endregion

                #region // Mst_CustomerNNT_CreateX:
                //DataSet dsGetData = null;
                {
                    Mst_CustomerNNT_CreateX(
                        strTid // strTid
                        , strGwUserCode // strGwUserCode
                        , strGwPassword // strGwPassword
                        , strWAUserCode // strWAUserCode
                        , strWAUserPassword // strWAUserPassword
                        , ref alParamsCoupleError // alParamsCoupleError
                        , dtimeSys // dtimeSys
                                   ////
                        , objCustomerNNTCode // objCustomerNNTCode
                        , objMST // objMST
                        , objAccCenterCode // objAccCenterCode
                        , objCustomerNNTName // objCustomerNNTName
                        , objCustomerNNTType // objCustomerNNTType
                        , objCustomerNNTAddress // objCustomerNNTAddress
                        , objCustomerNNTEmail // objCustomerNNTEmail
                        , objCustomerNNTPhone // objCustomerNNTPhone
                        , objCustomerNNTFax // objCustomerNNTFax
                        , objContactName // objContactName
                        , objContactPhone  // objContactPhone 
                        , objContactEmail // objContactEmail
                        , objCustomerNNTDOB // objCustomerNNTDOB
                        , objCustomerMST // objCustomerMST
                        , objProvinceCode // objProvinceCode
                        , objDistrictCode // objDistrictCode
                        , objAccNo // objAccNo
                        , objBankName // objBankName
                        , objGovIDType // objGovIDType
                        , objGovID // objGovID
                        , objRemark   // objRemark                
                        );
                }
                ////
                //CmUtils.DataUtils.MoveDataTable(ref mdsFinal, ref dsGetData);
                #endregion

                // Return Good:
                TDALUtils.DBUtils.CommitSafety(_cf.db);
                mdsFinal.AcceptChanges();
                return mdsFinal;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Rollback:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);

                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsFinal
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Rollback and Release resources:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);
                TDALUtils.DBUtils.ReleaseAllSemaphore(_cf.db_Sys, true);

                stopWatchFunc.Stop();
                alParamsCoupleSW.AddRange(new object[]{
                    "strFunctionName", strFunctionName
                    , "stopWatchFunc.Stop", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
                    , "stopWatchFunc.ElapsedMilliseconds", stopWatchFunc.ElapsedMilliseconds
                    });

                // Write ReturnLog:
                _cf.ProcessBizReturn_OutSide(
                    ref mdsFinal // mdsFinal
                    , strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    , alParamsCoupleSW // alParamsCoupleSW
                    );
                #endregion
            }
        }
        public DataSet WAS_Mst_CustomerNNT_Update(
            ref ArrayList alParamsCoupleError
            , RQ_Mst_CustomerNNT objRQ_Mst_CustomerNNT
            ////
            , out RT_Mst_CustomerNNT objRT_Mst_CustomerNNT
            )
        {
            #region // Temp:
            string strTid = objRQ_Mst_CustomerNNT.Tid;
            objRT_Mst_CustomerNNT = new RT_Mst_CustomerNNT();
            DataSet mdsResult = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            DateTime dtimeSys = DateTime.UtcNow;
            //DataSet mdsExec = null;
            //DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(objRQ_Mst_CustomerNNT.Tid);
            //int nTidSeq = 0;
            //bool bNeedTransaction = true;
            string strFunctionName = "WAS_Mst_CustomerNNT_Update";
            string strErrorCodeDefault = TError.ErridnInventory.WAS_Mst_CustomerNNT_Update;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
				});
            #endregion

            try
            {
                #region // Init:
                #endregion

                #region // Refine and Check Input:
                List<Mst_CustomerNNT> lst_Mst_CustomerNNT = new List<Mst_CustomerNNT>();
                #endregion

                #region // Mst_CustomerNNT_Update:
                mdsResult = Mst_CustomerNNT_Update(
                    objRQ_Mst_CustomerNNT.Tid // strTid
                    , objRQ_Mst_CustomerNNT.GwUserCode // strGwUserCode
                    , objRQ_Mst_CustomerNNT.GwPassword // strGwPassword
                    , objRQ_Mst_CustomerNNT.WAUserCode // strUserCode
                    , objRQ_Mst_CustomerNNT.WAUserPassword // strUserPassword
                    , ref alParamsCoupleError // alParamsCoupleError
                                              ////
                    , objRQ_Mst_CustomerNNT.Mst_CustomerNNT.CustomerNNTCode // objCustomerNNTCode
                    , objRQ_Mst_CustomerNNT.Mst_CustomerNNT.MST // objMST
                    , objRQ_Mst_CustomerNNT.Mst_CustomerNNT.AccCenterCode // objAccCenterCode
                    , objRQ_Mst_CustomerNNT.Mst_CustomerNNT.CustomerNNTName // objCustomerNNTName
                    , objRQ_Mst_CustomerNNT.Mst_CustomerNNT.CustomerNNTType // objCustomerNNTType
                    , objRQ_Mst_CustomerNNT.Mst_CustomerNNT.CustomerNNTAddress // objCustomerNNTAddress
                    , objRQ_Mst_CustomerNNT.Mst_CustomerNNT.CustomerNNTEmail // objCustomerNNTEmail
                    , objRQ_Mst_CustomerNNT.Mst_CustomerNNT.CustomerNNTPhone // objCustomerNNTPhone
                    , objRQ_Mst_CustomerNNT.Mst_CustomerNNT.CustomerNNTFax // objCustomerNNTFax
                    , objRQ_Mst_CustomerNNT.Mst_CustomerNNT.ContactName // objContactName
                    , objRQ_Mst_CustomerNNT.Mst_CustomerNNT.ContactPhone // objContactPhone
                    , objRQ_Mst_CustomerNNT.Mst_CustomerNNT.ContactEmail // objContactEmail
                    , objRQ_Mst_CustomerNNT.Mst_CustomerNNT.CustomerNNTDOB // objCustomerNNTDOB
                    , objRQ_Mst_CustomerNNT.Mst_CustomerNNT.CustomerMST // objCustomerMST
                    , objRQ_Mst_CustomerNNT.Mst_CustomerNNT.ProvinceCode // objProvinceCode
                    , objRQ_Mst_CustomerNNT.Mst_CustomerNNT.DistrictCode // objDistrictCode
                    , objRQ_Mst_CustomerNNT.Mst_CustomerNNT.AccNo // objAccNo
                    , objRQ_Mst_CustomerNNT.Mst_CustomerNNT.BankName // objBankName
                    , objRQ_Mst_CustomerNNT.Mst_CustomerNNT.GovIDType // objGovIDType
                    , objRQ_Mst_CustomerNNT.Mst_CustomerNNT.GovID // objGovID
                    , objRQ_Mst_CustomerNNT.Mst_CustomerNNT.Remark // objRemark
                    , objRQ_Mst_CustomerNNT.Mst_CustomerNNT.FlagActive // objFlagActive
                                                                 ////
                    , objRQ_Mst_CustomerNNT.Ft_Cols_Upd // Ft_Cols_Upd
                    );
                #endregion

                // Return Good:
                return mdsResult;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsResult
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Write ReturnLog:
                //_cf.ProcessBizReturn(
                //	ref mdsResult // mdsFinal
                //	, strTid // strTid
                //	, strFunctionName // strFunctionName
                //	);
                #endregion
            }
        }
        public DataSet Mst_CustomerNNT_Update(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            //// 
            , object objCustomerNNTCode
            , object objMST // objMST
            , object objAccCenterCode
            , object objCustomerNNTName
            , object objCustomerNNTType
            , object objCustomerNNTAddress
            , object objCustomerNNTEmail
            , object objCustomerNNTPhone
            , object objCustomerNNTFax
            , object objContactName
            , object objContactPhone
            , object objContactEmail
            , object objCustomerDOB
            , object objCustomerMST
            , object objProvinceCode
            , object objDistrictCode
            , object objAccNo
            , object objBankName
            , object objGovIDType
            , object objGovID
            , object objRemark
            , object objFlagActive
            ////
            , object objFt_Cols_Upd
            )
        {
            #region // Temp:
            DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            //int nTidSeq = 0;
            DateTime dtimeSys = DateTime.UtcNow;
            string strFunctionName = "Mst_CustomerNNT_Update";
            string strErrorCodeDefault = TError.ErridnInventory.Mst_CustomerNNT_Update;
            alParamsCoupleError.AddRange(new object[]{
                    "strFunctionName", strFunctionName
                    , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
			        ////
					, "objCustomerNNTCode", objCustomerNNTCode
                    , "objMST", objMST
                    , "objAccCenterCode", objAccCenterCode
                    , "objCustomerNNTName", objCustomerNNTName
                    , "objCustomerNNTType", objCustomerNNTType
                    , "objCustomerNNTAddress", objCustomerNNTAddress
                    , "objCustomerNNTEmail", objCustomerNNTEmail
                    , "objCustomerNNTPhone", objCustomerNNTPhone
                    , "objCustomerNNTFax", objCustomerNNTFax
                    , "objContactName", objContactName
                    , "objContactPhone", objContactPhone
                    , "objContactEmail", objContactEmail
                    , "objCustomerDOB", objCustomerDOB
                    , "objCustomerMST", objCustomerMST
                    , "objProvinceCode", objProvinceCode
                    , "objDistrictCode", objDistrictCode
                    , "objAccNo", objAccNo
                    , "objBankName", objBankName
                    , "objGovIDType", objGovIDType
                    , "objGovID", objGovID
                    , "objRemark", objRemark
                    , "objFlagActive", objFlagActive
                    ////
                    , "objFt_Cols_Upd", objFt_Cols_Upd
                    });
            #endregion

            try
            {
                #region // Init:
                //_cf.db.LogUserId = _cf.sinf.strUserCode;
                _cf.db.BeginTransaction();

                // Write RequestLog:
                _cf.ProcessBizReq_OutSide(
                    strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    , alParamsCoupleError // alParamsCoupleError
                    );

                // Sys_User_CheckAuthentication:
                //Sys_User_CheckAuthentication(
                //    ref alParamsCoupleError
                //    , strWAUserCode
                //    , strWAUserPassword
                //    );

                // Check Access/Deny:
                Sys_Access_CheckDenyV30(
                    ref alParamsCoupleError
                    , strWAUserCode
                    , strFunctionName
                    );
                #endregion

                #region // Mst_CustomerNNT_UpdateX:
                //DataSet dsGetData = null;
                {
                    Mst_CustomerNNT_UpdateX(
                        strTid // strTid
                        , strGwUserCode // strGwUserCode
                        , strGwPassword // strGwPassword
                        , strWAUserCode // strWAUserCode
                        , strWAUserPassword // strWAUserPassword
                        , ref alParamsCoupleError // alParamsCoupleError
                        , dtimeSys // dtimeSys
                        ////
                        , objCustomerNNTCode // objCustomerNNTCode
                        , objMST // objMST
                        , objAccCenterCode
                        , objCustomerNNTName
                        , objCustomerNNTType
                        , objCustomerNNTAddress
                        , objCustomerNNTEmail
                        , objCustomerNNTPhone
                        , objCustomerNNTFax
                        , objContactName
                        , objContactPhone  // objContactPhone 
                        , objContactEmail // objContactEmail
                        , objCustomerDOB
                        , objCustomerMST
                        , objProvinceCode // objProvinceCode
                        , objDistrictCode // objDistrictCode
                        , objAccNo
                        , objBankName
                        , objGovIDType // objGovIDType
                        , objGovID
                        , objRemark
                        , objFlagActive
                        /////
                        , objFt_Cols_Upd // objFt_Cols_Upd
                        );
                }
                ////
                //CmUtils.DataUtils.MoveDataTable(ref mdsFinal, ref dsGetData);
                #endregion

                // Return Good:
                TDALUtils.DBUtils.CommitSafety(_cf.db);
                mdsFinal.AcceptChanges();
                return mdsFinal;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Rollback:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);

                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsFinal
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Rollback and Release resources:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);
                TDALUtils.DBUtils.ReleaseAllSemaphore(_cf.db_Sys, true);

                // Write ReturnLog:
                _cf.ProcessBizReturn_OutSide(
                    ref mdsFinal // mdsFinal
                    , strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    );
                #endregion
            }
        }
        public DataSet WAS_Mst_CustomerNNT_Delete(
            ref ArrayList alParamsCoupleError
            , RQ_Mst_CustomerNNT objRQ_Mst_CustomerNNT
            ////
            , out RT_Mst_CustomerNNT objRT_Mst_CustomerNNT
            )
        {
            #region // Temp:
            string strTid = objRQ_Mst_CustomerNNT.Tid;
            objRT_Mst_CustomerNNT = new RT_Mst_CustomerNNT();
            DataSet mdsResult = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            DateTime dtimeSys = DateTime.UtcNow;
            //DataSet mdsExec = null;
            //DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(objRQ_Mst_CustomerNNT.Tid);
            //int nTidSeq = 0;
            //bool bNeedTransaction = true;
            string strFunctionName = "WAS_Mst_CustomerNNT_Delete";
            string strErrorCodeDefault = TError.ErridnInventory.WAS_Mst_CustomerNNT_Delete;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
				});
            #endregion

            try
            {
                #region // Init:
                #endregion

                #region // Refine and Check Input:
                List<Mst_CustomerNNT> lst_Mst_CustomerNNT = new List<Mst_CustomerNNT>();
                #endregion

                #region // Mst_CustomerNNT_Delete:
                mdsResult = Mst_CustomerNNT_Delete(
                    objRQ_Mst_CustomerNNT.Tid // strTid
                    , objRQ_Mst_CustomerNNT.GwUserCode // strGwUserCode
                    , objRQ_Mst_CustomerNNT.GwPassword // strGwPassword
                    , objRQ_Mst_CustomerNNT.WAUserCode // strUserCode
                    , objRQ_Mst_CustomerNNT.WAUserPassword // strUserPassword
                    , ref alParamsCoupleError // alParamsCoupleError
                                              ////
                    , objRQ_Mst_CustomerNNT.Mst_CustomerNNT.CustomerNNTCode // objCustomerNNTCode
                    , objRQ_Mst_CustomerNNT.Mst_CustomerNNT.MST // objMST
                    );
                #endregion

                // Return Good:
                return mdsResult;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsResult
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Write ReturnLog:
                //_cf.ProcessBizReturn(
                //	ref mdsResult // mdsFinal
                //	, strTid // strTid
                //	, strFunctionName // strFunctionName
                //	);
                #endregion
            }
        }
        public DataSet Mst_CustomerNNT_Delete(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            ////
            , object objCustomerNNTCode
            , object objMST
            )
        {
            #region // Temp:
            DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            //int nTidSeq = 0;
            DateTime dtimeSys = DateTime.UtcNow;
            string strFunctionName = "Mst_CustomerNNT_Delete";
            string strErrorCodeDefault = TError.ErridnInventory.Mst_CustomerNNT_Delete;
            alParamsCoupleError.AddRange(new object[]{
                    "strFunctionName", strFunctionName
                    , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
			        ////
					, "objCustomerNNTCode", objCustomerNNTCode
                    , "objMST", objMST
                    });
            #endregion

            try
            {
                #region // Init:
                //_cf.db.LogUserId = _cf.sinf.strUserCode;
                _cf.db.BeginTransaction();

                // Write RequestLog:
                _cf.ProcessBizReq_OutSide(
                    strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    , alParamsCoupleError // alParamsCoupleError
                    );

                // Sys_User_CheckAuthentication:
                //Sys_User_CheckAuthentication(
                //    ref alParamsCoupleError
                //    , strWAUserCode
                //    , strWAUserPassword
                //    );

                // Check Access/Deny:
                Sys_Access_CheckDenyV30(
                    ref alParamsCoupleError
                    , strWAUserCode
                    , strFunctionName
                    );
                #endregion

                #region // Mst_CustomerNNT_DeleteX:
                //DataSet dsGetData = null;
                {
                    Mst_CustomerNNT_DeleteX(
                        strTid // strTid
                        , strGwUserCode // strGwUserCode
                        , strGwPassword // strGwPassword
                        , strWAUserCode // strWAUserCode
                        , strWAUserPassword // strWAUserPassword
                        , ref alParamsCoupleError // alParamsCoupleError
                        , dtimeSys // dtimeSys
                                   ////
                        , objCustomerNNTCode // objCustomerNNTCode
                        , objMST // objMST
                        );
                }
                ////
                //CmUtils.DataUtils.MoveDataTable(ref mdsFinal, ref dsGetData);
                #endregion

                // Return Good:
                TDALUtils.DBUtils.CommitSafety(_cf.db); // Always Rollback.
                mdsFinal.AcceptChanges();
                return mdsFinal;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Rollback:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);

                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsFinal
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Rollback and Release resources:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);
                TDALUtils.DBUtils.ReleaseAllSemaphore(_cf.db_Sys, true);

                // Write ReturnLog:
                _cf.ProcessBizReturn_OutSide(
                    ref mdsFinal // mdsFinal
                    , strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    );
                #endregion
            }
        }
        private void Mst_CustomerNNT_GetX(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            , DateTime dtimeSys
            //// Filter:
            , string strFt_RecordStart
            , string strFt_RecordCount
            , string strFt_WhereClause
            //// Return:
            , string strRt_Cols_Mst_CustomerNNT
            ////
            , out DataSet dsGetData
            )
        {
            #region // Temp:
            //DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            //DateTime dtimeSys = DateTime.UtcNow;
            //bool bNeedTransaction = true;
            string strFunctionName = "Mst_CustomerNNT_GetX";
            //string strErrorCodeDefault = TError.ErrHTCNM.Mnf_VIN_Get_QCX;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
                });
            #endregion

            #region // Check:
            //// Refine:
            long nFilterRecordStart = Convert.ToInt64(strFt_RecordStart);
            long nFilterRecordEnd = nFilterRecordStart + Convert.ToInt64(strFt_RecordCount) - 1;
            bool bGet_Mst_CustomerNNT = (strRt_Cols_Mst_CustomerNNT != null && strRt_Cols_Mst_CustomerNNT.Length > 0);

            //// drAbilityOfUser:
            //DataRow drAbilityOfUser = myCache_ViewAbility_GetUserInfo(_cf.sinf.strUserCode);

            #endregion

            #region // Build Sql:
            ////
            ArrayList alParamsCoupleSql = new ArrayList();
            alParamsCoupleSql.AddRange(new object[] {
                "@nFilterRecordStart", nFilterRecordStart
                , "@nFilterRecordEnd", nFilterRecordEnd
                });
            // drAbilityOfUser:
            DataRow drAbilityOfUser = Sys_User_GetAbilityViewOfUser(strWAUserCode);
            zzzzClauseSelect_Mst_NNT_ViewAbility_Get(
                drAbilityOfUser // drAbilityOfUser
                , ref alParamsCoupleError // alParamsCoupleError
                );

            string strSqlGetData = CmUtils.StringUtils.Replace(@"
					---- #tbl_Mst_CustomerNNT_Filter_Draft:
					select distinct
						identity(bigint, 0, 1) MyIdxSeq
						, mcnnt.CustomerNNTCode
						, mcnnt.MST
					into #tbl_Mst_CustomerNNT_Filter_Draft
					from Mst_CustomerNNT mcnnt --//[mylock]
                        inner join #tbl_Mst_NNT_ViewAbility t_MstNNT_View --//[mylock]
                            on mcnnt.MST = t_MstNNT_View.MST
					where (1=1)
						zzB_Where_strFilter_zzE
					order by mcnnt.CustomerNNTCode asc
					;

					---- Summary:
					select Count(0) MyCount from #tbl_Mst_CustomerNNT_Filter_Draft t --//[mylock]
					;

					---- #tbl_Mst_CustomerNNT_Filter:
					select
						t.*
					into #tbl_Mst_CustomerNNT_Filter
					from #tbl_Mst_CustomerNNT_Filter_Draft t --//[mylock]
					where (1=1)
						and (t.MyIdxSeq >= @nFilterRecordStart)
						and (t.MyIdxSeq <= @nFilterRecordEnd)
					;

					-------- Mst_CustomerNNT -----:
					zzB_Select_Mst_CustomerNNT_zzE
					------------------------

					---- Clear for debug:
					--drop table #tbl_Mst_CustomerNNT_Filter_Draft;
					--drop table #tbl_Mst_CustomerNNT_Filter;
				"
                );
            ////
            string zzB_Select_Mst_CustomerNNT_zzE = "-- Nothing.";
            if (bGet_Mst_CustomerNNT)
            {
                #region // bGet_Mst_CustomerNNT:
                zzB_Select_Mst_CustomerNNT_zzE = CmUtils.StringUtils.Replace(@"
					---- Mst_CustomerNNT:
					select
						t.MyIdxSeq
						, mcnnt.*
						----
						, mp.ProvinceCode mp_ProvinceCode
						, mp.ProvinceName mp_ProvinceName
						----
						, md.DistrictCode md_DistrictCode
						, md.DistrictName md_DistrictName
					from #tbl_Mst_CustomerNNT_Filter t --//[mylock]
						inner join Mst_CustomerNNT mcnnt --//[mylock]
							on t.CustomerNNTCode = mcnnt.CustomerNNTCode
							    and t.MST = mcnnt.MST
						left join Mst_Province mp --//[mylock]
							on mcnnt.ProvinceCode = mp.ProvinceCode
						left join Mst_District md --//[mylock]
							on mcnnt.ProvinceCode = md.ProvinceCode
								and mcnnt.DistrictCode = md.DistrictCode
					order by t.MyIdxSeq asc
					;
				"
                );
                #endregion
            }
            ////
            string zzB_Where_strFilter_zzE = "";
            {
                Hashtable htSpCols = new Hashtable();
                {
                    #region // htSpCols:
                    ////
                    TUtils.CUtils.MyBuildHTSupportedColumns(
                        _cf.db // db
                        , ref htSpCols // htSupportedColumns
                        , "Mst_CustomerNNT" // strTableNameDB
                        , "Mst_CustomerNNT." // strPrefixStd
                        , "mcnnt." // strPrefixAlias
                        );
                    ////
                    #endregion
                }
                zzB_Where_strFilter_zzE = CmUtils.SqlUtils.BuildWhere(
                    htSpCols // htSpCols
                    , strFt_WhereClause // strClause
                    , "@p_" // strParamPrefix
                    , ref alParamsCoupleSql // alParamsCoupleSql
                    );
                zzB_Where_strFilter_zzE = (zzB_Where_strFilter_zzE.Length <= 0 ? "" : string.Format(" and ({0})", zzB_Where_strFilter_zzE));
                alParamsCoupleError.AddRange(new object[]{
                    "zzB_Where_strFilter_zzE", zzB_Where_strFilter_zzE
                    });
            }
            ////
            strSqlGetData = CmUtils.StringUtils.Replace(
                strSqlGetData
                , "zzB_Where_strFilter_zzE", zzB_Where_strFilter_zzE
                , "zzB_Select_Mst_CustomerNNT_zzE", zzB_Select_Mst_CustomerNNT_zzE
                );
            #endregion

            #region // Get Data:
            dsGetData = _cf.db.ExecQuery(
                strSqlGetData
                , alParamsCoupleSql.ToArray()
                );
            int nIdxTable = 0;
            dsGetData.Tables[nIdxTable++].TableName = "MySummaryTable";
            if (bGet_Mst_CustomerNNT)
            {
                dsGetData.Tables[nIdxTable++].TableName = "Mst_CustomerNNT";
            }
            #endregion
        }
        private void Mst_CustomerNNT_CreateX(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            , DateTime dtimeSys
            //// 
            , object objCustomerNNTCode
            , object objMST
            , object objAccCenterCode
            , object objCustomerNNTName
            , object objCustomerNNTType
            , object objCustomerNNTAddress
            , object objCustomerNNTEmail
            , object objCustomerNNTPhone
            , object objCustomerNNTFax
            , object objContactName
            , object objContactPhone
            , object objContactEmail
            , object objCustomerNNTDOB
            , object objCustomerMST
            , object objProvinceCode
            , object objDistrictCode
            , object objAccNo
            , object objBankName
            , object objGovIDType
            , object objGovID
            , object objRemark
            ////
            )
        {
            #region // Temp:
            string strFunctionName = "Mst_CustomerNNT_CreateX";
            //string strErrorCodeDefault = TError.ErrHTCNM.Mnf_VIN_Get_QCX;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
			    ////
				, "objCustomerNNTCode", objCustomerNNTCode
                , "objMST", objMST
                , "objAccCenterCode", objAccCenterCode
                , "objCustomerNNTName", objCustomerNNTName
                , "objCustomerNNTType", objCustomerNNTType
                , "objCustomerNNTAddress", objCustomerNNTAddress
                , "objCustomerNNTEmail", objCustomerNNTEmail
                , "objCustomerNNTPhone", objCustomerNNTPhone
                , "objCustomerNNTFax", objCustomerNNTFax
                , "objContactName", objContactName
                , "objContactPhone", objContactPhone
                , "objContactEmail", objContactEmail
                , "objCustomerNNTDOB", objCustomerNNTDOB
                , "objCustomerMST", objCustomerMST
                , "objProvinceCode", objProvinceCode
                , "objDistrictCode", objDistrictCode
                , "objAccNo", objAccNo
                , "objBankName", objBankName
                , "objGovIDType", objGovIDType
                , "objGovID", objGovID
                , "objRemark", objRemark
                });
            #endregion

            #region // Refine and Check Input:
            ////
            string strCustomerNNTCode = TUtils.CUtils.StdParam(objCustomerNNTCode);
            string strAccCenterCode = TUtils.CUtils.StdParam(objAccCenterCode);
            string strMST = TUtils.CUtils.StdParam(objMST);
            string strCustomerNNTName = string.Format("{0}", objCustomerNNTName).Trim();
            string strCustomerNNTType = TUtils.CUtils.StdParam(objCustomerNNTType);
            string strCustomerNNTAddress = string.Format("{0}", objCustomerNNTAddress).Trim();
            string strCustomerNNTEmail = string.Format("{0}", objCustomerNNTEmail).Trim();
            string strCustomerNNTPhone = string.Format("{0}", objCustomerNNTPhone).Trim();
            string strCustomerNNTFax = string.Format("{0}", objCustomerNNTFax).Trim();
            string strContactName = string.Format("{0}", objContactName).Trim();
            string strContactPhone = string.Format("{0}", objContactPhone).Trim();
            string strContactEmail = string.Format("{0}", objContactEmail).Trim();
            string strCustomerNNTDOB = string.Format("{0}", objCustomerNNTDOB).Trim();
            string strCustomerMST = string.Format("{0}", objCustomerMST).Trim();
            string strProvinceCode = TUtils.CUtils.StdParam(objProvinceCode);
            string strDistrictCode = TUtils.CUtils.StdParam(objDistrictCode);
            string strAccNo = string.Format("{0}", objAccNo).Trim();
            string strBankName = string.Format("{0}", objBankName).Trim();
            string strGovIDType = TUtils.CUtils.StdParam(objGovIDType);
            string strGovID = TUtils.CUtils.StdParam(objGovID);
            string strRemark = string.Format("{0}", objRemark).Trim();

            // drAbilityOfUser:
            //DataRow drAbilityOfUser = Sys_User_GetAbilityViewOfUser(_cf.sinf.strUserCode);
            ////
            DataTable dtDB_Mst_CustomerNNT = null;

            {
                ////
                if (strCustomerNNTCode == null || strCustomerNNTCode.Length < 1)
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.strCustomerNNTCode", strCustomerNNTCode
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Mst_CustomerNNT_Create_InvalidCustomerNNTCode
                        , null
                        , alParamsCoupleError.ToArray()
                        );
                }
                ////
                Mst_CustomerNNT_CheckDB(
                    ref alParamsCoupleError // alParamsCoupleError
                    , strCustomerNNTCode // objCustomerNNTCode
                    , strMST // objMST
                    , TConst.Flag.No // strFlagExistToCheck
                    , "" // strFlagActiveListToCheck
                    , out dtDB_Mst_CustomerNNT // dtDB_Mst_CustomerNNT
                    );
                ////
                DataTable dtDB_Sys_User = null;
                string strMST_WAUserCode = null;

                Sys_User_CheckDB(
                    ref alParamsCoupleError // alParamsCoupleError
                    , strWAUserCode // objUserCode
                    , TConst.Flag.Yes // strFlagExistToCheck
                    , TConst.Flag.Active // strFlagActiveListToCheck
                    , out dtDB_Sys_User // dtDB_Sys_User
                    );

                strMST_WAUserCode = TUtils.CUtils.StdParam(dtDB_Sys_User.Rows[0]["MST"]);

                ////
                
                if (strMST_WAUserCode != strMST)
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.strMST", strMST
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Mst_CustomerNNT_Create_InvalidMST
                        , null
                        , alParamsCoupleError.ToArray()
                        );
                }
                ////
                DataTable dtDB_Mst_NNT = null;

                Mst_NNT_CheckDB(
                    ref alParamsCoupleError // alParamsCoupleError
                    , strMST // objMST
                    , TConst.Flag.Yes // strFlagExistToCheck
                    , TConst.Flag.Active // strFlagActiveListToCheck
                    , "" // strTCTStatusListToCheck
                    , out dtDB_Mst_NNT // dtDB_Mst_NNT
                    );
                ////
                DataTable dtDB_Mst_Province = null;

                Mst_Province_CheckDB(
                    ref alParamsCoupleError // alParamsCoupleError
                    , strProvinceCode // objDistrictCode
                    , TConst.Flag.Yes // strFlagExistToCheck
                    , TConst.Flag.Active // strFlagActiveListToCheck
                    , out dtDB_Mst_Province // dtDB_Mst_Province
                    );
                ////
                DataTable dtDB_Mst_District = null;

                Mst_District_CheckDB(
                    ref alParamsCoupleError // alParamsCoupleError
                    , strProvinceCode // objDistrictCode
                    , strDistrictCode // objDistrictCode
                    , TConst.Flag.Yes // strFlagExistToCheck
                    , TConst.Flag.Active // strFlagActiveListToCheck
                    , out dtDB_Mst_District // dtDB_Mst_District
                    );
                ////
                DataTable dtDB_Mst_CustomerNNTType = null;

                Mst_CustomerNNTType_CheckDB(
                    ref alParamsCoupleError // alParamsCoupleError
                    , strCustomerNNTType // objCustomerNNTType
                    , TConst.Flag.Yes // strFlagExistToCheck
                    , TConst.Flag.Active // strFlagActiveListToCheck
                    , out dtDB_Mst_CustomerNNTType // dtDB_Mst_CustomerNNTType
                    );
                ////
                //if (strCustomerNNTName.Length < 1)
                //{
                //    alParamsCoupleError.AddRange(new object[]{
                //        "Check.strCustomerNNTName", strCustomerNNTName
                //        });
                //    throw CmUtils.CMyException.Raise(
                //        TError.ErridnInventory.Mst_CustomerNNT_Create_InvalidCustomerNNTName
                //        , null
                //        , alParamsCoupleError.ToArray()
                //        );
                //}
                ////
                if (strCustomerNNTType.Length < 1)
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.strCustomerNNTType", strCustomerNNTType
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Mst_CustomerNNT_Create_InvalidCustomerNNTType
                        , null
                        , alParamsCoupleError.ToArray()
                        );
                }
                ////
                if (strContactEmail.Length < 1)
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.strContactEmail", strContactEmail
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Mst_CustomerNNT_Create_InvalidContactEmail
                        , null
                        , alParamsCoupleError.ToArray()
                        );
                }
            }
            #endregion

            #region // SaveDB Mst_CustomerNNT:
            {
                // Init:
                //ArrayList alColumnEffective = new ArrayList();
                string strFN = "";
                DataRow drDB = dtDB_Mst_CustomerNNT.NewRow();
                strFN = "CustomerNNTCode"; drDB[strFN] = strCustomerNNTCode;
                strFN = "NetworkID"; drDB[strFN] = nNetworkID;
                strFN = "MST"; drDB[strFN] = strMST;
                strFN = "AccCenterCode"; drDB[strFN] = strAccCenterCode;
                strFN = "CustomerNNTName"; drDB[strFN] = strCustomerNNTName;
                strFN = "CustomerNNTType"; drDB[strFN] = strCustomerNNTType;
                strFN = "CustomerNNTAddress"; drDB[strFN] = strCustomerNNTAddress;
                strFN = "CustomerNNTEmail"; drDB[strFN] = strCustomerNNTEmail;
                strFN = "CustomerNNTPhone"; drDB[strFN] = strCustomerNNTPhone;
                strFN = "CustomerNNTFax"; drDB[strFN] = strCustomerNNTFax;
                strFN = "ContactName"; drDB[strFN] = strContactName;
                strFN = "ContactPhone"; drDB[strFN] = strContactPhone;
                strFN = "ContactEmail"; drDB[strFN] = strContactEmail;
                strFN = "CustomerNNTDOB"; drDB[strFN] = strCustomerNNTDOB;
                strFN = "CustomerMST"; drDB[strFN] = strCustomerMST;
                strFN = "ProvinceCode"; drDB[strFN] = strProvinceCode;
                strFN = "DistrictCode"; drDB[strFN] = strDistrictCode;
                strFN = "AccNo"; drDB[strFN] = strAccNo;
                strFN = "BankName"; drDB[strFN] = strBankName;
                strFN = "GovIDType"; drDB[strFN] = strGovIDType;
                strFN = "GovID"; drDB[strFN] = strGovID;
                strFN = "Remark"; drDB[strFN] = strRemark;
                strFN = "FlagActive"; drDB[strFN] = TConst.Flag.Active;
                strFN = "LogLUDTimeUTC"; drDB[strFN] = dtimeSys.ToString("yyyy-MM-dd HH:mm:ss");
                strFN = "LogLUBy"; drDB[strFN] = strWAUserCode;
                dtDB_Mst_CustomerNNT.Rows.Add(drDB);

                // Save:
                _cf.db.SaveData(
                    "Mst_CustomerNNT" // strTableName
                    , dtDB_Mst_CustomerNNT // dtData
                                        //, alColumnEffective.ToArray()
                    );
            }
            #endregion
        }
        private void Mst_CustomerNNT_UpdateX(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            , DateTime dtimeSys
            //// 
            , object objCustomerNNTCode
            , object objMST
            , object objAccCenterCode
            , object objCustomerNNTName
            , object objCustomerNNTType
            , object objCustomerNNTAddress
            , object objCustomerNNTEmail
            , object objCustomerNNTPhone
            , object objCustomerNNTFax
            , object objContactName
            , object objContactPhone
            , object objContactEmail
            , object objCustomerNNTDOB
            , object objCustomerMST
            , object objProvinceCode
            , object objDistrictCode
            , object objAccNo
            , object objBankName
            , object objGovIDType
            , object objGovID
            , object objRemark
            , object objFlagActive
            ////
            , object objFt_Cols_Upd
            ////
            )
        {
            #region // Temp:
            string strFunctionName = "Mst_CustomerNNT_UpdateX";
            //string strErrorCodeDefault = TError.ErrHTCNM.Mst_CustomerNNT_UpdateX;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
				, "objCustomerNNTCode", objCustomerNNTCode
                , "objMST", objMST
                , "objAccCenterCode", objAccCenterCode
                , "objCustomerNNTName", objCustomerNNTName
                , "objCustomerNNTType", objCustomerNNTType
                , "objCustomerNNTAddress", objCustomerNNTAddress
                , "objCustomerNNTEmail", objCustomerNNTEmail
                , "objCustomerNNTPhone", objCustomerNNTPhone
                , "objCustomerNNTFax", objCustomerNNTFax
                , "objContactName", objContactName
                , "objContactPhone", objContactPhone
                , "objContactEmail", objContactEmail
                , "objCustomerNNTDOB", objCustomerNNTDOB
                , "objCustomerMST", objCustomerMST
                , "objProvinceCode", objProvinceCode
                , "objDistrictCode", objDistrictCode
                , "objAccNo", objAccNo
                , "objBankName", objBankName
                , "objGovIDType", objGovIDType
                , "objGovID", objGovID
                , "objRemark", objRemark
                , "objFlagActive", objFlagActive
                ////
                , "objFt_Cols_Upd", objFt_Cols_Upd
                });
            #endregion

            #region // Refine and Check Input:
            ////
            string strFt_Cols_Upd = TUtils.CUtils.StdParam(objFt_Cols_Upd);
            strFt_Cols_Upd = (strFt_Cols_Upd == null ? "" : strFt_Cols_Upd);
            ////
            string strCustomerNNTCode = TUtils.CUtils.StdParam(objCustomerNNTCode);
            string strMST = TUtils.CUtils.StdParam(objMST);
            string strAccCenterCode = TUtils.CUtils.StdParam(objAccCenterCode);
            string strCustomerNNTName = string.Format("{0}", objCustomerNNTName).Trim();
            string strCustomerNNTType = string.Format("{0}", objCustomerNNTType).Trim();
            string strCustomerNNTAddress = string.Format("{0}", objCustomerNNTAddress).Trim();
            string strCustomerNNTEmail = string.Format("{0}", objCustomerNNTEmail).Trim();
            string strCustomerNNTPhone = string.Format("{0}", objCustomerNNTPhone).Trim();
            string strCustomerNNTFax = string.Format("{0}", objCustomerNNTFax).Trim();
            string strContactName = string.Format("{0}", objContactName).Trim();
            string strContactPhone = string.Format("{0}", objContactPhone).Trim();
            string strContactEmail = string.Format("{0}", objContactEmail).Trim();
            string strCustomerNNTDOB = string.Format("{0}", objCustomerNNTDOB).Trim();
            string strCustomerMST = string.Format("{0}", objCustomerMST).Trim();
            string strProvinceCode = TUtils.CUtils.StdParam(objProvinceCode);
            string strDistrictCode = TUtils.CUtils.StdParam(objDistrictCode);
            string strAccNo = string.Format("{0}", objAccNo).Trim();
            string strBankName = string.Format("{0}", objBankName).Trim();
            string strGovIDType = TUtils.CUtils.StdParam(objGovIDType);
            string strGovID = TUtils.CUtils.StdParam(objGovID);
            string strRemark = string.Format("{0}", objRemark).Trim();
            string strFlagActive = TUtils.CUtils.StdFlag(objFlagActive);
            ////
            bool bUpd_CustomerNNTName = strFt_Cols_Upd.Contains("Mst_CustomerNNT.CustomerNNTName".ToUpper());
            bool bUpd_CustomerNNTType = strFt_Cols_Upd.Contains("Mst_CustomerNNT.CustomerNNTType".ToUpper());
            bool bUpd_CustomerNNTAddress = strFt_Cols_Upd.Contains("Mst_CustomerNNT.CustomerNNTAddress".ToUpper());
            bool bUpd_CustomerNNTEmail = strFt_Cols_Upd.Contains("Mst_CustomerNNT.CustomerNNTEmail".ToUpper());
            bool bUpd_CustomerNNTPhone = strFt_Cols_Upd.Contains("Mst_CustomerNNT.CustomerNNTPhone".ToUpper());
            bool bUpd_CustomerNNTFax = strFt_Cols_Upd.Contains("Mst_CustomerNNT.CustomerNNTFax".ToUpper());
            bool bUpd_ContactName = strFt_Cols_Upd.Contains("Mst_CustomerNNT.ContactName".ToUpper());
            bool bUpd_ContactPhone = strFt_Cols_Upd.Contains("Mst_CustomerNNT.ContactPhone".ToUpper());
            bool bUpd_ContactEmail = strFt_Cols_Upd.Contains("Mst_CustomerNNT.ContactEmail".ToUpper());
            bool bUpd_CustomerNNTDOB = strFt_Cols_Upd.Contains("Mst_CustomerNNT.CustomerNNTDOB".ToUpper());
            bool bUpd_CustomerMST = strFt_Cols_Upd.Contains("Mst_CustomerNNT.CustomerMST".ToUpper());
            bool bUpd_ProvinceCode = strFt_Cols_Upd.Contains("Mst_CustomerNNT.ProvinceCode".ToUpper());
            bool bUpd_DistrictCode = strFt_Cols_Upd.Contains("Mst_CustomerNNT.DistrictCode".ToUpper());
            bool bUpd_AccNo = strFt_Cols_Upd.Contains("Mst_CustomerNNT.AccNo".ToUpper());
            bool bUpd_BankName = strFt_Cols_Upd.Contains("Mst_CustomerNNT.BankName".ToUpper());
            bool bUpd_GovID = strFt_Cols_Upd.Contains("Mst_CustomerNNT.GovID".ToUpper());
            bool bUpd_GovIDType = strFt_Cols_Upd.Contains("Mst_CustomerNNT.GovIDType".ToUpper());
            bool bUpd_Remark = strFt_Cols_Upd.Contains("Mst_CustomerNNT.Remark".ToUpper());
            bool bUpd_FlagActive = strFt_Cols_Upd.Contains("Mst_CustomerNNT.FlagActive".ToUpper());

            ////
            DataTable dtDB_Mst_CustomerNNT = null;
            {
                ////
                Mst_CustomerNNT_CheckDB(
                     ref alParamsCoupleError // alParamsCoupleError
                     , strCustomerNNTCode // objCustomerNNTCode 
                     , strMST // objMST
                     , TConst.Flag.Yes // strFlagExistToCheck
                     , "" // strFlagActiveListToCheck
                     , out dtDB_Mst_CustomerNNT // dtDB_Mst_Organ
                    );
                ////
                //if (strCustomerNNTName.Length < 1)
                //{
                //    alParamsCoupleError.AddRange(new object[]{
                //        "Check.strCustomerNNTName", strCustomerNNTName
                //        });
                //    throw CmUtils.CMyException.Raise(
                //        TError.ErridnInventory.Mst_CustomerNNT_Update_InvalidCustomerNNTName
                //        , null
                //        , alParamsCoupleError.ToArray()
                //        );
                //}
                //////
                if(bUpd_ProvinceCode && strProvinceCode.Length > 0)
                {
                    DataTable dtDB_Mst_Province = null;

                    Mst_Province_CheckDB(
                        ref alParamsCoupleError // alParamsCoupleError
                        , strProvinceCode // objDistrictCode
                        , TConst.Flag.Yes // strFlagExistToCheck
                        , TConst.Flag.Active // strFlagActiveListToCheck
                        , out dtDB_Mst_Province // dtDB_Mst_Province
                        );
                    ////

                }
                //////
                if (bUpd_DistrictCode && strDistrictCode.Length > 0)
                {
                    DataTable dtDB_Mst_District = null;

                    Mst_District_CheckDB(
                        ref alParamsCoupleError // alParamsCoupleError
                        , strProvinceCode // objDistrictCode
                        , strDistrictCode // objDistrictCode
                        , TConst.Flag.Yes // strFlagExistToCheck
                        , TConst.Flag.Active // strFlagActiveListToCheck
                        , out dtDB_Mst_District // dtDB_Mst_District
                        );
                    ////

                }
                //////
                if (bUpd_CustomerNNTType && strCustomerNNTType.Length > 0)
                {
                    DataTable dtDB_Mst_CustomerNNTType = null;

                    Mst_CustomerNNTType_CheckDB(
                        ref alParamsCoupleError // alParamsCoupleError
                        , strCustomerNNTType // objCustomerNNTType
                        , TConst.Flag.Yes // strFlagExistToCheck
                        , TConst.Flag.Active // strFlagActiveListToCheck
                        , out dtDB_Mst_CustomerNNTType // dtDB_Mst_CustomerNNTType
                        );
                    ////

                }
                if (strContactEmail.Length < 1)
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.strContactEmail", strContactEmail
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Mst_CustomerNNT_Update_InvalidContactEmail
                        , null
                        , alParamsCoupleError.ToArray()
                        );
                }
            }
            #endregion

            #region // Save Mst_CustomerNNT:
            {
                // Init:
                ArrayList alColumnEffective = new ArrayList();
                string strFN = "";
                DataRow drDB = dtDB_Mst_CustomerNNT.Rows[0];
                if (bUpd_CustomerNNTName) { strFN = "CustomerNNTName"; drDB[strFN] = strCustomerNNTName; alColumnEffective.Add(strFN); }
                if (bUpd_CustomerNNTType) { strFN = "CustomerNNTType"; drDB[strFN] = strCustomerNNTType; alColumnEffective.Add(strFN); }
                if (bUpd_CustomerNNTAddress) { strFN = "CustomerNNTAddress"; drDB[strFN] = strCustomerNNTAddress; alColumnEffective.Add(strFN); }
                if (bUpd_CustomerNNTEmail) { strFN = "CustomerNNTEmail"; drDB[strFN] = strCustomerNNTEmail; alColumnEffective.Add(strFN); }
                if (bUpd_CustomerNNTPhone) { strFN = "CustomerNNTPhone"; drDB[strFN] = strCustomerNNTPhone; alColumnEffective.Add(strFN); }
                if (bUpd_CustomerNNTFax) { strFN = "CustomerNNTFax"; drDB[strFN] = strCustomerNNTFax; alColumnEffective.Add(strFN); }
                if (bUpd_ContactName) { strFN = "ContactName"; drDB[strFN] = strContactName; alColumnEffective.Add(strFN); }
                if (bUpd_ContactPhone) { strFN = "ContactPhone"; drDB[strFN] = strContactPhone; alColumnEffective.Add(strFN); }
                if (bUpd_ContactEmail) { strFN = "ContactEmail"; drDB[strFN] = strContactEmail; alColumnEffective.Add(strFN); }
                if (bUpd_CustomerNNTDOB) { strFN = "CustomerNNTDOB"; drDB[strFN] = strCustomerNNTDOB; alColumnEffective.Add(strFN); }
                if (bUpd_CustomerMST) { strFN = "CustomerMST"; drDB[strFN] = strCustomerMST; alColumnEffective.Add(strFN); }
                if (bUpd_ProvinceCode) { strFN = "ProvinceCode"; drDB[strFN] = strProvinceCode; alColumnEffective.Add(strFN); }
                if (bUpd_DistrictCode) { strFN = "DistrictCode"; drDB[strFN] = strDistrictCode; alColumnEffective.Add(strFN); }
                if (bUpd_AccNo) { strFN = "AccNo"; drDB[strFN] = strAccNo; alColumnEffective.Add(strFN); }
                if (bUpd_BankName) { strFN = "BankName"; drDB[strFN] = strBankName; alColumnEffective.Add(strFN); }
                if (bUpd_GovID) { strFN = "GovID"; drDB[strFN] = strGovID; alColumnEffective.Add(strFN); }
                if (bUpd_GovIDType) { strFN = "GovIDType"; drDB[strFN] = strGovIDType; alColumnEffective.Add(strFN); }
                if (bUpd_Remark) { strFN = "Remark"; drDB[strFN] = strRemark; alColumnEffective.Add(strFN); }
                if (bUpd_FlagActive) { strFN = "FlagActive"; drDB[strFN] = strFlagActive; alColumnEffective.Add(strFN); }
                strFN = "LogLUDTimeUTC"; drDB[strFN] = dtimeSys.ToString("yyyy-MM-dd HH:mm:ss"); alColumnEffective.Add(strFN);
                strFN = "LogLUBy"; drDB[strFN] = strWAUserCode; alColumnEffective.Add(strFN);

                // Save:
                _cf.db.SaveData(
                    "Mst_CustomerNNT"
                    , dtDB_Mst_CustomerNNT
                    , alColumnEffective.ToArray()
                    );
            }
            #endregion
        }
        private void Mst_CustomerNNT_DeleteX(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            , DateTime dtimeSys
            //// 
            , object objCustomerNNTCode
            , object objMST
            ////
            )
        {
            #region // Temp:
            string strFunctionName = "Mst_CustomerNNT_DeleteX";
            //string strErrorCodeDefault = TError.ErrHTCNM.Mnf_VIN_Get_QCX;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
                , "objCustomerNNTCode", objCustomerNNTCode
                , "objMST", objMST
                });
            #endregion

            #region // Refine and Check Input:
            ////
            string strCustomerNNTCode = TUtils.CUtils.StdParam(objCustomerNNTCode);
            string strMST = TUtils.CUtils.StdParam(objMST);

            ////
            DataTable dtDB_Mst_CustomerNNT = null;
            {
                ////
                Mst_CustomerNNT_CheckDB(
                     ref alParamsCoupleError // alParamsCoupleError
                     , strCustomerNNTCode // strCustomerNNTCode 
                     , strMST // objMST
                     , TConst.Flag.Yes // strFlagExistToCheck
                     , "" // strFlagActiveListToCheck
                     , out dtDB_Mst_CustomerNNT // dtDB_Mst_CustomerNNT
                    );
                ////
            }
            #endregion

            #region // SaveDB:
            {
                // Init:
                dtDB_Mst_CustomerNNT.Rows[0].Delete();

                // Save:
                _cf.db.SaveData(
                    "Mst_CustomerNNT"
                    , dtDB_Mst_CustomerNNT
                    );
            }
            #endregion
        }
        #endregion

        #region // iNOS_Mst_BizType:
        public DataSet WAS_RptSv_iNOS_Mst_BizType_Get_New20190813(
            ref ArrayList alParamsCoupleError
            , RQ_iNOS_Mst_BizType objRQ_iNOS_Mst_BizType
            ////
            , out RT_iNOS_Mst_BizType objRT_iNOS_Mst_BizType
            )
        {
            #region // Temp:
            string strTid = objRQ_iNOS_Mst_BizType.Tid;
            objRT_iNOS_Mst_BizType = new RT_iNOS_Mst_BizType();
            DataSet mdsResult = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            DateTime dtimeSys = DateTime.UtcNow;
            //DataSet mdsExec = null;
            //DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(objRQ_iNOS_Mst_BizType.Tid);
            //int nTidSeq = 0;
            //bool bNeedTransaction = true;
            string strFunctionName = "WAS_RptSv_iNOS_Mst_BizType_Get";
            string strErrorCodeDefault = TError.ErridnInventory.WAS_RptSv_iNOS_Mst_BizType_Get;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
				});
            #endregion

            try
            {
                #region // Init:
                #endregion

                #region // Refine and Check Input:
                List<MySummaryTable> lst_MySummaryTable = new List<MySummaryTable>();
                List<iNOS_Mst_BizType> lst_iNOS_Mst_BizType = new List<iNOS_Mst_BizType>();
                #endregion

                #region // WS_RptSv_iNOS_Mst_BizType_Get:
                mdsResult = RptSv_iNOS_Mst_BizType_Get_New20190813(
                    objRQ_iNOS_Mst_BizType.Tid // strTid
                    , objRQ_iNOS_Mst_BizType.GwUserCode // strGwUserCode
                    , objRQ_iNOS_Mst_BizType.GwPassword // strGwPassword
                    , objRQ_iNOS_Mst_BizType.WAUserCode // strUserCode
                    , objRQ_iNOS_Mst_BizType.WAUserPassword // strUserPassword
                    , objRQ_iNOS_Mst_BizType.AccessToken // strAccessToken
                    , ref alParamsCoupleError // alParamsCoupleError
                                              //// Return:
                    , objRQ_iNOS_Mst_BizType.Rt_Cols_iNOS_Mst_BizType // strRt_Cols_iNOS_Mst_BizType
                    );
                #endregion

                #region // GetData:
                if (!CmUtils.CMyDataSet.HasError(mdsResult))
                {
                    //////
                    //DataTable dt_MySummaryTable = mdsResult.Tables["MySummaryTable"].Copy();
                    //lst_MySummaryTable = TUtils.DataTableCmUtils.ToListof<MySummaryTable>(dt_MySummaryTable);
                    //objRT_iNOS_Mst_BizType.MySummaryTable = lst_MySummaryTable[0];
                    ////
                    DataTable dt_iNOS_Mst_BizType = mdsResult.Tables["iNOS_Mst_BizType"].Copy();
                    lst_iNOS_Mst_BizType = TUtils.DataTableCmUtils.ToListof<iNOS_Mst_BizType>(dt_iNOS_Mst_BizType);
                    objRT_iNOS_Mst_BizType.Lst_iNOS_Mst_BizType = lst_iNOS_Mst_BizType;
                    /////
                }
                #endregion

                // Return Good:
                return mdsResult;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsResult
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Write ReturnLog:
                //_cf.ProcessBizReturn(
                //	ref mdsResult // mdsFinal
                //	, strTid // strTid
                //	, strFunctionName // strFunctionName
                //	);
                #endregion
            }
        }

        public DataSet RptSv_iNOS_Mst_BizType_Get_New20190813(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , string strAccessToken
            , ref ArrayList alParamsCoupleError
            //// Return:
            , string strRt_Cols_iNOS_Mst_BizType
            )
        {
            #region // Temp:
            DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            //int nTidSeq = 0;
            DateTime dtimeSys = DateTime.UtcNow;
            bool bNeedTransaction = true;
            string strFunctionName = "iNOS_Mst_BizType_Get";
            string strErrorCodeDefault = TError.ErridnInventory.RptSv_iNOS_Mst_BizType_Get;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				//// Return
				, "strRt_Cols_iNOS_Mst_BizType", strRt_Cols_iNOS_Mst_BizType
                });
            #endregion

            try
            {
                #region // Init:
                //_cf.db.LogUserId = _cf.sinf.strUserCode;
                if (bNeedTransaction) _cf.db.BeginTransaction();

                // Write RequestLog:
                _cf.ProcessBizReq_OutSide(
                    strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    , alParamsCoupleError // alParamsCoupleError
                    );

                //// RptSv_Sys_User_CheckAuthentication:
                //RptSv_Sys_User_CheckAuthentication(
                //    ref alParamsCoupleError
                //    , strWAUserCode
                //    , strWAUserPassword
                //    );

                //// Check Access/Deny:
                //Sys_Access_CheckDenyV30(
                //	ref alParamsCoupleError
                //	, strWAUserCode
                //	, strFunctionName
                //	);
                #endregion

                #region // Check:
                //// Refine:
                bool bGet_iNOS_Mst_BizType = (strRt_Cols_iNOS_Mst_BizType != null && strRt_Cols_iNOS_Mst_BizType.Length > 0);

                //// drAbilityOfUser:
                //DataRow drAbilityOfUser = myCache_ViewAbility_GetUserInfo(strWAUserCode);

                #endregion

                #region // Sys_Solution: Get.
                ////
                //DataTable dtDB_Sys_Solution = null;
                //{
                //    // GetInfo:
                //    dtDB_Sys_Solution = TDALUtils.DBUtils.GetTableContents(
                //        _cf.db // db
                //        , "Sys_Solution" // strTableName
                //        , "top 1 *" // strColumnList
                //        , "" // strClauseOrderBy
                //        , "FlagActive", "=", TConst.Flag.Active // arrobjParamsTriple item
                //        );
                //}
                #endregion

                #region // Get Data:
                DataSet dsGetData = null;

                if (bGet_iNOS_Mst_BizType)
                {
                    // //
                    Inos_OrgService_GetAllBizTypeX(
                        strTid // strTid
                        , strGwUserCode // strGwUserCode
                        , strGwPassword // strGwPassword
                        , strWAUserCode // strWAUserCode
                        , strWAUserPassword // strWAUserPassword
                        , strAccessToken // strAccessToken
                        , ref mdsFinal // mdsFinal
                        , ref alParamsCoupleError // alParamsCoupleError
                        , dtimeSys // dtimeSys
                                   ////
                                   //, dtDB_Sys_Solution.Rows[0]["SolutionCode"] // objSolutionCode
                                   ////
                        , out dsGetData // dsData
                        );
                }
                CmUtils.DataUtils.MoveDataTable(ref mdsFinal, ref dsGetData);
                #endregion

                // Return Good:
                TDALUtils.DBUtils.RollbackSafety(_cf.db); // Always Rollback.
                mdsFinal.AcceptChanges();
                return mdsFinal;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Rollback:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);

                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsFinal
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Rollback and Release resources:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);
                TDALUtils.DBUtils.ReleaseAllSemaphore(_cf.db_Sys, true);

                // Write ReturnLog:
                _cf.ProcessBizReturn_OutSide(
                    ref mdsFinal // mdsFinal
                    , strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    );
                #endregion
            }
        }
        public DataSet WAS_iNOS_Mst_BizType_Get_New20190813(
            ref ArrayList alParamsCoupleError
            , RQ_iNOS_Mst_BizType objRQ_iNOS_Mst_BizType
            ////
            , out RT_iNOS_Mst_BizType objRT_iNOS_Mst_BizType
            )
        {
            #region // Temp:
            string strTid = objRQ_iNOS_Mst_BizType.Tid;
            objRT_iNOS_Mst_BizType = new RT_iNOS_Mst_BizType();
            DataSet mdsResult = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            DateTime dtimeSys = DateTime.UtcNow;
            //DataSet mdsExec = null;
            //DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(objRQ_iNOS_Mst_BizType.Tid);
            //int nTidSeq = 0;
            //bool bNeedTransaction = true;
            string strFunctionName = "WAS_iNOS_Mst_BizType_Get";
            string strErrorCodeDefault = TError.ErridnInventory.WAS_iNOS_Mst_BizType_Get;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
				});
            #endregion

            try
            {
                #region // Init:
                #endregion

                #region // Refine and Check Input:
                List<MySummaryTable> lst_MySummaryTable = new List<MySummaryTable>();
                List<iNOS_Mst_BizType> lst_iNOS_Mst_BizType = new List<iNOS_Mst_BizType>();
                #endregion

                #region // WS_iNOS_Mst_BizType_Get:
                mdsResult = iNOS_Mst_BizType_Get_New20190813(
                    objRQ_iNOS_Mst_BizType.Tid // strTid
                    , objRQ_iNOS_Mst_BizType.GwUserCode // strGwUserCode
                    , objRQ_iNOS_Mst_BizType.GwPassword // strGwPassword
                    , objRQ_iNOS_Mst_BizType.WAUserCode // strUserCode
                    , objRQ_iNOS_Mst_BizType.WAUserPassword // strUserPassword
                    , objRQ_iNOS_Mst_BizType.AccessToken // strAccessToken
                    , ref alParamsCoupleError // alParamsCoupleError
                                              //// Return:
                    , objRQ_iNOS_Mst_BizType.Rt_Cols_iNOS_Mst_BizType // strRt_Cols_iNOS_Mst_BizType
                    );
                #endregion

                #region // GetData:
                if (!CmUtils.CMyDataSet.HasError(mdsResult))
                {
                    //////
                    //DataTable dt_MySummaryTable = mdsResult.Tables["MySummaryTable"].Copy();
                    //lst_MySummaryTable = TUtils.DataTableCmUtils.ToListof<MySummaryTable>(dt_MySummaryTable);
                    //objRT_iNOS_Mst_BizType.MySummaryTable = lst_MySummaryTable[0];
                    ////
                    DataTable dt_iNOS_Mst_BizType = mdsResult.Tables["iNOS_Mst_BizType"].Copy();
                    lst_iNOS_Mst_BizType = TUtils.DataTableCmUtils.ToListof<iNOS_Mst_BizType>(dt_iNOS_Mst_BizType);
                    objRT_iNOS_Mst_BizType.Lst_iNOS_Mst_BizType = lst_iNOS_Mst_BizType;
                    /////
                }
                #endregion

                // Return Good:
                return mdsResult;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsResult
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Write ReturnLog:
                //_cf.ProcessBizReturn(
                //	ref mdsResult // mdsFinal
                //	, strTid // strTid
                //	, strFunctionName // strFunctionName
                //	);
                #endregion
            }
        }

        public DataSet iNOS_Mst_BizType_Get_New20190813(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , string strAccessToken
            , ref ArrayList alParamsCoupleError
            //// Return:
            , string strRt_Cols_iNOS_Mst_BizType
            )
        {
            #region // Temp:
            DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            //int nTidSeq = 0;
            DateTime dtimeSys = DateTime.UtcNow;
            bool bNeedTransaction = true;
            string strFunctionName = "iNOS_Mst_BizType_Get";
            string strErrorCodeDefault = TError.ErridnInventory.iNOS_Mst_BizType_Get;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				//// Return
				, "strRt_Cols_iNOS_Mst_BizType", strRt_Cols_iNOS_Mst_BizType
                });
            #endregion

            try
            {
                #region // Init:
                //_cf.db.LogUserId = _cf.sinf.strUserCode;
                if (bNeedTransaction) _cf.db.BeginTransaction();

                // Write RequestLog:
                _cf.ProcessBizReq_OutSide(
                    strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    , alParamsCoupleError // alParamsCoupleError
                    );

                //// Sys_User_CheckAuthentication:
                //Sys_User_CheckAuthentication(
                //    ref alParamsCoupleError
                //    , strWAUserCode
                //    , strWAUserPassword
                //    );

                //// Check Access/Deny:
                //Sys_Access_CheckDenyV30(
                //	ref alParamsCoupleError
                //	, strWAUserCode
                //	, strFunctionName
                //	);
                #endregion

                #region // Check:
                //// Refine:
                bool bGet_iNOS_Mst_BizType = (strRt_Cols_iNOS_Mst_BizType != null && strRt_Cols_iNOS_Mst_BizType.Length > 0);

                //// drAbilityOfUser:
                //DataRow drAbilityOfUser = myCache_ViewAbility_GetUserInfo(strWAUserCode);

                #endregion

                #region // Sys_Solution: Get.
                ////
                //DataTable dtDB_Sys_Solution = null;
                //{
                //    // GetInfo:
                //    dtDB_Sys_Solution = TDALUtils.DBUtils.GetTableContents(
                //        _cf.db // db
                //        , "Sys_Solution" // strTableName
                //        , "top 1 *" // strColumnList
                //        , "" // strClauseOrderBy
                //        , "FlagActive", "=", TConst.Flag.Active // arrobjParamsTriple item
                //        );
                //}
                #endregion

                #region // Get Data:
                DataSet dsGetData = null;

                if (bGet_iNOS_Mst_BizType)
                {
                    // //
                    Inos_OrgService_GetAllBizTypeX(
                        strTid // strTid
                        , strGwUserCode // strGwUserCode
                        , strGwPassword // strGwPassword
                        , strWAUserCode // strWAUserCode
                        , strWAUserPassword // strWAUserPassword
                        , strAccessToken // strAccessToken
                        , ref mdsFinal // mdsFinal
                        , ref alParamsCoupleError // alParamsCoupleError
                        , dtimeSys // dtimeSys
                                   ////
                        //, dtDB_Sys_Solution.Rows[0]["SolutionCode"] // objSolutionCode
                                                                    ////
                        , out dsGetData // dsData
                        );
                }
                CmUtils.DataUtils.MoveDataTable(ref mdsFinal, ref dsGetData);
                #endregion

                // Return Good:
                TDALUtils.DBUtils.RollbackSafety(_cf.db); // Always Rollback.
                mdsFinal.AcceptChanges();
                return mdsFinal;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Rollback:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);

                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsFinal
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Rollback and Release resources:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);
                TDALUtils.DBUtils.ReleaseAllSemaphore(_cf.db_Sys, true);

                // Write ReturnLog:
                _cf.ProcessBizReturn_OutSide(
                    ref mdsFinal // mdsFinal
                    , strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    );
                #endregion
            }
        }

        private void Inos_OrgService_GetAllBizTypeX(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , string strAccessToken
            , ref DataSet mdsFinal
            , ref ArrayList alParamsCoupleError
            , DateTime dtimeSys
            ////
            //, object objSolutionCode
            ////
            , out DataSet dsData
            )
        {
            #region // Temp:
            //int nTidSeq = 0;
            //bool bMyDebugSql = false;
            string strFunctionName = "Inos_OrgService_GetAllBizTypeX";
            //string strErrorCodeDefault = TError.ErridnInventory.Inos_AccountService_Register;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
				//, "objSolutionCode", objSolutionCode
                });
            //ArrayList alPCErrEx = new ArrayList();
            ////
            Hashtable htParamsSql = new Hashtable();
            #endregion

            #region // Refine and Check Input:
            ////
            //string strSolutionCode = TUtils.CUtils.StdParam(objSolutionCode);
            List<iNOS_Mst_BizType> lst_iNOS_Mst_BizType = new List<iNOS_Mst_BizType>();
            DataTable dtDB_iNOS_Mst_BizType = TDALUtils.DBUtils.GetSchema(_cf.db, "iNOS_Mst_BizType").Tables[0];

            ////
            dsData = new DataSet();
            #endregion

            #region // Call Service:
            try
            {
                ////
                OrgService objOrgService = new OrgService(null);
                objOrgService.AccessToken = strAccessToken;

                List<BizType> lstBizType = objOrgService.GetAllBizType();

                ////
                foreach (var objItem in lstBizType)
                {
                    ////
                    iNOS_Mst_BizType objiNOS_Mst_BizType = new iNOS_Mst_BizType();
                    string strFN = "";
                    DataRow drDB = dtDB_iNOS_Mst_BizType.NewRow();
                    strFN = "BizType"; drDB[strFN] = objItem.Id;
                    strFN = "BizTypeName"; drDB[strFN] = objItem.Name;
                    dtDB_iNOS_Mst_BizType.Rows.Add(drDB);
                }

                dsData.Tables.Add(dtDB_iNOS_Mst_BizType.Copy());

            }
            catch (Exception exc)
            {
                mbiz.core.Exceptions.ServiceException myexc = new mbiz.core.Exceptions.ServiceException(exc);

                alParamsCoupleError.AddRange(new object[]{
                    "Check.InosExc.ErrorCode", myexc.ErrorCode
                    , "Check.InosExc.ErrorDetail", myexc.ErrorDetail
                    , "Check.InosExc.ErrorMessage", myexc.ErrorMessage
                    , "Check.InosExc.InnerException", myexc.InnerException
                    });

                throw CmUtils.CMyException.Raise(
                    TError.ErridnInventory.Inos_OrgService_GetAllBizType
                    , null
                    , alParamsCoupleError.ToArray()
                    );
            }
            #endregion
        }
        public DataSet WAS_iNOS_Mst_BizType_Get(
            ref ArrayList alParamsCoupleError
            , RQ_iNOS_Mst_BizType objRQ_iNOS_Mst_BizType
            ////
            , out RT_iNOS_Mst_BizType objRT_iNOS_Mst_BizType
            )
        {
            #region // Temp:
            string strTid = objRQ_iNOS_Mst_BizType.Tid;
            objRT_iNOS_Mst_BizType = new RT_iNOS_Mst_BizType();
            DataSet mdsResult = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            DateTime dtimeSys = DateTime.UtcNow;
            //DataSet mdsExec = null;
            //DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(objRQ_iNOS_Mst_BizType.Tid);
            //int nTidSeq = 0;
            //bool bNeedTransaction = true;
            string strFunctionName = "WAS_iNOS_Mst_BizType_Get";
            string strErrorCodeDefault = TError.ErridnInventory.WAS_iNOS_Mst_BizType_Get;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
				});
            #endregion

            try
            {
                #region // Init:
                #endregion

                #region // Refine and Check Input:
                List<MySummaryTable> lst_MySummaryTable = new List<MySummaryTable>();

                List<iNOS_Mst_BizType> lst_iNOS_Mst_BizType = new List<iNOS_Mst_BizType>();
                #endregion

                #region // WS_iNOS_Mst_BizType_Get:
                mdsResult = iNOS_Mst_BizType_Get(
                    objRQ_iNOS_Mst_BizType.Tid // strTid
                    , objRQ_iNOS_Mst_BizType.GwUserCode // strGwUserCode
                    , objRQ_iNOS_Mst_BizType.GwPassword // strGwPassword
                    , objRQ_iNOS_Mst_BizType.WAUserCode // strUserCode
                    , objRQ_iNOS_Mst_BizType.WAUserPassword // strUserPassword
                    , ref alParamsCoupleError // alParamsCoupleError
                                              //// Filter:
                    , objRQ_iNOS_Mst_BizType.Ft_RecordStart // strFt_RecordStart
                    , objRQ_iNOS_Mst_BizType.Ft_RecordCount // strFt_RecordCount
                    , objRQ_iNOS_Mst_BizType.Ft_WhereClause // strFt_WhereClause
                                                            //// Return:
                    , objRQ_iNOS_Mst_BizType.Rt_Cols_iNOS_Mst_BizType // strRt_Cols_iNOS_Mst_BizType
                    );
                #endregion

                #region // GetData:
                if (!CmUtils.CMyDataSet.HasError(mdsResult))
                {
                    ////
                    DataTable dt_MySummaryTable = mdsResult.Tables["MySummaryTable"].Copy();
                    lst_MySummaryTable = TUtils.DataTableCmUtils.ToListof<MySummaryTable>(dt_MySummaryTable);
                    objRT_iNOS_Mst_BizType.MySummaryTable = lst_MySummaryTable[0];


                    ////
                    DataTable dt_iNOS_Mst_BizType = mdsResult.Tables["iNOS_Mst_BizType"].Copy();
                    lst_iNOS_Mst_BizType = TUtils.DataTableCmUtils.ToListof<iNOS_Mst_BizType>(dt_iNOS_Mst_BizType);
                    objRT_iNOS_Mst_BizType.Lst_iNOS_Mst_BizType = lst_iNOS_Mst_BizType;
                    /////
                }
                #endregion

                // Return Good:
                return mdsResult;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsResult
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Write ReturnLog:
                //_cf.ProcessBizReturn(
                //	ref mdsResult // mdsFinal
                //	, strTid // strTid
                //	, strFunctionName // strFunctionName
                //	);
                #endregion
            }
        }
        private void iNOS_Mst_BizType_GetX(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            , DateTime dtimeSys
            //// Filter:
            , string strFt_RecordStart
            , string strFt_RecordCount
            , string strFt_WhereClause
            //// Return:
            , string strRt_Cols_iNOS_Mst_BizType
            ////
            , out DataSet dsGetData
            )
        {
            #region // Temp:
            //DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            //DateTime dtimeSys = DateTime.UtcNow;
            //bool bNeedTransaction = true;
            string strFunctionName = "iNOS_Mst_BizType_GetX";
            //string strErrorCodeDefault = TError.ErrHTCNM.Mnf_VIN_Get_QCX;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
                });
            #endregion

            #region // Check:
            //// Refine:
            long nFilterRecordStart = Convert.ToInt64(strFt_RecordStart);
            long nFilterRecordEnd = nFilterRecordStart + Convert.ToInt64(strFt_RecordCount) - 1;
            bool bGet_iNOS_Mst_BizType = (strRt_Cols_iNOS_Mst_BizType != null && strRt_Cols_iNOS_Mst_BizType.Length > 0);

            //// drAbimbtpityOfUser:
            //DataRow drAbimbtpityOfUser = myCache_ViewAbimbtpity_GetUserInfo(_cf.sinf.strUserCode);

            #endregion

            #region // Buimbtpd Sql:
            ////
            ArrayList alParamsCoupleSql = new ArrayList();
            alParamsCoupleSql.AddRange(new object[] {
                "@nFilterRecordStart", nFilterRecordStart
                , "@nFilterRecordEnd", nFilterRecordEnd
                });
            ////
            //myCache_ViewAbimbtpity_GetDealerInfo(drAbimbtpityOfUser);
            ////
            string strSqlGetData = CmUtils.StringUtils.Replace(@"
					---- #tbl_iNOS_Mst_BizType_Filter_Draft:
					select distinct
						identity(bigint, 0, 1) MyIdxSeq
						, imbtp.BizType
					into #tbl_iNOS_Mst_BizType_Filter_Draft
					from iNOS_Mst_BizType imbtp --//[mylock]
					where (1=1)
						zzB_Where_strFilter_zzE
					order by imbtp.BizType asc
					;

					---- Summary:
					select Count(0) MyCount from #tbl_iNOS_Mst_BizType_Filter_Draft t --//[mylock]
					;

					---- #tbl_iNOS_Mst_BizType_Filter:
					select
						t.*
					into #tbl_iNOS_Mst_BizType_Filter
					from #tbl_iNOS_Mst_BizType_Filter_Draft t --//[mylock]
					where (1=1)
						and (t.MyIdxSeq >= @nFilterRecordStart)
						and (t.MyIdxSeq <= @nFilterRecordEnd)
					;

					-------- iNOS_Mst_BizType -----:
					zzB_Select_iNOS_Mst_BizType_zzE
					-------------------------------

					---- Clear for debug:
					--drop table #tbl_iNOS_Mst_BizType_Filter_Draft;
					--drop table #tbl_iNOS_Mst_BizType_Filter;
				"
                );
            ////
            string zzB_Select_iNOS_Mst_BizType_zzE = "-- Nothing.";
            if (bGet_iNOS_Mst_BizType)
            {
                #region // bGet_iNOS_Mst_BizType:
                zzB_Select_iNOS_Mst_BizType_zzE = CmUtils.StringUtils.Replace(@"
					---- iNOS_Mst_BizType:
					select
						t.MyIdxSeq
						, imbtp.*
					from #tbl_iNOS_Mst_BizType_Filter t --//[mylock]
						inner join iNOS_Mst_BizType imbtp --//[mylock]
							on t.BizType = imbtp.BizType
					order by t.MyIdxSeq asc
					;
				"
                );
                #endregion
            }
            ////
            string zzB_Where_strFilter_zzE = "";
            {
                Hashtable htSpCols = new Hashtable();
                {
                    #region // htSpCols:
                    ////
                    TUtils.CUtils.MyBuildHTSupportedColumns(
                        _cf.db // db
                        , ref htSpCols // htSupportedColumns
                        , "iNOS_Mst_BizType" // strTableNameDB
                        , "iNOS_Mst_BizType." // strPrefixStd
                        , "imbtp." // strPrefixAlias
                        );
                    ////
                    #endregion
                }
                zzB_Where_strFilter_zzE = CmUtils.SqlUtils.BuildWhere(
                    htSpCols // htSpCols
                    , strFt_WhereClause // strClause
                    , "@p_" // strParamPrefix
                    , ref alParamsCoupleSql // alParamsCoupleSql
                    );
                zzB_Where_strFilter_zzE = (zzB_Where_strFilter_zzE.Length <= 0 ? "" : string.Format(" and ({0})", zzB_Where_strFilter_zzE));
                alParamsCoupleError.AddRange(new object[]{
                    "zzB_Where_strFilter_zzE", zzB_Where_strFilter_zzE
                    });
            }
            ////
            strSqlGetData = CmUtils.StringUtils.Replace(
                strSqlGetData
                , "zzB_Where_strFilter_zzE", zzB_Where_strFilter_zzE
                , "zzB_Select_iNOS_Mst_BizType_zzE", zzB_Select_iNOS_Mst_BizType_zzE
                );
            #endregion

            #region // Get Data:
            dsGetData = _cf.db.ExecQuery(
                strSqlGetData
                , alParamsCoupleSql.ToArray()
                );
            int nIdxTable = 0;
            dsGetData.Tables[nIdxTable++].TableName = "MySummaryTable";
            if (bGet_iNOS_Mst_BizType)
            {
                dsGetData.Tables[nIdxTable++].TableName = "iNOS_Mst_BizType";
            }
            #endregion
        }
        public DataSet iNOS_Mst_BizType_Get(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            //// Filter:
            , string strFt_RecordStart
            , string strFt_RecordCount
            , string strFt_WhereClause
            //// Return:
            , string strRt_Cols_iNOS_Mst_BizType
            )
        {
            #region // Temp:
            DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            //int nTidSeq = 0;
            DateTime dtimeSys = DateTime.UtcNow;
            string strFunctionName = "iNOS_Mst_BizType_Get";
            string strErrorCodeDefault = TError.ErridnInventory.iNOS_Mst_BizType_Get;
            alParamsCoupleError.AddRange(new object[]{
                    "strFunctionName", strFunctionName
                    , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
			        //// Filter
					, "strFt_RecordStart", strFt_RecordStart
                    , "strFt_RecordCount", strFt_RecordCount
                    , "strFt_WhereClause", strFt_WhereClause
			        //// Return
					, "strRt_Cols_iNOS_Mst_BizType", strRt_Cols_iNOS_Mst_BizType
                    });
            #endregion

            try
            {
                #region // Init:
                //_cf.db.LogUserId = _cf.sinf.strUserCode;
                _cf.db.BeginTransaction();

                // Write RequestLog:
                _cf.ProcessBizReq_OutSide(
                    strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    , alParamsCoupleError // alParamsCoupleError
                    );

                //// Sys_User_CheckAuthentication:
                //Sys_User_CheckAuthentication(
                //    ref alParamsCoupleError
                //    , strWAUserCode
                //    , strWAUserPassword
                //    );

                //// Check Access/Deny:
                //Sys_Access_CheckDenyV30(
                //    ref alParamsCoupleError
                //    , strWAUserCode
                //    , strFunctionName
                //    );
                #endregion

                #region // iNOS_Mst_BizType_GetX:
                DataSet dsGetData = null;
                {
                    ////
                    iNOS_Mst_BizType_GetX(
                        strTid // strTid
                        , strGwUserCode // strGwUserCode
                        , strGwPassword // strGwPassword
                        , strWAUserCode // strWAUserCode
                        , strWAUserPassword // strWAUserPassword
                        , ref alParamsCoupleError // alParamsCoupleError
                        , dtimeSys // dtimeSys
                                   ////
                        , strFt_RecordStart // strFt_RecordStart
                        , strFt_RecordCount // strFt_RecordCount
                        , strFt_WhereClause // strFt_WhereClause
                                            ////
                        , strRt_Cols_iNOS_Mst_BizType // strRt_Cols_iNOS_Mst_BizType
                                                      ////
                        , out dsGetData // dsGetData
                        );
                    ////
                    CmUtils.DataUtils.MoveDataTable(ref mdsFinal, ref dsGetData);
                }
                #endregion

                // Return Good:
                TDALUtils.DBUtils.RollbackSafety(_cf.db); // Always Rollback.
                mdsFinal.AcceptChanges();
                return mdsFinal;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Rollback:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);

                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsFinal
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Rollback and Release resources:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);
                TDALUtils.DBUtils.ReleaseAllSemaphore(_cf.db_Sys, true);

                // Write ReturnLog:
                _cf.ProcessBizReturn_OutSide(
                    ref mdsFinal // mdsFinal
                    , strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    );
                #endregion
            }
        }
        #endregion

        #region // iNOS_Mst_BizSize:
        public DataSet WAS_RptSv_iNOS_Mst_BizSize_Get_New20190813(
            ref ArrayList alParamsCoupleError
            , RQ_iNOS_Mst_BizSize objRQ_iNOS_Mst_BizSize
            ////
            , out RT_iNOS_Mst_BizSize objRT_iNOS_Mst_BizSize
            )
        {
            #region // Temp:
            string strTid = objRQ_iNOS_Mst_BizSize.Tid;
            objRT_iNOS_Mst_BizSize = new RT_iNOS_Mst_BizSize();
            DataSet mdsResult = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            DateTime dtimeSys = DateTime.UtcNow;
            //DataSet mdsExec = null;
            //DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(objRQ_iNOS_Mst_BizSize.Tid);
            //int nTidSeq = 0;
            //bool bNeedTransaction = true;
            string strFunctionName = "WAS_RptSv_iNOS_Mst_BizSize_Get";
            string strErrorCodeDefault = TError.ErridnInventory.WAS_RptSv_iNOS_Mst_BizSize_Get;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
				});
            #endregion

            try
            {
                #region // Init:
                #endregion

                #region // Refine and Check Input:
                List<MySummaryTable> lst_MySummaryTable = new List<MySummaryTable>();
                List<iNOS_Mst_BizSize> lst_iNOS_Mst_BizSize = new List<iNOS_Mst_BizSize>();
                #endregion

                #region // WS_RptSv_iNOS_Mst_BizSize_Get:
                mdsResult = RptSv_iNOS_Mst_BizSize_Get_New20190813(
                    objRQ_iNOS_Mst_BizSize.Tid // strTid
                    , objRQ_iNOS_Mst_BizSize.GwUserCode // strGwUserCode
                    , objRQ_iNOS_Mst_BizSize.GwPassword // strGwPassword
                    , objRQ_iNOS_Mst_BizSize.WAUserCode // strUserCode
                    , objRQ_iNOS_Mst_BizSize.WAUserPassword // strUserPassword
                    , objRQ_iNOS_Mst_BizSize.AccessToken // strAccessToken
                    , ref alParamsCoupleError // alParamsCoupleError
                                              //// Return:
                    , objRQ_iNOS_Mst_BizSize.Rt_Cols_iNOS_Mst_BizSize // strRt_Cols_iNOS_Mst_BizSize
                    );
                #endregion

                #region // GetData:
                if (!CmUtils.CMyDataSet.HasError(mdsResult))
                {
                    //////
                    //DataTable dt_MySummaryTable = mdsResult.Tables["MySummaryTable"].Copy();
                    //lst_MySummaryTable = TUtils.DataTableCmUtils.ToListof<MySummaryTable>(dt_MySummaryTable);
                    //objRT_iNOS_Mst_BizSize.MySummaryTable = lst_MySummaryTable[0];
                    ////
                    DataTable dt_iNOS_Mst_BizSize = mdsResult.Tables["iNOS_Mst_BizSize"].Copy();
                    lst_iNOS_Mst_BizSize = TUtils.DataTableCmUtils.ToListof<iNOS_Mst_BizSize>(dt_iNOS_Mst_BizSize);
                    objRT_iNOS_Mst_BizSize.Lst_iNOS_Mst_BizSize = lst_iNOS_Mst_BizSize;
                    /////
                }
                #endregion

                // Return Good:
                return mdsResult;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsResult
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Write ReturnLog:
                //_cf.ProcessBizReturn(
                //	ref mdsResult // mdsFinal
                //	, strTid // strTid
                //	, strFunctionName // strFunctionName
                //	);
                #endregion
            }
        }

        public DataSet RptSv_iNOS_Mst_BizSize_Get_New20190813(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , string strAccessToken
            , ref ArrayList alParamsCoupleError
            //// Return:
            , string strRt_Cols_iNOS_Mst_BizSize
            )
        {
            #region // Temp:
            DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            //int nTidSeq = 0;
            DateTime dtimeSys = DateTime.UtcNow;
            bool bNeedTransaction = true;
            string strFunctionName = "iNOS_Mst_BizSize_Get";
            string strErrorCodeDefault = TError.ErridnInventory.RptSv_iNOS_Mst_BizSize_Get;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				//// Return
				, "strRt_Cols_iNOS_Mst_BizSize", strRt_Cols_iNOS_Mst_BizSize
                });
            #endregion

            try
            {
                #region // Init:
                //_cf.db.LogUserId = _cf.sinf.strUserCode;
                if (bNeedTransaction) _cf.db.BeginTransaction();

                // Write RequestLog:
                _cf.ProcessBizReq_OutSide(
                    strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    , alParamsCoupleError // alParamsCoupleError
                    );

                //// RptSv_Sys_User_CheckAuthentication:
                //RptSv_Sys_User_CheckAuthentication(
                //    ref alParamsCoupleError
                //    , strWAUserCode
                //    , strWAUserPassword
                //    );

                //// Check Access/Deny:
                //Sys_Access_CheckDenyV30(
                //	ref alParamsCoupleError
                //	, strWAUserCode
                //	, strFunctionName
                //	);
                #endregion

                #region // Check:
                //// Refine:
                bool bGet_iNOS_Mst_BizSize = (strRt_Cols_iNOS_Mst_BizSize != null && strRt_Cols_iNOS_Mst_BizSize.Length > 0);

                //// drAbilityOfUser:
                //DataRow drAbilityOfUser = myCache_ViewAbility_GetUserInfo(strWAUserCode);

                #endregion

                #region // Sys_Solution: Get.
                ////
                //DataTable dtDB_Sys_Solution = null;
                //{
                //    // GetInfo:
                //    dtDB_Sys_Solution = TDALUtils.DBUtils.GetTableContents(
                //        _cf.db // db
                //        , "Sys_Solution" // strTableName
                //        , "top 1 *" // strColumnList
                //        , "" // strClauseOrderBy
                //        , "FlagActive", "=", TConst.Flag.Active // arrobjParamsTriple item
                //        );
                //}
                #endregion

                #region // Get Data:
                DataSet dsGetData = null;

                if (bGet_iNOS_Mst_BizSize)
                {
                    // //
                    Inos_OrgService_GetAllBizSizeX(
                        strTid // strTid
                        , strGwUserCode // strGwUserCode
                        , strGwPassword // strGwPassword
                        , strWAUserCode // strWAUserCode
                        , strWAUserPassword // strWAUserPassword
                        , strAccessToken // strAccessToken
                        , ref mdsFinal // mdsFinal
                        , ref alParamsCoupleError // alParamsCoupleError
                        , dtimeSys // dtimeSys
                                   ////
                                   //, dtDB_Sys_Solution.Rows[0]["SolutionCode"] // objSolutionCode
                                   ////
                        , out dsGetData // dsData
                        );
                }
                CmUtils.DataUtils.MoveDataTable(ref mdsFinal, ref dsGetData);
                #endregion

                // Return Good:
                TDALUtils.DBUtils.RollbackSafety(_cf.db); // Always Rollback.
                mdsFinal.AcceptChanges();
                return mdsFinal;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Rollback:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);

                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsFinal
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Rollback and Release resources:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);
                TDALUtils.DBUtils.ReleaseAllSemaphore(_cf.db_Sys, true);

                // Write ReturnLog:
                _cf.ProcessBizReturn_OutSide(
                    ref mdsFinal // mdsFinal
                    , strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    );
                #endregion
            }
        }
        public DataSet WAS_iNOS_Mst_BizSize_Get_New20190813(
            ref ArrayList alParamsCoupleError
            , RQ_iNOS_Mst_BizSize objRQ_iNOS_Mst_BizSize
            ////
            , out RT_iNOS_Mst_BizSize objRT_iNOS_Mst_BizSize
            )
        {
            #region // Temp:
            string strTid = objRQ_iNOS_Mst_BizSize.Tid;
            objRT_iNOS_Mst_BizSize = new RT_iNOS_Mst_BizSize();
            DataSet mdsResult = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            DateTime dtimeSys = DateTime.UtcNow;
            //DataSet mdsExec = null;
            //DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(objRQ_iNOS_Mst_BizSize.Tid);
            //int nTidSeq = 0;
            //bool bNeedTransaction = true;
            string strFunctionName = "WAS_iNOS_Mst_BizSize_Get";
            string strErrorCodeDefault = TError.ErridnInventory.WAS_iNOS_Mst_BizSize_Get;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
				});
            #endregion

            try
            {
                #region // Init:
                #endregion

                #region // Refine and Check Input:
                List<MySummaryTable> lst_MySummaryTable = new List<MySummaryTable>();
                List<iNOS_Mst_BizSize> lst_iNOS_Mst_BizSize = new List<iNOS_Mst_BizSize>();
                #endregion

                #region // WS_iNOS_Mst_BizSize_Get:
                mdsResult = iNOS_Mst_BizSize_Get_New20190813(
                    objRQ_iNOS_Mst_BizSize.Tid // strTid
                    , objRQ_iNOS_Mst_BizSize.GwUserCode // strGwUserCode
                    , objRQ_iNOS_Mst_BizSize.GwPassword // strGwPassword
                    , objRQ_iNOS_Mst_BizSize.WAUserCode // strUserCode
                    , objRQ_iNOS_Mst_BizSize.WAUserPassword // strUserPassword
                    , objRQ_iNOS_Mst_BizSize.AccessToken // strAccessToken
                    , ref alParamsCoupleError // alParamsCoupleError
                                              //// Return:
                    , objRQ_iNOS_Mst_BizSize.Rt_Cols_iNOS_Mst_BizSize // strRt_Cols_iNOS_Mst_BizSize
                    );
                #endregion

                #region // GetData:
                if (!CmUtils.CMyDataSet.HasError(mdsResult))
                {
                    //////
                    //DataTable dt_MySummaryTable = mdsResult.Tables["MySummaryTable"].Copy();
                    //lst_MySummaryTable = TUtils.DataTableCmUtils.ToListof<MySummaryTable>(dt_MySummaryTable);
                    //objRT_iNOS_Mst_BizSize.MySummaryTable = lst_MySummaryTable[0];
                    ////
                    DataTable dt_iNOS_Mst_BizSize = mdsResult.Tables["iNOS_Mst_BizSize"].Copy();
                    lst_iNOS_Mst_BizSize = TUtils.DataTableCmUtils.ToListof<iNOS_Mst_BizSize>(dt_iNOS_Mst_BizSize);
                    objRT_iNOS_Mst_BizSize.Lst_iNOS_Mst_BizSize = lst_iNOS_Mst_BizSize;
                    /////
                }
                #endregion

                // Return Good:
                return mdsResult;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsResult
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Write ReturnLog:
                //_cf.ProcessBizReturn(
                //	ref mdsResult // mdsFinal
                //	, strTid // strTid
                //	, strFunctionName // strFunctionName
                //	);
                #endregion
            }
        }

        public DataSet iNOS_Mst_BizSize_Get_New20190813(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , string strAccessToken
            , ref ArrayList alParamsCoupleError
            //// Return:
            , string strRt_Cols_iNOS_Mst_BizSize
            )
        {
            #region // Temp:
            DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            //int nTidSeq = 0;
            DateTime dtimeSys = DateTime.UtcNow;
            bool bNeedTransaction = true;
            string strFunctionName = "iNOS_Mst_BizSize_Get";
            string strErrorCodeDefault = TError.ErridnInventory.iNOS_Mst_BizSize_Get;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				//// Return
				, "strRt_Cols_iNOS_Mst_BizSize", strRt_Cols_iNOS_Mst_BizSize
                });
            #endregion

            try
            {
                #region // Init:
                //_cf.db.LogUserId = _cf.sinf.strUserCode;
                if (bNeedTransaction) _cf.db.BeginTransaction();

                // Write RequestLog:
                _cf.ProcessBizReq_OutSide(
                    strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    , alParamsCoupleError // alParamsCoupleError
                    );

                //// Sys_User_CheckAuthentication:
                //Sys_User_CheckAuthentication(
                //    ref alParamsCoupleError
                //    , strWAUserCode
                //    , strWAUserPassword
                //    );

                //// Check Access/Deny:
                //Sys_Access_CheckDenyV30(
                //	ref alParamsCoupleError
                //	, strWAUserCode
                //	, strFunctionName
                //	);
                #endregion

                #region // Check:
                //// Refine:
                bool bGet_iNOS_Mst_BizSize = (strRt_Cols_iNOS_Mst_BizSize != null && strRt_Cols_iNOS_Mst_BizSize.Length > 0);

                //// drAbilityOfUser:
                //DataRow drAbilityOfUser = myCache_ViewAbility_GetUserInfo(strWAUserCode);

                #endregion

                #region // Sys_Solution: Get.
                ////
                //DataTable dtDB_Sys_Solution = null;
                //{
                //    // GetInfo:
                //    dtDB_Sys_Solution = TDALUtils.DBUtils.GetTableContents(
                //        _cf.db // db
                //        , "Sys_Solution" // strTableName
                //        , "top 1 *" // strColumnList
                //        , "" // strClauseOrderBy
                //        , "FlagActive", "=", TConst.Flag.Active // arrobjParamsTriple item
                //        );
                //}
                #endregion

                #region // Get Data:
                DataSet dsGetData = null;

                if (bGet_iNOS_Mst_BizSize)
                {
                    // //
                    Inos_OrgService_GetAllBizSizeX(
                        strTid // strTid
                        , strGwUserCode // strGwUserCode
                        , strGwPassword // strGwPassword
                        , strWAUserCode // strWAUserCode
                        , strWAUserPassword // strWAUserPassword
                        , strAccessToken // strAccessToken
                        , ref mdsFinal // mdsFinal
                        , ref alParamsCoupleError // alParamsCoupleError
                        , dtimeSys // dtimeSys
                                   ////
                                   //, dtDB_Sys_Solution.Rows[0]["SolutionCode"] // objSolutionCode
                                   ////
                        , out dsGetData // dsData
                        );
                }
                CmUtils.DataUtils.MoveDataTable(ref mdsFinal, ref dsGetData);
                #endregion

                // Return Good:
                TDALUtils.DBUtils.RollbackSafety(_cf.db); // Always Rollback.
                mdsFinal.AcceptChanges();
                return mdsFinal;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Rollback:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);

                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsFinal
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Rollback and Release resources:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);
                TDALUtils.DBUtils.ReleaseAllSemaphore(_cf.db_Sys, true);

                // Write ReturnLog:
                _cf.ProcessBizReturn_OutSide(
                    ref mdsFinal // mdsFinal
                    , strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    );
                #endregion
            }
        }

        private void Inos_OrgService_GetAllBizSizeX(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , string strAccessToken
            , ref DataSet mdsFinal
            , ref ArrayList alParamsCoupleError
            , DateTime dtimeSys
            ////
            //, object objSolutionCode
            ////
            , out DataSet dsData
            )
        {
            #region // Temp:
            //int nTidSeq = 0;
            //bool bMyDebugSql = false;
            string strFunctionName = "Inos_OrgService_GetAllBizTypeX";
            //string strErrorCodeDefault = TError.ErridnInventory.Inos_AccountService_Register;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
				//, "objSolutionCode", objSolutionCode
                });
            //ArrayList alPCErrEx = new ArrayList();
            ////
            Hashtable htParamsSql = new Hashtable();
            #endregion

            #region // Refine and Check Input:
            ////
            //string strSolutionCode = TUtils.CUtils.StdParam(objSolutionCode);
            List<iNOS_Mst_BizSize> lst_iNOS_Mst_BizSize = new List<iNOS_Mst_BizSize>();
            DataTable dtDB_iNOS_Mst_BizSize = TDALUtils.DBUtils.GetSchema(_cf.db, "iNOS_Mst_BizSize").Tables[0];

            ////
            dsData = new DataSet();
            #endregion

            #region // Call Service:
            try
            {
                ////
                var dict = new Dictionary<int, string>();
                foreach (var name in Enum.GetNames(typeof(OrgSizes)))
                {
                    dict.Add((int)Enum.Parse(typeof(OrgSizes), name), name);
                }
                foreach (var objItem in dict)
                {
                    ////
                    iNOS_Mst_BizSize objiNOS_Mst_BizSize = new iNOS_Mst_BizSize();
                    string strFN = "";
                    DataRow drDB = dtDB_iNOS_Mst_BizSize.NewRow();
                    strFN = "BizSizeCode"; drDB[strFN] = objItem.Key;
                    strFN = "BizSizeName"; drDB[strFN] = objItem.Value;
                    //strFN = "NetworkID"; drDB[strFN] = nNetworkID;
                    dtDB_iNOS_Mst_BizSize.Rows.Add(drDB);
                }

                dsData.Tables.Add(dtDB_iNOS_Mst_BizSize.Copy());

            }
            catch (Exception exc)
            {
                mbiz.core.Exceptions.ServiceException myexc = new mbiz.core.Exceptions.ServiceException(exc);

                alParamsCoupleError.AddRange(new object[]{
                    "Check.InosExc.ErrorCode", myexc.ErrorCode
                    , "Check.InosExc.ErrorDetail", myexc.ErrorDetail
                    , "Check.InosExc.ErrorMessage", myexc.ErrorMessage
                    , "Check.InosExc.InnerException", myexc.InnerException
                    });

                throw CmUtils.CMyException.Raise(
                    TError.ErridnInventory.Inos_AccountService_Register
                    , null
                    , alParamsCoupleError.ToArray()
                    );
            }
            #endregion
        }


        public DataSet WAS_iNOS_Mst_BizSize_Get(
            ref ArrayList alParamsCoupleError
            , RQ_iNOS_Mst_BizSize objRQ_iNOS_Mst_BizSize
            ////
            , out RT_iNOS_Mst_BizSize objRT_iNOS_Mst_BizSize
            )
        {
            #region // Temp:
            string strTid = objRQ_iNOS_Mst_BizSize.Tid;
            objRT_iNOS_Mst_BizSize = new RT_iNOS_Mst_BizSize();
            DataSet mdsResult = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            DateTime dtimeSys = DateTime.UtcNow;
            //DataSet mdsExec = null;
            //DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(objRQ_iNOS_Mst_BizSize.Tid);
            //int nTidSeq = 0;
            //bool bNeedTransaction = true;
            string strFunctionName = "WAS_iNOS_Mst_BizSize_Get";
            string strErrorCodeDefault = TError.ErridnInventory.WAS_iNOS_Mst_BizSize_Get;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
				});
            #endregion

            try
            {
                #region // Init:
                #endregion

                #region // Refine and Check Input:
                List<MySummaryTable> lst_MySummaryTable = new List<MySummaryTable>();

                List<iNOS_Mst_BizSize> lst_iNOS_Mst_BizSize = new List<iNOS_Mst_BizSize>();
                #endregion

                #region // WS_iNOS_Mst_BizSize_Get:
                mdsResult = iNOS_Mst_BizSize_Get(
                    objRQ_iNOS_Mst_BizSize.Tid // strTid
                    , objRQ_iNOS_Mst_BizSize.GwUserCode // strGwUserCode
                    , objRQ_iNOS_Mst_BizSize.GwPassword // strGwPassword
                    , objRQ_iNOS_Mst_BizSize.WAUserCode // strUserCode
                    , objRQ_iNOS_Mst_BizSize.WAUserPassword // strUserPassword
                    , ref alParamsCoupleError // alParamsCoupleError
                                              //// Filter:
                    , objRQ_iNOS_Mst_BizSize.Ft_RecordStart // strFt_RecordStart
                    , objRQ_iNOS_Mst_BizSize.Ft_RecordCount // strFt_RecordCount
                    , objRQ_iNOS_Mst_BizSize.Ft_WhereClause // strFt_WhereClause
                                                            //// Return:
                    , objRQ_iNOS_Mst_BizSize.Rt_Cols_iNOS_Mst_BizSize // strRt_Cols_iNOS_Mst_BizSize
                    );
                #endregion

                #region // GetData:
                if (!CmUtils.CMyDataSet.HasError(mdsResult))
                {
                    ////
                    DataTable dt_MySummaryTable = mdsResult.Tables["MySummaryTable"].Copy();
                    lst_MySummaryTable = TUtils.DataTableCmUtils.ToListof<MySummaryTable>(dt_MySummaryTable);
                    objRT_iNOS_Mst_BizSize.MySummaryTable = lst_MySummaryTable[0];

                    ////
                    DataTable dt_iNOS_Mst_BizSize = mdsResult.Tables["iNOS_Mst_BizSize"].Copy();
                    lst_iNOS_Mst_BizSize = TUtils.DataTableCmUtils.ToListof<iNOS_Mst_BizSize>(dt_iNOS_Mst_BizSize);
                    objRT_iNOS_Mst_BizSize.Lst_iNOS_Mst_BizSize = lst_iNOS_Mst_BizSize;
                    /////
                }
                #endregion

                // Return Good:
                return mdsResult;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsResult
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Write ReturnLog:
                //_cf.ProcessBizReturn(
                //	ref mdsResult // mdsFinal
                //	, strTid // strTid
                //	, strFunctionName // strFunctionName
                //	);
                #endregion
            }
        }
        private void iNOS_Mst_BizSize_GetX(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            , DateTime dtimeSys
            //// Filter:
            , string strFt_RecordStart
            , string strFt_RecordCount
            , string strFt_WhereClause
            //// Return:
            , string strRt_Cols_iNOS_Mst_BizSize
            ////
            , out DataSet dsGetData
            )
        {
            #region // Temp:
            //DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            //DateTime dtimeSys = DateTime.UtcNow;
            //bool bNeedTransaction = true;
            string strFunctionName = "iNOS_Mst_BizSize_GetX";
            //string strErrorCodeDefault = TError.ErrHTCNM.Mnf_VIN_Get_QCX;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
                });
            #endregion

            #region // Check:
            //// Refine:
            long nFilterRecordStart = Convert.ToInt64(strFt_RecordStart);
            long nFilterRecordEnd = nFilterRecordStart + Convert.ToInt64(strFt_RecordCount) - 1;
            bool bGet_iNOS_Mst_BizSize = (strRt_Cols_iNOS_Mst_BizSize != null && strRt_Cols_iNOS_Mst_BizSize.Length > 0);

            //// drAbimbsityOfUser:
            //DataRow drAbimbsityOfUser = myCache_ViewAbimbsity_GetUserInfo(_cf.sinf.strUserCode);

            #endregion

            #region // Buimbsd Sql:
            ////
            ArrayList alParamsCoupleSql = new ArrayList();
            alParamsCoupleSql.AddRange(new object[] {
                "@nFilterRecordStart", nFilterRecordStart
                , "@nFilterRecordEnd", nFilterRecordEnd
                });
            ////
            //myCache_ViewAbimbsity_GetDealerInfo(drAbimbsityOfUser);
            ////
            string strSqlGetData = CmUtils.StringUtils.Replace(@"
					---- #tbl_iNOS_Mst_BizSize_Filter_Draft:
					select distinct
						identity(bigint, 0, 1) MyIdxSeq
						, imbs.BizSizeCode
					into #tbl_iNOS_Mst_BizSize_Filter_Draft
					from iNOS_Mst_BizSize imbs --//[mylock]
					where (1=1)
						zzB_Where_strFilter_zzE
					order by imbs.BizSizeCode asc
					;

					---- Summary:
					select Count(0) MyCount from #tbl_iNOS_Mst_BizSize_Filter_Draft t --//[mylock]
					;

					---- #tbl_iNOS_Mst_BizSize_Filter:
					select
						t.*
					into #tbl_iNOS_Mst_BizSize_Filter
					from #tbl_iNOS_Mst_BizSize_Filter_Draft t --//[mylock]
					where (1=1)
						and (t.MyIdxSeq >= @nFilterRecordStart)
						and (t.MyIdxSeq <= @nFilterRecordEnd)
					;

					-------- iNOS_Mst_BizSize -----:
					zzB_Select_iNOS_Mst_BizSize_zzE
					-------------------------------

					---- Clear for debug:
					--drop table #tbl_iNOS_Mst_BizSize_Filter_Draft;
					--drop table #tbl_iNOS_Mst_BizSize_Filter;
				"
                );
            ////
            string zzB_Select_iNOS_Mst_BizSize_zzE = "-- Nothing.";
            if (bGet_iNOS_Mst_BizSize)
            {
                #region // bGet_iNOS_Mst_BizSize:
                zzB_Select_iNOS_Mst_BizSize_zzE = CmUtils.StringUtils.Replace(@"
					---- iNOS_Mst_BizSize:
					select
						t.MyIdxSeq
						, imbs.*
					from #tbl_iNOS_Mst_BizSize_Filter t --//[mylock]
						inner join iNOS_Mst_BizSize imbs --//[mylock]
							on t.BizSizeCode = imbs.BizSizeCode
					order by t.MyIdxSeq asc
					;
				"
                );
                #endregion
            }
            ////
            string zzB_Where_strFilter_zzE = "";
            {
                Hashtable htSpCols = new Hashtable();
                {
                    #region // htSpCols:
                    ////
                    TUtils.CUtils.MyBuildHTSupportedColumns(
                        _cf.db // db
                        , ref htSpCols // htSupportedColumns
                        , "iNOS_Mst_BizSize" // strTableNameDB
                        , "iNOS_Mst_BizSize." // strPrefixStd
                        , "imbs." // strPrefixAlias
                        );
                    ////
                    #endregion
                }
                zzB_Where_strFilter_zzE = CmUtils.SqlUtils.BuildWhere(
                    htSpCols // htSpCols
                    , strFt_WhereClause // strClause
                    , "@p_" // strParamPrefix
                    , ref alParamsCoupleSql // alParamsCoupleSql
                    );
                zzB_Where_strFilter_zzE = (zzB_Where_strFilter_zzE.Length <= 0 ? "" : string.Format(" and ({0})", zzB_Where_strFilter_zzE));
                alParamsCoupleError.AddRange(new object[]{
                    "zzB_Where_strFilter_zzE", zzB_Where_strFilter_zzE
                    });
            }
            ////
            strSqlGetData = CmUtils.StringUtils.Replace(
                strSqlGetData
                , "zzB_Where_strFilter_zzE", zzB_Where_strFilter_zzE
                , "zzB_Select_iNOS_Mst_BizSize_zzE", zzB_Select_iNOS_Mst_BizSize_zzE
                );
            #endregion

            #region // Get Data:
            dsGetData = _cf.db.ExecQuery(
                strSqlGetData
                , alParamsCoupleSql.ToArray()
                );
            int nIdxTable = 0;
            dsGetData.Tables[nIdxTable++].TableName = "MySummaryTable";
            if (bGet_iNOS_Mst_BizSize)
            {
                dsGetData.Tables[nIdxTable++].TableName = "iNOS_Mst_BizSize";
            }
            #endregion
        }
        public DataSet iNOS_Mst_BizSize_Get(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            //// Filter:
            , string strFt_RecordStart
            , string strFt_RecordCount
            , string strFt_WhereClause
            //// Return:
            , string strRt_Cols_iNOS_Mst_BizSize
            )
        {
            #region // Temp:
            DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            //int nTidSeq = 0;
            DateTime dtimeSys = DateTime.UtcNow;
            string strFunctionName = "iNOS_Mst_BizSize_Get";
            string strErrorCodeDefault = TError.ErridnInventory.iNOS_Mst_BizSize_Get;
            alParamsCoupleError.AddRange(new object[]{
                    "strFunctionName", strFunctionName
                    , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
			        //// Filter
					, "strFt_RecordStart", strFt_RecordStart
                    , "strFt_RecordCount", strFt_RecordCount
                    , "strFt_WhereClause", strFt_WhereClause
			        //// Return
					, "strRt_Cols_iNOS_Mst_BizSize", strRt_Cols_iNOS_Mst_BizSize
                    });
            #endregion

            try
            {
                #region // Init:
                //_cf.db.LogUserId = _cf.sinf.strUserCode;
                _cf.db.BeginTransaction();

                // Write RequestLog:
                _cf.ProcessBizReq_OutSide(
                    strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    , alParamsCoupleError // alParamsCoupleError
                    );

                //// Sys_User_CheckAuthentication:
                //Sys_User_CheckAuthentication(
                //    ref alParamsCoupleError
                //    , strWAUserCode
                //    , strWAUserPassword
                //    );

                //// Check Access/Deny:
                //Sys_Access_CheckDenyV30(
                //    ref alParamsCoupleError
                //    , strWAUserCode
                //    , strFunctionName
                //    );
                #endregion

                #region // iNOS_Mst_BizSize_GetX:
                DataSet dsGetData = null;
                {
                    ////
                    iNOS_Mst_BizSize_GetX(
                        strTid // strTid
                        , strGwUserCode // strGwUserCode
                        , strGwPassword // strGwPassword
                        , strWAUserCode // strWAUserCode
                        , strWAUserPassword // strWAUserPassword
                        , ref alParamsCoupleError // alParamsCoupleError
                        , dtimeSys // dtimeSys
                                   ////
                        , strFt_RecordStart // strFt_RecordStart
                        , strFt_RecordCount // strFt_RecordCount
                        , strFt_WhereClause // strFt_WhereClause
                                            ////
                        , strRt_Cols_iNOS_Mst_BizSize // strRt_Cols_iNOS_Mst_BizSize
                                                      ////
                        , out dsGetData // dsGetData
                        );
                    ////
                    CmUtils.DataUtils.MoveDataTable(ref mdsFinal, ref dsGetData);
                }
                #endregion

                // Return Good:
                TDALUtils.DBUtils.RollbackSafety(_cf.db); // Always Rollback.
                mdsFinal.AcceptChanges();
                return mdsFinal;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Rollback:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);

                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsFinal
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Rollback and Release resources:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);
                TDALUtils.DBUtils.ReleaseAllSemaphore(_cf.db_Sys, true);

                // Write ReturnLog:
                _cf.ProcessBizReturn_OutSide(
                    ref mdsFinal // mdsFinal
                    , strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    );
                #endregion
            }
        }
        #endregion

        #region // iNOS_Mst_BizField:
        public DataSet WAS_RptSv_iNOS_Mst_BizField_Get_New20190813(
            ref ArrayList alParamsCoupleError
            , RQ_iNOS_Mst_BizField objRQ_iNOS_Mst_BizField
            ////
            , out RT_iNOS_Mst_BizField objRT_iNOS_Mst_BizField
            )
        {
            #region // Temp:
            string strTid = objRQ_iNOS_Mst_BizField.Tid;
            objRT_iNOS_Mst_BizField = new RT_iNOS_Mst_BizField();
            DataSet mdsResult = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            DateTime dtimeSys = DateTime.UtcNow;
            //DataSet mdsExec = null;
            //DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(objRQ_iNOS_Mst_BizField.Tid);
            //int nTidSeq = 0;
            //bool bNeedTransaction = true;
            string strFunctionName = "WAS_RptSv_iNOS_Mst_BizField_Get";
            string strErrorCodeDefault = TError.ErridnInventory.WAS_RptSv_iNOS_Mst_BizField_Get;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
				});
            #endregion

            try
            {
                #region // Init:
                #endregion

                #region // Refine and Check Input:
                List<MySummaryTable> lst_MySummaryTable = new List<MySummaryTable>();
                List<iNOS_Mst_BizField> lst_iNOS_Mst_BizField = new List<iNOS_Mst_BizField>();
                #endregion

                #region // WS_RptSv_iNOS_Mst_BizField_Get:
                mdsResult = RptSv_iNOS_Mst_BizField_Get_New20190813(
                    objRQ_iNOS_Mst_BizField.Tid // strTid
                    , objRQ_iNOS_Mst_BizField.GwUserCode // strGwUserCode
                    , objRQ_iNOS_Mst_BizField.GwPassword // strGwPassword
                    , objRQ_iNOS_Mst_BizField.WAUserCode // strUserCode
                    , objRQ_iNOS_Mst_BizField.WAUserPassword // strUserPassword
                    , objRQ_iNOS_Mst_BizField.AccessToken // strAccessToken
                    , ref alParamsCoupleError // alParamsCoupleError
                                              //// Return:
                    , objRQ_iNOS_Mst_BizField.Rt_Cols_iNOS_Mst_BizField // strRt_Cols_iNOS_Mst_BizField
                    );
                #endregion

                #region // GetData:
                if (!CmUtils.CMyDataSet.HasError(mdsResult))
                {
                    //////
                    //DataTable dt_MySummaryTable = mdsResult.Tables["MySummaryTable"].Copy();
                    //lst_MySummaryTable = TUtils.DataTableCmUtils.ToListof<MySummaryTable>(dt_MySummaryTable);
                    //objRT_iNOS_Mst_BizField.MySummaryTable = lst_MySummaryTable[0];
                    ////
                    DataTable dt_iNOS_Mst_BizField = mdsResult.Tables["iNOS_Mst_BizField"].Copy();
                    lst_iNOS_Mst_BizField = TUtils.DataTableCmUtils.ToListof<iNOS_Mst_BizField>(dt_iNOS_Mst_BizField);
                    objRT_iNOS_Mst_BizField.Lst_iNOS_Mst_BizField = lst_iNOS_Mst_BizField;
                    /////
                }
                #endregion

                // Return Good:
                return mdsResult;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsResult
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Write ReturnLog:
                //_cf.ProcessBizReturn(
                //	ref mdsResult // mdsFinal
                //	, strTid // strTid
                //	, strFunctionName // strFunctionName
                //	);
                #endregion
            }
        }

        public DataSet RptSv_iNOS_Mst_BizField_Get_New20190813(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , string strAccessToken
            , ref ArrayList alParamsCoupleError
            //// Return:
            , string strRt_Cols_iNOS_Mst_BizField
            )
        {
            #region // Temp:
            DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            //int nTidSeq = 0;
            DateTime dtimeSys = DateTime.UtcNow;
            bool bNeedTransaction = true;
            string strFunctionName = "iNOS_Mst_BizField_Get";
            string strErrorCodeDefault = TError.ErridnInventory.RptSv_iNOS_Mst_BizField_Get;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				//// Return
				, "strRt_Cols_iNOS_Mst_BizField", strRt_Cols_iNOS_Mst_BizField
                });
            #endregion

            try
            {
                #region // Init:
                //_cf.db.LogUserId = _cf.sinf.strUserCode;
                if (bNeedTransaction) _cf.db.BeginTransaction();

                // Write RequestLog:
                _cf.ProcessBizReq_OutSide(
                    strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    , alParamsCoupleError // alParamsCoupleError
                    );

                //// RptSv_Sys_User_CheckAuthentication:
                //RptSv_Sys_User_CheckAuthentication(
                //    ref alParamsCoupleError
                //    , strWAUserCode
                //    , strWAUserPassword
                //    );

                //// Check Access/Deny:
                //Sys_Access_CheckDenyV30(
                //	ref alParamsCoupleError
                //	, strWAUserCode
                //	, strFunctionName
                //	);
                #endregion

                #region // Check:
                //// Refine:
                bool bGet_iNOS_Mst_BizField = (strRt_Cols_iNOS_Mst_BizField != null && strRt_Cols_iNOS_Mst_BizField.Length > 0);

                //// drAbilityOfUser:
                //DataRow drAbilityOfUser = myCache_ViewAbility_GetUserInfo(strWAUserCode);

                #endregion

                #region // Sys_Solution: Get.
                ////
                //DataTable dtDB_Sys_Solution = null;
                //{
                //    // GetInfo:
                //    dtDB_Sys_Solution = TDALUtils.DBUtils.GetTableContents(
                //        _cf.db // db
                //        , "Sys_Solution" // strTableName
                //        , "top 1 *" // strColumnList
                //        , "" // strClauseOrderBy
                //        , "FlagActive", "=", TConst.Flag.Active // arrobjParamsTriple item
                //        );
                //}
                #endregion

                #region // Get Data:
                DataSet dsGetData = null;

                if (bGet_iNOS_Mst_BizField)
                {
                    // //
                    Inos_OrgService_GetAllBizFieldX(
                        strTid // strTid
                        , strGwUserCode // strGwUserCode
                        , strGwPassword // strGwPassword
                        , strWAUserCode // strWAUserCode
                        , strWAUserPassword // strWAUserPassword
                        , strAccessToken // strAccessToken
                        , ref mdsFinal // mdsFinal
                        , ref alParamsCoupleError // alParamsCoupleError
                        , dtimeSys // dtimeSys
                                   ////
                                   //, dtDB_Sys_Solution.Rows[0]["SolutionCode"] // objSolutionCode
                                   ////
                        , out dsGetData // dsData
                        );
                }
                CmUtils.DataUtils.MoveDataTable(ref mdsFinal, ref dsGetData);
                #endregion

                // Return Good:
                TDALUtils.DBUtils.RollbackSafety(_cf.db); // Always Rollback.
                mdsFinal.AcceptChanges();
                return mdsFinal;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Rollback:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);

                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsFinal
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Rollback and Release resources:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);
                TDALUtils.DBUtils.ReleaseAllSemaphore(_cf.db_Sys, true);

                // Write ReturnLog:
                _cf.ProcessBizReturn_OutSide(
                    ref mdsFinal // mdsFinal
                    , strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    );
                #endregion
            }
        }
        public DataSet WAS_iNOS_Mst_BizField_Get_New20190813(
            ref ArrayList alParamsCoupleError
            , RQ_iNOS_Mst_BizField objRQ_iNOS_Mst_BizField
            ////
            , out RT_iNOS_Mst_BizField objRT_iNOS_Mst_BizField
            )
        {
            #region // Temp:
            string strTid = objRQ_iNOS_Mst_BizField.Tid;
            objRT_iNOS_Mst_BizField = new RT_iNOS_Mst_BizField();
            DataSet mdsResult = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            DateTime dtimeSys = DateTime.UtcNow;
            //DataSet mdsExec = null;
            //DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(objRQ_iNOS_Mst_BizField.Tid);
            //int nTidSeq = 0;
            //bool bNeedTransaction = true;
            string strFunctionName = "WAS_iNOS_Mst_BizField_Get";
            string strErrorCodeDefault = TError.ErridnInventory.WAS_iNOS_Mst_BizField_Get;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
				});
            #endregion

            try
            {
                #region // Init:
                #endregion

                #region // Refine and Check Input:
                List<MySummaryTable> lst_MySummaryTable = new List<MySummaryTable>();
                List<iNOS_Mst_BizField> lst_iNOS_Mst_BizField = new List<iNOS_Mst_BizField>();
                #endregion

                #region // WS_iNOS_Mst_BizField_Get:
                mdsResult = iNOS_Mst_BizField_Get_New20190813(
                    objRQ_iNOS_Mst_BizField.Tid // strTid
                    , objRQ_iNOS_Mst_BizField.GwUserCode // strGwUserCode
                    , objRQ_iNOS_Mst_BizField.GwPassword // strGwPassword
                    , objRQ_iNOS_Mst_BizField.WAUserCode // strUserCode
                    , objRQ_iNOS_Mst_BizField.WAUserPassword // strUserPassword
                    , objRQ_iNOS_Mst_BizField.AccessToken // strAccessToken
                    , ref alParamsCoupleError // alParamsCoupleError
                                              //// Return:
                    , objRQ_iNOS_Mst_BizField.Rt_Cols_iNOS_Mst_BizField // strRt_Cols_iNOS_Mst_BizField
                    );
                #endregion

                #region // GetData:
                if (!CmUtils.CMyDataSet.HasError(mdsResult))
                {
                    //////
                    //DataTable dt_MySummaryTable = mdsResult.Tables["MySummaryTable"].Copy();
                    //lst_MySummaryTable = TUtils.DataTableCmUtils.ToListof<MySummaryTable>(dt_MySummaryTable);
                    //objRT_iNOS_Mst_BizField.MySummaryTable = lst_MySummaryTable[0];
                    ////
                    DataTable dt_iNOS_Mst_BizField = mdsResult.Tables["iNOS_Mst_BizField"].Copy();
                    lst_iNOS_Mst_BizField = TUtils.DataTableCmUtils.ToListof<iNOS_Mst_BizField>(dt_iNOS_Mst_BizField);
                    objRT_iNOS_Mst_BizField.Lst_iNOS_Mst_BizField = lst_iNOS_Mst_BizField;
                    /////
                }
                #endregion

                // Return Good:
                return mdsResult;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsResult
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Write ReturnLog:
                //_cf.ProcessBizReturn(
                //	ref mdsResult // mdsFinal
                //	, strTid // strTid
                //	, strFunctionName // strFunctionName
                //	);
                #endregion
            }
        }

        public DataSet iNOS_Mst_BizField_Get_New20190813(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , string strAccessToken
            , ref ArrayList alParamsCoupleError
            //// Return:
            , string strRt_Cols_iNOS_Mst_BizField
            )
        {
            #region // Temp:
            DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            //int nTidSeq = 0;
            DateTime dtimeSys = DateTime.UtcNow;
            bool bNeedTransaction = true;
            string strFunctionName = "iNOS_Mst_BizField_Get";
            string strErrorCodeDefault = TError.ErridnInventory.iNOS_Mst_BizField_Get;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				//// Return
				, "strRt_Cols_iNOS_Mst_BizField", strRt_Cols_iNOS_Mst_BizField
                });
            #endregion

            try
            {
                #region // Init:
                //_cf.db.LogUserId = _cf.sinf.strUserCode;
                if (bNeedTransaction) _cf.db.BeginTransaction();

                // Write RequestLog:
                _cf.ProcessBizReq_OutSide(
                    strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    , alParamsCoupleError // alParamsCoupleError
                    );

                //// Sys_User_CheckAuthentication:
                //Sys_User_CheckAuthentication(
                //    ref alParamsCoupleError
                //    , strWAUserCode
                //    , strWAUserPassword
                //    );

                //// Check Access/Deny:
                //Sys_Access_CheckDenyV30(
                //	ref alParamsCoupleError
                //	, strWAUserCode
                //	, strFunctionName
                //	);
                #endregion

                #region // Check:
                //// Refine:
                bool bGet_iNOS_Mst_BizField = (strRt_Cols_iNOS_Mst_BizField != null && strRt_Cols_iNOS_Mst_BizField.Length > 0);

                //// drAbilityOfUser:
                //DataRow drAbilityOfUser = myCache_ViewAbility_GetUserInfo(strWAUserCode);

                #endregion

                #region // Sys_Solution: Get.
                ////
                //DataTable dtDB_Sys_Solution = null;
                //{
                //    // GetInfo:
                //    dtDB_Sys_Solution = TDALUtils.DBUtils.GetTableContents(
                //        _cf.db // db
                //        , "Sys_Solution" // strTableName
                //        , "top 1 *" // strColumnList
                //        , "" // strClauseOrderBy
                //        , "FlagActive", "=", TConst.Flag.Active // arrobjParamsTriple item
                //        );
                //}
                #endregion

                #region // Get Data:
                DataSet dsGetData = null;

                if (bGet_iNOS_Mst_BizField)
                {
                    // //
                    Inos_OrgService_GetAllBizFieldX(
                        strTid // strTid
                        , strGwUserCode // strGwUserCode
                        , strGwPassword // strGwPassword
                        , strWAUserCode // strWAUserCode
                        , strWAUserPassword // strWAUserPassword
                        , strAccessToken // strAccessToken
                        , ref mdsFinal // mdsFinal
                        , ref alParamsCoupleError // alParamsCoupleError
                        , dtimeSys // dtimeSys
                                   ////
                                   //, dtDB_Sys_Solution.Rows[0]["SolutionCode"] // objSolutionCode
                                   ////
                        , out dsGetData // dsData
                        );
                }
                CmUtils.DataUtils.MoveDataTable(ref mdsFinal, ref dsGetData);
                #endregion

                // Return Good:
                TDALUtils.DBUtils.RollbackSafety(_cf.db); // Always Rollback.
                mdsFinal.AcceptChanges();
                return mdsFinal;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Rollback:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);

                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsFinal
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Rollback and Release resources:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);
                TDALUtils.DBUtils.ReleaseAllSemaphore(_cf.db_Sys, true);

                // Write ReturnLog:
                _cf.ProcessBizReturn_OutSide(
                    ref mdsFinal // mdsFinal
                    , strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    );
                #endregion
            }
        }

        private void Inos_OrgService_GetAllBizFieldX(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , string strAccessToken
            , ref DataSet mdsFinal
            , ref ArrayList alParamsCoupleError
            , DateTime dtimeSys
            ////
            //, object objSolutionCode
            ////
            , out DataSet dsData
            )
        {
            #region // Temp:
            //int nTidSeq = 0;
            //bool bMyDebugSql = false;
            string strFunctionName = "Inos_OrgService_GetAllBizTypeX";
            //string strErrorCodeDefault = TError.ErridnInventory.Inos_AccountService_Register;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
				//, "objSolutionCode", objSolutionCode
                });
            //ArrayList alPCErrEx = new ArrayList();
            ////
            Hashtable htParamsSql = new Hashtable();
            #endregion

            #region // Refine and Check Input:
            ////
            //string strSolutionCode = TUtils.CUtils.StdParam(objSolutionCode);
            List<iNOS_Mst_BizField> lst_iNOS_Mst_BizField = new List<iNOS_Mst_BizField>();
            DataTable dtDB_iNOS_Mst_BizField = TDALUtils.DBUtils.GetSchema(_cf.db, "iNOS_Mst_BizField").Tables[0];

            ////
            dsData = new DataSet();
            #endregion

            #region // Call Service:
            try
            {
                ////
                OrgService objOrgService = new OrgService(null);
                objOrgService.AccessToken = strAccessToken;

                List<BizField> lstBizType = objOrgService.GetAllBizField();

                ////
                foreach (var objItem in lstBizType)
                {
                    ////
                    iNOS_Mst_BizField objiNOS_Mst_BizField = new iNOS_Mst_BizField();
                    string strFN = "";
                    DataRow drDB = dtDB_iNOS_Mst_BizField.NewRow();
                    strFN = "BizFieldCode"; drDB[strFN] = objItem.Id;
                    strFN = "BizFieldName"; drDB[strFN] = objItem.Name;
                    //strFN = "NetworkID"; drDB[strFN] = nNetworkID;
                    dtDB_iNOS_Mst_BizField.Rows.Add(drDB);
                }

                dsData.Tables.Add(dtDB_iNOS_Mst_BizField.Copy());

            }
            catch (Exception exc)
            {
                mbiz.core.Exceptions.ServiceException myexc = new mbiz.core.Exceptions.ServiceException(exc);

                alParamsCoupleError.AddRange(new object[]{
                    "Check.InosExc.ErrorCode", myexc.ErrorCode
                    , "Check.InosExc.ErrorDetail", myexc.ErrorDetail
                    , "Check.InosExc.ErrorMessage", myexc.ErrorMessage
                    , "Check.InosExc.InnerException", myexc.InnerException
                    });

                throw CmUtils.CMyException.Raise(
                    TError.ErridnInventory.Inos_OrgService_GetAllBizField
                    , null
                    , alParamsCoupleError.ToArray()
                    );
            }
            #endregion
        }

        public DataSet WAS_iNOS_Mst_BizField_Get(
            ref ArrayList alParamsCoupleError
            , RQ_iNOS_Mst_BizField objRQ_iNOS_Mst_BizField
            ////
            , out RT_iNOS_Mst_BizField objRT_iNOS_Mst_BizField
            )
        {
            #region // Temp:
            string strTid = objRQ_iNOS_Mst_BizField.Tid;
            objRT_iNOS_Mst_BizField = new RT_iNOS_Mst_BizField();
            DataSet mdsResult = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            DateTime dtimeSys = DateTime.UtcNow;
            //DataSet mdsExec = null;
            //DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(objRQ_iNOS_Mst_BizField.Tid);
            //int nTidSeq = 0;
            //bool bNeedTransaction = true;
            string strFunctionName = "WAS_iNOS_Mst_BizField_Get";
            string strErrorCodeDefault = TError.ErridnInventory.WAS_iNOS_Mst_BizField_Get;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
				});
            #endregion

            try
            {
                #region // Init:
                #endregion

                #region // Refine and Check Input:
                List<MySummaryTable> lst_MySummaryTable = new List<MySummaryTable>();

                List<iNOS_Mst_BizField> lst_iNOS_Mst_BizField = new List<iNOS_Mst_BizField>();
                #endregion

                #region // WS_iNOS_Mst_BizField_Get:
                mdsResult = iNOS_Mst_BizField_Get(
                    objRQ_iNOS_Mst_BizField.Tid // strTid
                    , objRQ_iNOS_Mst_BizField.GwUserCode // strGwUserCode
                    , objRQ_iNOS_Mst_BizField.GwPassword // strGwPassword
                    , objRQ_iNOS_Mst_BizField.WAUserCode // strUserCode
                    , objRQ_iNOS_Mst_BizField.WAUserPassword // strUserPassword
                    , ref alParamsCoupleError // alParamsCoupleError
                                              //// Filter:
                    , objRQ_iNOS_Mst_BizField.Ft_RecordStart // strFt_RecordStart
                    , objRQ_iNOS_Mst_BizField.Ft_RecordCount // strFt_RecordCount
                    , objRQ_iNOS_Mst_BizField.Ft_WhereClause // strFt_WhereClause
                                                             //// Return:
                    , objRQ_iNOS_Mst_BizField.Rt_Cols_iNOS_Mst_BizField // strRt_Cols_iNOS_Mst_BizField
                    );
                #endregion

                #region // GetData:
                if (!CmUtils.CMyDataSet.HasError(mdsResult))
                {
                    ////
                    DataTable dt_MySummaryTable = mdsResult.Tables["MySummaryTable"].Copy();
                    lst_MySummaryTable = TUtils.DataTableCmUtils.ToListof<MySummaryTable>(dt_MySummaryTable);
                    objRT_iNOS_Mst_BizField.MySummaryTable = lst_MySummaryTable[0];

                    ////
                    DataTable dt_iNOS_Mst_BizField = mdsResult.Tables["iNOS_Mst_BizField"].Copy();
                    lst_iNOS_Mst_BizField = TUtils.DataTableCmUtils.ToListof<iNOS_Mst_BizField>(dt_iNOS_Mst_BizField);
                    objRT_iNOS_Mst_BizField.Lst_iNOS_Mst_BizField = lst_iNOS_Mst_BizField;
                    /////
                }
                #endregion

                // Return Good:
                return mdsResult;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsResult
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Write ReturnLog:
                //_cf.ProcessBizReturn(
                //	ref mdsResult // mdsFinal
                //	, strTid // strTid
                //	, strFunctionName // strFunctionName
                //	);
                #endregion
            }
        }
        private void iNOS_Mst_BizField_GetX(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            , DateTime dtimeSys
            //// Filter:
            , string strFt_RecordStart
            , string strFt_RecordCount
            , string strFt_WhereClause
            //// Return:
            , string strRt_Cols_iNOS_Mst_BizField
            ////
            , out DataSet dsGetData
            )
        {
            #region // Temp:
            //DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            //DateTime dtimeSys = DateTime.UtcNow;
            //bool bNeedTransaction = true;
            string strFunctionName = "iNOS_Mst_BizField_GetX";
            //string strErrorCodeDefault = TError.ErrHTCNM.Mnf_VIN_Get_QCX;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
                });
            #endregion

            #region // Check:
            //// Refine:
            long nFilterRecordStart = Convert.ToInt64(strFt_RecordStart);
            long nFilterRecordEnd = nFilterRecordStart + Convert.ToInt64(strFt_RecordCount) - 1;
            bool bGet_iNOS_Mst_BizField = (strRt_Cols_iNOS_Mst_BizField != null && strRt_Cols_iNOS_Mst_BizField.Length > 0);

            //// drAbimbfityOfUser:
            //DataRow drAbimbfityOfUser = myCache_ViewAbimbfity_GetUserInfo(_cf.sinf.strUserCode);

            #endregion

            #region // Buimbfd Sql:
            ////
            ArrayList alParamsCoupleSql = new ArrayList();
            alParamsCoupleSql.AddRange(new object[] {
                "@nFilterRecordStart", nFilterRecordStart
                , "@nFilterRecordEnd", nFilterRecordEnd
                });
            ////
            //myCache_ViewAbimbfity_GetDealerInfo(drAbimbfityOfUser);
            ////
            string strSqlGetData = CmUtils.StringUtils.Replace(@"
					---- #tbl_iNOS_Mst_BizField_Filter_Draft:
					select distinct
						identity(bigint, 0, 1) MyIdxSeq
						, imbf.BizFieldCode
					into #tbl_iNOS_Mst_BizField_Filter_Draft
					from iNOS_Mst_BizField imbf --//[mylock]
					where (1=1)
						zzB_Where_strFilter_zzE
					order by imbf.BizFieldCode asc
					;

					---- Summary:
					select Count(0) MyCount from #tbl_iNOS_Mst_BizField_Filter_Draft t --//[mylock]
					;

					---- #tbl_iNOS_Mst_BizField_Filter:
					select
						t.*
					into #tbl_iNOS_Mst_BizField_Filter
					from #tbl_iNOS_Mst_BizField_Filter_Draft t --//[mylock]
					where (1=1)
						and (t.MyIdxSeq >= @nFilterRecordStart)
						and (t.MyIdxSeq <= @nFilterRecordEnd)
					;

					-------- iNOS_Mst_BizField -----:
					zzB_Select_iNOS_Mst_BizField_zzE
					-------------------------------

					---- Clear for debug:
					--drop table #tbl_iNOS_Mst_BizField_Filter_Draft;
					--drop table #tbl_iNOS_Mst_BizField_Filter;
				"
                );
            ////
            string zzB_Select_iNOS_Mst_BizField_zzE = "-- Nothing.";
            if (bGet_iNOS_Mst_BizField)
            {
                #region // bGet_iNOS_Mst_BizField:
                zzB_Select_iNOS_Mst_BizField_zzE = CmUtils.StringUtils.Replace(@"
					---- iNOS_Mst_BizField:
					select
						t.MyIdxSeq
						, imbf.*
					from #tbl_iNOS_Mst_BizField_Filter t --//[mylock]
						inner join iNOS_Mst_BizField imbf --//[mylock]
							on t.BizFieldCode = imbf.BizFieldCode
					order by t.MyIdxSeq asc
					;
				"
                );
                #endregion
            }
            ////
            string zzB_Where_strFilter_zzE = "";
            {
                Hashtable htSpCols = new Hashtable();
                {
                    #region // htSpCols:
                    ////
                    TUtils.CUtils.MyBuildHTSupportedColumns(
                        _cf.db // db
                        , ref htSpCols // htSupportedColumns
                        , "iNOS_Mst_BizField" // strTableNameDB
                        , "iNOS_Mst_BizField." // strPrefixStd
                        , "imbf." // strPrefixAlias
                        );
                    ////
                    #endregion
                }
                zzB_Where_strFilter_zzE = CmUtils.SqlUtils.BuildWhere(
                    htSpCols // htSpCols
                    , strFt_WhereClause // strClause
                    , "@p_" // strParamPrefix
                    , ref alParamsCoupleSql // alParamsCoupleSql
                    );
                zzB_Where_strFilter_zzE = (zzB_Where_strFilter_zzE.Length <= 0 ? "" : string.Format(" and ({0})", zzB_Where_strFilter_zzE));
                alParamsCoupleError.AddRange(new object[]{
                    "zzB_Where_strFilter_zzE", zzB_Where_strFilter_zzE
                    });
            }
            ////
            strSqlGetData = CmUtils.StringUtils.Replace(
                strSqlGetData
                , "zzB_Where_strFilter_zzE", zzB_Where_strFilter_zzE
                , "zzB_Select_iNOS_Mst_BizField_zzE", zzB_Select_iNOS_Mst_BizField_zzE
                );
            #endregion

            #region // Get Data:
            dsGetData = _cf.db.ExecQuery(
                strSqlGetData
                , alParamsCoupleSql.ToArray()
                );
            int nIdxTable = 0;
            dsGetData.Tables[nIdxTable++].TableName = "MySummaryTable";
            if (bGet_iNOS_Mst_BizField)
            {
                dsGetData.Tables[nIdxTable++].TableName = "iNOS_Mst_BizField";
            }
            #endregion
        }
        public DataSet iNOS_Mst_BizField_Get(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            //// Filter:
            , string strFt_RecordStart
            , string strFt_RecordCount
            , string strFt_WhereClause
            //// Return:
            , string strRt_Cols_iNOS_Mst_BizField
            )
        {
            #region // Temp:
            DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            //int nTidSeq = 0;
            DateTime dtimeSys = DateTime.UtcNow;
            string strFunctionName = "iNOS_Mst_BizField_Get";
            string strErrorCodeDefault = TError.ErridnInventory.iNOS_Mst_BizField_Get;
            alParamsCoupleError.AddRange(new object[]{
                    "strFunctionName", strFunctionName
                    , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
			        //// Filter
					, "strFt_RecordStart", strFt_RecordStart
                    , "strFt_RecordCount", strFt_RecordCount
                    , "strFt_WhereClause", strFt_WhereClause
			        //// Return
					, "strRt_Cols_iNOS_Mst_BizField", strRt_Cols_iNOS_Mst_BizField
                    });
            #endregion

            try
            {
                #region // Init:
                //_cf.db.LogUserId = _cf.sinf.strUserCode;
                _cf.db.BeginTransaction();

                // Write RequestLog:
                _cf.ProcessBizReq_OutSide(
                    strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    , alParamsCoupleError // alParamsCoupleError
                    );

                //// Sys_User_CheckAuthentication:
                //Sys_User_CheckAuthentication(
                //    ref alParamsCoupleError
                //    , strWAUserCode
                //    , strWAUserPassword
                //    );

                //// Check Access/Deny:
                //Sys_Access_CheckDenyV30(
                //    ref alParamsCoupleError
                //    , strWAUserCode
                //    , strFunctionName
                //    );
                #endregion

                #region // iNOS_Mst_BizField_GetX:
                DataSet dsGetData = null;
                {
                    ////
                    iNOS_Mst_BizField_GetX(
                        strTid // strTid
                        , strGwUserCode // strGwUserCode
                        , strGwPassword // strGwPassword
                        , strWAUserCode // strWAUserCode
                        , strWAUserPassword // strWAUserPassword
                        , ref alParamsCoupleError // alParamsCoupleError
                        , dtimeSys // dtimeSys
                                   ////
                        , strFt_RecordStart // strFt_RecordStart
                        , strFt_RecordCount // strFt_RecordCount
                        , strFt_WhereClause // strFt_WhereClause
                                            ////
                        , strRt_Cols_iNOS_Mst_BizField // strRt_Cols_iNOS_Mst_BizField
                                                       ////
                        , out dsGetData // dsGetData
                        );
                    ////
                    CmUtils.DataUtils.MoveDataTable(ref mdsFinal, ref dsGetData);
                }
                #endregion

                // Return Good:
                TDALUtils.DBUtils.RollbackSafety(_cf.db); // Always Rollback.
                mdsFinal.AcceptChanges();
                return mdsFinal;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Rollback:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);

                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsFinal
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Rollback and Release resources:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);
                TDALUtils.DBUtils.ReleaseAllSemaphore(_cf.db_Sys, true);

                // Write ReturnLog:
                _cf.ProcessBizReturn_OutSide(
                    ref mdsFinal // mdsFinal
                    , strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    );
                #endregion
            }
        }
        #endregion

        #region // Invoice_CustomField:
        private void Invoice_CustomField_CheckDB(
            ref ArrayList alParamsCoupleError
            , object objOrgID
            , object objInvoiceCustomFieldCode
            , string strFlagExistToCheck
            , string strFlagActiveListToCheck
            , out DataTable dtDB_Invoice_CustomField
            )
        {
            // GetInfo:
            string strSqlExec = CmUtils.StringUtils.Replace(@"
					select top 1
						t.*
					from Invoice_CustomField t --//[mylock]
					where (1=1)
						and t.OrgID = @objOrgID
						and t.InvoiceCustomFieldCode = @objInvoiceCustomFieldCode
					;
				");
            dtDB_Invoice_CustomField = _cf.db.ExecQuery(
                strSqlExec
                , "@objOrgID", objOrgID
                , "@objInvoiceCustomFieldCode", objInvoiceCustomFieldCode
                , "@dateSys", DateTime.UtcNow.ToString("yyyy-MM-dd")
                ).Tables[0];
            dtDB_Invoice_CustomField.TableName = "Invoice_CustomField";

            // strFlagExistToCheck:
            if (strFlagExistToCheck.Length > 0)
            {
                if (CmUtils.StringUtils.StringEqual(strFlagExistToCheck, TConst.Flag.Active) && dtDB_Invoice_CustomField.Rows.Count < 1)
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.OrgID", objOrgID
                        , "Check.InvoiceCustomFieldCode", objInvoiceCustomFieldCode
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Invoice_CustomField_CheckDB_CustomFieldNotFound
                        , null
                        , alParamsCoupleError.ToArray()
                        );
                }
                if (CmUtils.StringUtils.StringEqual(strFlagExistToCheck, TConst.Flag.Inactive) && dtDB_Invoice_CustomField.Rows.Count > 0)
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.OrgID", objOrgID
                        , "Check.InvoiceCustomFieldCode", objInvoiceCustomFieldCode
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Invoice_CustomField_CheckDB_CustomFieldExist
                        , null
                        , alParamsCoupleError.ToArray()
                        );
                }
            }

            // strFlagActiveListToCheck:
            if (strFlagActiveListToCheck.Length > 0 && !strFlagActiveListToCheck.Contains(Convert.ToString(dtDB_Invoice_CustomField.Rows[0]["FlagActive"])))
            {
                alParamsCoupleError.AddRange(new object[]{
                    "Check.OrgID", objOrgID
                    , "Check.InvoiceCustomFieldCode", objInvoiceCustomFieldCode
                    , "Check.strFlagActiveListToCheck", strFlagActiveListToCheck
                    , "DB.FlagActive", dtDB_Invoice_CustomField.Rows[0]["FlagActive"]
                    });
                throw CmUtils.CMyException.Raise(
                    TError.ErridnInventory.Invoice_CustomField_CheckDB_FlagActiveNotMatched
                    , null
                    , alParamsCoupleError.ToArray()
                    );
            }
        }
        public DataSet Invoice_CustomField_Get(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            //// Filter:
            , string strFt_RecordStart
            , string strFt_RecordCount
            , string strFt_WhereClause
            //// Return:
            , string strRt_Cols_Invoice_CustomField
            )
        {
            #region // Temp:
            DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            //int nTidSeq = 0;
            DateTime dtimeSys = DateTime.UtcNow;
            bool bNeedTransaction = true;
            string strFunctionName = "Invoice_CustomField_Get";
            string strErrorCodeDefault = TError.ErridnInventory.Invoice_CustomField_Get;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				//// Filter
				, "strFt_RecordStart", strFt_RecordStart
                , "strFt_RecordCount", strFt_RecordCount
                , "strFt_WhereClause", strFt_WhereClause
				//// Return
				, "strRt_Cols_Invoice_CustomField", strRt_Cols_Invoice_CustomField
                });
            #endregion

            try
            {
                #region // Init:
                //_cf.db.LogUserId = _cf.sinf.strUserCode;
                if (bNeedTransaction) _cf.db.BeginTransaction();

                // Write RequestLog:
                _cf.ProcessBizReq_OutSide(
                    strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    , alParamsCoupleError // alParamsCoupleError
                    );

                // Sys_User_CheckAuthentication:
                //Sys_User_CheckAuthentication(
                //    ref alParamsCoupleError
                //    , strWAUserCode
                //    , strWAUserPassword
                //    );

                // Check Access/Deny:
                Sys_Access_CheckDenyV30(
                    ref alParamsCoupleError
                    , strWAUserCode
                    , strFunctionName
                    );
                #endregion

                #region // Check:
                //// Refine:
                long nFilterRecordStart = Convert.ToInt64(strFt_RecordStart);
                long nFilterRecordEnd = nFilterRecordStart + Convert.ToInt64(strFt_RecordCount) - 1;
                bool bGet_Invoice_CustomField = (strRt_Cols_Invoice_CustomField != null && strRt_Cols_Invoice_CustomField.Length > 0);

                //// drAbilityOfUser:
                //DataRow drAbilityOfUser = myCache_ViewAbility_GetUserInfo(strWAUserCode);

                #endregion

                #region // Build Sql:
                ////
                ArrayList alParamsCoupleSql = new ArrayList();
                alParamsCoupleSql.AddRange(new object[] {
                    "@nFilterRecordStart", nFilterRecordStart
                    , "@nFilterRecordEnd", nFilterRecordEnd
                    });
                ////
                //myCache_ViewAbility_GetDealerInfo(drAbilityOfUser);
                ////
                string strSqlGetData = CmUtils.StringUtils.Replace(@"
						---- #tbl_Invoice_CustomField_Filter_Draft:
						select distinct
							identity(bigint, 0, 1) MyIdxSeq
                            , icf.OrgID
							, icf.InvoiceCustomFieldCode
                            , Convert(int,  Replace(icf.InvoiceCustomFieldCode, Left(icf.InvoiceCustomFieldCode, 5), '')) MySTT
						into #tbl_Invoice_CustomField_Filter_Draft
						from Invoice_CustomField icf --//[mylock]
						where (1=1)
							zzB_Where_strFilter_zzE
						order by 
                            icf.OrgID asc
							, icf.InvoiceCustomFieldCode asc
						;

						---- Summary:
						select Count(0) MyCount from #tbl_Invoice_CustomField_Filter_Draft t --//[mylock]
						;

						---- #tbl_Invoice_CustomField_Filter:
						select
							t.*
						into #tbl_Invoice_CustomField_Filter
						from #tbl_Invoice_CustomField_Filter_Draft t --//[mylock]
						where
							(t.MyIdxSeq >= @nFilterRecordStart)
							and (t.MyIdxSeq <= @nFilterRecordEnd)
						;

						-------- Invoice_CustomField ------:
						zzB_Select_Invoice_CustomField_zzE
						----------------------------------

						---- Clear for debug:
						--drop table #tbl_Invoice_CustomField_Filter_Draft;
						--drop table #tbl_Invoice_CustomField_Filter;
					"
                    );
                ////
                string zzB_Select_Invoice_CustomField_zzE = "-- Nothing.";
                if (bGet_Invoice_CustomField)
                {
                    #region // bGet_Invoice_CustomField:
                    zzB_Select_Invoice_CustomField_zzE = CmUtils.StringUtils.Replace(@"
							---- Invoice_CustomField:
							select
								t.MySTT
								, icf.*
							from #tbl_Invoice_CustomField_Filter t --//[mylock]
								inner join Invoice_CustomField icf --//[mylock]
									on t.OrgID = icf.OrgID
                                        and t.InvoiceCustomFieldCode = icf.InvoiceCustomFieldCode
							order by t.MySTT asc
							;
						"
                        );
                    #endregion
                }
                ////
                string zzB_Where_strFilter_zzE = "";
                {
                    Hashtable htSpCols = new Hashtable();
                    {
                        #region // htSpCols:
                        ////
                        TUtils.CUtils.MyBuildHTSupportedColumns(
                            _cf.db // db
                            , ref htSpCols // htSupportedColumns
                            , "Invoice_CustomField" // strTableNameDB
                            , "Invoice_CustomField." // strPrefixStd
                            , "icf." // strPrefixAlias
                            );
                        ////
                        #endregion
                    }
                    zzB_Where_strFilter_zzE = CmUtils.SqlUtils.BuildWhere(
                        htSpCols // htSpCols
                        , strFt_WhereClause // strClause
                        , "@p_" // strParamPrefix
                        , ref alParamsCoupleSql // alParamsCoupleSql
                        );
                    zzB_Where_strFilter_zzE = (zzB_Where_strFilter_zzE.Length <= 0 ? "" : string.Format(" and ({0})", zzB_Where_strFilter_zzE));
                    alParamsCoupleError.AddRange(new object[]{
                        "zzB_Where_strFilter_zzE", zzB_Where_strFilter_zzE
                        });
                }
                ////
                strSqlGetData = CmUtils.StringUtils.Replace(
                    strSqlGetData
                    , "zzB_Where_strFilter_zzE", zzB_Where_strFilter_zzE
                    , "zzB_Select_Invoice_CustomField_zzE", zzB_Select_Invoice_CustomField_zzE
                    );
                #endregion

                #region // Get Data:
                DataSet dsGetData = _cf.db.ExecQuery(
                    strSqlGetData
                    , alParamsCoupleSql.ToArray()
                    );
                int nIdxTable = 0;
                dsGetData.Tables[nIdxTable++].TableName = "MySummaryTable";
                if (bGet_Invoice_CustomField)
                {
                    dsGetData.Tables[nIdxTable++].TableName = "Invoice_CustomField";
                }
                CmUtils.DataUtils.MoveDataTable(ref mdsFinal, ref dsGetData);
                #endregion

                // Return Good:
                TDALUtils.DBUtils.RollbackSafety(_cf.db); // Always Rollback.
                mdsFinal.AcceptChanges();
                return mdsFinal;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Rollback:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);

                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsFinal
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Rollback and Release resources:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);
                TDALUtils.DBUtils.ReleaseAllSemaphore(_cf.db_Sys, true);

                // Write ReturnLog:
                _cf.ProcessBizReturn_OutSide(
                    ref mdsFinal // mdsFinal
                    , strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    );
                #endregion
            }
        }

        public DataSet Invoice_CustomField_Create(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            ////
            , object objOrgID
            , object objInvoiceCustomFieldCode
            , object objInvoiceCustomFieldName
            , object objDBPhysicalType
            )
        {
            #region // Temp:
            DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            //int nTidSeq = 0;
            DateTime dtimeSys = DateTime.UtcNow;
            string strFunctionName = "Invoice_CustomField_Create";
            string strErrorCodeDefault = TError.ErridnInventory.Invoice_CustomField_Create;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
                ////
                , "objOrgID", objOrgID
                , "objInvoiceCustomFieldCode", objInvoiceCustomFieldCode
                , "objInvoiceCustomFieldName", objInvoiceCustomFieldName
                , "objDBPhysicalType", objDBPhysicalType
                });
            #endregion

            try
            {
                #region // Convert Input:
                #endregion

                #region // Init:
                //_cf.db.LogUserId = _cf.sinf.strUserCode;
                _cf.db.BeginTransaction();

                // Write RequestLog:
                _cf.ProcessBizReq_OutSide(
                    strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    , alParamsCoupleError // alParamsCoupleError
                    );

                // Sys_User_CheckAuthentication:
                //Sys_User_CheckAuthentication(
                //    ref alParamsCoupleError
                //    , strWAUserCode
                //    , strWAUserPassword
                //    );

                // Check Access/Deny:
                Sys_Access_CheckDenyV30(
                    ref alParamsCoupleError
                    , strWAUserCode
                    , strFunctionName
                    );
                #endregion

                #region // Refine and Check Input:
                ////
                ////
                string strOrgID = TUtils.CUtils.StdParam(objOrgID);
                string strInvoiceCustomFieldCode = TUtils.CUtils.StdParam(objInvoiceCustomFieldCode);
                string strInvoiceCustomFieldName = string.Format("{0}", objInvoiceCustomFieldName).Trim();
                string strDBPhysicalType = string.Format("{0}", objDBPhysicalType).Trim();

                // drAbilityOfUser:
                //DataRow drAbilityOfUser = Sys_User_GetAbilityViewOfUser(strWAUserCode);
                ////
                DataTable dtDB_Invoice_CustomField = null;
                {
                    ////
                    if (strOrgID == null || strOrgID.Length < 1)
                    {
                        alParamsCoupleError.AddRange(new object[]{
                            "Check.strOrgID", strOrgID
                            });
                        throw CmUtils.CMyException.Raise(
                            TError.ErridnInventory.Invoice_CustomField_Create_InvalidOrgID
                            , null
                            , alParamsCoupleError.ToArray()
                            );
                    }
                    ////
                    if (strInvoiceCustomFieldCode == null || strInvoiceCustomFieldCode.Length < 1)
                    {
                        alParamsCoupleError.AddRange(new object[]{
                            "Check.strInvoiceCustomFieldCode", strInvoiceCustomFieldCode
                            });
                        throw CmUtils.CMyException.Raise(
                            TError.ErridnInventory.Invoice_CustomField_Create_InvalidInvoiceCustomFieldCode
                            , null
                            , alParamsCoupleError.ToArray()
                            );
                    }

                    Invoice_CustomField_CheckDB(
                        ref alParamsCoupleError // alParamsCoupleError
                        , strOrgID // objOrgID
                        , strInvoiceCustomFieldCode // objInvoiceCustomFieldCode 
                        , TConst.Flag.No // strFlagExistToCheck
                        , "" // strFlagActiveListToCheck
                        , out dtDB_Invoice_CustomField // dtDB_Invoice_CustomField
                        );
                }
                #endregion

                #region // SaveDB Invoice_CustomField:
                {
                    // Init:
                    //ArrayList alColumnEffective = new ArrayList();
                    string strFN = "";
                    DataRow drDB = dtDB_Invoice_CustomField.NewRow();
                    strFN = "OrgID"; drDB[strFN] = strOrgID;
                    strFN = "NetworkID"; drDB[strFN] = nNetworkID;
                    strFN = "InvoiceCustomFieldCode"; drDB[strFN] = strInvoiceCustomFieldCode;
                    strFN = "InvoiceCustomFieldName"; drDB[strFN] = strInvoiceCustomFieldName;
                    strFN = "DBPhysicalType"; drDB[strFN] = strDBPhysicalType;
                    strFN = "FlagActive"; drDB[strFN] = TConst.Flag.Active;
                    strFN = "LogLUDTimeUTC"; drDB[strFN] = dtimeSys.ToString("yyyy-MM-dd HH:mm:ss");
                    strFN = "LogLUBy"; drDB[strFN] = strWAUserCode;
                    dtDB_Invoice_CustomField.Rows.Add(drDB);

                    // Save:
                    _cf.db.SaveData(
                        "Invoice_CustomField"
                        , dtDB_Invoice_CustomField
                        //, alColumnEffective.ToArray()
                        );
                }
                #endregion

                // Return Good:
                TDALUtils.DBUtils.CommitSafety(_cf.db);
                mdsFinal.AcceptChanges();
                return mdsFinal;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Rollback:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);

                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsFinal
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Rollback and Release resources:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);
                TDALUtils.DBUtils.ReleaseAllSemaphore(_cf.db_Sys, true);

                // Write ReturnLog:
                _cf.ProcessBizReturn_OutSide(
                    ref mdsFinal // mdsFinal
                    , strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    );
                #endregion
            }
        }

        public DataSet Invoice_CustomField_Create_New20190703(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            ////
            //, object objOrgID
            //, object objInvoiceCustomFieldCode
            //, object objInvoiceCustomFieldName
            //, object objDBPhysicalType
            ////
            , DataSet dsData
            )
        {
            #region // Temp:
            DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            //int nTidSeq = 0;
            bool bMyDebugSql = false;
            DateTime dtimeSys = DateTime.UtcNow;
            string strFunctionName = "Invoice_CustomField_Create";
            string strErrorCodeDefault = TError.ErridnInventory.Invoice_CustomField_Create;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
                //////
                //, "objOrgID", objOrgID
                //, "objInvoiceCustomFieldCode", objInvoiceCustomFieldCode
                //, "objInvoiceCustomFieldName", objInvoiceCustomFieldName
                //, "objDBPhysicalType", objDBPhysicalType
                //, dsData
                });
            
            //ArrayList alPCErrEx = new ArrayList();
            ////
            Hashtable htParamsSql = new Hashtable();
            #endregion

            try
            {
                #region // Convert Input:
                alParamsCoupleError.AddRange(new object[]{
                    "Check.dsData", TJson.JsonConvert.SerializeObject(dsData)
                    });
                #endregion

                #region // Init:
                //_cf.db.LogUserId = _cf.sinf.strUserCode;
                _cf.db.BeginTransaction();

                // Write RequestLog:
                _cf.ProcessBizReq_OutSide(
                    strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    , alParamsCoupleError // alParamsCoupleError
                    );

                // Sys_User_CheckAuthentication:
                //Sys_User_CheckAuthentication(
                //    ref alParamsCoupleError
                //    , strWAUserCode
                //    , strWAUserPassword
                //    );

                // Check Access/Deny:
                Sys_Access_CheckDenyV30(
                    ref alParamsCoupleError
                    , strWAUserCode
                    , strFunctionName
                    );
                #endregion

                #region //// Refine and Check Invoice_CustomField:
                ////

                DataTable dtInput_Invoice_CustomField = null;
                {
                    ////
                    string strTableCheck = "Invoice_CustomField";
                    ////
                    if (!dsData.Tables.Contains(strTableCheck))
                    {
                        alParamsCoupleError.AddRange(new object[]{
                        "Check.TableName", strTableCheck
                        });
                        throw CmUtils.CMyException.Raise(
                            TError.ErridnInventory.Invoice_CustomField_CheckDB_CustomFieldNotFound
                            , null
                            , alParamsCoupleError.ToArray()
                            );
                    }
                    dtInput_Invoice_CustomField = dsData.Tables[strTableCheck];
                    ////
                    //if (dtInput_KUNN_ValLaiSuatChangeHist.Rows.Count < 1)
                    //{
                    //	alParamsCoupleError.AddRange(new object[]{
                    //		"Check.TableName", strTableCheck
                    //		});
                    //	throw CmUtils.CMyException.Raise(
                    //		TError.ErrTCGQLTV.Mst_Spec_Add_Input_KUNN_ValLaiSuatChangeHistTblInvalid
                    //		, null
                    //		, alParamsCoupleError.ToArray()
                    //		);
                    //}
                    ////
                    TUtils.CUtils.StdDataInTable(
                        dtInput_Invoice_CustomField // dtData
                        , "StdParam", "OrgID" // arrstrCouple
                        , "StdParam", "InvoiceCustomFieldCode" // arrstrCouple
                        , "", "InvoiceCustomFieldName" // arrstrCouple
                        , "", "DBPhysicalType" // arrstrCouple
                        );
                    ////
                    TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_CustomField, "NetworkID", typeof(object));
                    TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_CustomField, "FlagActive", typeof(object));
                    TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_CustomField, "LogLUDTimeUTC", typeof(object));
                    TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_CustomField, "LogLUBy", typeof(object));
                    ////
                    for (int nScan = 0; nScan < dtInput_Invoice_CustomField.Rows.Count; nScan++)
                    {
                        ////
                        DataRow drScan = dtInput_Invoice_CustomField.Rows[nScan];

                        string strOrgID = TUtils.CUtils.StdParam(drScan["OrgID"]);
                        string strInvoiceCustomFieldCode = TUtils.CUtils.StdParam(drScan["InvoiceCustomFieldCode"]);
                        string strInvoiceCustomFieldName = string.Format("{0}", drScan["InvoiceCustomFieldName"]).Trim();
                        string strDBPhysicalType = string.Format("{0}", drScan["DBPhysicalType"]).Trim();

                        ////
                        if (strOrgID == null || strOrgID.Length < 1)
                        {
                            alParamsCoupleError.AddRange(new object[]{
                            "Check.strOrgID", strOrgID
                            });
                            throw CmUtils.CMyException.Raise(
                                TError.ErridnInventory.Invoice_CustomField_Create_InvalidOrgID
                                , null
                                , alParamsCoupleError.ToArray()
                                );
                        }
                        ////
                        if (strInvoiceCustomFieldCode == null || strInvoiceCustomFieldCode.Length < 1)
                        {
                            alParamsCoupleError.AddRange(new object[]{
                            "Check.strInvoiceCustomFieldCode", strInvoiceCustomFieldCode
                            });
                            throw CmUtils.CMyException.Raise(
                                TError.ErridnInventory.Invoice_CustomField_Create_InvalidInvoiceCustomFieldCode
                                , null
                                , alParamsCoupleError.ToArray()
                                );
                        }
                        ////
                        DataTable dtDB_Invoice_CustomField = null;

                        Invoice_CustomField_CheckDB(
                            ref alParamsCoupleError // alParamsCoupleError
                            , strOrgID // objOrgID
                            , strInvoiceCustomFieldCode // objInvoiceCustomFieldCode 
                            , TConst.Flag.No // strFlagExistToCheck
                            , "" // strFlagActiveListToCheck
                            , out dtDB_Invoice_CustomField // dtDB_Invoice_CustomField
                            );
                        ////
                        drScan["OrgID"] = strOrgID;
                        drScan["InvoiceCustomFieldCode"] = strInvoiceCustomFieldCode;
                        drScan["NetworkID"] = nNetworkID;
                        drScan["InvoiceCustomFieldName"] = strInvoiceCustomFieldName;
                        drScan["DBPhysicalType"] = strDBPhysicalType;
                        drScan["FlagActive"] = TConst.Flag.Active;
                        drScan["LogLUDTimeUTC"] = dtimeSys.ToString("yyyy-MM-dd HH:mm:ss");
                        drScan["LogLUBy"] = strWAUserCode;
                        

                    }
                }
                #endregion

                #region //// SaveTemp Invoice_CustomField:
                {
                    TUtils.CUtils.MyBuildDBDT_Common(
                        _cf.db
                        , "#input_Invoice_CustomField"
                        , new object[]{
                            "OrgID", TConst.BizMix.Default_DBColType,
                            "InvoiceCustomFieldCode", TConst.BizMix.Default_DBColType,
                            "NetworkID", TConst.BizMix.Default_DBColType,
                            "InvoiceCustomFieldName", TConst.BizMix.Default_DBColType,
                            "DBPhysicalType", TConst.BizMix.Default_DBColType,
                            "FlagActive", TConst.BizMix.Default_DBColType,
                            "LogLUDTimeUTC", TConst.BizMix.Default_DBColType,
                            "LogLUBy", TConst.BizMix.Default_DBColType,
                            }
                        , dtInput_Invoice_CustomField
                        );
                }
                #endregion

                #region //// Save:
                //// Clear All:
                {
                    //string strSqlDelete = CmUtils.StringUtils.Replace(@"
                    //			---- Mst_SpecDtl:
                    //			delete t
                    //			from Mst_SpecDtl t
                    //			where (1=1)
                    //				and t.KUNNNo = @strKUNNNo
                    //			;

                    //			---- Mst_Spec:
                    //			delete t
                    //			from Mst_Spec t
                    //			where (1=1)
                    //				and t.KUNNNo = @strKUNNNo
                    //			;

                    //		");
                    //_cf.db.ExecQuery(
                    //	strSqlDelete
                    //	, "@strKUNNNo", strKUNNNo
                    //	);
                }

                //// Insert All:
                {
                    ////
                    string zzzzClauseInsert_Invoice_CustomField_zSave = CmUtils.StringUtils.Replace(@"
        		        ---- Invoice_CustomField:

        		        insert into Invoice_CustomField
        		        (
        			        OrgID
        			        , InvoiceCustomFieldCode
        			        , NetworkID
        			        , InvoiceCustomFieldName
        			        , DBPhysicalType
        			        , FlagActive
        			        , LogLUDTimeUTC
        			        , LogLUBy
        		        )
        		        select 
        			        t.OrgID
        			        , t.InvoiceCustomFieldCode
        			        , t.NetworkID
        			        , t.InvoiceCustomFieldName
        			        , t.DBPhysicalType
        			        , t.FlagActive
        			        , t.LogLUDTimeUTC
        			        , t.LogLUBy
        		        from #input_Invoice_CustomField t --//[mylock]
        		        ;
        	        ");
                    
                    ////
                    string strSqlExec = CmUtils.StringUtils.Replace(@"
        		        ----
        		        zzzzClauseInsert_Invoice_CustomField_zSave

        	        "
                        , "zzzzClauseInsert_Invoice_CustomField_zSave", zzzzClauseInsert_Invoice_CustomField_zSave
                        );
                    ////
                    if (bMyDebugSql)
                    {
                        alParamsCoupleError.AddRange(new object[]{
                        "Check.strSqlExec", strSqlExec
                        });
                    }
                    DataSet dsExec = _cf.db.ExecQuery(strSqlExec);
                }
                #endregion

                #region //// Clear For Debug:
                {
                    ////
                    string strSqlClearForDebug = CmUtils.StringUtils.Replace(@"
						---- Clear for Debug:
						drop table #input_Invoice_CustomField;
					");

                    _cf.db.ExecQuery(
                        strSqlClearForDebug
                        );
                    ////
                }
                #endregion

                // Return Good:
                TDALUtils.DBUtils.CommitSafety(_cf.db);
                mdsFinal.AcceptChanges();
                return mdsFinal;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Rollback:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);

                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsFinal
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Rollback and Release resources:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);
                TDALUtils.DBUtils.ReleaseAllSemaphore(_cf.db_Sys, true);

                // Write ReturnLog:
                _cf.ProcessBizReturn_OutSide(
                    ref mdsFinal // mdsFinal
                    , strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    );
                #endregion
            }
        }

        public DataSet Invoice_CustomField_Update(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            ////
            , object objOrgID
            , object objInvoiceCustomFieldCode
            , object objInvoiceCustomFieldName
            , object objDBPhysicalType
            , object objFlagActive
            ////
            , object objFt_Cols_Upd
            )
        {
            #region // Temp:
            DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            //int nTidSeq = 0;
            DateTime dtimeSys = DateTime.UtcNow;
            string strFunctionName = "Invoice_CustomField_Update";
            string strErrorCodeDefault = TError.ErridnInventory.Invoice_CustomField_Update;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
                , "objOrgID", objOrgID
                , "objInvoiceCustomFieldCode", objInvoiceCustomFieldCode
                , "objInvoiceCustomFieldName", objInvoiceCustomFieldName
                , "objDBPhysicalType", objDBPhysicalType
                , "objFlagActive", objFlagActive
				////
				, "objFt_Cols_Upd", objFt_Cols_Upd
                });
            #endregion

            try
            {
                #region // Convert Input:
                #endregion

                #region // Init:
                //_cf.db.LogUserId = _cf.sinf.strUserCode;
                _cf.db.BeginTransaction();

                // Write RequestLog:
                _cf.ProcessBizReq_OutSide(
                    strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    , alParamsCoupleError // alParamsCoupleError
                    );

                // Sys_User_CheckAuthentication:
                //Sys_User_CheckAuthentication(
                //    ref alParamsCoupleError
                //    , strWAUserCode
                //    , strWAUserPassword
                //    );

                // Check Access/Deny:
                Sys_Access_CheckDenyV30(
                    ref alParamsCoupleError
                    , strWAUserCode
                    , strFunctionName
                    );
                #endregion

                #region // Refine and Check Input:
                ////
                string strFt_Cols_Upd = TUtils.CUtils.StdParam(objFt_Cols_Upd);
                strFt_Cols_Upd = (strFt_Cols_Upd == null ? "" : strFt_Cols_Upd);
                ////
                string strOrgID = TUtils.CUtils.StdParam(objOrgID);
                string strInvoiceCustomFieldCode = TUtils.CUtils.StdParam(objInvoiceCustomFieldCode);
                string strInvoiceCustomFieldName = string.Format("{0}", objInvoiceCustomFieldName).Trim();
                string strDBPhysicalType = string.Format("{0}", objDBPhysicalType).Trim();
                string strFlagActive = TUtils.CUtils.StdFlag(objFlagActive);
                ////
                bool bUpd_InvoiceCustomFieldName = strFt_Cols_Upd.Contains("Invoice_CustomField.InvoiceCustomFieldName".ToUpper());
                bool bUpd_DBPhysicalType = strFt_Cols_Upd.Contains("Invoice_CustomField.DBPhysicalType".ToUpper());
                bool bUpd_FlagActive = strFt_Cols_Upd.Contains("Invoice_CustomField.FlagActive".ToUpper());

                ////
                DataTable dtDB_Invoice_CustomField = null;
                {
                    ////
                    Invoice_CustomField_CheckDB(
                         ref alParamsCoupleError // alParamsCoupleError
                         , strOrgID // objOrgID
                         , strInvoiceCustomFieldCode // objInvoiceCustomFieldCode
                         , TConst.Flag.Yes // strFlagExistToCheck
                         , "" // strFlagActiveListToCheck
                         , out dtDB_Invoice_CustomField // dtDB_Invoice_CustomField
                        );
                    ////
                    if (bUpd_InvoiceCustomFieldName && string.IsNullOrEmpty(strInvoiceCustomFieldName))
                    {
                        alParamsCoupleError.AddRange(new object[]{
                            "Check.strInvoiceCustomFieldName", strInvoiceCustomFieldName
                            });
                        throw CmUtils.CMyException.Raise(
                            TError.ErridnInventory.Invoice_CustomField_Update_InvalidInvoiceCustomFieldName
                            , null
                            , alParamsCoupleError.ToArray()
                            );
                    }
                    ////
                }
                #endregion

                #region // SaveDB Invoice_CustomField:
                {
                    // Init:
                    ArrayList alColumnEffective = new ArrayList();
                    string strFN = "";
                    DataRow drDB = dtDB_Invoice_CustomField.Rows[0];
                    if (bUpd_InvoiceCustomFieldName) { strFN = "InvoiceCustomFieldName"; drDB[strFN] = strInvoiceCustomFieldName; alColumnEffective.Add(strFN); }
                    if (bUpd_DBPhysicalType) { strFN = "DBPhysicalType"; drDB[strFN] = strDBPhysicalType; alColumnEffective.Add(strFN); }
                    if (bUpd_FlagActive) { strFN = "FlagActive"; drDB[strFN] = strFlagActive; alColumnEffective.Add(strFN); }
                    strFN = "LogLUDTimeUTC"; drDB[strFN] = dtimeSys.ToString("yyyy-MM-dd HH:mm:ss"); alColumnEffective.Add(strFN);
                    strFN = "LogLUBy"; drDB[strFN] = strWAUserCode; alColumnEffective.Add(strFN);

                    // Save:
                    _cf.db.SaveData(
                        "Invoice_CustomField"
                        , dtDB_Invoice_CustomField
                        , alColumnEffective.ToArray()
                        );
                }
                #endregion

                // Return Good:
                TDALUtils.DBUtils.CommitSafety(_cf.db);
                mdsFinal.AcceptChanges();
                return mdsFinal;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Rollback:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);

                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsFinal
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Rollback and Release resources:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);
                TDALUtils.DBUtils.ReleaseAllSemaphore(_cf.db_Sys, true);

                // Write ReturnLog:
                _cf.ProcessBizReturn_OutSide(
                    ref mdsFinal // mdsFinal
                    , strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    );
                #endregion
            }
        }

        public DataSet Invoice_CustomField_Update_New20190703(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            ////
            , DataSet dsData
            ////
            , object objFt_Cols_Upd
            )
        {
            #region // Temp:
            DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            //int nTidSeq = 0;
            DateTime dtimeSys = DateTime.UtcNow;
            string strFunctionName = "Invoice_CustomField_Update";
            string strErrorCodeDefault = TError.ErridnInventory.Invoice_CustomField_Update;
            //string strErrorCodeDefault = TError.ErrTCGQLTV.Invoice_CustomField_Update;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
				, "objFt_Cols_Upd", objFt_Cols_Upd
                });
            #endregion

            try
            {

                #region // Convert Input:
                DateTime dtimeTDate = DateTime.Now;
                alParamsCoupleError.AddRange(new object[]{
                "Check.dsData", TJson.JsonConvert.SerializeObject(dsData)
                });
                #endregion

                #region // Init:
                //_cf.db.LogUserId = _cf.sinf.strUserCode;
                _cf.db.BeginTransaction();

                // Write RequestLog:
                _cf.ProcessBizReq_OutSide(
                    strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    , alParamsCoupleError // alParamsCoupleError
                    );

                // Sys_User_CheckAuthentication:
                //Sys_User_CheckAuthentication(
                //    ref alParamsCoupleError
                //    , strWAUserCode
                //    , strWAUserPassword
                //    );

                // Check Access/Deny:
                Sys_Access_CheckDenyV30(
                    ref alParamsCoupleError
                    , strWAUserCode
                    , strFunctionName
                    );
                #endregion

                #region // Refine and Check Input:
                string strFt_Cols_Upd = TUtils.CUtils.StdParam(objFt_Cols_Upd);
                strFt_Cols_Upd = (strFt_Cols_Upd == null ? "" : strFt_Cols_Upd);
                ////
                //string strAssetCode = TUtils.CUtils.StdParam(objAssetCode);
                //string strAssetName = string.Format("{0}", objAssetName).Trim();
                //double strValAsset = Convert.ToDouble(objValAsset);
                //double strNominalValue = Convert.ToDouble(objNominalValue);
                //double strMDMaxValue = Convert.ToDouble(objMDMaxValue);
                //double strLDPercent = Convert.ToDouble(objLDPercent);
                //string strDateEnd = TUtils.CUtils.StdDTime(objDateEnd);
                //string strAssetStatus = TUtils.CUtils.StdFlag(objAssetStatus);

                ////
                bool bUpd_InvoiceCustomFieldName = strFt_Cols_Upd.Contains("Invoice_CustomField.InvoiceCustomFieldName".ToUpper());
                bool bUpd_DBPhysicalType = strFt_Cols_Upd.Contains("Invoice_CustomField.DBPhysicalType".ToUpper());
                bool bUpd_FlagActive = strFt_Cols_Upd.Contains("Invoice_CustomField.FlagActive".ToUpper());

                #endregion

                #region // Refine and Check Input Invoice_CustomField:

                ////
                DataTable dtInput_Invoice_CustomField = null;
                ////
                {
                    ////
                    string strTableCheck = "Invoice_CustomField";
                    ////
                    if (!dsData.Tables.Contains(strTableCheck))
                    {
                        alParamsCoupleError.AddRange(new object[]{
                            "Check.TableName", strTableCheck
                            });
                        throw CmUtils.CMyException.Raise(
                            TError.ErridnInventory.Invoice_CustomField_Update_CustomFieldblNotFound
                            , null
                            , alParamsCoupleError.ToArray()
                            );
                    }
                    dtInput_Invoice_CustomField = dsData.Tables[strTableCheck];
                    ////
                    if (dtInput_Invoice_CustomField.Rows.Count < 1)
                    {
                        alParamsCoupleError.AddRange(new object[]{
                            "Check.TableName", strTableCheck
                            });
                        throw CmUtils.CMyException.Raise(
                            TError.ErridnInventory.Invoice_CustomField_Update_Input_CustomFieldblInvalid
                            , null
                            , alParamsCoupleError.ToArray()
                            );
                    }
                    ////
                    TUtils.CUtils.StdDataInTable(
                        dtInput_Invoice_CustomField // dtData
                        , "StdParam", "OrgID" // arrstrCouple
                        , "StdParam", "InvoiceCustomFieldCode" // arrstrCouple
                        , "", "InvoiceCustomFieldName" // arrstrCouple
                        , "", "DBPhysicalType" // arrstrCouple
                        , "StdFlag", "FlagActive" // arrstrCouple
                        );
                    ////
                    TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_CustomField, "NetworkID", typeof(object));
                    TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_CustomField, "LogLUDTimeUTC", typeof(object));
                    TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_CustomField, "LogLUBy", typeof(object));

                    ////
                    for (int nScan = 0; nScan < dtInput_Invoice_CustomField.Rows.Count; nScan++)
                    {
                        ////
                        DataRow drScan = dtInput_Invoice_CustomField.Rows[nScan];

                        //string strOrgID = TUtils.CUtils.StdParam(drScan["OrgID"]);
                        //string strInvoiceCustomFieldCode = TUtils.CUtils.StdParam(drScan["InvoiceCustomFieldCode"]);
                        string strInvoiceCustomFieldName = string.Format("{0}", drScan["InvoiceCustomFieldName"]).Trim();
                        string strDBPhysicalType = string.Format("{0}", drScan["DBPhysicalType"]).Trim();
                        string strFlagActive = TUtils.CUtils.StdFlag(drScan["FlagActive"]);
                        
                        ////
                        if (bUpd_InvoiceCustomFieldName && string.IsNullOrEmpty(strInvoiceCustomFieldName))
                        {
                            alParamsCoupleError.AddRange(new object[]{
                            "Check.strInvoiceCustomFieldName", strInvoiceCustomFieldName
                            });
                            throw CmUtils.CMyException.Raise(
                                TError.ErridnInventory.Invoice_CustomField_Update_InvalidInvoiceCustomFieldName
                                , null
                                , alParamsCoupleError.ToArray()
                                );
                        }

                        ////
                        DataTable dtDB_Invoice_CustomField = null;
                        
                        Invoice_CustomField_CheckDB(
                            ref alParamsCoupleError // alParamsCoupleError
                            , drScan["OrgID"] // objAssetCode
                            , drScan["InvoiceCustomFieldCode"] // objAssetCode
                            , TConst.Flag.Yes // strFlagExistToCheck
                            , "" // strFlagActiveListToCheck                        
                            , out dtDB_Invoice_CustomField // dtDB_Invoice_CustomField
                            );
                        
                        ////
                        //drScan["OrgID"] = strOrgID;
                        //drScan["InvoiceCustomFieldCode"] = strInvoiceCustomFieldCode;
                        drScan["NetworkID"] = nNetworkID;
                        drScan["InvoiceCustomFieldName"] = strInvoiceCustomFieldName; // string.Format("{0}", drScan["InvoiceCustomFieldName"]).Trim();
                        drScan["DBPhysicalType"] = strDBPhysicalType;
                        drScan["FlagActive"] = strFlagActive;
                        drScan["LogLUDTimeUTC"] = dtimeSys.ToString("yyyy-MM-dd HH:mm:ss");
                        drScan["LogLUBy"] = strWAUserCode;
                    }
                }

                //// Upload:
                {
                    TUtils.CUtils.MyBuildDBDT_Common(
                        _cf.db
                        , "#input_Invoice_CustomField"
                        , new object[]{
                            "OrgID", TConst.BizMix.Default_DBColType,
                            "InvoiceCustomFieldCode", TConst.BizMix.Default_DBColType,
                            "NetworkID", TConst.BizMix.Default_DBColType,
                            "InvoiceCustomFieldName", TConst.BizMix.Default_DBColType,
                            "DBPhysicalType", TConst.BizMix.Default_DBColType,
                            "FlagActive", TConst.BizMix.Default_DBColType,
                            "LogLUDTimeUTC", TConst.BizMix.Default_DBColType,
                            "LogLUBy", TConst.BizMix.Default_DBColType,
                            }
                        , dtInput_Invoice_CustomField
                        );
                }
                ////
                #endregion

                #region // SaveDB Invoice_CustomField:
                {
                    ////
                    string zzB_Update_Invoice_CustomField_ClauseSet_zzE = @"
								t.LogLUDTimeUTC = f.LogLUDTimeUTC
								, t.LogLUBy = f.LogLUBy
							";
                    if (bUpd_InvoiceCustomFieldName) zzB_Update_Invoice_CustomField_ClauseSet_zzE += ", t.InvoiceCustomFieldName = f.InvoiceCustomFieldName";
                    if (bUpd_DBPhysicalType) zzB_Update_Invoice_CustomField_ClauseSet_zzE += ", t.DBPhysicalType = f.DBPhysicalType";
                    if (bUpd_FlagActive) zzB_Update_Invoice_CustomField_ClauseSet_zzE += ", t.FlagActive = f.FlagActive";
                    ////
                    string zzB_Update_Invoice_CustomField_zzE = CmUtils.StringUtils.Replace(@"
							---- Invoice_CustomField:
							update t
							set 
								zzB_Update_Invoice_CustomField_ClauseSet_zzE
							from Invoice_CustomField t --//[mylock]
								inner join #input_Invoice_CustomField f --//[mylock]
									on t.OrgID = f.OrgID
                                        and t.InvoiceCustomFieldCode = f.InvoiceCustomFieldCode
							where (1=1)
							;
						"
                        , "zzB_Update_Invoice_CustomField_ClauseSet_zzE", zzB_Update_Invoice_CustomField_ClauseSet_zzE
                        );
                    ////
                    string strSql_Exec = CmUtils.StringUtils.Replace(@"
							----
							zzB_Update_Invoice_CustomField_zzE
							----
						"
                        , "zzB_Update_Invoice_CustomField_zzE", zzB_Update_Invoice_CustomField_zzE
                        );
                    DataSet dsDB_Check = _cf.db.ExecQuery(
                        strSql_Exec
                        );
                }
                #endregion

                #region //// Clear For Debug:
                {
                    ////
                    string strSqlClearForDebug = CmUtils.StringUtils.Replace(@"
						---- Clear for Debug:
						drop table #input_Invoice_CustomField;
					");

                    _cf.db.ExecQuery(
                        strSqlClearForDebug
                        );
                    ////
                }
                #endregion

                // Return Good:
                TDALUtils.DBUtils.CommitSafety(_cf.db);
                mdsFinal.AcceptChanges();
                return mdsFinal;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Rollback:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);

                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsFinal
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Rollback and Release resources:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);
                TDALUtils.DBUtils.ReleaseAllSemaphore(_cf.db_Sys, true);

                // Write ReturnLog:
                _cf.ProcessBizReturn_OutSide(
                    ref mdsFinal // mdsFinal
                    , strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    );
                #endregion
            }
        }

        public DataSet Invoice_CustomField_Delete(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            /////
            , object objOrgID
            , object objInvoiceCustomFieldCode
            )
        {
            #region // Temp:
            DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            //int nTidSeq = 0;
            DateTime dtimeSys = DateTime.UtcNow;
            string strFunctionName = "Invoice_CustomField_Delete";
            string strErrorCodeDefault = TError.ErridnInventory.Invoice_CustomField_Delete;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
                , "objOrgID", objOrgID
                , "objInvoiceCustomFieldCode", objInvoiceCustomFieldCode
                });
            #endregion

            try
            {
                #region // Init:
                //_cf.db.LogUserId = _cf.sinf.strUserCode;
                _cf.db.BeginTransaction();

                // Write RequestLog:
                _cf.ProcessBizReq_OutSide(
                    strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    , alParamsCoupleError // alParamsCoupleError
                    );

                // Sys_User_CheckAuthentication:
                //Sys_User_CheckAuthentication(
                //    ref alParamsCoupleError
                //    , strWAUserCode
                //    , strWAUserPassword
                //    );

                // Check Access/Deny:
                Sys_Access_CheckDenyV30(
                    ref alParamsCoupleError
                    , strWAUserCode
                    , strFunctionName
                    );
                #endregion

                #region // Refine and Check Input:
                ////
                string strOrgID = TUtils.CUtils.StdParam(objOrgID);
                string strInvoiceCustomFieldCode = TUtils.CUtils.StdParam(objInvoiceCustomFieldCode);
                ////
                DataTable dtDB_Invoice_CustomField = null;
                {
                    ////
                    Invoice_CustomField_CheckDB(
                         ref alParamsCoupleError // alParamsCoupleError
                         , strOrgID // objOrgID
                         , strInvoiceCustomFieldCode // objInvoiceCustomFieldCode
                         , TConst.Flag.Yes // strFlagExistToCheck
                         , "" // strFlagActiveListToCheck
                         , out dtDB_Invoice_CustomField // dtDB_Invoice_CustomField
                        );
                    ////
                }
                #endregion

                #region // SaveDB Invoice_CustomField:
                {
                    // Init:
                    dtDB_Invoice_CustomField.Rows[0].Delete();

                    // Save:
                    _cf.db.SaveData(
                        "Invoice_CustomField"
                        , dtDB_Invoice_CustomField
                        );
                }
                #endregion

                // Return Good:
                TDALUtils.DBUtils.CommitSafety(_cf.db);
                mdsFinal.AcceptChanges();
                return mdsFinal;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Rollback:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);

                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsFinal
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Rollback and Release resources:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);
                TDALUtils.DBUtils.ReleaseAllSemaphore(_cf.db_Sys, true);

                // Write ReturnLog:
                _cf.ProcessBizReturn_OutSide(
                    ref mdsFinal // mdsFinal
                    , strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    );
                #endregion
            }
        }
        public DataSet WAS_Invoice_CustomField_Get(
            ref ArrayList alParamsCoupleError
            , RQ_Invoice_CustomField objRQ_Invoice_CustomField
            ////
            , out RT_Invoice_CustomField objRT_Invoice_CustomField
            )
        {
            #region // Temp:
            string strTid = objRQ_Invoice_CustomField.Tid;
            objRT_Invoice_CustomField = new RT_Invoice_CustomField();
            DataSet mdsResult = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            DateTime dtimeSys = DateTime.UtcNow;
            //DataSet mdsExec = null;
            //DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(objRQ_Invoice_CustomField.Tid);
            //int nTidSeq = 0;
            //bool bNeedTransaction = true;
            string strFunctionName = "WAS_Invoice_CustomField_Get";
            string strErrorCodeDefault = TError.ErridnInventory.WAS_Invoice_CustomField_Get;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
				});
            #endregion

            try
            {
                #region // Init:
                #endregion

                #region // Refine and Check Input:
                List<MySummaryTable> lst_MySummaryTable = new List<MySummaryTable>();

                List<Invoice_CustomField> lst_Invoice_CustomField = new List<Invoice_CustomField>();
                bool bGet_Invoice_CustomField = (objRQ_Invoice_CustomField.Rt_Cols_Invoice_CustomField != null && objRQ_Invoice_CustomField.Rt_Cols_Invoice_CustomField.Length > 0);
                #endregion

                #region // WS_Invoice_CustomField_Get:
                mdsResult = Invoice_CustomField_Get(
                    objRQ_Invoice_CustomField.Tid // strTid
                    , objRQ_Invoice_CustomField.GwUserCode // strGwUserCode
                    , objRQ_Invoice_CustomField.GwPassword // strGwPassword
                    , objRQ_Invoice_CustomField.WAUserCode // strUserCode
                    , objRQ_Invoice_CustomField.WAUserPassword // strUserPassword
                    , ref alParamsCoupleError // alParamsCoupleError
                                              //// Filter:
                    , objRQ_Invoice_CustomField.Ft_RecordStart // strFt_RecordStart
                    , objRQ_Invoice_CustomField.Ft_RecordCount // strFt_RecordCount
                    , objRQ_Invoice_CustomField.Ft_WhereClause // strFt_WhereClause
                                                               //// Return:
                    , objRQ_Invoice_CustomField.Rt_Cols_Invoice_CustomField // strRt_Cols_Invoice_CustomField
                    );
                #endregion

                #region // GetData:
                if (!CmUtils.CMyDataSet.HasError(mdsResult))
                {
                    ////
                    DataTable dt_MySummaryTable = mdsResult.Tables["MySummaryTable"].Copy();
                    lst_MySummaryTable = TUtils.DataTableCmUtils.ToListof<MySummaryTable>(dt_MySummaryTable);
                    objRT_Invoice_CustomField.MySummaryTable = lst_MySummaryTable[0];

                    ////
                    if (bGet_Invoice_CustomField)
                    {
                        ////
                        DataTable dt_Invoice_CustomField = mdsResult.Tables["Invoice_CustomField"].Copy();
                        lst_Invoice_CustomField = TUtils.DataTableCmUtils.ToListof<Invoice_CustomField>(dt_Invoice_CustomField);
                        objRT_Invoice_CustomField.Lst_Invoice_CustomField = lst_Invoice_CustomField;
                    }
                }
                #endregion

                // Return Good:
                return mdsResult;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsResult
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Write ReturnLog:
                //_cf.ProcessBizReturn(
                //	ref mdsResult // mdsFinal
                //	, strTid // strTid
                //	, strFunctionName // strFunctionName
                //	);
                #endregion
            }
        }

        public DataSet WAS_Invoice_CustomField_Create(
            ref ArrayList alParamsCoupleError
            , RQ_Invoice_CustomField objRQ_Invoice_CustomField
            ////
            , out RT_Invoice_CustomField objRT_Invoice_CustomField
            )
        {
            #region // Temp:
            string strTid = objRQ_Invoice_CustomField.Tid;
            objRT_Invoice_CustomField = new RT_Invoice_CustomField();
            DataSet mdsResult = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            DateTime dtimeSys = DateTime.UtcNow;
            //DataSet mdsExec = null;
            //DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(objRQ_Invoice_CustomField.Tid);
            //int nTidSeq = 0;
            //bool bNeedTransaction = true;
            string strFunctionName = "WAS_Invoice_CustomField_Create";
            string strErrorCodeDefault = TError.ErridnInventory.WAS_Invoice_CustomField_Create;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
                , "Invoice_CustomField", TJson.JsonConvert.SerializeObject(objRQ_Invoice_CustomField.Invoice_CustomField)
				////
				});
            #endregion

            try
            {
                #region // Init:
                #endregion

                #region // Refine and Check Input:
                //List<Invoice_CustomField> lst_Invoice_CustomField = new List<Invoice_CustomField>();
                //List<Invoice_CustomFieldInGroup> lst_Invoice_CustomFieldInGroup = new List<Invoice_CustomFieldInGroup>();
                #endregion

                #region // Invoice_CustomField_Create:
                mdsResult = Invoice_CustomField_Create(
                    objRQ_Invoice_CustomField.Tid // strTid
                    , objRQ_Invoice_CustomField.GwUserCode // strGwUserCode
                    , objRQ_Invoice_CustomField.GwPassword // strGwPassword
                    , objRQ_Invoice_CustomField.WAUserCode // strUserCode
                    , objRQ_Invoice_CustomField.WAUserPassword // strUserPassword
                    , ref alParamsCoupleError // alParamsCoupleError
                                              ////
                    , objRQ_Invoice_CustomField.Invoice_CustomField.OrgID // objOrgID
                    , objRQ_Invoice_CustomField.Invoice_CustomField.InvoiceCustomFieldCode // objInvoiceCustomFieldCode
                    , objRQ_Invoice_CustomField.Invoice_CustomField.InvoiceCustomFieldName // objInvoiceCustomFieldName
                    , objRQ_Invoice_CustomField.Invoice_CustomField.DBPhysicalType // objDBPhysicalType
                    );
                #endregion

                // Return Good:
                return mdsResult;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsResult
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Write ReturnLog:
                //_cf.ProcessBizReturn(
                //	ref mdsResult // mdsFinal
                //	, strTid // strTid
                //	, strFunctionName // strFunctionName
                //	);
                #endregion
            }
        }

        public DataSet WAS_Invoice_CustomField_Create_New20190703(
            ref ArrayList alParamsCoupleError
            , RQ_Invoice_CustomField objRQ_Invoice_CustomField
            ////
            , out RT_Invoice_CustomField objRT_Invoice_CustomField
            )
        {
            #region // Temp:
            string strTid = objRQ_Invoice_CustomField.Tid;
            objRT_Invoice_CustomField = new RT_Invoice_CustomField();
            DataSet mdsResult = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            DateTime dtimeSys = DateTime.UtcNow;
            //DataSet mdsExec = null;
            //DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(objRQ_Invoice_CustomField.Tid);
            //int nTidSeq = 0;
            //bool bNeedTransaction = true;
            string strFunctionName = "WAS_Invoice_CustomField_Create";
            string strErrorCodeDefault = TError.ErridnInventory.WAS_Invoice_CustomField_Create;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
                , "Lst_Invoice_CustomField", TJson.JsonConvert.SerializeObject(objRQ_Invoice_CustomField.Lst_Invoice_CustomField)
				////
				});
            #endregion

            try
            {
                #region // Init:
                #endregion

                #region // Refine and Check Input:
                ////
                DataSet dsData = new DataSet();
                {
                    ////
                    DataTable dt_Invoice_CustomField = TUtils.DataTableCmUtils.ToDataTable<Invoice_CustomField>(objRQ_Invoice_CustomField.Lst_Invoice_CustomField, "Invoice_CustomField");
                    dsData.Tables.Add(dt_Invoice_CustomField);
                }
                List<Invoice_CustomField> lst_Invoice_CustomField = new List<Invoice_CustomField>();
                #endregion

                #region // Invoice_CustomField_Create:
                mdsResult = Invoice_CustomField_Create_New20190703(
                    objRQ_Invoice_CustomField.Tid // strTid
                    , objRQ_Invoice_CustomField.GwUserCode // strGwUserCode
                    , objRQ_Invoice_CustomField.GwPassword // strGwPassword
                    , objRQ_Invoice_CustomField.WAUserCode // strUserCode
                    , objRQ_Invoice_CustomField.WAUserPassword // strUserPassword
                    , ref alParamsCoupleError // alParamsCoupleError
                                              ////
                    //, objRQ_Invoice_CustomField.Invoice_CustomField.OrgID // objOrgID
                    //, objRQ_Invoice_CustomField.Invoice_CustomField.InvoiceCustomFieldCode // objInvoiceCustomFieldCode
                    //, objRQ_Invoice_CustomField.Invoice_CustomField.InvoiceCustomFieldName // objInvoiceCustomFieldName
                    //, objRQ_Invoice_CustomField.Invoice_CustomField.DBPhysicalType // objDBPhysicalType
                    , dsData // dsData
                    );
                #endregion

                // Return Good:
                return mdsResult;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsResult
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Write ReturnLog:
                //_cf.ProcessBizReturn(
                //	ref mdsResult // mdsFinal
                //	, strTid // strTid
                //	, strFunctionName // strFunctionName
                //	);
                #endregion
            }
        }

        public DataSet WAS_Invoice_CustomField_Update(
            ref ArrayList alParamsCoupleError
            , RQ_Invoice_CustomField objRQ_Invoice_CustomField
            ////
            , out RT_Invoice_CustomField objRT_Invoice_CustomField
            )
        {
            #region // Temp:
            string strTid = objRQ_Invoice_CustomField.Tid;
            objRT_Invoice_CustomField = new RT_Invoice_CustomField();
            DataSet mdsResult = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            DateTime dtimeSys = DateTime.UtcNow;
            //DataSet mdsExec = null;
            //DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(objRQ_Invoice_CustomField.Tid);
            //int nTidSeq = 0;
            //bool bNeedTransaction = true;
            string strFunctionName = "WAS_Invoice_CustomField_Update";
            string strErrorCodeDefault = TError.ErridnInventory.WAS_Invoice_CustomField_Update;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
                , "Invoice_CustomField", TJson.JsonConvert.SerializeObject(objRQ_Invoice_CustomField.Invoice_CustomField)
				////
				});
            #endregion

            try
            {
                #region // Init:
                #endregion

                #region // Refine and Check Input:
                //List<Invoice_CustomField> lst_Invoice_CustomField = new List<Invoice_CustomField>();
                //List<Invoice_CustomFieldInGroup> lst_Invoice_CustomFieldInGroup = new List<Invoice_CustomFieldInGroup>();
                #endregion

                #region // Invoice_CustomField_Update:
                mdsResult = Invoice_CustomField_Update(
                    objRQ_Invoice_CustomField.Tid // strTid
                    , objRQ_Invoice_CustomField.GwUserCode // strGwUserCode
                    , objRQ_Invoice_CustomField.GwPassword // strGwPassword
                    , objRQ_Invoice_CustomField.WAUserCode // strUserCode
                    , objRQ_Invoice_CustomField.WAUserPassword // strUserPassword
                    , ref alParamsCoupleError // alParamsCoupleError
                                              ////
                    , objRQ_Invoice_CustomField.Invoice_CustomField.OrgID // objOrgID
                    , objRQ_Invoice_CustomField.Invoice_CustomField.InvoiceCustomFieldCode // objInvoiceCustomFieldCode
                    , objRQ_Invoice_CustomField.Invoice_CustomField.InvoiceCustomFieldName // objInvoiceCustomFieldName
                    , objRQ_Invoice_CustomField.Invoice_CustomField.DBPhysicalType // objDBPhysicalType
                    , objRQ_Invoice_CustomField.Invoice_CustomField.FlagActive // objFlagActive
                                                                               ////
                    , objRQ_Invoice_CustomField.Ft_Cols_Upd// objFt_Cols_Upd
                    );
                #endregion

                // Return Good:
                return mdsResult;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsResult
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Write ReturnLog:
                //_cf.ProcessBizReturn(
                //	ref mdsResult // mdsFinal
                //	, strTid // strTid
                //	, strFunctionName // strFunctionName
                //	);
                #endregion
            }
        }

        public DataSet WAS_Invoice_CustomField_Update_New20190703(
            ref ArrayList alParamsCoupleError
            , RQ_Invoice_CustomField objRQ_Invoice_CustomField
            ////
            , out RT_Invoice_CustomField objRT_Invoice_CustomField
            )
        {
            #region // Temp:
            string strTid = objRQ_Invoice_CustomField.Tid;
            objRT_Invoice_CustomField = new RT_Invoice_CustomField();
            DataSet mdsResult = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            DateTime dtimeSys = DateTime.UtcNow;
            //DataSet mdsExec = null;
            //DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(objRQ_Invoice_CustomField.Tid);
            //int nTidSeq = 0;
            //bool bNeedTransaction = true;
            string strFunctionName = "WAS_Invoice_CustomField_Update";
            string strErrorCodeDefault = TError.ErridnInventory.WAS_Invoice_CustomField_Update;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
                , "Lst_Invoice_CustomField", TJson.JsonConvert.SerializeObject(objRQ_Invoice_CustomField.Lst_Invoice_CustomField)
				////
				});
            #endregion

            try
            {
                #region // Init:
                #endregion

                #region // Refine and Check Input:
                ////
                DataSet dsData = new DataSet();
                {
                    ////
                    DataTable dt_Invoice_CustomField = TUtils.DataTableCmUtils.ToDataTable<Invoice_CustomField>(objRQ_Invoice_CustomField.Lst_Invoice_CustomField, "Invoice_CustomField");
                    dsData.Tables.Add(dt_Invoice_CustomField);
                }
                #endregion

                #region // Invoice_CustomField_Add:
                mdsResult = Invoice_CustomField_Update_New20190703(
                    objRQ_Invoice_CustomField.Tid // strTid
                    , objRQ_Invoice_CustomField.GwUserCode // strGwUserCode
                    , objRQ_Invoice_CustomField.GwPassword // strGwPassword
                    , objRQ_Invoice_CustomField.WAUserCode // strUserCode
                    , objRQ_Invoice_CustomField.WAUserPassword // strUserPassword
                    , ref alParamsCoupleError // alParamsCoupleError
                                              ////
                    , dsData // dsData
                             ////
                    , objRQ_Invoice_CustomField.Ft_Cols_Upd // objFt_Cols_Upd
                    );
                #endregion

                // Return Good:
                return mdsResult;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsResult
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Write ReturnLog:
                //_cf.ProcessBizReturn(
                //	ref mdsResult // mdsFinal
                //	, strTid // strTid
                //	, strFunctionName // strFunctionName
                //	);
                #endregion
            }
        }

        public DataSet WAS_Invoice_CustomField_Delete(
            ref ArrayList alParamsCoupleError
            , RQ_Invoice_CustomField objRQ_Invoice_CustomField
            ////
            , out RT_Invoice_CustomField objRT_Invoice_CustomField
            )
        {
            #region // Temp:
            string strTid = objRQ_Invoice_CustomField.Tid;
            objRT_Invoice_CustomField = new RT_Invoice_CustomField();
            DataSet mdsResult = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            DateTime dtimeSys = DateTime.UtcNow;
            //DataSet mdsExec = null;
            //DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(objRQ_Invoice_CustomField.Tid);
            //int nTidSeq = 0;
            //bool bNeedTransaction = true;
            string strFunctionName = "WAS_Invoice_CustomField_Delete";
            string strErrorCodeDefault = TError.ErridnInventory.WAS_Invoice_CustomField_Delete;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				//, "Invoice_CustomField", TJson.JsonConvert.SerializeObject(objRQ_Invoice_CustomField.Invoice_CustomField)
				////
				});
            #endregion

            try
            {
                #region // Init:
                #endregion

                #region // Refine and Check Input:
                //List<Invoice_CustomField> lst_Invoice_CustomField = new List<Invoice_CustomField>();
                //List<Invoice_CustomFieldInGroup> lst_Invoice_CustomFieldInGroup = new List<Invoice_CustomFieldInGroup>();
                #endregion

                #region // Invoice_CustomField_Delete:
                mdsResult = Invoice_CustomField_Delete(
                    objRQ_Invoice_CustomField.Tid // strTid
                    , objRQ_Invoice_CustomField.GwUserCode // strGwUserCode
                    , objRQ_Invoice_CustomField.GwPassword // strGwPassword
                    , objRQ_Invoice_CustomField.WAUserCode // strUserCode
                    , objRQ_Invoice_CustomField.WAUserPassword // strUserPassword
                    , ref alParamsCoupleError // alParamsCoupleError
                                              ////
                    , objRQ_Invoice_CustomField.Invoice_CustomField.OrgID // objOrgID
                    , objRQ_Invoice_CustomField.Invoice_CustomField.InvoiceCustomFieldCode // objInvoiceCustomFieldCode
                    );
                #endregion

                // Return Good:
                return mdsResult;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsResult
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Write ReturnLog:
                //_cf.ProcessBizReturn(
                //	ref mdsResult // mdsFinal
                //	, strTid // strTid
                //	, strFunctionName // strFunctionName
                //	);
                #endregion
            }
        }
        #endregion

        #region // Invoice_DtlCustomField:
        private void Invoice_DtlCustomField_CheckDB(
            ref ArrayList alParamsCoupleError
            , object objOrgID
            , object objInvoiceDtlCustomFieldCode
            , string strFlagExistToCheck
            , string strFlagActiveListToCheck
            , out DataTable dtDB_Invoice_DtlCustomField
            )
        {
            // GetInfo:
            string strSqlExec = CmUtils.StringUtils.Replace(@"
					select top 1
						t.*
					from Invoice_DtlCustomField t --//[mylock]
					where (1=1)
						and t.OrgID = @objOrgID
						and t.InvoiceDtlCustomFieldCode = @objInvoiceDtlCustomFieldCode
					;
				");
            dtDB_Invoice_DtlCustomField = _cf.db.ExecQuery(
                strSqlExec
                , "@objOrgID", objOrgID
                , "@objInvoiceDtlCustomFieldCode", objInvoiceDtlCustomFieldCode
                , "@dateSys", DateTime.UtcNow.ToString("yyyy-MM-dd")
                ).Tables[0];
            dtDB_Invoice_DtlCustomField.TableName = "Invoice_DtlCustomField";

            // strFlagExistToCheck:
            if (strFlagExistToCheck.Length > 0)
            {
                if (CmUtils.StringUtils.StringEqual(strFlagExistToCheck, TConst.Flag.Active) && dtDB_Invoice_DtlCustomField.Rows.Count < 1)
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.OrgID", objOrgID
                        , "Check.InvoiceDtlCustomFieldCode", objInvoiceDtlCustomFieldCode
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Invoice_DtlCustomField_CheckDB_CustomFieldNotFound
                        , null
                        , alParamsCoupleError.ToArray()
                        );
                }
                if (CmUtils.StringUtils.StringEqual(strFlagExistToCheck, TConst.Flag.Inactive) && dtDB_Invoice_DtlCustomField.Rows.Count > 0)
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.OrgID", objOrgID
                        , "Check.InvoiceDtlCustomFieldCode", objInvoiceDtlCustomFieldCode
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Invoice_DtlCustomField_CheckDB_CustomFieldExist
                        , null
                        , alParamsCoupleError.ToArray()
                        );
                }
            }

            // strFlagActiveListToCheck:
            if (strFlagActiveListToCheck.Length > 0 && !strFlagActiveListToCheck.Contains(Convert.ToString(dtDB_Invoice_DtlCustomField.Rows[0]["FlagActive"])))
            {
                alParamsCoupleError.AddRange(new object[]{
                    "Check.OrgID", objOrgID
                    , "Check.InvoiceDtlCustomFieldCode", objInvoiceDtlCustomFieldCode
                    , "Check.strFlagActiveListToCheck", strFlagActiveListToCheck
                    , "DB.FlagActive", dtDB_Invoice_DtlCustomField.Rows[0]["FlagActive"]
                    });
                throw CmUtils.CMyException.Raise(
                    TError.ErridnInventory.Invoice_DtlCustomField_CheckDB_FlagActiveNotMatched
                    , null
                    , alParamsCoupleError.ToArray()
                    );
            }
        }
        public DataSet Invoice_DtlCustomField_Get(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            //// Filter:
            , string strFt_RecordStart
            , string strFt_RecordCount
            , string strFt_WhereClause
            //// Return:
            , string strRt_Cols_Invoice_DtlCustomField
            )
        {
            #region // Temp:
            DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            //int nTidSeq = 0;
            DateTime dtimeSys = DateTime.UtcNow;
            bool bNeedTransaction = true;
            string strFunctionName = "Invoice_DtlCustomField_Get";
            string strErrorCodeDefault = TError.ErridnInventory.Invoice_DtlCustomField_Get;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				//// Filter
				, "strFt_RecordStart", strFt_RecordStart
                , "strFt_RecordCount", strFt_RecordCount
                , "strFt_WhereClause", strFt_WhereClause
				//// Return
				, "strRt_Cols_Invoice_DtlCustomField", strRt_Cols_Invoice_DtlCustomField
                });
            #endregion

            try
            {
                #region // Init:
                //_cf.db.LogUserId = _cf.sinf.strUserCode;
                if (bNeedTransaction) _cf.db.BeginTransaction();

                // Write RequestLog:
                _cf.ProcessBizReq_OutSide(
                    strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    , alParamsCoupleError // alParamsCoupleError
                    );

                // Sys_User_CheckAuthentication:
                //Sys_User_CheckAuthentication(
                //    ref alParamsCoupleError
                //    , strWAUserCode
                //    , strWAUserPassword
                //    );

                // Check Access/Deny:
                Sys_Access_CheckDenyV30(
                    ref alParamsCoupleError
                    , strWAUserCode
                    , strFunctionName
                    );
                #endregion

                #region // Check:
                //// Refine:
                long nFilterRecordStart = Convert.ToInt64(strFt_RecordStart);
                long nFilterRecordEnd = nFilterRecordStart + Convert.ToInt64(strFt_RecordCount) - 1;
                bool bGet_Invoice_DtlCustomField = (strRt_Cols_Invoice_DtlCustomField != null && strRt_Cols_Invoice_DtlCustomField.Length > 0);

                //// drAbilityOfUser:
                //DataRow drAbilityOfUser = myCache_ViewAbility_GetUserInfo(strWAUserCode);

                #endregion

                #region // Build Sql:
                ////
                ArrayList alParamsCoupleSql = new ArrayList();
                alParamsCoupleSql.AddRange(new object[] {
                    "@nFilterRecordStart", nFilterRecordStart
                    , "@nFilterRecordEnd", nFilterRecordEnd
                    });
                ////
                //myCache_ViewAbility_GetDealerInfo(drAbilityOfUser);
                ////
                string strSqlGetData = CmUtils.StringUtils.Replace(@"
						---- #tbl_Invoice_DtlCustomField_Filter_Draft:
						select distinct
							identity(bigint, 0, 1) MyIdxSeq
                            , idcf.OrgID
							, idcf.InvoiceDtlCustomFieldCode
						into #tbl_Invoice_DtlCustomField_Filter_Draft
						from Invoice_DtlCustomField idcf --//[mylock]
						where (1=1)
							zzB_Where_strFilter_zzE
						order by 
                            idcf.OrgID asc
							, idcf.InvoiceDtlCustomFieldCode asc
						;

						---- Summary:
						select Count(0) MyCount from #tbl_Invoice_DtlCustomField_Filter_Draft t --//[mylock]
						;

						---- #tbl_Invoice_DtlCustomField_Filter:
						select
							t.*
						into #tbl_Invoice_DtlCustomField_Filter
						from #tbl_Invoice_DtlCustomField_Filter_Draft t --//[mylock]
						where
							(t.MyIdxSeq >= @nFilterRecordStart)
							and (t.MyIdxSeq <= @nFilterRecordEnd)
						;

						-------- Invoice_DtlCustomField ------:
						zzB_Select_Invoice_DtlCustomField_zzE
						----------------------------------

						---- Clear for debug:
						--drop table #tbl_Invoice_DtlCustomField_Filter_Draft;
						--drop table #tbl_Invoice_DtlCustomField_Filter;
					"
                    );
                ////
                string zzB_Select_Invoice_DtlCustomField_zzE = "-- Nothing.";
                if (bGet_Invoice_DtlCustomField)
                {
                    #region // bGet_Invoice_DtlCustomField:
                    zzB_Select_Invoice_DtlCustomField_zzE = CmUtils.StringUtils.Replace(@"
							---- Invoice_DtlCustomField:
							select
								t.MyIdxSeq
								, idcf.*
							from #tbl_Invoice_DtlCustomField_Filter t --//[mylock]
								inner join Invoice_DtlCustomField idcf --//[mylock]
									on t.OrgID = idcf.OrgID
                                        and t.InvoiceDtlCustomFieldCode = idcf.InvoiceDtlCustomFieldCode
							order by t.MyIdxSeq asc
							;
						"
                        );
                    #endregion
                }
                ////
                string zzB_Where_strFilter_zzE = "";
                {
                    Hashtable htSpCols = new Hashtable();
                    {
                        #region // htSpCols:
                        ////
                        TUtils.CUtils.MyBuildHTSupportedColumns(
                            _cf.db // db
                            , ref htSpCols // htSupportedColumns
                            , "Invoice_DtlCustomField" // strTableNameDB
                            , "Invoice_DtlCustomField." // strPrefixStd
                            , "idcf." // strPrefixAlias
                            );
                        ////
                        #endregion
                    }
                    zzB_Where_strFilter_zzE = CmUtils.SqlUtils.BuildWhere(
                        htSpCols // htSpCols
                        , strFt_WhereClause // strClause
                        , "@p_" // strParamPrefix
                        , ref alParamsCoupleSql // alParamsCoupleSql
                        );
                    zzB_Where_strFilter_zzE = (zzB_Where_strFilter_zzE.Length <= 0 ? "" : string.Format(" and ({0})", zzB_Where_strFilter_zzE));
                    alParamsCoupleError.AddRange(new object[]{
                        "zzB_Where_strFilter_zzE", zzB_Where_strFilter_zzE
                        });
                }
                ////
                strSqlGetData = CmUtils.StringUtils.Replace(
                    strSqlGetData
                    , "zzB_Where_strFilter_zzE", zzB_Where_strFilter_zzE
                    , "zzB_Select_Invoice_DtlCustomField_zzE", zzB_Select_Invoice_DtlCustomField_zzE
                    );
                #endregion

                #region // Get Data:
                DataSet dsGetData = _cf.db.ExecQuery(
                    strSqlGetData
                    , alParamsCoupleSql.ToArray()
                    );
                int nIdxTable = 0;
                dsGetData.Tables[nIdxTable++].TableName = "MySummaryTable";
                if (bGet_Invoice_DtlCustomField)
                {
                    dsGetData.Tables[nIdxTable++].TableName = "Invoice_DtlCustomField";
                }
                CmUtils.DataUtils.MoveDataTable(ref mdsFinal, ref dsGetData);
                #endregion

                // Return Good:
                TDALUtils.DBUtils.RollbackSafety(_cf.db); // Always Rollback.
                mdsFinal.AcceptChanges();
                return mdsFinal;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Rollback:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);

                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsFinal
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Rollback and Release resources:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);
                TDALUtils.DBUtils.ReleaseAllSemaphore(_cf.db_Sys, true);

                // Write ReturnLog:
                _cf.ProcessBizReturn_OutSide(
                    ref mdsFinal // mdsFinal
                    , strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    );
                #endregion
            }
        }

        public DataSet Invoice_DtlCustomField_Create(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            ////
            , object objOrgID
            , object objInvoiceDtlCustomFieldCode
            , object objInvoiceDtlCustomFieldName
            , object objDBPhysicalType
            )
        {
            #region // Temp:
            DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            //int nTidSeq = 0;
            DateTime dtimeSys = DateTime.UtcNow;
            string strFunctionName = "Invoice_DtlCustomField_Create";
            string strErrorCodeDefault = TError.ErridnInventory.Invoice_DtlCustomField_Create;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
                ////
                , "objOrgID", objOrgID
                , "objInvoiceDtlCustomFieldCode", objInvoiceDtlCustomFieldCode
                , "objInvoiceDtlCustomFieldName", objInvoiceDtlCustomFieldName
                , "objDBPhysicalType", objDBPhysicalType
                });
            #endregion

            try
            {
                #region // Convert Input:
                #endregion

                #region // Init:
                //_cf.db.LogUserId = _cf.sinf.strUserCode;
                _cf.db.BeginTransaction();

                // Write RequestLog:
                _cf.ProcessBizReq_OutSide(
                    strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    , alParamsCoupleError // alParamsCoupleError
                    );

                // Sys_User_CheckAuthentication:
                //Sys_User_CheckAuthentication(
                //    ref alParamsCoupleError
                //    , strWAUserCode
                //    , strWAUserPassword
                //    );

                // Check Access/Deny:
                Sys_Access_CheckDenyV30(
                    ref alParamsCoupleError
                    , strWAUserCode
                    , strFunctionName
                    );
                #endregion

                #region // Refine and Check Input:
                ////
                ////
                string strOrgID = TUtils.CUtils.StdParam(objOrgID);
                string strInvoiceDtlCustomFieldCode = TUtils.CUtils.StdParam(objInvoiceDtlCustomFieldCode);
                string strInvoiceDtlCustomFieldName = string.Format("{0}", objInvoiceDtlCustomFieldName).Trim();
                string strDBPhysicalType = string.Format("{0}", objDBPhysicalType).Trim();

                // drAbilityOfUser:
                //DataRow drAbilityOfUser = Sys_User_GetAbilityViewOfUser(strWAUserCode);
                ////
                DataTable dtDB_Invoice_DtlCustomField = null;
                {
                    ////
                    if (strOrgID == null || strOrgID.Length < 1)
                    {
                        alParamsCoupleError.AddRange(new object[]{
                            "Check.strOrgID", strOrgID
                            });
                        throw CmUtils.CMyException.Raise(
                            TError.ErridnInventory.Invoice_DtlCustomField_Create_InvalidOrgID
                            , null
                            , alParamsCoupleError.ToArray()
                            );
                    }
                    ////
                    if (strInvoiceDtlCustomFieldCode == null || strInvoiceDtlCustomFieldCode.Length < 1)
                    {
                        alParamsCoupleError.AddRange(new object[]{
                            "Check.strInvoiceDtlCustomFieldCode", strInvoiceDtlCustomFieldCode
                            });
                        throw CmUtils.CMyException.Raise(
                            TError.ErridnInventory.Invoice_DtlCustomField_Create_InvalidInvoiceDtlCustomFieldCode
                            , null
                            , alParamsCoupleError.ToArray()
                            );
                    }

                    Invoice_DtlCustomField_CheckDB(
                        ref alParamsCoupleError // alParamsCoupleError
                        , strOrgID // objOrgID
                        , strInvoiceDtlCustomFieldCode // objInvoiceDtlCustomFieldCode 
                        , TConst.Flag.No // strFlagExistToCheck
                        , "" // strFlagActiveListToCheck
                        , out dtDB_Invoice_DtlCustomField // dtDB_Invoice_DtlCustomField
                        );
                }
                #endregion

                #region // SaveDB Invoice_DtlCustomField:
                {
                    // Init:
                    //ArrayList alColumnEffective = new ArrayList();
                    string strFN = "";
                    DataRow drDB = dtDB_Invoice_DtlCustomField.NewRow();
                    strFN = "OrgID"; drDB[strFN] = strOrgID;
                    strFN = "NetworkID"; drDB[strFN] = nNetworkID;
                    strFN = "InvoiceDtlCustomFieldCode"; drDB[strFN] = strInvoiceDtlCustomFieldCode;
                    strFN = "InvoiceDtlCustomFieldName"; drDB[strFN] = strInvoiceDtlCustomFieldName;
                    strFN = "DBPhysicalType"; drDB[strFN] = strDBPhysicalType;
                    strFN = "FlagActive"; drDB[strFN] = TConst.Flag.Active;
                    strFN = "LogLUDTimeUTC"; drDB[strFN] = dtimeSys.ToString("yyyy-MM-dd HH:mm:ss");
                    strFN = "LogLUBy"; drDB[strFN] = strWAUserCode;
                    dtDB_Invoice_DtlCustomField.Rows.Add(drDB);

                    // Save:
                    _cf.db.SaveData(
                        "Invoice_DtlCustomField"
                        , dtDB_Invoice_DtlCustomField
                        //, alColumnEffective.ToArray()
                        );
                }
                #endregion

                // Return Good:
                TDALUtils.DBUtils.CommitSafety(_cf.db);
                mdsFinal.AcceptChanges();
                return mdsFinal;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Rollback:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);

                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsFinal
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Rollback and Release resources:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);
                TDALUtils.DBUtils.ReleaseAllSemaphore(_cf.db_Sys, true);

                // Write ReturnLog:
                _cf.ProcessBizReturn_OutSide(
                    ref mdsFinal // mdsFinal
                    , strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    );
                #endregion
            }
        }

        public DataSet Invoice_DtlCustomField_Create_New20190703(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            ////
            //, object objOrgID
            //, object objInvoiceDtlCustomFieldCode
            //, object objInvoiceDtlCustomFieldName
            //, object objDBPhysicalType
            ////
            , DataSet dsData
            )
        {
            #region // Temp:
            DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            //int nTidSeq = 0;
            bool bMyDebugSql = false;
            DateTime dtimeSys = DateTime.UtcNow;
            string strFunctionName = "Invoice_DtlCustomField_Create";
            string strErrorCodeDefault = TError.ErridnInventory.Invoice_DtlCustomField_Create;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
                ////
                //, "objOrgID", objOrgID
                //, "objInvoiceDtlCustomFieldCode", objInvoiceDtlCustomFieldCode
                //, "objInvoiceDtlCustomFieldName", objInvoiceDtlCustomFieldName
                //, "objDBPhysicalType", objDBPhysicalType
                });

            //ArrayList alPCErrEx = new ArrayList();
            ////
            Hashtable htParamsSql = new Hashtable();
            #endregion

            try
            {
                #region // Convert Input:
                alParamsCoupleError.AddRange(new object[]{
                "Check.dsData", TJson.JsonConvert.SerializeObject(dsData)
                });
                #endregion

                #region // Init:
                //_cf.db.LogUserId = _cf.sinf.strUserCode;
                _cf.db.BeginTransaction();

                // Write RequestLog:
                _cf.ProcessBizReq_OutSide(
                    strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    , alParamsCoupleError // alParamsCoupleError
                    );

                // Sys_User_CheckAuthentication:
                //Sys_User_CheckAuthentication(
                //    ref alParamsCoupleError
                //    , strWAUserCode
                //    , strWAUserPassword
                //    );

                // Check Access/Deny:
                Sys_Access_CheckDenyV30(
                    ref alParamsCoupleError
                    , strWAUserCode
                    , strFunctionName
                    );
                #endregion

                #region //// Refine and Check Invoice_DtlCustomField:
                ////

                DataTable dtInput_Invoice_DtlCustomField = null;
                {
                    ////
                    string strTableCheck = "Invoice_DtlCustomField";
                    ////
                    if (!dsData.Tables.Contains(strTableCheck))
                    {
                        alParamsCoupleError.AddRange(new object[]{
                        "Check.TableName", strTableCheck
                        });
                        throw CmUtils.CMyException.Raise(
                            TError.ErridnInventory.Invoice_DtlCustomField_CheckDB_CustomFieldNotFound
                            , null
                            , alParamsCoupleError.ToArray()
                            );
                    }
                    dtInput_Invoice_DtlCustomField = dsData.Tables[strTableCheck];
                    ////
                    //if (dtInput_KUNN_ValLaiSuatChangeHist.Rows.Count < 1)
                    //{
                    //	alParamsCoupleError.AddRange(new object[]{
                    //		"Check.TableName", strTableCheck
                    //		});
                    //	throw CmUtils.CMyException.Raise(
                    //		TError.ErrTCGQLTV.Mst_Spec_Add_Input_KUNN_ValLaiSuatChangeHistTblInvalid
                    //		, null
                    //		, alParamsCoupleError.ToArray()
                    //		);
                    //}
                    ////
                    TUtils.CUtils.StdDataInTable(
                        dtInput_Invoice_DtlCustomField // dtData
                        , "StdParam", "OrgID" // arrstrCouple
                        , "StdParam", "InvoiceDtlCustomFieldCode" // arrstrCouple
                        , "", "InvoiceDtlCustomFieldName" // arrstrCouple
                        , "", "DBPhysicalType" // arrstrCouple
                        );
                    ////
                    TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_DtlCustomField, "NetworkID", typeof(object));
                    TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_DtlCustomField, "FlagActive", typeof(object));
                    TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_DtlCustomField, "LogLUDTimeUTC", typeof(object));
                    TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_DtlCustomField, "LogLUBy", typeof(object));
                    ////
                    for (int nScan = 0; nScan < dtInput_Invoice_DtlCustomField.Rows.Count; nScan++)
                    {
                        ////
                        DataRow drScan = dtInput_Invoice_DtlCustomField.Rows[nScan];

                        string strOrgID = TUtils.CUtils.StdParam(drScan["OrgID"]);
                        string strInvoiceDtlCustomFieldCode = TUtils.CUtils.StdParam(drScan["InvoiceDtlCustomFieldCode"]);
                        string strInvoiceDtlCustomFieldName = string.Format("{0}", drScan["InvoiceDtlCustomFieldName"]).Trim();
                        string strDBPhysicalType = string.Format("{0}", drScan["DBPhysicalType"]).Trim();

                        ////
                        if (strOrgID == null || strOrgID.Length < 1)
                        {
                            alParamsCoupleError.AddRange(new object[]{
                            "Check.strOrgID", strOrgID
                            });
                            throw CmUtils.CMyException.Raise(
                                TError.ErridnInventory.Invoice_DtlCustomField_Create_InvalidOrgID
                                , null
                                , alParamsCoupleError.ToArray()
                                );
                        }
                        ////
                        if (strInvoiceDtlCustomFieldCode == null || strInvoiceDtlCustomFieldCode.Length < 1)
                        {
                            alParamsCoupleError.AddRange(new object[]{
                            "Check.strInvoiceDtlCustomFieldCode", strInvoiceDtlCustomFieldCode
                            });
                            throw CmUtils.CMyException.Raise(
                                TError.ErridnInventory.Invoice_DtlCustomField_Create_InvalidInvoiceDtlCustomFieldCode
                                , null
                                , alParamsCoupleError.ToArray()
                                );
                        }
                        DataTable dtDB_Invoice_DtlCustomField = null;

                        Invoice_DtlCustomField_CheckDB(
                            ref alParamsCoupleError // alParamsCoupleError
                            , strOrgID // objOrgID
                            , strInvoiceDtlCustomFieldCode // objInvoiceDtlCustomFieldCode 
                            , TConst.Flag.No // strFlagExistToCheck
                            , "" // strFlagActiveListToCheck
                            , out dtDB_Invoice_DtlCustomField // dtDB_Invoice_DtlCustomField
                            );

                        ////
                        drScan["OrgID"] = strOrgID;
                        drScan["InvoiceDtlCustomFieldCode"] = strInvoiceDtlCustomFieldCode;
                        drScan["NetworkID"] = nNetworkID;
                        drScan["InvoiceDtlCustomFieldName"] = strInvoiceDtlCustomFieldName;
                        drScan["DBPhysicalType"] = strDBPhysicalType;
                        drScan["FlagActive"] = TConst.Flag.Active;
                        drScan["LogLUDTimeUTC"] = dtimeSys.ToString("yyyy-MM-dd HH:mm:ss");
                        drScan["LogLUBy"] = strWAUserCode;
                        
                    }
                }
                #endregion

                #region //// SaveTemp Invoice_DtlCustomField:
                {
                    TUtils.CUtils.MyBuildDBDT_Common(
                        _cf.db
                        , "#input_Invoice_DtlCustomField"
                        , new object[]{
                        "OrgID", TConst.BizMix.Default_DBColType,
                        "InvoiceDtlCustomFieldCode", TConst.BizMix.Default_DBColType,
                        "NetworkID", TConst.BizMix.Default_DBColType,
                        "InvoiceDtlCustomFieldName", TConst.BizMix.Default_DBColType,
                        "DBPhysicalType", TConst.BizMix.Default_DBColType,
                        "FlagActive", TConst.BizMix.Default_DBColType,
                        "LogLUDTimeUTC", TConst.BizMix.Default_DBColType,
                        "LogLUBy", TConst.BizMix.Default_DBColType,
                            }
                        , dtInput_Invoice_DtlCustomField
                        );
                }
                #endregion

                #region //// Save:
                //// Clear All:
                {
                    //string strSqlDelete = CmUtils.StringUtils.Replace(@"
                    //			---- Mst_SpecDtl:
                    //			delete t
                    //			from Mst_SpecDtl t
                    //			where (1=1)
                    //				and t.KUNNNo = @strKUNNNo
                    //			;

                    //			---- Mst_Spec:
                    //			delete t
                    //			from Mst_Spec t
                    //			where (1=1)
                    //				and t.KUNNNo = @strKUNNNo
                    //			;

                    //		");
                    //_cf.db.ExecQuery(
                    //	strSqlDelete
                    //	, "@strKUNNNo", strKUNNNo
                    //	);
                }

                //// Insert All:
                {
                    ////
                    string zzzzClauseInsert_Invoice_DtlCustomField_zSave = CmUtils.StringUtils.Replace(@"
        		        ---- Invoice_DtlCustomField:

        		        insert into Invoice_DtlCustomField
        		        (
        			        OrgID
        			        , InvoiceDtlCustomFieldCode
        			        , NetworkID
        			        , InvoiceDtlCustomFieldName
        			        , DBPhysicalType
        			        , FlagActive
        			        , LogLUDTimeUTC
        			        , LogLUBy
        		        )
        		        select 
        			        t.OrgID
        			        , t.InvoiceDtlCustomFieldCode
        			        , t.NetworkID
        			        , t.InvoiceDtlCustomFieldName
        			        , t.DBPhysicalType
        			        , t.FlagActive
        			        , t.LogLUDTimeUTC
        			        , t.LogLUBy
        		        from #input_Invoice_DtlCustomField t --//[mylock]
        		        ;
        	        ");

                    ////
                    string strSqlExec = CmUtils.StringUtils.Replace(@"
        		        ----
        		        zzzzClauseInsert_Invoice_DtlCustomField_zSave

        	        "
                        , "zzzzClauseInsert_Invoice_DtlCustomField_zSave", zzzzClauseInsert_Invoice_DtlCustomField_zSave
                        );
                    ////
                    if (bMyDebugSql)
                    {
                        alParamsCoupleError.AddRange(new object[]{
                        "Check.strSqlExec", strSqlExec
                        });
                    }
                    DataSet dsExec = _cf.db.ExecQuery(strSqlExec);
                }
                #endregion

                #region //// Clear For Debug:
                {
                    ////
                    string strSqlClearForDebug = CmUtils.StringUtils.Replace(@"
						---- Clear for Debug:
						drop table #input_Invoice_DtlCustomField;
					");

                    _cf.db.ExecQuery(
                        strSqlClearForDebug
                        );
                    ////
                }
                #endregion

                // Return Good:
                TDALUtils.DBUtils.CommitSafety(_cf.db);
                mdsFinal.AcceptChanges();
                return mdsFinal;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Rollback:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);

                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsFinal
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Rollback and Release resources:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);
                TDALUtils.DBUtils.ReleaseAllSemaphore(_cf.db_Sys, true);

                // Write ReturnLog:
                _cf.ProcessBizReturn_OutSide(
                    ref mdsFinal // mdsFinal
                    , strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    );
                #endregion
            }
        }

        public DataSet Invoice_DtlCustomField_Update(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            ////
            , object objOrgID
            , object objInvoiceDtlCustomFieldCode
            , object objInvoiceDtlCustomFieldName
            , object objDBPhysicalType
            , object objFlagActive
            ////
            , object objFt_Cols_Upd
            )
        {
            #region // Temp:
            DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            //int nTidSeq = 0;
            DateTime dtimeSys = DateTime.UtcNow;
            string strFunctionName = "Invoice_DtlCustomField_Update";
            string strErrorCodeDefault = TError.ErridnInventory.Invoice_DtlCustomField_Update;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
                , "objOrgID", objOrgID
                , "objInvoiceDtlCustomFieldCode", objInvoiceDtlCustomFieldCode
                , "objInvoiceDtlCustomFieldName", objInvoiceDtlCustomFieldName
                , "objDBPhysicalType", objDBPhysicalType
                , "objFlagActive", objFlagActive
				////
				, "objFt_Cols_Upd", objFt_Cols_Upd
                });
            #endregion

            try
            {
                #region // Convert Input:
                #endregion

                #region // Init:
                //_cf.db.LogUserId = _cf.sinf.strUserCode;
                _cf.db.BeginTransaction();

                // Write RequestLog:
                _cf.ProcessBizReq_OutSide(
                    strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    , alParamsCoupleError // alParamsCoupleError
                    );

                // Sys_User_CheckAuthentication:
                //Sys_User_CheckAuthentication(
                //    ref alParamsCoupleError
                //    , strWAUserCode
                //    , strWAUserPassword
                //    );

                // Check Access/Deny:
                Sys_Access_CheckDenyV30(
                    ref alParamsCoupleError
                    , strWAUserCode
                    , strFunctionName
                    );
                #endregion

                #region // Refine and Check Input:
                ////
                string strFt_Cols_Upd = TUtils.CUtils.StdParam(objFt_Cols_Upd);
                strFt_Cols_Upd = (strFt_Cols_Upd == null ? "" : strFt_Cols_Upd);
                ////
                string strOrgID = TUtils.CUtils.StdParam(objOrgID);
                string strInvoiceDtlCustomFieldCode = TUtils.CUtils.StdParam(objInvoiceDtlCustomFieldCode);
                string strInvoiceDtlCustomFieldName = string.Format("{0}", objInvoiceDtlCustomFieldName).Trim();
                string strDBPhysicalType = string.Format("{0}", objDBPhysicalType).Trim();
                string strFlagActive = TUtils.CUtils.StdFlag(objFlagActive);
                ////
                bool bUpd_InvoiceDtlCustomFieldName = strFt_Cols_Upd.Contains("Invoice_DtlCustomField.InvoiceDtlCustomFieldName".ToUpper());
                bool bUpd_DBPhysicalType = strFt_Cols_Upd.Contains("Invoice_DtlCustomField.DBPhysicalType".ToUpper());
                bool bUpd_FlagActive = strFt_Cols_Upd.Contains("Invoice_DtlCustomField.FlagActive".ToUpper());

                ////
                DataTable dtDB_Invoice_DtlCustomField = null;
                {
                    ////
                    Invoice_DtlCustomField_CheckDB(
                         ref alParamsCoupleError // alParamsCoupleError
                         , strOrgID // objOrgID
                         , strInvoiceDtlCustomFieldCode // objInvoiceDtlCustomFieldCode
                         , TConst.Flag.Yes // strFlagExistToCheck
                         , "" // strFlagActiveListToCheck
                         , out dtDB_Invoice_DtlCustomField // dtDB_Invoice_DtlCustomField
                        );
                    ////
                    if (bUpd_InvoiceDtlCustomFieldName && string.IsNullOrEmpty(strInvoiceDtlCustomFieldName))
                    {
                        alParamsCoupleError.AddRange(new object[]{
                            "Check.strInvoiceDtlCustomFieldName", strInvoiceDtlCustomFieldName
                            });
                        throw CmUtils.CMyException.Raise(
                            TError.ErridnInventory.Invoice_DtlCustomField_Update_InvalidInvoiceDtlCustomFieldName
                            , null
                            , alParamsCoupleError.ToArray()
                            );
                    }
                    ////
                }
                #endregion

                #region // SaveDB Invoice_DtlCustomField:
                {
                    // Init:
                    ArrayList alColumnEffective = new ArrayList();
                    string strFN = "";
                    DataRow drDB = dtDB_Invoice_DtlCustomField.Rows[0];
                    if (bUpd_InvoiceDtlCustomFieldName) { strFN = "InvoiceDtlCustomFieldName"; drDB[strFN] = strInvoiceDtlCustomFieldName; alColumnEffective.Add(strFN); }
                    if (bUpd_DBPhysicalType) { strFN = "DBPhysicalType"; drDB[strFN] = strDBPhysicalType; alColumnEffective.Add(strFN); }
                    if (bUpd_FlagActive) { strFN = "FlagActive"; drDB[strFN] = strFlagActive; alColumnEffective.Add(strFN); }
                    strFN = "LogLUDTimeUTC"; drDB[strFN] = dtimeSys.ToString("yyyy-MM-dd HH:mm:ss"); alColumnEffective.Add(strFN);
                    strFN = "LogLUBy"; drDB[strFN] = strWAUserCode; alColumnEffective.Add(strFN);

                    // Save:
                    _cf.db.SaveData(
                        "Invoice_DtlCustomField"
                        , dtDB_Invoice_DtlCustomField
                        , alColumnEffective.ToArray()
                        );
                }
                #endregion

                // Return Good:
                TDALUtils.DBUtils.CommitSafety(_cf.db);
                mdsFinal.AcceptChanges();
                return mdsFinal;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Rollback:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);

                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsFinal
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Rollback and Release resources:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);
                TDALUtils.DBUtils.ReleaseAllSemaphore(_cf.db_Sys, true);

                // Write ReturnLog:
                _cf.ProcessBizReturn_OutSide(
                    ref mdsFinal // mdsFinal
                    , strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    );
                #endregion
            }
        }
        public DataSet Invoice_DtlCustomField_Update_New20190703(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            ////
            , DataSet dsData
            ////
            , object objFt_Cols_Upd
            )
        {
            #region // Temp:
            DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            //int nTidSeq = 0;
            DateTime dtimeSys = DateTime.UtcNow;
            string strFunctionName = "Invoice_DtlCustomField_Update";
            string strErrorCodeDefault = TError.ErridnInventory.Invoice_DtlCustomField_Update;
            //string strErrorCodeDefault = TError.ErrTCGQLTV.Invoice_DtlCustomField_Update;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
				, "objFt_Cols_Upd", objFt_Cols_Upd
                });
            #endregion

            try
            {
                #region // Convert Input:
                DateTime dtimeTDate = DateTime.Now;
                alParamsCoupleError.AddRange(new object[]{
                "Check.dsData", TJson.JsonConvert.SerializeObject(dsData)
                });
                #endregion

                #region // Init:
                //_cf.db.LogUserId = _cf.sinf.strUserCode;
                _cf.db.BeginTransaction();

                // Write RequestLog:
                _cf.ProcessBizReq_OutSide(
                    strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    , alParamsCoupleError // alParamsCoupleError
                    );

                // Sys_User_CheckAuthentication:
                //Sys_User_CheckAuthentication(
                //    ref alParamsCoupleError
                //    , strWAUserCode
                //    , strWAUserPassword
                //    );

                // Check Access/Deny:
                Sys_Access_CheckDenyV30(
                    ref alParamsCoupleError
                    , strWAUserCode
                    , strFunctionName
                    );
                #endregion

                #region // Refine and Check Input:
                string strFt_Cols_Upd = TUtils.CUtils.StdParam(objFt_Cols_Upd);
                strFt_Cols_Upd = (strFt_Cols_Upd == null ? "" : strFt_Cols_Upd);
                ////
                //string strAssetCode = TUtils.CUtils.StdParam(objAssetCode);
                //string strAssetName = string.Format("{0}", objAssetName).Trim();
                //double strValAsset = Convert.ToDouble(objValAsset);
                //double strNominalValue = Convert.ToDouble(objNominalValue);
                //double strMDMaxValue = Convert.ToDouble(objMDMaxValue);
                //double strLDPercent = Convert.ToDouble(objLDPercent);
                //string strDateEnd = TUtils.CUtils.StdDTime(objDateEnd);
                //string strAssetStatus = TUtils.CUtils.StdFlag(objAssetStatus);

                ////
                bool bUpd_InvoiceDtlCustomFieldName = strFt_Cols_Upd.Contains("Invoice_DtlCustomField.InvoiceDtlCustomFieldName".ToUpper());
                bool bUpd_DBPhysicalType = strFt_Cols_Upd.Contains("Invoice_DtlCustomField.DBPhysicalType".ToUpper());
                bool bUpd_FlagActive = strFt_Cols_Upd.Contains("Invoice_DtlCustomField.FlagActive".ToUpper());

                #endregion

                #region // Refine and Check Input Invoice_DtlCustomField:

                ////
                DataTable dtInput_Invoice_DtlCustomField = null;
                ////
                {
                    ////
                    string strTableCheck = "Invoice_DtlCustomField";
                    ////
                    if (!dsData.Tables.Contains(strTableCheck))
                    {
                        alParamsCoupleError.AddRange(new object[]{
                            "Check.TableName", strTableCheck
                            });
                        throw CmUtils.CMyException.Raise(
                            TError.ErridnInventory.Invoice_DtlCustomField_Update_CustomFieldblNotFound
                            , null
                            , alParamsCoupleError.ToArray()
                            );
                    }
                    dtInput_Invoice_DtlCustomField = dsData.Tables[strTableCheck];
                    ////
                    if (dtInput_Invoice_DtlCustomField.Rows.Count < 1)
                    {
                        alParamsCoupleError.AddRange(new object[]{
                            "Check.TableName", strTableCheck
                            });
                        throw CmUtils.CMyException.Raise(
                            TError.ErridnInventory.Invoice_DtlCustomField_Update_Input_CustomFieldblInvalid
                            , null
                            , alParamsCoupleError.ToArray()
                            );
                    }
                    ////
                    TUtils.CUtils.StdDataInTable(
                        dtInput_Invoice_DtlCustomField // dtData
                        , "StdParam", "OrgID" // arrstrCouple
                        , "StdParam", "InvoiceDtlCustomFieldCode" // arrstrCouple
                        , "", "InvoiceDtlCustomFieldName" // arrstrCouple
                        , "", "DBPhysicalType" // arrstrCouple
                        , "StdFlag", "FlagActive" // arrstrCouple
                        );
                    ////
                    TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_DtlCustomField, "NetworkID", typeof(object));
                    TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_DtlCustomField, "LogLUDTimeUTC", typeof(object));
                    TUtils.CUtils.MyForceNewColumn(ref dtInput_Invoice_DtlCustomField, "LogLUBy", typeof(object));

                    ////
                    for (int nScan = 0; nScan < dtInput_Invoice_DtlCustomField.Rows.Count; nScan++)
                    {
                        ////
                        DataRow drScan = dtInput_Invoice_DtlCustomField.Rows[nScan];

                        ////
                        DataTable dtDB_Invoice_DtlCustomField = null;
                        string strInvoiceDtlCustomFieldName = null;
                        string strDBPhysicalType = null;
                        string strFlagActive = null;

                        ////
                        Invoice_DtlCustomField_CheckDB(
                            ref alParamsCoupleError // alParamsCoupleError
                            , drScan["OrgID"] // objAssetCode
                            , drScan["InvoiceDtlCustomFieldCode"] // objAssetCode
                            , TConst.Flag.Yes // strFlagExistToCheck
                            , "" // strFlagActiveListToCheck                        
                            , out dtDB_Invoice_DtlCustomField // dtDB_Invoice_DtlCustomField
                            );

                        strInvoiceDtlCustomFieldName = string.Format("{0}", drScan["InvoiceDtlCustomFieldName"]).Trim();
                        strDBPhysicalType = string.Format("{0}", drScan["DBPhysicalType"]).Trim();
                        strFlagActive = TUtils.CUtils.StdFlag(drScan["FlagActive"]);

                        ////
                        if (bUpd_InvoiceDtlCustomFieldName && string.IsNullOrEmpty(strInvoiceDtlCustomFieldName))
                        {
                            alParamsCoupleError.AddRange(new object[]{
                            "Check.strInvoiceDtlCustomFieldName", strInvoiceDtlCustomFieldName
                            });
                            throw CmUtils.CMyException.Raise(
                                TError.ErridnInventory.Invoice_DtlCustomField_Update_InvalidInvoiceDtlCustomFieldName
                                , null
                                , alParamsCoupleError.ToArray()
                                );
                        }

                        ////
                        drScan["InvoiceDtlCustomFieldName"] = strInvoiceDtlCustomFieldName; // string.Format("{0}", drScan["InvoiceDtlCustomFieldName"]).Trim();
                        drScan["DBPhysicalType"] = strDBPhysicalType;
                        drScan["FlagActive"] = strFlagActive;
                        drScan["LogLUDTimeUTC"] = dtimeSys.ToString("yyyy-MM-dd HH:mm:ss");
                        drScan["LogLUBy"] = strWAUserCode;
                    }
                }
                #endregion

                #region // SaveTemp input_Invoice_CustomField:
                // Upload:
                TUtils.CUtils.MyBuildDBDT_Common(
                    _cf.db
                    , "#input_Invoice_DtlCustomField"
                    , new object[]{
                            "OrgID", TConst.BizMix.Default_DBColType,
                            "InvoiceDtlCustomFieldCode", TConst.BizMix.Default_DBColType,
                            "NetworkID", TConst.BizMix.Default_DBColType,
                            "InvoiceDtlCustomFieldName", TConst.BizMix.Default_DBColType,
                            "DBPhysicalType", TConst.BizMix.Default_DBColType,
                            "FlagActive", TConst.BizMix.Default_DBColType,
                            "LogLUDTimeUTC", TConst.BizMix.Default_DBColType,
                            "LogLUBy", TConst.BizMix.Default_DBColType,
                        }
                    , dtInput_Invoice_DtlCustomField
                    );
                ////
                #endregion

                #region // SaveDB Invoice_DtlCustomField:
                {
                    ////
                    string zzB_Update_Invoice_DtlCustomField_ClauseSet_zzE = @"
								t.LogLUDTimeUTC = f.LogLUDTimeUTC
								, t.LogLUBy = f.LogLUBy
							";
                    if (bUpd_InvoiceDtlCustomFieldName) zzB_Update_Invoice_DtlCustomField_ClauseSet_zzE += ", t.InvoiceDtlCustomFieldName = f.InvoiceDtlCustomFieldName";
                    if (bUpd_DBPhysicalType) zzB_Update_Invoice_DtlCustomField_ClauseSet_zzE += ", t.DBPhysicalType = f.DBPhysicalType";
                    if (bUpd_FlagActive) zzB_Update_Invoice_DtlCustomField_ClauseSet_zzE += ", t.FlagActive = f.FlagActive";
                    ////
                    string zzB_Update_Invoice_DtlCustomField_zzE = CmUtils.StringUtils.Replace(@"
							---- Invoice_DtlCustomField:
							update t
							set 
								zzB_Update_Invoice_DtlCustomField_ClauseSet_zzE
							from Invoice_DtlCustomField t --//[mylock]
								inner join #input_Invoice_DtlCustomField f --//[mylock]
									on t.OrgID = f.OrgID
                                        and t.InvoiceDtlCustomFieldCode = f.InvoiceDtlCustomFieldCode
							where (1=1)
							;
						"
                        , "zzB_Update_Invoice_DtlCustomField_ClauseSet_zzE", zzB_Update_Invoice_DtlCustomField_ClauseSet_zzE
                        );
                    ////
                    string strSql_Exec = CmUtils.StringUtils.Replace(@"
							----
							zzB_Update_Invoice_DtlCustomField_zzE
							----
						"
                        , "zzB_Update_Invoice_DtlCustomField_zzE", zzB_Update_Invoice_DtlCustomField_zzE
                        );
                    DataSet dsDB_Check = _cf.db.ExecQuery(
                        strSql_Exec
                        );
                }
                #endregion

                #region //// Clear For Debug:
                {
                    ////
                    string strSqlClearForDebug = CmUtils.StringUtils.Replace(@"
						---- Clear for Debug:
						drop table #input_Invoice_DtlCustomField;
					");

                    _cf.db.ExecQuery(
                        strSqlClearForDebug
                        );
                    ////
                }
                #endregion

                // Return Good:
                TDALUtils.DBUtils.CommitSafety(_cf.db);
                mdsFinal.AcceptChanges();
                return mdsFinal;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Rollback:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);

                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsFinal
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Rollback and Release resources:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);
                TDALUtils.DBUtils.ReleaseAllSemaphore(_cf.db_Sys, true);

                // Write ReturnLog:
                _cf.ProcessBizReturn_OutSide(
                    ref mdsFinal // mdsFinal
                    , strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    );
                #endregion
            }
        }

        public DataSet Invoice_DtlCustomField_Delete(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            /////
            , object objOrgID
            , object objInvoiceDtlCustomFieldCode
            )
        {
            #region // Temp:
            DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            //int nTidSeq = 0;
            DateTime dtimeSys = DateTime.UtcNow;
            string strFunctionName = "Invoice_DtlCustomField_Delete";
            string strErrorCodeDefault = TError.ErridnInventory.Invoice_DtlCustomField_Delete;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
                , "objOrgID", objOrgID
                , "objInvoiceDtlCustomFieldCode", objInvoiceDtlCustomFieldCode
                });
            #endregion

            try
            {
                #region // Init:
                //_cf.db.LogUserId = _cf.sinf.strUserCode;
                _cf.db.BeginTransaction();

                // Write RequestLog:
                _cf.ProcessBizReq_OutSide(
                    strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    , alParamsCoupleError // alParamsCoupleError
                    );

                // Sys_User_CheckAuthentication:
                //Sys_User_CheckAuthentication(
                //    ref alParamsCoupleError
                //    , strWAUserCode
                //    , strWAUserPassword
                //    );

                // Check Access/Deny:
                Sys_Access_CheckDenyV30(
                    ref alParamsCoupleError
                    , strWAUserCode
                    , strFunctionName
                    );
                #endregion

                #region // Refine and Check Input:
                ////
                string strOrgID = TUtils.CUtils.StdParam(objOrgID);
                string strInvoiceDtlCustomFieldCode = TUtils.CUtils.StdParam(objInvoiceDtlCustomFieldCode);
                ////
                DataTable dtDB_Invoice_DtlCustomField = null;
                {
                    ////
                    Invoice_DtlCustomField_CheckDB(
                         ref alParamsCoupleError // alParamsCoupleError
                         , strOrgID // objOrgID
                         , strInvoiceDtlCustomFieldCode // objInvoiceDtlCustomFieldCode
                         , TConst.Flag.Yes // strFlagExistToCheck
                         , "" // strFlagActiveListToCheck
                         , out dtDB_Invoice_DtlCustomField // dtDB_Invoice_DtlCustomField
                        );
                    ////
                }
                #endregion

                #region // SaveDB Invoice_DtlCustomField:
                {
                    // Init:
                    dtDB_Invoice_DtlCustomField.Rows[0].Delete();

                    // Save:
                    _cf.db.SaveData(
                        "Invoice_DtlCustomField"
                        , dtDB_Invoice_DtlCustomField
                        );
                }
                #endregion

                // Return Good:
                TDALUtils.DBUtils.CommitSafety(_cf.db);
                mdsFinal.AcceptChanges();
                return mdsFinal;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Rollback:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);

                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsFinal
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Rollback and Release resources:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);
                TDALUtils.DBUtils.ReleaseAllSemaphore(_cf.db_Sys, true);

                // Write ReturnLog:
                _cf.ProcessBizReturn_OutSide(
                    ref mdsFinal // mdsFinal
                    , strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    );
                #endregion
            }
        }
        public DataSet WAS_Invoice_DtlCustomField_Get(
            ref ArrayList alParamsCoupleError
            , RQ_Invoice_DtlCustomField objRQ_Invoice_DtlCustomField
            ////
            , out RT_Invoice_DtlCustomField objRT_Invoice_DtlCustomField
            )
        {
            #region // Temp:
            string strTid = objRQ_Invoice_DtlCustomField.Tid;
            objRT_Invoice_DtlCustomField = new RT_Invoice_DtlCustomField();
            DataSet mdsResult = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            DateTime dtimeSys = DateTime.UtcNow;
            //DataSet mdsExec = null;
            //DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(objRQ_Invoice_DtlCustomField.Tid);
            //int nTidSeq = 0;
            //bool bNeedTransaction = true;
            string strFunctionName = "WAS_Invoice_DtlCustomField_Get";
            string strErrorCodeDefault = TError.ErridnInventory.WAS_Invoice_DtlCustomField_Get;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
				});
            #endregion

            try
            {
                #region // Init:
                #endregion

                #region // Refine and Check Input:
                List<MySummaryTable> lst_MySummaryTable = new List<MySummaryTable>();

                List<Invoice_DtlCustomField> lst_Invoice_DtlCustomField = new List<Invoice_DtlCustomField>();
                bool bGet_Invoice_DtlCustomField = (objRQ_Invoice_DtlCustomField.Rt_Cols_Invoice_DtlCustomField != null && objRQ_Invoice_DtlCustomField.Rt_Cols_Invoice_DtlCustomField.Length > 0);
                #endregion

                #region // WS_Invoice_DtlCustomField_Get:
                mdsResult = Invoice_DtlCustomField_Get(
                    objRQ_Invoice_DtlCustomField.Tid // strTid
                    , objRQ_Invoice_DtlCustomField.GwUserCode // strGwUserCode
                    , objRQ_Invoice_DtlCustomField.GwPassword // strGwPassword
                    , objRQ_Invoice_DtlCustomField.WAUserCode // strUserCode
                    , objRQ_Invoice_DtlCustomField.WAUserPassword // strUserPassword
                    , ref alParamsCoupleError // alParamsCoupleError
                                              //// Filter:
                    , objRQ_Invoice_DtlCustomField.Ft_RecordStart // strFt_RecordStart
                    , objRQ_Invoice_DtlCustomField.Ft_RecordCount // strFt_RecordCount
                    , objRQ_Invoice_DtlCustomField.Ft_WhereClause // strFt_WhereClause
                                                               //// Return:
                    , objRQ_Invoice_DtlCustomField.Rt_Cols_Invoice_DtlCustomField // strRt_Cols_Invoice_DtlCustomField
                    );
                #endregion

                #region // GetData:
                if (!CmUtils.CMyDataSet.HasError(mdsResult))
                {
                    ////
                    DataTable dt_MySummaryTable = mdsResult.Tables["MySummaryTable"].Copy();
                    lst_MySummaryTable = TUtils.DataTableCmUtils.ToListof<MySummaryTable>(dt_MySummaryTable);
                    objRT_Invoice_DtlCustomField.MySummaryTable = lst_MySummaryTable[0];

                    ////
                    if (bGet_Invoice_DtlCustomField)
                    {
                        ////
                        DataTable dt_Invoice_DtlCustomField = mdsResult.Tables["Invoice_DtlCustomField"].Copy();
                        lst_Invoice_DtlCustomField = TUtils.DataTableCmUtils.ToListof<Invoice_DtlCustomField>(dt_Invoice_DtlCustomField);
                        objRT_Invoice_DtlCustomField.Lst_Invoice_DtlCustomField = lst_Invoice_DtlCustomField;
                    }
                }
                #endregion

                // Return Good:
                return mdsResult;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsResult
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Write ReturnLog:
                //_cf.ProcessBizReturn(
                //	ref mdsResult // mdsFinal
                //	, strTid // strTid
                //	, strFunctionName // strFunctionName
                //	);
                #endregion
            }
        }

        public DataSet WAS_Invoice_DtlCustomField_Create(
            ref ArrayList alParamsCoupleError
            , RQ_Invoice_DtlCustomField objRQ_Invoice_DtlCustomField
            ////
            , out RT_Invoice_DtlCustomField objRT_Invoice_DtlCustomField
            )
        {
            #region // Temp:
            string strTid = objRQ_Invoice_DtlCustomField.Tid;
            objRT_Invoice_DtlCustomField = new RT_Invoice_DtlCustomField();
            DataSet mdsResult = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            DateTime dtimeSys = DateTime.UtcNow;
            //DataSet mdsExec = null;
            //DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(objRQ_Invoice_DtlCustomField.Tid);
            //int nTidSeq = 0;
            //bool bNeedTransaction = true;
            string strFunctionName = "WAS_Invoice_DtlCustomField_Create";
            string strErrorCodeDefault = TError.ErridnInventory.WAS_Invoice_DtlCustomField_Create;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
                , "Invoice_DtlCustomField", TJson.JsonConvert.SerializeObject(objRQ_Invoice_DtlCustomField.Invoice_DtlCustomField)
				////
				});
            #endregion

            try
            {
                #region // Init:
                #endregion

                #region // Refine and Check Input:
                //List<Invoice_DtlCustomField> lst_Invoice_DtlCustomField = new List<Invoice_DtlCustomField>();
                //List<Invoice_DtlCustomFieldInGroup> lst_Invoice_DtlCustomFieldInGroup = new List<Invoice_DtlCustomFieldInGroup>();
                #endregion

                #region // Invoice_DtlCustomField_Create:
                mdsResult = Invoice_DtlCustomField_Create(
                    objRQ_Invoice_DtlCustomField.Tid // strTid
                    , objRQ_Invoice_DtlCustomField.GwUserCode // strGwUserCode
                    , objRQ_Invoice_DtlCustomField.GwPassword // strGwPassword
                    , objRQ_Invoice_DtlCustomField.WAUserCode // strUserCode
                    , objRQ_Invoice_DtlCustomField.WAUserPassword // strUserPassword
                    , ref alParamsCoupleError // alParamsCoupleError
                                              ////
                    , objRQ_Invoice_DtlCustomField.Invoice_DtlCustomField.OrgID // objOrgID
                    , objRQ_Invoice_DtlCustomField.Invoice_DtlCustomField.InvoiceDtlCustomFieldCode // objInvoiceDtlCustomFieldCode
                    , objRQ_Invoice_DtlCustomField.Invoice_DtlCustomField.InvoiceDtlCustomFieldName // objInvoiceDtlCustomFieldName
                    , objRQ_Invoice_DtlCustomField.Invoice_DtlCustomField.DBPhysicalType // objDBPhysicalType
                    );
                #endregion

                // Return Good:
                return mdsResult;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsResult
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Write ReturnLog:
                //_cf.ProcessBizReturn(
                //	ref mdsResult // mdsFinal
                //	, strTid // strTid
                //	, strFunctionName // strFunctionName
                //	);
                #endregion
            }
        }

        public DataSet WAS_Invoice_DtlCustomField_Create_New20190703(
            ref ArrayList alParamsCoupleError
            , RQ_Invoice_DtlCustomField objRQ_Invoice_DtlCustomField
            ////
            , out RT_Invoice_DtlCustomField objRT_Invoice_DtlCustomField
            )
        {
            #region // Temp:
            string strTid = objRQ_Invoice_DtlCustomField.Tid;
            objRT_Invoice_DtlCustomField = new RT_Invoice_DtlCustomField();
            DataSet mdsResult = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            DateTime dtimeSys = DateTime.UtcNow;
            //DataSet mdsExec = null;
            //DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(objRQ_Invoice_DtlCustomField.Tid);
            //int nTidSeq = 0;
            //bool bNeedTransaction = true;
            string strFunctionName = "WAS_Invoice_DtlCustomField_Create";
            string strErrorCodeDefault = TError.ErridnInventory.WAS_Invoice_DtlCustomField_Create;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
                , "Lst_Invoice_DtlCustomField", TJson.JsonConvert.SerializeObject(objRQ_Invoice_DtlCustomField.Lst_Invoice_DtlCustomField)
				////
				});
            #endregion

            try
            {
                #region // Init:
                #endregion

                #region // Refine and Check Input:
                ////
                DataSet dsData = new DataSet();
                {
                    ////
                    DataTable dt_Invoice_DtlCustomField = TUtils.DataTableCmUtils.ToDataTable<Invoice_DtlCustomField>(objRQ_Invoice_DtlCustomField.Lst_Invoice_DtlCustomField, "Invoice_DtlCustomField");
                    dsData.Tables.Add(dt_Invoice_DtlCustomField);
                }
                List<Invoice_DtlCustomField> lst_Invoice_DtlCustomField = new List<Invoice_DtlCustomField>();
                #endregion

                #region // Invoice_DtlCustomField_Create:
                mdsResult = Invoice_DtlCustomField_Create_New20190703(
                    objRQ_Invoice_DtlCustomField.Tid // strTid
                    , objRQ_Invoice_DtlCustomField.GwUserCode // strGwUserCode
                    , objRQ_Invoice_DtlCustomField.GwPassword // strGwPassword
                    , objRQ_Invoice_DtlCustomField.WAUserCode // strUserCode
                    , objRQ_Invoice_DtlCustomField.WAUserPassword // strUserPassword
                    , ref alParamsCoupleError // alParamsCoupleError
                                              ////
                    //, objRQ_Invoice_DtlCustomField.Invoice_DtlCustomField.OrgID // objOrgID
                    //, objRQ_Invoice_DtlCustomField.Invoice_DtlCustomField.InvoiceDtlCustomFieldCode // objInvoiceDtlCustomFieldCode
                    //, objRQ_Invoice_DtlCustomField.Invoice_DtlCustomField.InvoiceDtlCustomFieldName // objInvoiceDtlCustomFieldName
                    //, objRQ_Invoice_DtlCustomField.Invoice_DtlCustomField.DBPhysicalType // objDBPhysicalType
                    , dsData // dsData
                    );
                #endregion

                // Return Good:
                return mdsResult;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsResult
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Write ReturnLog:
                //_cf.ProcessBizReturn(
                //	ref mdsResult // mdsFinal
                //	, strTid // strTid
                //	, strFunctionName // strFunctionName
                //	);
                #endregion
            }
        }

        public DataSet WAS_Invoice_DtlCustomField_Update(
            ref ArrayList alParamsCoupleError
            , RQ_Invoice_DtlCustomField objRQ_Invoice_DtlCustomField
            ////
            , out RT_Invoice_DtlCustomField objRT_Invoice_DtlCustomField
            )
        {
            #region // Temp:
            string strTid = objRQ_Invoice_DtlCustomField.Tid;
            objRT_Invoice_DtlCustomField = new RT_Invoice_DtlCustomField();
            DataSet mdsResult = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            DateTime dtimeSys = DateTime.UtcNow;
            //DataSet mdsExec = null;
            //DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(objRQ_Invoice_DtlCustomField.Tid);
            //int nTidSeq = 0;
            //bool bNeedTransaction = true;
            string strFunctionName = "WAS_Invoice_DtlCustomField_Update";
            string strErrorCodeDefault = TError.ErridnInventory.WAS_Invoice_DtlCustomField_Update;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
                , "Invoice_DtlCustomField", TJson.JsonConvert.SerializeObject(objRQ_Invoice_DtlCustomField.Invoice_DtlCustomField)
				////
				});
            #endregion

            try
            {
                #region // Init:
                #endregion

                #region // Refine and Check Input:
                //List<Invoice_DtlCustomField> lst_Invoice_DtlCustomField = new List<Invoice_DtlCustomField>();
                //List<Invoice_DtlCustomFieldInGroup> lst_Invoice_DtlCustomFieldInGroup = new List<Invoice_DtlCustomFieldInGroup>();
                #endregion

                #region // Invoice_DtlCustomField_Update:
                mdsResult = Invoice_DtlCustomField_Update(
                    objRQ_Invoice_DtlCustomField.Tid // strTid
                    , objRQ_Invoice_DtlCustomField.GwUserCode // strGwUserCode
                    , objRQ_Invoice_DtlCustomField.GwPassword // strGwPassword
                    , objRQ_Invoice_DtlCustomField.WAUserCode // strUserCode
                    , objRQ_Invoice_DtlCustomField.WAUserPassword // strUserPassword
                    , ref alParamsCoupleError // alParamsCoupleError
                                              ////
                    , objRQ_Invoice_DtlCustomField.Invoice_DtlCustomField.OrgID // objOrgID
                    , objRQ_Invoice_DtlCustomField.Invoice_DtlCustomField.InvoiceDtlCustomFieldCode // objInvoiceDtlCustomFieldCode
                    , objRQ_Invoice_DtlCustomField.Invoice_DtlCustomField.InvoiceDtlCustomFieldName // objInvoiceDtlCustomFieldName
                    , objRQ_Invoice_DtlCustomField.Invoice_DtlCustomField.DBPhysicalType // objDBPhysicalType
                    , objRQ_Invoice_DtlCustomField.Invoice_DtlCustomField.FlagActive // objFlagActive
                                                                               ////
                    , objRQ_Invoice_DtlCustomField.Ft_Cols_Upd// objFt_Cols_Upd
                    );
                #endregion

                // Return Good:
                return mdsResult;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsResult
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Write ReturnLog:
                //_cf.ProcessBizReturn(
                //	ref mdsResult // mdsFinal
                //	, strTid // strTid
                //	, strFunctionName // strFunctionName
                //	);
                #endregion
            }
        }

        public DataSet WAS_Invoice_DtlCustomField_Update_New20190703(
            ref ArrayList alParamsCoupleError
            , RQ_Invoice_DtlCustomField objRQ_Invoice_DtlCustomField
            ////
            , out RT_Invoice_DtlCustomField objRT_Invoice_DtlCustomField
            )
        {
            #region // Temp:
            string strTid = objRQ_Invoice_DtlCustomField.Tid;
            objRT_Invoice_DtlCustomField = new RT_Invoice_DtlCustomField();
            DataSet mdsResult = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            DateTime dtimeSys = DateTime.UtcNow;
            //DataSet mdsExec = null;
            //DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(objRQ_Invoice_DtlCustomField.Tid);
            //int nTidSeq = 0;
            //bool bNeedTransaction = true;
            string strFunctionName = "WAS_Invoice_DtlCustomField_Update";
            string strErrorCodeDefault = TError.ErridnInventory.WAS_Invoice_DtlCustomField_Update;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
                , "Lst_Invoice_DtlCustomField", TJson.JsonConvert.SerializeObject(objRQ_Invoice_DtlCustomField.Lst_Invoice_DtlCustomField)
				////
				});
            #endregion

            try
            {
                #region // Init:
                #endregion

                #region // Refine and Check Input:
                ////
                DataSet dsData = new DataSet();
                {
                    ////
                    DataTable dt_Invoice_DtlCustomField = TUtils.DataTableCmUtils.ToDataTable<Invoice_DtlCustomField>(objRQ_Invoice_DtlCustomField.Lst_Invoice_DtlCustomField, "Invoice_DtlCustomField");
                    dsData.Tables.Add(dt_Invoice_DtlCustomField);
                }
                #endregion

                #region // Invoice_DtlCustomField_Add:
                mdsResult = Invoice_DtlCustomField_Update_New20190703(
                    objRQ_Invoice_DtlCustomField.Tid // strTid
                    , objRQ_Invoice_DtlCustomField.GwUserCode // strGwUserCode
                    , objRQ_Invoice_DtlCustomField.GwPassword // strGwPassword
                    , objRQ_Invoice_DtlCustomField.WAUserCode // strUserCode
                    , objRQ_Invoice_DtlCustomField.WAUserPassword // strUserPassword
                    , ref alParamsCoupleError // alParamsCoupleError
                                              ////
                    , dsData // dsData
                             ////
                    , objRQ_Invoice_DtlCustomField.Ft_Cols_Upd // objFt_Cols_Upd
                    );
                #endregion

                // Return Good:
                return mdsResult;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsResult
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Write ReturnLog:
                //_cf.ProcessBizReturn(
                //	ref mdsResult // mdsFinal
                //	, strTid // strTid
                //	, strFunctionName // strFunctionName
                //	);
                #endregion
            }
        }

        public DataSet WAS_Invoice_DtlCustomField_Delete(
            ref ArrayList alParamsCoupleError
            , RQ_Invoice_DtlCustomField objRQ_Invoice_DtlCustomField
            ////
            , out RT_Invoice_DtlCustomField objRT_Invoice_DtlCustomField
            )
        {
            #region // Temp:
            string strTid = objRQ_Invoice_DtlCustomField.Tid;
            objRT_Invoice_DtlCustomField = new RT_Invoice_DtlCustomField();
            DataSet mdsResult = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            DateTime dtimeSys = DateTime.UtcNow;
            //DataSet mdsExec = null;
            //DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(objRQ_Invoice_DtlCustomField.Tid);
            //int nTidSeq = 0;
            //bool bNeedTransaction = true;
            string strFunctionName = "WAS_Invoice_DtlCustomField_Delete";
            string strErrorCodeDefault = TError.ErridnInventory.WAS_Invoice_DtlCustomField_Delete;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				//, "Invoice_DtlCustomField", TJson.JsonConvert.SerializeObject(objRQ_Invoice_DtlCustomField.Invoice_DtlCustomField)
				////
				});
            #endregion

            try
            {
                #region // Init:
                #endregion

                #region // Refine and Check Input:
                //List<Invoice_DtlCustomField> lst_Invoice_DtlCustomField = new List<Invoice_DtlCustomField>();
                //List<Invoice_DtlCustomFieldInGroup> lst_Invoice_DtlCustomFieldInGroup = new List<Invoice_DtlCustomFieldInGroup>();
                #endregion

                #region // Invoice_DtlCustomField_Delete:
                mdsResult = Invoice_DtlCustomField_Delete(
                    objRQ_Invoice_DtlCustomField.Tid // strTid
                    , objRQ_Invoice_DtlCustomField.GwUserCode // strGwUserCode
                    , objRQ_Invoice_DtlCustomField.GwPassword // strGwPassword
                    , objRQ_Invoice_DtlCustomField.WAUserCode // strUserCode
                    , objRQ_Invoice_DtlCustomField.WAUserPassword // strUserPassword
                    , ref alParamsCoupleError // alParamsCoupleError
                                              ////
                    , objRQ_Invoice_DtlCustomField.Invoice_DtlCustomField.OrgID // objOrgID
                    , objRQ_Invoice_DtlCustomField.Invoice_DtlCustomField.InvoiceDtlCustomFieldCode // objInvoiceDtlCustomFieldCode
                    );
                #endregion

                // Return Good:
                return mdsResult;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsResult
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Write ReturnLog:
                //_cf.ProcessBizReturn(
                //	ref mdsResult // mdsFinal
                //	, strTid // strTid
                //	, strFunctionName // strFunctionName
                //	);
                #endregion
            }
        }
        #endregion

        #region // Invoice_TempCustomField:
        private void Invoice_TempCustomField_CheckDB(
            ref ArrayList alParamsCoupleError
            , object objTInvoiceCode
            , object objDBFieldName
            , string strFlagExistToCheck
            , string strFlagActiveListToCheck
            , out DataTable dtDB_Invoice_TempCustomField
            )
        {
            // GetInfo:
            string strSqlExec = CmUtils.StringUtils.Replace(@"
					select top 1
						t.*
					from Invoice_TempCustomField t --//[mylock]
					where (1=1)
						and t.TInvoiceCode = @objTInvoiceCode
						and t.DBFieldName = @objDBFieldName
					;
				");
            dtDB_Invoice_TempCustomField = _cf.db.ExecQuery(
                strSqlExec
                , "@objTInvoiceCode", objTInvoiceCode
                , "@objDBFieldName", objDBFieldName
                , "@dateSys", DateTime.UtcNow.ToString("yyyy-MM-dd")
                ).Tables[0];
            dtDB_Invoice_TempCustomField.TableName = "Invoice_TempCustomField";

            // strFlagExistToCheck:
            if (strFlagExistToCheck.Length > 0)
            {
                if (CmUtils.StringUtils.StringEqual(strFlagExistToCheck, TConst.Flag.Active) && dtDB_Invoice_TempCustomField.Rows.Count < 1)
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.TInvoiceCode", objTInvoiceCode
                        , "Check.DBFieldName", objDBFieldName
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Invoice_TempCustomField_CheckDB_CustomFieldNotFound
                        , null
                        , alParamsCoupleError.ToArray()
                        );
                }
                if (CmUtils.StringUtils.StringEqual(strFlagExistToCheck, TConst.Flag.Inactive) && dtDB_Invoice_TempCustomField.Rows.Count > 0)
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.TInvoiceCode", objTInvoiceCode
                        , "Check.DBFieldName", objDBFieldName
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Invoice_TempCustomField_CheckDB_CustomFieldExist
                        , null
                        , alParamsCoupleError.ToArray()
                        );
                }
            }

            // strFlagActiveListToCheck:
            if (strFlagActiveListToCheck.Length > 0 && !strFlagActiveListToCheck.Contains(Convert.ToString(dtDB_Invoice_TempCustomField.Rows[0]["FlagActive"])))
            {
                alParamsCoupleError.AddRange(new object[]{
                    "Check.TInvoiceCode", objTInvoiceCode
                    , "Check.DBFieldName", objDBFieldName
                    , "Check.strFlagActiveListToCheck", strFlagActiveListToCheck
                    , "DB.FlagActive", dtDB_Invoice_TempCustomField.Rows[0]["FlagActive"]
                    });
                throw CmUtils.CMyException.Raise(
                    TError.ErridnInventory.Invoice_TempCustomField_CheckDB_FlagActiveNotMatched
                    , null
                    , alParamsCoupleError.ToArray()
                    );
            }
        }
        #endregion

        #region // Mst_InvoiceType2:
        private void Mst_InvoiceType2_CheckDB(
            ref ArrayList alParamsCoupleError
            , object objInvoiceType2
            , string strFlagExistToCheck
            , string strFlagActiveListToCheck
            , out DataTable dtDB_Mst_InvoiceType2
            )
        {
            // GetInfo:
            string strSqlExec = CmUtils.StringUtils.Replace(@"
					select top 1
						t.*
					from Mst_InvoiceType2 t --//[mylock]
					where (1=1)
						and t.InvoiceType2 = @objInvoiceType2
					;
				");
            dtDB_Mst_InvoiceType2 = _cf.db.ExecQuery(
                strSqlExec
                , "@objInvoiceType2", objInvoiceType2
                , "@dateSys", DateTime.UtcNow.ToString("yyyy-MM-dd")
                ).Tables[0];
            dtDB_Mst_InvoiceType2.TableName = "Mst_InvoiceType2";

            // strFlagExistToCheck:
            if (strFlagExistToCheck.Length > 0)
            {
                if (CmUtils.StringUtils.StringEqual(strFlagExistToCheck, TConst.Flag.Active) && dtDB_Mst_InvoiceType2.Rows.Count < 1)
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.InvoiceType2", objInvoiceType2
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Mst_InvoiceType2_CheckDB_InvoiceType2NotFound
                        , null
                        , alParamsCoupleError.ToArray()
                        );
                }
                if (CmUtils.StringUtils.StringEqual(strFlagExistToCheck, TConst.Flag.Inactive) && dtDB_Mst_InvoiceType2.Rows.Count > 0)
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.InvoiceType2", objInvoiceType2
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Mst_InvoiceType2_CheckDB_InvoiceType2Exist
                        , null
                        , alParamsCoupleError.ToArray()
                        );
                }
            }

            // strFlagActiveListToCheck:
            if (strFlagActiveListToCheck.Length > 0 && !strFlagActiveListToCheck.Contains(Convert.ToString(dtDB_Mst_InvoiceType2.Rows[0]["FlagActive"])))
            {
                alParamsCoupleError.AddRange(new object[]{
                    "Check.InvoiceType2", objInvoiceType2
                    , "Check.strFlagActiveListToCheck", strFlagActiveListToCheck
                    , "DB.FlagActive", dtDB_Mst_InvoiceType2.Rows[0]["FlagActive"]
                    });
                throw CmUtils.CMyException.Raise(
                    TError.ErridnInventory.Mst_InvoiceType2_CheckDB_FlagActiveNotMatched
                    , null
                    , alParamsCoupleError.ToArray()
                    );
            }
        }

        public DataSet Mst_InvoiceType2_Get(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            //// Filter:
            , string strFt_RecordStart
            , string strFt_RecordCount
            , string strFt_WhereClause
            //// Return:
            , string strRt_Cols_Mst_InvoiceType2
            )
        {
            #region // Temp:
            DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            //int nTidSeq = 0;
            DateTime dtimeSys = DateTime.UtcNow;
            bool bNeedTransaction = true;
            string strFunctionName = "Mst_InvoiceType2_Get";
            string strErrorCodeDefault = TError.ErridnInventory.Mst_InvoiceType2_Get;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				//// Filter
				, "strFt_RecordStart", strFt_RecordStart
                , "strFt_RecordCount", strFt_RecordCount
                , "strFt_WhereClause", strFt_WhereClause
				//// Return
				, "strRt_Cols_Mst_InvoiceType2", strRt_Cols_Mst_InvoiceType2
                });
            #endregion

            try
            {
                #region // Init:
                //_cf.db.LogUserId = _cf.sinf.strUserCode;
                if (bNeedTransaction) _cf.db.BeginTransaction();

                // Write RequestLog:
                _cf.ProcessBizReq_OutSide(
                    strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    , alParamsCoupleError // alParamsCoupleError
                    );

                // Sys_User_CheckAuthentication:
                //Sys_User_CheckAuthentication(
                //    ref alParamsCoupleError
                //    , strWAUserCode
                //    , strWAUserPassword
                //    );

                // Check Access/Deny:
                Sys_Access_CheckDenyV30(
                    ref alParamsCoupleError
                    , strWAUserCode
                    , strFunctionName
                    );
                #endregion

                #region // Check:
                //// Refine:
                long nFilterRecordStart = Convert.ToInt64(strFt_RecordStart);
                long nFilterRecordEnd = nFilterRecordStart + Convert.ToInt64(strFt_RecordCount) - 1;
                bool bGet_Mst_InvoiceType2 = (strRt_Cols_Mst_InvoiceType2 != null && strRt_Cols_Mst_InvoiceType2.Length > 0);

                //// drAbilityOfUser:
                //DataRow drAbilityOfUser = myCache_ViewAbility_GetUserInfo(strWAUserCode);

                #endregion

                #region // Build Sql:
                ////
                ArrayList alParamsCoupleSql = new ArrayList();
                alParamsCoupleSql.AddRange(new object[] {
                    "@nFilterRecordStart", nFilterRecordStart
                    , "@nFilterRecordEnd", nFilterRecordEnd
                    });
                ////
                //myCache_ViewAbility_GetDealerInfo(drAbilityOfUser);
                ////
                string strSqlGetData = CmUtils.StringUtils.Replace(@"
						---- #tbl_Mst_InvoiceType2_Filter_Draft:
						select distinct
							identity(bigint, 0, 1) MyIdxSeq
                            , mit2.InvoiceType2
						into #tbl_Mst_InvoiceType2_Filter_Draft
						from Mst_InvoiceType2 mit2 --//[mylock]
						where (1=1)
							zzB_Where_strFilter_zzE
						order by 
                            mit2.OrgID asc
						;

						---- Summary:
						select Count(0) MyCount from #tbl_Mst_InvoiceType2_Filter_Draft t --//[mylock]
						;

						---- #tbl_Mst_InvoiceType2_Filter:
						select
							t.*
						into #tbl_Mst_InvoiceType2_Filter
						from #tbl_Mst_InvoiceType2_Filter_Draft t --//[mylock]
						where
							(t.MyIdxSeq >= @nFilterRecordStart)
							and (t.MyIdxSeq <= @nFilterRecordEnd)
						;

						-------- Mst_InvoiceType2 ------:
						zzB_Select_Mst_InvoiceType2_zzE
						----------------------------------

						---- Clear for debug:
						--drop table #tbl_Mst_InvoiceType2_Filter_Draft;
						--drop table #tbl_Mst_InvoiceType2_Filter;
					"
                    );
                ////
                string zzB_Select_Mst_InvoiceType2_zzE = "-- Nothing.";
                if (bGet_Mst_InvoiceType2)
                {
                    #region // bGet_Mst_InvoiceType2:
                    zzB_Select_Mst_InvoiceType2_zzE = CmUtils.StringUtils.Replace(@"
							---- Mst_InvoiceType2:
							select
								t.MyIdxSeq
								, mit2.*
							from #tbl_Mst_InvoiceType2_Filter t --//[mylock]
								inner join Mst_InvoiceType2 mit2 --//[mylock]
									on t.InvoiceType2 = mit2.InvoiceType2
							order by t.MyIdxSeq asc
							;
						"
                        );
                    #endregion
                }
                ////
                string zzB_Where_strFilter_zzE = "";
                {
                    Hashtable htSpCols = new Hashtable();
                    {
                        #region // htSpCols:
                        ////
                        TUtils.CUtils.MyBuildHTSupportedColumns(
                            _cf.db // db
                            , ref htSpCols // htSupportedColumns
                            , "Mst_InvoiceType2" // strTableNameDB
                            , "Mst_InvoiceType2." // strPrefixStd
                            , "mit2." // strPrefixAlias
                            );
                        ////
                        #endregion
                    }
                    zzB_Where_strFilter_zzE = CmUtils.SqlUtils.BuildWhere(
                        htSpCols // htSpCols
                        , strFt_WhereClause // strClause
                        , "@p_" // strParamPrefix
                        , ref alParamsCoupleSql // alParamsCoupleSql
                        );
                    zzB_Where_strFilter_zzE = (zzB_Where_strFilter_zzE.Length <= 0 ? "" : string.Format(" and ({0})", zzB_Where_strFilter_zzE));
                    alParamsCoupleError.AddRange(new object[]{
                        "zzB_Where_strFilter_zzE", zzB_Where_strFilter_zzE
                        });
                }
                ////
                strSqlGetData = CmUtils.StringUtils.Replace(
                    strSqlGetData
                    , "zzB_Where_strFilter_zzE", zzB_Where_strFilter_zzE
                    , "zzB_Select_Mst_InvoiceType2_zzE", zzB_Select_Mst_InvoiceType2_zzE
                    );
                #endregion

                #region // Get Data:
                DataSet dsGetData = _cf.db.ExecQuery(
                    strSqlGetData
                    , alParamsCoupleSql.ToArray()
                    );
                int nIdxTable = 0;
                dsGetData.Tables[nIdxTable++].TableName = "MySummaryTable";
                if (bGet_Mst_InvoiceType2)
                {
                    dsGetData.Tables[nIdxTable++].TableName = "Mst_InvoiceType2";
                }
                CmUtils.DataUtils.MoveDataTable(ref mdsFinal, ref dsGetData);
                #endregion

                // Return Good:
                TDALUtils.DBUtils.RollbackSafety(_cf.db); // Always Rollback.
                mdsFinal.AcceptChanges();
                return mdsFinal;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Rollback:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);

                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsFinal
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Rollback and Release resources:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);
                TDALUtils.DBUtils.ReleaseAllSemaphore(_cf.db_Sys, true);

                // Write ReturnLog:
                _cf.ProcessBizReturn_OutSide(
                    ref mdsFinal // mdsFinal
                    , strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    );
                #endregion
            }
        }

        public DataSet WAS_Mst_InvoiceType2_Get(
            ref ArrayList alParamsCoupleError
            , RQ_Mst_InvoiceType2 objRQ_Mst_InvoiceType2
            ////
            , out RT_Mst_InvoiceType2 objRT_Mst_InvoiceType2
            )
        {
            #region // Temp:
            string strTid = objRQ_Mst_InvoiceType2.Tid;
            objRT_Mst_InvoiceType2 = new RT_Mst_InvoiceType2();
            DataSet mdsResult = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            DateTime dtimeSys = DateTime.UtcNow;
            //DataSet mdsExec = null;
            //DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(objRQ_Mst_InvoiceType2.Tid);
            //int nTidSeq = 0;
            //bool bNeedTransaction = true;
            string strFunctionName = "WAS_Mst_InvoiceType2_Get";
            string strErrorCodeDefault = TError.ErridnInventory.WAS_Mst_InvoiceType2_Get;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
				});
            #endregion

            try
            {
                #region // Init:
                #endregion

                #region // Refine and Check Input:
                List<MySummaryTable> lst_MySummaryTable = new List<MySummaryTable>();

                List<Mst_InvoiceType2> lst_Mst_InvoiceType2 = new List<Mst_InvoiceType2>();
                bool bGet_Mst_InvoiceType2 = (objRQ_Mst_InvoiceType2.Rt_Cols_Mst_InvoiceType2 != null && objRQ_Mst_InvoiceType2.Rt_Cols_Mst_InvoiceType2.Length > 0);
                #endregion

                #region // WS_Mst_InvoiceType2_Get:
                mdsResult = Mst_InvoiceType2_Get(
                    objRQ_Mst_InvoiceType2.Tid // strTid
                    , objRQ_Mst_InvoiceType2.GwUserCode // strGwUserCode
                    , objRQ_Mst_InvoiceType2.GwPassword // strGwPassword
                    , objRQ_Mst_InvoiceType2.WAUserCode // strUserCode
                    , objRQ_Mst_InvoiceType2.WAUserPassword // strUserPassword
                    , ref alParamsCoupleError // alParamsCoupleError
                                              //// Filter:
                    , objRQ_Mst_InvoiceType2.Ft_RecordStart // strFt_RecordStart
                    , objRQ_Mst_InvoiceType2.Ft_RecordCount // strFt_RecordCount
                    , objRQ_Mst_InvoiceType2.Ft_WhereClause // strFt_WhereClause
                                                               //// Return:
                    , objRQ_Mst_InvoiceType2.Rt_Cols_Mst_InvoiceType2 // strRt_Cols_Mst_InvoiceType2
                    );
                #endregion

                #region // GetData:
                if (!CmUtils.CMyDataSet.HasError(mdsResult))
                {
                    ////
                    DataTable dt_MySummaryTable = mdsResult.Tables["MySummaryTable"].Copy();
                    lst_MySummaryTable = TUtils.DataTableCmUtils.ToListof<MySummaryTable>(dt_MySummaryTable);
                    objRT_Mst_InvoiceType2.MySummaryTable = lst_MySummaryTable[0];

                    ////
                    if (bGet_Mst_InvoiceType2)
                    {
                        ////
                        DataTable dt_Mst_InvoiceType2 = mdsResult.Tables["Mst_InvoiceType2"].Copy();
                        lst_Mst_InvoiceType2 = TUtils.DataTableCmUtils.ToListof<Mst_InvoiceType2>(dt_Mst_InvoiceType2);
                        objRT_Mst_InvoiceType2.Lst_Mst_InvoiceType2 = lst_Mst_InvoiceType2;
                    }
                }
                #endregion

                // Return Good:
                return mdsResult;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsResult
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Write ReturnLog:
                //_cf.ProcessBizReturn(
                //	ref mdsResult // mdsFinal
                //	, strTid // strTid
                //	, strFunctionName // strFunctionName
                //	);
                #endregion
            }
        }
        #endregion

        #region // MstSv_Inos_Org:
        public DataSet WAS_RptSv_MstSv_Inos_Org_Get(
            ref ArrayList alParamsCoupleError
            , RQ_MstSv_Inos_Org objRQ_MstSv_Inos_Org
            ////
            , out RT_MstSv_Inos_Org objRT_MstSv_Inos_Org
            )
        {
            #region // Temp:
            string strTid = objRQ_MstSv_Inos_Org.Tid;
            objRT_MstSv_Inos_Org = new RT_MstSv_Inos_Org();
            DataSet mdsResult = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            DateTime dtimeSys = DateTime.UtcNow;
            //DataSet mdsExec = null;
            //DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(objRQ_MstSv_Inos_Org.Tid);
            //int nTidSeq = 0;
            //bool bNeedTransaction = true;
            string strFunctionName = "WAS_RptSv_MstSv_Inos_Org_Get";
            string strErrorCodeDefault = TError.ErridnInventory.WAS_MstSv_Inos_Org_Get;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
				});
            #endregion

            try
            {
                #region // Init:
                #endregion

                #region // Refine and Check Input:
                List<MySummaryTable> lst_MySummaryTable = new List<MySummaryTable>();
                List<MstSv_Inos_Org> lst_MstSv_Inos_Org = new List<MstSv_Inos_Org>();
                #endregion

                #region // WS_MstSv_Inos_Org_Get:
                mdsResult = RptSv_MstSv_Inos_Org_Get(
                    objRQ_MstSv_Inos_Org.Tid // strTid
                    , objRQ_MstSv_Inos_Org.GwUserCode // strGwUserCode
                    , objRQ_MstSv_Inos_Org.GwPassword // strGwPassword
                    , objRQ_MstSv_Inos_Org.WAUserCode // strUserCode
                    , objRQ_MstSv_Inos_Org.WAUserPassword // strUserPassword
                    , ref alParamsCoupleError // alParamsCoupleError
                                              //// Filter:
                    , objRQ_MstSv_Inos_Org.Ft_RecordStart // strFt_RecordStart
                    , objRQ_MstSv_Inos_Org.Ft_RecordCount // strFt_RecordCount
                    , objRQ_MstSv_Inos_Org.Ft_WhereClause // strFt_WhereClause
                                                   //// Return:
                    , objRQ_MstSv_Inos_Org.Rt_Cols_MstSv_Inos_Org // strRt_Cols_MstSv_Inos_Org
                    );
                #endregion

                #region // GetData:
                if (!CmUtils.CMyDataSet.HasError(mdsResult))
                {
                    ////
                    DataTable dt_MySummaryTable = mdsResult.Tables["MySummaryTable"].Copy();
                    lst_MySummaryTable = TUtils.DataTableCmUtils.ToListof<MySummaryTable>(dt_MySummaryTable);
                    objRT_MstSv_Inos_Org.MySummaryTable = lst_MySummaryTable[0];
                    ////
                    DataTable dt_MstSv_Inos_Org = mdsResult.Tables["MstSv_Inos_Org"].Copy();
                    lst_MstSv_Inos_Org = TUtils.DataTableCmUtils.ToListof<MstSv_Inos_Org>(dt_MstSv_Inos_Org);
                    objRT_MstSv_Inos_Org.Lst_MstSv_Inos_Org = lst_MstSv_Inos_Org;
                    /////
                }
                #endregion

                // Return Good:
                return mdsResult;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsResult
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Write ReturnLog:
                //_cf.ProcessBizReturn(
                //	ref mdsResult // mdsFinal
                //	, strTid // strTid
                //	, strFunctionName // strFunctionName
                //	);
                #endregion
            }
        }

        public DataSet RptSv_MstSv_Inos_Org_Get(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            //// Filter:
            , string strFt_RecordStart
            , string strFt_RecordCount
            , string strFt_WhereClause
            //// Return:
            , string strRt_Cols_MstSv_Inos_Org
            )
        {
            #region // Temp:
            DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            //int nTidSeq = 0;
            DateTime dtimeSys = DateTime.UtcNow;
            string strFunctionName = "RptSv_MstSv_Inos_Org_Get";
            string strErrorCodeDefault = TError.ErridnInventory.MstSv_Inos_Org_Get;
            alParamsCoupleError.AddRange(new object[]{
                    "strFunctionName", strFunctionName
                    , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
			        //// Filter
					, "strFt_RecordStart", strFt_RecordStart
                    , "strFt_RecordCount", strFt_RecordCount
                    , "strFt_WhereClause", strFt_WhereClause
			        //// Return
					, "strRt_Cols_MstSv_Inos_Org", strRt_Cols_MstSv_Inos_Org
                    });
            #endregion

            try
            {
                #region // Init:
                //_cf.db.LogUserId = _cf.sinf.strUserCode;
                _cf.db.BeginTransaction();

                // Write RequestLog:
                _cf.ProcessBizReq_OutSide(
                    strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    , alParamsCoupleError // alParamsCoupleError
                    );

                // RptSv_Sys_User_CheckAuthentication:
                //RptSv_Sys_User_CheckAuthentication(
                //    ref alParamsCoupleError
                //    , strWAUserCode
                //    , strWAUserPassword
                //    );

                // Check Access/Deny:
                //RptSv_Sys_Access_CheckDeny(
                //	ref alParamsCoupleError
                //	, strWAUserCode
                //	, strFunctionName
                //	);
                #endregion

                #region // MstSv_Inos_Org_GetX:
                DataSet dsGetData = null;
                {
                    ////
                    RptSv_MstSv_Inos_Org_GetX(
                        strTid // strTid
                        , strGwUserCode // strGwUserCode
                        , strGwPassword // strGwPassword
                        , strWAUserCode // strWAUserCode
                        , strWAUserPassword // strWAUserPassword
                        , ref alParamsCoupleError // alParamsCoupleError
                        , dtimeSys // dtimeSys
                                   ////
                        , strFt_RecordStart // strFt_RecordStart
                        , strFt_RecordCount // strFt_RecordCount
                        , strFt_WhereClause // strFt_WhereClause
                                            ////
                        , strRt_Cols_MstSv_Inos_Org // strRt_Cols_MstSv_Inos_Org
                                             ////
                        , out dsGetData // dsGetData
                        );
                    ////
                    CmUtils.DataUtils.MoveDataTable(ref mdsFinal, ref dsGetData);
                }
                #endregion

                // Return Good:
                TDALUtils.DBUtils.RollbackSafety(_cf.db); // Always Rollback.
                mdsFinal.AcceptChanges();
                return mdsFinal;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Rollback:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);

                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsFinal
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Rollback and Release resources:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);
                TDALUtils.DBUtils.ReleaseAllSemaphore(_cf.db_Sys, true);

                // Write ReturnLog:
                _cf.ProcessBizReturn_OutSide(
                    ref mdsFinal // mdsFinal
                    , strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    );
                #endregion
            }
        }
        private void RptSv_MstSv_Inos_Org_GetX(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            , DateTime dtimeSys
            //// Filter:
            , string strFt_RecordStart
            , string strFt_RecordCount
            , string strFt_WhereClause
            //// Return:
            , string strRt_Cols_MstSv_Inos_Org
            ////
            , out DataSet dsGetData
            )
        {
            #region // Temp:
            //DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            //DateTime dtimeSys = DateTime.UtcNow;
            //bool bNeedTransaction = true;
            string strFunctionName = "RptSv_MstSv_Inos_Org_GetX";
            //string strErrorCodeDefault = TError.ErrHTCNM.Mnf_VIN_Get_QCX;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
                });
            #endregion

            #region // Check:
            //// Refine:
            long nFilterRecordStart = Convert.ToInt64(strFt_RecordStart);
            long nFilterRecordEnd = nFilterRecordStart + Convert.ToInt64(strFt_RecordCount) - 1;
            bool bGet_MstSv_Inos_Org = (strRt_Cols_MstSv_Inos_Org != null && strRt_Cols_MstSv_Inos_Org.Length > 0);

            //// drAbilityOfUser:
            //DataRow drAbilityOfUser = Sys_User_GetAbilityViewOfUser(strWAUserCode);
            //zzzzClauseSelect_MstSv_Inos_Org_ViewAbility_Get(
            //    drAbilityOfUser // drAbilityOfUser
            //    , ref alParamsCoupleError // alParamsCoupleError
            //    );

            #endregion

            #region // Build Sql:
            ////
            ArrayList alParamsCoupleSql = new ArrayList();
            alParamsCoupleSql.AddRange(new object[] {
                "@nFilterRecordStart", nFilterRecordStart
                , "@nFilterRecordEnd", nFilterRecordEnd
                });
            ////
            //myCache_ViewAbility_GetDealerInfo(drAbilityOfUser);
            ////
            string strSqlGetData = CmUtils.StringUtils.Replace(@"
					---- #tbl_MstSv_Inos_Org_Filter_Draft:
					select distinct
						identity(bigint, 0, 1) MyIdxSeq
						, msio.MST
					into #tbl_MstSv_Inos_Org_Filter_Draft
					from MstSv_Inos_Org msio --//[mylock]
					where (1=1)
						zzB_Where_strFilter_zzE
					order by msio.MST asc
					;

					---- Summary:
					select Count(0) MyCount from #tbl_MstSv_Inos_Org_Filter_Draft t --//[mylock]
					;

					---- #tbl_MstSv_Inos_Org_Filter:
					select
						t.*
					into #tbl_MstSv_Inos_Org_Filter
					from #tbl_MstSv_Inos_Org_Filter_Draft t --//[mylock]
					where (1=1)
						and (t.MyIdxSeq >= @nFilterRecordStart)
						and (t.MyIdxSeq <= @nFilterRecordEnd)
					;

					-------- MstSv_Inos_Org -----:
					zzB_Select_MstSv_Inos_Org_zzE
					------------------------

					---- Clear for debug:
					--drop table #tbl_MstSv_Inos_Org_Filter_Draft;
					--drop table #tbl_MstSv_Inos_Org_Filter;
				"
                );
            ////
            string zzB_Select_MstSv_Inos_Org_zzE = "-- Nothing.";
            if (bGet_MstSv_Inos_Org)
            {
                #region // bGet_MstSv_Inos_Org:
                zzB_Select_MstSv_Inos_Org_zzE = CmUtils.StringUtils.Replace(@"
					
					---- MstSv_Inos_Org:
					select
						t.MyIdxSeq
						, msio.*
                        , imbt.BizType imbt_BizType
                        , imbt.BizTypeName imbt_BizTypeName
						----
						, imbf.BizFieldCode imbf_BizFieldCode
						, imbf.BizFieldName imbf_BizFieldName
						----
						, imbs.BizSizeCode imbs_BizSizeCode
						, imbs.BizSizeName imbs_BizSizeName
					from #tbl_MstSv_Inos_Org_Filter t --//[mylock]
						inner join MstSv_Inos_Org msio --//[mylock]
							on t.MST = msio.MST
                        left join iNOS_Mst_BizType imbt --//[mylock]
							on msio.BizType = imbt.BizType
						left join iNOS_Mst_BizField imbf --//[mylock]
							on msio.BizField = imbf.BizFieldCode
						left join iNOS_Mst_BizSize imbs --//[mylock]
							on msio.OrgSize = imbs.BizSizeCode
					order by t.MyIdxSeq asc
					;
				"
                );
                #endregion
            }
            ////
            string zzB_Where_strFilter_zzE = "";
            {
                Hashtable htSpCols = new Hashtable();
                {
                    #region // htSpCols:
                    ////
                    TUtils.CUtils.MyBuildHTSupportedColumns(
                        _cf.db // db
                        , ref htSpCols // htSupportedColumns
                        , "MstSv_Inos_Org" // strTableNameDB
                        , "MstSv_Inos_Org." // strPrefixStd
                        , "msio." // strPrefixAlias
                        );
                    ////
                    #endregion
                }
                zzB_Where_strFilter_zzE = CmUtils.SqlUtils.BuildWhere(
                    htSpCols // htSpCols
                    , strFt_WhereClause // strClause
                    , "@p_" // strParamPrefix
                    , ref alParamsCoupleSql // alParamsCoupleSql
                    );
                zzB_Where_strFilter_zzE = (zzB_Where_strFilter_zzE.Length <= 0 ? "" : string.Format(" and ({0})", zzB_Where_strFilter_zzE));
                alParamsCoupleError.AddRange(new object[]{
                    "zzB_Where_strFilter_zzE", zzB_Where_strFilter_zzE
                    });
            }
            ////
            strSqlGetData = CmUtils.StringUtils.Replace(
                strSqlGetData
                , "zzB_Where_strFilter_zzE", zzB_Where_strFilter_zzE
                , "zzB_Select_MstSv_Inos_Org_zzE", zzB_Select_MstSv_Inos_Org_zzE
                );
            #endregion

            #region // Get Data:
            dsGetData = _cf.db.ExecQuery(
                strSqlGetData
                , alParamsCoupleSql.ToArray()
                );
            int nIdxTable = 0;
            dsGetData.Tables[nIdxTable++].TableName = "MySummaryTable";
            if (bGet_MstSv_Inos_Org)
            {
                dsGetData.Tables[nIdxTable++].TableName = "MstSv_Inos_Org";
            }
            #endregion
        }
        #endregion

        #region // Mst_Brand:
        private void Mst_Brand_CheckDB(
            ref ArrayList alParamsCoupleError
            , object objOrgID
            , object objBrandCode
            , string strFlagExistToCheck
            , string strFlagActiveListToCheck
            , out DataTable dtDB_Mst_Brand
            )
        {
            // GetInfo:
            string strSqlExec = CmUtils.StringUtils.Replace(@"
					select top 1
						t.*
					from Mst_Brand t --//[mylock]
					where (1=1)
						and t.OrgID = @objOrgID
						and t.BrandCode = @objBrandCode
					;
				");
            dtDB_Mst_Brand = _cf.db.ExecQuery(
                strSqlExec
                , "@objOrgID", objOrgID
                , "@objBrandCode", objBrandCode
                ).Tables[0];
            dtDB_Mst_Brand.TableName = "Mst_Brand";

            // strFlagExistToCheck:
            if (strFlagExistToCheck.Length > 0)
            {
                if (CmUtils.StringUtils.StringEqual(strFlagExistToCheck, TConst.Flag.Active) && dtDB_Mst_Brand.Rows.Count < 1)
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.OrgID", objOrgID
                        , "Check.BrandCode", objBrandCode
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Mst_Brand_CheckDB_BrandCodeNotFound
                        , null
                        , alParamsCoupleError.ToArray()
                        );
                }
                if (CmUtils.StringUtils.StringEqual(strFlagExistToCheck, TConst.Flag.Inactive) && dtDB_Mst_Brand.Rows.Count > 0)
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.OrgID", objOrgID
                        , "Check.BrandCode", objBrandCode
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Mst_Brand_CheckDB_BrandCodeExist
                        , null
                        , alParamsCoupleError.ToArray()
                        );
                }
            }

            // strFlagActiveListToCheck:
            if (strFlagActiveListToCheck.Length > 0 && !strFlagActiveListToCheck.Contains(Convert.ToString(dtDB_Mst_Brand.Rows[0]["FlagActive"])))
            {
                alParamsCoupleError.AddRange(new object[]{
                    "Check.OrgID", objOrgID
                    , "Check.BrandCode", objBrandCode
                    , "Check.strFlagActiveListToCheck", strFlagActiveListToCheck
                    , "DB.FlagActive", dtDB_Mst_Brand.Rows[0]["FlagActive"]
                    });
                throw CmUtils.CMyException.Raise(
                    TError.ErridnInventory.Mst_Brand_CheckDB_FlagActiveNotMatched
                    , null
                    , alParamsCoupleError.ToArray()
                    );
            }
        }

        private void Mst_Brand_CheckDB_ExistNetworkBrandCode(
            ref ArrayList alParamsCoupleError
            , object objOrgID
            , object objBrandCode
            )
        {
            // GetInfo:
            string strSqlExec = CmUtils.StringUtils.Replace(@"
					select top 1
						t.*
					from Mst_Brand t --//[mylock]
					where (1=1)
						and t.OrgID = @objOrgID
						and t.BrandCode = @objBrandCode
					;
				");
            DataTable dtDB_Mst_Brand = _cf.db.ExecQuery(
                strSqlExec
                , "@objOrgID", objOrgID
                , "@objBrandCode", objBrandCode
                ).Tables[0];
            dtDB_Mst_Brand.TableName = "Mst_Brand";

            if (dtDB_Mst_Brand.Rows.Count < 1)
            {
                alParamsCoupleError.AddRange(new object[]{
                    "Check.OrgID", objOrgID
                    , "Check.BrandCode", objBrandCode
                    });
                throw CmUtils.CMyException.Raise(
                    TError.ErridnInventory.Mst_Brand_CheckDB_NotExistNetworkBrandCode
                    , null
                    , alParamsCoupleError.ToArray()
                    );
            }
        }

        private void Mst_Brand_CheckDB_NetworkBrandCodeOfOrgParent(
            ref ArrayList alParamsCoupleError
            , object objNetWorkID
            , object objOrgID
            , object objBrandCode
            , object objNetworkBrandCode
            )
        {
            if (CmUtils.StringUtils.StringEqualIgnoreCase(objNetWorkID, objOrgID))
            {
                if (!CmUtils.StringUtils.StringEqualIgnoreCase(objBrandCode, objNetworkBrandCode))
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.objNetWorkID", objNetWorkID
                        , "Check.objOrgID", objOrgID
                        , "Check.objBrandCode", objBrandCode
                        , "Check.objNetworkBrandCode", objNetworkBrandCode
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Mst_Brand_CheckDB_NetworkBrandCodeNoEqualBrandCode
                        , null
                        , alParamsCoupleError.ToArray()
                        );

                }
            }
            else
            {
                Mst_Brand_CheckDB_ExistNetworkBrandCode(
                    ref alParamsCoupleError // alParamsCoupleError
                    , objNetWorkID // objOrgID
                    , objNetworkBrandCode // objNetworkBrandCode
                    );
            }
        }
        public DataSet Mst_Brand_Get(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
			, string strAccessToken
			, string strNetworkID
			, string strOrgID
            , ref ArrayList alParamsCoupleError
            //// Filter:m
            , string strFt_RecordStart
            , string strFt_RecordCount
            , string strFt_WhereClause
            //// Return:
            , string strRt_Cols_Mst_Brand
            )
        {
            #region // Temp:
            DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            //int nTidSeq = 0;
            DateTime dtimeSys = DateTime.UtcNow;
            bool bNeedTransaction = true;
            string strFunctionName = "Mst_Brand_Get";
            string strErrorCodeDefault = TError.ErridnInventory.Mst_Brand_Get;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				//// Filter
				, "strFt_RecordStart", strFt_RecordStart
                , "strFt_RecordCount", strFt_RecordCount
                , "strFt_WhereClause", strFt_WhereClause
				//// Return
				, "strRt_Cols_Mst_Brand", strRt_Cols_Mst_Brand
                });
            #endregion

            try
            {
                #region // Init:
                //_cf.db.LogUserId = _cf.sinf.strUserCode;
                if (bNeedTransaction) _cf.db.BeginTransaction();

                // Write RequestLog:
                _cf.ProcessBizReq_OutSide(
                    strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    , alParamsCoupleError // alParamsCoupleError
                    );

				// Sys_User_CheckAuthentication:
				//Sys_User_CheckAuthentication(
				//    ref alParamsCoupleError
				//    , strWAUserCode
				//    , strWAUserPassword
				//    );

				////
				Sys_User_CheckAuthorize(
					strTid // strTid
					, strGwUserCode // strGwUserCode
					, strGwPassword // strGwPassword
					, strWAUserCode // strWAUserCode
									//, strWAUserPassword // strWAUserPassword
					, ref mdsFinal // mdsFinal
					, ref alParamsCoupleError // alParamsCoupleError
					, dtimeSys // dtimeSys
					, strAccessToken // strAccessToken
					, strNetworkID // strNetworkID
					, strOrgID // strOrgID
					, TConst.Flag.Active // strFlagUserCodeToCheck
					);

				// Check Access/Deny:
				//Sys_Access_CheckDenyV30(
				//    ref alParamsCoupleError
				//    , strWAUserCode
				//    , strFunctionName
				//    );
				#endregion

				#region // Check:
				//// Refine:
				long nFilterRecordStart = Convert.ToInt64(strFt_RecordStart);
                long nFilterRecordEnd = nFilterRecordStart + Convert.ToInt64(strFt_RecordCount) - 1;
                bool bGet_Mst_Brand = (strRt_Cols_Mst_Brand != null && strRt_Cols_Mst_Brand.Length > 0);

                //// drAbilityOfUser:
                //DataRow drAbilityOfUser = myCache_ViewAbility_GetUserInfo(strWAUserCode);
                #endregion

                #region // Build Sql:
                ////
                ArrayList alParamsCoupleSql = new ArrayList();
                alParamsCoupleSql.AddRange(new object[] {
                    "@nFilterRecordStart", nFilterRecordStart
                    , "@nFilterRecordEnd", nFilterRecordEnd
                    });
                ////
                zzzzClauseSelect_Mst_Org_ViewAbility_Get(
                    strOrgID // strOrgID
                    , ref alParamsCoupleError // alParamsCoupleError
                    );
                ////
                string strSqlGetData = CmUtils.StringUtils.Replace(@"
						---- #tbl_Mst_Brand_Filter_Draft:
						select distinct
							identity(bigint, 0, 1) MyIdxSeq
							, mb.BrandCode
							, mb.OrgID
						into #tbl_Mst_Brand_Filter_Draft
						from Mst_Brand mb --//[mylock]
                            inner join #tbl_Mst_Org_ViewAbility t_mo --//[mylock]
	                            on mb.OrgID = t_mo.OrgID
						where (1=1)
							zzB_Where_strFilter_zzE
						order by mb.BrandCode asc
						;

						---- Summary:
						select Count(0) MyCount from #tbl_Mst_Brand_Filter_Draft t --//[mylock]
						;

						---- #tbl_Mst_Brand_Filter:
						select
							t.*
						into #tbl_Mst_Brand_Filter
						from #tbl_Mst_Brand_Filter_Draft t --//[mylock]
						where
							(t.MyIdxSeq >= @nFilterRecordStart)
							and (t.MyIdxSeq <= @nFilterRecordEnd)
						;

						-------- Mst_Brand ------:
						zzB_Select_Mst_Brand_zzE
						--------------------------

						---- Clear for debug:
						--drop table #tbl_Mst_Brand_Filter_Draft;
						--drop table #tbl_Mst_Brand_Filter;
					"
                    );
                ////
                string zzB_Select_Mst_Brand_zzE = "-- Nothing.";
                if (bGet_Mst_Brand)
                {
                    #region // bGet_Mst_Brand:
                    zzB_Select_Mst_Brand_zzE = CmUtils.StringUtils.Replace(@"
							---- Mst_Brand:
							select
								t.MyIdxSeq
								, mb.*
							from #tbl_Mst_Brand_Filter t --//[mylock]
								inner join Mst_Brand mb --//[mylock]
									on t.OrgID = mb.OrgID
									    and t.BrandCode = mb.BrandCode
							order by t.MyIdxSeq asc
							;
						"
                        );
                    #endregion
                }
                ////
                string zzB_Where_strFilter_zzE = "";
                {
                    Hashtable htSpCols = new Hashtable();
                    {
                        #region // htSpCols:
                        ////
                        TUtils.CUtils.MyBuildHTSupportedColumns(
                            _cf.db // db
                            , ref htSpCols // htSupportedColumns
                            , "Mst_Brand" // strTableNameDB
                            , "Mst_Brand." // strPrefixStd
                            , "mb." // strPrefixAlias
                            );
                        ////
                        #endregion
                    }
                    zzB_Where_strFilter_zzE = CmUtils.SqlUtils.BuildWhere(
                        htSpCols // htSpCols
                        , strFt_WhereClause // strClause
                        , "@p_" // strParamPrefix
                        , ref alParamsCoupleSql // alParamsCoupleSql
                        );
                    zzB_Where_strFilter_zzE = (zzB_Where_strFilter_zzE.Length <= 0 ? "" : string.Format(" and ({0})", zzB_Where_strFilter_zzE));
                    alParamsCoupleError.AddRange(new object[]{
                        "zzB_Where_strFilter_zzE", zzB_Where_strFilter_zzE
                        });
                }
                ////
                strSqlGetData = CmUtils.StringUtils.Replace(
                    strSqlGetData
                    , "zzB_Where_strFilter_zzE", zzB_Where_strFilter_zzE
                    , "zzB_Select_Mst_Brand_zzE", zzB_Select_Mst_Brand_zzE
                    );
                #endregion

                #region // Get Data:
                DataSet dsGetData = _cf.db.ExecQuery(
                    strSqlGetData
                    , alParamsCoupleSql.ToArray()
                    );
                int nIdxTable = 0;
                dsGetData.Tables[nIdxTable++].TableName = "MySummaryTable";
                if (bGet_Mst_Brand)
                {
                    dsGetData.Tables[nIdxTable++].TableName = "Mst_Brand";
                }
                CmUtils.DataUtils.MoveDataTable(ref mdsFinal, ref dsGetData);
                #endregion

                // Return Good:
                TDALUtils.DBUtils.RollbackSafety(_cf.db); // Always Rollback.
                mdsFinal.AcceptChanges();
                return mdsFinal;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Rollback:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);

                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsFinal
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Rollback and Release resources:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);
                TDALUtils.DBUtils.ReleaseAllSemaphore(_cf.db_Sys, true);

                // Write ReturnLog:
                _cf.ProcessBizReturn_OutSide(
                    ref mdsFinal // mdsFinal
                    , strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    );
                #endregion
            }
        }
        public DataSet Mst_Brand_Create(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            ////
            , object objOrgID
            , object objBrandCode
            , object objBrandName
            , object objNetworkBrandCode
            , object objRemark
            )
        {
            #region // Temp:
            DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            //int nTidSeq = 0;
            DateTime dtimeSys = DateTime.UtcNow;
            string strFunctionName = "Mst_Brand_Create";
            string strErrorCodeDefault = TError.ErridnInventory.Mst_Brand_Create;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
                ////
				, "objOrgID", objOrgID
                , "objBrandCode", objBrandCode
                , "objBrandName", objBrandName
                , "objNetworkBrandCode", objNetworkBrandCode
                , "objRemark", objRemark
                });
            #endregion

            try
            {
                #region // Convert Input:
                #endregion

                #region // Init:
                //_cf.db.LogUserId = _cf.sinf.strUserCode;
                _cf.db.BeginTransaction();

                // Write RequestLog:
                _cf.ProcessBizReq_OutSide(
                    strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    , alParamsCoupleError // alParamsCoupleError
                    );

                // Sys_User_CheckAuthentication:
                //Sys_User_CheckAuthentication(
                //    ref alParamsCoupleError
                //    , strWAUserCode
                //    , strWAUserPassword
                //    );

                // Check Access/Deny:
                //Sys_Access_CheckDenyV30(
                //    ref alParamsCoupleError
                //    , strWAUserCode
                //    , strFunctionName
                //    );
                #endregion

                #region // Refine and Check Input:
                ////
                ////
                string strOrgID = TUtils.CUtils.StdParam(objOrgID);
                string strBrandCode = TUtils.CUtils.StdParam(objBrandCode);
                string strBrandName = string.Format("{0}", objBrandName).Trim();
                string strNetworkBrandCode = TUtils.CUtils.StdParam(objNetworkBrandCode);
                string strRemark = string.Format("{0}", objRemark).Trim();

                // drAbilityOfUser:
                //DataRow drAbilityOfUser = Sys_User_GetAbilityViewOfUser(strWAUserCode);
                ////
                DataTable dtDB_Mst_Brand = null;
                {
                    ////
                    if (strBrandCode == null || strBrandCode.Length < 1)
                    {
                        alParamsCoupleError.AddRange(new object[]{
                            "Check.strBrandCode", strBrandCode
                            });
                        throw CmUtils.CMyException.Raise(
                            TError.ErridnInventory.Mst_Brand_Create_InvalidBrandCode
                            , null
                            , alParamsCoupleError.ToArray()
                            );
                    }
                    Mst_Brand_CheckDB(
                        ref alParamsCoupleError // alParamsCoupleError
                        , strOrgID // objOrgID
                        , strBrandCode // objBrandCode
                        , TConst.Flag.No // strFlagExistToCheck
                        , "" // strFlagActiveListToCheck
                        , out dtDB_Mst_Brand // dtDB_Mst_Brand
                        );
                    ////
                    if (strBrandName.Length < 1)
                    {
                        alParamsCoupleError.AddRange(new object[]{
                            "Check.strBrandName", strBrandName
                            });
                        throw CmUtils.CMyException.Raise(
                            TError.ErridnInventory.Mst_Brand_Create_InvalidBrandName
                            , null
                            , alParamsCoupleError.ToArray()
                            );
                    }
                    /////
                    if (CmUtils.StringUtils.StringEqualIgnoreCase(nNetworkID, strOrgID)) strNetworkBrandCode = strBrandCode;
                    // Check : Check tồn tại trong list Mã Brand của Org cha
                    if (!string.IsNullOrEmpty(strNetworkBrandCode))
                    {
                        ////
                        myCommon_CheckOrgParent(
                            ref alParamsCoupleError // alParamsCoupleError
                            , nNetworkID // nNetworkID
                            , strOrgID_Login // strOrgID
                            );
                        ////
                        Mst_Brand_CheckDB_NetworkBrandCodeOfOrgParent(
                            ref alParamsCoupleError // alParamsCoupleError
                            , nNetworkID // nNetworkID
                            , strOrgID // strOrgID
                            , strBrandCode // strBrandCode
                            , strNetworkBrandCode // strNetworkBrandCode
                            );
                        ////
                        //Mst_Brand_CheckDB_ExistNetworkBrandCode(
                        //    ref alParamsCoupleError
                        //    , nNetworkID // nNetworkID
                        //    , strNetworkBrandCode // strNetworkBrandCode
                        //    );
                    }
                    ////
                }
                #endregion

                #region // SaveDB Mst_Brand:
                {
                    // Init:
                    //ArrayList alColumnEffective = new ArrayList();
                    string strFN = "";
                    DataRow drDB = dtDB_Mst_Brand.NewRow();
                    strFN = "OrgID"; drDB[strFN] = strOrgID;
                    strFN = "BrandCode"; drDB[strFN] = strBrandCode;
                    strFN = "NetworkID"; drDB[strFN] = nNetworkID;
                    strFN = "BrandName"; drDB[strFN] = strBrandName;
                    strFN = "NetworkBrandCode"; drDB[strFN] = strNetworkBrandCode;
                    strFN = "Remark"; drDB[strFN] = strRemark;
                    strFN = "FlagActive"; drDB[strFN] = TConst.Flag.Active;
                    strFN = "LogLUDTimeUTC"; drDB[strFN] = dtimeSys.ToString("yyyy-MM-dd HH:mm:ss");
                    strFN = "LogLUBy"; drDB[strFN] = strWAUserCode;
                    dtDB_Mst_Brand.Rows.Add(drDB);

                    // Save:
                    _cf.db.SaveData(
                        "Mst_Brand"
                        , dtDB_Mst_Brand
                        //, alColumnEffective.ToArray()
                        );
                }
                #endregion

                // Return Good:
                TDALUtils.DBUtils.CommitSafety(_cf.db);
                mdsFinal.AcceptChanges();
                return mdsFinal;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Rollback:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);

                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsFinal
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Rollback and Release resources:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);
                TDALUtils.DBUtils.ReleaseAllSemaphore(_cf.db_Sys, true);

                // Write ReturnLog:
                _cf.ProcessBizReturn_OutSide(
                    ref mdsFinal // mdsFinal
                    , strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    );
                #endregion
            }
        }
        public DataSet Mst_Brand_Update(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            ////
            , object objOrgID
            , object objBrandCode
            , object objBrandName
            , object objNetworkBrandCode
            , object objRemark
            , object objFlagActive
            ////
            , object objFt_Cols_Upd
            )
        {
            #region // Temp:
            DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            //int nTidSeq = 0;
            DateTime dtimeSys = DateTime.UtcNow;
            string strFunctionName = "Mst_Brand_Update";
            string strErrorCodeDefault = TError.ErridnInventory.Mst_Brand_Update;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
				, "objOrgID", objOrgID
                , "objBrandCode", objBrandCode
                , "objBrandName", objBrandName
                , "objNetworkBrandCode", objNetworkBrandCode
                , "objRemark", objRemark
                , "objFlagActive", objFlagActive
				////
				, "objFt_Cols_Upd", objFt_Cols_Upd
                });
            #endregion

            try
            {
                #region // Convert Input:
                #endregion

                #region // Init:
                //_cf.db.LogUserId = _cf.sinf.strUserCode;
                _cf.db.BeginTransaction();

                // Write RequestLog:
                _cf.ProcessBizReq_OutSide(
                    strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    , alParamsCoupleError // alParamsCoupleError
                    );

                // Sys_User_CheckAuthentication:
                //Sys_User_CheckAuthentication(
                //    ref alParamsCoupleError
                //    , strWAUserCode
                //    , strWAUserPassword
                //    );

                // Check Access/Deny:
                //Sys_Access_CheckDenyV30(
                //    ref alParamsCoupleError
                //    , strWAUserCode
                //    , strFunctionName
                //    );
                #endregion

                #region // Refine and Check Input:
                ////
                string strFt_Cols_Upd = TUtils.CUtils.StdParam(objFt_Cols_Upd);
                strFt_Cols_Upd = (strFt_Cols_Upd == null ? "" : strFt_Cols_Upd);
                ////
                string strOrgID = TUtils.CUtils.StdParam(objOrgID);
                string strBrandCode = TUtils.CUtils.StdParam(objBrandCode);
                string strBrandName = string.Format("{0}", objBrandName).Trim();
                string strNetworkBrandCode = TUtils.CUtils.StdParam(objNetworkBrandCode);
                string strRemark = string.Format("{0}", objRemark).Trim();
                string strFlagActive = TUtils.CUtils.StdFlag(objFlagActive);
                ////
                bool bUpd_BrandName = strFt_Cols_Upd.Contains("Mst_Brand.BrandName".ToUpper());
                bool bUpd_NetworkBrandCode = strFt_Cols_Upd.Contains("Mst_Brand.NetworkBrandCode".ToUpper());
                bool bUpd_Remark = strFt_Cols_Upd.Contains("Mst_Brand.Remark".ToUpper());
                bool bUpd_FlagActive = strFt_Cols_Upd.Contains("Mst_Brand.FlagActive".ToUpper());

                ////
                DataTable dtDB_Mst_Brand = null;
                {
                    ////
                    Mst_Brand_CheckDB(
                         ref alParamsCoupleError // alParamsCoupleError
                         , strOrgID // strOrgID
                         , strBrandCode // objBrandCode 
                         , TConst.Flag.Yes // strFlagExistToCheck
                         , "" // strFlagActiveListToCheck
                         , out dtDB_Mst_Brand // dtDB_Mst_Brand
                        );
                    ////
                    if (bUpd_BrandName && string.IsNullOrEmpty(strBrandName))
                    {
                        alParamsCoupleError.AddRange(new object[]{
                            "Check.strBrandName", strBrandName
                            });
                        throw CmUtils.CMyException.Raise(
                            TError.ErridnInventory.Mst_Brand_Update_InvalidBrandName
                            , null
                            , alParamsCoupleError.ToArray()
                            );
                    }
                    ////
                    if (CmUtils.StringUtils.StringEqualIgnoreCase(nNetworkID, objOrgID)) strNetworkBrandCode = strBrandCode;
                    // Check : Check tồn tại trong list Mã Brand của Org cha
                    if (bUpd_NetworkBrandCode && !string.IsNullOrEmpty(strNetworkBrandCode))
                    {
                        ////
                        myCommon_CheckOrgParent(
                            ref alParamsCoupleError // alParamsCoupleError
                            , nNetworkID // nNetworkID
                            , strOrgID_Login // strOrgID
                            );
                        /////
                        Mst_Brand_CheckDB_NetworkBrandCodeOfOrgParent(
                            ref alParamsCoupleError // alParamsCoupleError
                            , nNetworkID // nNetworkID
                            , strOrgID // strOrgID
                            , strBrandCode // strBrandCode
                            , strNetworkBrandCode // strNetworkBrandCode
                            );
                        ////
                        //Mst_Brand_CheckDB_ExistNetworkBrandCode(
                        //    ref alParamsCoupleError
                        //    , nNetworkID // nNetworkID
                        //    , strNetworkBrandCode // strNetworkBrandCode
                        //    );
                    }
                    ////
                }
                #endregion

                #region // SaveDB Mst_Brand:
                {
                    // Init:
                    ArrayList alColumnEffective = new ArrayList();
                    string strFN = "";
                    DataRow drDB = dtDB_Mst_Brand.Rows[0];
                    if (bUpd_BrandName) { strFN = "BrandName"; drDB[strFN] = strBrandName; alColumnEffective.Add(strFN); }
                    if (bUpd_NetworkBrandCode) { strFN = "NetworkBrandCode"; drDB[strFN] = strNetworkBrandCode; alColumnEffective.Add(strFN); }
                    if (bUpd_Remark) { strFN = "Remark"; drDB[strFN] = strRemark; alColumnEffective.Add(strFN); }
                    if (bUpd_FlagActive) { strFN = "FlagActive"; drDB[strFN] = strFlagActive; alColumnEffective.Add(strFN); }
                    strFN = "LogLUDTimeUTC"; drDB[strFN] = dtimeSys.ToString("yyyy-MM-dd HH:mm:ss"); alColumnEffective.Add(strFN);
                    strFN = "LogLUBy"; drDB[strFN] = strWAUserCode; alColumnEffective.Add(strFN);

                    // Save:
                    _cf.db.SaveData(
                        "Mst_Brand"
                        , dtDB_Mst_Brand
                        , alColumnEffective.ToArray()
                        );
                }
                #endregion

                // Return Good:
                TDALUtils.DBUtils.CommitSafety(_cf.db);
                mdsFinal.AcceptChanges();
                return mdsFinal;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Rollback:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);

                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsFinal
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Rollback and Release resources:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);
                TDALUtils.DBUtils.ReleaseAllSemaphore(_cf.db_Sys, true);

                // Write ReturnLog:
                _cf.ProcessBizReturn_OutSide(
                    ref mdsFinal // mdsFinal
                    , strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    );
                #endregion
            }
        }
        public DataSet Mst_Brand_Delete(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            /////
            , object objOrgID
            , object objBrandCode
            )
        {
            #region // Temp:
            DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            //int nTidSeq = 0;
            DateTime dtimeSys = DateTime.UtcNow;
            string strFunctionName = "Mst_Brand_Delete";
            string strErrorCodeDefault = TError.ErridnInventory.Mst_Brand_Delete;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
				, "objOrgID", objOrgID
                , "objBrandCode", objBrandCode
                });
            #endregion

            try
            {
                #region // Init:
                //_cf.db.LogUserId = _cf.sinf.strUserCode;
                _cf.db.BeginTransaction();

                // Write RequestLog:
                _cf.ProcessBizReq_OutSide(
                    strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    , alParamsCoupleError // alParamsCoupleError
                    );

                // Sys_User_CheckAuthentication:
                //Sys_User_CheckAuthentication(
                //    ref alParamsCoupleError
                //    , strWAUserCode
                //    , strWAUserPassword
                //    );

                // Check Access/Deny:
                //Sys_Access_CheckDenyV30(
                //    ref alParamsCoupleError
                //    , strWAUserCode
                //    , strFunctionName
                //    );
                #endregion

                #region // Refine and Check Input:
                ////
                string strOrgID = TUtils.CUtils.StdParam(objOrgID);
                string strBrandCode = TUtils.CUtils.StdParam(objBrandCode);
                ////
                DataTable dtDB_Mst_Brand = null;
                {
                    ////
                    Mst_Brand_CheckDB(
                         ref alParamsCoupleError // alParamsCoupleError
                         , objOrgID // objOrgID
                         , objBrandCode // objBrandCode
                         , TConst.Flag.Yes // strFlagExistToCheck
                         , "" // strFlagActiveListToCheck
                         , out dtDB_Mst_Brand // dtDB_Mst_Brand
                        );
                    ////
                }
                #endregion

                #region // SaveDB Mst_Brand:
                {
                    // Init:
                    dtDB_Mst_Brand.Rows[0].Delete();

                    // Save:
                    _cf.db.SaveData(
                        "Mst_Brand"
                        , dtDB_Mst_Brand
                        );
                }
                #endregion

                // Return Good:
                TDALUtils.DBUtils.CommitSafety(_cf.db);
                mdsFinal.AcceptChanges();
                return mdsFinal;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Rollback:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);

                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsFinal
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Rollback and Release resources:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);
                TDALUtils.DBUtils.ReleaseAllSemaphore(_cf.db_Sys, true);

                // Write ReturnLog:
                _cf.ProcessBizReturn_OutSide(
                    ref mdsFinal // mdsFinal
                    , strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    );
                #endregion
            }
        }

        public DataSet WAS_Mst_Brand_Get(
            ref ArrayList alParamsCoupleError
            , RQ_Mst_Brand objRQ_Mst_Brand
            ////
            , out RT_Mst_Brand objRT_Mst_Brand
            )
        {
            #region // Temp:
            string strTid = objRQ_Mst_Brand.Tid;
            objRT_Mst_Brand = new RT_Mst_Brand();
            DataSet mdsResult = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            DateTime dtimeSys = DateTime.UtcNow;
            //DataSet mdsExec = null;
            //DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(objRQ_Mst_Brand.Tid);
            //int nTidSeq = 0;
            //bool bNeedTransaction = true;
            string strFunctionName = "WAS_Mst_Brand_Get";
            string strErrorCodeDefault = TError.ErridnInventory.WAS_Mst_Brand_Get;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
				});
            #endregion

            try
            {
                #region // Init:
                #endregion

                #region // Refine and Check Input:
                List<MySummaryTable> lst_MySummaryTable = new List<MySummaryTable>();

                List<Mst_Brand> lst_Mst_Brand = new List<Mst_Brand>();
                bool bGet_Mst_Brand = (objRQ_Mst_Brand.Rt_Cols_Mst_Brand != null && objRQ_Mst_Brand.Rt_Cols_Mst_Brand.Length > 0);
                strOrgID_Login = objRQ_Mst_Brand.OrgID;
                #endregion

                #region // WS_Mst_Brand_Get:
                mdsResult = Mst_Brand_Get(
                    objRQ_Mst_Brand.Tid // strTid
                    , objRQ_Mst_Brand.GwUserCode // strGwUserCode
                    , objRQ_Mst_Brand.GwPassword // strGwPassword
                    , objRQ_Mst_Brand.WAUserCode // strUserCode
                    , objRQ_Mst_Brand.WAUserPassword // strUserPassword
                    , objRQ_Mst_Brand.AccessToken // strAccessToken
					, objRQ_Mst_Brand.NetworkID // strNetworkID
					, objRQ_Mst_Brand.OrgID // strOrgID
					, ref alParamsCoupleError // alParamsCoupleError
                                              //// Filter:
                    , objRQ_Mst_Brand.Ft_RecordStart // strFt_RecordStart
                    , objRQ_Mst_Brand.Ft_RecordCount // strFt_RecordCount
                    , objRQ_Mst_Brand.Ft_WhereClause // strFt_WhereClause
                                                     //// Return:
                    , objRQ_Mst_Brand.Rt_Cols_Mst_Brand // strRt_Cols_Mst_Brand
                    );
                #endregion

                #region // GetData:
                if (!CmUtils.CMyDataSet.HasError(mdsResult))
                {
                    ////
                    DataTable dt_MySummaryTable = mdsResult.Tables["MySummaryTable"].Copy();
                    lst_MySummaryTable = TUtils.DataTableCmUtils.ToListof<MySummaryTable>(dt_MySummaryTable);
                    objRT_Mst_Brand.MySummaryTable = lst_MySummaryTable[0];

                    ////
                    if (bGet_Mst_Brand)
                    {
                        ////
                        DataTable dt_Mst_Brand = mdsResult.Tables["Mst_Brand"].Copy();
                        lst_Mst_Brand = TUtils.DataTableCmUtils.ToListof<Mst_Brand>(dt_Mst_Brand);
                        objRT_Mst_Brand.Lst_Mst_Brand = lst_Mst_Brand;
                    }
                }
                #endregion

                // Return Good:
                return mdsResult;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsResult
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Write ReturnLog:
                //_cf.ProcessBizReturn(
                //	ref mdsResult // mdsFinal
                //	, strTid // strTid
                //	, strFunctionName // strFunctionName
                //	);
                #endregion
            }
        }

        public DataSet WAS_Mst_Brand_Create(
            ref ArrayList alParamsCoupleError
            , RQ_Mst_Brand objRQ_Mst_Brand
            ////
            , out RT_Mst_Brand objRT_Mst_Brand
            )
        {
            #region // Temp:
            string strTid = objRQ_Mst_Brand.Tid;
            objRT_Mst_Brand = new RT_Mst_Brand();
            DataSet mdsResult = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            DateTime dtimeSys = DateTime.UtcNow;
            //DataSet mdsExec = null;
            //DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(objRQ_Mst_Brand.Tid);
            //int nTidSeq = 0;
            //bool bNeedTransaction = true;
            string strFunctionName = "WAS_Mst_Brand_Create";
            string strErrorCodeDefault = TError.ErridnInventory.WAS_Mst_Brand_Create;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
                , "Mst_Brand", TJson.JsonConvert.SerializeObject(objRQ_Mst_Brand.Mst_Brand)
				////
				});
            #endregion

            try
            {
                #region // Init:
                #endregion

                #region // Refine and Check Input:
                //List<Mst_Brand> lst_Mst_Brand = new List<Mst_Brand>();
                //List<Mst_BrandInGroup> lst_Mst_BrandInGroup = new List<Mst_BrandInGroup>();
                strOrgID_Login = objRQ_Mst_Brand.OrgID;
                #endregion

                #region // Mst_Brand_Create:
                mdsResult = Mst_Brand_Create(
                    objRQ_Mst_Brand.Tid // strTid
                    , objRQ_Mst_Brand.GwUserCode // strGwUserCode
                    , objRQ_Mst_Brand.GwPassword // strGwPassword
                    , objRQ_Mst_Brand.WAUserCode // strUserCode
                    , objRQ_Mst_Brand.WAUserPassword // strUserPassword
                    , ref alParamsCoupleError // alParamsCoupleError
                                              ////
                    , objRQ_Mst_Brand.Mst_Brand.OrgID // objOrgID
                    , objRQ_Mst_Brand.Mst_Brand.BrandCode // objBrandCode
                    , objRQ_Mst_Brand.Mst_Brand.BrandName // objBrandName
                    , objRQ_Mst_Brand.Mst_Brand.NetworkBrandCode // objNetworkBrandCode
                    , objRQ_Mst_Brand.Mst_Brand.Remark // objRemark
                    );
                #endregion

                // Return Good:
                return mdsResult;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsResult
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Write ReturnLog:
                //_cf.ProcessBizReturn(
                //	ref mdsResult // mdsFinal
                //	, strTid // strTid
                //	, strFunctionName // strFunctionName
                //	);
                #endregion
            }
        }

        public DataSet WAS_Mst_Brand_Update(
            ref ArrayList alParamsCoupleError
            , RQ_Mst_Brand objRQ_Mst_Brand
            ////
            , out RT_Mst_Brand objRT_Mst_Brand
            )
        {
            #region // Temp:
            string strTid = objRQ_Mst_Brand.Tid;
            objRT_Mst_Brand = new RT_Mst_Brand();
            DataSet mdsResult = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            DateTime dtimeSys = DateTime.UtcNow;
            //DataSet mdsExec = null;
            //DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(objRQ_Mst_Brand.Tid);
            //int nTidSeq = 0;
            //bool bNeedTransaction = true;
            string strFunctionName = "WAS_Mst_Brand_Update";
            string strErrorCodeDefault = TError.ErridnInventory.WAS_Mst_Brand_Update;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
                , "Mst_Brand", TJson.JsonConvert.SerializeObject(objRQ_Mst_Brand.Mst_Brand)
				////
				});
            #endregion

            try
            {
                #region // Init:
                #endregion

                #region // Refine and Check Input:
                //List<Mst_Brand> lst_Mst_Brand = new List<Mst_Brand>();
                //List<Mst_BrandInGroup> lst_Mst_BrandInGroup = new List<Mst_BrandInGroup>();
                strOrgID_Login = objRQ_Mst_Brand.OrgID;
                #endregion

                #region // Mst_Brand_Update:
                mdsResult = Mst_Brand_Update(
                    objRQ_Mst_Brand.Tid // strTid
                    , objRQ_Mst_Brand.GwUserCode // strGwUserCode
                    , objRQ_Mst_Brand.GwPassword // strGwPassword
                    , objRQ_Mst_Brand.WAUserCode // strUserCode
                    , objRQ_Mst_Brand.WAUserPassword // strUserPassword
                    , ref alParamsCoupleError // alParamsCoupleError
                                              ////
                    , objRQ_Mst_Brand.Mst_Brand.OrgID // objOrgID
                    , objRQ_Mst_Brand.Mst_Brand.BrandCode // objBrandCode
                    , objRQ_Mst_Brand.Mst_Brand.BrandName // objBrandName
                    , objRQ_Mst_Brand.Mst_Brand.NetworkBrandCode // objNetworkBrandCode
                    , objRQ_Mst_Brand.Mst_Brand.Remark // objRemark
                    , objRQ_Mst_Brand.Mst_Brand.FlagActive // objFlagActive
                                                           ////
                    , objRQ_Mst_Brand.Ft_Cols_Upd// objFt_Cols_Upd
                    );
                #endregion

                // Return Good:
                return mdsResult;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsResult
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Write ReturnLog:
                //_cf.ProcessBizReturn(
                //	ref mdsResult // mdsFinal
                //	, strTid // strTid
                //	, strFunctionName // strFunctionName
                //	);
                #endregion
            }
        }

        public DataSet WAS_Mst_Brand_Delete(
            ref ArrayList alParamsCoupleError
            , RQ_Mst_Brand objRQ_Mst_Brand
            ////
            , out RT_Mst_Brand objRT_Mst_Brand
            )
        {
            #region // Temp:
            string strTid = objRQ_Mst_Brand.Tid;
            objRT_Mst_Brand = new RT_Mst_Brand();
            DataSet mdsResult = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            DateTime dtimeSys = DateTime.UtcNow;
            //DataSet mdsExec = null;
            //DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(objRQ_Mst_Brand.Tid);
            //int nTidSeq = 0;
            //bool bNeedTransaction = true;
            string strFunctionName = "WAS_Mst_Brand_Delete";
            string strErrorCodeDefault = TError.ErridnInventory.WAS_Mst_Brand_Delete;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				//, "Mst_Brand", TJson.JsonConvert.SerializeObject(objRQ_Mst_Brand.Mst_Brand)
				////
				});
            #endregion

            try
            {
                #region // Init:
                #endregion

                #region // Refine and Check Input:
                //List<Mst_Brand> lst_Mst_Brand = new List<Mst_Brand>();
                //List<Mst_BrandInGroup> lst_Mst_BrandInGroup = new List<Mst_BrandInGroup>();
                strOrgID_Login = objRQ_Mst_Brand.OrgID;
                #endregion

                #region // Mst_Brand_Delete:
                mdsResult = Mst_Brand_Delete(
                    objRQ_Mst_Brand.Tid // strTid
                    , objRQ_Mst_Brand.GwUserCode // strGwUserCode
                    , objRQ_Mst_Brand.GwPassword // strGwPassword
                    , objRQ_Mst_Brand.WAUserCode // strUserCode
                    , objRQ_Mst_Brand.WAUserPassword // strUserPassword
                    , ref alParamsCoupleError // alParamsCoupleError
                                              ////
                    , objRQ_Mst_Brand.Mst_Brand.OrgID // objOrgID
                    , objRQ_Mst_Brand.Mst_Brand.BrandCode // objBrandCode
                    );
                #endregion

                // Return Good:
                return mdsResult;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsResult
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Write ReturnLog:
                //_cf.ProcessBizReturn(
                //	ref mdsResult // mdsFinal
                //	, strTid // strTid
                //	, strFunctionName // strFunctionName
                //	);
                #endregion
            }
        }

        public void Mst_Brand_SaveX(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            , DateTime dtimeSys
            ////
            , object objFlagIsDelete
            , DataSet dsData
            )
        {
            #region // Temp:
            //int nTidSeq = 0;
            //bool bMyDebugSql = false;
            string strFunctionName = "Mst_Brand_SaveX";
            //string strErrorCodeDefault = TError.ErridNTVAN.Mst_Brand_SaveAllX;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
                ////
                , "objFlagIsDelete",objFlagIsDelete
				////
                });
            //ArrayList alPCErrEx = new ArrayList();
            ////
            Hashtable htParamsSql = new Hashtable();
            #endregion

            #region // Convert Input:
            //DataSet dsData = TUtils.CUtils.StdDS(arrobjDSData);
            //if (dsData == null) dsData = new DataSet("dsData");
            //dsData.AcceptChanges();
            alParamsCoupleError.AddRange(new object[]{
                "Check.dsData", CmUtils.XmlUtils.DataSet2XmlSimple(dsData)
                });
            #endregion

            #region // Refine and Check Input:
            ////
            bool bIsDelete = CmUtils.StringUtils.StringEqual(objFlagIsDelete, TConst.Flag.Yes);
            ////
            #endregion

            #region // Refine and Check Input Mst_Brand:
            ////

            ////
            DataTable dtInput_Mst_Brand = null;
            {
                ////
                string strTableCheck = "Mst_Brand";
                ////
                if (!dsData.Tables.Contains(strTableCheck))
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.TableName", strTableCheck
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Mst_Brand_SaveX_Input_BrandTblNotFound
                        , null
                        , alParamsCoupleError.ToArray()
                        );
                }
                dtInput_Mst_Brand = dsData.Tables[strTableCheck];
                ////
                if (dtInput_Mst_Brand.Rows.Count < 1)
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.TableName", strTableCheck
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Mst_Brand_SaveX_Input_BrandTblInvalid
                        , null
                        , alParamsCoupleError.ToArray()
                        );
                }
                ////
                TUtils.CUtils.StdDataInTable(
                    dtInput_Mst_Brand // dtData
                    , "StdParam", "OrgID" // arrstrCouple
                    , "StdParam", "BrandCode" // arrstrCouple
                    , "StdParam", "NetworkID" // arrstrCouple
                    , "", "BrandName" // arrstrCouple
                    , "", "NetworkBrandCode" // arrstrCouple
                    , "", "Remark" // arrstrCouple
                    , "StdFlag", "FlagActive" // arrstrCouple
                    , "StdDate", "LogLUDTimeUTC" // arrstrCouple
                    , "", "LogLUBy" // arrstrCouple
                    );
                ////
                
                ////
            }
            #endregion

            #region //// SaveTemp Invoice_Invoice For Check:
            //if (!bIsDelete)
            {
                // Upload:
                TUtils.CUtils.MyBuildDBDT_Common(
                    _cf.db // db
                    , "#input_Mst_Brand" // strTableName
                    , new object[] {
                            "OrgID", TConst.BizMix.Default_DBColType
                            , "BrandCode", TConst.BizMix.Default_DBColType
                            , "NetworkID", TConst.BizMix.Default_DBColType
                            , "BrandName", TConst.BizMix.Default_DBColType
                            , "NetworkBrandCode", TConst.BizMix.Default_DBColType
                            , "Remark", TConst.BizMix.Default_DBColType
                            , "FlagActive", TConst.BizMix.Default_DBColType
                            , "LogLUDTimeUTC", TConst.BizMix.Default_DBColType
                            , "LogLUBy", TConst.BizMix.Default_DBColType
                        } // arrSingleStructure
                    , dtInput_Mst_Brand // dtData
                );
            }
            #endregion

            #region // SaveDB:
            {
                //// Clear All:
                {
                    string strSqlDelete = CmUtils.StringUtils.Replace(@"
                                ---- Mst_Brand:
							    delete t
							    from Mst_Brand t --//[mylock]
								    inner join #input_Mst_Brand f --//[mylock]
									    on t.OrgID = f.OrgID
                                            and t.BrandCode = f.BrandCode
							    where (1=1)
							    ;
						");
                    _cf.db.ExecQuery(
                        strSqlDelete
                        );
                }

                //// Insert All:
                if (!bIsDelete)
                {
                    #region // Insert:
                    {

                        ////
                        string zzzzClauseInsert_Mst_Brand_zSave = CmUtils.StringUtils.Replace(@"
                                insert into Mst_Brand
                                (
                                    OrgID
                                    , BrandCode
                                    , NetworkID
                                    , BrandName
                                    , NetworkBrandCode
                                    , Remark
                                    , FlagActive
                                    , LogLUDTimeUTC
                                    , LogLUBy
                                )
                                select
                                    t.OrgID
                                    , t.BrandCode
                                    , t.NetworkID
                                    , t.BrandName
                                    , t.NetworkBrandCode
                                    , t.Remark
                                    , t.FlagActive
                                    , t.LogLUDTimeUTC
                                    , t.LogLUBy
                                from #input_Mst_Brand t --//[mylock]
                                ;
                            ");

                        /////

                        string strSqlExec = CmUtils.StringUtils.Replace(@"
								----
								zzzzClauseInsert_Mst_Brand_zSave
							"
                            , "zzzzClauseInsert_Mst_Brand_zSave", zzzzClauseInsert_Mst_Brand_zSave
                            );
                        ////
                        DataSet dsExec = _cf.db.ExecQuery(strSqlExec);
                        ////
                    }
                    #endregion

                    #region //// Clear For Debug:
                    if (!bIsDelete)
                    {
                        ////
                        string strSqlClearForDebug = CmUtils.StringUtils.Replace(@"
						        ---- Clear for Debug:
						        drop table #input_Mst_Brand;
					        ");

                        _cf.db.ExecQuery(
                            strSqlClearForDebug
                            );
                        ////
                    }
                    else
                    {
                        ////
                        string strSqlClearForDebug = CmUtils.StringUtils.Replace(@"
						        ---- Clear for Debug:
						        drop table #input_Mst_Brand;
					        ");

                        _cf.db.ExecQuery(
                            strSqlClearForDebug
                            );
                        ////

                    }
                    #endregion
                }
            }
            #endregion
        }

        public DataSet Mst_Brand_Save(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            ////
            , object objFlagIsDelete
            ////
            , DataSet dsData
            )
        {
            #region // Temp:
            DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            //int nTidSeq = 0;
            DateTime dtimeSys = DateTime.UtcNow;
            string strFunctionName = "Invoice_Invoice_Save_Root";
            string strErrorCodeDefault = TError.ErridnInventory.Mst_Brand_Save;
            ArrayList alParamsCoupleSW = new ArrayList();
            alParamsCoupleError.AddRange(new object[]{
                    "strFunctionName", strFunctionName
                    , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
                    /////
                    , "objFlagIsDelete", objFlagIsDelete
			        ////
                    });
            #endregion

            try
            {
                #region // Init:
                //_cf.db.LogUserId = _cf.sinf.strUserCode;
                _cf.db.BeginTransaction();

                // Write RequestLog:
                _cf.ProcessBizReq_OutSide(
                    strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    , alParamsCoupleError // alParamsCoupleError
                    );

                // Sys_User_CheckAuthentication:
                //Sys_User_CheckAuthentication(
                //    ref alParamsCoupleError
                //    , strWAUserCode
                //    , strWAUserPassword
                //    );

                // Check Access/Deny:
                //Sys_Access_CheckDenyV30(
                //    ref alParamsCoupleError
                //    , strWAUserCode
                //    , strFunctionName
                //    );
                #endregion

                #region // Invoice_Invoice_SaveX:
                //DataSet dsGetData = null;
                {
                    Mst_Brand_SaveX(
                        strTid // strTid
                        , strGwUserCode // strGwUserCode
                        , strGwPassword // strGwPassword
                        , strWAUserCode // strWAUserCode
                        , strWAUserPassword // strWAUserPassword
                        , ref alParamsCoupleError // alParamsCoupleError
                        , dtimeSys // dtimeSys
                                   ////
                        , objFlagIsDelete // objFlagIsDelete
                        ////
                        , dsData // dsData
                        );
                }
                ////
                //CmUtils.DataUtils.MoveDataTable(ref mdsFinal, ref dsGetData);
                #endregion

                // Return Good:
                TDALUtils.DBUtils.CommitSafety(_cf.db);
                mdsFinal.AcceptChanges();
                return mdsFinal;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Rollback:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);

                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsFinal
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Rollback and Release resources:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);
                TDALUtils.DBUtils.ReleaseAllSemaphore(_cf.db_Sys, true);

                // Write ReturnLog:
                _cf.ProcessBizReturn_OutSide(
                    ref mdsFinal // mdsFinal
                    , strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    , alParamsCoupleSW // alParamsCoupleSW
                    );
                #endregion
            }
        }

        public DataSet WAS_Mst_Brand_Save(
            ref ArrayList alParamsCoupleError
            , RQ_Mst_Brand objRQ_Mst_Brand
            ////
            , out RT_Mst_Brand objRT_Mst_Brand
            )
        {
            #region // Temp:
            string strTid = objRQ_Mst_Brand.Tid;
            objRT_Mst_Brand = new RT_Mst_Brand();
            DataSet mdsResult = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            DateTime dtimeSys = DateTime.UtcNow;
            //DataSet mdsExec = null;
            //DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(objRQ_Mst_Brand.Tid);
            //int nTidSeq = 0;
            //bool bNeedTransaction = true;
            string strFunctionName = "WAS_Mst_Brand_Save_Root";
            string strErrorCodeDefault = TError.ErridnInventory.WAS_Mst_Brand_Save;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
                , "FlagIsDelete", objRQ_Mst_Brand.FlagIsDelete
                , "Lst_Mst_Brand", TJson.JsonConvert.SerializeObject(objRQ_Mst_Brand.Lst_Mst_Brand)
                });
            #endregion

            try
            {
                #region // Init:
                #endregion

                #region // Refine and Check Input:
                List<Mst_Brand> lst_Mst_Brand = new List<Mst_Brand>();
                #endregion

                #region // Refine and Check Input:
                ////
                DataSet dsData = new DataSet();
                {
                    ////
                    DataTable dt_Mst_Brand = TUtils.DataTableCmUtils.ToDataTable<Mst_Brand>(objRQ_Mst_Brand.Lst_Mst_Brand, "Mst_Brand");
                    dsData.Tables.Add(dt_Mst_Brand);
                    ////
                }
                #endregion

                #region // WS_Mst_Brand_Create: 
                // Mst_Brand_Save_Root_New20190704
                mdsResult = Mst_Brand_Save(
                    objRQ_Mst_Brand.Tid // strTid
                    , objRQ_Mst_Brand.GwUserCode // strGwUserCode
                    , objRQ_Mst_Brand.GwPassword // strGwPassword
                    , objRQ_Mst_Brand.WAUserCode // strUserCode
                    , objRQ_Mst_Brand.WAUserPassword // strUserPassword
                    , ref alParamsCoupleError // alParamsCoupleError
                    ////
                    , objRQ_Mst_Brand.FlagIsDelete // objFlagIsDelete
                    ////
                    , dsData // dsData
                    );
                #endregion

                // Return Good:
                return mdsResult;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsResult
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Write ReturnLog:
                //_cf.ProcessBizReturn(
                //	ref mdsResult // mdsFinal
                //	, strTid // strTid
                //	, strFunctionName // strFunctionName
                //	);
                #endregion
            }
        }
        #endregion

        #region // Mst_NotifyType:
        private void Mst_NotifyType_CheckDB(
            ref ArrayList alParamsCoupleError
            , object objNotifyType
            , string strFlagExistToCheck
            , string strFlagActiveListToCheck
            , out DataTable dtDB_Mst_NotifyType
            )
        {
            // GetInfo:
            string strSqlExec = CmUtils.StringUtils.Replace(@"
					select top 1
						t.*
					from Mst_NotifyType t --//[mylock]
					where (1=1)
						and t.NotifyType = @objNotifyType
					;
				");
            dtDB_Mst_NotifyType = _cf.db.ExecQuery(
                strSqlExec
                , "@objNotifyType", objNotifyType
                ).Tables[0];
            dtDB_Mst_NotifyType.TableName = "Mst_NotifyType";

            // strFlagExistToCheck:
            if (strFlagExistToCheck.Length > 0)
            {
                if (CmUtils.StringUtils.StringEqual(strFlagExistToCheck, TConst.Flag.Active) && dtDB_Mst_NotifyType.Rows.Count < 1)
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.NotifyType", objNotifyType
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Mst_NotifyType_CheckDB_NotifyTypeFound
                        , null
                        , alParamsCoupleError.ToArray()
                        );
                }
                if (CmUtils.StringUtils.StringEqual(strFlagExistToCheck, TConst.Flag.Inactive) && dtDB_Mst_NotifyType.Rows.Count > 0)
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.NotifyType", objNotifyType
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Mst_NotifyType_CheckDB_NotifyTypeExist
                        , null
                        , alParamsCoupleError.ToArray()
                        );
                }
            }

            // strFlagActiveListToCheck:
            if (strFlagActiveListToCheck.Length > 0 && !strFlagActiveListToCheck.Contains(Convert.ToString(dtDB_Mst_NotifyType.Rows[0]["FlagActive"])))
            {
                alParamsCoupleError.AddRange(new object[]{
                    "Check.NotifyType", objNotifyType
                    , "Check.strFlagActiveListToCheck", strFlagActiveListToCheck
                    , "DB.FlagActive", dtDB_Mst_NotifyType.Rows[0]["FlagActive"]
                    });
                throw CmUtils.CMyException.Raise(
                    TError.ErridnInventory.Mst_NotifyType_CheckDB_FlagActiveNotMatched
                    , null
                    , alParamsCoupleError.ToArray()
                    );
            }
        }

        public DataSet WAS_Mst_NotifyType_Get(
            ref ArrayList alParamsCoupleError
            , RQ_Mst_NotifyType objRQ_Mst_NotifyType
            ////
            , out RT_Mst_NotifyType objRT_Mst_NotifyType
            )
        {
            #region // Temp:
            string strTid = objRQ_Mst_NotifyType.Tid;
            objRT_Mst_NotifyType = new RT_Mst_NotifyType();
            DataSet mdsResult = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            DateTime dtimeSys = DateTime.UtcNow;
            //DataSet mdsExec = null;
            //DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(objRQ_Mst_NotifyType.Tid);
            //int nTidSeq = 0;
            //bool bNeedTransaction = true;
            string strFunctionName = "WAS_Mst_NotifyType_Get";
            string strErrorCodeDefault = TError.ErridnInventory.WAS_Mst_NotifyType_Get;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
				});
            #endregion

            try
            {
                #region // Init:
                #endregion

                #region // Refine and Check Input:
                List<Mst_NotifyType> lst_Mst_NotifyType = new List<Mst_NotifyType>();
                #endregion

                #region // WS_Mst_NotifyType_Get:
                mdsResult = Mst_NotifyType_Get(
                    objRQ_Mst_NotifyType.Tid // strTid
                    , objRQ_Mst_NotifyType.GwUserCode // strGwUserCode
                    , objRQ_Mst_NotifyType.GwPassword // strGwPassword
                    , objRQ_Mst_NotifyType.WAUserCode // strUserCode
                    , objRQ_Mst_NotifyType.WAUserPassword // strUserPassword
                    , ref alParamsCoupleError // alParamsCoupleError
                                              //// Filter:
                    , objRQ_Mst_NotifyType.Ft_RecordStart // strFt_RecordStart
                    , objRQ_Mst_NotifyType.Ft_RecordCount // strFt_RecordCount
                    , objRQ_Mst_NotifyType.Ft_WhereClause // strFt_WhereClause
                                                          //// Return:
                    , objRQ_Mst_NotifyType.Rt_Cols_Mst_NotifyType // strRt_Cols_Mst_NotifyType
                    );
                #endregion

                #region // GetData:
                if (!CmUtils.CMyDataSet.HasError(mdsResult))
                {
                    ////
                    DataTable dt_Mst_NotifyType = mdsResult.Tables["Mst_NotifyType"].Copy();
                    lst_Mst_NotifyType = TUtils.DataTableCmUtils.ToListof<Mst_NotifyType>(dt_Mst_NotifyType);
                    objRT_Mst_NotifyType.Lst_Mst_NotifyType = lst_Mst_NotifyType;
                    /////
                }
                #endregion

                // Return Good:
                return mdsResult;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsResult
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Write ReturnLog:
                //_cf.ProcessBizReturn(
                //	ref mdsResult // mdsFinal
                //	, strTid // strTid
                //	, strFunctionName // strFunctionName
                //	);
                #endregion
            }
        }
        public DataSet Mst_NotifyType_Get(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            //// Filter:
            , string strFt_RecordStart
            , string strFt_RecordCount
            , string strFt_WhereClause
            //// Return:
            , string strRt_Cols_Mst_NotifyType
            )
        {
            #region // Temp:
            DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            //int nTidSeq = 0;
            DateTime dtimeSys = DateTime.UtcNow;
            string strFunctionName = "Mst_NotifyType_Get";
            string strErrorCodeDefault = TError.ErridnInventory.Mst_NotifyType_Get;
            alParamsCoupleError.AddRange(new object[]{
                    "strFunctionName", strFunctionName
                    , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
			        //// Filter
					, "strFt_RecordStart", strFt_RecordStart
                    , "strFt_RecordCount", strFt_RecordCount
                    , "strFt_WhereClause", strFt_WhereClause
			        //// Return
					, "strRt_Cols_Mst_NotifyType", strRt_Cols_Mst_NotifyType
                    });
            #endregion

            try
            {
                #region // Init:
                //_cf.db.LogUserId = _cf.sinf.strUserCode;
                _cf.db.BeginTransaction();

                // Write RequestLog:
                _cf.ProcessBizReq_OutSide(
                    strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    , alParamsCoupleError // alParamsCoupleError
                    );

                // Sys_User_CheckAuthentication:
                //Sys_User_CheckAuthentication(
                //    ref alParamsCoupleError
                //    , strWAUserCode
                //    , strWAUserPassword
                //    );

                // Check Access/Deny:
                //Sys_Access_CheckDenyV30(
                //    ref alParamsCoupleError
                //    , strWAUserCode
                //    , strFunctionName
                //    );
                #endregion

                #region // Mst_NotifyType_GetX:
                DataSet dsGetData = null;
                {
                    Mst_NotifyType_GetX(
                        strTid // strTid
                        , strGwUserCode // strGwUserCode
                        , strGwPassword // strGwPassword
                        , strWAUserCode // strWAUserCode
                        , strWAUserPassword // strWAUserPassword
                        , ref alParamsCoupleError // alParamsCoupleError
                        , dtimeSys // dtimeSys
                                   ////
                        , strFt_RecordStart // strFt_RecordStart
                        , strFt_RecordCount // strFt_RecordCount
                        , strFt_WhereClause // strFt_WhereClause
                                            ////
                        , strRt_Cols_Mst_NotifyType // strRt_Cols_Mst_NotifyType
                        , out dsGetData  // dsGetData
                        );
                }
                ////
                CmUtils.DataUtils.MoveDataTable(ref mdsFinal, ref dsGetData);
                #endregion

                // Return Good:
                TDALUtils.DBUtils.RollbackSafety(_cf.db); // Always Rollback.
                mdsFinal.AcceptChanges();
                return mdsFinal;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Rollback:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);

                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsFinal
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Rollback and Release resources:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);
                TDALUtils.DBUtils.ReleaseAllSemaphore(_cf.db_Sys, true);

                // Write ReturnLog:
                _cf.ProcessBizReturn_OutSide(
                    ref mdsFinal // mdsFinal
                    , strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    );
                #endregion
            }
        }

        public DataSet WAS_Mst_NotifyType_Create(
            ref ArrayList alParamsCoupleError
            , RQ_Mst_NotifyType objRQ_Mst_NotifyType
            ////
            , out RT_Mst_NotifyType objRT_Mst_NotifyType
            )
        {
            #region // Temp:
            string strTid = objRQ_Mst_NotifyType.Tid;
            objRT_Mst_NotifyType = new RT_Mst_NotifyType();
            DataSet mdsResult = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            DateTime dtimeSys = DateTime.UtcNow;
            //DataSet mdsExec = null;
            //DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(objRQ_Mst_NotifyType.Tid);
            //int nTidSeq = 0;
            //bool bNeedTransaction = true;
            string strFunctionName = "WAS_Mst_NotifyType_Create";
            string strErrorCodeDefault = TError.ErridnInventory.WAS_Mst_NotifyType_Create;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
				});
            #endregion

            try
            {
                #region // Init:
                #endregion

                #region // Refine and Check Input:
                List<Mst_NotifyType> lst_Mst_NotifyType = new List<Mst_NotifyType>();
                #endregion

                #region // WS_Mst_NotifyType_Get:
                mdsResult = Mst_NotifyType_Create(
                    objRQ_Mst_NotifyType.Tid // strTid
                    , objRQ_Mst_NotifyType.GwUserCode // strGwUserCode
                    , objRQ_Mst_NotifyType.GwPassword // strGwPassword
                    , objRQ_Mst_NotifyType.WAUserCode // strUserCode
                    , objRQ_Mst_NotifyType.WAUserPassword // strUserPassword
                    , ref alParamsCoupleError // alParamsCoupleError
                                              ////
                    , objRQ_Mst_NotifyType.Mst_NotifyType.NotifyType // objNotifyType
                    , objRQ_Mst_NotifyType.Mst_NotifyType.NotifyDesc // objNotifyDesc
                    , objRQ_Mst_NotifyType.Mst_NotifyType.DefaultActive // objDefaultActive
                    , objRQ_Mst_NotifyType.Mst_NotifyType.LogLUDTimeUTC // objLogLUDTimeUTC
                    , objRQ_Mst_NotifyType.Mst_NotifyType.LogLUBy // objLogLUBy
                    );
                #endregion

                // Return Good:
                return mdsResult;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsResult
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Write ReturnLog:
                //_cf.ProcessBizReturn(
                //	ref mdsResult // mdsFinal
                //	, strTid // strTid
                //	, strFunctionName // strFunctionName
                //	);
                #endregion
            }
        }
        public DataSet Mst_NotifyType_Create(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            ////
            , object objNotifyType
            , object objNotifyDesc
            , object objDefaultActive
            , object objLogLUDTimeUTC
            , object objLogLUBy
            )
        {
            #region // Temp:
            DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            //int nTidSeq = 0;
            DateTime dtimeSys = DateTime.UtcNow;
            string strFunctionName = "Mst_NotifyType_Create";
            string strErrorCodeDefault = TError.ErridnInventory.Mst_NotifyType_Create;
            alParamsCoupleError.AddRange(new object[]{
                    "strFunctionName", strFunctionName
                    , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
			        ////
					, "objNotifyType", objNotifyType
                    , "objNotifyDesc", objNotifyDesc
                    , "objDefaultActive", objDefaultActive
                    , "objLogLUDTimeUTC", objLogLUDTimeUTC
                    , "objLogLUBy", objLogLUBy
                    });
            #endregion

            try
            {
                #region // Init:
                //_cf.db.LogUserId = _cf.sinf.strUserCode;
                _cf.db.BeginTransaction();

                // Write RequestLog:
                _cf.ProcessBizReq_OutSide(
                    strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    , alParamsCoupleError // alParamsCoupleError
                    );

                // Sys_User_CheckAuthentication:
                //Sys_User_CheckAuthentication(
                //    ref alParamsCoupleError
                //    , strWAUserCode
                //    , strWAUserPassword
                //    );

                // Check Access/Deny:
                //Sys_Access_CheckDenyV30(
                //    ref alParamsCoupleError
                //    , strWAUserCode
                //    , strFunctionName
                //    );
                #endregion

                #region // Mst_NotifyType_CreateX:
                //DataSet dsGetData = null;
                {
                    Mst_NotifyType_CreateX(
                        strTid // strTid
                        , strGwUserCode // strGwUserCode
                        , strGwPassword // strGwPassword
                        , strWAUserCode // strWAUserCode
                        , strWAUserPassword // strWAUserPassword
                        , ref alParamsCoupleError // alParamsCoupleError
                        , dtimeSys // dtimeSys
                                   ////
                        , objNotifyType // objNotifyType
                        , objNotifyDesc // objNotifyDesc
                        , objDefaultActive // objDefaultActive
                        , objLogLUDTimeUTC // objLogLUDTimeUTC
                        , objLogLUBy // objLogLUBy
                        );
                }
                ////
                //CmUtils.DataUtils.MoveDataTable(ref mdsFinal, ref dsGetData);
                #endregion

                // Return Good:
                TDALUtils.DBUtils.CommitSafety(_cf.db); // Always Rollback.
                mdsFinal.AcceptChanges();
                return mdsFinal;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Rollback:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);

                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsFinal
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Rollback and Release resources:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);
                TDALUtils.DBUtils.ReleaseAllSemaphore(_cf.db_Sys, true);

                // Write ReturnLog:
                _cf.ProcessBizReturn_OutSide(
                    ref mdsFinal // mdsFinal
                    , strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    );
                #endregion
            }
        }
        public DataSet WAS_Mst_NotifyType_Update(
            ref ArrayList alParamsCoupleError
            , RQ_Mst_NotifyType objRQ_Mst_NotifyType
            ////
            , out RT_Mst_NotifyType objRT_Mst_NotifyType
            )
        {
            #region // Temp:
            string strTid = objRQ_Mst_NotifyType.Tid;
            objRT_Mst_NotifyType = new RT_Mst_NotifyType();
            DataSet mdsResult = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            DateTime dtimeSys = DateTime.UtcNow;
            //DataSet mdsExec = null;
            //DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(objRQ_Mst_NotifyType.Tid);
            //int nTidSeq = 0;
            //bool bNeedTransaction = true;
            string strFunctionName = "WAS_Mst_NotifyType_Update";
            string strErrorCodeDefault = TError.ErridnInventory.WAS_Mst_NotifyType_Update;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
				});
            #endregion

            try
            {
                #region // Init:
                #endregion

                #region // Refine and Check Input:
                List<Mst_NotifyType> lst_Mst_NotifyType = new List<Mst_NotifyType>();
                #endregion

                #region // Mst_NotifyType_Update:
                mdsResult = Mst_NotifyType_Update(
                    objRQ_Mst_NotifyType.Tid // strTid
                    , objRQ_Mst_NotifyType.GwUserCode // strGwUserCode
                    , objRQ_Mst_NotifyType.GwPassword // strGwPassword
                    , objRQ_Mst_NotifyType.WAUserCode // strUserCode
                    , objRQ_Mst_NotifyType.WAUserPassword // strUserPassword
                    , ref alParamsCoupleError // alParamsCoupleError
                                              ////
                    , objRQ_Mst_NotifyType.Mst_NotifyType.NotifyType // objNotifyType
                    , objRQ_Mst_NotifyType.Mst_NotifyType.NotifyDesc // objNotifyDesc
                    , objRQ_Mst_NotifyType.Mst_NotifyType.DefaultActive // objDefaultActive
                    , objRQ_Mst_NotifyType.Mst_NotifyType.LogLUDTimeUTC // objLogLUDTimeUTC
                    , objRQ_Mst_NotifyType.Mst_NotifyType.LogLUBy // objLogLUBy
                                                                  ////
                    , objRQ_Mst_NotifyType.Ft_Cols_Upd // objFt_Cols_Upd
                    );
                #endregion

                // Return Good:
                return mdsResult;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsResult
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Write ReturnLog:
                //_cf.ProcessBizReturn(
                //	ref mdsResult // mdsFinal
                //	, strTid // strTid
                //	, strFunctionName // strFunctionName
                //	);
                #endregion
            }
        }
        public DataSet Mst_NotifyType_Update(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
           ////
           , object objNotifyType
            , object objNotifyDesc
            , object objDefaultActive
            , object objLogLUDTimeUTC
            , object objLogLUBy
            ////
            , object objFt_Cols_Upd
            )
        {
            #region // Temp:
            DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            //int nTidSeq = 0;
            DateTime dtimeSys = DateTime.UtcNow;
            string strFunctionName = "Mst_NotifyType_Update";
            string strErrorCodeDefault = TError.ErridnInventory.Mst_NotifyType_Update;
            alParamsCoupleError.AddRange(new object[]{
                    "strFunctionName", strFunctionName
                    , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
			        ////
					, "objNotifyType", objNotifyType
                    , "objNotifyDesc", objNotifyDesc
                    , "objDefaultActive", objDefaultActive
                    , "objLogLUDTimeUTC", objLogLUDTimeUTC
                    , "objLogLUBy", objLogLUBy
                    ////
                    , "objFt_Cols_Upd", objFt_Cols_Upd
                    });
            #endregion

            try
            {
                #region // Init:
                //_cf.db.LogUserId = _cf.sinf.strUserCode;
                _cf.db.BeginTransaction();

                // Write RequestLog:
                _cf.ProcessBizReq_OutSide(
                    strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    , alParamsCoupleError // alParamsCoupleError
                    );

                // Sys_User_CheckAuthentication:
                //Sys_User_CheckAuthentication(
                //    ref alParamsCoupleError
                //    , strWAUserCode
                //    , strWAUserPassword
                //    );

                // Check Access/Deny:
                //Sys_Access_CheckDenyV30(
                //    ref alParamsCoupleError
                //    , strWAUserCode
                //    , strFunctionName
                //    );
                #endregion

                #region // Mst_NotifyType_UpdateX:
                //DataSet dsGetData = null;
                {
                    Mst_NotifyType_UpdateX(
                        strTid // strTid
                        , strGwUserCode // strGwUserCode
                        , strGwPassword // strGwPassword
                        , strWAUserCode // strWAUserCode
                        , strWAUserPassword // strWAUserPassword
                        , ref alParamsCoupleError // alParamsCoupleError
                        , dtimeSys // dtimeSys
                                   ////
                        , objNotifyType // objNotifyType
                        , objNotifyDesc // objNotifyDesc
                        , objDefaultActive // objDefaultActive
                        , objLogLUDTimeUTC // objLogLUDTimeUTC
                        , objLogLUBy // objLogLUBy
                                     ////
                        , objFt_Cols_Upd // objFt_Cols_Upd
                        );
                }
                ////
                //CmUtils.DataUtils.MoveDataTable(ref mdsFinal, ref dsGetData);
                #endregion

                // Return Good:
                TDALUtils.DBUtils.CommitSafety(_cf.db);
                mdsFinal.AcceptChanges();
                return mdsFinal;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Rollback:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);

                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsFinal
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Rollback and Release resources:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);
                TDALUtils.DBUtils.ReleaseAllSemaphore(_cf.db_Sys, true);

                // Write ReturnLog:
                _cf.ProcessBizReturn_OutSide(
                    ref mdsFinal // mdsFinal
                    , strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    );
                #endregion
            }
        }
        public DataSet WAS_Mst_NotifyType_Delete(
            ref ArrayList alParamsCoupleError
            , RQ_Mst_NotifyType objRQ_Mst_NotifyType
            ////
            , out RT_Mst_NotifyType objRT_Mst_NotifyType
            )
        {
            #region // Temp:
            string strTid = objRQ_Mst_NotifyType.Tid;
            objRT_Mst_NotifyType = new RT_Mst_NotifyType();
            DataSet mdsResult = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            DateTime dtimeSys = DateTime.UtcNow;
            //DataSet mdsExec = null;
            //DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(objRQ_Mst_NotifyType.Tid);
            //int nTidSeq = 0;
            //bool bNeedTransaction = true;
            string strFunctionName = "WAS_Mst_NotifyType_Delete";
            string strErrorCodeDefault = TError.ErridnInventory.WAS_Mst_NotifyType_Delete;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
				});
            #endregion

            try
            {
                #region // Init:
                #endregion

                #region // Refine and Check Input:
                List<Mst_NotifyType> lst_Mst_NotifyType = new List<Mst_NotifyType>();
                #endregion

                #region // Mst_NotifyType_Delete:
                mdsResult = Mst_NotifyType_Delete(
                    objRQ_Mst_NotifyType.Tid // strTid
                    , objRQ_Mst_NotifyType.GwUserCode // strGwUserCode
                    , objRQ_Mst_NotifyType.GwPassword // strGwPassword
                    , objRQ_Mst_NotifyType.WAUserCode // strUserCode
                    , objRQ_Mst_NotifyType.WAUserPassword // strUserPassword
                    , ref alParamsCoupleError // alParamsCoupleError
                                              ////
                    , objRQ_Mst_NotifyType.Mst_NotifyType.NotifyType // objNotifyType
                    );
                #endregion

                // Return Good:
                return mdsResult;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsResult
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Write ReturnLog:
                //_cf.ProcessBizReturn(
                //	ref mdsResult // mdsFinal
                //	, strTid // strTid
                //	, strFunctionName // strFunctionName
                //	);
                #endregion
            }
        }
        public DataSet Mst_NotifyType_Delete(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            ////
            , object objNotifyType
            )
        {
            #region // Temp:
            DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            //int nTidSeq = 0;
            DateTime dtimeSys = DateTime.UtcNow;
            string strFunctionName = "Mst_NotifyType_Delete";
            string strErrorCodeDefault = TError.ErridnInventory.Mst_NotifyType_Delete;
            alParamsCoupleError.AddRange(new object[]{
                    "strFunctionName", strFunctionName
                    , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
			        ////
					, "objNotifyType", objNotifyType
                    });
            #endregion

            try
            {
                #region // Init:
                //_cf.db.LogUserId = _cf.sinf.strUserCode;
                _cf.db.BeginTransaction();

                // Write RequestLog:
                _cf.ProcessBizReq_OutSide(
                    strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    , alParamsCoupleError // alParamsCoupleError
                    );

                // Sys_User_CheckAuthentication:
                //Sys_User_CheckAuthentication(
                //    ref alParamsCoupleError
                //    , strWAUserCode
                //    , strWAUserPassword
                //    );

                // Check Access/Deny:
                //Sys_Access_CheckDenyV30(
                //    ref alParamsCoupleError
                //    , strWAUserCode
                //    , strFunctionName
                //    );
                #endregion

                #region // Mst_NotifyType_DeleteX:
                //DataSet dsGetData = null;
                {
                    Mst_NotifyType_DeleteX(
                        strTid // strTid
                        , strGwUserCode // strGwUserCode
                        , strGwPassword // strGwPassword
                        , strWAUserCode // strWAUserCode
                        , strWAUserPassword // strWAUserPassword
                        , ref alParamsCoupleError // alParamsCoupleError
                        , dtimeSys // dtimeSys
                                   ////
                        , objNotifyType // objNotifyType
                        );
                }
                ////
                //CmUtils.DataUtils.MoveDataTable(ref mdsFinal, ref dsGetData);
                #endregion

                // Return Good:
                TDALUtils.DBUtils.CommitSafety(_cf.db);
                mdsFinal.AcceptChanges();
                return mdsFinal;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Rollback:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);

                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsFinal
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Rollback and Release resources:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);
                TDALUtils.DBUtils.ReleaseAllSemaphore(_cf.db_Sys, true);

                // Write ReturnLog:
                _cf.ProcessBizReturn_OutSide(
                    ref mdsFinal // mdsFinal
                    , strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    );
                #endregion
            }
        }
        private void Mst_NotifyType_GetX(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            , DateTime dtimeSys
            //// Filter:
            , string strFt_RecordStart
            , string strFt_RecordCount
            , string strFt_WhereClause
            //// Return:
            , string strRt_Cols_Mst_NotifyType
            ////
            , out DataSet dsGetData
            )
        {
            #region // Temp:
            //DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            //DateTime dtimeSys = DateTime.UtcNow;
            //bool bNeedTransaction = true;
            string strFunctionName = "Mst_NotifyType_GetX";
            //string strErrorCodeDefault = TError.ErrHTCNM.Mnf_VIN_Get_QCX;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
                });
            #endregion

            #region // Check:
            //// Refine:
            long nFilterRecordStart = Convert.ToInt64(strFt_RecordStart);
            long nFilterRecordEnd = nFilterRecordStart + Convert.ToInt64(strFt_RecordCount) - 1;
            bool bGet_Mst_NotifyType = (strRt_Cols_Mst_NotifyType != null && strRt_Cols_Mst_NotifyType.Length > 0);

            //// drAbilityOfUser:
            //DataRow drAbilityOfUser = myCache_ViewAbility_GetUserInfo(_cf.sinf.strUserCode);

            #endregion

            #region // Build Sql:
            ////
            ArrayList alParamsCoupleSql = new ArrayList();
            alParamsCoupleSql.AddRange(new object[] {
                "@nFilterRecordStart", nFilterRecordStart
                , "@nFilterRecordEnd", nFilterRecordEnd
                });
            ////
            //myCache_ViewAbility_GetDealerInfo(drAbilityOfUser);
            ////
            string strSqlGetData = CmUtils.StringUtils.Replace(@"
					---- #tbl_Mst_NotifyType_Filter_Draft:
					select distinct
						identity(bigint, 0, 1) MyIdxSeq
						, mo.NotifyType
					into #tbl_Mst_NotifyType_Filter_Draft
					from Mst_NotifyType mo --//[mylock]
					where (1=1)
						zzB_Where_strFilter_zzE
					order by mo.NotifyType asc
					;

					---- Summary:
					select Count(0) MyCount from #tbl_Mst_NotifyType_Filter_Draft t --//[mylock]
					;

					---- #tbl_Mst_NotifyType_Filter:
					select
						t.*
					into #tbl_Mst_NotifyType_Filter
					from #tbl_Mst_NotifyType_Filter_Draft t --//[mylock]
					where (1=1)
						and (t.MyIdxSeq >= @nFilterRecordStart)
						and (t.MyIdxSeq <= @nFilterRecordEnd)
					;

					-------- Mst_NotifyType -----:
					zzB_Select_Mst_NotifyType_zzE
					------------------------

					---- Clear for debug:
					--drop table #tbl_Mst_NotifyType_Filter_Draft;
					--drop table #tbl_Mst_NotifyType_Filter;
					"
                );
            ////
            string zzB_Select_Mst_NotifyType_zzE = "-- Nothing.";
            if (bGet_Mst_NotifyType)
            {
                #region // bGet_Mst_NotifyType:
                zzB_Select_Mst_NotifyType_zzE = CmUtils.StringUtils.Replace(@"
					---- Mst_NotifyType:
					select
						t.MyIdxSeq
						, mo.*
					from #tbl_Mst_NotifyType_Filter t --//[mylock]
						inner join Mst_NotifyType mo --//[mylock]
							on t.NotifyType = mo.NotifyType
					order by t.MyIdxSeq asc
					;
				"
                );
                #endregion
            }
            ////
            string zzB_Where_strFilter_zzE = "";
            {
                Hashtable htSpCols = new Hashtable();
                {
                    #region // htSpCols:
                    ////
                    TUtils.CUtils.MyBuildHTSupportedColumns(
                        _cf.db // db
                        , ref htSpCols // htSupportedColumns
                        , "Mst_NotifyType" // strTableNameDB
                        , "Mst_NotifyType." // strPrefixStd
                        , "mo." // strPrefixAlias
                        );
                    ////
                    #endregion
                }
                zzB_Where_strFilter_zzE = CmUtils.SqlUtils.BuildWhere(
                    htSpCols // htSpCols
                    , strFt_WhereClause // strClause
                    , "@p_" // strParamPrefix
                    , ref alParamsCoupleSql // alParamsCoupleSql
                    );
                zzB_Where_strFilter_zzE = (zzB_Where_strFilter_zzE.Length <= 0 ? "" : string.Format(" and ({0})", zzB_Where_strFilter_zzE));
                alParamsCoupleError.AddRange(new object[]{
                    "zzB_Where_strFilter_zzE", zzB_Where_strFilter_zzE
                    });
            }
            ////
            strSqlGetData = CmUtils.StringUtils.Replace(
                strSqlGetData
                , "zzB_Where_strFilter_zzE", zzB_Where_strFilter_zzE
                , "zzB_Select_Mst_NotifyType_zzE", zzB_Select_Mst_NotifyType_zzE
                );
            #endregion

            #region // Get Data:
            dsGetData = _cf.db.ExecQuery(
                strSqlGetData
                , alParamsCoupleSql.ToArray()
                );
            int nIdxTable = 0;
            dsGetData.Tables[nIdxTable++].TableName = "MySummaryTable";
            if (bGet_Mst_NotifyType)
            {
                dsGetData.Tables[nIdxTable++].TableName = "Mst_NotifyType";
            }
            #endregion
        }
        private void Mst_NotifyType_CreateX(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            , DateTime dtimeSys
            //// 
            , object objNotifyType
            , object objNotifyDesc
            , object objDefaultActive
            , object objLogLUDTimeUTC
            , object objLogLUBy
            ////
            )
        {
            #region // Temp:
            string strFunctionName = "Mst_NotifyType_CreateX";
            //string strErrorCodeDefault = TError.ErrHTCNM.Mnf_VIN_Get_QCX;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
                , "objNotifyType", objNotifyType
                , "objNotifyDesc", objNotifyDesc
                , "objDefaultActive", objDefaultActive
                , "objLogLUDTimeUTC", objLogLUDTimeUTC
                , "objLogLUBy", objLogLUBy
                });
            #endregion

            #region // Refine and Check Input:
            ////
            string strNotifyType = TUtils.CUtils.StdParam(objNotifyType);
            string strNotifyDesc = TUtils.CUtils.StdParam(objNotifyDesc);
            string strDefaultActive = TUtils.CUtils.StdParam(objDefaultActive);
            string strLogLUDTimeUTC = TUtils.CUtils.StdParam(objLogLUDTimeUTC);
            string strLogLUBy = TUtils.CUtils.StdParam(objLogLUBy);

            // drAbilityOfUser:
            //DataRow drAbilityOfUser = Sys_User_GetAbilityViewOfUser(_cf.sinf.strUserCode);
            ////
            DataTable dtDB_Mst_NotifyType = null;
            {

                ////
                if (strNotifyType == null || strNotifyType.Length < 1)
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.strNotifyType", strNotifyType
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Mst_NotifyType_Create_InvalidNotifyType
                        , null
                        , alParamsCoupleError.ToArray()
                        );
                }
                ////
                Mst_NotifyType_CheckDB(
                    ref alParamsCoupleError // alParamsCoupleError
                    , strNotifyType // objNotifyType
                    , TConst.Flag.No // strFlagExistToCheck
                    , "" // strFlagActiveListToCheck
                    , out dtDB_Mst_NotifyType // dtDB_Mst_NotifyType
                    );


            }
            #endregion

            #region // SaveDB Mst_NotifyType:
            {
                // Init:
                //ArrayList alColumnEffective = new ArrayList();
                string strFN = "";
                DataRow drDB = dtDB_Mst_NotifyType.NewRow();
                strFN = "NotifyType"; drDB[strFN] = strNotifyType;
                strFN = "NotifyDesc"; drDB[strFN] = strNotifyDesc;
                strFN = "DefaultActive"; drDB[strFN] = strDefaultActive;
                strFN = "LogLUDTimeUTC"; drDB[strFN] = strLogLUDTimeUTC;
                strFN = "LogLUBy"; drDB[strFN] = strLogLUBy;
                strFN = "FlagActive"; drDB[strFN] = TConst.Flag.Active;
                strFN = "LogLUDTimeUTC"; drDB[strFN] = dtimeSys.ToString("yyyy-MM-dd HH:mm:ss");
                strFN = "LogLUBy"; drDB[strFN] = strWAUserCode;
                dtDB_Mst_NotifyType.Rows.Add(drDB);

                // Save:
                _cf.db.SaveData(
                    "Mst_NotifyType" // strTableName
                    , dtDB_Mst_NotifyType // dtData
                                          //, alColumnEffective.ToArray()
                    );
            }
            #endregion
        }
        private void Mst_NotifyType_UpdateX(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            , DateTime dtimeSys
           //// 
           , object objNotifyType
            , object objNotifyDesc
            , object objDefaultActive
            , object objLogLUDTimeUTC
            , object objLogLUBy
            ////
            , object objFt_Cols_Upd
            ////
            )
        {
            #region // Temp:
            string strFunctionName = "Mst_NotifyType_UpdateX";
            //string strErrorCodeDefault = TError.ErrHTCNM.Mnf_VIN_Get_QCX;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
                , "objNotifyType", objNotifyType
                , "objNotifyDesc", objNotifyDesc
                , "objDefaultActive", objDefaultActive
                , "objLogLUDTimeUTC", objLogLUDTimeUTC
                , "objLogLUBy", objLogLUBy
                ////
                , "objFt_Cols_Upd", objFt_Cols_Upd
                });
            #endregion

            #region // Refine and Check Input:
            ////
            string strFt_Cols_Upd = TUtils.CUtils.StdParam(objFt_Cols_Upd);
            strFt_Cols_Upd = (strFt_Cols_Upd == null ? "" : strFt_Cols_Upd);
            ////
            string strNotifyType = TUtils.CUtils.StdParam(objNotifyType);
            string strNotifyDesc = TUtils.CUtils.StdParam(objNotifyDesc);
            string strDefaultActive = TUtils.CUtils.StdParam(objDefaultActive);
            string strLogLUDTimeUTC = TUtils.CUtils.StdParam(objLogLUDTimeUTC);
            string strLogLUBy = TUtils.CUtils.StdParam(objLogLUBy);
            ////
            bool bUpd_NotifyType = strFt_Cols_Upd.Contains("Mst_NotifyType.NotifyType".ToUpper());
            bool bUpd_NotifyDesc = strFt_Cols_Upd.Contains("Mst_NotifyType.NotifyDesc".ToUpper());
            bool bUpd_DefaultActive = strFt_Cols_Upd.Contains("Mst_NotifyType.DefaultActive".ToUpper());
            bool bUpd_LogLUDTimeUTC = strFt_Cols_Upd.Contains("Mst_NotifyType.LogLUDTimeUTC".ToUpper());
            bool bUpd_LogLUBy = strFt_Cols_Upd.Contains("Mst_NotifyType.LogLUBy".ToUpper());

            ////
            DataTable dtDB_Mst_NotifyType = null;
            {
                ////
                Mst_NotifyType_CheckDB(
                    ref alParamsCoupleError // alParamsCoupleError
                    , strNotifyType // strNotifyType 
                    , TConst.Flag.Yes // strFlagExistToCheck
                    , "" // strFlagActiveListToCheck
                    , out dtDB_Mst_NotifyType // dtDB_Mst_NotifyType
                    );
                ////
            }
            #endregion

            #region // Save Mst_NotifyType:
            {
                // Init:
                ArrayList alColumnEffective = new ArrayList();
                string strFN = "";
                DataRow drDB = dtDB_Mst_NotifyType.Rows[0];
                if (bUpd_NotifyType) { strFN = "NotifyType"; drDB[strFN] = strNotifyType; alColumnEffective.Add(strFN); }
                if (bUpd_NotifyDesc) { strFN = "NotifyDesc"; drDB[strFN] = strNotifyDesc; alColumnEffective.Add(strFN); }
                if (bUpd_DefaultActive) { strFN = "DefaultActive"; drDB[strFN] = strDefaultActive; alColumnEffective.Add(strFN); }
                if (bUpd_LogLUDTimeUTC) { strFN = "LogLUDTimeUTC"; drDB[strFN] = strLogLUDTimeUTC; alColumnEffective.Add(strFN); }
                if (bUpd_LogLUBy) { strFN = "LogLUBy"; drDB[strFN] = strLogLUBy; alColumnEffective.Add(strFN); }
                strFN = "LogLUDTimeUTC"; drDB[strFN] = dtimeSys.ToString("yyyy-MM-dd HH:mm:ss"); alColumnEffective.Add(strFN);
                strFN = "LogLUBy"; drDB[strFN] = strWAUserCode; alColumnEffective.Add(strFN);

                // Save:
                _cf.db.SaveData(
                    "Mst_NotifyType"
                    , dtDB_Mst_NotifyType
                    , alColumnEffective.ToArray()
                    );
            }
            #endregion
        }
        private void Mst_NotifyType_DeleteX(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            , DateTime dtimeSys
            //// 
            , object objNotifyType
            ////
            )
        {
            #region // Temp:
            string strFunctionName = "Mst_NotifyType_DeleteX";
            //string strErrorCodeDefault = TError.ErrHTCNM.Mnf_VIN_Get_QCX;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
                , "objNotifyType", objNotifyType
                });
            #endregion

            #region // Refine and Check Input:
            ////
            string strNotifyType = TUtils.CUtils.StdParam(objNotifyType);

            ////
            DataTable dtDB_Mst_NotifyType = null;
            {
                ////
                Mst_NotifyType_CheckDB(
                    ref alParamsCoupleError // alParamsCoupleError
                    , strNotifyType // strNotifyType 
                    , TConst.Flag.Yes // strFlagExistToCheck
                    , "" // strFlagActiveListToCheck
                    , out dtDB_Mst_NotifyType // dtDB_Mst_NotifyType
                    );
                ////
            }
            #endregion

            #region // SaveDB:
            {
                // Init:
                dtDB_Mst_NotifyType.Rows[0].Delete();

                // Save:
                _cf.db.SaveData(
                    "Mst_NotifyType"
                    , dtDB_Mst_NotifyType
                    );
            }
            #endregion
        }
        #endregion

        #region // Map_UserInNotifyType:
        private void Map_UserInNotifyType_CheckDB(
            ref ArrayList alParamsCoupleError
            , object objUserCode
            , object objNotifyType
            , string strFlagExistToCheck
            , string strFlagActiveListToCheck
            , out DataTable dtDB_Map_UserInNotifyType
            )
        {
            // GetInfo:
            string strSqlExec = CmUtils.StringUtils.Replace(@"
					select top 1
						t.*
					from Map_UserInNotifyType t --//[mylock]
					where (1=1)
						and t.UserCode = @objUserCode
                        and t.NotifyType = @objNotifyType
					;
				");
            dtDB_Map_UserInNotifyType = _cf.db.ExecQuery(
                strSqlExec
                , "@objUserCode", objUserCode
                , "@objNotifyType", objNotifyType
                ).Tables[0];
            dtDB_Map_UserInNotifyType.TableName = "Map_UserInNotifyType";

            // strFlagExistToCheck:
            if (strFlagExistToCheck.Length > 0)
            {
                if (CmUtils.StringUtils.StringEqual(strFlagExistToCheck, TConst.Flag.Active) && dtDB_Map_UserInNotifyType.Rows.Count < 1)
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.UserCode", objUserCode
                        , "Check.NotifyType", objNotifyType
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Map_UserInNotifyType_CheckDB_UserCodeNotFound
                        , null
                        , alParamsCoupleError.ToArray()
                        );
                }
                if (CmUtils.StringUtils.StringEqual(strFlagExistToCheck, TConst.Flag.Inactive) && dtDB_Map_UserInNotifyType.Rows.Count > 0)
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.UserCode", objUserCode
                        , "Check.NotifyType", objNotifyType
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Map_UserInNotifyType_CheckDB_UserCodeExist
                        , null
                        , alParamsCoupleError.ToArray()
                        );
                }
            }

            // strFlagActiveListToCheck:
            if (strFlagActiveListToCheck.Length > 0 && !strFlagActiveListToCheck.Contains(Convert.ToString(dtDB_Map_UserInNotifyType.Rows[0]["FlagActive"])))
            {
                alParamsCoupleError.AddRange(new object[]{
                    "Check.UserCode", objUserCode
                    , "Check.NotifyType", objNotifyType
                    , "Check.strFlagActiveListToCheck", strFlagActiveListToCheck
                    , "DB.FlagActive", dtDB_Map_UserInNotifyType.Rows[0]["FlagActive"]
                    });
                throw CmUtils.CMyException.Raise(
                    TError.ErridnInventory.Map_UserInNotifyType_CheckDB_FlagActiveNotMatched
                    , null
                    , alParamsCoupleError.ToArray()
                    );
            }
        }
        #endregion

        #region // Mst_ManageNotify:
        private void Mst_ManageNotify_CheckDB(
            ref ArrayList alParamsCoupleError
            , object objUserCode
            , string strFlagExistToCheck
            , string strFlagActiveListToCheck
            , out DataTable dtDB_Mst_ManageNotify
            )
        {
            // GetInfo:
            string strSqlExec = CmUtils.StringUtils.Replace(@"
					select top 1
						t.*
					from Mst_ManageNotify t --//[mylock]
					where (1=1)
						and t.UserCode = @objUserCode
					;
				");
            dtDB_Mst_ManageNotify = _cf.db.ExecQuery(
                strSqlExec
                , "@objUserCode", objUserCode
                ).Tables[0];
            dtDB_Mst_ManageNotify.TableName = "Mst_ManageNotify";

            // strFlagExistToCheck:
            if (strFlagExistToCheck.Length > 0)
            {
                if (CmUtils.StringUtils.StringEqual(strFlagExistToCheck, TConst.Flag.Active) && dtDB_Mst_ManageNotify.Rows.Count < 1)
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.UserCode", objUserCode
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Mst_ManageNotify_CheckDB_UserCodeNotFound
                        , null
                        , alParamsCoupleError.ToArray()
                        );
                }
                if (CmUtils.StringUtils.StringEqual(strFlagExistToCheck, TConst.Flag.Inactive) && dtDB_Mst_ManageNotify.Rows.Count > 0)
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.UserCode", objUserCode
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Mst_ManageNotify_CheckDB_UserCodeExist
                        , null
                        , alParamsCoupleError.ToArray()
                        );
                }
            }

            // strFlagActiveListToCheck:
            if (strFlagActiveListToCheck.Length > 0 && !strFlagActiveListToCheck.Contains(Convert.ToString(dtDB_Mst_ManageNotify.Rows[0]["FlagActive"])))
            {
                alParamsCoupleError.AddRange(new object[]{
                    "Check.UserCode", objUserCode
                    , "Check.strFlagActiveListToCheck", strFlagActiveListToCheck
                    , "DB.FlagActive", dtDB_Mst_ManageNotify.Rows[0]["FlagActive"]
                    });
                throw CmUtils.CMyException.Raise(
                    TError.ErridnInventory.Mst_ManageNotify_CheckDB_FlagActiveNotMatched
                    , null
                    , alParamsCoupleError.ToArray()
                    );
            }
        }

        public DataSet WAS_Mst_ManageNotify_Get(
            ref ArrayList alParamsCoupleError
            , RQ_Mst_ManageNotify objRQ_Mst_ManageNotify
            ////
            , out RT_Mst_ManageNotify objRT_Mst_ManageNotify
            )
        {
            #region // Temp:
            string strTid = objRQ_Mst_ManageNotify.Tid;
            objRT_Mst_ManageNotify = new RT_Mst_ManageNotify();
            DataSet mdsResult = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            DateTime dtimeSys = DateTime.UtcNow;
            //DataSet mdsExec = null;
            //DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(objRQ_Mst_ManageNotify.Tid);
            //int nTidSeq = 0;
            //bool bNeedTransaction = true;
            string strFunctionName = "WAS_Mst_ManageNotify_Get";
            string strErrorCodeDefault = TError.ErridnInventory.WAS_Mst_ManageNotify_Get;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
				});
            #endregion

            try
            {
                #region // Init:
                #endregion

                #region // Refine and Check Input:
                List<Mst_ManageNotify> lst_Mst_ManageNotify = new List<Mst_ManageNotify>();
                #endregion

                #region // WS_Mst_ManageNotify_Get:
                mdsResult = Mst_ManageNotify_Get(
                    objRQ_Mst_ManageNotify.Tid // strTid
                    , objRQ_Mst_ManageNotify.GwUserCode // strGwUserCode
                    , objRQ_Mst_ManageNotify.GwPassword // strGwPassword
                    , objRQ_Mst_ManageNotify.WAUserCode // strUserCode
                    , objRQ_Mst_ManageNotify.WAUserPassword // strUserPassword
                    , ref alParamsCoupleError // alParamsCoupleError
                                              //// Filter:
                    , objRQ_Mst_ManageNotify.Ft_RecordStart // strFt_RecordStart
                    , objRQ_Mst_ManageNotify.Ft_RecordCount // strFt_RecordCount
                    , objRQ_Mst_ManageNotify.Ft_WhereClause // strFt_WhereClause
                                                            //// Return:
                    , objRQ_Mst_ManageNotify.Rt_Cols_Mst_ManageNotify // strRt_Cols_Mst_ManageNotify
                    );
                #endregion

                #region // GetData:
                if (!CmUtils.CMyDataSet.HasError(mdsResult))
                {
                    ////
                    DataTable dt_Mst_ManageNotify = mdsResult.Tables["Mst_ManageNotify"].Copy();
                    lst_Mst_ManageNotify = TUtils.DataTableCmUtils.ToListof<Mst_ManageNotify>(dt_Mst_ManageNotify);
                    objRT_Mst_ManageNotify.Lst_Mst_ManageNotify = lst_Mst_ManageNotify;
                    /////
                }
                #endregion

                // Return Good:
                return mdsResult;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsResult
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Write ReturnLog:
                //_cf.ProcessBizReturn(
                //	ref mdsResult // mdsFinal
                //	, strTid // strTid
                //	, strFunctionName // strFunctionName
                //	);
                #endregion
            }
        }
        public DataSet Mst_ManageNotify_Get(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            //// Filter:
            , string strFt_RecordStart
            , string strFt_RecordCount
            , string strFt_WhereClause
            //// Return:
            , string strRt_Cols_Mst_ManageNotify
            )
        {
            #region // Temp:
            DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            //int nTidSeq = 0;
            DateTime dtimeSys = DateTime.UtcNow;
            string strFunctionName = "Mst_ManageNotify_Get";
            string strErrorCodeDefault = TError.ErridnInventory.Mst_ManageNotify_Get;
            alParamsCoupleError.AddRange(new object[]{
                    "strFunctionName", strFunctionName
                    , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
			        //// Filter
					, "strFt_RecordStart", strFt_RecordStart
                    , "strFt_RecordCount", strFt_RecordCount
                    , "strFt_WhereClause", strFt_WhereClause
			        //// Return
					, "strRt_Cols_Mst_ManageNotify", strRt_Cols_Mst_ManageNotify
                    });
            #endregion

            try
            {
                #region // Init:
                //_cf.db.LogUserId = _cf.sinf.strUserCode;
                _cf.db.BeginTransaction();

                // Write RequestLog:
                _cf.ProcessBizReq_OutSide(
                    strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    , alParamsCoupleError // alParamsCoupleError
                    );

                // Sys_User_CheckAuthentication:
                //Sys_User_CheckAuthentication(
                //    ref alParamsCoupleError
                //    , strWAUserCode
                //    , strWAUserPassword
                //    );

                // Check Access/Deny:
                //Sys_Access_CheckDenyV30(
                //    ref alParamsCoupleError
                //    , strWAUserCode
                //    , strFunctionName
                //    );
                #endregion

                #region // Mst_ManageNotify_GetX:
                DataSet dsGetData = null;
                {
                    Mst_ManageNotify_GetX(
                        strTid // strTid
                        , strGwUserCode // strGwUserCode
                        , strGwPassword // strGwPassword
                        , strWAUserCode // strWAUserCode
                        , strWAUserPassword // strWAUserPassword
                        , ref alParamsCoupleError // alParamsCoupleError
                        , dtimeSys // dtimeSys
                                   ////
                        , strFt_RecordStart // strFt_RecordStart
                        , strFt_RecordCount // strFt_RecordCount
                        , strFt_WhereClause // strFt_WhereClause
                                            ////
                        , strRt_Cols_Mst_ManageNotify // strRt_Cols_Mst_ManageNotify
                        , out dsGetData  // dsGetData
                        );
                }
                ////
                CmUtils.DataUtils.MoveDataTable(ref mdsFinal, ref dsGetData);
                #endregion

                // Return Good:
                TDALUtils.DBUtils.RollbackSafety(_cf.db); // Always Rollback.
                mdsFinal.AcceptChanges();
                return mdsFinal;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Rollback:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);

                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsFinal
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Rollback and Release resources:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);
                TDALUtils.DBUtils.ReleaseAllSemaphore(_cf.db_Sys, true);

                // Write ReturnLog:
                _cf.ProcessBizReturn_OutSide(
                    ref mdsFinal // mdsFinal
                    , strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    );
                #endregion
            }
        }

        public DataSet WAS_Mst_ManageNotify_Create(
            ref ArrayList alParamsCoupleError
            , RQ_Mst_ManageNotify objRQ_Mst_ManageNotify
            ////
            , out RT_Mst_ManageNotify objRT_Mst_ManageNotify
            )
        {
            #region // Temp:
            string strTid = objRQ_Mst_ManageNotify.Tid;
            objRT_Mst_ManageNotify = new RT_Mst_ManageNotify();
            DataSet mdsResult = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            DateTime dtimeSys = DateTime.UtcNow;
            //DataSet mdsExec = null;
            //DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(objRQ_Mst_ManageNotify.Tid);
            //int nTidSeq = 0;
            //bool bNeedTransaction = true;
            string strFunctionName = "WAS_Mst_ManageNotify_Create";
            string strErrorCodeDefault = TError.ErridnInventory.WAS_Mst_ManageNotify_Create;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
				});
            #endregion

            try
            {
                #region // Init:
                #endregion

                #region // Refine and Check Input:
                List<Mst_ManageNotify> lst_Mst_ManageNotify = new List<Mst_ManageNotify>();
                #endregion

                #region // WS_Mst_ManageNotify_Get:
                mdsResult = Mst_ManageNotify_Create(
                    objRQ_Mst_ManageNotify.Tid // strTid
                    , objRQ_Mst_ManageNotify.GwUserCode // strGwUserCode
                    , objRQ_Mst_ManageNotify.GwPassword // strGwPassword
                    , objRQ_Mst_ManageNotify.WAUserCode // strUserCode
                    , objRQ_Mst_ManageNotify.WAUserPassword // strUserPassword
                    , ref alParamsCoupleError // alParamsCoupleError
                                              ////
                    , objRQ_Mst_ManageNotify.Mst_ManageNotify.UserCode // objUserCode
                    , objRQ_Mst_ManageNotify.Mst_ManageNotify.UserName // objUserName
                    );
                #endregion

                // Return Good:
                return mdsResult;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsResult
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Write ReturnLog:
                //_cf.ProcessBizReturn(
                //	ref mdsResult // mdsFinal
                //	, strTid // strTid
                //	, strFunctionName // strFunctionName
                //	);
                #endregion
            }
        }
        public DataSet Mst_ManageNotify_Create(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            ////
            , object objUserCode
            , object objUserName
            )
        {
            #region // Temp:
            DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            //int nTidSeq = 0;
            DateTime dtimeSys = DateTime.UtcNow;
            string strFunctionName = "Mst_ManageNotify_Create";
            string strErrorCodeDefault = TError.ErridnInventory.Mst_ManageNotify_Create;
            alParamsCoupleError.AddRange(new object[]{
                    "strFunctionName", strFunctionName
                    , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
			        ////
					, "objUserCode", objUserCode
                    , "objUserName", objUserName
                    });
            #endregion

            try
            {
                #region // Init:
                //_cf.db.LogUserId = _cf.sinf.strUserCode;
                _cf.db.BeginTransaction();

                // Write RequestLog:
                _cf.ProcessBizReq_OutSide(
                    strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    , alParamsCoupleError // alParamsCoupleError
                    );

                // Sys_User_CheckAuthentication:
                //Sys_User_CheckAuthentication(
                //    ref alParamsCoupleError
                //    , strWAUserCode
                //    , strWAUserPassword
                //    );

                // Check Access/Deny:
                //Sys_Access_CheckDenyV30(
                //    ref alParamsCoupleError
                //    , strWAUserCode
                //    , strFunctionName
                //    );
                #endregion

                #region // Mst_ManageNotify_CreateX:
                //DataSet dsGetData = null;
                {
                    Mst_ManageNotify_CreateX(
                        strTid // strTid
                        , strGwUserCode // strGwUserCode
                        , strGwPassword // strGwPassword
                        , strWAUserCode // strWAUserCode
                        , strWAUserPassword // strWAUserPassword
                        , ref alParamsCoupleError // alParamsCoupleError
                        , dtimeSys // dtimeSys
                                   ////
                        , objUserCode // objUserCode
                        , objUserName // objUserName
                        );
                }
                ////
                //CmUtils.DataUtils.MoveDataTable(ref mdsFinal, ref dsGetData);
                #endregion

                // Return Good:
                TDALUtils.DBUtils.CommitSafety(_cf.db); // Always Rollback.
                mdsFinal.AcceptChanges();
                return mdsFinal;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Rollback:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);

                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsFinal
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Rollback and Release resources:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);
                TDALUtils.DBUtils.ReleaseAllSemaphore(_cf.db_Sys, true);

                // Write ReturnLog:
                _cf.ProcessBizReturn_OutSide(
                    ref mdsFinal // mdsFinal
                    , strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    );
                #endregion
            }
        }
        public DataSet WAS_Mst_ManageNotify_Update(
            ref ArrayList alParamsCoupleError
            , RQ_Mst_ManageNotify objRQ_Mst_ManageNotify
            ////
            , out RT_Mst_ManageNotify objRT_Mst_ManageNotify
            )
        {
            #region // Temp:
            string strTid = objRQ_Mst_ManageNotify.Tid;
            objRT_Mst_ManageNotify = new RT_Mst_ManageNotify();
            DataSet mdsResult = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            DateTime dtimeSys = DateTime.UtcNow;
            //DataSet mdsExec = null;
            //DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(objRQ_Mst_ManageNotify.Tid);
            //int nTidSeq = 0;
            //bool bNeedTransaction = true;
            string strFunctionName = "WAS_Mst_ManageNotify_Update";
            string strErrorCodeDefault = TError.ErridnInventory.WAS_Mst_ManageNotify_Update;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
				});
            #endregion

            try
            {
                #region // Init:
                #endregion

                #region // Refine and Check Input:
                List<Mst_ManageNotify> lst_Mst_ManageNotify = new List<Mst_ManageNotify>();
                #endregion

                #region // Mst_ManageNotify_Update:
                mdsResult = Mst_ManageNotify_Update(
                    objRQ_Mst_ManageNotify.Tid // strTid
                    , objRQ_Mst_ManageNotify.GwUserCode // strGwUserCode
                    , objRQ_Mst_ManageNotify.GwPassword // strGwPassword
                    , objRQ_Mst_ManageNotify.WAUserCode // strUserCode
                    , objRQ_Mst_ManageNotify.WAUserPassword // strUserPassword
                    , ref alParamsCoupleError // alParamsCoupleError
                                              ////
                    , objRQ_Mst_ManageNotify.Mst_ManageNotify.UserCode // objUserCode
                    , objRQ_Mst_ManageNotify.Mst_ManageNotify.UserName // objUserName
                    , objRQ_Mst_ManageNotify.Mst_ManageNotify.LogLUDTimeUTC // objLogLUDTimeUTC
                    , objRQ_Mst_ManageNotify.Mst_ManageNotify.LogLUBy // objLogLUBy
                                                                      ////
                    , objRQ_Mst_ManageNotify.Ft_Cols_Upd // objFt_Cols_Upd
                    );
                #endregion

                // Return Good:
                return mdsResult;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsResult
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Write ReturnLog:
                //_cf.ProcessBizReturn(
                //	ref mdsResult // mdsFinal
                //	, strTid // strTid
                //	, strFunctionName // strFunctionName
                //	);
                #endregion
            }
        }
        public DataSet Mst_ManageNotify_Update(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
           ////
           , object objUserCode
            , object objUserName
            , object objLogLUDTimeUTC
            , object objLogLUBy
            ////
            , object objFt_Cols_Upd
            )
        {
            #region // Temp:
            DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            //int nTidSeq = 0;
            DateTime dtimeSys = DateTime.UtcNow;
            string strFunctionName = "Mst_ManageNotify_Update";
            string strErrorCodeDefault = TError.ErridnInventory.Mst_ManageNotify_Update;
            alParamsCoupleError.AddRange(new object[]{
                    "strFunctionName", strFunctionName
                    , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
			        ////
					, "objUserCode", objUserCode
                    , "objUserName", objUserName
                    , "objLogLUDTimeUTC", objLogLUDTimeUTC
                    , "objLogLUBy", objLogLUBy
                    ////
                    , "objFt_Cols_Upd", objFt_Cols_Upd
                    });
            #endregion

            try
            {
                #region // Init:
                //_cf.db.LogUserId = _cf.sinf.strUserCode;
                _cf.db.BeginTransaction();

                // Write RequestLog:
                _cf.ProcessBizReq_OutSide(
                    strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    , alParamsCoupleError // alParamsCoupleError
                    );

                // Sys_User_CheckAuthentication:
                //Sys_User_CheckAuthentication(
                //    ref alParamsCoupleError
                //    , strWAUserCode
                //    , strWAUserPassword
                //    );

                // Check Access/Deny:
                //Sys_Access_CheckDenyV30(
                //    ref alParamsCoupleError
                //    , strWAUserCode
                //    , strFunctionName
                //    );
                #endregion

                #region // Mst_ManageNotify_UpdateX:
                //DataSet dsGetData = null;
                {
                    Mst_ManageNotify_UpdateX(
                        strTid // strTid
                        , strGwUserCode // strGwUserCode
                        , strGwPassword // strGwPassword
                        , strWAUserCode // strWAUserCode
                        , strWAUserPassword // strWAUserPassword
                        , ref alParamsCoupleError // alParamsCoupleError
                        , dtimeSys // dtimeSys
                                   ////
                        , objUserCode // objUserCode
                        , objUserName // objUserName
                        , objLogLUDTimeUTC // objLogLUDTimeUTC
                        , objLogLUBy // objLogLUBy
                                     ////
                        , objFt_Cols_Upd // objFt_Cols_Upd
                        );
                }
                ////
                //CmUtils.DataUtils.MoveDataTable(ref mdsFinal, ref dsGetData);
                #endregion

                // Return Good:
                TDALUtils.DBUtils.CommitSafety(_cf.db);
                mdsFinal.AcceptChanges();
                return mdsFinal;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Rollback:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);

                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsFinal
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Rollback and Release resources:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);
                TDALUtils.DBUtils.ReleaseAllSemaphore(_cf.db_Sys, true);

                // Write ReturnLog:
                _cf.ProcessBizReturn_OutSide(
                    ref mdsFinal // mdsFinal
                    , strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    );
                #endregion
            }
        }
        public DataSet WAS_Mst_ManageNotify_Delete(
            ref ArrayList alParamsCoupleError
            , RQ_Mst_ManageNotify objRQ_Mst_ManageNotify
            ////
            , out RT_Mst_ManageNotify objRT_Mst_ManageNotify
            )
        {
            #region // Temp:
            string strTid = objRQ_Mst_ManageNotify.Tid;
            objRT_Mst_ManageNotify = new RT_Mst_ManageNotify();
            DataSet mdsResult = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            DateTime dtimeSys = DateTime.UtcNow;
            //DataSet mdsExec = null;
            //DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(objRQ_Mst_ManageNotify.Tid);
            //int nTidSeq = 0;
            //bool bNeedTransaction = true;
            string strFunctionName = "WAS_Mst_ManageNotify_Delete";
            string strErrorCodeDefault = TError.ErridnInventory.WAS_Mst_ManageNotify_Delete;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
				});
            #endregion

            try
            {
                #region // Init:
                #endregion

                #region // Refine and Check Input:
                List<Mst_ManageNotify> lst_Mst_ManageNotify = new List<Mst_ManageNotify>();
                #endregion

                #region // Mst_ManageNotify_Delete:
                mdsResult = Mst_ManageNotify_Delete(
                    objRQ_Mst_ManageNotify.Tid // strTid
                    , objRQ_Mst_ManageNotify.GwUserCode // strGwUserCode
                    , objRQ_Mst_ManageNotify.GwPassword // strGwPassword
                    , objRQ_Mst_ManageNotify.WAUserCode // strUserCode
                    , objRQ_Mst_ManageNotify.WAUserPassword // strUserPassword
                    , ref alParamsCoupleError // alParamsCoupleError
                                              ////
                    , objRQ_Mst_ManageNotify.Mst_ManageNotify.UserCode // objUserCode
                    );
                #endregion

                // Return Good:
                return mdsResult;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsResult
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Write ReturnLog:
                //_cf.ProcessBizReturn(
                //	ref mdsResult // mdsFinal
                //	, strTid // strTid
                //	, strFunctionName // strFunctionName
                //	);
                #endregion
            }
        }
        public DataSet Mst_ManageNotify_Delete(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            ////
            , object objUserCode
            )
        {
            #region // Temp:
            DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            //int nTidSeq = 0;
            DateTime dtimeSys = DateTime.UtcNow;
            string strFunctionName = "Mst_ManageNotify_Delete";
            string strErrorCodeDefault = TError.ErridnInventory.Mst_ManageNotify_Delete;
            alParamsCoupleError.AddRange(new object[]{
                    "strFunctionName", strFunctionName
                    , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
			        ////
					, "objUserCode", objUserCode
                    });
            #endregion

            try
            {
                #region // Init:
                //_cf.db.LogUserId = _cf.sinf.strUserCode;
                _cf.db.BeginTransaction();

                // Write RequestLog:
                _cf.ProcessBizReq_OutSide(
                    strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    , alParamsCoupleError // alParamsCoupleError
                    );

                // Sys_User_CheckAuthentication:
                //Sys_User_CheckAuthentication(
                //    ref alParamsCoupleError
                //    , strWAUserCode
                //    , strWAUserPassword
                //    );

                // Check Access/Deny:
                //Sys_Access_CheckDenyV30(
                //    ref alParamsCoupleError
                //    , strWAUserCode
                //    , strFunctionName
                //    );
                #endregion

                #region // Mst_ManageNotify_DeleteX:
                //DataSet dsGetData = null;
                {
                    Mst_ManageNotify_DeleteX(
                        strTid // strTid
                        , strGwUserCode // strGwUserCode
                        , strGwPassword // strGwPassword
                        , strWAUserCode // strWAUserCode
                        , strWAUserPassword // strWAUserPassword
                        , ref alParamsCoupleError // alParamsCoupleError
                        , dtimeSys // dtimeSys
                                   ////
                        , objUserCode // objUserCode
                        );
                }
                ////
                //CmUtils.DataUtils.MoveDataTable(ref mdsFinal, ref dsGetData);
                #endregion

                // Return Good:
                TDALUtils.DBUtils.CommitSafety(_cf.db);
                mdsFinal.AcceptChanges();
                return mdsFinal;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Rollback:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);

                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsFinal
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Rollback and Release resources:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);
                TDALUtils.DBUtils.ReleaseAllSemaphore(_cf.db_Sys, true);

                // Write ReturnLog:
                _cf.ProcessBizReturn_OutSide(
                    ref mdsFinal // mdsFinal
                    , strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    );
                #endregion
            }
        }
        private void Mst_ManageNotify_GetX(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            , DateTime dtimeSys
            //// Filter:
            , string strFt_RecordStart
            , string strFt_RecordCount
            , string strFt_WhereClause
            //// Return:
            , string strRt_Cols_Mst_ManageNotify
            ////
            , out DataSet dsGetData
            )
        {
            #region // Temp:
            //DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            //DateTime dtimeSys = DateTime.UtcNow;
            //bool bNeedTransaction = true;
            string strFunctionName = "Mst_ManageNotify_GetX";
            //string strErrorCodeDefault = TError.ErrHTCNM.Mnf_VIN_Get_QCX;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
                });
            #endregion

            #region // Check:
            //// Refine:
            long nFilterRecordStart = Convert.ToInt64(strFt_RecordStart);
            long nFilterRecordEnd = nFilterRecordStart + Convert.ToInt64(strFt_RecordCount) - 1;
            bool bGet_Mst_ManageNotify = (strRt_Cols_Mst_ManageNotify != null && strRt_Cols_Mst_ManageNotify.Length > 0);

            //// drAbilityOfUser:
            //DataRow drAbilityOfUser = myCache_ViewAbility_GetUserInfo(_cf.sinf.strUserCode);

            #endregion

            #region // Build Sql:
            ////
            ArrayList alParamsCoupleSql = new ArrayList();
            alParamsCoupleSql.AddRange(new object[] {
                "@nFilterRecordStart", nFilterRecordStart
                , "@nFilterRecordEnd", nFilterRecordEnd
                });
            ////
            //myCache_ViewAbility_GetDealerInfo(drAbilityOfUser);
            ////
            string strSqlGetData = CmUtils.StringUtils.Replace(@"
					---- #tbl_Mst_ManageNotify_Filter_Draft:
					select distinct
						identity(bigint, 0, 1) MyIdxSeq
						, mo.UserCode
					into #tbl_Mst_ManageNotify_Filter_Draft
					from Mst_ManageNotify mo --//[mylock]
					where (1=1)
						zzB_Where_strFilter_zzE
					order by mo.UserCode asc
					;

					---- Summary:
					select Count(0) MyCount from #tbl_Mst_ManageNotify_Filter_Draft t --//[mylock]
					;

					---- #tbl_Mst_ManageNotify_Filter:
					select
						t.*
					into #tbl_Mst_ManageNotify_Filter
					from #tbl_Mst_ManageNotify_Filter_Draft t --//[mylock]
					where (1=1)
						and (t.MyIdxSeq >= @nFilterRecordStart)
						and (t.MyIdxSeq <= @nFilterRecordEnd)
					;

					-------- Mst_ManageNotify -----:
					zzB_Select_Mst_ManageNotify_zzE
					------------------------

					---- Clear for debug:
					--drop table #tbl_Mst_ManageNotify_Filter_Draft;
					--drop table #tbl_Mst_ManageNotify_Filter;
					"
                );
            ////
            string zzB_Select_Mst_ManageNotify_zzE = "-- Nothing.";
            if (bGet_Mst_ManageNotify)
            {
                #region // bGet_Mst_ManageNotify:
                zzB_Select_Mst_ManageNotify_zzE = CmUtils.StringUtils.Replace(@"
					---- Mst_ManageNotify:
					select
						t.MyIdxSeq
						, mo.*
					from #tbl_Mst_ManageNotify_Filter t --//[mylock]
						inner join Mst_ManageNotify mo --//[mylock]
							on t.UserCode = mo.UserCode
					order by t.MyIdxSeq asc
					;
				"
                );
                #endregion
            }
            ////
            string zzB_Where_strFilter_zzE = "";
            {
                Hashtable htSpCols = new Hashtable();
                {
                    #region // htSpCols:
                    ////
                    TUtils.CUtils.MyBuildHTSupportedColumns(
                        _cf.db // db
                        , ref htSpCols // htSupportedColumns
                        , "Mst_ManageNotify" // strTableNameDB
                        , "Mst_ManageNotify." // strPrefixStd
                        , "mo." // strPrefixAlias
                        );
                    ////
                    #endregion
                }
                zzB_Where_strFilter_zzE = CmUtils.SqlUtils.BuildWhere(
                    htSpCols // htSpCols
                    , strFt_WhereClause // strClause
                    , "@p_" // strParamPrefix
                    , ref alParamsCoupleSql // alParamsCoupleSql
                    );
                zzB_Where_strFilter_zzE = (zzB_Where_strFilter_zzE.Length <= 0 ? "" : string.Format(" and ({0})", zzB_Where_strFilter_zzE));
                alParamsCoupleError.AddRange(new object[]{
                    "zzB_Where_strFilter_zzE", zzB_Where_strFilter_zzE
                    });
            }
            ////
            strSqlGetData = CmUtils.StringUtils.Replace(
                strSqlGetData
                , "zzB_Where_strFilter_zzE", zzB_Where_strFilter_zzE
                , "zzB_Select_Mst_ManageNotify_zzE", zzB_Select_Mst_ManageNotify_zzE
                );
            #endregion

            #region // Get Data:
            dsGetData = _cf.db.ExecQuery(
                strSqlGetData
                , alParamsCoupleSql.ToArray()
                );
            int nIdxTable = 0;
            dsGetData.Tables[nIdxTable++].TableName = "MySummaryTable";
            if (bGet_Mst_ManageNotify)
            {
                dsGetData.Tables[nIdxTable++].TableName = "Mst_ManageNotify";
            }
            #endregion
        }
        private void Mst_ManageNotify_CreateX(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            , DateTime dtimeSys
            //// 
            , object objUserCode
            , object objUserName
            ////
            )
        {
            #region // Temp:
            string strFunctionName = "Mst_ManageNotify_CreateX";
            //string strErrorCodeDefault = TError.ErrHTCNM.Mnf_VIN_Get_QCX;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
                , "objUserCode", objUserCode
                , "objUserName", objUserName
                });
            #endregion

            #region // Refine and Check Input:
            ////
            string strUserCode = TUtils.CUtils.StdParam(objUserCode);
            string strUserName = TUtils.CUtils.StdParam(objUserName);

            // drAbilityOfUser:
            //DataRow drAbilityOfUser = Sys_User_GetAbilityViewOfUser(_cf.sinf.strUserCode);
            ////
            DataTable dtDB_Mst_ManageNotify = null;
            {

                ////
                if (strUserCode == null || strUserCode.Length < 1)
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.strUserCode", strUserCode
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Mst_ManageNotify_Create_InvalidUserCode
                        , null
                        , alParamsCoupleError.ToArray()
                        );
                }
                ////
                Mst_ManageNotify_CheckDB(
                    ref alParamsCoupleError // alParamsCoupleError
                    , strUserCode // objUserCode
                    , TConst.Flag.No // strFlagExistToCheck
                    , "" // strFlagActiveListToCheck
                    , out dtDB_Mst_ManageNotify // dtDB_Mst_ManageNotify
                    );


                ////
                //if (strOrganName.Length < 1)
                //{
                //    alParamsCoupleError.AddRange(new object[]{
                //        "Check.strOrganName", strOrganName
                //        });
                //    throw CmUtils.CMyException.Raise(
                //        TError.ErridnInventory.Mst_ManageNotify_Create_InvalidOrganName
                //        , null
                //        , alParamsCoupleError.ToArray()
                //        );
                //}
            }
            #endregion

            #region // SaveDB Mst_ManageNotify:
            {
                // Init:
                //ArrayList alColumnEffective = new ArrayList();
                string strFN = "";
                DataRow drDB = dtDB_Mst_ManageNotify.NewRow();
                strFN = "UserCode"; drDB[strFN] = strUserCode;
                strFN = "UserName"; drDB[strFN] = strUserName;
                strFN = "LogLUDTimeUTC"; drDB[strFN] = dtimeSys.ToString("yyyy-MM-dd HH:mm:ss");
                strFN = "LogLUBy"; drDB[strFN] = strWAUserCode;
                dtDB_Mst_ManageNotify.Rows.Add(drDB);

                // Save:
                _cf.db.SaveData(
                    "Mst_ManageNotify" // strTableName
                    , dtDB_Mst_ManageNotify // dtData
                                            //, alColumnEffective.ToArray()
                    );
            }
            #endregion

            #region // Save Map_UserInNotify:
            {
                string strSqlNotityTemp = CmUtils.StringUtils.Replace(@"
                        ---- :
                        select
                            '@UserCode' UserCode
                            , t.NotifyType
                            , t.DefaultActive FlagNotify
                            , t.LogLUDTimeUTC
                            , t.LogLUBy
                        into #tbl_MapNotify
                        from Mst_NotifyType t --//[mylock]
                        where (1 = 1)
                        ;
                    "
                    , "@UserCode", strUserCode
                    );

                _cf.db.ExecQuery(strSqlNotityTemp);

                string strDelete = CmUtils.StringUtils.Replace(@"
                        ---- :
                        delete t
                        from Map_UserInNotifyType t --//[mylock]
                            inner join #tbl_MapNotify f --//[mylock]
                                on t.UserCode = f.UserCode
                                and t.NotifyType = f.NotifyType
                        where (1=1)
                        ;
                    ");

                _cf.db.ExecQuery(strDelete);

                // Map_UserInNotifyType
                string strNotifyType = CmUtils.StringUtils.Replace(@"
                        ---- :
                        insert into Map_UserInNotifyType
                        (
                            UserCode
                            , NotifyType
                            , FlagNotify
                            , LogLUDTimeUTC
                            , LogLUBy
                        )
                        select
                            t.UserCode
                            , t.NotifyType
                            , t.FlagNotify
                            , t.LogLUDTimeUTC
                            , t.LogLUBy
                        from #tbl_MapNotify t --//[mylock]
                        where (1 = 1)
                        ;
                    "
                    );

                _cf.db.ExecQuery(strNotifyType);
            }
            #endregion
        }
        private void Mst_ManageNotify_UpdateX(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            , DateTime dtimeSys
           //// 
           , object objUserCode
            , object objUserName
            , object objLogLUDTimeUTC
            , object objLogLUBy
            ////
            , object objFt_Cols_Upd
            ////
            )
        {
            #region // Temp:
            string strFunctionName = "Mst_ManageNotify_UpdateX";
            //string strErrorCodeDefault = TError.ErrHTCNM.Mnf_VIN_Get_QCX;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
                , "objUserCode", objUserCode
                , "objUserName", objUserName
                , "objLogLUDTimeUTC", objLogLUDTimeUTC
                , "objLogLUBy", objLogLUBy
                ////
                , "objFt_Cols_Upd", objFt_Cols_Upd
                });
            #endregion

            #region // Refine and Check Input:
            ////
            string strFt_Cols_Upd = TUtils.CUtils.StdParam(objFt_Cols_Upd);
            strFt_Cols_Upd = (strFt_Cols_Upd == null ? "" : strFt_Cols_Upd);
            ////
            string strUserCode = TUtils.CUtils.StdParam(objUserCode);
            string strUserName = TUtils.CUtils.StdParam(objUserName);
            string strLogLUDTimeUTC = TUtils.CUtils.StdParam(objLogLUDTimeUTC);
            string strLogLUBy = TUtils.CUtils.StdParam(objLogLUBy);
            ////
            bool bUpd_UserCode = strFt_Cols_Upd.Contains("Mst_ManageNotify.UserCode".ToUpper());
            bool bUpd_UserName = strFt_Cols_Upd.Contains("Mst_ManageNotify.UserName".ToUpper());
            bool bUpd_LogLUDTimeUTC = strFt_Cols_Upd.Contains("Mst_ManageNotify.LogLUDTimeUTC".ToUpper());
            bool bUpd_LogLUBy = strFt_Cols_Upd.Contains("Mst_ManageNotify.LogLUBy".ToUpper());

            ////
            DataTable dtDB_Mst_ManageNotify = null;
            {
                ////
                Mst_ManageNotify_CheckDB(
                    ref alParamsCoupleError // alParamsCoupleError
                    , strUserCode // strUserCode 
                    , TConst.Flag.Yes // strFlagExistToCheck
                    , "" // strFlagActiveListToCheck
                    , out dtDB_Mst_ManageNotify // dtDB_Mst_ManageNotify
                    );
                ////
                //if (bUpd_OrganName && string.IsNullOrEmpty(strOrganName))
                //{
                //    alParamsCoupleError.AddRange(new object[]{
                //        "Check.strOrganName", strOrganName
                //        });
                //    throw CmUtils.CMyException.Raise(
                //        TError.ErridnInventory.Mst_ManageNotify_UpdateX_InvalidOrganName
                //        , null
                //        , alParamsCoupleError.ToArray()
                //        );
                //}
            }
            #endregion

            #region // Save Mst_ManageNotify:
            {
                // Init:
                ArrayList alColumnEffective = new ArrayList();
                string strFN = "";
                DataRow drDB = dtDB_Mst_ManageNotify.Rows[0];
                if (bUpd_UserCode) { strFN = "UserCode"; drDB[strFN] = strUserCode; alColumnEffective.Add(strFN); }
                if (bUpd_UserName) { strFN = "UserName"; drDB[strFN] = strUserName; alColumnEffective.Add(strFN); }
                if (bUpd_LogLUDTimeUTC) { strFN = "LogLUDTimeUTC"; drDB[strFN] = strLogLUDTimeUTC; alColumnEffective.Add(strFN); }
                if (bUpd_LogLUBy) { strFN = "LogLUBy"; drDB[strFN] = strLogLUBy; alColumnEffective.Add(strFN); }
                strFN = "LogLUDTimeUTC"; drDB[strFN] = dtimeSys.ToString("yyyy-MM-dd HH:mm:ss"); alColumnEffective.Add(strFN);
                strFN = "LogLUBy"; drDB[strFN] = strWAUserCode; alColumnEffective.Add(strFN);

                // Save:
                _cf.db.SaveData(
                    "Mst_ManageNotify"
                    , dtDB_Mst_ManageNotify
                    , alColumnEffective.ToArray()
                    );
            }
            #endregion
        }
        private void Mst_ManageNotify_DeleteX(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            , DateTime dtimeSys
            //// 
            , object objUserCode
            ////
            )
        {
            #region // Temp:
            string strFunctionName = "Mst_ManageNotify_DeleteX";
            //string strErrorCodeDefault = TError.ErrHTCNM.Mnf_VIN_Get_QCX;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
                , "objUserCode", objUserCode
                });
            #endregion

            #region // Refine and Check Input:
            ////
            string strUserCode = TUtils.CUtils.StdParam(objUserCode);

            ////
            DataTable dtDB_Mst_ManageNotify = null;
            {
                ////
                Mst_ManageNotify_CheckDB(
                    ref alParamsCoupleError // alParamsCoupleError
                    , strUserCode // strUserCode 
                    , TConst.Flag.Yes // strFlagExistToCheck
                    , "" // strFlagActiveListToCheck
                    , out dtDB_Mst_ManageNotify // dtDB_Mst_ManageNotify
                    );
                ////
            }
            #endregion

            #region // SaveDB:
            {
                // Xóa Map
                string sql_Delete = CmUtils.StringUtils.Replace(@"
                        ---- :
                        delete t
                        from Map_UserInNotifyType t --//[mylock]
                        where (1=1)
                            and t.UserCode = '@strUserCode'
                    "
                    , "@strUserCode", strUserCode
                    );
                _cf.db.ExecQuery(sql_Delete);


                // Init:
                dtDB_Mst_ManageNotify.Rows[0].Delete();

                // Save:
                _cf.db.SaveData(
                    "Mst_ManageNotify"
                    , dtDB_Mst_ManageNotify
                    );
            }
            #endregion
        }
        #endregion

        #region // Map_UserInNotifyType:
        public DataSet WAS_Map_UserInNotifyType_Get(
            ref ArrayList alParamsCoupleError
            , RQ_Map_UserInNotifyType objRQ_Map_UserInNotifyType
            ////
            , out RT_Map_UserInNotifyType objRT_Map_UserInNotifyType
            )
        {
            #region // Temp:
            string strTid = objRQ_Map_UserInNotifyType.Tid;
            objRT_Map_UserInNotifyType = new RT_Map_UserInNotifyType();
            DataSet mdsResult = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            DateTime dtimeSys = DateTime.UtcNow;
            //DataSet mdsExec = null;
            //DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(objRQ_Map_UserInNotifyType.Tid);
            //int nTidSeq = 0;
            //bool bNeedTransaction = true;
            string strFunctionName = "WAS_Map_UserInNotifyType_Get";
            string strErrorCodeDefault = TError.ErridnInventory.WAS_Map_UserInNotifyType_Get;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
				});
            #endregion

            try
            {
                #region // Init:
                #endregion

                #region // Refine and Check Input:
                List<MySummaryTable> lst_MySummaryTable = new List<MySummaryTable>();
                List<Map_UserInNotifyType> lst_Map_UserInNotifyType = new List<Map_UserInNotifyType>();
                List<Mst_NotifyType> lst_Mst_NotifyType = new List<Mst_NotifyType>();
                List<Mst_ManageNotify> lst_Mst_ManageNotify = new List<Mst_ManageNotify>();

                bool bGet_Map_UserInNotifyType = (objRQ_Map_UserInNotifyType.Rt_Cols_Map_UserInNotifyType != null && objRQ_Map_UserInNotifyType.Rt_Cols_Map_UserInNotifyType.Length > 0);
                bool bGet_Mst_NotifyType = (objRQ_Map_UserInNotifyType.Rt_Cols_Rt_Cols_Mst_NotifyType != null && objRQ_Map_UserInNotifyType.Rt_Cols_Rt_Cols_Mst_NotifyType.Length > 0);
                bool bGet_Mst_ManageNotify = (objRQ_Map_UserInNotifyType.Rt_Cols_Rt_Cols_Mst_ManageNotify != null && objRQ_Map_UserInNotifyType.Rt_Cols_Rt_Cols_Mst_ManageNotify.Length > 0);
                #endregion

                #region // WS_Map_UserInNotifyType_Get:
                mdsResult = Map_UserInNotifyType_Get(
                    objRQ_Map_UserInNotifyType.Tid // strTid
                    , objRQ_Map_UserInNotifyType.GwUserCode // strGwUserCode
                    , objRQ_Map_UserInNotifyType.GwPassword // strGwPassword
                    , objRQ_Map_UserInNotifyType.WAUserCode // strUserCode
                    , objRQ_Map_UserInNotifyType.WAUserPassword // strUserPassword
                    , ref alParamsCoupleError // alParamsCoupleError
                                              //// Filter:
                    , objRQ_Map_UserInNotifyType.Ft_RecordStart // strFt_RecordStart
                    , objRQ_Map_UserInNotifyType.Ft_RecordCount // strFt_RecordCount
                    , objRQ_Map_UserInNotifyType.Ft_WhereClause // strFt_WhereClause
                                                                //// Return:
                    , objRQ_Map_UserInNotifyType.Rt_Cols_Map_UserInNotifyType // strRt_Cols_Map_UserInNotifyType
                    , objRQ_Map_UserInNotifyType.Rt_Cols_Rt_Cols_Mst_NotifyType // strRt_Cols_Map_UserInNotifyType
                    , objRQ_Map_UserInNotifyType.Rt_Cols_Rt_Cols_Mst_ManageNotify // strRt_Cols_Map_UserInNotifyType
                    );
                #endregion

                #region // GetData:
                if (!CmUtils.CMyDataSet.HasError(mdsResult))
                {
                    DataTable dt_MySummaryTable = mdsResult.Tables["MySummaryTable"].Copy();
                    lst_MySummaryTable = TUtils.DataTableCmUtils.ToListof<MySummaryTable>(dt_MySummaryTable);
                    objRT_Map_UserInNotifyType.MySummaryTable = lst_MySummaryTable[0];
                    ////
                    if (bGet_Map_UserInNotifyType)
                    {
                        DataTable dt_Map_UserInNotifyType = mdsResult.Tables["Map_UserInNotifyType"].Copy();
                        lst_Map_UserInNotifyType = TUtils.DataTableCmUtils.ToListof<Map_UserInNotifyType>(dt_Map_UserInNotifyType);
                        objRT_Map_UserInNotifyType.Lst_Map_UserInNotifyType = lst_Map_UserInNotifyType;
                    }
                    /////
                    if (bGet_Mst_NotifyType)
                    {
                        DataTable dt_Mst_NotifyType = mdsResult.Tables["Mst_NotifyType"].Copy();
                        lst_Mst_NotifyType = TUtils.DataTableCmUtils.ToListof<Mst_NotifyType>(dt_Mst_NotifyType);
                        objRT_Map_UserInNotifyType.Lst_Mst_NotifyType = lst_Mst_NotifyType;
                    }

                    if (bGet_Mst_ManageNotify)
                    {
                        DataTable dt_Mst_ManageNotify = mdsResult.Tables["Mst_ManageNotify"].Copy();
                        lst_Mst_ManageNotify = TUtils.DataTableCmUtils.ToListof<Mst_ManageNotify>(dt_Mst_ManageNotify);
                        objRT_Map_UserInNotifyType.Lst_Mst_ManageNotify = lst_Mst_ManageNotify;
                    }
                    /////
                }
                #endregion

                // Return Good:
                return mdsResult;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsResult
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Write ReturnLog:
                //_cf.ProcessBizReturn(
                //	ref mdsResult // mdsFinal
                //	, strTid // strTid
                //	, strFunctionName // strFunctionName
                //	);
                #endregion
            }
        }
        public DataSet Map_UserInNotifyType_Get(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            //// Filter:
            , string strFt_RecordStart
            , string strFt_RecordCount
            , string strFt_WhereClause
            //// Return:
            , string strRt_Cols_Map_UserInNotifyType
            , string strRt_Cols_Mst_NotifyType
            , string strRt_Cols_Mst_ManageNotify
            )
        {
            #region // Temp:
            DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            //int nTidSeq = 0;
            DateTime dtimeSys = DateTime.UtcNow;
            string strFunctionName = "Map_UserInNotifyType_Get";
            string strErrorCodeDefault = TError.ErridnInventory.Map_UserInNotifyType_Get;
            alParamsCoupleError.AddRange(new object[]{
                    "strFunctionName", strFunctionName
                    , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
			        //// Filter
					, "strFt_RecordStart", strFt_RecordStart
                    , "strFt_RecordCount", strFt_RecordCount
                    , "strFt_WhereClause", strFt_WhereClause
			        //// Return
					, "strRt_Cols_Map_UserInNotifyType", strRt_Cols_Map_UserInNotifyType
                    });
            #endregion

            try
            {
                #region // Init:
                //_cf.db.LogUserId = _cf.sinf.strUserCode;
                _cf.db.BeginTransaction();

                // Write RequestLog:
                _cf.ProcessBizReq_OutSide(
                    strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    , alParamsCoupleError // alParamsCoupleError
                    );

                // Sys_User_CheckAuthentication:
                //Sys_User_CheckAuthentication(
                //    ref alParamsCoupleError
                //    , strWAUserCode
                //    , strWAUserPassword
                //    );

                // Check Access/Deny:
                //Sys_Access_CheckDenyV30(
                //    ref alParamsCoupleError
                //    , strWAUserCode
                //    , strFunctionName
                //    );
                #endregion

                #region // Map_UserInNotifyType_GetX:
                DataSet dsGetData = null;
                {
                    Map_UserInNotifyType_GetX(
                        strTid // strTid
                        , strGwUserCode // strGwUserCode
                        , strGwPassword // strGwPassword
                        , strWAUserCode // strWAUserCode
                        , strWAUserPassword // strWAUserPassword
                        , ref alParamsCoupleError // alParamsCoupleError
                        , dtimeSys // dtimeSys
                                   ////
                        , strFt_RecordStart // strFt_RecordStart
                        , strFt_RecordCount // strFt_RecordCount
                        , strFt_WhereClause // strFt_WhereClause
                                            ////
                        , strRt_Cols_Map_UserInNotifyType // strRt_Cols_Map_UserInNotifyType
                        , strRt_Cols_Mst_NotifyType // strRt_Cols_Map_UserInNotifyType
                        , strRt_Cols_Mst_ManageNotify // strRt_Cols_Map_UserInNotifyType
                        , out dsGetData  // dsGetData
                        );
                }
                ////
                CmUtils.DataUtils.MoveDataTable(ref mdsFinal, ref dsGetData);
                #endregion

                // Return Good:
                TDALUtils.DBUtils.RollbackSafety(_cf.db); // Always Rollback.
                mdsFinal.AcceptChanges();
                return mdsFinal;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Rollback:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);

                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsFinal
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Rollback and Release resources:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);
                TDALUtils.DBUtils.ReleaseAllSemaphore(_cf.db_Sys, true);

                // Write ReturnLog:
                _cf.ProcessBizReturn_OutSide(
                    ref mdsFinal // mdsFinal
                    , strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    );
                #endregion
            }
        }

        private void Map_UserInNotifyType_GetX(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            , DateTime dtimeSys
            //// Filter:
            , string strFt_RecordStart
            , string strFt_RecordCount
            , string strFt_WhereClause
            //// Return:
            , string strRt_Cols_Map_UserInNotifyType
            , string strRt_Cols_Mst_NotifyType
            , string strRt_Cols_Mst_ManageNotify
            ////
            , out DataSet dsGetData
            )
        {
            #region // Temp:
            //DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            //DateTime dtimeSys = DateTime.UtcNow;
            //bool bNeedTransaction = true;
            string strFunctionName = "Map_UserInNotifyType_GetX";
            //string strErrorCodeDefault = TError.ErrHTCNM.Mnf_VIN_Get_QCX;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
                });
            #endregion

            #region // Check:
            //// Refine:
            long nFilterRecordStart = Convert.ToInt64(strFt_RecordStart);
            long nFilterRecordEnd = nFilterRecordStart + Convert.ToInt64(strFt_RecordCount) - 1;
            bool bGet_Map_UserInNotifyType = (strRt_Cols_Map_UserInNotifyType != null && strRt_Cols_Map_UserInNotifyType.Length > 0);
            bool bGet_Mst_NotifyType = (strRt_Cols_Mst_NotifyType != null && strRt_Cols_Mst_NotifyType.Length > 0);
            bool bGet_Mst_ManageNotify = (strRt_Cols_Mst_ManageNotify != null && strRt_Cols_Mst_ManageNotify.Length > 0);

            //// drAbilityOfUser:
            DataRow drAbilityOfUser = Sys_User_GetAbilityViewOfUser(strWAUserCode);

            #endregion

            #region // Build Sql:
            ////
            ArrayList alParamsCoupleSql = new ArrayList();
            alParamsCoupleSql.AddRange(new object[] {
                "@nFilterRecordStart", nFilterRecordStart
                , "@nFilterRecordEnd", nFilterRecordEnd
                });
            ////
            myCache_Sys_User_ViewAbilityUser_Get(drAbilityOfUser);
            ////
            string strSqlGetData = CmUtils.StringUtils.Replace(@"
					---- #tbl_Map_UserInNotifyType_Filter_Draft:
					select distinct
						identity(bigint, 0, 1) MyIdxSeq
						, mo.UserCode
                        , mo.NotifyType
					into #tbl_Map_UserInNotifyType_Filter_Draft
					from Map_UserInNotifyType mo --//[mylock]
                        inner join #tbl_Sys_User_ViewAbility_Read v_a
                            on mo.UserCode = v_a.UserCode
                        left join Mst_ManageNotify mnn --//[mylock]
                            on mo.UserCode = mnn.UserCode
                        left join Mst_NotifyType mnt --//[mylock]
                            on mo.NotifyType = mnt.NotifyType
                        left join Sys_User su --//[mylock]
                            on su.UserCode = mnn.UserCode
					where (1=1)
						zzB_Where_strFilter_zzE
					order by mo.UserCode asc
					;

					---- Summary:
					select Count(0) MyCount from #tbl_Map_UserInNotifyType_Filter_Draft t --//[mylock]
					;

					---- #tbl_Map_UserInNotifyType_Filter:
					select
						t.*
					into #tbl_Map_UserInNotifyType_Filter
					from #tbl_Map_UserInNotifyType_Filter_Draft t --//[mylock]
					where (1=1)
						and (t.MyIdxSeq >= @nFilterRecordStart)
						and (t.MyIdxSeq <= @nFilterRecordEnd)
					;

					-------- Map_UserInNotifyType -----:
					zzB_Select_Map_UserInNotifyType_zzE
					------------------------

                    -------- Map_UserInNotifyType -----:
					zzB_Select_Mst_NotifyType_zzE
					------------------------

                    -------- Mst_ManageNotify -----:
					zzB_Select_Mst_ManageNotify_zzE
					------------------------

					---- Clear for debug:
					--drop table #tbl_Map_UserInNotifyType_Filter_Draft;
					--drop table #tbl_Map_UserInNotifyType_Filter;
					"
                );
            ////
            string zzB_Select_Map_UserInNotifyType_zzE = "-- Nothing.";
            if (bGet_Map_UserInNotifyType)
            {
                #region // bGet_Map_UserInNotifyType:
                zzB_Select_Map_UserInNotifyType_zzE = CmUtils.StringUtils.Replace(@"
					---- Map_UserInNotifyType:
					select
						t.MyIdxSeq
						, mo.*
					from #tbl_Map_UserInNotifyType_Filter t --//[mylock]
						inner join Map_UserInNotifyType mo --//[mylock]
							on t.UserCode = mo.UserCode
                                and t.NotifyType = mo.NotifyType
					order by t.MyIdxSeq asc
					;
				"
                );
                #endregion
            }
            ////
            string zzB_Select_Mst_NotifyType_zzE = "-- Nothing.";
            if (bGet_Mst_NotifyType)
            {
                #region // bGet_Mst_NotifyType:
                zzB_Select_Mst_NotifyType_zzE = CmUtils.StringUtils.Replace(@"
					select distinct
                        identity(bigint, 0, 1) MyIdxSeq
	                    , t.NotifyType
                    into #tbl_Mst_NotifyType
                    from Mst_NotifyType t --//[mylock]
                        inner join #tbl_Map_UserInNotifyType_Filter f --//[mylock]
	                       on t.NotifyType = f.NotifyType
                    where (1=1)
                    ;

                    select
                        t.MyIdxSeq
                        , mo.*
                    from #tbl_Mst_NotifyType t --//[mylock]
                        inner join Mst_NotifyType mo --//[mylock]
                            on t.NotifyType = mo.NotifyType
                    order by
                        t.MyIdxSeq asc
                    ;
				"
                );
                #endregion
            }
            ////
            string zzB_Select_Mst_ManageNotify_zzE = "-- Nothing.";
            if (bGet_Map_UserInNotifyType)
            {
                #region // bGet_Mst_ManageNotify:
                zzB_Select_Mst_ManageNotify_zzE = CmUtils.StringUtils.Replace(@"
					select distinct
                        identity(bigint, 0, 1) MyIdxSeq
	                    , t.UserCode
                    into #tbl_Mst_ManageNotify
                    from Mst_ManageNotify t --//[mylock]
                        inner join #tbl_Map_UserInNotifyType_Filter f --//[mylock]
	                       on t.UserCode = f.UserCode
                    where (1=1)
                    ;

                    select
                        t.MyIdxSeq
                        , mo.UserCode
                        , mo.UserName
                        , mo.LogLUDTimeUTC
                        , mo.LogLUBy
                    from #tbl_Mst_ManageNotify t --//[mylock]
                        inner join Mst_ManageNotify mo --//[mylock]
                            on t.UserCode = mo.UserCode
                    order by
                        t.MyIdxSeq asc
                    ;
				"
                );
                #endregion
            }
            ////
            string zzB_Where_strFilter_zzE = "";
            {
                Hashtable htSpCols = new Hashtable();
                {
                    #region // htSpCols:
                    ////
                    TUtils.CUtils.MyBuildHTSupportedColumns(
                        _cf.db // db
                        , ref htSpCols // htSupportedColumns
                        , "Map_UserInNotifyType" // strTableNameDB
                        , "Map_UserInNotifyType." // strPrefixStd
                        , "mo." // strPrefixAlias
                        );
                    ////
                    #endregion

                    #region // htSpCols:
                    ////
                    TUtils.CUtils.MyBuildHTSupportedColumns(
                        _cf.db // db
                        , ref htSpCols // htSupportedColumns
                        , "Mst_NotifyType" // strTableNameDB
                        , "Mst_NotifyType." // strPrefixStd
                        , "mnt." // strPrefixAlias
                        );
                    ////
                    #endregion

                    #region // htSpCols:
                    ////
                    TUtils.CUtils.MyBuildHTSupportedColumns(
                        _cf.db // db
                        , ref htSpCols // htSupportedColumns
                        , "Mst_ManageNotify" // strTableNameDB
                        , "Mst_ManageNotify." // strPrefixStd
                        , "mnn." // strPrefixAlias
                        );
                    ////
                    #endregion

                    #region // htSpCols:
                    ////
                    TUtils.CUtils.MyBuildHTSupportedColumns(
                        _cf.db // db
                        , ref htSpCols // htSupportedColumns
                        , "Sys_User" // strTableNameDB
                        , "Sys_User." // strPrefixStd
                        , "su." // strPrefixAlias
                        );
                    ////
                    #endregion
                }
                zzB_Where_strFilter_zzE = CmUtils.SqlUtils.BuildWhere(
                    htSpCols // htSpCols
                    , strFt_WhereClause // strClause
                    , "@p_" // strParamPrefix
                    , ref alParamsCoupleSql // alParamsCoupleSql
                    );
                zzB_Where_strFilter_zzE = (zzB_Where_strFilter_zzE.Length <= 0 ? "" : string.Format(" and ({0})", zzB_Where_strFilter_zzE));
                alParamsCoupleError.AddRange(new object[]{
                    "zzB_Where_strFilter_zzE", zzB_Where_strFilter_zzE
                    });
            }
            ////
            strSqlGetData = CmUtils.StringUtils.Replace(
                strSqlGetData
                , "zzB_Where_strFilter_zzE", zzB_Where_strFilter_zzE
                , "zzB_Select_Map_UserInNotifyType_zzE", zzB_Select_Map_UserInNotifyType_zzE
                , "zzB_Select_Mst_ManageNotify_zzE", zzB_Select_Mst_ManageNotify_zzE
                , "zzB_Select_Mst_NotifyType_zzE", zzB_Select_Mst_NotifyType_zzE
                );
            #endregion

            #region // Get Data:
            dsGetData = _cf.db.ExecQuery(
                strSqlGetData
                , alParamsCoupleSql.ToArray()
                );
            int nIdxTable = 0;
            dsGetData.Tables[nIdxTable++].TableName = "MySummaryTable";
            if (bGet_Map_UserInNotifyType)
            {
                dsGetData.Tables[nIdxTable++].TableName = "Map_UserInNotifyType";
            }
            if (bGet_Map_UserInNotifyType)
            {
                dsGetData.Tables[nIdxTable++].TableName = "Mst_NotifyType";
            }
            if (bGet_Map_UserInNotifyType)
            {
                dsGetData.Tables[nIdxTable++].TableName = "Mst_ManageNotify";
            }
            #endregion
        }


        public DataSet Map_UserInNotifyType_Save(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , string strAccessToken
            , string strNetworkID
            , string strOrgID
            , string strFlagIsEndUser
            , ref ArrayList alParamsCoupleError
            ////
            , object objFlagIsDelete
            ////
            , DataSet dsData
            )
        {
            #region // Temp:
            DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            Stopwatch stopWatchFunc = new Stopwatch();
            //int nTidSeq = 0;
            DateTime dtimeSys = DateTime.UtcNow;
            string strFunctionName = "Map_UserInNotifyType_Save";
            string strErrorCodeDefault = TError.ErridnInventory.Map_UserInNotifyType_Save;
            alParamsCoupleError.AddRange(new object[]{
                    "strFunctionName", strFunctionName
                    , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
                    /////
                    , "objFlagIsDelete", objFlagIsDelete
			        ////
                    , "objRQ", TJson.JsonConvert.SerializeObject(dsData)
                    });
            #endregion

            try
            {
                #region // Init:
                //_cf.db.LogUserId = _cf.sinf.strUserCode;
                _cf.db.BeginTransaction();

                // Write RequestLog:
                _cf.ProcessBizReq_OutSide(
                    strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    , alParamsCoupleError // alParamsCoupleError
                    );

                bool bFlagIsEndUser = CmUtils.StringUtils.StringEqual(strFlagIsEndUser, TConst.Flag.Yes);
                if (!bFlagIsEndUser)
                {
                    Sys_User_CheckAuthorize(
                        strTid // strTid
                        , strGwUserCode // strGwUserCode
                        , strGwPassword // strGwPassword
                        , strWAUserCode // strWAUserCode
                                        //, strWAUserPassword // strWAUserPassword
                        , ref mdsFinal // mdsFinal
                        , ref alParamsCoupleError // alParamsCoupleError
                        , dtimeSys // dtimeSys
                        , strAccessToken // strAccessToken
                        , strNetworkID // strNetworkID
                        , strOrgID // strOrgID
                        , TConst.Flag.Active // strFlagUserCodeToCheck
                        );

                    //Check Access/ Deny:
                    Sys_Access_CheckDenyV30(
                        ref alParamsCoupleError
                        , strWAUserCode
                        , strFunctionName
                        );
                }

                // Sys_User_CheckAuthentication:
                //Sys_User_CheckAuthentication(
                //    ref alParamsCoupleError
                //    , strWAUserCode
                //    , strWAUserPassword
                //    );

                // Check Access/Deny:
                //Sys_Access_CheckDenyV30(
                //    ref alParamsCoupleError
                //    , strWAUserCode
                //    , strFunctionName
                //    );
                #endregion

                #region // Contract_Contract_SaveX:
                //DataSet dsGetData = null;
                {
                    Map_UserInNotifyType_SaveX(
                        strTid // strTid
                        , strGwUserCode // strGwUserCode
                        , strGwPassword // strGwPassword
                        , strWAUserCode // strWAUserCode
                        , strWAUserPassword // strWAUserPassword
                        , strAccessToken
                        , ref alParamsCoupleError // alParamsCoupleError
                        , dtimeSys // dtimeSys
                                   ////
                        , objFlagIsDelete // objFlagIsDelete
                                          ////
                        , dsData // dsData
                        );
                }
                ////
                //CmUtils.DataUtils.MoveDataTable(ref mdsFinal, ref dsGetData);
                #endregion

                // Return Good:
                TDALUtils.DBUtils.CommitSafety(_cf.db);
                mdsFinal.AcceptChanges();
                return mdsFinal;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Rollback:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);

                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsFinal
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Rollback and Release resources:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);
                TDALUtils.DBUtils.ReleaseAllSemaphore(_cf.db_Sys, true);

                // Write ReturnLog:
                _cf.ProcessBizReturn_OutSide(
                    ref mdsFinal // mdsFinal
                    , strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    );
                #endregion
            }
        }

        private void Map_UserInNotifyType_SaveX(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , string strAccessToken
            //, string strWAUserCodeActual
            , ref ArrayList alParamsCoupleError
            , DateTime dtimeSys
            ////
            , object objFlagIsDelete
            ////
            , DataSet dsData
            ////
            )
        {
            #region // Temp:
            //int nTidSeq = 0;
            //bool bMyDebugSql = false;
            string strFunctionName = "Map_UserInNotifyType_SaveX";
            //string strErrorCodeDefault = TError.ErridnInventory.Map_UserInNotifyType_SaveAllX;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
                ////
                , "objFlagIsDelete",objFlagIsDelete
				////
                });
            //ArrayList alPCErrEx = new ArrayList();
            ////
            Hashtable htParamsSql = new Hashtable();
            #endregion

            #region // Convert Input:
            //DataSet dsData = TUtils.CUtils.StdDS(arrobjDSData);
            //if (dsData == null) dsData = new DataSet("dsData");
            //dsData.AcceptChanges();
            alParamsCoupleError.AddRange(new object[]{
                "Check.dsData", CmUtils.XmlUtils.DataSet2XmlSimple(dsData)
                });
            #endregion

            #region // Refine and Check Input:
            ////
            DataRow drAbilityOfUser = Sys_User_GetAbilityViewOfUser(strWAUserCode);
            ////
            bool bIsDelete = CmUtils.StringUtils.StringEqual(objFlagIsDelete, TConst.Flag.Yes);
            ////
            #endregion

            #region // Refine and Check Input Map_UserInNotifyType:
            ////

            ////
            DataTable dtInput_Map_UserInNotifyType = null;
            {
                ////
                string strTableCheck = "Map_UserInNotifyType";
                ////
                if (!dsData.Tables.Contains(strTableCheck))
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.TableName", strTableCheck
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Map_UserInNotifyType_SaveX_Input_InvoiceTblNotFound
                        , null
                        , alParamsCoupleError.ToArray()
                        );
                }
                dtInput_Map_UserInNotifyType = dsData.Tables[strTableCheck];
                ////
                if (dtInput_Map_UserInNotifyType.Rows.Count < 1)
                {
                    alParamsCoupleError.AddRange(new object[]{
                        "Check.TableName", strTableCheck
                        });
                    throw CmUtils.CMyException.Raise(
                        TError.ErridnInventory.Map_UserInNotifyType_SaveX_Input_InvoiceTblInvalid
                        , null
                        , alParamsCoupleError.ToArray()
                        );
                }
                ////
                TUtils.CUtils.StdDataInTable(
                    dtInput_Map_UserInNotifyType // dtData
                    , "StdParam", "UserCode" // arrstrCouple
                    , "StdParam", "NotifyType" // arrstrCouple
                    , "StdParam", "FlagNotify" // arrstrCouple
                    );
                ////
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Map_UserInNotifyType, "LogLUDTimeUTC", typeof(object));
                TUtils.CUtils.MyForceNewColumn(ref dtInput_Map_UserInNotifyType, "LogLUBy", typeof(object));
                ////
                for (int nScan = 0; nScan < dtInput_Map_UserInNotifyType.Rows.Count; nScan++)
                {
                    DataRow drScan = dtInput_Map_UserInNotifyType.Rows[nScan];
                    ////
                    DataTable dt_Map_UserInNotifyType_CheckDB = null;

                    Map_UserInNotifyType_CheckDB(
                        ref alParamsCoupleError // alParamsCoupleError
                        , drScan["UserCode"] // strContractCode
                        , drScan["NotifyType"] // strUserCode
                        , "" // strFlagExistToCheck
                        , "" // strFlagActiveListToCheck
                        , out dt_Map_UserInNotifyType_CheckDB
                        );

                    drScan["FlagNotify"] = TUtils.CUtils.StdFlag(drScan["FlagNotify"]);
                    drScan["LogLUDTimeUTC"] = dtimeSys.ToString("yyyy-MM-dd HH:mm:ss");
                    drScan["LogLUBy"] = strWAUserCode;
                }
            }
            #endregion

            #region //// SaveTemp Map_UserInNotifyType For Check:
            //if (!bIsDelete)
            {
                // Upload:
                TUtils.CUtils.MyBuildDBDT_Common(
                    _cf.db // db
                    , "#input_Map_UserInNotifyType" // strTableName
                    , new object[] {
                            "UserCode", TConst.BizMix.Default_DBColType
                            , "NotifyType", TConst.BizMix.Default_DBColType
                            , "FlagNotify", TConst.BizMix.Default_DBColType
                            , "LogLUDTimeUTC", TConst.BizMix.Default_DBColType
                            , "LogLUBy", TConst.BizMix.Default_DBColType
                        } // arrSingleStructure
                    , dtInput_Map_UserInNotifyType // dtData
                );
            }
            #endregion

            #region // SaveDB:
            {
                //// Clear All:
                {
                    string strSqlDelete = CmUtils.StringUtils.Replace(@"
                            ---- Map_UserInNotifyType:
                            delete t
                            from Map_UserInNotifyType t --//[mylock]
                                inner join #input_Map_UserInNotifyType f --//[mylock]
                                    on t.UserCode = f.UserCode
                                    and t.NotifyType = f.NotifyType
                            where (1=1)
                            ;  
                            
						");
                    DataSet dtDB = _cf.db.ExecQuery(
                        strSqlDelete
                        );
                }

                //// Insert All:
                if (!bIsDelete)
                {
                    #region // Insert:
                    {
                        string zzzzClauseInsert_Map_UserInNotifyType_zSave = CmUtils.StringUtils.Replace(@"
                                insert into Map_UserInNotifyType
                                (
                                    UserCode
                                    , NotifyType
                                    , FlagNotify
                                    , LogLUDTimeUTC
                                    , LogLUBy
                                )
                                select
                                    t.UserCode
                                    , t.NotifyType
                                    , t.FlagNotify
                                    , t.LogLUDTimeUTC
                                    , t.LogLUBy
                                from #input_Map_UserInNotifyType t --//[mylock]
                                where (1 = 1)
                                ;
                            ");

                        string strSqlExec = CmUtils.StringUtils.Replace(@"
                                ----
                                zzzzClauseInsert_Map_UserInNotifyType_zSave
                                ----
                            "
                            , "zzzzClauseInsert_Map_UserInNotifyType_zSave", zzzzClauseInsert_Map_UserInNotifyType_zSave
                            );

                        _cf.db.ExecQuery(
                            strSqlExec
                            );

                    }
                    #endregion
                }


            }
            #endregion

            #region //// Clear For Debug:
            if (!bIsDelete)
            {
                ////
                string strSqlClearForDebug = CmUtils.StringUtils.Replace(@"
						---- Clear for Debug:
						drop table #input_Map_UserInNotifyType;
					");

                _cf.db.ExecQuery(
                    strSqlClearForDebug
                    );
                ////
            }
            else
            {
                ////
                string strSqlClearForDebug = CmUtils.StringUtils.Replace(@"
						---- Clear for Debug:
						drop table #input_Map_UserInNotifyType;
					");

                _cf.db.ExecQuery(
                    strSqlClearForDebug
                    );
                ////

            }
            #endregion

            // Return Good:
            //MyCodeLabel_Done:
            return;
            //TDALUtils.DBUtils.CommitSafety(_cf.db);
            //mdsFinal.AcceptChanges();
            //return mdsFinal;		
        }

        public DataSet WAS_Map_UserInNotifyType_Save(
            ref ArrayList alParamsCoupleError
            , RQ_Map_UserInNotifyType objRQ_Map_UserInNotifyType
            ////
            , out RT_Map_UserInNotifyType objRT_Map_UserInNotifyType
            )
        {
            #region // Temp:
            string strTid = objRQ_Map_UserInNotifyType.Tid;
            objRT_Map_UserInNotifyType = new RT_Map_UserInNotifyType();
            DataSet mdsResult = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            DateTime dtimeSys = DateTime.UtcNow;
            //DataSet mdsExec = null;
            //DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(objRQ_Map_UserInNotifyType.Tid);
            //int nTidSeq = 0;
            //bool bNeedTransaction = true;
            string strFunctionName = "WAS_Map_UserInNotifyType_Save_Root";
            string strErrorCodeDefault = TError.ErridnInventory.WAS_Map_UserInNotifyType_Save;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
                , "FlagIsDelete", objRQ_Map_UserInNotifyType.FlagIsDelete
                , "Lst_Map_UserInNotifyType", TJson.JsonConvert.SerializeObject(objRQ_Map_UserInNotifyType.Lst_Map_UserInNotifyType)
                });
            #endregion

            try
            {
                #region // Init:
                #endregion

                #region // Refine and Check Input:
                List<Map_UserInNotifyType> lst_Map_UserInNotifyType = new List<Map_UserInNotifyType>();
                #endregion

                #region // Refine and Check Input:
                ////
                DataSet dsData = new DataSet();
                {
                    ////
                    DataTable dt_Map_UserInNotifyType = TUtils.DataTableCmUtils.ToDataTable<Map_UserInNotifyType>(objRQ_Map_UserInNotifyType.Lst_Map_UserInNotifyType, "Map_UserInNotifyType");
                    dsData.Tables.Add(dt_Map_UserInNotifyType);
                    ////
                }
                #endregion

                #region // WS_Map_UserInNotifyType_Create: 
                // Map_UserInNotifyType_Save_Root_New20190704
                mdsResult = Map_UserInNotifyType_Save(
                    objRQ_Map_UserInNotifyType.Tid // strTid
                    , objRQ_Map_UserInNotifyType.GwUserCode // strGwUserCode
                    , objRQ_Map_UserInNotifyType.GwPassword // strGwPassword
                    , objRQ_Map_UserInNotifyType.WAUserCode // strUserCode
                    , objRQ_Map_UserInNotifyType.WAUserPassword // strUserPassword
                                                                //, objRQ_Map_UserInNotifyType.WAUserCodeActual // strWAUserCodeActual
                    , objRQ_Map_UserInNotifyType.AccessToken
                    , objRQ_Map_UserInNotifyType.NetworkID
                    , objRQ_Map_UserInNotifyType.OrgID
                    , objRQ_Map_UserInNotifyType.FlagIsEndUser
                    , ref alParamsCoupleError // alParamsCoupleError
                                              ////
                    , objRQ_Map_UserInNotifyType.FlagIsDelete // objFlagIsDelete
                                                              ////
                    , dsData // dsData
                             //, objRQ_Map_UserInNotifyType.FlagIsSysOutSide //FlagIsSysOutSide
                    );
                #endregion

                // Return Good:
                return mdsResult;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsResult
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Write ReturnLog:
                //_cf.ProcessBizReturn(
                //	ref mdsResult // mdsFinal
                //	, strTid // strTid
                //	, strFunctionName // strFunctionName
                //	);
                #endregion
            }
        }
        #endregion

        #region // Mst_UserMapInventory:
        private void Mst_UserMapInventory_Delete_ByUser(
            object strUserCode
            )
        {
            string strSql_Exec = CmUtils.StringUtils.Replace(@"
					delete t
					from Mst_UserMapInventory t --//[mylock]
					where (1=1)
						and t.UserCode = @strUserCode
					;
				");
            DataSet dsDB_Check = _cf.db.ExecQuery(
                strSql_Exec
                , "@strUserCode", strUserCode
                );
        }
        #endregion

        #region // Mst_Customer:
        public void Mst_Customer_UpdateDtimeUsedX(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            , DateTime dtimeSys
            ////
            , DataSet dsData
            //, string DTimeUsed
            )
        {
            #region // Temp:
            //Mst_Customer mc = new Mst_Customer();
            List<Mst_Customer> lst_Mc = new List<Mst_Customer>();
            RQ_Mst_Customer objRQ_Mst_Customer = new RQ_Mst_Customer();
            string strDTimeUsed = dtimeSys.ToString("yyyy-MM-dd HH:mm:ss");
            string strUrlNetworkID = null;
            #endregion

            #region // Refine And Check:
            DataTable dt_Mst_Customer = dsData.Tables["Mst_Customer"].Copy();
            lst_Mc = TUtils.DataTableCmUtils.ToListof<Mst_Customer>(dt_Mst_Customer);

            foreach (var item in lst_Mc)
            {
                item.DTimeUsed = strDTimeUsed;
            }
            #endregion

            #region // MstSv_Sys_User_Login
            RQ_MstSv_Sys_User objRQ_MstSv_Sys_User = new RQ_MstSv_Sys_User();
            MstSv_Sys_User objMstSv_Sys_User = new MstSv_Sys_User();
            RT_MstSv_Sys_User objRT_MstSv_Sys_User = new RT_MstSv_Sys_User();
            {
                objRQ_MstSv_Sys_User = new RQ_MstSv_Sys_User()
                {
                    MstSv_Sys_User = objMstSv_Sys_User
                    ,
                    NetworkID = nNetworkID.ToString()
                    ,
                    WAUserCode = htCacheMstParam[TConst.Mst_Param.PRODUCTCENTER_MSTSV_WAUSERCODE].ToString()
                    ,
                    WAUserPassword = htCacheMstParam[TConst.Mst_Param.PRODUCTCENTER_MSTSV_WAUSERPASSWORD].ToString()
                    ,
                    GwUserCode = htCacheMstParam[TConst.Mst_Param.PRODUCTCENTER_MSTSV_GWUSERCODE].ToString()
                    ,
                    GwPassword = htCacheMstParam[TConst.Mst_Param.PRODUCTCENTER_MSTSV_GWPASSWORD].ToString()
                    ,
                    Tid = strTid
                };
                objRT_MstSv_Sys_User = OS_MstSvPrdCenterService.Instance.WA_OS_MstPrdCenter_MstSv_Sys_User_Login(htCacheMstParam[TConst.Mst_Param.PRODUCTCENTER_MSTSV_URL].ToString(), objRQ_MstSv_Sys_User);
                strUrlNetworkID = objRT_MstSv_Sys_User.c_K_DT_Sys.Lst_c_K_DT_SysInfo[0].Remark;
            }
            #endregion

            #region // Call Services:
            if (!string.IsNullOrEmpty(strUrlNetworkID))
            {
                RT_Mst_Customer objRT_Mst_Customer = new RT_Mst_Customer();
                {
                    objRQ_Mst_Customer = new RQ_Mst_Customer()
                    {
                        Tid = strTid
                        ,
                        GwUserCode = htCacheMstParam[TConst.Mst_Param.PRODUCTCENTER_MSTSV_GWUSERCODE].ToString()
                        ,
                        GwPassword = htCacheMstParam[TConst.Mst_Param.PRODUCTCENTER_MSTSV_GWPASSWORD].ToString()
                        ,
                        WAUserCode = strWAUserCode
                        ,
                        WAUserPassword = strWAUserPassword
                        ,
                        Lst_Mst_Customer = lst_Mc
                    };
                    //strUrlNetworkID = "http://localhost:12308/";
                    string json = TJson.JsonConvert.SerializeObject(objRQ_Mst_Customer);
                    objRT_Mst_Customer = OS_MstSvPrdCenterService.Instance.WA_OS_MstPrdCenter_Mst_Customer_UpdateDTimeUsed(strUrlNetworkID, objRQ_Mst_Customer);
                }
            }
            #endregion
        }

        public DataSet Mst_Customer_UpdateDtimeUsed(
            string strTid
            , string strGwUserCode
            , string strGwPassword
            , string strWAUserCode
            , string strWAUserPassword
            , ref ArrayList alParamsCoupleError
            ////
            , DataSet dsData
            )
        {
            #region // Temp:
            DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            //int nTidSeq = 0;
            DateTime dtimeSys = DateTime.UtcNow;
            string strFunctionName = "Mst_Customer_UpdateDtimeUsed";
            string strErrorCodeDefault = TError.ErridnInventory.Mst_Customer_UpdateDtimeUsed;
            alParamsCoupleError.AddRange(new object[]{
                    "strFunctionName", strFunctionName
                    , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
			        ////
                    });
            #endregion

            try
            {
                #region // Init:
                //_cf.db.LogUserId = _cf.sinf.strUserCode;
                _cf.db.BeginTransaction();

                // Write RequestLog:
                _cf.ProcessBizReq_OutSide(
                    strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    , alParamsCoupleError // alParamsCoupleError
                    );

                // Sys_User_CheckAuthentication:
                //Sys_User_CheckAuthentication(
                //    ref alParamsCoupleError
                //    , strWAUserCode
                //    , strWAUserPassword
                //    );

                // Check Access/Deny:
                //Sys_Access_CheckDenyV30(
                //    ref alParamsCoupleError
                //    , strWAUserCode
                //    , strFunctionName
                //    );
                #endregion

                #region // Mst_Customer_UpdateDtimeUsedX:
                //DataSet dsGetData = null;
                {
                    Mst_Customer_UpdateDtimeUsedX(
                        strTid // strTid
                        , strGwUserCode // strGwUserCode
                        , strGwPassword // strGwPassword
                        , strWAUserCode // strWAUserCode
                        , strWAUserPassword // strWAUserPassword
                        , ref alParamsCoupleError // alParamsCoupleError
                        , dtimeSys // dtimeSys
                                   ////
                        , dsData
                        );
                }
                ////
                //CmUtils.DataUtils.MoveDataTable(ref mdsFinal, ref dsGetData);
                #endregion

                // Return Good:
                TDALUtils.DBUtils.CommitSafety(_cf.db); // Always Rollback.
                mdsFinal.AcceptChanges();
                return mdsFinal;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Rollback:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);

                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsFinal
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Rollback and Release resources:
                TDALUtils.DBUtils.RollbackSafety(_cf.db);
                TDALUtils.DBUtils.ReleaseAllSemaphore(_cf.db_Sys, true);

                // Write ReturnLog:
                _cf.ProcessBizReturn_OutSide(
                    ref mdsFinal // mdsFinal
                    , strTid // strTid
                    , strGwUserCode // strGwUserCode
                    , strGwPassword // strGwPassword
                    , strWAUserCode // objUserCode
                    , strFunctionName // strFunctionName
                    );
                #endregion
            }
        }

        public DataSet WAS_Mst_Customer_UpdateDtimeUsed(
            ref ArrayList alParamsCoupleError
            , RQ_Mst_Customer objRQ_Mst_Customer
            ////
            , out RT_Mst_Customer objRT_Mst_Customer
            )
        {
            #region // Temp:
            string strTid = objRQ_Mst_Customer.Tid;
            objRT_Mst_Customer = new RT_Mst_Customer();
            DataSet mdsResult = CmUtils.CMyDataSet.NewMyDataSet(strTid);
            DateTime dtimeSys = DateTime.UtcNow;
            //DataSet mdsExec = null;
            //DataSet mdsFinal = CmUtils.CMyDataSet.NewMyDataSet(objRQ_Mst_Customer.Tid);
            //int nTidSeq = 0;
            //bool bNeedTransaction = true;
            string strFunctionName = "WAS_Mst_Customer_UpdateDtimeUsed";
            string strErrorCodeDefault = TError.ErridnInventory.WAS_Mst_Customer_UpdateDtimeUsed;
            alParamsCoupleError.AddRange(new object[]{
                "strFunctionName", strFunctionName
                , "dtimeSys", dtimeSys.ToString("yyyy-MM-dd HH:mm:ss")
				////
				, "Lst_Mst_Customer", TJson.JsonConvert.SerializeObject(objRQ_Mst_Customer.Lst_Mst_Customer)
                , "Lst_UserOwner_Customer", TJson.JsonConvert.SerializeObject(objRQ_Mst_Customer.Lst_UserOwner_Customer)
				////
				});
            #endregion

            try
            {
                #region // Init:
                #endregion

                #region // Refine and Check Input:
                ////
                DataSet dsData = new DataSet();
                {
                    ////
                    DataTable dt_Mst_Customer = TUtils.DataTableCmUtils.ToDataTable<Mst_Customer>(objRQ_Mst_Customer.Lst_Mst_Customer, "Mst_Customer");
                    dsData.Tables.Add(dt_Mst_Customer);
                    ////
                }
                #endregion

                #region // Mst_Customer_UpdateDtimeUsed:
                mdsResult = Mst_Customer_UpdateDtimeUsed(
                    objRQ_Mst_Customer.Tid // strTid
                    , objRQ_Mst_Customer.GwUserCode // strGwUserCode
                    , objRQ_Mst_Customer.GwPassword // strGwPassword
                    , objRQ_Mst_Customer.WAUserCode // strUserCode
                    , objRQ_Mst_Customer.WAUserPassword // strUserPassword
                    , ref alParamsCoupleError // alParamsCoupleError
                                              ////
                    , dsData // dsData
                    );
                #endregion

                // Return Good:
                return mdsResult;
            }
            catch (Exception exc)
            {
                #region // Catch of try:
                // Return Bad:
                return TUtils.CProcessExc.Process(
                    ref mdsResult
                    , exc
                    , strErrorCodeDefault
                    , alParamsCoupleError.ToArray()
                    );
                #endregion
            }
            finally
            {
                #region // Finally of try:
                // Write ReturnLog:
                //_cf.ProcessBizReturn(
                //	ref mdsResult // mdsFinal
                //	, strTid // strTid
                //	, strFunctionName // strFunctionName
                //	);
                #endregion
            }
        }
        #endregion
    }
}
